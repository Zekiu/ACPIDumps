
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20220331
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00003BF1  0x01  "LENOVO"  "AMD AOD "  0x00000001  "INTL"   0x20180313
 02)  MCFG  0x0000003C  0x01  "LENOVO"  "CB-01   "  0x00000001  "PTEC"   0x00000002
 03)  APIC  0x00000138  0x02  "LENOVO"  "CB-01   "  0x00000000  "PTEC"   0x00000002
 04)  CRAT  0x00000EC0  0x01  "LENOVO"  "CB-01   "  0x00000001  "PTEC"   0x00000002
 05)  SSDT  0x0000390C  0x01  "LENOVO"  "Nvddable"  0x00000001  "INTL"   0x20180313
 06)  TPM2  0x00000038  0x04  "LENOVO"  "CB-01   "  0x00000002  "PTEC"   0x00000002
 07)  VFCT  0x0000D884  0x01  "LENOVO"  "CB-01   "  0x00000001  "PTEC"   0x00000002
 08)  BATB  0x0000004A  0x02  "LENOVO"  "CB-01   "  0x00000000  "PTEC"   0x00000002
 09)  SSDT  0x00001580  0x01  "LENOVO"  "AmdTable"  0x00000001  "INTL"   0x20180313
 10)  SSDT  0x000009B5  0x01  "LENOVO"  "AmdTable"  0x00000001  "INTL"   0x20180313
 11)  CDIT  0x00000029  0x01  "LENOVO"  "CB-01   "  0x00000001  "PTEC"   0x00000002
 12)  UEFI  0x000000EE  0x01  "LENOVO"  "CB-01   "  0x00000001  "PTEC"   0x00000002
 13)  IVRS  0x000001A4  0x02  "LENOVO"  "CB-01   "  0x00000001  "PTEC"   0x00000002
 14)  DSDT  0x0001179E  0x01  "LENOVO"  "AMD     "  0x00001000  "INTL"   0x20180313
 15)  SSDT  0x00000149  0x01  "LENOVO"  "AmdTable"  0x00000001  "INTL"   0x20180313
 16)  SBST  0x00000030  0x01  "LENOVO"  "CB-01   "  0x00000001  "PTEC"   0x00000002
 17)  WSMT  0x00000028  0x01  "LENOVO"  "CB-01   "  0x00000000  "PTEC"   0x00000002
 18)  SSDT  0x00003973  0x01  "LENOVO"  "AmdTable"  0x00000001  "INTL"   0x20180313
 19)  SSDT  0x00005354  0x02  "LENOVO"  "AmdTable"  0x00000001  "AMD "   0x00000001
 20)  SSDT  0x0000060E  0x01  "LENOVO"  "AmdTable"  0x00000001  "INTL"   0x20180313
 21)  SSDT  0x00007229  0x02  "LENOVO"  "AmdTable"  0x00000002  "MSFT"   0x04000000
 22)  FACP  0x00000114  0x06  "LENOVO"  "CB-01   "  0x00000003  "PTEC"   0x00000002
 23)  FPDT  0x00000034  0x01  "LENOVO"  "CB-01   "  0x00000002  "PTEC"   0x00000002
 24)  SSDT  0x0000072B  0x01  "LENOVO"  "UsbCUcsi"  0x00000001  "INTL"   0x20180313
 25)  MSDM  0x00000055  0x03  "LENOVO"  "CB-01   "  0x00000000  "PTEC"   0x00000002
 26)  SSDT  0x000014BB  0x01  "LENOVO"  "AmdTable"  0x00000001  "INTL"   0x20180313
 27)  SSDT  0x00000090  0x01  "LENOVO"  "AmdTable"  0x00000001  "INTL"   0x20180313
 28)  HPET  0x00000038  0x01  "LENOVO"  "CB-01   "  0x00000001  "PTEC"   0x00000002
 29)  SSDT  0x0000053A  0x01  "LENOVO"  "Tpm2Tabl"  0x00009999  "INTL"   0x20180313
 30)  FACS  0x00000040  0x01
 31)  BGRT  0x00000038  0x01  "LENOVO"  "CB-01   "  0x00000002  "PTEC"   0x00000002
 32)  SSDT  0x000019BC  0x01  "LENOVO"  "AmdTable"  0x00000001  "INTL"   0x20180313

Found 32 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000138
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 23
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 02
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 04
[04Fh 0079   1]                Local Apic ID : 04
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 05
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 06
[05Fh 0095   1]                Local Apic ID : 06
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 07
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 08
[06Fh 0111   1]                Local Apic ID : 08
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 09
[077h 0119   1]                Local Apic ID : 09
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0A
[07Fh 0127   1]                Local Apic ID : 0A
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0B
[087h 0135   1]                Local Apic ID : 0B
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0C
[08Fh 0143   1]                Local Apic ID : 0C
[090h 0144   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0D
[097h 0151   1]                Local Apic ID : 0D
[098h 0152   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0E
[09Fh 0159   1]                Local Apic ID : 0E
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : 0F
[0A8h 0168   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 01 [I/O APIC]
[0ADh 0173   1]                       Length : 0C
[0AEh 0174   1]                  I/O Apic ID : 20
[0AFh 0175   1]                     Reserved : 00
[0B0h 0176   4]                      Address : FEC00000
[0B4h 0180   4]                    Interrupt : 00000000

[0B8h 0184   1]                Subtable Type : 01 [I/O APIC]
[0B9h 0185   1]                       Length : 0C
[0BAh 0186   1]                  I/O Apic ID : 21
[0BBh 0187   1]                     Reserved : 00
[0BCh 0188   4]                      Address : FEC01000
[0C0h 0192   4]                    Interrupt : 00000018

[0C4h 0196   1]                Subtable Type : 02 [Interrupt Source Override]
[0C5h 0197   1]                       Length : 0A
[0C6h 0198   1]                          Bus : 00
[0C7h 0199   1]                       Source : 00
[0C8h 0200   4]                    Interrupt : 00000002
[0CCh 0204   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0CEh 0206   1]                Subtable Type : 02 [Interrupt Source Override]
[0CFh 0207   1]                       Length : 0A
[0D0h 0208   1]                          Bus : 00
[0D1h 0209   1]                       Source : 09
[0D2h 0210   4]                    Interrupt : 00000009
[0D6h 0214   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[0D8h 0216   1]                Subtable Type : 04 [Local APIC NMI]
[0D9h 0217   1]                       Length : 06
[0DAh 0218   1]                 Processor ID : 00
[0DBh 0219   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0DDh 0221   1]         Interrupt Input LINT : 01

[0DEh 0222   1]                Subtable Type : 04 [Local APIC NMI]
[0DFh 0223   1]                       Length : 06
[0E0h 0224   1]                 Processor ID : 01
[0E1h 0225   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E3h 0227   1]         Interrupt Input LINT : 01

[0E4h 0228   1]                Subtable Type : 04 [Local APIC NMI]
[0E5h 0229   1]                       Length : 06
[0E6h 0230   1]                 Processor ID : 02
[0E7h 0231   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E9h 0233   1]         Interrupt Input LINT : 01

[0EAh 0234   1]                Subtable Type : 04 [Local APIC NMI]
[0EBh 0235   1]                       Length : 06
[0ECh 0236   1]                 Processor ID : 03
[0EDh 0237   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0EFh 0239   1]         Interrupt Input LINT : 01

[0F0h 0240   1]                Subtable Type : 04 [Local APIC NMI]
[0F1h 0241   1]                       Length : 06
[0F2h 0242   1]                 Processor ID : 04
[0F3h 0243   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0F5h 0245   1]         Interrupt Input LINT : 01

[0F6h 0246   1]                Subtable Type : 04 [Local APIC NMI]
[0F7h 0247   1]                       Length : 06
[0F8h 0248   1]                 Processor ID : 05
[0F9h 0249   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0FBh 0251   1]         Interrupt Input LINT : 01

[0FCh 0252   1]                Subtable Type : 04 [Local APIC NMI]
[0FDh 0253   1]                       Length : 06
[0FEh 0254   1]                 Processor ID : 06
[0FFh 0255   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[101h 0257   1]         Interrupt Input LINT : 01

[102h 0258   1]                Subtable Type : 04 [Local APIC NMI]
[103h 0259   1]                       Length : 06
[104h 0260   1]                 Processor ID : 07
[105h 0261   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[107h 0263   1]         Interrupt Input LINT : 01

[108h 0264   1]                Subtable Type : 04 [Local APIC NMI]
[109h 0265   1]                       Length : 06
[10Ah 0266   1]                 Processor ID : 08
[10Bh 0267   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[10Dh 0269   1]         Interrupt Input LINT : 01

[10Eh 0270   1]                Subtable Type : 04 [Local APIC NMI]
[10Fh 0271   1]                       Length : 06
[110h 0272   1]                 Processor ID : 09
[111h 0273   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[113h 0275   1]         Interrupt Input LINT : 01

[114h 0276   1]                Subtable Type : 04 [Local APIC NMI]
[115h 0277   1]                       Length : 06
[116h 0278   1]                 Processor ID : 0A
[117h 0279   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[119h 0281   1]         Interrupt Input LINT : 01

[11Ah 0282   1]                Subtable Type : 04 [Local APIC NMI]
[11Bh 0283   1]                       Length : 06
[11Ch 0284   1]                 Processor ID : 0B
[11Dh 0285   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[11Fh 0287   1]         Interrupt Input LINT : 01

[120h 0288   1]                Subtable Type : 04 [Local APIC NMI]
[121h 0289   1]                       Length : 06
[122h 0290   1]                 Processor ID : 0C
[123h 0291   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[125h 0293   1]         Interrupt Input LINT : 01

[126h 0294   1]                Subtable Type : 04 [Local APIC NMI]
[127h 0295   1]                       Length : 06
[128h 0296   1]                 Processor ID : 0D
[129h 0297   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[12Bh 0299   1]         Interrupt Input LINT : 01

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : 0E
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 04 [Local APIC NMI]
[133h 0307   1]                       Length : 06
[134h 0308   1]                 Processor ID : 0F
[135h 0309   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[137h 0311   1]         Interrupt Input LINT : 01

Raw Table Data: Length 312 (0x138)

    0000: 41 50 49 43 38 01 00 00 02 23 4C 45 4E 4F 56 4F  // APIC8....#LENOVO
    0010: 43 42 2D 30 31 20 20 20 00 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 02  // ................
    0040: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 04 04  // ................
    0050: 01 00 00 00 00 08 05 05 01 00 00 00 00 08 06 06  // ................
    0060: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 08 08  // ................
    0070: 01 00 00 00 00 08 09 09 01 00 00 00 00 08 0A 0A  // ................
    0080: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0C 0C  // ................
    0090: 01 00 00 00 00 08 0D 0D 01 00 00 00 00 08 0E 0E  // ................
    00A0: 01 00 00 00 00 08 0F 0F 01 00 00 00 01 0C 20 00  // .............. .
    00B0: 00 00 C0 FE 00 00 00 00 01 0C 21 00 00 10 C0 FE  // ..........!.....
    00C0: 18 00 00 00 02 0A 00 00 02 00 00 00 00 00 02 0A  // ................
    00D0: 00 09 09 00 00 00 0F 00 04 06 00 05 00 01 04 06  // ................
    00E0: 01 05 00 01 04 06 02 05 00 01 04 06 03 05 00 01  // ................
    00F0: 04 06 04 05 00 01 04 06 05 05 00 01 04 06 06 05  // ................
    0100: 00 01 04 06 07 05 00 01 04 06 08 05 00 01 04 06  // ................
    0110: 09 05 00 01 04 06 0A 05 00 01 04 06 0B 05 00 01  // ................
    0120: 04 06 0C 05 00 01 04 06 0D 05 00 01 04 06 0E 05  // ................
    0130: 00 01 04 06 0F 05 00 01                          // ........


BATB
----
[000h 0000   4]                    Signature : "BATB"    
[004h 0004   4]                 Table Length : 0000004A
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 63
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [BATB]


Raw Table Data: Length 74 (0x4A)

    0000: 42 41 54 42 4A 00 00 00 02 63 4C 45 4E 4F 56 4F  // BATBJ....cLENOVO
    0010: 43 42 2D 30 31 20 20 20 00 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 E8 63 95 D2 E1 CF 41 4D 8E 54 DA 43  // .....c....AM.T.C
    0030: 22 FE DE 5C 36 00 00 40 37 CC 00 00 00 00 00 00  // "..\6..@7.......
    0040: 35 CC 00 00 00 00 00 00 01 00                    // 5.........


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 47
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 00000000C3B3E018
[030h 0048   4]                Image OffsetX : 00000389
[034h 0052   4]                Image OffsetY : 000001DE

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 47 4C 45 4E 4F 56 4F  // BGRT8....GLENOVO
    0010: 43 42 2D 30 31 20 20 20 02 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 01 00 01 00 18 E0 B3 C3 00 00 00 00  // ................
    0030: 89 03 00 00 DE 01 00 00                          // ........


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 32
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 32 4C 45 4E 4F 56 4F  // CDIT)....2LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00000EC0
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 7C
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 3776 (0xEC0)

    0000: 43 52 41 54 C0 0E 00 00 01 7C 4C 45 4E 4F 56 4F  // CRAT.....|LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 3B 00 00 00 00 00 00 00 00 00 00 00  // ....;...........
    0030: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 00 00 00 00 00 00 00 D0 00 00 00 00 40 00 00 00  // ............@...
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 30  // ...............0
    0070: 07 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 02 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    00B0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    00C0: 02 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    00D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    00F0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0100: 02 40 00 00 0F 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0130: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0140: 02 40 00 00 0F 00 00 00 00 00 00 00 FF 00 00 00  // .@..............
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00  // .............@..
    0170: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0180: 02 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    01B0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    01C0: 02 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    01D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01E0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    01F0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0200: 02 40 00 00 0F 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0230: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0240: 02 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0270: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0280: 02 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    02B0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    02C0: 02 40 00 00 0F 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    02F0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0300: 02 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0330: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0340: 02 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0360: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0370: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0380: 02 40 00 00 0F 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    03B0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    03C0: 02 40 00 00 0B 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    03D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03E0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    03F0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0400: 02 40 00 00 0D 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0430: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0440: 02 40 00 00 0F 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0470: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0480: 02 40 00 00 0B 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04A0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    04B0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    04C0: 02 40 00 00 0D 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    04D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04E0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    04F0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0500: 02 40 00 00 0F 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0520: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0530: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0540: 02 40 00 00 0B 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0560: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0570: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0580: 02 40 00 00 0D 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05A0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    05B0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    05C0: 02 40 00 00 0F 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    05D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    05F0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0600: 02 40 00 00 0B 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0620: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0630: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0640: 02 40 00 00 0D 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0660: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0670: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0680: 02 40 00 00 0F 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    06B0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    06C0: 03 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    06D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06E0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    06F0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0700: 03 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0720: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0730: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0740: 03 40 00 00 AB 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0760: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0770: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0780: 03 40 00 00 AD 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07A0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    07B0: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    07C0: 03 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    07D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    07F0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0800: 03 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0820: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0830: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0840: 03 40 00 00 AB 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0860: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0870: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0880: 03 40 00 00 AD 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08A0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    08B0: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    08C0: 03 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    08D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08E0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    08F0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0900: 03 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0920: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0930: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0940: 03 40 00 00 AB 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0960: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0970: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0980: 03 40 00 00 AD 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    09B0: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    09C0: 03 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    09D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09E0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    09F0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0A00: 03 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A20: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0A30: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0A40: 03 40 00 00 AB 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A60: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0A70: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0A80: 03 40 00 00 AD 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AA0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0AB0: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0AC0: 03 40 00 00 0B 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AE0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0AF0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0B00: 03 40 00 00 0D 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B20: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0B30: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0B40: 03 40 00 00 AB 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B60: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0B70: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0B80: 03 40 00 00 AD 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0B90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BA0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0BB0: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0BC0: 03 40 00 00 0B 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BE0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0BF0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0C00: 03 40 00 00 0D 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0C10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C20: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0C30: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0C40: 03 40 00 00 AB 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0C50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C60: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0C70: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0C80: 03 40 00 00 AD 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CA0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0CB0: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0CC0: 03 40 00 00 0B 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0CD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CE0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0CF0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0D00: 03 40 00 00 0D 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D20: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0D30: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0D40: 03 40 00 00 AB 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0D50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D60: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0D70: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0D80: 03 40 00 00 AD 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0D90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DA0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0DB0: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0DC0: 03 40 00 00 0B 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0DD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DE0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0DF0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0E00: 03 40 00 00 0D 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0E10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E20: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0E30: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0E40: 03 40 00 00 AB 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0E50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E60: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0E70: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0E80: 03 40 00 00 AD 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EA0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0EB0: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................


DSDT
----
DefinitionBlock ("", "DSDT", 1, "LENOVO", "AMD", 0x00001000)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.NPCF, DeviceObj)
    External (_SB_.PCI0.DGMD, UnknownObj)
    External (_SB_.PCI0.EDID, UnknownObj)
    External (_SB_.PCI0.EDOR, UnknownObj)
    External (_SB_.PCI0.EDUD, UnknownObj)
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.PEGP, DeviceObj)
    External (_SB_.PCI0.GPP0.PEGP.EDP0, DeviceObj)
    External (_SB_.PCI0.GPP0.PEGP.EDP1, DeviceObj)
    External (_SB_.PCI0.LPC0.H_EC.ALEN, UnknownObj)
    External (_SB_.PCI0.LPC0.H_EC.BPWM, UnknownObj)
    External (_SB_.PCI0.LPC0.H_EC.ECRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPC0.H_EC.ECWT, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.LPC0.H_EC.TPTA, IntObj)
    External (_SB_.PCI0.LPC0.H_EC.TPTY, IntObj)
    External (_SB_.PCI0.LPC0.PANT, UnknownObj)
    External (_SB_.PCI0.LPC0.PSD1, UnknownObj)
    External (_SB_.PCI0.M010, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PANT, UnknownObj)
    External (_SB_.PCI0.PPAB, UnknownObj)
    External (_SB_.PCI0.PTPW, UnknownObj)
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)
    External (_SB_.TPM_.PTS_, MethodObj)    // 1 Arguments
    External (EDID, IntObj)
    External (EDOR, IntObj)
    External (EDUD, IntObj)
    External (M009, MethodObj)    // 1 Arguments
    External (M010, MethodObj)    // 2 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (MPTS, MethodObj)    // 1 Arguments
    External (MWAK, MethodObj)    // 1 Arguments

    OperationRegion (SYST, SystemMemory, 0xCD379B18, 0x00000001)
    Field (SYST, AnyAcc, Lock, Preserve)
    {
        RV2,    8
    }

    Scope (_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        0x03, 
        0x00, 
        0x00
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        0x00, 
        0x00
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        0x00, 
        0x00
    })
    Name (PWL1, 0x56)
    Name (PWL2, 0xAA)
    Name (TZFG, 0x00)
    OperationRegion (DBG0, SystemIO, 0x80, 0x01)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    OperationRegion (CMOS, SystemIO, 0x70, 0x02)
    Field (CMOS, ByteAcc, Lock, Preserve)
    {
        INDX,   8, 
        DATA,   8
    }

    Method (RCMS, 1, Serialized)
    {
        INDX = Arg0
        Return (DATA) /* \DATA */
    }

    Method (WCMS, 2, Serialized)
    {
        INDX = Arg0
        DATA = Arg1
    }

    OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    Method (GSMI, 1, NotSerialized)
    {
        APMD = Arg0
        APMC = 0xE4
        Sleep (0x02)
    }

    Method (BSMI, 1, NotSerialized)
    {
        APMD = Arg0
        APMC = 0xBE
        Sleep (One)
    }

    Method (PPTS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            \_SB.PCI0.SMB.RSTU = 0x00
        }

        \_SB.PCI0.SMB.CLPS = 0x01
        \_SB.PCI0.SMB.SLPS = 0x01
        \_SB.PCI0.SMB.PEWS = \_SB.PCI0.SMB.PEWS
    }

    Method (PWAK, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            \_SB.PCI0.SMB.RSTU = 0x01
        }

        \_SB.PCI0.SMB.PEWS = \_SB.PCI0.SMB.PEWS
        \_SB.PCI0.SMB.PEWD = 0x00
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Method (TPST, 1, Serialized)
    {
        Local0 = (Arg0 + 0xB0000000)
        OperationRegion (VARM, SystemIO, 0x80, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        VARR = Local0
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        PRWP [One] = Arg1
        If ((DAS3 == Zero))
        {
            If ((Arg1 <= 0x03))
            {
                PRWP [One] = Zero
            }
        }

        Return (PRWP) /* \PRWP */
    }

    OperationRegion (GNVS, SystemMemory, 0xCD233E98, 0x0000000D)
    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        BRTL,   8, 
        CNSB,   8, 
        DAS3,   8, 
        WKPM,   8, 
        NAPC,   8, 
        PCBA,   32, 
        BLTH,   8, 
        MWTT,   8, 
        DPTC,   8, 
        WOVS,   8
    }

    OperationRegion (OGNS, SystemMemory, 0xCD233F18, 0x00000005)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        THPN,   8, 
        THPD,   8, 
        SDMO,   8, 
        TBEN,   8, 
        TBNH,   8
    }

    OperationRegion (PNVS, SystemMemory, 0xCD233F98, 0x00000002)
    Field (PNVS, AnyAcc, NoLock, Preserve)
    {
        HDSI,   8, 
        HDSO,   8
    }

    Name (LINX, 0x00)
    Name (OSSP, 0x00)
    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = 0x00
                TPOS = 0x00
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSSP = 0x01
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = 0x01
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = 0x01
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = 0x01
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = 0x01
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = 0x01
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = 0x01
                    TPOS = 0x01
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = 0x00
                    TPOS = 0x00
                }
            }
            Else
            {
                OSTB = 0x00
                TPOS = 0x00
            }

            If ((TPOS == 0x80)) {}
        }

        Return (OSTB) /* \OSTB */
    }

    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0) {})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0) {})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        PPTS (Arg0)
        If ((Arg0 == 0x05))
        {
            \_SB.PCI0.SMB.BLNK = 0x00
            If ((WKPM == One))
            {
                \_SB.PCI0.SMB.PWDE = One
            }

            BSMI (Zero)
            GSMI (0x03)
            Local1 = 0xC0
        }

        If ((Arg0 == 0x04))
        {
            \_SB.PCI0.SMB.BLNK = 0x00
            \_SB.PCI0.SMB.CLPS = 0x01
            \_SB.PCI0.SMB.RSTU = 0x01
            Local1 = 0x80
        }

        If ((Arg0 == 0x03))
        {
            \_SB.PCI0.SMB.BLNK = 0x01
            \_SB.PCI0.SMB.SLPS = 0x01
            Local1 = 0x40
        }

        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }

        \_SB.APTS (Arg0)
        MPTS (Arg0)
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        \_SB.ADP1.ACDC = 0xFF
        Notify (\_SB.ADP1, 0x80) // Status Change
        \_SB.PCI0.SMB.BLNK = 0x03
        If (\_SB.PCI0.LPC0.H_EC.ECAV)
        {
            If ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ECWR)) & 0x01))
            {
                Local0 = \_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.PAWT))
                If ((Local0 <= PWL1))
                {
                    If ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ITSM)) == 0x02))
                    {
                        \_SB.PCI0.LPC0.H_EC.FNQS (0x02)
                    }
                    ElseIf ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ITSM)) == 0x00))
                    {
                        If ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.PABD)) == 0x01))
                        {
                            \_SB.PCI0.LPC0.H_EC.ECWT (0x04, RefOf (\_SB.PCI0.LPC0.H_EC.PABD))
                        }
                        Else
                        {
                            \_SB.PCI0.LPC0.H_EC.ECWT (0x03, RefOf (\_SB.PCI0.LPC0.H_EC.PABD))
                        }

                        \_SB.PCI0.LPC0.H_EC.ECWT (0x02, RefOf (\_SB.PCI0.LPC0.H_EC.ITSM))
                        \_SB.PCI0.LPC0.H_EC.FNQS (0x02)
                        Notify (\_SB.GZFD, 0xE7) // Hardware-Specific
                        Notify (\_SB.GZFD, 0xE5) // Hardware-Specific
                    }
                    ElseIf ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ITSM)) == 0x01))
                    {
                        \_SB.PCI0.LPC0.H_EC.ECWT (0x02, RefOf (\_SB.PCI0.LPC0.H_EC.PABD))
                        \_SB.PCI0.LPC0.H_EC.ECWT (0x02, RefOf (\_SB.PCI0.LPC0.H_EC.ITSM))
                        \_SB.PCI0.LPC0.H_EC.FNQS (0x02)
                        Notify (\_SB.GZFD, 0xE7) // Hardware-Specific
                        Notify (\_SB.GZFD, 0xE5) // Hardware-Specific
                    }
                }
                ElseIf (((Local0 > PWL1) && (Local0 < PWL2)))
                {
                    If ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ITSM)) == 0x02))
                    {
                        If ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.PABD)) == 0x04))
                        {
                            \_SB.PCI0.LPC0.H_EC.ECWT (0x01, RefOf (\_SB.PCI0.LPC0.H_EC.PABD))
                            \_SB.PCI0.LPC0.H_EC.ECWT (0x00, RefOf (\_SB.PCI0.LPC0.H_EC.ITSM))
                            \_SB.PCI0.LPC0.H_EC.FNQS (0x00)
                            Notify (\_SB.GZFD, 0xE7) // Hardware-Specific
                            Notify (\_SB.GZFD, 0xE5) // Hardware-Specific
                        }
                        ElseIf ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.PABD)) == 0x03))
                        {
                            \_SB.PCI0.LPC0.H_EC.ECWT (0x00, RefOf (\_SB.PCI0.LPC0.H_EC.PABD))
                            \_SB.PCI0.LPC0.H_EC.ECWT (0x00, RefOf (\_SB.PCI0.LPC0.H_EC.ITSM))
                            \_SB.PCI0.LPC0.H_EC.FNQS (0x00)
                            Notify (\_SB.GZFD, 0xE7) // Hardware-Specific
                            Notify (\_SB.GZFD, 0xE5) // Hardware-Specific
                        }
                        ElseIf ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.PABD)) == 0x02))
                        {
                            \_SB.PCI0.LPC0.H_EC.ECWT (0x01, RefOf (\_SB.PCI0.LPC0.H_EC.PABD))
                            \_SB.PCI0.LPC0.H_EC.ECWT (0x00, RefOf (\_SB.PCI0.LPC0.H_EC.ITSM))
                            \_SB.PCI0.LPC0.H_EC.FNQS (0x00)
                            Notify (\_SB.GZFD, 0xE7) // Hardware-Specific
                            Notify (\_SB.GZFD, 0xE5) // Hardware-Specific
                        }
                        Else
                        {
                            \_SB.PCI0.LPC0.H_EC.FNQS (0x02)
                        }
                    }
                    ElseIf ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ITSM)) == 0x00))
                    {
                        \_SB.PCI0.LPC0.H_EC.FNQS (0x00)
                    }
                    ElseIf ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ITSM)) == 0x01))
                    {
                        \_SB.PCI0.LPC0.H_EC.ECWT (0x01, RefOf (\_SB.PCI0.LPC0.H_EC.PABD))
                        \_SB.PCI0.LPC0.H_EC.ECWT (0x00, RefOf (\_SB.PCI0.LPC0.H_EC.ITSM))
                        \_SB.PCI0.LPC0.H_EC.FNQS (0x00)
                        Notify (\_SB.GZFD, 0xE7) // Hardware-Specific
                        Notify (\_SB.GZFD, 0xE5) // Hardware-Specific
                    }
                }
                ElseIf ((Local0 >= PWL2))
                {
                    If ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ITSM)) == 0x02))
                    {
                        If ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.PABD)) == 0x02))
                        {
                            \_SB.PCI0.LPC0.H_EC.ECWT (0x00, RefOf (\_SB.PCI0.LPC0.H_EC.PABD))
                            \_SB.PCI0.LPC0.H_EC.ECWT (0x01, RefOf (\_SB.PCI0.LPC0.H_EC.ITSM))
                            \_SB.PCI0.LPC0.H_EC.FNQS (0x01)
                            Notify (\_SB.GZFD, 0xE7) // Hardware-Specific
                            Notify (\_SB.GZFD, 0xE5) // Hardware-Specific
                        }
                        ElseIf ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.PABD)) == 0x03))
                        {
                            \_SB.PCI0.LPC0.H_EC.ECWT (0x00, RefOf (\_SB.PCI0.LPC0.H_EC.PABD))
                            \_SB.PCI0.LPC0.H_EC.ECWT (0x00, RefOf (\_SB.PCI0.LPC0.H_EC.ITSM))
                            \_SB.PCI0.LPC0.H_EC.FNQS (0x00)
                            Notify (\_SB.GZFD, 0xE7) // Hardware-Specific
                            Notify (\_SB.GZFD, 0xE5) // Hardware-Specific
                        }
                        ElseIf ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.PABD)) == 0x04))
                        {
                            \_SB.PCI0.LPC0.H_EC.ECWT (0x00, RefOf (\_SB.PCI0.LPC0.H_EC.PABD))
                            \_SB.PCI0.LPC0.H_EC.ECWT (0x01, RefOf (\_SB.PCI0.LPC0.H_EC.ITSM))
                            \_SB.PCI0.LPC0.H_EC.FNQS (0x01)
                            Notify (\_SB.GZFD, 0xE7) // Hardware-Specific
                            Notify (\_SB.GZFD, 0xE5) // Hardware-Specific
                        }
                        Else
                        {
                            \_SB.PCI0.LPC0.H_EC.FNQS (0x02)
                        }
                    }
                    ElseIf ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ITSM)) == 0x00))
                    {
                        If ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.PABD)) == 0x01))
                        {
                            \_SB.PCI0.LPC0.H_EC.ECWT (0x00, RefOf (\_SB.PCI0.LPC0.H_EC.PABD))
                            \_SB.PCI0.LPC0.H_EC.ECWT (0x01, RefOf (\_SB.PCI0.LPC0.H_EC.ITSM))
                            \_SB.PCI0.LPC0.H_EC.FNQS (0x01)
                            Notify (\_SB.GZFD, 0xE7) // Hardware-Specific
                            Notify (\_SB.GZFD, 0xE5) // Hardware-Specific
                        }
                        Else
                        {
                            \_SB.PCI0.LPC0.H_EC.FNQS (0x00)
                        }
                    }
                    ElseIf ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ITSM)) == 0x01))
                    {
                        \_SB.PCI0.LPC0.H_EC.FNQS (0x01)
                    }
                }
            }
            ElseIf ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ITSM)) == 0x02))
            {
                If ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.PABD)) == 0x03))
                {
                    \_SB.PCI0.LPC0.H_EC.ECWT (0x00, RefOf (\_SB.PCI0.LPC0.H_EC.PABD))
                    \_SB.PCI0.LPC0.H_EC.ECWT (0x00, RefOf (\_SB.PCI0.LPC0.H_EC.ITSM))
                    \_SB.PCI0.LPC0.H_EC.FNQS (0x00)
                    Notify (\_SB.GZFD, 0xE7) // Hardware-Specific
                    Notify (\_SB.GZFD, 0xE5) // Hardware-Specific
                }
                ElseIf ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.PABD)) == 0x02))
                {
                    \_SB.PCI0.LPC0.H_EC.ECWT (0x01, RefOf (\_SB.PCI0.LPC0.H_EC.PABD))
                    \_SB.PCI0.LPC0.H_EC.ECWT (0x00, RefOf (\_SB.PCI0.LPC0.H_EC.ITSM))
                    \_SB.PCI0.LPC0.H_EC.FNQS (0x00)
                    Notify (\_SB.GZFD, 0xE7) // Hardware-Specific
                    Notify (\_SB.GZFD, 0xE5) // Hardware-Specific
                }
                ElseIf ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.PABD)) == 0x04))
                {
                    \_SB.PCI0.LPC0.H_EC.ECWT (0x01, RefOf (\_SB.PCI0.LPC0.H_EC.PABD))
                    \_SB.PCI0.LPC0.H_EC.ECWT (0x00, RefOf (\_SB.PCI0.LPC0.H_EC.ITSM))
                    \_SB.PCI0.LPC0.H_EC.FNQS (0x00)
                    Notify (\_SB.GZFD, 0xE7) // Hardware-Specific
                    Notify (\_SB.GZFD, 0xE5) // Hardware-Specific
                }
                Else
                {
                    \_SB.PCI0.LPC0.H_EC.FNQS (0x02)
                }
            }
            ElseIf ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ITSM)) == 0x00))
            {
                \_SB.PCI0.LPC0.H_EC.FNQS (0x00)
            }
            ElseIf ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ITSM)) == 0x01))
            {
                \_SB.PCI0.LPC0.H_EC.ECWT (0x01, RefOf (\_SB.PCI0.LPC0.H_EC.PABD))
                \_SB.PCI0.LPC0.H_EC.ECWT (0x00, RefOf (\_SB.PCI0.LPC0.H_EC.ITSM))
                \_SB.PCI0.LPC0.H_EC.FNQS (0x00)
                Notify (\_SB.GZFD, 0xE7) // Hardware-Specific
                Notify (\_SB.GZFD, 0xE5) // Hardware-Specific
            }

            Sleep (0x05)
            If ((Arg0 != 0x03))
            {
                Notify (\_SB.NPCF, 0xC0) // Hardware-Specific
                \_SB.PCI0.LPC0.H_EC.NVDX ()
            }
        }

        PWAK (Arg0)
        \_SB.AWAK (Arg0)
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If (GPIC)
            {
                \_SB.PCI0.LPC0.DSPI ()
                If (NAPC)
                {
                    \_SB.PCI0.NAPE ()
                }
            }

            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x03))
        {
            \_SB.PCI0.LPC0.H_EC.MAMW (0x20, 0x01)
            S3RF = 0x01
        }

        If ((\_SB.PCI0.LPC0.H_EC.TTT1 & \_SB.PCI0.LPC0.H_EC.ALEN))
        {
            Notify (\_SB.PCI0.GPP0.PEGP, 0xC0) // Hardware-Specific
            IO80 = 0xAB
        }

        MWAK (Arg0)
        Return (Zero)
    }

    Scope (_SI)
    {
        Method (_SST, 1, NotSerialized)  // _SST: System Status
        {
            If ((Arg0 == 0x01))
            {
                Debug = "===== SST Working ====="
            }

            If ((Arg0 == 0x02))
            {
                Debug = "===== SST Waking ====="
            }

            If ((Arg0 == 0x03))
            {
                Debug = "===== SST Sleeping ====="
            }

            If ((Arg0 == 0x04))
            {
                Debug = "===== SST Sleeping S4 ====="
            }
        }
    }

    Name (GPIC, 0x00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        If (Arg0)
        {
            \_SB.PCI0.LPC0.DSPI ()
            If (NAPC)
            {
                \_SB.PCI0.NAPE ()
            }
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_BBN, 0x00)  // _BBN: BIOS Bus Number
            Name (_ADR, 0x00)  // _ADR: Address
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((GPIC != Zero))
                {
                    ^LPC0.DSPI ()
                    If (NAPC)
                    {
                        NAPE ()
                    }
                }

                OSTP ()
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If ((TBEN == One))
                    {
                        If ((TBNH != Zero))
                        {
                            CTRL &= 0xFFFFFFF5
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFF4
                        }
                    }

                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    CTRL &= 0x1D
                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01)) {}
                        If ((CTRL & 0x04)) {}
                        If ((CTRL & 0x10)) {}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CTRL &= 0xF7
                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (K8ST, SystemMemory, 0xCD233A98, 0x00000068)
            Field (K8ST, AnyAcc, NoLock, Preserve)
            {
                C0_0,   16, 
                C2_0,   16, 
                C4_0,   16, 
                C6_0,   16, 
                C8_0,   16, 
                CA_0,   16, 
                CC_0,   16, 
                CE_0,   16, 
                D0_0,   16, 
                D2_0,   16, 
                D4_0,   16, 
                D6_0,   16, 
                D8_0,   16, 
                DA_0,   16, 
                DC_0,   16, 
                DE_0,   16, 
                E0_0,   16, 
                E2_0,   16, 
                E4_0,   16, 
                E6_0,   16, 
                E8_0,   16, 
                EA_0,   16, 
                EC_0,   16, 
                EE_0,   16, 
                F0_0,   16, 
                F2_0,   16, 
                F4_0,   16, 
                F6_0,   16, 
                F8_0,   16, 
                FA_0,   16, 
                FC_0,   16, 
                FE_0,   16, 
                TOML,   32, 
                TOMH,   32, 
                PCIB,   32, 
                PCIS,   32, 
                T1MN,   64, 
                T1MX,   64, 
                T1LN,   64
            }

            Name (RSRC, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C1FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C2000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C5FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C6000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000C9FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CA000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CDFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CE000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D1FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D2000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D5FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D6000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000D9FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DA000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DDFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DE000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E1FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E2000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E5FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E6000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000E9FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EA000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EDFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EE000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFC000000,         // Range Minimum
                    0xFDFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x02000000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RSRC, \_SB.PCI0._Y00._MIN, BT1S)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y00._MAX, BT1M)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y00._LEN, BT1L)  // _LEN: Length
                CreateDWordField (RSRC, \_SB.PCI0._Y01._MIN, BT2S)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y01._MAX, BT2M)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y01._LEN, BT2L)  // _LEN: Length
                Local0 = PCIB /* \_SB_.PCI0.PCIB */
                BT1S = TOML /* \_SB_.PCI0.TOML */
                BT1M = (Local0 - 0x01)
                BT1L = (Local0 - TOML) /* \_SB_.PCI0.TOML */
                CreateQWordField (RSRC, \_SB.PCI0._Y02._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateQWordField (RSRC, \_SB.PCI0._Y02._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateQWordField (RSRC, \_SB.PCI0._Y02._LEN, M1LN)  // _LEN: Length
                M1MN = T1MN /* \_SB_.PCI0.T1MN */
                M1MX = T1MX /* \_SB_.PCI0.T1MX */
                M1LN = T1LN /* \_SB_.PCI0.T1LN */
                Return (RSRC) /* \_SB_.PCI0.RSRC */
            }

            Device (MEMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (MEM1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y03)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y04)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y05)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y03._BAS, MB01)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y03._LEN, ML01)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._BAS, MB02)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._LEN, ML02)  // _LEN: Length
                    If (GPIC)
                    {
                        MB01 = 0xFEC00000
                        MB02 = 0xFEE00000
                        ML01 = 0x1000
                        If (NAPC)
                        {
                            ML01 += 0x1000
                        }

                        ML02 = 0x1000
                    }

                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._BAS, MB03)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._LEN, ML03)  // _LEN: Length
                    MB03 = PCIB /* \_SB_.PCI0.PCIB */
                    ML03 = PCIS /* \_SB_.PCI0.PCIS */
                    Return (MEM1) /* \_SB_.PCI0.MEMR.MEM1 */
                }
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                Local0 = (PCBA + 0xB8)
                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    NAPX,   32, 
                    NAPD,   32
                }

                Local1 = NAPX /* \_SB_.PCI0.NAPE.NAPX */
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPE.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                NAPX = Local1
                Release (NAPM)
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (GPIC)
                {
                    Return (Package (0x0E)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            0x00, 
                            0x28
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x01, 
                            0x00, 
                            0x29
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x02, 
                            0x00, 
                            0x2A
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            0x00, 
                            0x24
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x01, 
                            0x00, 
                            0x25
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x02, 
                            0x00, 
                            0x26
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x03, 
                            0x00, 
                            0x27
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x00, 
                            0x00, 
                            0x20
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x01, 
                            0x00, 
                            0x21
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x01, 
                            0x00, 
                            0x22
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }
                    })
                }
                Else
                {
                    Return (Package (0x0E)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x02, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            ^LPC0.LNKE, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x01, 
                            ^LPC0.LNKF, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x02, 
                            ^LPC0.LNKG, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x03, 
                            ^LPC0.LNKH, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x00, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x02, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x00, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x02, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x03, 
                            ^LPC0.LNKD, 
                            0x00
                        }
                    })
                }
            }

            OperationRegion (BAR1, PCI_Config, 0x14, 0x04)
            Field (BAR1, ByteAcc, NoLock, Preserve)
            {
                NBBA,   32
            }

            OperationRegion (PM80, SystemMemory, 0xFED80300, 0x0100)
            Field (PM80, AnyAcc, NoLock, Preserve)
            {
                Offset (0x80), 
                SI3R,   1
            }

            Name (NBRI, 0x00)
            Name (NBAR, 0x00)
            Name (NCMD, 0x00)
            Name (PXDC, 0x00)
            Name (PXLC, 0x00)
            Name (PXD2, 0x00)
            Name (CBPW, 0x32)
            Name (CPSF, 0x02)
            OperationRegion (BTWF, SystemMemory, 0xFC022408, 0xFF)
            Field (BTWF, DWordAcc, NoLock, Preserve)
            {
                HWAC,   32
            }

            OperationRegion (XMOS, SystemIO, 0x72, 0x02)
            Field (XMOS, ByteAcc, Lock, Preserve)
            {
                IO72,   8, 
                IO73,   8
            }

            Method (WXMS, 2, NotSerialized)
            {
                IO72 = Arg0
                IO73 = Arg1
            }

            Method (RXMS, 1, NotSerialized)
            {
                IO72 = Arg0
                Return (IO73) /* \_SB_.PCI0.IO73 */
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x08, Zero))
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x18
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x19
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x1A
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x1B
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x08, Zero))
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x1C
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x1D
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x1E
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x1F
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKH, 
                                0x00
                            }
                        })
                    }
                }

                Device (DEV0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (MTDS, 0, Serialized)
                    {
                        Name (MTDS, Package (0x12)
                        {
                            0x4D, 
                            0x54, 
                            0x44, 
                            0x53, 
                            0x01, 
                            0x02, 
                            0x01, 
                            0x24, 
                            0x19, 
                            0x19, 
                            0x24, 
                            0x24, 
                            0x02, 
                            0x24, 
                            0x19, 
                            0x19, 
                            0x24, 
                            0x24
                        })
                        Return (MTDS) /* \_SB_.PCI0.GPP1.DEV0.MTDS.MTDS */
                    }

                    Method (MTGS, 0, Serialized)
                    {
                        Name (MTGS, Package (0x15)
                        {
                            0x4D, 
                            0x54, 
                            0x47, 
                            0x53, 
                            0x01, 
                            0x03, 
                            0x01, 
                            0xFF, 
                            0x00, 
                            0xFF, 
                            0x00, 
                            0x02, 
                            0xFF, 
                            0x00, 
                            0xFF, 
                            0x00, 
                            0x03, 
                            0xFF, 
                            0x00, 
                            0xFF, 
                            0x00
                        })
                        Return (MTGS) /* \_SB_.PCI0.GPP1.DEV0.MTGS.MTGS */
                    }

                    Method (MTCC, 0, Serialized)
                    {
                        Name (MTCC, Package (0x07)
                        {
                            0x4D, 
                            0x54, 
                            0x43, 
                            0x43, 
                            0x00, 
                            0x55, 
                            0x53
                        })
                        Return (MTCC) /* \_SB_.PCI0.GPP1.DEV0.MTCC.MTCC */
                    }

                    OperationRegion (WLPC, PCI_Config, 0x00, 0x90)
                    Field (WLPC, ByteAcc, NoLock, Preserve)
                    {
                        WVID,   16, 
                        Offset (0x44), 
                        ICAP,   32, 
                        ICTR,   16, 
                        Offset (0x84), 
                        MCAP,   32, 
                        MCTR,   16
                    }

                    PowerResource (WRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x01)
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            If ((WVID == 0x14C3))
                            {
                                If ((MCAP & 0x10000000))
                                {
                                    Local0 = MCTR /* \_SB_.PCI0.GPP1.DEV0.MCTR */
                                    Local0 |= 0x8000
                                    MCTR = Local0
                                }
                            }
                            ElseIf ((ICAP & 0x10000000))
                            {
                                Local0 = ICTR /* \_SB_.PCI0.GPP1.DEV0.ICTR */
                                Local0 |= 0x8000
                                ICTR = Local0
                            }
                        }
                    }

                    Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (RHRW, 0, NotSerialized)
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x0D, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x0D, Zero))
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x20
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x21
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x22
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x23
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                }

                Device (WWAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (RHRW, 0, NotSerialized)
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x0F, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x0F, Zero))
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x24
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x25
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x26
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x27
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKH, 
                                0x00
                            }
                        })
                    }
                }

                Device (RTL8)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x2C
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x2D
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x2E
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x2F
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKH, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00020004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x30
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x31
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x32
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x33
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x19, Zero))
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x26
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x27
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x24
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x25
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKH, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKF, 
                                0x00
                            }
                        })
                    }
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x07)
                        {
                            0x00010110, 
                            0x00010210, 
                            0x00010220, 
                            0x00010230, 
                            0x00010240, 
                            0x00031000, 
                            0x00032000
                        })
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (Package (0x34)
                            {
                                0x5A, 
                                0x3C, 
                                0x02, 
                                0x04, 
                                0x06, 
                                0x08, 
                                0x0A, 
                                0x0C, 
                                0x0E, 
                                0x10, 
                                0x12, 
                                0x14, 
                                0x16, 
                                0x18, 
                                0x1A, 
                                0x1C, 
                                0x1E, 
                                0x20, 
                                0x22, 
                                0x24, 
                                0x26, 
                                0x28, 
                                0x2A, 
                                0x2C, 
                                0x2E, 
                                0x30, 
                                0x32, 
                                0x34, 
                                0x36, 
                                0x38, 
                                0x3A, 
                                0x3C, 
                                0x3E, 
                                0x40, 
                                0x42, 
                                0x44, 
                                0x46, 
                                0x48, 
                                0x4A, 
                                0x4C, 
                                0x4E, 
                                0x50, 
                                0x52, 
                                0x54, 
                                0x56, 
                                0x58, 
                                0x5A, 
                                0x5C, 
                                0x5E, 
                                0x60, 
                                0x62, 
                                0x64
                            })
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                            AFN7 (Local0)
                            BRTL = Arg0
                        }

                        Method (_DDC, 1, NotSerialized)  // _DDC: Display Data Current
                        {
                            If ((RXMS (0xE0) == 0x55))
                            {
                                If ((Arg0 == One))
                                {
                                    If ((PANT == 0x00))
                                    {
                                        Return (EDID) /* External reference */
                                    }
                                    ElseIf ((PANT == 0x01))
                                    {
                                        Return (EDOR) /* External reference */
                                    }
                                    ElseIf ((PANT == 0x02))
                                    {
                                        Return (EDID) /* External reference */
                                    }
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    If ((PANT == 0x00))
                                    {
                                        Return (EDID) /* External reference */
                                    }
                                    ElseIf ((PANT == 0x01))
                                    {
                                        Return (EDOR) /* External reference */
                                    }
                                    ElseIf ((PANT == 0x02))
                                    {
                                        Return (EDID) /* External reference */
                                    }
                                }

                                Return (Zero)
                            }
                            Else
                            {
                                If ((Arg0 == One))
                                {
                                    If ((PANT == 0x00))
                                    {
                                        Return (EDID) /* External reference */
                                    }
                                    ElseIf ((PANT == 0x01))
                                    {
                                        Return (EDOR) /* External reference */
                                    }
                                    ElseIf ((PANT == 0x02))
                                    {
                                        Return (EDUD) /* External reference */
                                    }
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    If ((PANT == 0x00))
                                    {
                                        Return (EDID) /* External reference */
                                    }
                                    ElseIf ((PANT == 0x01))
                                    {
                                        Return (EDOR) /* External reference */
                                    }
                                    ElseIf ((PANT == 0x02))
                                    {
                                        Return (EDUD) /* External reference */
                                    }
                                }

                                Return (Zero)
                            }
                        }
                    }
                }

                Device (PSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x19, 
                        0x03
                    })
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HSP1)
                        {
                            Name (_ADR, 0x01)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x09, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "CENTER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "OVAL",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }

                        Device (HSP2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "BACK",
                                    PLD_VerticalPosition   = "CENTER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "HORIZONTALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }

                        Device (HSP3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x0,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "BOTTOM",
                                    PLD_VerticalPosition   = "CENTER",
                                    PLD_HorizontalPosition = "RIGHT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                            OperationRegion (BTGP, SystemMemory, 0xFED8161A, 0x01)
                            Field (BTGP, AnyAcc, NoLock, Preserve)
                            {
                                    ,   6, 
                                BTPP,   1
                            }

                            PowerResource (BTPR, 0x00, 0x0000)
                            {
                                Method (_STA, 0, NotSerialized)  // _STA: Status
                                {
                                    If ((BTPP == 0x01))
                                    {
                                        Return (0x01)
                                    }
                                    Else
                                    {
                                        Return (0x00)
                                    }
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                }

                                Method (_RST, 0, Serialized)  // _RST: Device Reset
                                {
                                    BTPP = 0x00
                                    Sleep (0x012C)
                                    BTPP = 0x01
                                    Sleep (0x012C)
                                }
                            }

                            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                            {
                                BTPR
                            })
                            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                            {
                                Return (0x03)
                            }

                            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                            {
                                Return (0x03)
                            }
                        }

                        Device (HSP4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x0,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "TOP",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "ROUND",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x4,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }

                        Device (SSP1)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x09, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "CENTER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "OVAL",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }

                        Device (SSP2)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "BACK",
                                    PLD_VerticalPosition   = "CENTER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "HORIZONTALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x19, 
                        0x03
                    })
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HSP1)
                        {
                            Name (_ADR, 0x01)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x09, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "CENTER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "OVAL",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }

                        Device (HSP2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "BACK",
                                    PLD_VerticalPosition   = "CENTER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "HORIZONTALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }

                        Device (HSP3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x0,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x1,
                                    PLD_Panel              = "FRONT",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "ROUND",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x7,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                            Device (CAMA)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x0,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x1,
                                        PLD_Panel              = "FRONT",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "CENTER",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x7,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x0,
                                        PLD_EjectRequired      = 0x0,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0xFFFF,
                                        PLD_HorizontalOffset   = 0xFFFF)

                                })
                            }
                        }

                        Device (HSP4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x0,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "TOP",
                                    PLD_VerticalPosition   = "CENTER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x8,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }

                        Device (SSP1)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x09, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "CENTER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "OVAL",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }

                        Device (SSP2)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "BACK",
                                    PLD_VerticalPosition   = "CENTER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "HORIZONTALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }
                    }
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x22
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x23
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x20
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x21
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKB, 
                                0x00
                            }
                        })
                    }
                }

                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (SAT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                }
            }

            Device (GP19)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (RHRW, 0, NotSerialized)
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x08, Zero))
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x1E
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x1F
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x1C
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x1D
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKH, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKF, 
                                0x00
                            }
                        })
                    }
                }
            }

            Scope (GPP1)
            {
            }

            Scope (GPP1.DEV0)
            {
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            }

            Scope (GPP2)
            {
                Method (RHRS, 0, NotSerialized)
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0011
                            }
                        GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x00AC
                            }
                    })
                    Return (RBUF) /* \_SB_.PCI0.GPP2.RHRS.RBUF */
                }
            }

            Scope (GPP2.WWAN)
            {
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            }

            Scope (GPP3)
            {
                Method (RHRS, 0, NotSerialized)
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0018
                            }
                        GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x00AC
                            }
                    })
                    Return (RBUF) /* \_SB_.PCI0.GPP3.RHRS.RBUF */
                }
            }

            Scope (GPP3.RTL8)
            {
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            }

            Method (PXCR, 3, Serialized)
            {
                Local0 = 0x00
                Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
                While ((Local1 != 0x00))
                {
                    Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
                    If (((Local2 == 0x00) || (Local2 == 0xFF)))
                    {
                        Break
                    }

                    If ((Local2 == 0x10))
                    {
                        Local0 = Local1
                        Break
                    }

                    Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), 0x00, 0x08)
                }

                Return (Local0)
            }

            Scope (GPP5)
            {
                Device (NVME)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "StorageD3Enable", 
                                One
                            }
                        }
                    })
                }
            }

            Scope (GPP6)
            {
                Device (NVME)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "StorageD3Enable", 
                                One
                            }
                        }
                    })
                }
            }

            Device (HPET)
            {
                Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((^^SMB.HPEN == One))
                    {
                        If ((OSTB >= 0x40))
                        {
                            Return (0x0F)
                        }

                        ^^SMB.HPEN = Zero
                        Return (One)
                    }

                    Return (One)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y06)
                    })
                    CreateDWordField (BUF0, \_SB.PCI0.HPET._CRS._Y06._BAS, HPEB)  // _BAS: Base Address
                    Local0 = 0xFED00000
                    HPEB = (Local0 & 0xFFFFFC00)
                    Return (BUF0) /* \_SB_.PCI0.HPET._CRS.BUF0 */
                }
            }

            Device (SMB)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (SBRV, PCI_Config, 0x08, 0x0100)
                Field (SBRV, AnyAcc, NoLock, Preserve)
                {
                    RVID,   8, 
                    Offset (0x5A), 
                    I1F,    1, 
                    I12F,   1, 
                    Offset (0x7A), 
                        ,   2, 
                    G31O,   1, 
                    Offset (0xD9), 
                        ,   6, 
                    ACIR,   1
                }

                OperationRegion (PMIO, SystemMemory, 0xFED80300, 0x0100)
                Field (PMIO, ByteAcc, NoLock, Preserve)
                {
                        ,   6, 
                    HPEN,   1, 
                    Offset (0x60), 
                    P1EB,   16, 
                    Offset (0xF0), 
                        ,   3, 
                    RSTU,   1
                }

                OperationRegion (ERMG, SystemMemory, 0xFED81500, 0x03FF)
                Field (ERMG, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x1A), 
                    GE10,   1, 
                    Offset (0x1C), 
                    Offset (0x1E), 
                    GE11,   1, 
                    Offset (0x40), 
                    Offset (0x42), 
                    GE12,   1, 
                    Offset (0x46), 
                    GS17,   1, 
                        ,   5, 
                    GV17,   1, 
                    GE17,   1, 
                    Offset (0x108), 
                    Offset (0x10A), 
                    P33I,   1, 
                    Offset (0x10C), 
                    Offset (0x10E), 
                    P37I,   1, 
                    Offset (0x118), 
                    Offset (0x11A), 
                    P3BI,   1, 
                    Offset (0x11C), 
                    Offset (0x11E), 
                    P40I,   1
                }

                OperationRegion (ERMM, SystemMemory, 0xFED80000, 0x1000)
                Field (ERMM, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x200), 
                        ,   1, 
                    E01S,   1, 
                        ,   3, 
                    E05S,   1, 
                        ,   9, 
                    E15S,   1, 
                    E16S,   1, 
                        ,   5, 
                    E22S,   1, 
                    Offset (0x204), 
                        ,   1, 
                    E01E,   1, 
                        ,   3, 
                    E05E,   1, 
                        ,   9, 
                    E15E,   1, 
                    E16E,   1, 
                        ,   5, 
                    E22E,   1, 
                    Offset (0x208), 
                        ,   1, 
                    E01C,   1, 
                        ,   3, 
                    E05C,   1, 
                        ,   4, 
                    E10C,   1, 
                        ,   4, 
                    E15C,   1, 
                    E16C,   1, 
                        ,   4, 
                    E21C,   1, 
                    E22C,   1, 
                        ,   3, 
                    E26C,   1, 
                    Offset (0x20C), 
                        ,   1, 
                    E01L,   1, 
                        ,   3, 
                    E05L,   1, 
                        ,   9, 
                    E15L,   1, 
                    E16L,   1, 
                        ,   5, 
                    E22L,   1, 
                    Offset (0x288), 
                        ,   1, 
                    CLPS,   1, 
                    Offset (0x299), 
                        ,   7, 
                    G15A,   1, 
                    Offset (0x2AC), 
                        ,   6, 
                    SRBT,   2, 
                    Offset (0x2B0), 
                        ,   2, 
                    SLPS,   2, 
                    Offset (0x2B2), 
                        ,   4, 
                    SPBT,   2, 
                    Offset (0x362), 
                        ,   6, 
                    MT3A,   1, 
                    Offset (0x377), 
                    EPNM,   1, 
                    DPPF,   1, 
                    Offset (0x3BB), 
                        ,   6, 
                    PWDE,   1, 
                    Offset (0x3BE), 
                        ,   5, 
                    ALLS,   1, 
                    Offset (0x3C8), 
                        ,   2, 
                    TFTE,   1, 
                    Offset (0x3DF), 
                    BLNK,   2, 
                    Offset (0x3F0), 
                    PHYD,   1, 
                        ,   1, 
                        ,   1, 
                    US5R,   1, 
                    Offset (0x400), 
                    F0CT,   8, 
                    F0MS,   8, 
                    F0FQ,   8, 
                    F0LD,   8, 
                    F0MD,   8, 
                    F0MP,   8, 
                    LT0L,   8, 
                    LT0H,   8, 
                    MT0L,   8, 
                    MT0H,   8, 
                    HT0L,   8, 
                    HT0H,   8, 
                    LRG0,   8, 
                    LHC0,   8, 
                    Offset (0x410), 
                    F1CT,   8, 
                    F1MS,   8, 
                    F1FQ,   8, 
                    F1LD,   8, 
                    F1MD,   8, 
                    F1MP,   8, 
                    LT1L,   8, 
                    LT1H,   8, 
                    MT1L,   8, 
                    MT1H,   8, 
                    HT1L,   8, 
                    HT1H,   8, 
                    LRG1,   8, 
                    LHC1,   8, 
                    Offset (0x420), 
                    F2CT,   8, 
                    F2MS,   8, 
                    F2FQ,   8, 
                    F2LD,   8, 
                    F2MD,   8, 
                    F2MP,   8, 
                    LT2L,   8, 
                    LT2H,   8, 
                    MT2L,   8, 
                    MT2H,   8, 
                    HT2L,   8, 
                    HT2H,   8, 
                    LRG2,   8, 
                    LHC2,   8, 
                    Offset (0x430), 
                    F3CT,   8, 
                    F3MS,   8, 
                    F3FQ,   8, 
                    F3LD,   8, 
                    F3MD,   8, 
                    F3MP,   8, 
                    LT3L,   8, 
                    LT3H,   8, 
                    MT3L,   8, 
                    MT3H,   8, 
                    HT3L,   8, 
                    HT3H,   8, 
                    LRG3,   8, 
                    LHC3,   8, 
                    Offset (0x700), 
                    SEC,    8, 
                    Offset (0x702), 
                    MIN,    8, 
                    Offset (0xD01), 
                    MX01,   8, 
                    Offset (0xD07), 
                    MX07,   8, 
                    Offset (0xD0E), 
                    MX14,   8, 
                    MX15,   8, 
                    MX16,   8, 
                    Offset (0xD15), 
                    MX21,   8, 
                    MX22,   8, 
                    MX23,   8, 
                    Offset (0xD1B), 
                    MX27,   8, 
                    MX28,   8, 
                    Offset (0xD20), 
                    MX32,   8, 
                    MX33,   8, 
                    MX34,   8, 
                    Offset (0xD29), 
                    MX41,   8, 
                    Offset (0xD2C), 
                    MX44,   8, 
                    Offset (0xD33), 
                    MX51,   8, 
                    Offset (0xD35), 
                    MX53,   8, 
                    Offset (0xD39), 
                    MX57,   8, 
                    MX58,   8, 
                    MX59,   8, 
                    Offset (0xD42), 
                    MX66,   8, 
                    Offset (0xD66), 
                    M102,   8, 
                    Offset (0xD6C), 
                    M108,   8, 
                    Offset (0xDAA), 
                    M170,   8, 
                    Offset (0xDAF), 
                    M175,   8, 
                    M176,   8, 
                    Offset (0xDB4), 
                    M180,   8, 
                    M181,   8, 
                    M182,   8, 
                    Offset (0xDC5), 
                    M197,   8, 
                    Offset (0xDC7), 
                    M199,   8, 
                    M200,   8, 
                    Offset (0xE00), 
                    MS00,   8, 
                    MS01,   8, 
                    MS02,   8, 
                    MS03,   8, 
                    MS04,   8, 
                    Offset (0xE40), 
                    MS40,   8, 
                    Offset (0xE81), 
                        ,   2, 
                    ECES,   1
                }

                OperationRegion (P1E0, SystemIO, P1EB, 0x04)
                Field (P1E0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                        ,   6, 
                    PEWS,   1, 
                    WSTA,   1, 
                    Offset (0x03), 
                        ,   6, 
                    PEWD,   1
                }

                Method (TRMD, 0, NotSerialized)
                {
                    TFTE = Zero
                }

                Method (HTCD, 0, NotSerialized)
                {
                }

                OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
                Field (ABIO, DWordAcc, NoLock, Preserve)
                {
                    INAB,   32, 
                    DAAB,   32
                }

                Method (RDAB, 1, NotSerialized)
                {
                    INAB = Arg0
                    Return (DAAB) /* \_SB_.PCI0.SMB_.DAAB */
                }

                Method (WTAB, 2, NotSerialized)
                {
                    INAB = Arg0
                    DAAB = Arg1
                }

                Method (RWAB, 3, NotSerialized)
                {
                    Local0 = (RDAB (Arg0) & Arg1)
                    Local1 = (Local0 | Arg2)
                    WTAB (Arg0, Local1)
                }

                Method (CABR, 3, NotSerialized)
                {
                    Local0 = (Arg0 << 0x05)
                    Local1 = (Local0 + Arg1)
                    Local2 = (Local1 << 0x18)
                    Local3 = (Local2 + Arg2)
                    Return (Local3)
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
                Field (PIRQ, ByteAcc, NoLock, Preserve)
                {
                    PIID,   8, 
                    PIDA,   8
                }

                IndexField (PIID, PIDA, ByteAcc, NoLock, Preserve)
                {
                    PIRA,   8, 
                    PIRB,   8, 
                    PIRC,   8, 
                    PIRD,   8, 
                    PIRE,   8, 
                    PIRF,   8, 
                    PIRG,   8, 
                    PIRH,   8, 
                    Offset (0x0C), 
                    SIRA,   8, 
                    SIRB,   8, 
                    SIRC,   8, 
                    SIRD,   8, 
                    PIRS,   8, 
                    Offset (0x13), 
                    HDAD,   8, 
                    Offset (0x17), 
                    SDCL,   8, 
                    Offset (0x1A), 
                    SDIO,   8, 
                    Offset (0x30), 
                    USB1,   8, 
                    Offset (0x34), 
                    USB3,   8, 
                    Offset (0x41), 
                    SATA,   8, 
                    Offset (0x62), 
                    GIOC,   8, 
                    Offset (0x70), 
                    I2C0,   8, 
                    I2C1,   8, 
                    I2C2,   8, 
                    I2C3,   8, 
                    URT0,   8, 
                    URT1,   8
                }

                Name (IPRS, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,5,6,10,11}
                })
                Name (UPRS, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Exclusive, )
                        {15}
                })
                OperationRegion (KBDD, SystemIO, 0x64, 0x01)
                Field (KBDD, ByteAcc, NoLock, Preserve)
                {
                    PD64,   8
                }

                Method (DSPI, 0, NotSerialized)
                {
                    INTA (0x1F)
                    INTB (0x1F)
                    INTC (0x1F)
                    INTD (0x1F)
                    Local1 = PD64 /* \_SB_.PCI0.LPC0.PD64 */
                    PIRE = 0x1F
                    PIRF = 0x1F
                    PIRG = 0x1F
                    PIRH = 0x1F
                }

                Method (INTA, 1, NotSerialized)
                {
                    PIRA = Arg0
                    If (GPIC)
                    {
                        HDAD = Arg0
                        SDCL = Arg0
                    }
                }

                Method (INTB, 1, NotSerialized)
                {
                    PIRB = Arg0
                }

                Method (INTC, 1, NotSerialized)
                {
                    PIRC = Arg0
                    If (GPIC)
                    {
                        USB1 = Arg0
                        USB3 = Arg0
                    }
                }

                Method (INTD, 1, NotSerialized)
                {
                    PIRD = Arg0
                    If (GPIC)
                    {
                        SATA = Arg0
                    }
                }

                Device (LNKA)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRA)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTA (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRA) /* \_SB_.PCI0.LPC0.PIRA */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTA (Local0)
                    }
                }

                Device (LNKB)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRB)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTB (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRB) /* \_SB_.PCI0.LPC0.PIRB */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTB (Local0)
                    }
                }

                Device (LNKC)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRC)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTC (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRC) /* \_SB_.PCI0.LPC0.PIRC */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTC (Local0)
                    }
                }

                Device (LNKD)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRD)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTD (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRD) /* \_SB_.PCI0.LPC0.PIRD */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTD (Local0)
                    }
                }

                Device (LNKE)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRE)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRE = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRE) /* \_SB_.PCI0.LPC0.PIRE */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRE = Local0
                    }
                }

                Device (LNKF)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRF)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRF = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRF) /* \_SB_.PCI0.LPC0.PIRF */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRF = Local0
                    }
                }

                Device (LNKG)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRG)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRG = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRG) /* \_SB_.PCI0.LPC0.PIRG */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRG = Local0
                    }
                }

                Device (LNKH)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x08)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRH)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRH = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRH) /* \_SB_.PCI0.LPC0.PIRH */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRH = Local0
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((^^^SMB.HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.RTC_.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TIME)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((^^^SMB.HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.TIME.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.TIME.BUF1 */
                    }
                }

                Device (KBC0)
                {
                    Name (_HID, "FUJ7401")  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Device (MSE0)
                {
                    Name (_HID, "PTL0003")  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {12}
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                    }

                    Name (MSP0, 0x00)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (MSP0) /* \_SB_.PCI0.LPC0.MSE0.MSP0 */
                    }
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0xD0,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                    })
                }

                OperationRegion (LPCS, PCI_Config, 0xA0, 0x04)
                Field (LPCS, DWordAcc, NoLock, Preserve)
                {
                    SPBA,   32
                }

                Device (MEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (MSRC, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y07)
                        Memory32Fixed (ReadWrite,
                            0xFEC10000,         // Address Base
                            0x00000020,         // Address Length
                            _Y08)
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED61000,         // Address Base
                            0x00000400,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED80000,         // Address Base
                            0x00001000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y07._BAS, BARX)  // _BAS: Base Address
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y07._LEN, GALN)  // _LEN: Length
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y08._BAS, MB01)  // _BAS: Base Address
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y08._LEN, ML01)  // _LEN: Length
                        Local0 = SPBA /* \_SB_.PCI0.LPC0.SPBA */
                        MB01 = (Local0 & 0xFFFFFFE0)
                        Local0 = NBBA /* \_SB_.PCI0.NBBA */
                        If (Local0)
                        {
                            GALN = 0x1000
                            BARX = (Local0 & 0xFFFFFFF0)
                        }

                        Return (MSRC) /* \_SB_.PCI0.LPC0.MEM_.MSRC */
                    }
                }

                Device (H_EC)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (ECON, One)
                    Name (ECAV, Zero)
                    Mutex (ECMT, 0x00)
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BFFR, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0062,             // Range Minimum
                                0x0062,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0066,             // Range Minimum
                                0x0066,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                                )
                                {   // Pin list
                                    0x0016
                                }
                        })
                        Return (BFFR) /* \_SB_.PCI0.LPC0.H_EC._CRS.BFFR */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((ECON == One))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    OperationRegion (ECF2, SystemMemory, 0xFE00D400, 0xFF)
                    Field (ECF2, ByteAcc, Lock, Preserve)
                    {
                        VCMD,   8, 
                        VDAT,   8, 
                        VPCS,   8, 
                        Offset (0x06), 
                        FANS,   8, 
                        FA2S,   8, 
                        FCST,   1, 
                        CTMD,   1, 
                        CAC1,   1, 
                        KBST,   1, 
                        KBBL,   2, 
                        ICCT,   1, 
                        KBCT,   1, 
                        YLST,   1, 
                        YLBL,   2, 
                        YLCT,   1, 
                        ICST,   1, 
                        ICBL,   3, 
                        Offset (0x0F), 
                        CIBM,   1, 
                        CIVC,   1, 
                        UCST,   1, 
                        UCVC,   1, 
                        HKSS,   1, 
                        HKVC,   1, 
                        KLST,   1, 
                        KBVC,   1, 
                        Offset (0x14), 
                        HTKS,   8, 
                        HTKE,   8, 
                        Offset (0x17), 
                        TSR1,   8, 
                        TSR2,   8, 
                        TSR3,   8, 
                        TSR4,   8, 
                        TSR5,   8, 
                        TSR6,   8, 
                        TSR7,   8, 
                        BLCF,   1, 
                        Offset (0x1F), 
                        Offset (0x20), 
                        LSTE,   1, 
                            ,   1, 
                        BNOV,   1, 
                        FNHK,   1, 
                        HKST,   1, 
                            ,   1, 
                        OCFL,   1, 
                        Offset (0x21), 
                        KLIW,   1, 
                        KLIR,   1, 
                        KLLV,   2, 
                        TROM,   2, 
                        GPUO,   1, 
                        GPUF,   1, 
                        TLCL,   8, 
                        GPUD,   8, 
                        Offset (0x25), 
                        AOUE,   1, 
                        CGBE,   1, 
                        WINK,   1, 
                        TOCP,   1, 
                        Offset (0x26), 
                        Offset (0x28), 
                        SMPR,   8, 
                        SMST,   8, 
                        SMAD,   8, 
                        SMCD,   8, 
                        SDAT,   16, 
                        SDA2,   16, 
                        SDA4,   32, 
                        SDA5,   32, 
                        SDA6,   32, 
                        SDA7,   32, 
                        SDA8,   32, 
                        SDA9,   32, 
                        SDAA,   32, 
                        SMCN,   8, 
                        Offset (0x60), 
                        ECWR,   8, 
                        PAWT,   8, 
                        B1SN,   16, 
                        B1DC,   16, 
                        B1FV,   16, 
                        B1FC,   16, 
                        Offset (0x6C), 
                        B1CR,   16, 
                        B1RC,   16, 
                        B1VT,   16, 
                        Offset (0x74), 
                        BCYC,   16, 
                        Offset (0x77), 
                            ,   7, 
                        XX10,   1, 
                        B1DA,   16, 
                        B1TP,   16, 
                        Offset (0x7D), 
                        MIDL,   8, 
                        MIDH,   8, 
                        HIDL,   8, 
                        HIDH,   8, 
                        FWVL,   8, 
                        FWVH,   8, 
                        DAVL,   8, 
                        DAVH,   8, 
                        B1ST,   8, 
                        BFUD,   16, 
                        ADPI,   8, 
                        Offset (0x8A), 
                        B1TE,   16, 
                        B1TF,   16, 
                        Offset (0x90), 
                            ,   1, 
                        FUEN,   1, 
                        Offset (0x91), 
                        EDCC,   1, 
                        ALSC,   1, 
                        CDMB,   1, 
                        CCSB,   1, 
                        BTSM,   1, 
                        BTCM,   1, 
                        LBTM,   1, 
                        CSBM,   1, 
                        HYMS,   1, 
                        HDME,   1, 
                        HGMF,   1, 
                        SWCS,   1, 
                        CREA,   1, 
                        DCRC,   1, 
                        ALSS,   1, 
                        UCFG,   1, 
                        IPEN,   1, 
                        MBBD,   1, 
                        SBBD,   1, 
                        QCFG,   1, 
                        QCEN,   1, 
                        UCSA,   1, 
                        HKSA,   1, 
                        Offset (0x94), 
                        EDCF,   1, 
                        BTCF,   1, 
                        HSMG,   1, 
                        O72H,   1, 
                        BLEG,   1, 
                        BTMF,   1, 
                        ATOM,   1, 
                        Offset (0x95), 
                        PERM,   1, 
                        TEMM,   1, 
                        Offset (0x96), 
                        BATM,   8, 
                        BBHL,   8, 
                        BBLP,   8, 
                        BBHM,   8, 
                        Offset (0x9F), 
                        TPTY,   8, 
                        LSKV,   8, 
                        WAKS,   8, 
                        SPMO,   8, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        HKDB,   1, 
                        Offset (0xA4), 
                        Offset (0xB0), 
                        BDN1,   128, 
                        BVN1,   128, 
                        Offset (0xE0), 
                        DGPU,   8, 
                        PABD,   8, 
                        Offset (0xE3), 
                        BPWM,   8, 
                        ITSM,   8, 
                        GPUP,   8, 
                        HMFG,   8, 
                        ECRS,   8, 
                        PNOD,   8, 
                        PSKU,   8, 
                        LESR,   8, 
                        TTT1,   8, 
                        Offset (0xF0), 
                            ,   3, 
                        BLOF,   1, 
                            ,   2, 
                        DRMD,   1, 
                        Offset (0xF1), 
                        OCCS,   8, 
                        COCC,   8, 
                        GOCC,   8, 
                        GCCO,   8, 
                        GCOP,   8, 
                        GVCO,   8, 
                        GVOP,   8, 
                        CMSP,   16, 
                        GPPS,   8, 
                        ALEN,   8, 
                        CTGP,   8
                    }

                    Method (ECRD, 1, Serialized)
                    {
                        Local0 = Acquire (ECMT, 0xA000)
                        If ((Local0 == Zero))
                        {
                            If (ECAV)
                            {
                                Local1 = DerefOf (Arg0)
                                Release (ECMT)
                                Return (Local1)
                            }
                            Else
                            {
                                Release (ECMT)
                            }
                        }

                        Return (0x00)
                    }

                    Method (ECWT, 2, Serialized)
                    {
                        Local0 = Acquire (ECMT, 0xA000)
                        If ((Local0 == Zero))
                        {
                            If (ECAV)
                            {
                                Arg1 = Arg0
                            }

                            Release (ECMT)
                        }
                    }

                    Method (_GPE, 0, NotSerialized)  // _GPE: General Purpose Events
                    {
                        Local0 = 0x03
                        Return (Local0)
                    }

                    OperationRegion (ECMS, SystemIO, 0x72, 0x02)
                    Field (ECMS, ByteAcc, Lock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    Method (RECM, 1, Serialized)
                    {
                        INDX = Arg0
                        Return (DATA) /* \_SB_.PCI0.LPC0.H_EC.DATA */
                    }

                    Method (WECM, 2, Serialized)
                    {
                        INDX = Arg0
                        DATA = Arg1
                    }

                    Scope (\)
                    {
                        OperationRegion (SMIO, SystemIO, 0xB0, 0x02)
                        Field (SMIO, ByteAcc, NoLock, Preserve)
                        {
                            SMBA,   8, 
                            SMBB,   8
                        }
                    }

                    Scope (\)
                    {
                        OperationRegion (BLDN, SystemMemory, 0xCC379018, 0x0210)
                        Field (BLDN, AnyAcc, Lock, Preserve)
                        {
                            DGDS,   8, 
                            UMAO,   8, 
                            GPUT,   8, 
                            TPID,   8, 
                            TPFW,   32, 
                            PANT,   8, 
                            FHDN,   8, 
                            H264,   8, 
                            EDSZ,   32, 
                            EDID,   1024, 
                            EDUD,   2048, 
                            EDOR,   1024, 
                            DGMD,   8
                        }

                        Name (DBFS, 0x00)
                        Name (S3RF, 0x00)
                    }

                    Name (PWL1, 0x56)
                    Name (PWL2, 0xAA)
                    Name (GPSF, 0x00)
                    Name (DGST, 0xD1)
                    Method (NVDX, 0, NotSerialized)
                    {
                        Local0 = ECRD (RefOf (GPUD))
                        If ((Local0 <= 0x04))
                        {
                            Local0 += 0xD1
                            If ((Local0 == 0xD1))
                            {
                                If ((DGST != Local0))
                                {
                                    P80H = Local0
                                    DGST = Local0
                                    Notify (^^^GPP0.PEGP, Local0)
                                }

                                Sleep (0x0A)
                                If ((GPSF == 0x00))
                                {
                                    GPSF = 0x01
                                    Notify (^^^GPP0.PEGP, 0xC0) // Hardware-Specific
                                    Notify (NPCF, 0xC0) // Hardware-Specific
                                }
                            }
                            Else
                            {
                                If ((DGST != Local0))
                                {
                                    P80H = Local0
                                    DGST = Local0
                                    Notify (^^^GPP0.PEGP, Local0)
                                }

                                Sleep (0x0A)
                                If ((GPSF == 0x01))
                                {
                                    GPSF = 0x00
                                    Notify (^^^GPP0.PEGP, 0xC0) // Hardware-Specific
                                    Notify (NPCF, 0xC0) // Hardware-Specific
                                }
                            }
                        }
                    }

                    Method (FNQS, 1, Serialized)
                    {
                        Name (XX11, Buffer (0x07) {})
                        CreateWordField (XX11, 0x00, SSZF)
                        CreateByteField (XX11, 0x02, SMUF)
                        CreateDWordField (XX11, 0x03, SMUD)
                        SSZF = 0x07
                        If ((ToInteger (Arg0) == 0x02))
                        {
                            If ((ECRD (RefOf (ECWR)) & 0x01))
                            {
                                If ((GPUT == 0x00))
                                {
                                    SMUF = 0x05
                                    If ((DBFS == 0x00))
                                    {
                                        SMUD = 0x61A8
                                    }
                                    Else
                                    {
                                        SMUD = 0x61A8
                                    }

                                    ALIB (0x0C, XX11)
                                    SMUF = 0x07
                                    SMUD = 0x927C
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x06
                                    SMUD = 0xBB80
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x08
                                    SMUD = 0x05
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x01
                                    SMUD = 0x32
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x03
                                    SMUD = 0x5A
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x0B
                                    SMUD = 0xABE0
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x0C
                                    SMUD = 0x00011170
                                    ALIB (0x0C, XX11)
                                }
                                ElseIf ((GPUT == 0x01)) {}
                                ElseIf ((GPUT == 0x02))
                                {
                                    SMUF = 0x05
                                    If ((DBFS == 0x00))
                                    {
                                        SMUD = 0x61A8
                                    }
                                    Else
                                    {
                                        SMUD = 0x61A8
                                    }

                                    ALIB (0x0C, XX11)
                                    SMUF = 0x07
                                    SMUD = 0x927C
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x06
                                    SMUD = 0xBB80
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x08
                                    SMUD = 0x05
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x01
                                    SMUD = 0x32
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x03
                                    SMUD = 0x5A
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x0B
                                    SMUD = 0xABE0
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x0C
                                    SMUD = 0x00011170
                                    ALIB (0x0C, XX11)
                                }
                            }
                            ElseIf ((GPUT == 0x00))
                            {
                                SMUF = 0x05
                                SMUD = 0x4E20
                                ALIB (0x0C, XX11)
                                SMUF = 0x07
                                SMUD = 0x88B8
                                ALIB (0x0C, XX11)
                                SMUF = 0x06
                                SMUD = 0x9C40
                                ALIB (0x0C, XX11)
                                SMUF = 0x08
                                SMUD = 0x05
                                ALIB (0x0C, XX11)
                                SMUF = 0x01
                                SMUD = 0x32
                                ALIB (0x0C, XX11)
                                SMUF = 0x03
                                SMUD = 0x5A
                                ALIB (0x0C, XX11)
                                SMUF = 0x0B
                                SMUD = 0x4E20
                                ALIB (0x0C, XX11)
                                SMUF = 0x0C
                                SMUD = 0x84D0
                                ALIB (0x0C, XX11)
                            }
                            ElseIf ((GPUT == 0x01)) {}
                            ElseIf ((GPUT == 0x02))
                            {
                                SMUF = 0x05
                                SMUD = 0x4E20
                                ALIB (0x0C, XX11)
                                SMUF = 0x07
                                SMUD = 0x88B8
                                ALIB (0x0C, XX11)
                                SMUF = 0x06
                                SMUD = 0x9C40
                                ALIB (0x0C, XX11)
                                SMUF = 0x08
                                SMUD = 0x05
                                ALIB (0x0C, XX11)
                                SMUF = 0x01
                                SMUD = 0x32
                                ALIB (0x0C, XX11)
                                SMUF = 0x03
                                SMUD = 0x5A
                                ALIB (0x0C, XX11)
                                SMUF = 0x0B
                                SMUD = 0x4E20
                                ALIB (0x0C, XX11)
                                SMUF = 0x0C
                                SMUD = 0x84D0
                                ALIB (0x0C, XX11)
                            }
                        }
                        ElseIf ((ToInteger (Arg0) == 0x00))
                        {
                            If ((ECRD (RefOf (ECWR)) & 0x01))
                            {
                                If ((GPUT == 0x00))
                                {
                                    SMUF = 0x05
                                    If ((DBFS == 0x00))
                                    {
                                        SMUD = 0xAFC8
                                    }
                                    Else
                                    {
                                        SMUD = 0x88B8
                                    }

                                    ALIB (0x0C, XX11)
                                    SMUF = 0x07
                                    SMUD = 0xD2F0
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x06
                                    SMUD = 0xFDE8
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x08
                                    SMUD = 0x0A
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x01
                                    SMUD = 0x0113
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x03
                                    SMUD = 0x60
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x0B
                                    SMUD = 0xE290
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x0C
                                    SMUD = 0x0001ADB0
                                    ALIB (0x0C, XX11)
                                }
                                ElseIf ((GPUT == 0x01)) {}
                                ElseIf ((GPUT == 0x02))
                                {
                                    SMUF = 0x05
                                    If ((DBFS == 0x00))
                                    {
                                        SMUD = 0xAFC8
                                    }
                                    Else
                                    {
                                        SMUD = 0x88B8
                                    }

                                    ALIB (0x0C, XX11)
                                    SMUF = 0x07
                                    SMUD = 0xD2F0
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x06
                                    SMUD = 0xFDE8
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x08
                                    SMUD = 0x0A
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x01
                                    SMUD = 0x0113
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x03
                                    SMUD = 0x60
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x0B
                                    SMUD = 0xE290
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x0C
                                    SMUD = 0x0001ADB0
                                    ALIB (0x0C, XX11)
                                }
                            }
                            ElseIf ((GPUT == 0x00))
                            {
                                SMUF = 0x05
                                SMUD = 0x61A8
                                ALIB (0x0C, XX11)
                                SMUF = 0x07
                                SMUD = 0xAFC8
                                ALIB (0x0C, XX11)
                                SMUF = 0x06
                                SMUD = 0xBB80
                                ALIB (0x0C, XX11)
                                SMUF = 0x08
                                SMUD = 0x05
                                ALIB (0x0C, XX11)
                                SMUF = 0x01
                                SMUD = 0x32
                                ALIB (0x0C, XX11)
                                SMUF = 0x03
                                SMUD = 0x5A
                                ALIB (0x0C, XX11)
                                SMUF = 0x0B
                                SMUD = 0x80E8
                                ALIB (0x0C, XX11)
                                SMUF = 0x0C
                                SMUD = 0xC350
                                ALIB (0x0C, XX11)
                            }
                            ElseIf ((GPUT == 0x01)) {}
                            ElseIf ((GPUT == 0x02))
                            {
                                SMUF = 0x05
                                SMUD = 0x61A8
                                ALIB (0x0C, XX11)
                                SMUF = 0x07
                                SMUD = 0xAFC8
                                ALIB (0x0C, XX11)
                                SMUF = 0x06
                                SMUD = 0xBB80
                                ALIB (0x0C, XX11)
                                SMUF = 0x08
                                SMUD = 0x05
                                ALIB (0x0C, XX11)
                                SMUF = 0x01
                                SMUD = 0x32
                                ALIB (0x0C, XX11)
                                SMUF = 0x03
                                SMUD = 0x5A
                                ALIB (0x0C, XX11)
                                SMUF = 0x0B
                                SMUD = 0x80E8
                                ALIB (0x0C, XX11)
                                SMUF = 0x0C
                                SMUD = 0xC350
                                ALIB (0x0C, XX11)
                            }
                        }
                        ElseIf ((ToInteger (Arg0) == 0x01))
                        {
                            If ((ECRD (RefOf (ECWR)) & 0x01))
                            {
                                If ((GPUT == 0x00))
                                {
                                    SMUF = 0x05
                                    If ((DBFS == 0x00))
                                    {
                                        SMUD = 0x00011170
                                    }
                                    Else
                                    {
                                        SMUD = 0xAFC8
                                    }

                                    ALIB (0x0C, XX11)
                                    SMUF = 0x07
                                    SMUD = 0x000156F8
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x06
                                    SMUD = 0x000156F8
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x08
                                    SMUD = 0x1E
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x01
                                    SMUD = 0x01F4
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x03
                                    SMUD = 0x64
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x0B
                                    SMUD = 0xE290
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x0C
                                    SMUD = 0x0001ADB0
                                    ALIB (0x0C, XX11)
                                }
                                ElseIf ((GPUT == 0x01)) {}
                                ElseIf ((GPUT == 0x02))
                                {
                                    SMUF = 0x05
                                    If ((DBFS == 0x00))
                                    {
                                        SMUD = 0x00011170
                                    }
                                    Else
                                    {
                                        SMUD = 0xAFC8
                                    }

                                    ALIB (0x0C, XX11)
                                    SMUF = 0x07
                                    SMUD = 0x000156F8
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x06
                                    SMUD = 0x000156F8
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x08
                                    SMUD = 0x1E
                                    ALIB (0x0C, XX11)
                                    If ((DGDS == 0x01))
                                    {
                                        SMUF = 0x01
                                        SMUD = 0x01F4
                                        ALIB (0x0C, XX11)
                                    }
                                    Else
                                    {
                                        SMUF = 0x01
                                        If ((DBFS == 0x00))
                                        {
                                            SMUD = 0x01F4
                                        }
                                        Else
                                        {
                                            SMUD = 0xF0
                                        }

                                        ALIB (0x0C, XX11)
                                    }

                                    SMUF = 0x03
                                    SMUD = 0x64
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x0B
                                    SMUD = 0xE290
                                    ALIB (0x0C, XX11)
                                    SMUF = 0x0C
                                    SMUD = 0x0001ADB0
                                    ALIB (0x0C, XX11)
                                }
                            }
                            ElseIf ((GPUT == 0x00))
                            {
                                SMUF = 0x05
                                SMUD = 0x61A8
                                ALIB (0x0C, XX11)
                                SMUF = 0x07
                                SMUD = 0xAFC8
                                ALIB (0x0C, XX11)
                                SMUF = 0x06
                                SMUD = 0xBB80
                                ALIB (0x0C, XX11)
                                SMUF = 0x08
                                SMUD = 0x05
                                ALIB (0x0C, XX11)
                                SMUF = 0x01
                                SMUD = 0x32
                                ALIB (0x0C, XX11)
                                SMUF = 0x03
                                SMUD = 0x5A
                                ALIB (0x0C, XX11)
                                SMUF = 0x0B
                                SMUD = 0x80E8
                                ALIB (0x0C, XX11)
                                SMUF = 0x0C
                                SMUD = 0xC350
                                ALIB (0x0C, XX11)
                            }
                            ElseIf ((GPUT == 0x01)) {}
                            ElseIf ((GPUT == 0x02))
                            {
                                SMUF = 0x05
                                SMUD = 0x61A8
                                ALIB (0x0C, XX11)
                                SMUF = 0x07
                                SMUD = 0xAFC8
                                ALIB (0x0C, XX11)
                                SMUF = 0x06
                                SMUD = 0xBB80
                                ALIB (0x0C, XX11)
                                SMUF = 0x08
                                SMUD = 0x05
                                ALIB (0x0C, XX11)
                                SMUF = 0x01
                                SMUD = 0x32
                                ALIB (0x0C, XX11)
                                SMUF = 0x03
                                SMUD = 0x5A
                                ALIB (0x0C, XX11)
                                SMUF = 0x0B
                                SMUD = 0x80E8
                                ALIB (0x0C, XX11)
                                SMUF = 0x0C
                                SMUD = 0xC350
                                ALIB (0x0C, XX11)
                            }
                        }
                        ElseIf ((ToInteger (Arg0) == 0x03))
                        {
                            If ((ECRD (RefOf (ECWR)) & 0x01)) {}
                            ElseIf ((ECRD (RefOf (ITSM)) == 0x00))
                            {
                                SMUF = 0x05
                                SMUD = 0x61A8
                                ALIB (0x0C, XX11)
                                SMUF = 0x07
                                SMUD = 0x61A8
                                ALIB (0x0C, XX11)
                                SMUF = 0x06
                                SMUD = 0x61A8
                                ALIB (0x0C, XX11)
                            }
                        }
                        ElseIf ((ToInteger (Arg0) == 0x04))
                        {
                            If ((ECRD (RefOf (ECWR)) & 0x01)) {}
                            ElseIf ((ECRD (RefOf (ITSM)) == 0x00))
                            {
                                SMUF = 0x05
                                SMUD = 0x2710
                                ALIB (0x0C, XX11)
                                SMUF = 0x07
                                SMUD = 0x3A98
                                ALIB (0x0C, XX11)
                                SMUF = 0x06
                                SMUD = 0x3A98
                                ALIB (0x0C, XX11)
                            }
                        }
                        ElseIf ((ToInteger (Arg0) == 0x05))
                        {
                            SMUF = 0x05
                            SMUD = 0x2710
                            ALIB (0x0C, XX11)
                            SMUF = 0x07
                            SMUD = 0x2710
                            ALIB (0x0C, XX11)
                            SMUF = 0x06
                            SMUD = 0x2710
                            ALIB (0x0C, XX11)
                        }

                        OperationRegion (CPUP, SystemMemory, 0xFE008D00, 0x10)
                        Field (CPUP, ByteAcc, NoLock, Preserve)
                        {
                            CPP1,   16, 
                            CPP2,   16
                        }

                        If ((CAC1 == 0x01))
                        {
                            SMUF = 0x07
                            SMUD = CPP2 /* \_SB_.PCI0.LPC0.H_EC.FNQS.CPP2 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x05
                            SMUD = CPP1 /* \_SB_.PCI0.LPC0.H_EC.FNQS.CPP1 */
                            ALIB (0x0C, XX11)
                        }
                    }

                    Method (CMFC, 0, NotSerialized)
                    {
                        Return (EDID) /* External reference */
                    }

                    Mutex (MALT, 0x00)
                    Method (MAMW, 2, Serialized)
                    {
                        If ((Acquire (MALT, 0xA000) == 0x00))
                        {
                            Local0 = One
                            Local1 = Zero
                            While ((Local0 != Zero))
                            {
                                If ((Local1 >= 0x14))
                                {
                                    Break
                                }

                                Local1++
                                Local0 = HTKS /* \_SB_.PCI0.LPC0.H_EC.HTKS */
                                Sleep (0x01)
                            }

                            If ((Local0 != Zero))
                            {
                                Release (MALT)
                                Return (Zero)
                            }

                            HTKE = Arg1
                            HTKS = Arg0
                            Local0 = One
                            Local1 = Zero
                            While ((Local0 != Zero))
                            {
                                If ((Local1 >= 0x14))
                                {
                                    Break
                                }

                                Local1++
                                Local0 = HTKS /* \_SB_.PCI0.LPC0.H_EC.HTKS */
                                Sleep (0x01)
                            }

                            Release (MALT)
                        }
                    }

                    Device (BAT0)
                    {
                        Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((ECON == 0x01))
                            {
                                If ((ECRD (RefOf (ECWR)) & 0x02))
                                {
                                    Return (0x1F)
                                }
                            }

                            Return (0x0F)
                        }

                        Method (_BIX, 0, Serialized)  // _BIX: Battery Information Extended
                        {
                            Name (BPK1, Package (0x15)
                            {
                                0x01, 
                                0x00, 
                                0xFFFFFFFF, 
                                0xFFFFFFFF, 
                                0x01, 
                                0xFFFFFFFF, 
                                0x00, 
                                0x00, 
                                0x64, 
                                0x00017318, 
                                0x00, 
                                0x00, 
                                0x00, 
                                0x00, 
                                0x64, 
                                0x00, 
                                "SR Real Battery", 
                                "123456789", 
                                "LiP", 
                                "LENOVO", 
                                0x01
                            })
                            If ((XX10 == 0x01))
                            {
                                Local0 = (B1DC * 0x0A)
                                BPK1 [0x02] = Local0
                            }
                            Else
                            {
                                Local0 = (B1DC * B1FV)
                                Local0 = (Local0 / 0x03E8)
                                BPK1 [0x02] = Local0
                            }

                            If ((XX10 == 0x01))
                            {
                                Local1 = (B1FC * 0x0A)
                                BPK1 [0x03] = Local1
                            }
                            Else
                            {
                                Local1 = (B1FC * B1FV)
                                Local1 = (Local1 / 0x03E8)
                                BPK1 [0x03] = Local1
                            }

                            BPK1 [0x06] = (Local1 / 0x0A)
                            BPK1 [0x07] = (Local1 / 0x19)
                            BPK1 [0x08] = BCYC /* \_SB_.PCI0.LPC0.H_EC.BCYC */
                            BPK1 [0x10] = ToString (BDN1, Ones)
                            BPK1 [0x11] = ToHexString (B1SN)
                            BPK1 [0x13] = ToString (BVN1, Ones)
                            Return (BPK1) /* \_SB_.PCI0.LPC0.H_EC.BAT0._BIX.BPK1 */
                        }

                        Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                        {
                            Name (PKG1, Package (0x04)
                            {
                                Ones, 
                                Ones, 
                                Ones, 
                                Ones
                            })
                            Local0 = 0x00
                            If ((ECWR & 0x04))
                            {
                                Local0 = 0x02
                            }
                            ElseIf ((ECWR & 0x08))
                            {
                                Local0 = 0x01
                            }

                            If ((ECWR & 0x40))
                            {
                                Local0 |= 0x04
                            }

                            PKG1 [0x00] = Local0
                            If ((B1ST & One))
                            {
                                If ((XX10 == 0x01))
                                {
                                    Local0 = (B1CR * 0x0A)
                                    PKG1 [0x01] = Local0
                                }
                                Else
                                {
                                    Local0 = (B1CR * B1FV)
                                    Local0 = (Local0 / 0x03E8)
                                    PKG1 [0x01] = Local0
                                }
                            }
                            ElseIf ((XX10 == 0x01))
                            {
                                Local0 = (B1CR * 0x0A)
                                PKG1 [0x01] = Local0
                            }
                            Else
                            {
                                Local0 = (B1CR * B1FV)
                                Local0 = (Local0 / 0x03E8)
                                PKG1 [0x01] = Local0
                            }

                            If ((XX10 == 0x01))
                            {
                                PKG1 [0x02] = (B1RC * 0x0A)
                            }
                            Else
                            {
                                Local1 = (B1RC * B1FV)
                                Local1 = (Local1 / 0x03E8)
                                PKG1 [0x02] = Local1
                            }

                            PKG1 [0x03] = B1FV /* \_SB_.PCI0.LPC0.H_EC.B1FV */
                            Return (PKG1) /* \_SB_.PCI0.LPC0.H_EC.BAT0._BST.PKG1 */
                        }

                        Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
                        {
                            Return (_SB) /* \_SB_ */
                        }
                    }

                    Device (LID0)
                    {
                        Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((ECON == One))
                            {
                                Return (0x0F)
                            }

                            Return (Zero)
                        }

                        Method (_LID, 0, NotSerialized)  // _LID: Lid Status
                        {
                            If ((ECRD (RefOf (LSTE)) == One))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((Arg0 == 0x03))
                        {
                            ECAV = Arg1
                        }

                        If (ECAV)
                        {
                            If ((ECRD (RefOf (ECWR)) & 0x01))
                            {
                                Local0 = ECRD (RefOf (PAWT))
                                If ((Local0 <= PWL1))
                                {
                                    If ((ECRD (RefOf (ITSM)) == 0x02))
                                    {
                                        FNQS (0x02)
                                    }
                                    ElseIf ((ECRD (RefOf (ITSM)) == 0x00))
                                    {
                                        If ((ECRD (RefOf (PABD)) == 0x01))
                                        {
                                            ECWT (0x04, RefOf (PABD))
                                        }
                                        Else
                                        {
                                            ECWT (0x03, RefOf (PABD))
                                        }

                                        ECWT (0x02, RefOf (ITSM))
                                        FNQS (0x02)
                                        Notify (GZFD, 0xE7) // Hardware-Specific
                                        Notify (GZFD, 0xE5) // Hardware-Specific
                                    }
                                    ElseIf ((ECRD (RefOf (ITSM)) == 0x01))
                                    {
                                        ECWT (0x02, RefOf (PABD))
                                        ECWT (0x02, RefOf (ITSM))
                                        FNQS (0x02)
                                        Notify (GZFD, 0xE7) // Hardware-Specific
                                        Notify (GZFD, 0xE5) // Hardware-Specific
                                    }
                                }
                                ElseIf (((Local0 > PWL1) && (Local0 < PWL2)))
                                {
                                    If ((ECRD (RefOf (ITSM)) == 0x02))
                                    {
                                        If ((ECRD (RefOf (PABD)) == 0x04))
                                        {
                                            ECWT (0x01, RefOf (PABD))
                                            ECWT (0x00, RefOf (ITSM))
                                            FNQS (0x00)
                                            Notify (GZFD, 0xE7) // Hardware-Specific
                                            Notify (GZFD, 0xE5) // Hardware-Specific
                                        }
                                        ElseIf ((ECRD (RefOf (PABD)) == 0x03))
                                        {
                                            ECWT (0x00, RefOf (PABD))
                                            ECWT (0x00, RefOf (ITSM))
                                            FNQS (0x00)
                                            Notify (GZFD, 0xE7) // Hardware-Specific
                                            Notify (GZFD, 0xE5) // Hardware-Specific
                                        }
                                        ElseIf ((ECRD (RefOf (PABD)) == 0x02))
                                        {
                                            ECWT (0x01, RefOf (PABD))
                                            ECWT (0x00, RefOf (ITSM))
                                            FNQS (0x00)
                                            Notify (GZFD, 0xE7) // Hardware-Specific
                                            Notify (GZFD, 0xE5) // Hardware-Specific
                                        }
                                        Else
                                        {
                                            FNQS (0x02)
                                        }
                                    }
                                    ElseIf ((ECRD (RefOf (ITSM)) == 0x00))
                                    {
                                        FNQS (0x00)
                                    }
                                    ElseIf ((ECRD (RefOf (ITSM)) == 0x01))
                                    {
                                        ECWT (0x01, RefOf (PABD))
                                        ECWT (0x00, RefOf (ITSM))
                                        FNQS (0x00)
                                        Notify (GZFD, 0xE7) // Hardware-Specific
                                        Notify (GZFD, 0xE5) // Hardware-Specific
                                    }
                                }
                                ElseIf ((Local0 >= PWL2))
                                {
                                    If ((ECRD (RefOf (ITSM)) == 0x02))
                                    {
                                        If ((ECRD (RefOf (PABD)) == 0x02))
                                        {
                                            ECWT (0x00, RefOf (PABD))
                                            ECWT (0x01, RefOf (ITSM))
                                            FNQS (0x01)
                                            Notify (GZFD, 0xE7) // Hardware-Specific
                                            Notify (GZFD, 0xE5) // Hardware-Specific
                                        }
                                        ElseIf ((ECRD (RefOf (PABD)) == 0x03))
                                        {
                                            ECWT (0x00, RefOf (PABD))
                                            ECWT (0x00, RefOf (ITSM))
                                            FNQS (0x00)
                                            Notify (GZFD, 0xE7) // Hardware-Specific
                                            Notify (GZFD, 0xE5) // Hardware-Specific
                                        }
                                        ElseIf ((ECRD (RefOf (PABD)) == 0x04))
                                        {
                                            ECWT (0x00, RefOf (PABD))
                                            ECWT (0x01, RefOf (ITSM))
                                            FNQS (0x01)
                                            Notify (GZFD, 0xE7) // Hardware-Specific
                                            Notify (GZFD, 0xE5) // Hardware-Specific
                                        }
                                        Else
                                        {
                                            FNQS (0x02)
                                        }
                                    }
                                    ElseIf ((ECRD (RefOf (ITSM)) == 0x00))
                                    {
                                        If ((ECRD (RefOf (PABD)) == 0x01))
                                        {
                                            ECWT (0x00, RefOf (PABD))
                                            ECWT (0x01, RefOf (ITSM))
                                            FNQS (0x01)
                                            Notify (GZFD, 0xE7) // Hardware-Specific
                                            Notify (GZFD, 0xE5) // Hardware-Specific
                                        }
                                        Else
                                        {
                                            FNQS (0x00)
                                        }
                                    }
                                    ElseIf ((ECRD (RefOf (ITSM)) == 0x01))
                                    {
                                        FNQS (0x01)
                                    }
                                }
                            }
                            ElseIf ((ECRD (RefOf (ITSM)) == 0x02))
                            {
                                If ((ECRD (RefOf (PABD)) == 0x03))
                                {
                                    ECWT (0x00, RefOf (PABD))
                                    ECWT (0x00, RefOf (ITSM))
                                    FNQS (0x00)
                                    Notify (GZFD, 0xE7) // Hardware-Specific
                                    Notify (GZFD, 0xE5) // Hardware-Specific
                                }
                                ElseIf ((ECRD (RefOf (PABD)) == 0x02))
                                {
                                    ECWT (0x01, RefOf (PABD))
                                    ECWT (0x00, RefOf (ITSM))
                                    FNQS (0x00)
                                    Notify (GZFD, 0xE7) // Hardware-Specific
                                    Notify (GZFD, 0xE5) // Hardware-Specific
                                }
                                ElseIf ((ECRD (RefOf (PABD)) == 0x04))
                                {
                                    ECWT (0x01, RefOf (PABD))
                                    ECWT (0x00, RefOf (ITSM))
                                    FNQS (0x00)
                                    Notify (GZFD, 0xE7) // Hardware-Specific
                                    Notify (GZFD, 0xE5) // Hardware-Specific
                                }
                                Else
                                {
                                    FNQS (0x02)
                                }
                            }
                            ElseIf ((ECRD (RefOf (ITSM)) == 0x00))
                            {
                                FNQS (0x00)
                            }
                            ElseIf ((ECRD (RefOf (ITSM)) == 0x01))
                            {
                                ECWT (0x01, RefOf (PABD))
                                ECWT (0x00, RefOf (ITSM))
                                FNQS (0x00)
                                Notify (GZFD, 0xE7) // Hardware-Specific
                                Notify (GZFD, 0xE5) // Hardware-Specific
                            }

                            Sleep (0x05)
                        }
                    }

                    Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x05
                        If (DGDS)
                        {
                            Notify (^^^GPP0.PEGP.EDP0, 0x87) // Device-Specific
                        }
                        Else
                        {
                            Notify (^^^GP17.VGA.LCD, 0x87) // Device-Specific
                        }
                    }

                    Method (_Q06, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x06
                        If (DGDS)
                        {
                            Notify (^^^GPP0.PEGP.EDP0, 0x86) // Device-Specific
                        }
                        Else
                        {
                            Notify (^^^GP17.VGA.LCD, 0x86) // Device-Specific
                        }
                    }

                    Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x0D
                        ECWT (0x00, RefOf (PABD))
                        If ((ECRD (RefOf (ECWR)) & 0x01))
                        {
                            Local0 = ECRD (RefOf (PAWT))
                            If ((Local0 <= PWL1))
                            {
                                ECWT (0x02, RefOf (ITSM))
                                FNQS (0x02)
                            }
                            ElseIf (((Local0 > PWL1) && (Local0 < PWL2)))
                            {
                                If ((ECRD (RefOf (ITSM)) == 0x01))
                                {
                                    ECWT (0x00, RefOf (ITSM))
                                    FNQS (0x00)
                                }
                                ElseIf ((ECRD (RefOf (ITSM)) == 0x00))
                                {
                                    ECWT (0x02, RefOf (ITSM))
                                    FNQS (0x02)
                                }
                                ElseIf ((ECRD (RefOf (ITSM)) == 0x02))
                                {
                                    ECWT (0x00, RefOf (ITSM))
                                    FNQS (0x00)
                                }
                            }
                            ElseIf ((Local0 >= PWL2))
                            {
                                If ((ECRD (RefOf (ITSM)) == 0x00))
                                {
                                    ECWT (0x01, RefOf (ITSM))
                                    FNQS (0x01)
                                }
                                ElseIf ((ECRD (RefOf (ITSM)) == 0x01))
                                {
                                    ECWT (0x02, RefOf (ITSM))
                                    FNQS (0x02)
                                }
                                ElseIf ((ECRD (RefOf (ITSM)) == 0x02))
                                {
                                    ECWT (0x00, RefOf (ITSM))
                                    FNQS (0x00)
                                }
                            }
                        }
                        ElseIf ((ECRD (RefOf (ITSM)) == 0x01))
                        {
                            ECWT (0x00, RefOf (ITSM))
                            FNQS (0x00)
                        }
                        ElseIf ((ECRD (RefOf (ITSM)) == 0x00))
                        {
                            ECWT (0x02, RefOf (ITSM))
                            FNQS (0x02)
                        }
                        ElseIf ((ECRD (RefOf (ITSM)) == 0x02))
                        {
                            ECWT (0x00, RefOf (ITSM))
                            FNQS (0x00)
                        }

                        Notify (GZFD, 0xE3) // Hardware-Specific
                        Notify (GZFD, 0xE7) // Hardware-Specific
                        Notify (GZFD, 0xE5) // Hardware-Specific
                        Sleep (0x05)
                        Notify (^^^GPP0.PEGP, 0xC0) // Hardware-Specific
                        Notify (NPCF, 0xC0) // Hardware-Specific
                    }

                    Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x10
                        Sleep (0x012C)
                        Notify (BAT0, 0x80) // Status Change
                        Notify (ADP1, 0x80) // Status Change
                        If ((ECRD (RefOf (ECWR)) & 0x01))
                        {
                            Local0 = ECRD (RefOf (PAWT))
                            If ((Local0 <= PWL1))
                            {
                                If ((ECRD (RefOf (ITSM)) == 0x02))
                                {
                                    FNQS (0x02)
                                }
                                ElseIf ((ECRD (RefOf (ITSM)) == 0x00))
                                {
                                    If ((ECRD (RefOf (PABD)) == 0x01))
                                    {
                                        ECWT (0x04, RefOf (PABD))
                                    }
                                    Else
                                    {
                                        ECWT (0x03, RefOf (PABD))
                                    }

                                    ECWT (0x02, RefOf (ITSM))
                                    FNQS (0x02)
                                    Notify (GZFD, 0xE7) // Hardware-Specific
                                }
                                ElseIf ((ECRD (RefOf (ITSM)) == 0x01))
                                {
                                    ECWT (0x02, RefOf (PABD))
                                    ECWT (0x02, RefOf (ITSM))
                                    FNQS (0x02)
                                    Notify (GZFD, 0xE7) // Hardware-Specific
                                }
                            }
                            ElseIf (((Local0 > PWL1) && (Local0 < PWL2)))
                            {
                                If ((ECRD (RefOf (ITSM)) == 0x02))
                                {
                                    If ((ECRD (RefOf (PABD)) == 0x04))
                                    {
                                        ECWT (0x01, RefOf (PABD))
                                        ECWT (0x00, RefOf (ITSM))
                                        FNQS (0x00)
                                        Notify (GZFD, 0xE7) // Hardware-Specific
                                    }
                                    ElseIf ((ECRD (RefOf (PABD)) == 0x03))
                                    {
                                        ECWT (0x00, RefOf (PABD))
                                        ECWT (0x00, RefOf (ITSM))
                                        FNQS (0x00)
                                        Notify (GZFD, 0xE7) // Hardware-Specific
                                        Notify (GZFD, 0xE5) // Hardware-Specific
                                    }
                                    ElseIf ((ECRD (RefOf (PABD)) == 0x02))
                                    {
                                        ECWT (0x01, RefOf (PABD))
                                        ECWT (0x00, RefOf (ITSM))
                                        FNQS (0x00)
                                        Notify (GZFD, 0xE7) // Hardware-Specific
                                        Notify (GZFD, 0xE5) // Hardware-Specific
                                    }
                                    Else
                                    {
                                        FNQS (0x02)
                                    }
                                }
                                ElseIf ((ECRD (RefOf (ITSM)) == 0x00))
                                {
                                    FNQS (0x00)
                                }
                                ElseIf ((ECRD (RefOf (ITSM)) == 0x01))
                                {
                                    ECWT (0x01, RefOf (PABD))
                                    ECWT (0x00, RefOf (ITSM))
                                    FNQS (0x00)
                                    Notify (GZFD, 0xE7) // Hardware-Specific
                                }
                            }
                            ElseIf ((Local0 >= PWL2))
                            {
                                If ((ECRD (RefOf (ITSM)) == 0x02))
                                {
                                    If ((ECRD (RefOf (PABD)) == 0x02))
                                    {
                                        ECWT (0x00, RefOf (PABD))
                                        ECWT (0x01, RefOf (ITSM))
                                        FNQS (0x01)
                                        Notify (GZFD, 0xE7) // Hardware-Specific
                                    }
                                    ElseIf ((ECRD (RefOf (PABD)) == 0x03))
                                    {
                                        ECWT (0x00, RefOf (PABD))
                                        ECWT (0x00, RefOf (ITSM))
                                        FNQS (0x00)
                                        Notify (GZFD, 0xE7) // Hardware-Specific
                                    }
                                    ElseIf ((ECRD (RefOf (PABD)) == 0x04))
                                    {
                                        ECWT (0x00, RefOf (PABD))
                                        ECWT (0x01, RefOf (ITSM))
                                        FNQS (0x01)
                                        Notify (GZFD, 0xE7) // Hardware-Specific
                                        Notify (GZFD, 0xE5) // Hardware-Specific
                                    }
                                    Else
                                    {
                                        FNQS (0x02)
                                    }
                                }
                                ElseIf ((ECRD (RefOf (ITSM)) == 0x00))
                                {
                                    If ((ECRD (RefOf (PABD)) == 0x01))
                                    {
                                        ECWT (0x00, RefOf (PABD))
                                        ECWT (0x01, RefOf (ITSM))
                                        FNQS (0x01)
                                        Notify (GZFD, 0xE7) // Hardware-Specific
                                    }
                                    Else
                                    {
                                        FNQS (0x00)
                                    }
                                }
                                ElseIf ((ECRD (RefOf (ITSM)) == 0x01))
                                {
                                    FNQS (0x01)
                                }
                            }

                            If (((DGDS == 0x00) && (PANT == 0x01)))
                            {
                                M010 (0x4C, 0x01)
                            }
                        }
                        Else
                        {
                            If ((ECRD (RefOf (ITSM)) == 0x02))
                            {
                                If ((ECRD (RefOf (PABD)) == 0x03))
                                {
                                    ECWT (0x00, RefOf (PABD))
                                    ECWT (0x00, RefOf (ITSM))
                                    FNQS (0x00)
                                    Notify (GZFD, 0xE7) // Hardware-Specific
                                }
                                ElseIf ((ECRD (RefOf (PABD)) == 0x02))
                                {
                                    ECWT (0x01, RefOf (PABD))
                                    ECWT (0x00, RefOf (ITSM))
                                    FNQS (0x00)
                                    Notify (GZFD, 0xE7) // Hardware-Specific
                                }
                                ElseIf ((ECRD (RefOf (PABD)) == 0x04))
                                {
                                    ECWT (0x01, RefOf (PABD))
                                    ECWT (0x00, RefOf (ITSM))
                                    FNQS (0x00)
                                    Notify (GZFD, 0xE7) // Hardware-Specific
                                }
                                Else
                                {
                                    FNQS (0x02)
                                }
                            }
                            ElseIf ((ECRD (RefOf (ITSM)) == 0x00))
                            {
                                FNQS (0x00)
                            }
                            ElseIf ((ECRD (RefOf (ITSM)) == 0x01))
                            {
                                ECWT (0x01, RefOf (PABD))
                                ECWT (0x00, RefOf (ITSM))
                                FNQS (0x00)
                                Notify (GZFD, 0xE7) // Hardware-Specific
                            }

                            If (((DGDS == 0x00) && (PANT == 0x01)))
                            {
                                If ((ECRD (RefOf (GPPS)) == 0x00))
                                {
                                    M010 (0x4C, 0x00)
                                }
                            }
                        }

                        Notify (GZFD, 0xE5) // Hardware-Specific
                        Sleep (0x05)
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x11
                        Sleep (0x012C)
                        Notify (BAT0, 0x80) // Status Change
                        Notify (BAT0, 0x81) // Information Change
                    }

                    Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x12
                        Notify (LID0, 0x80) // Status Change
                    }

                    Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (PWRB, 0x80) // Status Change
                        Sleep (0x32)
                    }

                    Method (_Q21, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x21
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q44, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x44
                        Notify (VPC0, 0x80) // Status Change
                    }

                    Method (_Q81, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((ECRD (RefOf (ECWR)) & 0x01))
                        {
                            DBFS = 0x00
                            Local0 = ECRD (RefOf (ITSM))
                            FNQS (Local0)
                        }
                    }

                    Method (_Q82, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((ECRD (RefOf (ECWR)) & 0x01))
                        {
                            DBFS = 0x01
                            Local0 = ECRD (RefOf (ITSM))
                            FNQS (Local0)
                        }
                    }

                    Method (_QD0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xD0
                        NVDX ()
                    }

                    Method (_Q30, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x30
                        FNQS (0x03)
                    }

                    Method (_Q31, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x31
                        FNQS (0x04)
                    }

                    Method (_Q32, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x32
                        If ((ITSM == 0x02))
                        {
                            FNQS (0x02)
                        }
                        ElseIf ((ITSM == Zero))
                        {
                            FNQS (0x00)
                        }
                        ElseIf ((ITSM == One))
                        {
                            FNQS (0x01)
                        }

                        Notify (^^^GPP0.PEGP, 0xC0) // Hardware-Specific
                    }

                    Method (_Q33, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x33
                        FNQS (0x05)
                        Notify (^^^GPP0.PEGP, 0xD5) // Hardware-Specific
                        Notify (^^^GPP0.PEGP, 0xC0) // Hardware-Specific
                    }

                    Method (_Q60, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x60
                        M010 (0x4C, 0x01)
                        GPPS = One
                    }

                    Scope (\)
                    {
                        Name (PSD1, 0x00)
                    }

                    Method (_Q61, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x61
                        Local0 = ECRD (RefOf (LSKV))
                        PSD1 = Local0
                        If ((Local0 == 0x27))
                        {
                            Notify (GZFD, 0xE8) // Hardware-Specific
                        }
                        Else
                        {
                            Notify (WMIU, 0xD0) // Hardware-Specific
                            Notify (GZFD, 0xE8) // Hardware-Specific
                        }

                        ECWT (0x00, RefOf (LSKV))
                        If ((PSD1 == 0x02))
                        {
                            ECWT (One, RefOf (HKSS))
                        }

                        If ((PSD1 == 0x03))
                        {
                            ECWT (One, RefOf (HKSS))
                        }
                    }
                }

                Scope (\_SB)
                {
                    Device (ADP1)
                    {
                        Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                        Name (XX00, Buffer (0x03) {})
                        Name (ACDC, 0xFF)
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((^^PCI0.LPC0.H_EC.ECON == 0x01))
                            {
                                Return (0x0F)
                            }

                            Return (Zero)
                        }

                        Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                        {
                            Local0 = (^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.ECWR)) & One)
                            If (((Local0 != ACDC) || (ACDC == 0xFF)))
                            {
                                CreateWordField (XX00, 0x00, SSZE)
                                CreateByteField (XX00, 0x02, ACST)
                                SSZE = 0x03
                                ACDC = Local0
                                If (ACDC)
                                {
                                    P80H = 0xECAC
                                    If ((DGDS == 0x00))
                                    {
                                        ^^PCI0.GP17.VGA.AFN4 (0x01)
                                    }

                                    ACST = 0x00
                                }
                                Else
                                {
                                    P80H = 0xECDC
                                    If ((DGDS == 0x00))
                                    {
                                        ^^PCI0.GP17.VGA.AFN4 (0x02)
                                    }

                                    ACST = 0x01
                                }

                                ALIB (0x01, XX00)
                            }

                            Return (Local0)
                        }

                        Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
                        {
                            Return (_SB) /* \_SB_ */
                        }
                    }

                    Device (HKDV)
                    {
                        Name (_HID, "LHK2019")  // _HID: Hardware ID
                        Name (_UID, 0x00)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }
                }

                Scope (H_EC)
                {
                    Device (VPC0)
                    {
                        Name (_HID, "VPC2004")  // _HID: Hardware ID
                        Name (_UID, 0x00)  // _UID: Unique ID
                        Name (_VPC, 0x7C0D0010)
                        Name (VPCD, 0x00)
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_CFG, 0, NotSerialized)
                        {
                            Return (_VPC) /* \_SB_.PCI0.LPC0.H_EC.VPC0._VPC */
                        }

                        Method (VPCR, 1, Serialized)
                        {
                            If (ECAV)
                            {
                                If ((Arg0 == 0x01))
                                {
                                    VPCD = ECRD (RefOf (VCMD))
                                }
                                Else
                                {
                                    VPCD = ECRD (RefOf (VDAT))
                                }
                            }

                            Return (VPCD) /* \_SB_.PCI0.LPC0.H_EC.VPC0.VPCD */
                        }

                        Method (VPCW, 2, Serialized)
                        {
                            If (ECAV)
                            {
                                If ((Arg0 == 0x01))
                                {
                                    ECWT (Arg1, RefOf (VCMD))
                                }
                                Else
                                {
                                    ECWT (Arg1, RefOf (VDAT))
                                }
                            }

                            Return (0x00)
                        }

                        Method (SVCR, 1, Serialized)
                        {
                        }

                        Method (HALS, 0, NotSerialized)
                        {
                            Local0 = Zero
                            Local0 |= 0x40
                            If ((One == ECRD (RefOf (AOUE))))
                            {
                                Local0 |= 0x80
                            }

                            Local0 |= 0x0200
                            If ((One == ECRD (RefOf (FNHK))))
                            {
                                Local0 |= 0x0400
                            }

                            Local0 |= 0x4000
                            If ((One == ECRD (RefOf (CGBE))))
                            {
                                Local0 |= 0x8000
                            }

                            Return (Local0)
                        }

                        Method (SALS, 1, Serialized)
                        {
                            Local0 = Arg0
                            If ((Local0 == 0x0A))
                            {
                                ECWT (One, RefOf (UCVC))
                                ECWT (One, RefOf (UCST))
                                ECWT (One, RefOf (AOUE))
                                Return (0x00)
                            }

                            If ((Local0 == 0x0B))
                            {
                                ECWT (One, RefOf (UCVC))
                                ECWT (Zero, RefOf (UCST))
                                ECWT (Zero, RefOf (AOUE))
                                Return (0x00)
                            }

                            If ((Local0 == 0x0E))
                            {
                                ECWT (One, RefOf (HKSS))
                                ECWT (0x01, RefOf (HTKE))
                                ECWT (0x10, RefOf (HTKS))
                                Return (0x00)
                            }

                            If ((Local0 == 0x0F))
                            {
                                ECWT (One, RefOf (HKSS))
                                ECWT (0x00, RefOf (HTKE))
                                ECWT (0x10, RefOf (HTKS))
                                Return (0x00)
                            }

                            If ((Local0 == 0x12))
                            {
                                ECWT (One, RefOf (CIVC))
                                ECWT (Zero, RefOf (CIBM))
                                ECWT (Zero, RefOf (CGBE))
                                Return (0x00)
                            }

                            If ((Local0 == 0x13))
                            {
                                ECWT (One, RefOf (CIVC))
                                ECWT (One, RefOf (CIBM))
                                ECWT (One, RefOf (CGBE))
                                Return (0x00)
                            }

                            Return (Zero)
                        }

                        Method (GBMD, 0, NotSerialized)
                        {
                            Local0 = 0x10020000
                            If ((Zero == ECRD (RefOf (CSBM))))
                            {
                                Local0 |= 0x02
                            }

                            If ((One == ECRD (RefOf (QCEN))))
                            {
                                Local0 |= 0x04
                            }

                            If ((One == ECRD (RefOf (BTSM))))
                            {
                                Local0 |= 0x20
                            }

                            If ((One == ECRD (RefOf (MBBD))))
                            {
                                Local0 |= 0x08
                            }

                            If ((ECRD (RefOf (BLEG)) == One))
                            {
                                Local0 |= 0x80
                            }

                            If ((ECRD (RefOf (HYMS)) == One))
                            {
                                Local0 |= 0x0100
                            }

                            If ((ECRD (RefOf (BTSM)) == One))
                            {
                                Local0 &= 0xFFFFFDFF
                            }
                            Else
                            {
                                Local0 |= 0x0200
                            }

                            If ((ECRD (RefOf (ADPI)) == 0x02))
                            {
                                Local0 |= 0x00010000
                            }

                            Return (Local0)
                        }

                        Method (KBLC, 1, NotSerialized)
                        {
                            If (ECAV)
                            {
                                Local0 = Arg0
                                Local0 &= 0x0F
                                If ((Local0 == One))
                                {
                                    If ((ECRD (RefOf (KLIW)) == One))
                                    {
                                        Return (0x05)
                                    }
                                }

                                If ((Local0 == 0x02))
                                {
                                    Local0 = 0x00
                                    Local0 = (ECRD (RefOf (KLLV)) << 0x01)
                                    Local0 |= 0x01
                                    Return (Local0)
                                }

                                If ((Local0 == 0x03))
                                {
                                    Local0 = 0x00
                                    Local0 = Arg0
                                    Local1 = (Local0 & 0xFFFF)
                                    Local1 >>= 0x04
                                    If ((Local1 == 0x02))
                                    {
                                        Local2 = (Local0 & 0xFFFF0000)
                                        Local2 >>= 0x10
                                        MAMW (0x1E, Local2)
                                        Local0 = (Local2 << 0x01)
                                        Local0 |= 0x01
                                    }
                                    Else
                                    {
                                        Local0 = 0x00
                                    }

                                    Return (Local0)
                                }
                            }
                        }

                        Method (SBMC, 1, NotSerialized)
                        {
                            If (ECAV)
                            {
                                If ((Arg0 == Zero))
                                {
                                    ECWT (Zero, RefOf (CDMB))
                                    ECWT (One, RefOf (EDCC))
                                    ECWT (One, RefOf (EDCF))
                                    Return (Zero)
                                }

                                If ((Arg0 == One))
                                {
                                    ECWT (Zero, RefOf (EDCC))
                                    ECWT (One, RefOf (CDMB))
                                    Return (Zero)
                                }

                                If ((Arg0 == 0x03))
                                {
                                    ECWT (One, RefOf (BTSM))
                                    ECWT (Zero, RefOf (LBTM))
                                    Return (Zero)
                                }

                                If ((Arg0 == 0x05))
                                {
                                    ECWT (One, RefOf (LBTM))
                                    ECWT (One, RefOf (BTCF))
                                    ECWT (Zero, RefOf (BTSM))
                                    Return (Zero)
                                }

                                If ((Arg0 == 0x06))
                                {
                                    ECWT (One, RefOf (CSBM))
                                    Return (Zero)
                                }

                                If ((Arg0 == 0x07))
                                {
                                    ECWT (One, RefOf (QCEN))
                                    Return (Zero)
                                }

                                If ((Arg0 == 0x08))
                                {
                                    ECWT (Zero, RefOf (QCEN))
                                    Return (Zero)
                                }
                            }

                            Return (Zero)
                        }

                        Name (BIDF, Package (0x04)
                        {
                            Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            }, 

                            Buffer (0x02)
                            {
                                 0xFF, 0xFF                                       // ..
                            }, 

                            Buffer (0x08)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                            }, 

                            Buffer (0x08)
                            {
                                 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                            }
                        })
                        Method (GBID, 0, Serialized)
                        {
                            DerefOf (BIDF [0x00]) [0x00] = ECRD (RefOf (BCYC))
                            DerefOf (BIDF [0x02]) [0x00] = ECRD (RefOf (MIDL))
                            DerefOf (BIDF [0x02]) [0x01] = ECRD (RefOf (MIDH))
                            DerefOf (BIDF [0x02]) [0x02] = ECRD (RefOf (HIDL))
                            DerefOf (BIDF [0x02]) [0x03] = ECRD (RefOf (HIDH))
                            DerefOf (BIDF [0x02]) [0x04] = ECRD (RefOf (FWVL))
                            DerefOf (BIDF [0x02]) [0x05] = ECRD (RefOf (FWVH))
                            DerefOf (BIDF [0x02]) [0x06] = ECRD (RefOf (DAVL))
                            DerefOf (BIDF [0x02]) [0x07] = ECRD (RefOf (DAVH))
                            Sleep (0x32)
                            Return (BIDF) /* \_SB_.PCI0.LPC0.H_EC.VPC0.BIDF */
                        }

                        Name (VBST, 0x00)
                        Name (VBAC, 0x00)
                        Name (VBPR, 0x00)
                        Name (VBRC, 0x00)
                        Name (VBPV, 0x00)
                        Name (VBFC, 0x00)
                        Name (VBCT, 0x00)
                        Method (MHCF, 1, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Local0 && 0x20))
                            {
                                ECWT (One, RefOf (FUEN))
                            }
                            Else
                            {
                                ECWT (Zero, RefOf (FUEN))
                            }

                            Return (Local0)
                        }

                        Method (MHPF, 1, NotSerialized)
                        {
                            Name (BFWB, Buffer (0x25) {})
                            CreateByteField (BFWB, 0x00, FB0)
                            CreateByteField (BFWB, 0x01, FB1)
                            CreateByteField (BFWB, 0x02, FB2)
                            CreateByteField (BFWB, 0x03, FB3)
                            CreateWordField (BFWB, 0x04, FB4A)
                            CreateWordField (BFWB, 0x06, FB4B)
                            CreateDWordField (BFWB, 0x08, FB4C)
                            CreateDWordField (BFWB, 0x0C, FB4D)
                            CreateDWordField (BFWB, 0x10, FB4E)
                            CreateDWordField (BFWB, 0x14, FB4F)
                            CreateDWordField (BFWB, 0x18, FB4G)
                            CreateDWordField (BFWB, 0x1C, FB4H)
                            CreateDWordField (BFWB, 0x20, FB4I)
                            CreateByteField (BFWB, 0x24, FB5)
                            If ((SizeOf (Arg0) <= 0x25))
                            {
                                If ((SMPR != 0x00))
                                {
                                    FB1 = SMST /* \_SB_.PCI0.LPC0.H_EC.SMST */
                                }
                                Else
                                {
                                    BFWB = Arg0
                                    SMAD = FB2 /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHPF.FB2_ */
                                    SMCD = FB3 /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHPF.FB3_ */
                                    SMCN = FB5 /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHPF.FB5_ */
                                    Local0 = FB0 /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHPF.FB0_ */
                                    If (((Local0 & 0x01) == 0x00))
                                    {
                                        SDAT = FB4A /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHPF.FB4A */
                                        SDA2 = FB4B /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHPF.FB4B */
                                        SDA4 = FB4C /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHPF.FB4C */
                                        SDA5 = FB4D /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHPF.FB4D */
                                        SDA6 = FB4E /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHPF.FB4E */
                                        SDA7 = FB4F /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHPF.FB4F */
                                        SDA8 = FB4G /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHPF.FB4G */
                                        SDA9 = FB4H /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHPF.FB4H */
                                        SDAA = FB4I /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHPF.FB4I */
                                    }

                                    SMST = 0x00
                                    SMPR = FB0 /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHPF.FB0_ */
                                    Local1 = 0x00
                                    While ((0x0A > Local1))
                                    {
                                        Sleep (0x01)
                                        Local1++
                                        If ((SMPR == 0x00))
                                        {
                                            Break
                                        }
                                    }

                                    Local0 = FB0 /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHPF.FB0_ */
                                    If (((Local0 & 0x01) != 0x00))
                                    {
                                        FB4A = SDAT /* \_SB_.PCI0.LPC0.H_EC.SDAT */
                                        FB4B = SDA2 /* \_SB_.PCI0.LPC0.H_EC.SDA2 */
                                        FB4C = SDA4 /* \_SB_.PCI0.LPC0.H_EC.SDA4 */
                                        FB4D = SDA5 /* \_SB_.PCI0.LPC0.H_EC.SDA5 */
                                        FB4E = SDA6 /* \_SB_.PCI0.LPC0.H_EC.SDA6 */
                                        FB4F = SDA7 /* \_SB_.PCI0.LPC0.H_EC.SDA7 */
                                        FB4G = SDA8 /* \_SB_.PCI0.LPC0.H_EC.SDA8 */
                                        FB4H = SDA9 /* \_SB_.PCI0.LPC0.H_EC.SDA9 */
                                        FB4I = SDAA /* \_SB_.PCI0.LPC0.H_EC.SDAA */
                                    }

                                    FB1 = SMST /* \_SB_.PCI0.LPC0.H_EC.SMST */
                                    If ((Local1 >= 0x0A))
                                    {
                                        SMPR = 0x00
                                        FB1 = 0x18
                                    }
                                }

                                Return (BFWB) /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHPF.BFWB */
                            }

                            Return (Arg0)
                        }

                        Method (MHIF, 1, NotSerialized)
                        {
                            Name (BFWI, Buffer (0x0A) {})
                            CreateField (BFWI, 0x00, 0x10, RES)
                            CreateField (BFWI, 0x10, 0x40, ECI)
                            Local0 = Arg0
                            If ((Local0 && 0x01))
                            {
                                BFWI = Zero
                            }
                            Else
                            {
                                Sleep (0x64)
                                Notify (BAT0, 0x81) // Information Change
                                Sleep (0x64)
                                Notify (BAT0, 0x80) // Status Change
                                Sleep (0x64)
                                RES = Zero
                                BFWI [0x02] = ECRD (RefOf (MIDL))
                                BFWI [0x04] = ECRD (RefOf (HIDL))
                                BFWI [0x05] = ECRD (RefOf (HIDH))
                                BFWI [0x06] = ECRD (RefOf (FWVL))
                                BFWI [0x07] = ECRD (RefOf (FWVH))
                                BFWI [0x08] = ECRD (RefOf (DAVL))
                                BFWI [0x09] = ECRD (RefOf (DAVH))
                            }

                            Return (BFWI) /* \_SB_.PCI0.LPC0.H_EC.VPC0.MHIF.BFWI */
                        }

                        Method (HODD, 0, NotSerialized)
                        {
                        }

                        Method (SODD, 1, Serialized)
                        {
                        }

                        Method (SMTF, 0, Serialized)
                        {
                            Name (ATTF, Buffer (0x04) {})
                            Return (ATTF) /* \_SB_.PCI0.LPC0.H_EC.VPC0.SMTF.ATTF */
                        }

                        Method (GSBI, 1, NotSerialized)
                        {
                            Name (BIFB, Buffer (0x53)
                            {
                                /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                /* 0040 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                /* 0048 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                /* 0050 */  0xFF, 0xFF, 0xFF                                 // ...
                            })
                            CreateWordField (BIFB, 0x00, DECP)
                            CreateWordField (BIFB, 0x02, FCAP)
                            CreateWordField (BIFB, 0x04, RCAP)
                            CreateWordField (BIFB, 0x06, ATTE)
                            CreateWordField (BIFB, 0x08, ATTF)
                            CreateWordField (BIFB, 0x0A, BTVT)
                            CreateWordField (BIFB, 0x0C, BTCT)
                            CreateWordField (BIFB, 0x0E, BTMP)
                            CreateWordField (BIFB, 0x10, MDAT)
                            CreateWordField (BIFB, 0x12, FUDT)
                            CreateWordField (BIFB, 0x14, DVLT)
                            CreateField (BIFB, 0xB0, 0x50, DCHE)
                            CreateField (BIFB, 0x0100, 0x40, DNAM)
                            CreateField (BIFB, 0x0140, 0x60, MNAM)
                            CreateField (BIFB, 0x01A0, 0xB8, BRNB)
                            CreateQWordField (BIFB, 0x4B, BFW0)
                            If ((Arg0 == 0x01))
                            {
                                If ((XX10 == 0x01))
                                {
                                    Local0 = (B1DC * 0x0A)
                                    DECP = Local0
                                }
                                Else
                                {
                                    Local0 = (B1DC * B1FV)
                                    Local0 = (Local0 / 0x03E8)
                                    DECP = Local0
                                }

                                If ((XX10 == 0x01))
                                {
                                    Local1 = (B1FC * 0x0A)
                                    FCAP = Local1
                                }
                                Else
                                {
                                    Local1 = (B1FC * B1FV)
                                    Local1 = (Local1 / 0x03E8)
                                    FCAP = Local1
                                }

                                If ((XX10 == 0x01))
                                {
                                    RCAP = (B1RC * 0x0A)
                                }
                                Else
                                {
                                    Local1 = (B1RC * B1FV)
                                    Local1 = (Local1 / 0x03E8)
                                    RCAP = Local1
                                }

                                ATTE = B1TE /* \_SB_.PCI0.LPC0.H_EC.B1TE */
                                ATTF = B1TF /* \_SB_.PCI0.LPC0.H_EC.B1TF */
                                BTVT = B1VT /* \_SB_.PCI0.LPC0.H_EC.B1VT */
                                BTCT = B1CR /* \_SB_.PCI0.LPC0.H_EC.B1CR */
                                BTMP = B1TP /* \_SB_.PCI0.LPC0.H_EC.B1TP */
                                MDAT = B1DA /* \_SB_.PCI0.LPC0.H_EC.B1DA */
                                If ((BFUD != 0x00))
                                {
                                    FUDT = BFUD /* \_SB_.PCI0.LPC0.H_EC.BFUD */
                                }

                                DVLT = B1FV /* \_SB_.PCI0.LPC0.H_EC.B1FV */
                                Name (DCH0, Buffer (0x0A)
                                {
                                     0x00                                             // .
                                })
                                Name (DCH1, "LiP")
                                DCH0 = DCH1 /* \_SB_.PCI0.LPC0.H_EC.VPC0.GSBI.DCH1 */
                                DCHE = DCH0 /* \_SB_.PCI0.LPC0.H_EC.VPC0.GSBI.DCH0 */
                                Name (BFV0, Buffer (0x08)
                                {
                                     0x00                                             // .
                                })
                                BFV0 [0x00] = MIDL /* \_SB_.PCI0.LPC0.H_EC.MIDL */
                                BFV0 [0x01] = MIDH /* \_SB_.PCI0.LPC0.H_EC.MIDH */
                                BFV0 [0x02] = HIDL /* \_SB_.PCI0.LPC0.H_EC.HIDL */
                                BFV0 [0x03] = HIDH /* \_SB_.PCI0.LPC0.H_EC.HIDH */
                                BFV0 [0x04] = FWVL /* \_SB_.PCI0.LPC0.H_EC.FWVL */
                                BFV0 [0x05] = FWVH /* \_SB_.PCI0.LPC0.H_EC.FWVH */
                                BFV0 [0x06] = DAVL /* \_SB_.PCI0.LPC0.H_EC.DAVL */
                                BFV0 [0x07] = DAVH /* \_SB_.PCI0.LPC0.H_EC.DAVH */
                                BFW0 = BFV0 /* \_SB_.PCI0.LPC0.H_EC.VPC0.GSBI.BFV0 */
                                Return (BIFB) /* \_SB_.PCI0.LPC0.H_EC.VPC0.GSBI.BIFB */
                            }

                            If ((Arg0 == 0x02))
                            {
                                Return (BIFB) /* \_SB_.PCI0.LPC0.H_EC.VPC0.GSBI.BIFB */
                            }
                        }

                        Method (BTMC, 1, NotSerialized)
                        {
                            If (ECAV)
                            {
                                Local0 = Arg0
                                Local0 &= 0x0F
                                If ((Local0 == One))
                                {
                                    If ((ECRD (RefOf (TEMM)) == One))
                                    {
                                        Local1 = Arg0
                                        Local1 &= 0xFFFFFFF0
                                        Local1 >>= 0x04
                                        If ((Local1 == One))
                                        {
                                            If ((ECRD (RefOf (PERM)) == One))
                                            {
                                                Local2 = Zero
                                            }
                                            ElseIf ((ECRD (RefOf (BATM)) == 0x08))
                                            {
                                                Local2 = 0x10
                                            }
                                            Else
                                            {
                                                Local2 = 0x20
                                            }
                                        }

                                        If ((Local1 == 0x02))
                                        {
                                            Local2 = (ECRD (RefOf (BBHL)) << 0x04)
                                        }

                                        If ((Local1 == 0x03))
                                        {
                                            Local2 = (ECRD (RefOf (BBHM)) << 0x04)
                                        }

                                        If ((Local1 == 0x04))
                                        {
                                            Local2 = (ECRD (RefOf (BBLP)) << 0x04)
                                        }

                                        Local2 |= 0x01
                                        Return (Local2)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                If ((Local0 == 0x03))
                                {
                                    Local1 = Arg0
                                    Local1 &= 0xFFFFFFF0
                                    Local1 >>= 0x04
                                    If ((Local1 == 0x01))
                                    {
                                        Local2 = 0x03
                                    }

                                    If ((Local1 == 0x02))
                                    {
                                        Local2 = 0x03
                                    }

                                    Return (Local2)
                                }
                            }
                        }

                        Name (APDT, 0x00)
                        Method (APPC, 1, Serialized)
                        {
                        }

                        Method (DBSL, 0, NotSerialized)
                        {
                            Return (Package (0x10)
                            {
                                0xC9, 
                                0xAE, 
                                0x95, 
                                0x7E, 
                                0x69, 
                                0x56, 
                                0x45, 
                                0x36, 
                                0x29, 
                                0x1E, 
                                0x15, 
                                0x0E, 
                                0x09, 
                                0x06, 
                                0x05, 
                                0x00
                            })
                        }

                        Method (SBSL, 1, Serialized)
                        {
                        }

                        Method (STHT, 1, Serialized)
                        {
                            Return (0x00)
                        }
                    }
                }

                Scope (\_SB)
                {
                    Device (WMIU)
                    {
                        Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                        Name (_UID, "LSK20")  // _UID: Unique ID
                        Name (_WDG, Buffer (0x3C)
                        {
                            /* 0000 */  0x74, 0x09, 0x6C, 0xCE, 0x07, 0x04, 0x50, 0x4F,  // t.l...PO
                            /* 0008 */  0x88, 0xBA, 0x4F, 0xC3, 0xB6, 0x55, 0x9A, 0xD8,  // ..O..U..
                            /* 0010 */  0x53, 0x4B, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // SK..!...
                            /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                            /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x44, 0x41, 0x01, 0x00,  // ..).DA..
                            /* 0028 */  0x0C, 0xDE, 0xC0, 0x8F, 0xE4, 0xB4, 0xFD, 0x43,  // .......C
                            /* 0030 */  0xB0, 0xF3, 0x88, 0x71, 0x71, 0x1C, 0x12, 0x94,  // ...qq...
                            /* 0038 */  0xD0, 0x00, 0x01, 0x08                           // ....
                        })
                        Method (WMSK, 3, NotSerialized)
                        {
                            If ((Arg1 == 0x01))
                            {
                                If ((ToInteger (Arg2) == 0x01))
                                {
                                    Return (0x03)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x02))
                                {
                                    Return (0x00)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x03))
                                {
                                    Return (0x02)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x04))
                                {
                                    Return (0x02)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x05))
                                {
                                    Return (0x00)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x06))
                                {
                                    Return (0x00)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x07))
                                {
                                    Return (0x00)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x08))
                                {
                                    Return (0x00)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x09))
                                {
                                    Return (0x00)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0A))
                                {
                                    Return (0x00)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0B))
                                {
                                    Return (0x00)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0C))
                                {
                                    Return (0x15)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0D))
                                {
                                    Return (0x00)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0E))
                                {
                                    Return (0x15)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0F))
                                {
                                    Return (0x15)
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }

                        Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                        {
                            If ((Arg0 == 0xD0))
                            {
                                Return (PSD1) /* \PSD1 */
                            }
                        }

                        Name (WQDA, Buffer (0x0422)
                        {
                            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                            /* 0008 */  0x12, 0x04, 0x00, 0x00, 0x66, 0x0C, 0x00, 0x00,  // ....f...
                            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                            /* 0018 */  0xA8, 0x42, 0x86, 0x00, 0x01, 0x06, 0x18, 0x42,  // .B.....B
                            /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x29, 0x81, 0x42, 0x04,  // ....).B.
                            /* 0028 */  0x8A, 0x40, 0xA4, 0x60, 0x30, 0x28, 0x0D, 0x20,  // .@.`0(. 
                            /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x08,  // ..!.LL..
                            /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  // .y.`S.I.
                            /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,  // ...Q..J.
                            /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,  // .$.0/@..
                            /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,  // ..l.0-.1
                            /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,  // $..N.,.B
                            /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,  // B.(..[.v
                            /* 0068 */  0x44, 0x49, 0x16, 0x60, 0x19, 0x46, 0x04, 0x1E,  // DI.`.F..
                            /* 0070 */  0x45, 0x64, 0xA3, 0x71, 0x68, 0xEC, 0x30, 0x2C,  // Ed.qh.0,
                            /* 0078 */  0x13, 0x4C, 0x83, 0x38, 0x8C, 0xB2, 0x91, 0x45,  // .L.8...E
                            /* 0080 */  0xE0, 0x09, 0x75, 0x2A, 0x40, 0xAE, 0x00, 0x61,  // ..u*@..a
                            /* 0088 */  0x02, 0xC4, 0xA3, 0x0A, 0xA3, 0x39, 0x28, 0x22,  // .....9("
                            /* 0090 */  0x1A, 0x1A, 0x25, 0x66, 0x4C, 0x04, 0xB6, 0x73,  // ..%fL..s
                            /* 0098 */  0x6C, 0x8D, 0xE2, 0x34, 0x0A, 0x17, 0x20, 0x1D,  // l..4.. .
                            /* 00A0 */  0x43, 0x23, 0x38, 0xAE, 0x63, 0x30, 0x58, 0x90,  // C#8.c0X.
                            /* 00A8 */  0x43, 0x31, 0x44, 0x41, 0x02, 0xAC, 0xA2, 0x91,  // C1DA....
                            /* 00B0 */  0x61, 0x84, 0x08, 0x72, 0x7C, 0x81, 0xBA, 0xC4,  // a..r|...
                            /* 00B8 */  0x13, 0x88, 0xC7, 0xE4, 0x01, 0x18, 0x21, 0x4C,  // ......!L
                            /* 00C0 */  0x8B, 0xB0, 0x82, 0x36, 0x62, 0x02, 0xC3, 0x1E,  // ...6b...
                            /* 00C8 */  0x0A, 0xE6, 0x07, 0x20, 0x01, 0x9E, 0x05, 0x58,  // ... ...X
                            /* 00D0 */  0x1F, 0x23, 0x21, 0xB0, 0x7B, 0x01, 0xE2, 0x04,  // .#!.{...
                            /* 00D8 */  0x68, 0x1E, 0x8D, 0x46, 0x75, 0x9C, 0xC6, 0x88,  // h..Fu...
                            /* 00E0 */  0xD2, 0x96, 0x00, 0xC5, 0x23, 0x13, 0x4C, 0x88,  // ....#.L.
                            /* 00E8 */  0x28, 0x21, 0x3A, 0xC3, 0x13, 0x5A, 0x28, 0xC3,  // (!:..Z(.
                            /* 00F0 */  0x45, 0x89, 0x13, 0x25, 0x70, 0x84, 0xDE, 0x04,  // E..%p...
                            /* 00F8 */  0x18, 0x83, 0x20, 0x08, 0x81, 0x43, 0x54, 0x36,  // .. ..CT6
                            /* 0100 */  0x48, 0xA1, 0xB6, 0x3F, 0x08, 0x22, 0xCB, 0xC1,  // H..?."..
                            /* 0108 */  0x89, 0x80, 0x45, 0x1A, 0x0D, 0xEA, 0x14, 0x90,  // ..E.....
                            /* 0110 */  0xE0, 0xA9, 0xC0, 0x27, 0x82, 0x93, 0x3A, 0xAF,  // ...'..:.
                            /* 0118 */  0xA3, 0x3A, 0xEB, 0x20, 0xC1, 0x4F, 0xA4, 0xCE,  // .:. .O..
                            /* 0120 */  0xE3, 0x00, 0x19, 0x38, 0x9B, 0x9A, 0xD9, 0x75,  // ...8...u
                            /* 0128 */  0x3E, 0x80, 0xE0, 0x1A, 0x50, 0xFF, 0xFF, 0x79,  // >...P..y
                            /* 0130 */  0x3E, 0x16, 0xB0, 0x61, 0x86, 0xC3, 0x0C, 0xD1,  // >..a....
                            /* 0138 */  0x83, 0xF5, 0x04, 0x0E, 0x91, 0x01, 0x7A, 0x62,  // ......zb
                            /* 0140 */  0x4F, 0x04, 0x58, 0x87, 0x93, 0xD1, 0x71, 0xA0,  // O.X...q.
                            /* 0148 */  0x54, 0x01, 0x66, 0xC7, 0xAD, 0x49, 0x27, 0x38,  // T.f..I'8
                            /* 0150 */  0x1E, 0x9F, 0x03, 0x3C, 0x9F, 0x13, 0x4E, 0x60,  // ...<..N`
                            /* 0158 */  0xF9, 0x83, 0x40, 0x8D, 0xCC, 0xD0, 0x36, 0x38,  // ..@...68
                            /* 0160 */  0x2D, 0x1D, 0x04, 0x7C, 0x00, 0x30, 0x81, 0xC5,  // -..|.0..
                            /* 0168 */  0x1E, 0x26, 0xE8, 0x78, 0xC0, 0x7F, 0x00, 0x78,  // .&.x...x
                            /* 0170 */  0x3E, 0x88, 0xF0, 0xCE, 0xE0, 0xF9, 0x9A, 0xA0,  // >.......
                            /* 0178 */  0xA8, 0xB3, 0x85, 0x9C, 0x8C, 0x07, 0x75, 0xAC,  // ......u.
                            /* 0180 */  0xF0, 0x05, 0x01, 0x03, 0x7E, 0xB4, 0x2F, 0x0C,  // ....~./.
                            /* 0188 */  0x61, 0x5E, 0x1A, 0xE2, 0x1E, 0xBC, 0xB5, 0x5E,  // a^.....^
                            /* 0190 */  0x21, 0x08, 0x81, 0x83, 0x43, 0xE8, 0xAF, 0x61,  // !...C..a
                            /* 0198 */  0x51, 0x83, 0xA7, 0x27, 0x0B, 0x7E, 0xA8, 0x60,  // Q..'.~.`
                            /* 01A0 */  0xC0, 0x7C, 0x3C, 0xA7, 0xE5, 0xB3, 0x87, 0x87,  // .|<.....
                            /* 01A8 */  0x07, 0x7F, 0x26, 0x4F, 0x14, 0xC0, 0x41, 0xE3,  // ..&O..A.
                            /* 01B0 */  0x19, 0x41, 0x88, 0xAF, 0x14, 0x6F, 0x14, 0xD8,  // .A...o..
                            /* 01B8 */  0xF3, 0x01, 0xBB, 0x53, 0x60, 0x87, 0x0E, 0xFF,  // ...S`...
                            /* 01C0 */  0x5A, 0x61, 0x54, 0x5F, 0x25, 0xDE, 0x22, 0x12,  // ZaT_%.".
                            /* 01C8 */  0x18, 0x2B, 0xC1, 0xFF, 0x3F, 0x30, 0x6E, 0xEC,  // .+..?0n.
                            /* 01D0 */  0xF6, 0x2B, 0x00, 0x21, 0xF8, 0xC1, 0x3C, 0x1B,  // .+.!..<.
                            /* 01D8 */  0x3C, 0x85, 0x44, 0x38, 0x2E, 0xA3, 0x1F, 0x50,  // <.D8...P
                            /* 01E0 */  0x9F, 0x33, 0x17, 0x44, 0xB4, 0xE3, 0x3A, 0x87,  // .3.D..:.
                            /* 01E8 */  0xA3, 0x08, 0x15, 0xE2, 0x2C, 0x0C, 0x14, 0x2E,  // ....,...
                            /* 01F0 */  0x58, 0x40, 0xE3, 0x24, 0xB0, 0xC8, 0xC1, 0xA2,  // X@.$....
                            /* 01F8 */  0x07, 0xC1, 0x01, 0xCF, 0xE1, 0x90, 0x82, 0x1E,  // ........
                            /* 0200 */  0xC4, 0xC9, 0x44, 0x39, 0x8F, 0x63, 0xF2, 0x39,  // ..D9.c.9
                            /* 0208 */  0xC5, 0x08, 0xC7, 0xF4, 0x78, 0xF2, 0xDC, 0xE1,  // ....x...
                            /* 0210 */  0xFB, 0xC6, 0xE1, 0x9F, 0xD7, 0xD1, 0x3E, 0x85,  // ......>.
                            /* 0218 */  0xB0, 0xA1, 0x1F, 0x02, 0xE6, 0x74, 0xE1, 0x21,  // .....t.!
                            /* 0220 */  0xF0, 0x01, 0x1C, 0xD0, 0x29, 0x5A, 0xE9, 0xC4,  // ....)Z..
                            /* 0228 */  0x90, 0x27, 0x1A, 0x7E, 0x2C, 0xC1, 0x0E, 0x80,  // .'.~,...
                            /* 0230 */  0xAB, 0xF2, 0x00, 0xC2, 0xC4, 0x3F, 0x0E, 0x24,  // .....?.$
                            /* 0238 */  0xED, 0x95, 0x40, 0x61, 0x7C, 0xC6, 0x01, 0x5C,  // ..@a|..\
                            /* 0240 */  0x01, 0x3D, 0x42, 0x80, 0xE7, 0x6C, 0x00, 0x17,  // .=B..l..
                            /* 0248 */  0xFB, 0xE4, 0xA3, 0x84, 0x78, 0x7A, 0x88, 0x7E,  // ....xz.~
                            /* 0250 */  0x2E, 0x27, 0xF3, 0x08, 0x61, 0x82, 0xFF, 0xFF,  // .'..a...
                            /* 0258 */  0x03, 0x0E, 0xEC, 0x2B, 0x8C, 0xB5, 0x5D, 0x70,  // ...+..]p
                            /* 0260 */  0xC8, 0x94, 0x9E, 0x6A, 0xDE, 0x6E, 0x8C, 0x72,  // ...j.n.r
                            /* 0268 */  0x58, 0x86, 0x79, 0xC0, 0xF1, 0xED, 0xA0, 0x35,  // X.y....5
                            /* 0270 */  0x18, 0xDD, 0x6E, 0xD8, 0x89, 0xE4, 0x24, 0x42,  // ..n...$B
                            /* 0278 */  0x31, 0xDC, 0x07, 0x89, 0x38, 0xB1, 0xC3, 0x45,  // 1...8..E
                            /* 0280 */  0x88, 0xFD, 0xD0, 0x61, 0xBC, 0x07, 0x1C, 0x16,  // ...a....
                            /* 0288 */  0xEF, 0x38, 0xA0, 0x83, 0x88, 0x0F, 0x38, 0x00,  // .8....8.
                            /* 0290 */  0x3F, 0x4E, 0x07, 0x8F, 0x25, 0xE0, 0x3F, 0x2B,  // ?N..%.?+
                            /* 0298 */  0xF0, 0x53, 0x09, 0x18, 0xFE, 0xFF, 0xA7, 0x12,  // .S......
                            /* 02A0 */  0xF0, 0x24, 0x7E, 0x10, 0xE8, 0xB4, 0xE3, 0xB4,  // .$~.....
                            /* 02A8 */  0x20, 0xB2, 0xB1, 0x58, 0x1F, 0xAA, 0x0C, 0xA1,  //  ..X....
                            /* 02B0 */  0x9C, 0x0B, 0x96, 0x47, 0x5C, 0x61, 0x1E, 0x4F,  // ...G\a.O
                            /* 02B8 */  0xE4, 0x73, 0x88, 0xFC, 0x52, 0x11, 0xE1, 0x0C,  // .s..R...
                            /* 02C0 */  0x8E, 0x21, 0xD2, 0x69, 0xC5, 0x38, 0xB0, 0x57,  // .!.i.8.W
                            /* 02C8 */  0x0E, 0xDF, 0x03, 0x9E, 0x2C, 0x78, 0x22, 0x60,  // ....,x"`
                            /* 02D0 */  0x1D, 0xE5, 0x78, 0x16, 0x0A, 0x29, 0xA3, 0xD1,  // ..x..)..
                            /* 02D8 */  0xA8, 0x3C, 0x08, 0x6B, 0x81, 0x11, 0x9C, 0x41,  // .<.k...A
                            /* 02E0 */  0x0C, 0xE8, 0xA0, 0x10, 0x3A, 0x22, 0xE1, 0x94,  // ....:"..
                            /* 02E8 */  0x80, 0x68, 0x5A, 0x6F, 0x44, 0xEC, 0xDC, 0xE3,  // .hZoD...
                            /* 02F0 */  0x1B, 0x92, 0x09, 0xA6, 0xBA, 0x1D, 0xD1, 0x79,  // .......y
                            /* 02F8 */  0xFA, 0x46, 0xC0, 0xEF, 0x29, 0x3E, 0x23, 0x18,  // .F..)>#.
                            /* 0300 */  0xDC, 0x0A, 0xEF, 0x1F, 0xA0, 0x19, 0x71, 0x10,  // ......q.
                            /* 0308 */  0xDF, 0x18, 0x7C, 0x26, 0xF0, 0x46, 0x4F, 0x04,  // ..|&.FO.
                            /* 0310 */  0xA3, 0xE6, 0xD0, 0x84, 0x9A, 0x86, 0xA7, 0xFA,  // ........
                            /* 0318 */  0x62, 0x63, 0x02, 0xEB, 0xBA, 0x0C, 0x81, 0x4C,  // bc.....L
                            /* 0320 */  0xDF, 0x31, 0x01, 0x14, 0x40, 0xBE, 0x14, 0xF8,  // .1..@...
                            /* 0328 */  0xA4, 0xF3, 0x60, 0xC0, 0xC6, 0xF0, 0xB0, 0x63,  // ..`....c
                            /* 0330 */  0x34, 0xA3, 0x73, 0xC1, 0x93, 0x47, 0x49, 0x9C,  // 4.s..GI.
                            /* 0338 */  0x3C, 0x05, 0xF1, 0xE4, 0x1D, 0x7F, 0xF2, 0xE8,  // <.......
                            /* 0340 */  0x3B, 0x85, 0x8F, 0x57, 0x9C, 0xC0, 0x71, 0xC7,  // ;..W..q.
                            /* 0348 */  0x4E, 0xAF, 0x20, 0x98, 0xFF, 0xFF, 0x30, 0xD8,  // N. ...0.
                            /* 0350 */  0x64, 0x4F, 0xED, 0x51, 0xC1, 0xB3, 0xF0, 0xA5,  // dO.Q....
                            /* 0358 */  0x05, 0x37, 0x78, 0xB8, 0xB7, 0x8C, 0x23, 0x0F,  // .7x...#.
                            /* 0360 */  0xF3, 0x4C, 0xE5, 0xF3, 0x95, 0xC1, 0x82, 0x84,  // .L......
                            /* 0368 */  0x79, 0x5F, 0xC0, 0x01, 0xBD, 0xDF, 0xBD, 0x38,  // y_.....8
                            /* 0370 */  0x1C, 0x6E, 0x88, 0xF3, 0x3D, 0xF4, 0x08, 0x3E,  // .n..=..>
                            /* 0378 */  0x7E, 0xF8, 0xCC, 0x80, 0x1B, 0x12, 0xBB, 0x06,  // ~.......
                            /* 0380 */  0xF0, 0xD1, 0xF8, 0x1A, 0xC0, 0x47, 0xE9, 0x3B,  // .....G.;
                            /* 0388 */  0x16, 0xF8, 0x04, 0xDE, 0x03, 0x40, 0x0E, 0x8F,  // .....@..
                            /* 0390 */  0x09, 0x3F, 0x2A, 0x7A, 0xCF, 0xF0, 0xB8, 0xF8,  // .?*z....
                            /* 0398 */  0x90, 0x7D, 0x45, 0x62, 0xD8, 0xCF, 0x1A, 0xBE,  // .}Eb....
                            /* 03A0 */  0x47, 0x9E, 0xE0, 0x2B, 0xC5, 0x2B, 0x1B, 0x06,  // G..+.+..
                            /* 03A8 */  0xD6, 0x87, 0x00, 0x0E, 0x6B, 0xB4, 0xB0, 0x87,  // ....k...
                            /* 03B0 */  0xFC, 0x92, 0xE2, 0x13, 0x8E, 0x67, 0x66, 0x8C,  // .....gf.
                            /* 03B8 */  0xB0, 0x3E, 0x08, 0x38, 0xCC, 0x41, 0x00, 0x34,  // .>.8.A.4
                            /* 03C0 */  0x47, 0x36, 0xFC, 0x0D, 0xC0, 0x97, 0x80, 0x20,  // G6..... 
                            /* 03C8 */  0x6F, 0x22, 0xA7, 0xFB, 0xE4, 0x63, 0x54, 0x7E,  // o"...cT~
                            /* 03D0 */  0x23, 0xE0, 0xE7, 0x11, 0x2C, 0x50, 0x10, 0xDF,  // #...,P..
                            /* 03D8 */  0x30, 0x3C, 0xB6, 0x03, 0x89, 0x0D, 0xE7, 0x5A,  // 0<.....Z
                            /* 03E0 */  0xC2, 0xFE, 0xFF, 0x77, 0x02, 0x8C, 0x42, 0x9B,  // ...w..B.
                            /* 03E8 */  0x3E, 0x35, 0x1A, 0xB5, 0x6A, 0x50, 0xA6, 0x46,  // >5..jP.F
                            /* 03F0 */  0x99, 0x06, 0xB5, 0xFA, 0x54, 0x6A, 0xCC, 0x98,  // ....Tj..
                            /* 03F8 */  0x89, 0x2B, 0x9F, 0x5F, 0x11, 0x1A, 0xB1, 0x23,  // .+._...#
                            /* 0400 */  0x81, 0xD0, 0x98, 0x14, 0x02, 0x71, 0xE8, 0x1F,  // .....q..
                            /* 0408 */  0x87, 0x40, 0x2C, 0xF9, 0x1E, 0x26, 0x10, 0x4B,  // .@,..&.K
                            /* 0410 */  0xA2, 0x95, 0x91, 0x8B, 0x86, 0x41, 0x04, 0x64,  // .....A.d
                            /* 0418 */  0xFD, 0x2A, 0x80, 0x58, 0x1A, 0x10, 0x01, 0xF9,  // .*.X....
                            /* 0420 */  0xFF, 0x0F                                       // ..
                        })
                    }

                    Device (WMIL)
                    {
                        Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                        Name (_UID, "LSK")  // _UID: Unique ID
                        Name (_WDG, Buffer (0x3C)
                        {
                            /* 0000 */  0xB9, 0xEC, 0x18, 0x7F, 0xE6, 0xED, 0x4F, 0x4A,  // ......OJ
                            /* 0008 */  0xA7, 0xCA, 0xB8, 0xDC, 0xF1, 0x5F, 0xA1, 0xD3,  // ....._..
                            /* 0010 */  0x53, 0x4B, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // SK..!...
                            /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                            /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x44, 0x46, 0x01, 0x00,  // ..).DF..
                            /* 0028 */  0x73, 0x9C, 0x64, 0x1F, 0xC5, 0xD9, 0x5A, 0x47,  // s.d...ZG
                            /* 0030 */  0xA8, 0xC9, 0x34, 0x73, 0x06, 0xCD, 0x33, 0x29,  // ..4s..3)
                            /* 0038 */  0xD0, 0x00, 0x01, 0x08                           // ....
                        })
                        Method (LLSK, 1, NotSerialized)
                        {
                            Return (One)
                        }

                        Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                        {
                            If ((Arg0 == 0xD0))
                            {
                                Return (One)
                            }
                        }

                        Name (WQDF, Buffer (0x04D4)
                        {
                            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                            /* 0008 */  0xC4, 0x04, 0x00, 0x00, 0xA8, 0x12, 0x00, 0x00,  // ........
                            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                            /* 0018 */  0x28, 0x43, 0x89, 0x00, 0x01, 0x06, 0x18, 0x42,  // (C.....B
                            /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x28, 0x81, 0x42, 0x04,  // ....(.B.
                            /* 0028 */  0x0A, 0x40, 0xA4, 0x50, 0x30, 0x28, 0x0D, 0x20,  // .@.P0(. 
                            /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x08,  // ..!.LL..
                            /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  // .y.`S.I.
                            /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,  // ...Q..J.
                            /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,  // .$.0/@..
                            /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,  // ..l.0-.1
                            /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,  // $..N.,.B
                            /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,  // B.(..[.v
                            /* 0068 */  0x44, 0x49, 0x16, 0x60, 0x19, 0x46, 0x04, 0x1E,  // DI.`.F..
                            /* 0070 */  0x45, 0x64, 0xA3, 0x71, 0x68, 0xEC, 0x30, 0x2C,  // Ed.qh.0,
                            /* 0078 */  0x13, 0x4C, 0x83, 0x38, 0x8C, 0xB2, 0x91, 0x45,  // .L.8...E
                            /* 0080 */  0xE0, 0x09, 0x75, 0x2A, 0x40, 0xAE, 0x00, 0x61,  // ..u*@..a
                            /* 0088 */  0x02, 0xC4, 0xA3, 0x0A, 0xA3, 0x39, 0x28, 0x32,  // .....9(2
                            /* 0090 */  0x87, 0xD0, 0x18, 0x31, 0x63, 0x22, 0xB0, 0x9D,  // ...1c"..
                            /* 0098 */  0x63, 0x6B, 0x14, 0xA7, 0x51, 0xB8, 0x00, 0xE9,  // ck..Q...
                            /* 00A0 */  0x18, 0x1A, 0xC1, 0x71, 0x1D, 0x83, 0xC1, 0x82,  // ...q....
                            /* 00A8 */  0x1C, 0x8A, 0x21, 0x0A, 0x1A, 0x82, 0xAC, 0x0E,  // ..!.....
                            /* 00B0 */  0x47, 0x16, 0x05, 0x28, 0x85, 0x91, 0x4B, 0x34,  // G..(..K4
                            /* 00B8 */  0x0D, 0x30, 0xC8, 0x21, 0x19, 0xDE, 0x08, 0x61,  // .0.!...a
                            /* 00C0 */  0xA2, 0x05, 0x0D, 0xEC, 0x01, 0x24, 0xF0, 0x80,  // .....$..
                            /* 00C8 */  0x8E, 0x04, 0x23, 0x03, 0x42, 0x9E, 0x05, 0x58,  // ..#.B..X
                            /* 00D0 */  0x1F, 0x22, 0x21, 0xB0, 0x7B, 0x01, 0xC6, 0x04,  // ."!.{...
                            /* 00D8 */  0x68, 0x14, 0xA0, 0x6D, 0x52, 0x1A, 0x54, 0x87,  // h..mR.T.
                            /* 00E0 */  0x02, 0xBC, 0x09, 0x70, 0x26, 0xC0, 0xD6, 0x88,  // ...p&...
                            /* 00E8 */  0x04, 0x63, 0x6B, 0x28, 0xC2, 0x8A, 0x14, 0xA4,  // .ck(....
                            /* 00F0 */  0x41, 0x14, 0x41, 0x14, 0x07, 0x25, 0xB0, 0x28,  // A.A..%.(
                            /* 00F8 */  0x11, 0x63, 0x19, 0xE3, 0x04, 0x63, 0x47, 0x0A,  // .c...cG.
                            /* 0100 */  0x1B, 0x25, 0x42, 0x65, 0x68, 0xB2, 0x3F, 0x08,  // .%Beh.?.
                            /* 0108 */  0x22, 0xCA, 0xC1, 0x81, 0x80, 0x45, 0x1A, 0x0D,  // "....E..
                            /* 0110 */  0xEA, 0x10, 0x90, 0xE0, 0xA1, 0xC0, 0x07, 0x82,  // ........
                            /* 0118 */  0x93, 0x3A, 0xAF, 0xA3, 0x3A, 0xE9, 0x20, 0x27,  // .:..:. '
                            /* 0120 */  0x7A, 0x60, 0x75, 0x9E, 0x06, 0xC8, 0xB8, 0xD9,  // z`u.....
                            /* 0128 */  0xD4, 0xCC, 0xAE, 0xE3, 0x01, 0x04, 0xD7, 0xF3,  // ........
                            /* 0130 */  0x24, 0x04, 0xFF, 0xFF, 0xA7, 0x02, 0x0F, 0x33,  // $......3
                            /* 0138 */  0x1C, 0x66, 0x88, 0x1E, 0xAC, 0x27, 0x70, 0x88,  // .f...'p.
                            /* 0140 */  0x0C, 0xD0, 0x93, 0x7A, 0x20, 0xC0, 0xCE, 0xEB,  // ...z ...
                            /* 0148 */  0x64, 0x9E, 0x06, 0x4A, 0x15, 0x60, 0x76, 0xEC,  // d..J.`v.
                            /* 0150 */  0x84, 0xE0, 0x78, 0x7C, 0x0C, 0xF0, 0x7C, 0x4E,  // ..x|..|N
                            /* 0158 */  0x38, 0x81, 0xE5, 0x0F, 0x02, 0x35, 0x32, 0x43,  // 8....52C
                            /* 0160 */  0x7B, 0xA8, 0xA7, 0xF5, 0x36, 0xE0, 0x03, 0x80,  // {...6...
                            /* 0168 */  0x09, 0x2C, 0xF6, 0x2C, 0x41, 0xC7, 0x03, 0x7E,  // .,.,A..~
                            /* 0170 */  0xC5, 0xC7, 0x03, 0x21, 0xBC, 0x32, 0x78, 0xBE,  // ...!.2x.
                            /* 0178 */  0x3E, 0x51, 0xE8, 0x68, 0xA1, 0xF1, 0xE0, 0x4E,  // >Q.h...N
                            /* 0180 */  0x15, 0xBE, 0x20, 0x60, 0xC0, 0x8F, 0xF6, 0x7D,  // .. `...}
                            /* 0188 */  0x21, 0xCC, 0x7B, 0x40, 0xDC, 0x83, 0xB7, 0xD6,  // !.{@....
                            /* 0190 */  0x1B, 0x04, 0x21, 0x70, 0x6C, 0x08, 0x7D, 0x35,  // ..!pl.}5
                            /* 0198 */  0x2C, 0x6A, 0xF0, 0xF4, 0x60, 0xC1, 0xCF, 0x14,  // ,j..`...
                            /* 01A0 */  0x0C, 0x98, 0x8F, 0xE7, 0xB4, 0x7C, 0xF4, 0xF0,  // .....|..
                            /* 01A8 */  0xF0, 0xE0, 0x9F, 0x1B, 0x70, 0x07, 0x0A, 0x60,  // ....p..`
                            /* 01B0 */  0x32, 0x40, 0x7E, 0xA5, 0xC0, 0x8E, 0x1C, 0x7C,  // 2@~....|
                            /* 01B8 */  0x58, 0x81, 0x31, 0xFF, 0x7F, 0x60, 0x0F, 0xDD,  // X.1..`..
                            /* 01C0 */  0x7E, 0x05, 0x20, 0x04, 0x3F, 0xA7, 0x47, 0x83,  // ~. .?.G.
                            /* 01C8 */  0x23, 0x8A, 0x70, 0x58, 0x46, 0x7F, 0x84, 0xE8,  // #.pXF...
                            /* 01D0 */  0x73, 0xE2, 0x82, 0x88, 0x76, 0x58, 0x98, 0x59,  // s...vX.Y
                            /* 01D8 */  0xC5, 0x38, 0x8C, 0x48, 0x31, 0xA2, 0x45, 0xF4,  // .8.H1.E.
                            /* 01E0 */  0x4C, 0x12, 0x14, 0x39, 0x56, 0xF4, 0x20, 0x38,  // L..9V. 8
                            /* 01E8 */  0xDE, 0x39, 0x1C, 0x52, 0xCC, 0xF8, 0xE1, 0xA3,  // .9.R....
                            /* 01F0 */  0x9C, 0xC7, 0x31, 0xF9, 0x94, 0x62, 0x84, 0xB3,  // ..1..b..
                            /* 01F8 */  0x7B, 0x38, 0x79, 0x58, 0xB1, 0xE6, 0x49, 0xE9,  // {8yX..I.
                            /* 0200 */  0xF4, 0x71, 0x5A, 0x0F, 0x21, 0x6C, 0xE4, 0x87,  // .qZ.!l..
                            /* 0208 */  0x80, 0x39, 0x5C, 0x78, 0x08, 0x7C, 0x3E, 0x98,  // .9\x.|>.
                            /* 0210 */  0x89, 0xE1, 0xCE, 0x33, 0xFC, 0x54, 0x82, 0x1D,  // ...3.T..
                            /* 0218 */  0x00, 0x97, 0x66, 0x03, 0x84, 0xC9, 0x7F, 0x1B,  // ..f.....
                            /* 0220 */  0x48, 0xDE, 0x23, 0x81, 0xC2, 0xF8, 0x84, 0x03,  // H.#.....
                            /* 0228 */  0xB8, 0x12, 0x7C, 0x82, 0x00, 0xD1, 0xD9, 0x00,  // ..|.....
                            /* 0230 */  0x36, 0xF8, 0xD1, 0x3F, 0x1A, 0x84, 0x78, 0x7B,  // 6..?..x{
                            /* 0238 */  0x08, 0x7F, 0x30, 0x47, 0xF3, 0x0C, 0xE1, 0x03,  // ..0G....
                            /* 0240 */  0x0E, 0xFF, 0xFF, 0x1F, 0x70, 0x60, 0x9E, 0x69,  // ....p`.i
                            /* 0248 */  0x1E, 0x70, 0x9E, 0x70, 0xDE, 0x6B, 0x8E, 0xE0,  // .p.p.k..
                            /* 0250 */  0x6D, 0xA0, 0xC2, 0x8B, 0x0D, 0x41, 0x39, 0x85,  // m....A9.
                            /* 0258 */  0x10, 0xEF, 0x35, 0x0F, 0x38, 0x9E, 0x43, 0x88,  // ..5.8.C.
                            /* 0260 */  0x80, 0x0F, 0x38, 0x06, 0x0D, 0xF8, 0x8A, 0x63,  // ..8....c
                            /* 0268 */  0xC8, 0xB0, 0x01, 0xC3, 0xC4, 0xF6, 0x39, 0x27,  // ......9'
                            /* 0270 */  0x46, 0xA8, 0x20, 0x6F, 0x38, 0x3E, 0xE0, 0xB0,  // F. o8>..
                            /* 0278 */  0x80, 0xE7, 0x01, 0x1D, 0x44, 0x7C, 0xC0, 0x01,  // ....D|..
                            /* 0280 */  0xF8, 0x71, 0x2E, 0x01, 0x0E, 0x87, 0x05, 0x4E,  // .q.....N
                            /* 0288 */  0xE0, 0x73, 0x09, 0xFC, 0xFF, 0xFF, 0xB9, 0x04,  // .s......
                            /* 0290 */  0x3C, 0x91, 0x4D, 0x1C, 0x09, 0x98, 0x76, 0x0A,  // <.M...v.
                            /* 0298 */  0xD9, 0x58, 0xAD, 0x4F, 0x05, 0x34, 0xD3, 0x8A,  // .X.O.4..
                            /* 02A0 */  0xE5, 0x11, 0x57, 0x98, 0x4F, 0x41, 0x58, 0xF4,  // ..W.OAX.
                            /* 02A8 */  0x43, 0x67, 0x29, 0x00, 0x75, 0x8C, 0xE3, 0xFA,  // Cg).u...
                            /* 02B0 */  0x29, 0xA4, 0x8C, 0x46, 0x23, 0x32, 0x9C, 0xB5,  // )..F#2..
                            /* 02B8 */  0xC0, 0x08, 0xCE, 0x20, 0x06, 0x74, 0x50, 0x08,  // ... .tP.
                            /* 02C0 */  0x39, 0x39, 0x0E, 0xA0, 0x7E, 0x75, 0x9A, 0x92,  // 99..~u..
                            /* 02C8 */  0x66, 0xC1, 0x20, 0x5E, 0x77, 0x18, 0xC1, 0x54,  // f. ^w..T
                            /* 02D0 */  0x57, 0x23, 0x3A, 0x47, 0x5F, 0x07, 0xF8, 0x2D,  // W#:G_..-
                            /* 02D8 */  0xC5, 0x07, 0x04, 0x83, 0xFB, 0x48, 0xF1, 0xF6,  // .....H..
                            /* 02E0 */  0x01, 0x96, 0xD1, 0x06, 0xF1, 0x75, 0xC1, 0x07,  // .....u..
                            /* 02E8 */  0x02, 0x6F, 0xF2, 0x44, 0x30, 0x6A, 0x4E, 0x4C,  // .o.D0jNL
                            /* 02F0 */  0xA8, 0x69, 0xF8, 0x72, 0xF0, 0x5A, 0x63, 0x02,  // .i.r.Zc.
                            /* 02F8 */  0xEB, 0xBA, 0x23, 0x40, 0x3F, 0x80, 0x78, 0x14,  // ..#@?.x.
                            /* 0300 */  0xBE, 0x9E, 0x99, 0xA0, 0xBE, 0x33, 0x02, 0x28,  // .....3.(
                            /* 0308 */  0x80, 0x7C, 0x21, 0xF0, 0xFD, 0xE0, 0xA1, 0x80,  // .|!.....
                            /* 0310 */  0x8D, 0xE1, 0x15, 0xC1, 0x68, 0x46, 0xE7, 0x22,  // ....hF."
                            /* 0318 */  0x27, 0x8F, 0x92, 0x35, 0x79, 0x0A, 0xE2, 0xC9,  // '..5y...
                            /* 0320 */  0x3B, 0xF2, 0xE4, 0xD1, 0x17, 0x0A, 0x1F, 0x09,  // ;.......
                            /* 0328 */  0x38, 0x81, 0x23, 0x8E, 0x9D, 0xDE, 0x3F, 0xF0,  // 8.#...?.
                            /* 0330 */  0x93, 0x3D, 0xB5, 0xC7, 0x04, 0x23, 0xFF, 0xFF,  // .=...#..
                            /* 0338 */  0x43, 0xBC, 0x20, 0x79, 0xF0, 0xE0, 0x38, 0x57,  // C. y..8W
                            /* 0340 */  0xC1, 0x19, 0x0B, 0x47, 0x79, 0x5B, 0xC0, 0x0E,  // ...Gy[..
                            /* 0348 */  0xC6, 0x17, 0x00, 0x3E, 0x0E, 0x5F, 0x00, 0xF8,  // ...>._..
                            /* 0350 */  0xF8, 0x7C, 0xE9, 0x80, 0x7F, 0x02, 0xC0, 0x12,  // .|......
                            /* 0358 */  0x14, 0x78, 0x03, 0x00, 0x39, 0x3C, 0x26, 0xDE,  // .x..9<&.
                            /* 0360 */  0xA8, 0xA8, 0xAC, 0x71, 0xA1, 0x06, 0xEB, 0xAB,  // ...q....
                            /* 0368 */  0x11, 0xC3, 0x7E, 0xC2, 0xB0, 0xE8, 0xB1, 0xEA,  // ..~.....
                            /* 0370 */  0x32, 0xF1, 0xA6, 0x86, 0x81, 0xF5, 0xF0, 0x39,  // 2......9
                            /* 0378 */  0xAC, 0xD1, 0xC2, 0x1E, 0xF5, 0xBB, 0x89, 0x0F,  // ........
                            /* 0380 */  0x36, 0x9E, 0x99, 0x31, 0xC2, 0xFA, 0x08, 0xE0,  // 6..1....
                            /* 0388 */  0xDB, 0xC7, 0x23, 0x00, 0x98, 0x4F, 0x6A, 0xB0,  // ..#..Oj.
                            /* 0390 */  0xAE, 0x08, 0x18, 0x41, 0x6F, 0x05, 0xDD, 0x46,  // ...Ao..F
                            /* 0398 */  0xF8, 0x38, 0x2C, 0x79, 0x5D, 0xBA, 0x8D, 0xB0,  // .8,y]...
                            /* 03A0 */  0x09, 0xB0, 0xCB, 0x0F, 0x4E, 0xE6, 0xC9, 0x81,  // ....N...
                            /* 03A8 */  0x42, 0x58, 0xE0, 0x7D, 0xCB, 0x07, 0x08, 0x94,  // BX.}....
                            /* 03B0 */  0x20, 0x38, 0x0A, 0xE2, 0x03, 0x84, 0xC3, 0x0A,  //  8......
                            /* 03B8 */  0xF8, 0xFF, 0xDF, 0x89, 0xB0, 0x07, 0x08, 0x7C,  // .......|
                            /* 03C0 */  0xB8, 0x03, 0x04, 0x28, 0x2E, 0x32, 0xF8, 0xE1,  // ...(.2..
                            /* 03C8 */  0x82, 0x6B, 0x78, 0xB8, 0xD3, 0x03, 0x3C, 0x02,  // .kx...<.
                            /* 03D0 */  0x5F, 0x90, 0xC0, 0x77, 0x7A, 0x00, 0x1E, 0xA1,  // _..wz...
                            /* 03D8 */  0x4E, 0x0F, 0xA0, 0x3B, 0x05, 0xF8, 0xF4, 0x00,  // N..;....
                            /* 03E0 */  0xAE, 0xF1, 0x03, 0x0F, 0x8D, 0x2F, 0x03, 0xDD,  // ...../..
                            /* 03E8 */  0x8A, 0x70, 0x8A, 0xD7, 0x26, 0xE8, 0xB7, 0x22,  // .p..&.."
                            /* 03F0 */  0x98, 0x1A, 0x01, 0x75, 0x2B, 0x62, 0xFF, 0x7F,  // ...u+b..
                            /* 03F8 */  0x82, 0xEA, 0x60, 0x94, 0xFF, 0xE4, 0x80, 0x4A,  // ..`....J
                            /* 0400 */  0x7C, 0x72, 0xA0, 0x20, 0x1E, 0xAD, 0x6F, 0x45,  // |r. ..oE
                            /* 0408 */  0x80, 0xCF, 0x98, 0xA7, 0x1F, 0x28, 0xB7, 0xB4,  // .....(..
                            /* 0410 */  0xF3, 0xC6, 0xC4, 0x9A, 0x22, 0xF4, 0x9B, 0x25,  // ...."..%
                            /* 0418 */  0x6E, 0x8A, 0xE0, 0x1A, 0x09, 0x6E, 0x8C, 0xB0,  // n....n..
                            /* 0420 */  0x6E, 0x03, 0xBE, 0x48, 0x01, 0xDF, 0xFF, 0x3F,  // n..H...?
                            /* 0428 */  0x81, 0xC5, 0xDD, 0x17, 0x50, 0x72, 0xEE, 0x0B,  // ....Pr..
                            /* 0430 */  0x14, 0xC4, 0xF7, 0x06, 0x47, 0x9D, 0x3B, 0x1A,  // ....G.;.
                            /* 0438 */  0xDA, 0x67, 0x1B, 0xDF, 0x57, 0x7C, 0x6F, 0x01,  // .g..W|o.
                            /* 0440 */  0x2E, 0x73, 0xC7, 0x1F, 0x7A, 0xD8, 0x81, 0x0E,  // .s..z...
                            /* 0448 */  0x73, 0x6F, 0x81, 0x37, 0x32, 0x5F, 0xA2, 0x80,  // so.72_..
                            /* 0450 */  0xF7, 0xB5, 0xC3, 0xF7, 0x16, 0x70, 0xC1, 0xF2,  // .....p..
                            /* 0458 */  0x7B, 0x0B, 0x78, 0xC0, 0xDE, 0x5B, 0xC0, 0x78,  // {.x..[.x
                            /* 0460 */  0x04, 0xC0, 0x5F, 0x7B, 0x3C, 0xA2, 0xB7, 0x88,  // .._{<...
                            /* 0468 */  0x28, 0xAF, 0x92, 0x6F, 0x2F, 0xBE, 0xB5, 0xB0,  // (..o/...
                            /* 0470 */  0x33, 0xBD, 0x2F, 0x28, 0xEC, 0xFF, 0x7F, 0x6C,  // 3./(...l
                            /* 0478 */  0xC1, 0x29, 0xB4, 0xE9, 0x53, 0xA3, 0x51, 0xAB,  // .)..S.Q.
                            /* 0480 */  0x06, 0x65, 0x6A, 0x94, 0x69, 0x50, 0xAB, 0x4F,  // .ej.iP.O
                            /* 0488 */  0xA5, 0xC6, 0x8C, 0x19, 0x39, 0x84, 0xFB, 0x21,  // ....9..!
                            /* 0490 */  0xA0, 0xE1, 0x39, 0x10, 0x08, 0x8D, 0x48, 0x21,  // ..9...H!
                            /* 0498 */  0x10, 0x47, 0xFE, 0x5D, 0x08, 0xC4, 0x82, 0x3D,  // .G.]...=
                            /* 04A0 */  0x80, 0x30, 0x29, 0x07, 0x47, 0x01, 0x5B, 0xD7,  // .0).G.[.
                            /* 04A8 */  0xD1, 0x91, 0x6A, 0x55, 0x01, 0xC4, 0x94, 0x83,  // ..jU....
                            /* 04B0 */  0x08, 0xC8, 0x29, 0x7E, 0x22, 0x02, 0x72, 0x26,  // ..)~".r&
                            /* 04B8 */  0x10, 0x01, 0x39, 0x95, 0x0E, 0x20, 0x16, 0x11,  // ..9.. ..
                            /* 04C0 */  0x44, 0xC7, 0x48, 0xE2, 0x03, 0x88, 0x05, 0x01,  // D.H.....
                            /* 04C8 */  0x11, 0x90, 0x43, 0x3D, 0x0B, 0x04, 0x48, 0x40,  // ..C=..H@
                            /* 04D0 */  0x04, 0xE4, 0xFF, 0x3F                           // ...?
                        })
                    }
                }

                Scope (\)
                {
                    Name (CPP4, 0x00)
                    Name (CTG2, 0x00)
                }

                Scope (\_SB)
                {
                    Device (GZFD)
                    {
                        Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                        Name (_UID, "GMZN")  // _UID: Unique ID
                        Name (_WDG, Buffer (0x01CC)
                        {
                            /* 0000 */  0xD3, 0x7C, 0xA5, 0x93, 0xC6, 0xBB, 0xAB, 0x46,  // .|.....F
                            /* 0008 */  0x95, 0x1D, 0x31, 0xF1, 0x7C, 0xC9, 0x68, 0xA0,  // ..1.|.h.
                            /* 0010 */  0x41, 0x32, 0x12, 0x01, 0x0A, 0xCA, 0xF3, 0xB7,  // A2......
                            /* 0018 */  0xDC, 0xAC, 0xD2, 0x42, 0x92, 0x17, 0x77, 0xC6,  // ...B..w.
                            /* 0020 */  0xC6, 0x28, 0xFB, 0xD2, 0x41, 0x30, 0x0C, 0x01,  // .(..A0..
                            /* 0028 */  0xE2, 0x54, 0x7B, 0x88, 0xDC, 0xDD, 0x2C, 0x4B,  // .T{...,K
                            /* 0030 */  0x8B, 0x88, 0x68, 0xA2, 0x6A, 0x88, 0x35, 0xD0,  // ..h.j.5.
                            /* 0038 */  0x41, 0x31, 0x02, 0x01, 0xE3, 0x54, 0x7B, 0x88,  // A1...T{.
                            /* 0040 */  0xDC, 0xDD, 0x2C, 0x4B, 0x8B, 0x88, 0x68, 0xA2,  // ..,K..h.
                            /* 0048 */  0x6A, 0x88, 0x35, 0xD0, 0x41, 0x41, 0x01, 0x02,  // j.5.AA..
                            /* 0050 */  0x49, 0x95, 0x54, 0x92, 0xDE, 0x4B, 0x06, 0x4F,  // I.T..K.O
                            /* 0058 */  0xAC, 0x04, 0xCE, 0x8B, 0xF8, 0x98, 0xDB, 0xAA,  // ........
                            /* 0060 */  0x42, 0x32, 0x01, 0x02, 0x77, 0xD7, 0xAF, 0x14,  // B2..w...
                            /* 0068 */  0x6F, 0x10, 0x9B, 0x4C, 0xB3, 0x34, 0xD3, 0x88,  // o..L.4..
                            /* 0070 */  0xDC, 0x78, 0x09, 0xBE, 0x42, 0x33, 0x01, 0x02,  // .x..B3..
                            /* 0078 */  0xF1, 0x47, 0x75, 0xDA, 0x4D, 0x82, 0x5F, 0x40,  // .Gu.M._@
                            /* 0080 */  0xBE, 0x79, 0xD9, 0x90, 0x3E, 0x29, 0xCE, 0xD7,  // .y..>)..
                            /* 0088 */  0x42, 0x34, 0x01, 0x02, 0x05, 0x88, 0x2A, 0xDC,  // B4....*.
                            /* 0090 */  0x8C, 0x3A, 0xBA, 0x41, 0xA6, 0xF7, 0x09, 0x2E,  // .:.A....
                            /* 0098 */  0x00, 0x89, 0xCD, 0x3B, 0x42, 0x35, 0x01, 0x02,  // ...;B5..
                            /* 00A0 */  0x27, 0x91, 0x5B, 0x8C, 0xD4, 0xEC, 0x57, 0x46,  // '.[...WF
                            /* 00A8 */  0x98, 0x0F, 0x85, 0x10, 0x19, 0xF9, 0x9C, 0xA5,  // ........
                            /* 00B0 */  0x42, 0x41, 0x01, 0x02, 0x6D, 0x2A, 0xFB, 0x87,  // BA..m*..
                            /* 00B8 */  0x02, 0xD8, 0xE7, 0x48, 0x92, 0x08, 0x45, 0x76,  // ...H..Ev
                            /* 00C0 */  0xC5, 0xF5, 0xC8, 0xD8, 0x41, 0x33, 0x02, 0x01,  // ....A3..
                            /* 00C8 */  0x84, 0xBD, 0xD5, 0x4D, 0xA9, 0x15, 0xE2, 0x47,  // ...M...G
                            /* 00D0 */  0xAD, 0x65, 0xCC, 0x61, 0xA5, 0xC6, 0x2F, 0xD0,  // .e.a../.
                            /* 00D8 */  0x41, 0x34, 0x06, 0x01, 0x81, 0x24, 0xD4, 0xBF,  // A4...$..
                            /* 00E0 */  0xE3, 0xAE, 0x01, 0x45, 0xA1, 0x07, 0xAF, 0xB6,  // ...E....
                            /* 00E8 */  0x84, 0x25, 0xC5, 0xF8, 0xD0, 0x00, 0x01, 0x08,  // .%......
                            /* 00F0 */  0x81, 0x24, 0xD4, 0xBF, 0xE3, 0xAE, 0x02, 0x45,  // .$.....E
                            /* 00F8 */  0xA1, 0x07, 0xAF, 0xB6, 0x84, 0x25, 0xC5, 0xF8,  // .....%..
                            /* 0100 */  0xE0, 0x00, 0x01, 0x08, 0x6B, 0x90, 0x62, 0xD0,  // ....k.b.
                            /* 0108 */  0xD4, 0x12, 0x10, 0x45, 0x99, 0x9D, 0x48, 0x31,  // ...E..H1
                            /* 0110 */  0xEE, 0x80, 0xE9, 0x85, 0xD1, 0x00, 0x01, 0x08,  // ........
                            /* 0118 */  0x35, 0xA4, 0x72, 0xBC, 0xC1, 0xE8, 0x75, 0x42,  // 5.r...uB
                            /* 0120 */  0xB3, 0xE2, 0xD8, 0xB8, 0x07, 0x4A, 0xBA, 0x59,  // .....J.Y
                            /* 0128 */  0xE1, 0x00, 0x01, 0x08, 0xD9, 0xC6, 0xAF, 0x10,  // ........
                            /* 0130 */  0x8B, 0xEA, 0x90, 0x45, 0xA2, 0xE7, 0x1C, 0xD3,  // ...E....
                            /* 0138 */  0xC8, 0x4B, 0xB4, 0xB1, 0xE2, 0x00, 0x01, 0x08,  // .K......
                            /* 0140 */  0x9E, 0x28, 0x20, 0xD3, 0xEA, 0x8F, 0xE0, 0x41,  // .( ....A
                            /* 0148 */  0x86, 0xF9, 0x61, 0x1D, 0x83, 0x15, 0x1B, 0x5F,  // ..a...._
                            /* 0150 */  0xE3, 0x00, 0x01, 0x08, 0xA1, 0x91, 0x33, 0x1E,  // ......3.
                            /* 0158 */  0x89, 0x2C, 0x4D, 0x46, 0x95, 0xD9, 0x30, 0x28,  // .,MF..0(
                            /* 0160 */  0xB7, 0x2E, 0x7A, 0x33, 0xE8, 0x00, 0x01, 0x08,  // ..z3....
                            /* 0168 */  0x9E, 0x28, 0x20, 0xD3, 0xEA, 0x8F, 0xE1, 0x41,  // .( ....A
                            /* 0170 */  0x86, 0xF9, 0x61, 0x1D, 0x83, 0x15, 0x1B, 0x5F,  // ..a...._
                            /* 0178 */  0xE4, 0x00, 0x01, 0x08, 0x9E, 0x28, 0x20, 0xD3,  // .....( .
                            /* 0180 */  0xEA, 0x8F, 0xE0, 0x41, 0x86, 0xF9, 0x71, 0x1D,  // ...A..q.
                            /* 0188 */  0x83, 0x15, 0x1B, 0x5F, 0xE5, 0x00, 0x01, 0x08,  // ..._....
                            /* 0190 */  0x9E, 0x28, 0x20, 0xD3, 0xEA, 0x8F, 0xE0, 0x41,  // .( ....A
                            /* 0198 */  0x86, 0xF9, 0x81, 0x1D, 0x83, 0x15, 0x1B, 0x5F,  // ......._
                            /* 01A0 */  0xE6, 0x00, 0x01, 0x08, 0x9E, 0x28, 0x20, 0xD3,  // .....( .
                            /* 01A8 */  0xEA, 0x8F, 0xE0, 0x41, 0x86, 0xF9, 0x91, 0x1D,  // ...A....
                            /* 01B0 */  0x83, 0x15, 0x1B, 0x5F, 0xE7, 0x00, 0x01, 0x08,  // ..._....
                            /* 01B8 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                            /* 01C0 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                            /* 01C8 */  0x44, 0x44, 0x01, 0x00                           // DD..
                        })
                        OperationRegion (ECMS, SystemIO, 0x72, 0x02)
                        Field (ECMS, ByteAcc, Lock, Preserve)
                        {
                            INDX,   8, 
                            DATA,   8
                        }

                        Method (RECM, 1, Serialized)
                        {
                            INDX = Arg0
                            Return (DATA) /* \_SB_.GZFD.DATA */
                        }

                        Method (WECM, 2, Serialized)
                        {
                            INDX = Arg0
                            DATA = Arg1
                        }

                        Name (COD0, Buffer (0x24)
                        {
                            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x3F,  // ...?...?
                            /* 0010 */  0x5C, 0x8F, 0xC2, 0x3F, 0x0A, 0xD7, 0x23, 0x3C,  // \..?..#<
                            /* 0018 */  0x01, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0xC8, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (COD1, Buffer (0x24)
                        {
                            /* 0000 */  0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x42,  // ......TB
                            /* 0008 */  0x00, 0x00, 0x54, 0x42, 0x00, 0x00, 0x28, 0x42,  // ..TB..(B
                            /* 0010 */  0x00, 0x00, 0x58, 0x42, 0x00, 0x00, 0x80, 0x3F,  // ..XB...?
                            /* 0018 */  0x07, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0xC8, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (COD2, Buffer (0x24)
                        {
                            /* 0000 */  0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x42,  // ......TB
                            /* 0008 */  0x00, 0x00, 0x54, 0x42, 0x00, 0x00, 0x28, 0x42,  // ..TB..(B
                            /* 0010 */  0x00, 0x00, 0x58, 0x42, 0x00, 0x00, 0x80, 0x3F,  // ..XB...?
                            /* 0018 */  0x08, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0xC8, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (COD3, Buffer (0x24)
                        {
                            /* 0000 */  0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x42,  // ......HB
                            /* 0008 */  0x00, 0x00, 0x48, 0x42, 0x00, 0x00, 0x28, 0x42,  // ..HB..(B
                            /* 0010 */  0x00, 0x00, 0x58, 0x42, 0x00, 0x00, 0x80, 0x3F,  // ..XB...?
                            /* 0018 */  0x09, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0xC8, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (COD4, Buffer (0x24)
                        {
                            /* 0000 */  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x42,  //  .....HB
                            /* 0008 */  0x00, 0x00, 0x48, 0x42, 0x00, 0x00, 0x28, 0x42,  // ..HB..(B
                            /* 0010 */  0x00, 0x00, 0x58, 0x42, 0x00, 0x00, 0x80, 0x3F,  // ..XB...?
                            /* 0018 */  0x0A, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0xC8, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (COD5, Buffer (0x24)
                        {
                            /* 0000 */  0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x42,  // *.....@B
                            /* 0008 */  0x00, 0x00, 0x48, 0x42, 0x00, 0x00, 0x28, 0x42,  // ..HB..(B
                            /* 0010 */  0x00, 0x00, 0x58, 0x42, 0x00, 0x00, 0x80, 0x3F,  // ..XB...?
                            /* 0018 */  0x0B, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0xC8, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (COD6, Buffer (0x24)
                        {
                            /* 0000 */  0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x42,  // +.....@B
                            /* 0008 */  0x00, 0x00, 0x48, 0x42, 0x00, 0x00, 0x28, 0x42,  // ..HB..(B
                            /* 0010 */  0x00, 0x00, 0x58, 0x42, 0x00, 0x00, 0x80, 0x3F,  // ..XB...?
                            /* 0018 */  0x0C, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0xC8, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (COD7, Buffer (0x24)
                        {
                            /* 0000 */  0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x42,  // `.....8B
                            /* 0008 */  0x00, 0x00, 0x48, 0x42, 0x00, 0x00, 0x28, 0x42,  // ..HB..(B
                            /* 0010 */  0x00, 0x00, 0x58, 0x42, 0x00, 0x00, 0x80, 0x3F,  // ..XB...?
                            /* 0018 */  0x0D, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0xC8, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (COD8, Buffer (0x24)
                        {
                            /* 0000 */  0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x42,  // a.....0B
                            /* 0008 */  0x00, 0x00, 0x48, 0x42, 0x00, 0x00, 0x28, 0x42,  // ..HB..(B
                            /* 0010 */  0x00, 0x00, 0x58, 0x42, 0x00, 0x00, 0x80, 0x3F,  // ..XB...?
                            /* 0018 */  0x0E, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0xC8, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (COD9, Buffer (0x24)
                        {
                            /* 0000 */  0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ".......
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x0A, 0xD7, 0x23, 0xBE,  // ......#.
                            /* 0010 */  0x0A, 0xD7, 0x23, 0x3E, 0x0A, 0xD7, 0x23, 0x3C,  // ..#>..#<
                            /* 0018 */  0x03, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0xC8, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (CODA, Buffer (0x24)
                        {
                            /* 0000 */  0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x43,  // f.....%C
                            /* 0008 */  0x00, 0x00, 0x25, 0x43, 0x00, 0x00, 0x80, 0x3F,  // ..%C...?
                            /* 0010 */  0x00, 0x00, 0x7F, 0x43, 0x00, 0x00, 0x00, 0x3F,  // ...C...?
                            /* 0018 */  0x05, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0xC8, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (CODB, Buffer (0x24)
                        {
                            /* 0000 */  0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // r.......
                            /* 0008 */  0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,  // ...?....
                            /* 0010 */  0x00, 0x00, 0xF8, 0x41, 0x00, 0x00, 0x80, 0x3F,  // ...A...?
                            /* 0018 */  0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0xC8, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (CODC, Buffer (0x24)
                        {
                            /* 0000 */  0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42,  // L.....<B
                            /* 0008 */  0x00, 0x00, 0x3C, 0x42, 0x00, 0x00, 0x28, 0x42,  // ..<B..(B
                            /* 0010 */  0x00, 0x00, 0x58, 0x42, 0x00, 0x00, 0x80, 0x3F,  // ..XB...?
                            /* 0018 */  0x11, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0xC8, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (CODD, Buffer (0x24)
                        {
                            /* 0000 */  0x4D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // M.......
                            /* 0008 */  0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x3F,  // ...?...?
                            /* 0010 */  0x5C, 0x8F, 0xC2, 0x3F, 0x0A, 0xD7, 0x23, 0x3C,  // \..?..#<
                            /* 0018 */  0x02, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0xC8, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (CODE, Buffer (0x24)
                        {
                            /* 0000 */  0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // O.......
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x0A, 0xD7, 0x23, 0xBE,  // ......#.
                            /* 0010 */  0x0A, 0xD7, 0x23, 0x3E, 0x0A, 0xD7, 0x23, 0x3C,  // ..#>..#<
                            /* 0018 */  0x04, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0xC8, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (CODF, Buffer (0x24)
                        {
                            /* 0000 */  0x6A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x43,  // j.....%C
                            /* 0008 */  0x00, 0x00, 0x25, 0x43, 0x00, 0x00, 0x80, 0x3F,  // ..%C...?
                            /* 0010 */  0x00, 0x00, 0x7F, 0x43, 0x00, 0x00, 0x00, 0x3F,  // ...C...?
                            /* 0018 */  0x06, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0xC8, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (WTL1, Package (0x12)
                        {
                            Package (0x02)
                            {
                                "League of Legends.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "LeagueClient.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "dota2.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "csgo.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "TslGame.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "FortniteClient-Win64-Shipping.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "RainbowSix.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "SOTTR.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "FarCryNewDawn.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "ACOdyssey.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "RDR2.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "MetroExodus.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "bfv.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "F1_2020.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "Cyberpunk2077.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "GTA5.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "Overwatch.exe", 
                                "1"
                            }, 

                            Package (0x02)
                            {
                                "ACValhalla.exe", 
                                "1"
                            }
                        })
                        Name (INSM, Zero)
                        OperationRegion (XMOS, SystemIO, 0x72, 0x02)
                        Field (XMOS, ByteAcc, Lock, Preserve)
                        {
                            IO72,   8, 
                            IO73,   8
                        }

                        Method (WXMS, 2, NotSerialized)
                        {
                            IO72 = Arg0
                            IO73 = Arg1
                        }

                        Method (RXMS, 1, NotSerialized)
                        {
                            IO72 = Arg0
                            Return (IO73) /* \_SB_.GZFD.IO73 */
                        }

                        Method (FTOI, 2, NotSerialized)
                        {
                            Name (OCVI, Zero)
                            Name (NORP, Zero)
                            Name (REMA, Zero)
                            Name (MANT, Zero)
                            Name (INDE, Zero)
                            Name (SHFT, Zero)
                            Name (RESU, Zero)
                            OCVI = Arg0
                            NORP = Arg1
                            Divide (OCVI, 0x02, REMA, OCVI) /* \_SB_.GZFD.FTOI.OCVI */
                            While ((OCVI != Zero))
                            {
                                REMA <<= INDE /* \_SB_.GZFD.FTOI.INDE */
                                MANT += REMA /* \_SB_.GZFD.FTOI.REMA */
                                INDE += One
                                Divide (OCVI, 0x02, REMA, OCVI) /* \_SB_.GZFD.FTOI.OCVI */
                            }

                            SHFT = (0x17 - INDE) /* \_SB_.GZFD.FTOI.INDE */
                            MANT <<= SHFT /* \_SB_.GZFD.FTOI.SHFT */
                            RESU |= MANT /* \_SB_.GZFD.FTOI.MANT */
                            INDE += 0x7F
                            INDE <<= 0x17
                            RESU |= INDE /* \_SB_.GZFD.FTOI.INDE */
                            If ((NORP == One))
                            {
                                RESU |= 0x80000000
                            }

                            Return (RESU) /* \_SB_.GZFD.FTOI.RESU */
                        }

                        Method (WQA2, 1, NotSerialized)
                        {
                            If ((Arg0 == Zero))
                            {
                                Return (DerefOf (WTL1 [Zero]))
                            }

                            If ((Arg0 == One))
                            {
                                Return (DerefOf (WTL1 [One]))
                            }

                            If ((Arg0 == 0x02))
                            {
                                Return (DerefOf (WTL1 [0x02]))
                            }

                            If ((Arg0 == 0x03))
                            {
                                Return (DerefOf (WTL1 [0x03]))
                            }

                            If ((Arg0 == 0x04))
                            {
                                Return (DerefOf (WTL1 [0x04]))
                            }

                            If ((Arg0 == 0x05))
                            {
                                Return (DerefOf (WTL1 [0x05]))
                            }

                            If ((Arg0 == 0x06))
                            {
                                Return (DerefOf (WTL1 [0x06]))
                            }

                            If ((Arg0 == 0x07))
                            {
                                Return (DerefOf (WTL1 [0x07]))
                            }

                            If ((Arg0 == 0x08))
                            {
                                Return (DerefOf (WTL1 [0x08]))
                            }

                            If ((Arg0 == 0x09))
                            {
                                Return (DerefOf (WTL1 [0x09]))
                            }

                            If ((Arg0 == 0x0A))
                            {
                                Return (DerefOf (WTL1 [0x0A]))
                            }

                            If ((Arg0 == 0x0B))
                            {
                                Return (DerefOf (WTL1 [0x0B]))
                            }

                            If ((Arg0 == 0x0C))
                            {
                                Return (DerefOf (WTL1 [0x0C]))
                            }

                            If ((Arg0 == 0x0D))
                            {
                                Return (DerefOf (WTL1 [0x0D]))
                            }

                            If ((Arg0 == 0x0E))
                            {
                                Return (DerefOf (WTL1 [0x0E]))
                            }

                            If ((Arg0 == 0x0F))
                            {
                                Return (DerefOf (WTL1 [0x0F]))
                            }

                            If ((Arg0 == 0x10))
                            {
                                Return (DerefOf (WTL1 [0x10]))
                            }

                            If ((Arg0 == 0x11))
                            {
                                Return (DerefOf (WTL1 [0x11]))
                            }
                        }

                        Method (WQA0, 1, NotSerialized)
                        {
                            If ((Arg0 == Zero))
                            {
                                Return (0x00)
                            }

                            If ((Arg0 == One))
                            {
                                Return (0x00)
                            }

                            If ((Arg0 == 0x02))
                            {
                                Return (0x00)
                            }

                            If ((Arg0 == 0x03))
                            {
                                Return (0x00)
                            }

                            If ((Arg0 == 0x04))
                            {
                                Return (0x00)
                            }

                            If ((Arg0 == 0x05))
                            {
                                Return (0x00)
                            }

                            If ((Arg0 == 0x06))
                            {
                                Return (0x00)
                            }

                            If ((Arg0 == 0x07))
                            {
                                Return (0x00)
                            }

                            If ((Arg0 == 0x08))
                            {
                                Return (0x00)
                            }

                            If ((Arg0 == 0x09))
                            {
                                Return (0x00)
                            }

                            If ((Arg0 == 0x0A))
                            {
                                Return (0x00)
                            }

                            If ((Arg0 == 0x0B))
                            {
                                Return (0x00)
                            }
                        }

                        Name (GOC0, Buffer (0x2C)
                        {
                             0x00                                             // .
                        })
                        CreateDWordField (GOC0, Zero, GPST)
                        CreateDWordField (GOC0, 0x04, GOCI)
                        CreateDWordField (GOC0, 0x08, GDEV)
                        CreateDWordField (GOC0, 0x0C, GOCV)
                        CreateDWordField (GOC0, 0x10, GMIN)
                        CreateDWordField (GOC0, 0x14, GMAX)
                        CreateDWordField (GOC0, 0x18, GSCV)
                        CreateDWordField (GOC0, 0x1C, GOCO)
                        CreateDWordField (GOC0, 0x20, GNOC)
                        CreateDWordField (GOC0, 0x24, GDET)
                        CreateDWordField (GOC0, 0x28, GCAP)
                        Name (GOC1, Buffer (0x2C)
                        {
                             0x00                                             // .
                        })
                        CreateDWordField (GOC1, Zero, MPST)
                        CreateDWordField (GOC1, 0x04, MOCI)
                        CreateDWordField (GOC1, 0x08, MDEV)
                        CreateDWordField (GOC1, 0x0C, MOCV)
                        CreateDWordField (GOC1, 0x10, MMIN)
                        CreateDWordField (GOC1, 0x14, MMAX)
                        CreateDWordField (GOC1, 0x18, MSCV)
                        CreateDWordField (GOC1, 0x1C, MOCO)
                        CreateDWordField (GOC1, 0x20, MNOC)
                        CreateDWordField (GOC1, 0x24, MDET)
                        CreateDWordField (GOC1, 0x28, MCAP)
                        Method (WQA1, 1, NotSerialized)
                        {
                            If ((Arg0 == Zero))
                            {
                                GPST = Zero
                                GOCI = Zero
                                GDEV = Zero
                                GOCV = FTOI (^^PCI0.LPC0.H_EC.GCCO, ^^PCI0.LPC0.H_EC.GCOP)
                                GMIN = 0xC3480000
                                GMAX = 0x43480000
                                GSCV = One
                                GOCO = Zero
                                GNOC = Zero
                                GDET = Zero
                                GCAP = Zero
                                Return (GOC0) /* \_SB_.GZFD.GOC0 */
                            }

                            If ((Arg0 == One))
                            {
                                MPST = Zero
                                MOCI = One
                                MDEV = Zero
                                MOCV = FTOI (^^PCI0.LPC0.H_EC.GVCO, ^^PCI0.LPC0.H_EC.GVOP)
                                MMIN = 0xC3480000
                                MMAX = 0x43480000
                                MSCV = One
                                MOCO = Zero
                                MNOC = Zero
                                MDET = Zero
                                MCAP = One
                                Return (GOC1) /* \_SB_.GZFD.GOC1 */
                            }
                        }

                        Name (FACT, Buffer (0x22)
                        {
                             0x00                                             // .
                        })
                        CreateByteField (FACT, 0x00, FNID)
                        CreateDWordField (FACT, 0x01, FNLE)
                        CreateWordField (FACT, 0x05, FNSP)
                        CreateByteField (FACT, 0x07, SEID)
                        CreateDWordField (FACT, 0x08, STLE)
                        CreateWordField (FACT, 0x0C, SSTM)
                        CreateWordField (FACT, 0x0E, FDMA)
                        CreateWordField (FACT, 0x10, FCMA)
                        CreateWordField (FACT, 0x12, FDMI)
                        CreateWordField (FACT, 0x14, FCMI)
                        CreateWordField (FACT, 0x16, FSST)
                        CreateWordField (FACT, 0x18, MAST)
                        CreateWordField (FACT, 0x1A, MIST)
                        CreateWordField (FACT, 0x1C, STST)
                        Method (WQA3, 1, NotSerialized)
                        {
                            If ((Arg0 == Zero))
                            {
                                FNID = 0x00
                                FCMA = 0x1130
                                FDMI = 0x10CC
                                Return (FACT) /* \_SB_.GZFD.FACT */
                            }

                            If ((Arg0 == 0x01))
                            {
                                FNID = 0x01
                                Return (FACT) /* \_SB_.GZFD.FACT */
                            }
                        }

                        Name (LTDA, Buffer (0x07)
                        {
                             0x00                                             // .
                        })
                        CreateByteField (LTDA, 0x00, LTID)
                        CreateByteField (LTDA, 0x01, COTI)
                        CreateByteField (LTDA, 0x02, LTTP)
                        CreateByteField (LTDA, 0x03, STTN)
                        CreateByteField (LTDA, 0x04, DFST)
                        CreateByteField (LTDA, 0x05, BNLE)
                        CreateByteField (LTDA, 0x06, DBNL)
                        Method (WQA4, 1, NotSerialized)
                        {
                            If ((^^PCI0.LPC0.H_EC.KLIW == 0x01))
                            {
                                If ((Arg0 == 0x00))
                                {
                                    LTID = 0x00
                                    COTI = 0x01
                                    LTTP = 0x00
                                    STTN = 0x00
                                    DFST = 0x00
                                    BNLE = 0x03
                                    DBNL = 0x01
                                    Return (LTDA) /* \_SB_.GZFD.LTDA */
                                }
                            }
                            ElseIf ((^^PCI0.LPC0.H_EC.KLIR == 0x01))
                            {
                                If ((Arg0 == 0x00))
                                {
                                    LTID = 0x00
                                    COTI = 0x00
                                    LTTP = 0x01
                                    STTN = 0x06
                                    DFST = 0x00
                                    BNLE = 0x04
                                    DBNL = 0x03
                                    Return (LTDA) /* \_SB_.GZFD.LTDA */
                                }
                            }

                            If ((Arg0 == 0x01))
                            {
                                LTID = 0x01
                                COTI = 0x00
                                LTTP = 0x00
                                STTN = 0x00
                                DFST = 0x00
                                BNLE = 0x00
                                DBNL = 0x00
                                Return (LTDA) /* \_SB_.GZFD.LTDA */
                            }

                            If ((Arg0 == 0x02))
                            {
                                LTID = 0x02
                                COTI = 0x00
                                LTTP = 0x00
                                STTN = 0x00
                                DFST = 0x00
                                BNLE = 0x00
                                DBNL = 0x00
                                Return (LTDA) /* \_SB_.GZFD.LTDA */
                            }

                            If ((Arg0 == 0x03))
                            {
                                LTID = 0x03
                                COTI = 0x01
                                LTTP = 0x00
                                STTN = 0x02
                                DFST = 0x01
                                BNLE = 0x00
                                DBNL = 0x00
                                Return (LTDA) /* \_SB_.GZFD.LTDA */
                            }

                            If ((Arg0 == 0x04))
                            {
                                LTID = 0x04
                                COTI = 0x01
                                LTTP = 0x00
                                STTN = 0x04
                                DFST = 0x01
                                BNLE = 0x00
                                DBNL = 0x00
                                Return (LTDA) /* \_SB_.GZFD.LTDA */
                            }

                            If ((Arg0 == 0x05))
                            {
                                LTID = 0x05
                                COTI = 0x01
                                LTTP = 0x00
                                STTN = 0x02
                                DFST = 0x01
                                BNLE = 0x00
                                DBNL = 0x00
                                Return (LTDA) /* \_SB_.GZFD.LTDA */
                            }
                        }

                        Method (WMAA, 3, NotSerialized)
                        {
                            If ((Arg1 == 0x04))
                            {
                                Return (0x03)
                            }

                            If ((Arg1 == 0x0B))
                            {
                                Return (0x0C)
                            }

                            If ((Arg1 == 0x0C))
                            {
                                Return (0x00)
                            }

                            If ((Arg1 == 0x0D))
                            {
                                If ((ToInteger (Arg2) == 0x01)) {}
                                Else
                                {
                                }
                            }

                            If ((Arg1 == 0x0E))
                            {
                                Return (0x00)
                            }

                            If ((Arg1 == 0x0F))
                            {
                                Return (0x00)
                            }

                            If ((Arg1 == 0x10))
                            {
                                Return (0x00)
                            }

                            If ((Arg1 == 0x12))
                            {
                                Return (0x00)
                            }

                            If ((Arg1 == 0x13))
                            {
                                Return (0x00)
                            }

                            If ((Arg1 == 0x14))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    Return (0x00)
                                }
                            }

                            If ((Arg1 == 0x15))
                            {
                                Return (0x01)
                            }

                            If ((Arg1 == 0x16))
                            {
                                If ((ToInteger (Arg2) == 0x01))
                                {
                                    ^^PCI0.LPC0.H_EC.WINK = 0x00
                                }
                                Else
                                {
                                    ^^PCI0.LPC0.H_EC.WINK = 0x01
                                }

                                Notify (GZFD, 0xE2) // Hardware-Specific
                            }

                            If ((Arg1 == 0x17))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    If ((Acquire (^^PCI0.LPC0.H_EC.ECMT, 0xA000) == 0x00))
                                    {
                                        If ((^^PCI0.LPC0.H_EC.WINK & 0x01))
                                        {
                                            Release (^^PCI0.LPC0.H_EC.ECMT)
                                            Return (0x00)
                                        }

                                        Release (^^PCI0.LPC0.H_EC.ECMT)
                                        Return (0x01)
                                    }
                                }
                            }

                            If ((Arg1 == 0x18))
                            {
                                Return (0x01)
                            }

                            If ((Arg1 == 0x19))
                            {
                                If ((ToInteger (Arg2) == 0x01))
                                {
                                    ^^PCI0.LPC0.H_EC.TOCP = 0x00
                                }
                                Else
                                {
                                    ^^PCI0.LPC0.H_EC.TOCP = 0x01
                                }

                                Notify (GZFD, 0xE2) // Hardware-Specific
                            }

                            If ((Arg1 == 0x1A))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    If ((Acquire (^^PCI0.LPC0.H_EC.ECMT, 0xA000) == 0x00))
                                    {
                                        If ((^^PCI0.LPC0.H_EC.TOCP & 0x01))
                                        {
                                            Release (^^PCI0.LPC0.H_EC.ECMT)
                                            Return (0x00)
                                        }

                                        Release (^^PCI0.LPC0.H_EC.ECMT)
                                        Return (0x01)
                                    }
                                }
                            }

                            If ((Arg1 == 0x1D))
                            {
                                Return (0x02)
                            }

                            If ((Arg1 == 0x1E))
                            {
                                Local1 = 0x00
                                Local1 |= 0xF000
                                Local1 |= 0x04
                                Local1 |= 0x10
                                Local1 |= 0x20
                                Return (Local1)
                            }

                            If ((Arg1 == 0x1F))
                            {
                                Local1 = 0x0C80
                                Local2 = 0x0C80
                                Local1 |= (Local2 << 0x10)
                                Return (Local1)
                            }

                            If ((Arg1 == 0x20))
                            {
                                Return (0x00)
                            }

                            If ((Arg1 == 0x21))
                            {
                                Return (0x00)
                            }

                            If ((Arg1 == 0x22))
                            {
                                Return (0x00)
                            }

                            If ((Arg1 == 0x23))
                            {
                                Return (0x05)
                            }

                            If ((Arg1 == 0x24))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    If ((ToInteger (Arg2) == 0x01))
                                    {
                                        ^^PCI0.LPC0.H_EC.MAMW (0x1E, 0x02)
                                    }
                                    Else
                                    {
                                        ^^PCI0.LPC0.H_EC.MAMW (0x1E, 0x00)
                                    }

                                    Return (0x00)
                                }
                            }

                            If ((Arg1 == 0x25))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    If ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.KLLV)) != 0x00))
                                    {
                                        Local0 = 0x01
                                    }
                                    Else
                                    {
                                        Local0 = 0x00
                                    }
                                }

                                Return (Local0)
                            }

                            If ((Arg1 == 0x26))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    If ((Acquire (^^PCI0.LPC0.H_EC.ECMT, 0xA000) == Zero))
                                    {
                                        Local1 = Zero
                                        Release (^^PCI0.LPC0.H_EC.ECMT)
                                        Return (Local1)
                                    }
                                }
                            }

                            If ((Arg1 == 0x27))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    If ((Acquire (^^PCI0.LPC0.H_EC.ECMT, 0xA000) == Zero))
                                    {
                                        Local1 = Zero
                                        Release (^^PCI0.LPC0.H_EC.ECMT)
                                        Return (Local1)
                                    }
                                }
                            }

                            If ((Arg1 == 0x28))
                            {
                                Return (0x02)
                            }

                            If ((Arg1 == 0x29))
                            {
                                If ((DGDS == One))
                                {
                                    Local0 = One
                                }
                                Else
                                {
                                    Local0 = Zero
                                }

                                Return (Local0)
                            }

                            If ((Arg1 == 0x2A))
                            {
                                If ((ToInteger (Arg2) == One))
                                {
                                    SMBB = 0x20
                                    SMBA = 0xEC
                                }
                                ElseIf ((ToInteger (Arg2) == Zero))
                                {
                                    SMBB = 0x21
                                    SMBA = 0xEC
                                }

                                Return (Zero)
                            }

                            If ((Arg1 == 0x2B))
                            {
                                Return (0x04)
                            }

                            If ((Arg1 == 0x2C))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    Local0 = ^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.PAWT))
                                    If ((ToInteger (Arg2) == 0x01))
                                    {
                                        ^^PCI0.LPC0.H_EC.CTMD = 0x00
                                        ^^PCI0.LPC0.H_EC.CAC1 = 0x00
                                        ^^PCI0.LPC0.H_EC.ECWT (0x00, RefOf (^^PCI0.LPC0.H_EC.PABD))
                                        ^^PCI0.LPC0.H_EC.ECWT (0x02, RefOf (^^PCI0.LPC0.H_EC.ITSM))
                                        ^^PCI0.LPC0.H_EC.FNQS (0x02)
                                    }
                                    ElseIf ((ToInteger (Arg2) == 0x02))
                                    {
                                        ^^PCI0.LPC0.H_EC.CTMD = 0x00
                                        ^^PCI0.LPC0.H_EC.CAC1 = 0x00
                                        If ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.ECWR)) & 0x01))
                                        {
                                            If ((Local0 <= PWL1))
                                            {
                                                ^^PCI0.LPC0.H_EC.ECWT (0x03, RefOf (^^PCI0.LPC0.H_EC.PABD))
                                                ^^PCI0.LPC0.H_EC.ECWT (0x02, RefOf (^^PCI0.LPC0.H_EC.ITSM))
                                                ^^PCI0.LPC0.H_EC.FNQS (0x02)
                                            }
                                            Else
                                            {
                                                ^^PCI0.LPC0.H_EC.ECWT (0x00, RefOf (^^PCI0.LPC0.H_EC.PABD))
                                                ^^PCI0.LPC0.H_EC.ECWT (0x00, RefOf (^^PCI0.LPC0.H_EC.ITSM))
                                                ^^PCI0.LPC0.H_EC.FNQS (0x00)
                                            }
                                        }
                                        Else
                                        {
                                            ^^PCI0.LPC0.H_EC.ECWT (0x00, RefOf (^^PCI0.LPC0.H_EC.PABD))
                                            ^^PCI0.LPC0.H_EC.ECWT (0x00, RefOf (^^PCI0.LPC0.H_EC.ITSM))
                                            ^^PCI0.LPC0.H_EC.FNQS (0x00)
                                        }
                                    }
                                    ElseIf ((ToInteger (Arg2) == 0x03))
                                    {
                                        ^^PCI0.LPC0.H_EC.CTMD = 0x00
                                        ^^PCI0.LPC0.H_EC.CAC1 = 0x00
                                        If ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.ECWR)) & 0x01))
                                        {
                                            If ((Local0 <= PWL1))
                                            {
                                                ^^PCI0.LPC0.H_EC.ECWT (0x02, RefOf (^^PCI0.LPC0.H_EC.PABD))
                                                ^^PCI0.LPC0.H_EC.ECWT (0x02, RefOf (^^PCI0.LPC0.H_EC.ITSM))
                                                ^^PCI0.LPC0.H_EC.FNQS (0x02)
                                            }
                                            ElseIf (((Local0 > PWL1) && (Local0 < PWL2)))
                                            {
                                                ^^PCI0.LPC0.H_EC.ECWT (0x01, RefOf (^^PCI0.LPC0.H_EC.PABD))
                                                ^^PCI0.LPC0.H_EC.ECWT (0x00, RefOf (^^PCI0.LPC0.H_EC.ITSM))
                                                ^^PCI0.LPC0.H_EC.FNQS (0x00)
                                            }
                                            ElseIf ((Local0 >= PWL2))
                                            {
                                                ^^PCI0.LPC0.H_EC.ECWT (0x00, RefOf (^^PCI0.LPC0.H_EC.PABD))
                                                ^^PCI0.LPC0.H_EC.ECWT (0x01, RefOf (^^PCI0.LPC0.H_EC.ITSM))
                                                ^^PCI0.LPC0.H_EC.FNQS (0x01)
                                            }
                                        }
                                        Else
                                        {
                                            ^^PCI0.LPC0.H_EC.ECWT (0x01, RefOf (^^PCI0.LPC0.H_EC.PABD))
                                            ^^PCI0.LPC0.H_EC.ECWT (0x00, RefOf (^^PCI0.LPC0.H_EC.ITSM))
                                            ^^PCI0.LPC0.H_EC.FNQS (0x00)
                                        }
                                    }
                                    ElseIf ((ToInteger (Arg2) == 0xFF))
                                    {
                                        ^^PCI0.LPC0.H_EC.CTMD = 0x01
                                        If ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.ECWR)) & 0x01))
                                        {
                                            ^^PCI0.LPC0.H_EC.CAC1 = 0x01
                                            If ((Local0 <= PWL1))
                                            {
                                                ^^PCI0.LPC0.H_EC.ECWT (0x02, RefOf (^^PCI0.LPC0.H_EC.PABD))
                                                ^^PCI0.LPC0.H_EC.ECWT (0x02, RefOf (^^PCI0.LPC0.H_EC.ITSM))
                                                ^^PCI0.LPC0.H_EC.FNQS (0x02)
                                            }
                                            ElseIf (((Local0 > PWL1) && (Local0 < PWL2)))
                                            {
                                                ^^PCI0.LPC0.H_EC.ECWT (0x01, RefOf (^^PCI0.LPC0.H_EC.PABD))
                                                ^^PCI0.LPC0.H_EC.ECWT (0x00, RefOf (^^PCI0.LPC0.H_EC.ITSM))
                                                ^^PCI0.LPC0.H_EC.FNQS (0x00)
                                            }
                                            ElseIf ((Local0 >= PWL2))
                                            {
                                                ^^PCI0.LPC0.H_EC.ECWT (0x00, RefOf (^^PCI0.LPC0.H_EC.PABD))
                                                ^^PCI0.LPC0.H_EC.ECWT (0x01, RefOf (^^PCI0.LPC0.H_EC.ITSM))
                                                ^^PCI0.LPC0.H_EC.FNQS (0x01)
                                            }
                                        }
                                        Else
                                        {
                                            ^^PCI0.LPC0.H_EC.CAC1 = 0x00
                                            ^^PCI0.LPC0.H_EC.ECWT (0x01, RefOf (^^PCI0.LPC0.H_EC.PABD))
                                            ^^PCI0.LPC0.H_EC.ECWT (0x00, RefOf (^^PCI0.LPC0.H_EC.ITSM))
                                            ^^PCI0.LPC0.H_EC.FNQS (0x00)
                                        }
                                    }

                                    Sleep (0x05)
                                    Notify (GZFD, 0xE7) // Hardware-Specific
                                    Notify (GZFD, 0xE5) // Hardware-Specific
                                    Notify (^^PCI0.GPP0.PEGP, 0xC0) // Hardware-Specific
                                    Notify (NPCF, 0xC0) // Hardware-Specific
                                    Notify (^^PCI0.GPP0.PEGP, 0xDF) // Hardware-Specific
                                    Return (0x00)
                                }
                            }

                            If ((Arg1 == 0x2D))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    If ((Acquire (^^PCI0.LPC0.H_EC.ECMT, 0xA000) == Zero))
                                    {
                                        If ((^^PCI0.LPC0.H_EC.CTMD == 0x01))
                                        {
                                            Local1 = 0xFF
                                        }
                                        ElseIf ((^^PCI0.LPC0.H_EC.ITSM == 0x02))
                                        {
                                            Local1 = One
                                        }
                                        ElseIf ((^^PCI0.LPC0.H_EC.ITSM == Zero))
                                        {
                                            If ((^^PCI0.LPC0.H_EC.PABD == One))
                                            {
                                                Local1 = 0x03
                                            }
                                            Else
                                            {
                                                Local1 = 0x02
                                            }
                                        }
                                        ElseIf ((^^PCI0.LPC0.H_EC.ITSM == One))
                                        {
                                            Local1 = 0x03
                                        }

                                        Release (^^PCI0.LPC0.H_EC.ECMT)
                                        Return (Local1)
                                    }
                                }
                            }

                            If ((Arg1 == 0x2E))
                            {
                                Return (0x01)
                            }

                            If ((Arg1 == 0x2F))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    If ((Acquire (^^PCI0.LPC0.H_EC.ECMT, 0xA000) == Zero))
                                    {
                                        If ((^^PCI0.LPC0.H_EC.ECWR & 0x01))
                                        {
                                            Local1 = One
                                        }
                                        Else
                                        {
                                            Local1 = 0x02
                                        }

                                        Release (^^PCI0.LPC0.H_EC.ECMT)
                                        Return (Local1)
                                    }
                                }
                            }

                            If ((Arg1 == 0x30))
                            {
                                Return (0x64)
                            }

                            If ((Arg1 == 0x31))
                            {
                                If ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.PNOD)) & 0x01))
                                {
                                    Return (0x01)
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }

                            If ((Arg1 == 0x32))
                            {
                                If ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.PNOD)) & 0x01))
                                {
                                    If ((M009 (0x44) == 0x01))
                                    {
                                        Return (0x01)
                                    }
                                    Else
                                    {
                                        Return (0x00)
                                    }
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }

                            If ((Arg1 == 0x33))
                            {
                                If ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.PNOD)) & 0x01))
                                {
                                    If ((ToInteger (Arg2) == 0x01))
                                    {
                                        M010 (0x44, 0x01)
                                        Local0 = ^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.PNOD))
                                        Local1 = (Local0 | 0x02)
                                        ^^PCI0.LPC0.H_EC.ECWT (Local1, RefOf (^^PCI0.LPC0.H_EC.PNOD))
                                    }
                                    Else
                                    {
                                        M010 (0x44, 0x00)
                                        Local0 = ^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.PNOD))
                                        Local1 = (Local0 & 0xFD)
                                        ^^PCI0.LPC0.H_EC.ECWT (Local1, RefOf (^^PCI0.LPC0.H_EC.PNOD))
                                    }
                                }
                                Else
                                {
                                    M010 (0x44, 0x00)
                                }

                                Return (0x00)
                            }

                            If ((Arg1 == 0x34))
                            {
                                Return (0x01)
                            }

                            If ((Arg1 == 0x35))
                            {
                                Return (Zero)
                            }

                            If ((Arg1 == 0x36))
                            {
                                If (((^^PCI0.LPC0.H_EC.ECRS == One) || (^^PCI0.LPC0.H_EC.OCFL == One)))
                                {
                                    Local0 = One
                                }
                                Else
                                {
                                    Local0 = Zero
                                }

                                If ((ToInteger (Arg2) == One))
                                {
                                    ^^PCI0.LPC0.H_EC.ECRS = Zero
                                    ^^PCI0.LPC0.H_EC.OCFL = Zero
                                    SMBB = 0x22
                                    SMBA = 0xEC
                                }

                                Return (Local0)
                            }

                            If ((Arg1 == 0x37))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    If ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.ITSM)) == 0x02))
                                    {
                                        Local1 = 0x01
                                    }
                                    ElseIf ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.ITSM)) == 0x00))
                                    {
                                        Local1 = 0x02
                                    }
                                    ElseIf ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.ITSM)) == 0x01))
                                    {
                                        Local1 = 0x03
                                    }

                                    Return (Local1)
                                }
                            }

                            If ((Arg1 == 0x38))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    If ((Acquire (^^PCI0.LPC0.H_EC.ECMT, 0xA000) == Zero))
                                    {
                                        If ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.OCCS)) == Zero))
                                        {
                                            Local1 = Zero
                                        }
                                        ElseIf ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.ECWR)) && 0x01))
                                        {
                                            If (((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.COCC)) == One) && (^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.GOCC)) == One)))
                                            {
                                                Local1 = 0x03
                                            }
                                            ElseIf ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.COCC)) == One))
                                            {
                                                Local1 = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.GOCC)) == One))
                                            {
                                                Local1 = 0x02
                                            }
                                            Else
                                            {
                                                Local1 = Zero
                                            }
                                        }
                                        Else
                                        {
                                            Local1 = Zero
                                        }

                                        Release (^^PCI0.LPC0.H_EC.ECMT)
                                        Return (Local1)
                                    }
                                }
                            }

                            If ((Arg1 == 0x39))
                            {
                                Return (Zero)
                            }

                            If ((Arg1 == 0x3A))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    Local1 = INSM /* \_SB_.GZFD.INSM */
                                    Return (Local1)
                                }
                            }

                            If ((Arg1 == 0x3B))
                            {
                                Return (One)
                            }

                            If ((Arg1 == 0x3C))
                            {
                                ^^PCI0.LPC0.H_EC.CMSP = 0x11F8
                                Local1 = ^^PCI0.LPC0.H_EC.CMSP /* \_SB_.PCI0.LPC0.H_EC.CMSP */
                                Local2 = ^^PCI0.LPC0.H_EC.CMSP /* \_SB_.PCI0.LPC0.H_EC.CMSP */
                                Local1 |= (Local2 << 0x10)
                                Return (Local1)
                            }
                        }

                        Method (WMB2, 3, NotSerialized)
                        {
                            If ((Arg1 == 0x01))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    If ((Acquire (^^PCI0.LPC0.H_EC.ECMT, 0xA000) == 0x00))
                                    {
                                        Local0 = ^^PCI0.LPC0.H_EC.FCST /* \_SB_.PCI0.LPC0.H_EC.FCST */
                                        Release (^^PCI0.LPC0.H_EC.ECMT)
                                        Return (Local0)
                                    }
                                }
                            }

                            If ((Arg1 == 0x02))
                            {
                                If ((ToInteger (Arg2) == 0x01))
                                {
                                    ^^PCI0.LPC0.H_EC.FCST = 0x01
                                }
                                Else
                                {
                                    ^^PCI0.LPC0.H_EC.FCST = 0x00
                                }
                            }

                            If ((Arg1 == 0x07))
                            {
                                If ((ToInteger (Arg2) == 0x01))
                                {
                                    Local0 = ^^PCI0.LPC0.H_EC.FA2S /* \_SB_.PCI0.LPC0.H_EC.FA2S */
                                    Local0 *= 0x64
                                    Return (Local0)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x00))
                                {
                                    Local0 = ^^PCI0.LPC0.H_EC.FANS /* \_SB_.PCI0.LPC0.H_EC.FANS */
                                    Local0 *= 0x64
                                    Return (Local0)
                                }
                            }

                            If ((Arg1 == 0x08))
                            {
                                If ((ToInteger (Arg2) == 0x03))
                                {
                                    Local0 = ^^PCI0.LPC0.H_EC.TSR6 /* \_SB_.PCI0.LPC0.H_EC.TSR6 */
                                    Return (Local0)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x04))
                                {
                                    Local0 = ^^PCI0.LPC0.H_EC.TSR7 /* \_SB_.PCI0.LPC0.H_EC.TSR7 */
                                    Return (Local0)
                                }
                            }
                        }

                        Method (WMB3, 3, NotSerialized)
                        {
                            OperationRegion (CPUP, SystemMemory, 0xFE00DD00, 0x10)
                            Field (CPUP, ByteAcc, NoLock, Preserve)
                            {
                                CPP1,   16, 
                                CPP2,   16
                            }

                            If ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.ECWR)) & 0x01))
                            {
                                If ((DBFS == 0x01))
                                {
                                    CPP4 = 0x2D
                                }
                                Else
                                {
                                    CPP4 = 0x46
                                }
                            }
                            Else
                            {
                                CPP4 = 0x19
                            }

                            Name (XX11, Buffer (0x07) {})
                            CreateWordField (XX11, 0x00, SSZE)
                            CreateByteField (XX11, 0x02, SMUF)
                            CreateDWordField (XX11, 0x03, SMUD)
                            SSZE = 0x07
                            If ((Arg1 == 0x01))
                            {
                                Return (0x00)
                            }

                            If ((Arg1 == 0x03))
                            {
                                If ((CPP1 == 0x00))
                                {
                                    If ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.ECWR)) & 0x01))
                                    {
                                        CPP1 = 0x58
                                    }
                                    Else
                                    {
                                        CPP1 = 0x2D
                                    }
                                }

                                Name (GCC1, Buffer (0x10)
                                {
                                     0x00                                             // .
                                })
                                CreateDWordField (GCC1, 0x00, STPL)
                                CreateDWordField (GCC1, 0x04, STP1)
                                CreateDWordField (GCC1, 0x08, MIP1)
                                CreateDWordField (GCC1, 0x0C, MAP1)
                                STPL = CPP1 /* \_SB_.GZFD.WMB3.CPP1 */
                                STP1 = 0x01
                                MIP1 = 0x0A
                                MAP1 = 0x58
                                Return (GCC1) /* \_SB_.GZFD.WMB3.GCC1 */
                            }

                            If ((Arg1 == 0x04))
                            {
                                CPP1 = ToInteger (Arg2)
                                Local0 = CPP1 /* \_SB_.GZFD.WMB3.CPP1 */
                                Local0 *= 0x03E8
                                SMUF = 0x07
                                SMUD = Local0
                                ALIB (0x0C, XX11)
                            }

                            If ((Arg1 == 0x05))
                            {
                                If ((CPP2 == 0x00))
                                {
                                    CPP2 = CPP4 /* \CPP4 */
                                }

                                Name (GCC2, Buffer (0x10)
                                {
                                     0x00                                             // .
                                })
                                CreateDWordField (GCC2, 0x00, LTPL)
                                CreateDWordField (GCC2, 0x04, STP2)
                                CreateDWordField (GCC2, 0x08, MIP2)
                                CreateDWordField (GCC2, 0x0C, MAP2)
                                LTPL = CPP2 /* \_SB_.GZFD.WMB3.CPP2 */
                                STP2 = 0x01
                                MIP2 = 0x0A
                                MAP2 = CPP4 /* \CPP4 */
                                Return (GCC2) /* \_SB_.GZFD.WMB3.GCC2 */
                            }

                            If ((Arg1 == 0x06))
                            {
                                CPP2 = ToInteger (Arg2)
                                Local0 = CPP2 /* \_SB_.GZFD.WMB3.CPP2 */
                                Local0 *= 0x03E8
                                SMUF = 0x05
                                SMUD = Local0
                                ALIB (0x0C, XX11)
                            }
                        }

                        Method (WMB4, 3, NotSerialized)
                        {
                            OperationRegion (GPUP, SystemMemory, 0xFE00DD10, 0x10)
                            Field (GPUP, ByteAcc, NoLock, Preserve)
                            {
                                DTG1,   16, 
                                CTG1,   16
                            }

                            Local0 = ^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.CTGP))
                            If ((Local0 == 0xAA))
                            {
                                CTG2 = 0x50
                            }
                            Else
                            {
                                CTG2 = 0xA0
                            }

                            If ((Arg1 == 0x01))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    If ((Acquire (^^PCI0.LPC0.H_EC.ECMT, 0xA000) == 0x00))
                                    {
                                        If ((ToInteger (Arg2) == 0x01))
                                        {
                                            ^^PCI0.LPC0.H_EC.GOCC = 0x00
                                            Release (^^PCI0.LPC0.H_EC.ECMT)
                                            Return (0x00)
                                        }
                                        ElseIf ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.ECWR)) && 0x01))
                                        {
                                            If ((^^PCI0.LPC0.H_EC.GOCC == 0x01))
                                            {
                                                Release (^^PCI0.LPC0.H_EC.ECMT)
                                                Return (0x13)
                                            }
                                            Else
                                            {
                                                Release (^^PCI0.LPC0.H_EC.ECMT)
                                                Return (0x10)
                                            }
                                        }
                                        Else
                                        {
                                            Release (^^PCI0.LPC0.H_EC.ECMT)
                                            Return (0x00)
                                        }
                                    }
                                }
                            }

                            If ((Arg1 == 0x02))
                            {
                                CreateByteField (Arg2, 0x00, OCMO)
                                CreateByteField (Arg2, 0x01, OCVA)
                                If ((ToInteger (OCMO) != 0x01))
                                {
                                    If ((ToInteger (OCVA) == 0x01))
                                    {
                                        If ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.ECWR)) && 0x01))
                                        {
                                            WECM (0x70, 0x66)
                                            ^^PCI0.LPC0.H_EC.GOCC = 0x01
                                        }
                                    }
                                    Else
                                    {
                                        WECM (0x70, 0x67)
                                        ^^PCI0.LPC0.H_EC.GOCC = 0x00
                                    }
                                }
                                Else
                                {
                                    WECM (0x70, 0x69)
                                    ^^PCI0.LPC0.H_EC.GOCC = 0x00
                                }
                            }

                            If ((Arg1 == 0x03))
                            {
                                If ((DTG1 == 0x00))
                                {
                                    DTG1 = 0xA0
                                }

                                Name (DTGG, Buffer (0x10)
                                {
                                     0x00                                             // .
                                })
                                CreateDWordField (DTGG, 0x00, PPAB)
                                CreateDWordField (DTGG, 0x04, STP3)
                                CreateDWordField (DTGG, 0x08, NPPL)
                                CreateDWordField (DTGG, 0x0C, XPPL)
                                Divide (DTG1, 0x08, Local1, Local0)
                                PPAB = Local0
                                STP3 = 0x05
                                NPPL = 0x00
                                XPPL = 0x14
                                Return (DTGG) /* \_SB_.GZFD.WMB4.DTGG */
                            }

                            If ((Arg1 == 0x04))
                            {
                                Local0 = ToInteger (Arg2)
                                DTG1 = (Local0 * 0x08)
                            }

                            If ((Arg1 == 0x05))
                            {
                                If ((CTG1 == 0x00))
                                {
                                    CTG1 = CTG2 /* \CTG2 */
                                }

                                Name (CTGG, Buffer (0x10)
                                {
                                     0x00                                             // .
                                })
                                CreateDWordField (CTGG, 0x00, PPA1)
                                CreateDWordField (CTGG, 0x04, STP4)
                                CreateDWordField (CTGG, 0x08, NPP1)
                                CreateDWordField (CTGG, 0x0C, XPP1)
                                Divide (CTG2, 0x08, Local1, Local0)
                                Divide (CTG1, 0x08, Local3, Local2)
                                PPA1 = Local2
                                STP4 = 0x05
                                NPP1 = 0x0A
                                XPP1 = Local0
                                Return (CTGG) /* \_SB_.GZFD.WMB4.CTGG */
                            }

                            If ((Arg1 == 0x06))
                            {
                                Local0 = ToInteger (Arg2)
                                CTG1 = (Local0 * 0x08)
                            }
                        }

                        Method (WMB5, 3, NotSerialized)
                        {
                            If ((Arg1 == 0x01))
                            {
                                Name (CGDT, Buffer (0x02)
                                {
                                     0x00                                             // .
                                })
                                CreateByteField (CGDT, 0x00, CTDT)
                                CreateByteField (CGDT, 0x01, GTDT)
                                CTDT = 0x01
                                GTDT = 0x03
                                Return (CGDT) /* \_SB_.GZFD.WMB5.CGDT */
                            }

                            If ((Arg1 == 0x02))
                            {
                                Return (0x00010007)
                            }

                            If ((Arg1 == 0x03))
                            {
                                Return (0x3F)
                            }

                            If ((Arg1 == 0x05))
                            {
                                If (((PANT == 0x01) || (PANT == 0x03)))
                                {
                                    Return (0x18)
                                }
                                Else
                                {
                                    Return (0x08)
                                }
                            }

                            If ((Arg1 == 0x08))
                            {
                                Return (0x01)
                            }
                        }

                        Method (WMBA, 3, NotSerialized)
                        {
                            Name (CSCB, Buffer (0x02)
                            {
                                 0x00                                             // .
                            })
                            CreateByteField (CSCB, 0x00, CST1)
                            CreateByteField (CSCB, 0x01, CBL1)
                            If ((Arg1 == 0x01))
                            {
                                If ((ToInteger (Arg2) == 0x00))
                                {
                                    CST1 = ^^PCI0.LPC0.H_EC.KBST /* \_SB_.PCI0.LPC0.H_EC.KBST */
                                    CBL1 = ^^PCI0.LPC0.H_EC.KBBL /* \_SB_.PCI0.LPC0.H_EC.KBBL */
                                    Return (CSCB) /* \_SB_.GZFD.WMBA.CSCB */
                                }
                                ElseIf ((ToInteger (Arg2) == 0x03))
                                {
                                    CST1 = ^^PCI0.LPC0.H_EC.YLST /* \_SB_.PCI0.LPC0.H_EC.YLST */
                                    CBL1 = ^^PCI0.LPC0.H_EC.YLBL /* \_SB_.PCI0.LPC0.H_EC.YLBL */
                                    Return (CSCB) /* \_SB_.GZFD.WMBA.CSCB */
                                }
                                ElseIf ((ToInteger (Arg2) == 0x05))
                                {
                                    CST1 = ^^PCI0.LPC0.H_EC.ICST /* \_SB_.PCI0.LPC0.H_EC.ICST */
                                    CBL1 = ^^PCI0.LPC0.H_EC.ICBL /* \_SB_.PCI0.LPC0.H_EC.ICBL */
                                    Return (CSCB) /* \_SB_.GZFD.WMBA.CSCB */
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }

                            If ((Arg1 == 0x02))
                            {
                                CreateByteField (Arg2, 0x00, LTI2)
                                CreateByteField (Arg2, 0x01, CST2)
                                CreateByteField (Arg2, 0x02, CBL2)
                                If ((ToInteger (LTI2) == 0x00))
                                {
                                    ^^PCI0.LPC0.H_EC.KBST = ToInteger (CST2)
                                    ^^PCI0.LPC0.H_EC.KBBL = ToInteger (CBL2)
                                    ^^PCI0.LPC0.H_EC.KBCT = 0x01
                                    ^^PCI0.LPC0.H_EC.ECWT (ToInteger (CBL2), RefOf (^^PCI0.LPC0.H_EC.HTKE))
                                    ^^PCI0.LPC0.H_EC.ECWT (0x1E, RefOf (^^PCI0.LPC0.H_EC.HTKS))
                                    Return (0x00)
                                }
                                ElseIf ((ToInteger (LTI2) == 0x03))
                                {
                                    ^^PCI0.LPC0.H_EC.YLST = ToInteger (CST2)
                                    ^^PCI0.LPC0.H_EC.YLBL = ToInteger (CBL2)
                                    ^^PCI0.LPC0.H_EC.YLCT = 0x01
                                    Return (0x00)
                                }
                                ElseIf ((ToInteger (LTI2) == 0x05))
                                {
                                    ^^PCI0.LPC0.H_EC.ICST = ToInteger (CST2)
                                    ^^PCI0.LPC0.H_EC.ICBL = ToInteger (CBL2)
                                    ^^PCI0.LPC0.H_EC.ICCT = 0x01
                                    Return (0x00)
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }

                        Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                        {
                            If ((Arg0 == 0xD1))
                            {
                                Return (0xFF)
                            }

                            If ((Arg0 == 0xE2))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    If ((Acquire (^^PCI0.LPC0.H_EC.ECMT, 0xA000) == 0x00))
                                    {
                                        Local2 = 0x00
                                        If ((^^PCI0.LPC0.H_EC.WINK == 0x00))
                                        {
                                            Local2 |= 0x01
                                        }

                                        If ((^^PCI0.LPC0.H_EC.TOCP == 0x00))
                                        {
                                            Local2 |= 0x02
                                        }

                                        Release (^^PCI0.LPC0.H_EC.ECMT)
                                        Return (Local2)
                                    }
                                }
                            }

                            Name (FANQ, Package (0x02)
                            {
                                One, 
                                0x04
                            })
                            Name (FANB, Package (0x02)
                            {
                                0x02, 
                                0x04
                            })
                            Name (FANP, Package (0x02)
                            {
                                0x03, 
                                0x04
                            })
                            If ((Arg0 == 0xE3))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    If ((Acquire (^^PCI0.LPC0.H_EC.ECMT, 0xA000) == Zero))
                                    {
                                        If ((^^PCI0.LPC0.H_EC.ITSM == 0x02))
                                        {
                                            Return (FANQ) /* \_SB_.GZFD._WED.FANQ */
                                        }
                                        ElseIf ((^^PCI0.LPC0.H_EC.ITSM == Zero))
                                        {
                                            Return (FANB) /* \_SB_.GZFD._WED.FANB */
                                        }
                                        ElseIf ((^^PCI0.LPC0.H_EC.ITSM == One))
                                        {
                                            Return (FANP) /* \_SB_.GZFD._WED.FANP */
                                        }

                                        Release (^^PCI0.LPC0.H_EC.ECMT)
                                    }
                                }
                            }

                            If ((Arg0 == 0xE4))
                            {
                                Local1 = One
                                Return (Local1)
                            }

                            If ((Arg0 == 0xE5))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    If ((Acquire (^^PCI0.LPC0.H_EC.ECMT, 0xA000) == Zero))
                                    {
                                        If ((^^PCI0.LPC0.H_EC.ECWR & 0x01))
                                        {
                                            Local1 = One
                                        }
                                        Else
                                        {
                                            Local1 = 0x02
                                        }

                                        Release (^^PCI0.LPC0.H_EC.ECMT)
                                        Return (Local1)
                                    }
                                }
                            }

                            If ((Arg0 == 0xE6))
                            {
                                Return (One)
                            }

                            If ((Arg0 == 0xE7))
                            {
                                If (^^PCI0.LPC0.H_EC.ECAV)
                                {
                                    If ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.ITSM)) == 0x02))
                                    {
                                        Local1 = 0x01
                                    }
                                    ElseIf ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.ITSM)) == 0x00))
                                    {
                                        Local1 = 0x02
                                    }
                                    ElseIf ((^^PCI0.LPC0.H_EC.ECRD (RefOf (^^PCI0.LPC0.H_EC.ITSM)) == 0x01))
                                    {
                                        Local1 = 0x03
                                    }

                                    Return (Local1)
                                }
                            }

                            If ((Arg0 == 0xE8))
                            {
                                If (((PSD1 == 0x14) || (PSD1 == 0x15)))
                                {
                                    WECM (0x71, 0x11)
                                    Local1 = 0x00
                                }
                                ElseIf (((PSD1 == 0x16) || (PSD1 == 0x17)))
                                {
                                    WECM (0x71, 0x12)
                                    Local1 = 0x01
                                }
                                ElseIf ((((PSD1 == 0x1A) || (PSD1 == 0x18)) || ((
                                    PSD1 == 0x19) || (PSD1 == 0x26))))
                                {
                                    WECM (0x71, 0x13)
                                    Local1 = 0x02
                                }
                                ElseIf ((PSD1 == 0x27))
                                {
                                    WECM (0x71, 0x13)
                                    Local1 = 0x03
                                }
                                ElseIf ((((PSD1 == 0x25) || (PSD1 == 0x1B)) || ((
                                    PSD1 == 0x1C) || (PSD1 == 0x1D))))
                                {
                                    WECM (0x71, 0x14)
                                    Local1 = 0x03
                                }
                                ElseIf ((((PSD1 == 0x1E) || (PSD1 == 0x1F)) || ((
                                    PSD1 == 0x20) || (PSD1 == 0x21))))
                                {
                                    WECM (0x71, 0x15)
                                    Local1 = 0x03
                                }
                                ElseIf ((((PSD1 == 0x22) || (PSD1 == 0x23)) || 0x24))
                                {
                                    WECM (0x71, 0x16)
                                    Local1 = 0x03
                                }

                                Return (Local1)
                            }
                        }

                        Name (WQDD, Buffer (0x4D6D)
                        {
                            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                            /* 0008 */  0x5D, 0x4D, 0x00, 0x00, 0xC0, 0xFC, 0x01, 0x00,  // ]M......
                            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                            /* 0018 */  0x28, 0xA5, 0xB6, 0x01, 0x01, 0x08, 0x09, 0x42,  // (......B
                            /* 0020 */  0x58, 0x0E, 0x84, 0x84, 0x58, 0xA0, 0x10, 0x81,  // X...X...
                            /* 0028 */  0xE2, 0x10, 0x29, 0xBA, 0x04, 0x18, 0x8C, 0x06,  // ..).....
                            /* 0030 */  0x40, 0xEA, 0x82, 0x89, 0x09, 0x10, 0x01, 0x21,  // @......!
                            /* 0038 */  0xAF, 0x02, 0x6C, 0x0A, 0x30, 0x09, 0xA2, 0xFE,  // ..l.0...
                            /* 0040 */  0xFD, 0x21, 0x4A, 0x82, 0x43, 0x09, 0x81, 0x90,  // .!J.C...
                            /* 0048 */  0x44, 0x01, 0xE6, 0x05, 0xE8, 0x16, 0x60, 0x58,  // D.....`X
                            /* 0050 */  0x80, 0x6D, 0x01, 0xA6, 0x05, 0x38, 0x86, 0xA4,  // .m...8..
                            /* 0058 */  0xD2, 0xC0, 0x29, 0x81, 0xA5, 0x40, 0x48, 0xA8,  // ..)..@H.
                            /* 0060 */  0x00, 0xE5, 0x02, 0x7C, 0x0B, 0xD0, 0x8E, 0x28,  // ...|...(
                            /* 0068 */  0xC9, 0x02, 0x2C, 0xC3, 0x88, 0xC0, 0xA3, 0x88,  // ..,.....
                            /* 0070 */  0x6C, 0x34, 0x0E, 0x8D, 0x1D, 0x86, 0x65, 0x82,  // l4....e.
                            /* 0078 */  0x69, 0x10, 0x87, 0x51, 0x36, 0xB2, 0x08, 0x3C,  // i..Q6..<
                            /* 0080 */  0xA1, 0x4E, 0x05, 0xC8, 0x15, 0x20, 0x4C, 0x80,  // .N... L.
                            /* 0088 */  0x78, 0x54, 0x61, 0x34, 0x07, 0x45, 0x02, 0x40,  // xTa4.E.@
                            /* 0090 */  0xA3, 0xC4, 0x8C, 0x89, 0xC0, 0x76, 0x8E, 0xAD,  // .....v..
                            /* 0098 */  0x51, 0x9C, 0x46, 0xE1, 0x02, 0xA4, 0x63, 0x68,  // Q.F...ch
                            /* 00A0 */  0x04, 0xC7, 0x15, 0x8C, 0x69, 0xC6, 0x11, 0x4C,  // ....i..L
                            /* 00A8 */  0x88, 0x58, 0x5C, 0x10, 0x86, 0xA0, 0x62, 0xF4,  // .X\...b.
                            /* 00B0 */  0x38, 0x3E, 0x02, 0x18, 0xE5, 0x54, 0xA2, 0xC5,  // 8>...T..
                            /* 00B8 */  0x0F, 0x18, 0x25, 0xAA, 0x31, 0x18, 0x4E, 0xB4,  // ..%.1.N.
                            /* 00C0 */  0x60, 0xD1, 0xEC, 0x19, 0x45, 0x40, 0x06, 0x8B,  // `...E@..
                            /* 00C8 */  0x1B, 0xFD, 0x10, 0x4D, 0x10, 0xEC, 0x80, 0x30,  // ...M...0
                            /* 00D0 */  0x32, 0x20, 0x04, 0xD9, 0xFA, 0x48, 0x09, 0x81,  // 2 ...H..
                            /* 00D8 */  0xDD, 0x8F, 0x4C, 0xCE, 0x04, 0x18, 0x14, 0x60,  // ..L....`
                            /* 00E0 */  0x4D, 0x80, 0x37, 0x01, 0x0E, 0x27, 0x24, 0x98,  // M.7..'$.
                            /* 00E8 */  0xB6, 0x04, 0x28, 0x44, 0x10, 0x4C, 0x6D, 0x28,  // ..(D.Lm(
                            /* 00F0 */  0x1A, 0x61, 0x8C, 0x70, 0x71, 0xA2, 0xC4, 0x8C,  // .a.pq...
                            /* 00F8 */  0xD8, 0x18, 0xA0, 0x50, 0x22, 0x06, 0xA9, 0x11,  // ...P"...
                            /* 0100 */  0x42, 0xC0, 0x46, 0x08, 0x16, 0xB1, 0x38, 0x48,  // B.F...8H
                            /* 0108 */  0x8D, 0xB5, 0xFD, 0x41, 0x10, 0xB1, 0x0E, 0xCE,  // ...A....
                            /* 0110 */  0x05, 0x2C, 0xC2, 0x68, 0x50, 0x67, 0x81, 0x04,  // .,.hPg..
                            /* 0118 */  0xCF, 0x06, 0x3E, 0x17, 0x9C, 0xD6, 0xE9, 0x79,  // ..>....y
                            /* 0120 */  0x8A, 0x41, 0xCE, 0xF7, 0xB4, 0xEA, 0x1C, 0x25,  // .A.....%
                            /* 0128 */  0x25, 0xB0, 0x54, 0x08, 0xFD, 0xFF, 0x15, 0x9C,  // %.T.....
                            /* 0130 */  0x12, 0xA0, 0xB8, 0x06, 0xD4, 0xF5, 0xE0, 0xE1,  // ........
                            /* 0138 */  0x80, 0x8D, 0xE4, 0x79, 0x00, 0x3B, 0x9F, 0x93,  // ...y.;..
                            /* 0140 */  0x78, 0x18, 0x88, 0xDE, 0xEC, 0xC1, 0x40, 0x16,  // x.....@.
                            /* 0148 */  0x81, 0x34, 0x0E, 0x9F, 0x02, 0x3C, 0x8F, 0x13,  // .4...<..
                            /* 0150 */  0x4D, 0xE0, 0x23, 0xC1, 0x31, 0x60, 0x46, 0x64,  // M.#.1`Fd
                            /* 0158 */  0x68, 0x4F, 0xED, 0x74, 0x9E, 0x03, 0x7C, 0x46,  // hO.t..|F
                            /* 0160 */  0x38, 0x1C, 0x36, 0xBE, 0x67, 0x09, 0x36, 0x0E,  // 8.6.g.6.
                            /* 0168 */  0xF8, 0x8A, 0xEF, 0x00, 0x42, 0x78, 0x53, 0xF0,  // ....BxS.
                            /* 0170 */  0xFC, 0x4C, 0x30, 0xF8, 0x40, 0xD1, 0xC7, 0x04,  // .L0.@...
                            /* 0178 */  0x9F, 0x11, 0xDE, 0x1C, 0x3C, 0x4D, 0x4F, 0x29,  // ....<MO)
                            /* 0180 */  0xC2, 0xBB, 0x04, 0x9B, 0x89, 0x23, 0x42, 0xE8,  // .....#B.
                            /* 0188 */  0x7B, 0x61, 0x51, 0x10, 0xDA, 0xB7, 0x0E, 0x13,  // {aQ.....
                            /* 0190 */  0x88, 0x73, 0x04, 0x3B, 0x05, 0x04, 0x3D, 0x6A,  // .s.;..=j
                            /* 0198 */  0x0F, 0xE6, 0xA5, 0xC0, 0x63, 0xF2, 0xF9, 0xE0,  // ....c...
                            /* 01A0 */  0xF0, 0x30, 0x87, 0x03, 0xCF, 0xE2, 0x6C, 0x7C,  // .0....l|
                            /* 01A8 */  0x38, 0x60, 0x43, 0x36, 0xF2, 0x43, 0x04, 0x58,  // 8`C6.C.X
                            /* 01B0 */  0x06, 0x85, 0x9D, 0xC5, 0x49, 0x61, 0xCE, 0x00,  // ....Ia..
                            /* 01B8 */  0x60, 0x8C, 0x3B, 0x58, 0xF4, 0xB0, 0x7C, 0x91,  // `.;X..|.
                            /* 01C0 */  0xC0, 0x10, 0x8C, 0x37, 0x52, 0x50, 0x1D, 0x15,  // ...7RP..
                            /* 01C8 */  0x3C, 0x52, 0x38, 0xFF, 0xFF, 0x91, 0xE2, 0xE4,  // <R8.....
                            /* 01D0 */  0x8D, 0x14, 0x34, 0x50, 0xCF, 0x18, 0xCF, 0x05,  // ..4P....
                            /* 01D8 */  0xEF, 0x1A, 0xB8, 0xA3, 0x03, 0x58, 0x81, 0x71,  // .....X.q
                            /* 01E0 */  0x03, 0xB5, 0x5F, 0x01, 0x08, 0xC1, 0xDF, 0x53,  // .._....S
                            /* 01E8 */  0x1E, 0x1E, 0x1E, 0x52, 0x22, 0x3C, 0xAA, 0x18,  // ...R"<..
                            /* 01F0 */  0xFD, 0xE1, 0xA2, 0x4F, 0x01, 0x5A, 0x21, 0x84,  // ...O.Z!.
                            /* 01F8 */  0x76, 0x10, 0x61, 0x0E, 0x22, 0x52, 0xAC, 0x08,  // v.a."R..
                            /* 0200 */  0x61, 0x9E, 0x4B, 0xC2, 0x19, 0x28, 0x58, 0xB8,  // a.K..(X.
                            /* 0208 */  0x13, 0x89, 0x11, 0xCA, 0xD0, 0x2F, 0x19, 0x26,  // ...../.&
                            /* 0210 */  0x28, 0x72, 0x88, 0xE8, 0x71, 0x70, 0xE0, 0xD3,  // (r..qp..
                            /* 0218 */  0x38, 0xAA, 0xE0, 0x41, 0x23, 0x47, 0x39, 0x95,  // 8..A#G9.
                            /* 0220 */  0xC3, 0xF2, 0xDD, 0xC0, 0x08, 0xC7, 0x75, 0x50,  // ......uP
                            /* 0228 */  0xA7, 0xE8, 0xDB, 0xCA, 0x41, 0x1F, 0xE7, 0xCB,  // ....A...
                            /* 0230 */  0x44, 0xA0, 0x67, 0x0E, 0x4E, 0xE0, 0x90, 0xAB,  // D.g.N...
                            /* 0238 */  0xA7, 0x31, 0x9E, 0x0E, 0x8A, 0x05, 0x83, 0x3A,  // .1.....:
                            /* 0240 */  0xF4, 0x00, 0xAE, 0x0E, 0x08, 0xCF, 0x09, 0xB0,  // ........
                            /* 0248 */  0xFE, 0xFF, 0x87, 0x1E, 0x70, 0x4D, 0xFE, 0x88,  // ....pM..
                            /* 0250 */  0x5A, 0x05, 0xD1, 0x65, 0x20, 0x4A, 0x8C, 0xD8,  // Z..e J..
                            /* 0258 */  0x27, 0x13, 0xFF, 0x3D, 0x83, 0x9D, 0x79, 0x0C,  // '..=..y.
                            /* 0260 */  0xF3, 0xE8, 0x83, 0x39, 0xF0, 0xC0, 0xBF, 0xE7,  // ...9....
                            /* 0268 */  0xBC, 0xE2, 0x3C, 0xE4, 0xBC, 0xE5, 0x1C, 0xC2,  // ..<.....
                            /* 0270 */  0x1B, 0x8E, 0x21, 0x5E, 0x74, 0x1E, 0x0A, 0x3C,  // ..!^t..<
                            /* 0278 */  0x9E, 0x10, 0x0F, 0x3C, 0x56, 0x86, 0x22, 0x88,  // ...<V.".
                            /* 0280 */  0x07, 0x1E, 0x63, 0x3C, 0xED, 0x18, 0x25, 0xC4,  // ..c<..%.
                            /* 0288 */  0xEB, 0x8E, 0x6F, 0x3B, 0x21, 0x0C, 0xF5, 0x00,  // ..o;!...
                            /* 0290 */  0x13, 0xFE, 0x04, 0x42, 0xFA, 0xC0, 0xC3, 0x04,  // ...B....
                            /* 0298 */  0xA9, 0x80, 0x68, 0x03, 0x44, 0x91, 0x0E, 0x3C,  // ..h.D..<
                            /* 02A0 */  0xA0, 0x1B, 0x9A, 0x8F, 0x1F, 0x3E, 0xF0, 0xC0,  // .....>..
                            /* 02A8 */  0x3D, 0x7D, 0xC0, 0x3F, 0x6E, 0x80, 0x4F, 0xFE,  // =}.?n.O.
                            /* 02B0 */  0xC1, 0x07, 0x14, 0x62, 0x0F, 0x27, 0xA0, 0x39,  // ...b.'.9
                            /* 02B8 */  0x00, 0x81, 0x2F, 0x32, 0x84, 0x9C, 0x8C, 0x07,  // ../2....
                            /* 02C0 */  0xFD, 0xFF, 0xC7, 0x7D, 0x2C, 0x08, 0x17, 0xF1,  // ...},...
                            /* 02C8 */  0xB9, 0x80, 0x07, 0x3C, 0xFE, 0x00, 0x1D, 0x81,  // ...<....
                            /* 02D0 */  0xC7, 0x09, 0xD0, 0x9C, 0x22, 0x18, 0xD0, 0x39,  // ...."..9
                            /* 02D8 */  0xB1, 0x8B, 0x98, 0x47, 0x50, 0xD7, 0x31, 0x06,  // ...GP.1.
                            /* 02E0 */  0x14, 0xB7, 0x08, 0x9F, 0xC7, 0x7C, 0x86, 0x78,  // .....|.x
                            /* 02E8 */  0x67, 0x48, 0xE0, 0xF0, 0x23, 0x45, 0x9F, 0x13,  // gH..#E..
                            /* 02F0 */  0x7C, 0xCA, 0x60, 0xD7, 0x14, 0x7E, 0x87, 0x79,  // |.`..~.y
                            /* 02F8 */  0xF5, 0x30, 0xCC, 0xB3, 0x00, 0x0B, 0x79, 0x02,  // .0....y.
                            /* 0300 */  0x02, 0x3A, 0xE7, 0x19, 0xFC, 0x51, 0x04, 0xF6,  // .:...Q..
                            /* 0308 */  0xA8, 0xF8, 0x2C, 0x9E, 0x17, 0xCE, 0x8A, 0xCF,  // ..,.....
                            /* 0310 */  0xD6, 0xC3, 0x05, 0x63, 0xE0, 0x73, 0x02, 0x94,  // ...c.s..
                            /* 0318 */  0x53, 0x80, 0xE7, 0x8A, 0x3B, 0x3C, 0xC1, 0xF9,  // S...;<..
                            /* 0320 */  0xFF, 0x8F, 0x15, 0x1E, 0xA0, 0x0F, 0x4F, 0xC0,  // ......O.
                            /* 0328 */  0xE3, 0x9C, 0xC0, 0xA6, 0x84, 0x39, 0x26, 0x80,  // .....9&.
                            /* 0330 */  0x33, 0xF4, 0x40, 0xD1, 0xC3, 0x33, 0x70, 0x48,  // 3.@..3pH
                            /* 0338 */  0x1F, 0x12, 0xB0, 0x07, 0x0C, 0x70, 0x81, 0xFA,  // .....p..
                            /* 0340 */  0x80, 0x01, 0x3C, 0xC6, 0xC4, 0x66, 0x8A, 0x1F,  // ..<..f..
                            /* 0348 */  0x2A, 0xF0, 0x18, 0xC5, 0x33, 0xD2, 0xA1, 0x82,  // *...3...
                            /* 0350 */  0xF9, 0x8F, 0xEA, 0xA1, 0xC2, 0xFB, 0xFF, 0x0F,  // ........
                            /* 0358 */  0x15, 0x8C, 0x63, 0xF2, 0x50, 0x81, 0xC1, 0x19,  // ..c.P...
                            /* 0360 */  0xD1, 0x43, 0xC5, 0x8D, 0xC6, 0xB7, 0xAB, 0x37,  // .C.....7
                            /* 0368 */  0x2C, 0x3E, 0x56, 0xEC, 0x19, 0x11, 0x5C, 0xA7,  // ,>V...\.
                            /* 0370 */  0x32, 0x9F, 0x11, 0x81, 0xC7, 0xA0, 0x30, 0x83,  // 2.....0.
                            /* 0378 */  0x05, 0x06, 0xB1, 0x8F, 0x09, 0x50, 0x8E, 0x1D,  // .....P..
                            /* 0380 */  0x86, 0x38, 0x9B, 0x57, 0x35, 0x76, 0x21, 0x62,  // .8.W5v!b
                            /* 0388 */  0x63, 0x05, 0x97, 0x87, 0xB1, 0x02, 0x85, 0xFF,  // c.......
                            /* 0390 */  0xFF, 0xC9, 0x04, 0x3B, 0x27, 0xCC, 0x85, 0x08,  // ...;'...
                            /* 0398 */  0x73, 0x22, 0x02, 0x06, 0xC3, 0xF1, 0x11, 0xD1,  // s"......
                            /* 03A0 */  0x73, 0x85, 0x41, 0x30, 0xE6, 0x60, 0x41, 0x35,  // s.A0.`A5
                            /* 03A8 */  0x22, 0x0F, 0x16, 0xFE, 0x99, 0xEF, 0x60, 0xC1,  // ".....`.
                            /* 03B0 */  0x32, 0x28, 0x43, 0xBC, 0xC6, 0x1D, 0x2E, 0x70,  // 2(C....p
                            /* 03B8 */  0x89, 0x7E, 0x52, 0x80, 0x72, 0xA0, 0xF3, 0xBD,  // .~R.r...
                            /* 03C0 */  0x8F, 0x5D, 0x94, 0xD8, 0x68, 0xC1, 0x67, 0x62,  // .]..h.gb
                            /* 03C8 */  0xB4, 0x40, 0x05, 0xCC, 0x13, 0x8A, 0xFE, 0x9C,  // .@......
                            /* 03D0 */  0xF7, 0x2A, 0x66, 0xAC, 0x47, 0x3E, 0xFF, 0xFF,  // .*f.G>..
                            /* 03D8 */  0x2F, 0xD9, 0x1C, 0x26, 0xF2, 0x63, 0x11, 0x38,  // /..&.c.8
                            /* 03E0 */  0x8F, 0xA8, 0x60, 0xBC, 0x9E, 0xBE, 0x91, 0x32,  // ..`....2
                            /* 03E8 */  0xB5, 0x17, 0x02, 0x02, 0x12, 0xD6, 0xC7, 0x48,  // .......H
                            /* 03F0 */  0x5F, 0x51, 0x8D, 0x12, 0xE3, 0xCC, 0x02, 0x1E,  // _Q......
                            /* 03F8 */  0x4C, 0x88, 0x47, 0x54, 0x60, 0x14, 0xFD, 0xE5,  // L.GT`...
                            /* 0400 */  0xE8, 0xF3, 0x29, 0x0D, 0x0B, 0x83, 0x3A, 0xA2,  // ..)...:.
                            /* 0408 */  0x02, 0xBE, 0x2F, 0x04, 0x8F, 0xA8, 0x98, 0xFF,  // ../.....
                            /* 0410 */  0xFF, 0x11, 0x15, 0xEC, 0x57, 0xD2, 0x08, 0xAF,  // ....W...
                            /* 0418 */  0xA5, 0xCF, 0xA4, 0x8F, 0xF6, 0x27, 0xF6, 0x46,  // .....'.F
                            /* 0420 */  0xF0, 0x74, 0xEA, 0xE1, 0x44, 0xF0, 0x11, 0x95,  // .t..D...
                            /* 0428 */  0x81, 0x45, 0x8A, 0x62, 0xC8, 0x28, 0x51, 0x8D,  // .E.b.(Q.
                            /* 0430 */  0xF2, 0x78, 0xCF, 0xB0, 0x5E, 0xF4, 0x8D, 0xE4,  // .x..^...
                            /* 0438 */  0x1B, 0x44, 0xF4, 0xB8, 0x8F, 0xF8, 0x5C, 0xE6,  // .D....\.
                            /* 0440 */  0x42, 0xE4, 0xE3, 0x88, 0x0A, 0x50, 0xE4, 0xE4,  // B....P..
                            /* 0448 */  0x06, 0x07, 0xF5, 0xD9, 0xE1, 0xBC, 0x7D, 0x41,  // ......}A
                            /* 0450 */  0x30, 0xFE, 0xDB, 0x92, 0x4F, 0x6E, 0x60, 0xF9,  // 0...On`.
                            /* 0458 */  0xFF, 0x9F, 0x51, 0x81, 0xD3, 0x98, 0x5E, 0x15,  // ..Q...^.
                            /* 0460 */  0xCE, 0x09, 0x33, 0x8B, 0x83, 0xF2, 0x39, 0x06,  // ..3...9.
                            /* 0468 */  0x9C, 0xA7, 0x4C, 0x38, 0xD0, 0x87, 0xFC, 0xE6,  // ..L8....
                            /* 0470 */  0xE1, 0x73, 0xC2, 0x99, 0xB2, 0x13, 0x3F, 0xF0,  // .s....?.
                            /* 0478 */  0x3E, 0xE8, 0xF8, 0x00, 0x62, 0x97, 0x03, 0x05,  // >...b...
                            /* 0480 */  0xF5, 0xD9, 0x16, 0xCE, 0xFD, 0x06, 0x7B, 0x6B,  // ......{k
                            /* 0488 */  0xC5, 0x9C, 0x6D, 0xC1, 0x77, 0x40, 0x05, 0xC7,  // ..m.w@..
                            /* 0490 */  0x41, 0xC8, 0xFF, 0xFF, 0xB3, 0x2D, 0x70, 0x7E,  // A....-p~
                            /* 0498 */  0x4B, 0x78, 0xB8, 0xF8, 0x7B, 0x1B, 0x9B, 0x49,  // Kx..{..I
                            /* 04A0 */  0x84, 0x13, 0x7A, 0xA4, 0xF1, 0x45, 0xFD, 0xDC,  // ..z..E..
                            /* 04A8 */  0x6C, 0x1C, 0x92, 0x04, 0x3D, 0xA5, 0x02, 0x9D,  // l...=...
                            /* 04B0 */  0x59, 0x3D, 0xF5, 0x81, 0x6D, 0x56, 0x18, 0x9C,  // Y=..mV..
                            /* 04B8 */  0x28, 0x87, 0xC5, 0x20, 0x1E, 0x69, 0x7C, 0x8F,  // (.. .i|.
                            /* 04C0 */  0x79, 0x5C, 0x00, 0xE7, 0x80, 0xF1, 0x23, 0xF2,  // y\....#.
                            /* 04C8 */  0x58, 0x7C, 0x82, 0x65, 0x83, 0xC1, 0x11, 0x8C,  // X|.e....
                            /* 04D0 */  0x7A, 0x54, 0x05, 0x3A, 0xB3, 0x3A, 0x5E, 0xEC,  // zT.:.:^.
                            /* 04D8 */  0xFF, 0x7F, 0xBC, 0xB0, 0x6F, 0xB9, 0xFC, 0xF8,  // ....o...
                            /* 04E0 */  0xE4, 0x11, 0x63, 0x0E, 0x0C, 0xC0, 0x67, 0xC0,  // ..c...g.
                            /* 04E8 */  0x98, 0x73, 0xAC, 0x07, 0x0C, 0xE6, 0xF3, 0x2A,  // .s.....*
                            /* 04F0 */  0x38, 0x06, 0x0C, 0xBE, 0xBB, 0x2E, 0x1B, 0x30,  // 8......0
                            /* 04F8 */  0xB0, 0x89, 0x7F, 0x5C, 0x81, 0x72, 0xE0, 0xC0,  // ...\.r..
                            /* 0500 */  0x9F, 0x67, 0x31, 0x87, 0x47, 0xB0, 0x9D, 0x5A,  // .g1.G..Z
                            /* 0508 */  0xC1, 0x71, 0x78, 0xC4, 0xFD, 0xFF, 0x0F, 0x1C,  // .qx.....
                            /* 0510 */  0xE0, 0x1B, 0x16, 0xE6, 0xC8, 0x0B, 0x98, 0x38,  // .......8
                            /* 0518 */  0xB6, 0x82, 0xE3, 0xC8, 0x0B, 0xB8, 0x3C, 0xB5,  // ......<.
                            /* 0520 */  0x02, 0x97, 0xFF, 0xFF, 0x91, 0x17, 0xF0, 0xA4,  // ........
                            /* 0528 */  0xE2, 0xC8, 0x0B, 0xE8, 0x39, 0x66, 0xE0, 0x07,  // ....9f..
                            /* 0530 */  0x64, 0xE8, 0x23, 0x79, 0x0F, 0xF5, 0x01, 0x31,  // d.#y...1
                            /* 0538 */  0xEC, 0x4B, 0xA8, 0x71, 0xDF, 0x29, 0x7D, 0x2C,  // .K.q.)},
                            /* 0540 */  0x04, 0xDB, 0x60, 0x7D, 0x2C, 0x04, 0x1E, 0x83,  // ..`},...
                            /* 0548 */  0x82, 0xF3, 0xFF, 0x3F, 0x28, 0x80, 0xF3, 0xB4,  // ...?(...
                            /* 0550 */  0x0C, 0x1C, 0x4E, 0xB4, 0xEC, 0xB4, 0x0C, 0x0C,  // ..N.....
                            /* 0558 */  0x35, 0x45, 0x01, 0x61, 0xF2, 0x4F, 0x53, 0x92,  // 5E.a.OS.
                            /* 0560 */  0xF7, 0x16, 0xA0, 0x30, 0x3E, 0x2D, 0x03, 0xAE,  // ...0>-..
                            /* 0568 */  0x04, 0x1F, 0x14, 0x40, 0x73, 0x1A, 0x80, 0x7F,  // ...@s...
                            /* 0570 */  0x13, 0xE0, 0x87, 0x88, 0xF0, 0x0F, 0x1C, 0x1E,  // ........
                            /* 0578 */  0x41, 0x84, 0xFF, 0x7F, 0x02, 0x9F, 0x94, 0xC1,  // A.......
                            /* 0580 */  0x75, 0x62, 0x78, 0x52, 0x06, 0x7B, 0xC0, 0xF3,  // ubxR.{..
                            /* 0588 */  0x80, 0xCE, 0x1B, 0x3E, 0x29, 0x03, 0xFC, 0x38,  // ...>)..8
                            /* 0590 */  0x59, 0xE2, 0x4E, 0x22, 0xE0, 0xBD, 0x85, 0x60,  // Y.N"...`
                            /* 0598 */  0x8E, 0x21, 0x30, 0xFF, 0xFF, 0xC7, 0x10, 0xF0,  // .!0.....
                            /* 05A0 */  0x65, 0x0D, 0x02, 0x51, 0xDF, 0x61, 0xC3, 0xAB,  // e..Q.a..
                            /* 05A8 */  0x95, 0x8D, 0xD5, 0xFA, 0xBC, 0x41, 0x05, 0x1F,  // .....A..
                            /* 05B0 */  0x13, 0x34, 0xA1, 0x27, 0x37, 0x0F, 0xB3, 0xD2,  // .4.'7...
                            /* 05B8 */  0xD9, 0x08, 0xE5, 0xF5, 0xE0, 0xD9, 0xDE, 0x32,  // .......2
                            /* 05C0 */  0xC1, 0x74, 0x8E, 0x36, 0x84, 0x05, 0x9E, 0x48,  // .t.6...H
                            /* 05C8 */  0x0C, 0xA1, 0xF1, 0x18, 0xDC, 0x82, 0xE0, 0x28,  // .......(
                            /* 05D0 */  0x88, 0x4F, 0x00, 0x0E, 0x7B, 0x02, 0x42, 0x1F,  // .O..{.B.
                            /* 05D8 */  0x01, 0x7C, 0xE7, 0xE1, 0x04, 0x0E, 0x77, 0xFC,  // .|....w.
                            /* 05E0 */  0xA1, 0x27, 0x06, 0xFC, 0xD8, 0x0E, 0xEC, 0xBC,  // .'......
                            /* 05E8 */  0x7C, 0xCA, 0x05, 0xD7, 0xCC, 0x7C, 0x5F, 0xF2,  // |....|_.
                            /* 05F0 */  0xD0, 0xD8, 0xDD, 0xC4, 0x43, 0xF1, 0x10, 0x1E,  // ....C...
                            /* 05F8 */  0x0F, 0x4C, 0xE0, 0x91, 0xF8, 0x5C, 0xC4, 0x07,  // .L...\..
                            /* 0600 */  0xE1, 0x53, 0x38, 0x3F, 0xFC, 0x80, 0xF3, 0x60,  // .S8?...`
                            /* 0608 */  0x84, 0x3B, 0x23, 0xC0, 0x03, 0xF2, 0x85, 0xC0,  // .;#.....
                            /* 0610 */  0xB3, 0x7A, 0x28, 0x60, 0x73, 0x08, 0x11, 0x26,  // .z(`s..&
                            /* 0618 */  0x9A, 0xE1, 0x31, 0x81, 0x46, 0x45, 0x65, 0x8D,  // ..1.FEe.
                            /* 0620 */  0x0B, 0x35, 0x52, 0x9F, 0x64, 0x18, 0xF6, 0xFB,  // .5R.d...
                            /* 0628 */  0x80, 0x45, 0x0F, 0x54, 0xB7, 0x83, 0xA7, 0x74,  // .E.T...t
                            /* 0630 */  0x0C, 0xAC, 0xC7, 0xCE, 0x61, 0x8D, 0x76, 0xB0,  // ....a.v.
                            /* 0638 */  0x3E, 0x4A, 0xF8, 0x1A, 0xE2, 0x99, 0xFD, 0xFF,  // >J......
                            /* 0640 */  0x4F, 0xD8, 0xB0, 0x3E, 0x42, 0x81, 0xEB, 0xA8,  // O..>B...
                            /* 0648 */  0xC0, 0x8E, 0xDB, 0x3E, 0x01, 0xE0, 0xCE, 0x09,  // ...>....
                            /* 0650 */  0x3A, 0x35, 0xA0, 0x0E, 0x40, 0x16, 0x7F, 0x6A,  // :5..@..j
                            /* 0658 */  0x40, 0xCC, 0xF1, 0xB0, 0x9E, 0x04, 0x0C, 0xFA,  // @.......
                            /* 0660 */  0xAA, 0x63, 0x9C, 0x27, 0x2A, 0x8F, 0xC8, 0xB7,  // .c.'*...
                            /* 0668 */  0x00, 0x26, 0xF5, 0xE4, 0x80, 0x12, 0x49, 0x21,  // .&....I!
                            /* 0670 */  0x89, 0x27, 0x07, 0x94, 0x28, 0x38, 0x0A, 0xE2,  // .'..(8..
                            /* 0678 */  0x93, 0x83, 0x4F, 0xED, 0xF8, 0x93, 0x03, 0xFE,  // ..O.....
                            /* 0680 */  0x1C, 0xC6, 0x4F, 0x0E, 0x70, 0x0F, 0xCC, 0xE0,  // ..O.p...
                            /* 0688 */  0x19, 0x2A, 0x9F, 0x1F, 0xBC, 0xEB, 0x3A, 0x3B,  // .*....:;
                            /* 0690 */  0x3B, 0x00, 0x56, 0x82, 0x9D, 0x1D, 0x40, 0xF3,  // ;.V...@.
                            /* 0698 */  0xFF, 0x3F, 0x3B, 0xF0, 0x73, 0x80, 0xCF, 0x0E,  // .?;.s...
                            /* 06A0 */  0xE0, 0x3A, 0x01, 0x00, 0x9F, 0xF3, 0x03, 0x9C,  // .:......
                            /* 06A8 */  0x49, 0x3E, 0x3F, 0x00, 0x16, 0x2E, 0x06, 0x3E,  // I>?....>
                            /* 06B0 */  0xBF, 0x83, 0x6F, 0x7C, 0xEC, 0xFC, 0x00, 0x18,  // ..o|....
                            /* 06B8 */  0xFA, 0xFF, 0x9F, 0x1F, 0x80, 0x03, 0x2C, 0x3F,  // ......,?
                            /* 06C0 */  0x3F, 0x00, 0x9F, 0x13, 0x00, 0x78, 0x44, 0x9E,  // ?....xD.
                            /* 06C8 */  0x1F, 0x50, 0x1C, 0x3E, 0x28, 0x1A, 0xED, 0x24,  // .P.>(..$
                            /* 06D0 */  0x0E, 0xE0, 0xC4, 0x0F, 0x22, 0xC2, 0x39, 0x84,  // ....".9.
                            /* 06D8 */  0x3F, 0x84, 0x57, 0x8A, 0x28, 0x81, 0x1E, 0x26,  // ?.W.(..&
                            /* 06E0 */  0x7D, 0xC2, 0x24, 0xC7, 0x07, 0x94, 0x50, 0x0A,  // }.$...P.
                            /* 06E8 */  0x1D, 0xAD, 0x7C, 0x7C, 0xE0, 0xC2, 0xE0, 0x28,  // ..||...(
                            /* 06F0 */  0x88, 0x8F, 0x0F, 0x0E, 0x7D, 0x7C, 0x80, 0x1E,  // ....}|..
                            /* 06F8 */  0xF2, 0x34, 0x03, 0x8A, 0xA3, 0x9B, 0x8F, 0x55,  // .4.....U
                            /* 0700 */  0x60, 0xC1, 0x7A, 0x13, 0xF7, 0xF4, 0x60, 0xDC,  // `.z...`.
                            /* 0708 */  0x8B, 0x7D, 0x9B, 0x33, 0xD2, 0x09, 0x9E, 0xEF,  // .}.3....
                            /* 0710 */  0xDB, 0xA3, 0xCF, 0x7B, 0x0F, 0x10, 0xC0, 0xE0,  // ...{....
                            /* 0718 */  0xFF, 0x7F, 0x80, 0x00, 0x4E, 0x47, 0x33, 0x1F,  // ....NG3.
                            /* 0720 */  0x20, 0xC0, 0x35, 0x7E, 0x1F, 0x20, 0xC0, 0x75,  //  .5~. .u
                            /* 0728 */  0x06, 0x00, 0x5E, 0xA2, 0x8E, 0x10, 0x68, 0xD9,  // ..^...h.
                            /* 0730 */  0x07, 0x2C, 0x04, 0x36, 0xC3, 0xF0, 0x2D, 0xC2,  // .,.6..-.
                            /* 0738 */  0xC7, 0x05, 0x0F, 0xCA, 0x04, 0x3E, 0xE8, 0x01,  // .....>..
                            /* 0740 */  0x5E, 0x8E, 0x43, 0x7C, 0x7A, 0xF0, 0x8E, 0x0F,  // ^.C|z...
                            /* 0748 */  0xFC, 0xFF, 0x7F, 0x7C, 0x00, 0x5C, 0x84, 0x3A,  // ...|.\.:
                            /* 0750 */  0x3E, 0x80, 0xCE, 0xC2, 0xF1, 0x01, 0x74, 0xE3,  // >.....t.
                            /* 0758 */  0x07, 0x1E, 0x47, 0x07, 0x38, 0x67, 0x1B, 0x76,  // ..G.8g.v
                            /* 0760 */  0x74, 0x00, 0xF6, 0x47, 0x2B, 0xDC, 0x58, 0xC1,  // t..G+.X.
                            /* 0768 */  0xF3, 0xFF, 0x3F, 0x09, 0xF1, 0xA3, 0x03, 0x70,  // ..?....p
                            /* 0770 */  0x3A, 0xA8, 0x07, 0x7A, 0x90, 0x0D, 0xF4, 0xE8,  // :..z....
                            /* 0778 */  0x00, 0xFC, 0xCF, 0xEA, 0x3E, 0x3A, 0x00, 0xA7,  // ....>:..
                            /* 0780 */  0xF1, 0xC3, 0x17, 0x72, 0x74, 0x40, 0x0D, 0xC1,  // ...rt@..
                            /* 0788 */  0x62, 0x0F, 0x31, 0x08, 0x8D, 0x37, 0x65, 0x32,  // b.1..7e2
                            /* 0790 */  0xDC, 0xD7, 0x14, 0x8F, 0xC7, 0xA7, 0x06, 0x76,  // .......v
                            /* 0798 */  0x70, 0xE0, 0xD2, 0x28, 0x74, 0x9E, 0xF2, 0xC1,  // p..(t...
                            /* 07A0 */  0x81, 0x4B, 0x81, 0xA3, 0x20, 0x3E, 0x38, 0x38,  // .K.. >88
                            /* 07A8 */  0xE6, 0xC1, 0x01, 0x7A, 0xAC, 0x23, 0x0C, 0x28,  // ...z.#.(
                            /* 07B0 */  0xE4, 0x41, 0xD1, 0xFF, 0xFF, 0x48, 0xE1, 0x4F,  // .A...H.O
                            /* 07B8 */  0x8D, 0xAD, 0xF0, 0xD8, 0x70, 0xA7, 0x06, 0xC0,  // ....p...
                            /* 07C0 */  0xC9, 0x21, 0xDE, 0xA7, 0x06, 0x70, 0x79, 0x38,  // .!...py8
                            /* 07C8 */  0x35, 0x80, 0x6E, 0xA2, 0x3E, 0xBF, 0x80, 0x6B,  // 5.n.>..k
                            /* 07D0 */  0xF8, 0x90, 0x0E, 0x0D, 0xA8, 0x13, 0x80, 0x4F,  // .......O
                            /* 07D8 */  0xDF, 0x18, 0x5C, 0x66, 0x6C, 0x94, 0x3A, 0x53,  // ..\fl.:S
                            /* 07E0 */  0x7B, 0x36, 0xEC, 0x8C, 0xC9, 0x4E, 0x0D, 0x5C,  // {6...N.\
                            /* 07E8 */  0x1C, 0x85, 0x8E, 0x0D, 0x3E, 0x35, 0x70, 0x31,  // ....>5p1
                            /* 07F0 */  0x70, 0x14, 0xC4, 0xA7, 0x06, 0x07, 0x3D, 0x35,  // p.....=5
                            /* 07F8 */  0x40, 0x3F, 0x25, 0xFA, 0xD4, 0x00, 0xE7, 0xFF,  // @?%.....
                            /* 0800 */  0x7F, 0x6A, 0xC0, 0x1D, 0x98, 0xC1, 0x33, 0x37,  // .j....37
                            /* 0808 */  0x7E, 0x0E, 0xF3, 0xE0, 0x70, 0x67, 0x17, 0xC0,  // ~...pg..
                            /* 0810 */  0x21, 0xB8, 0x4F, 0x51, 0xC0, 0x6D, 0xFC, 0x10,  // !.OQ.m..
                            /* 0818 */  0xCF, 0x0D, 0xD0, 0x67, 0xFD, 0xDC, 0x00, 0xAC,  // ...g....
                            /* 0820 */  0xFE, 0xFF, 0xE7, 0x06, 0x60, 0x35, 0xB7, 0xE7,  // ....`5..
                            /* 0828 */  0x06, 0xC0, 0xA9, 0x89, 0x73, 0x03, 0x90, 0x1C,  // ....s...
                            /* 0830 */  0x3F, 0x8C, 0xC3, 0x1C, 0x5E, 0xF4, 0xB9, 0x01,  // ?...^...
                            /* 0838 */  0x3D, 0xB5, 0x18, 0xC5, 0x43, 0xA3, 0xCF, 0xDC,  // =...C...
                            /* 0840 */  0x3E, 0x38, 0xF0, 0xB3, 0x9C, 0x4F, 0x0E, 0x3E,  // >8...O.>
                            /* 0848 */  0x38, 0x70, 0x39, 0x70, 0x14, 0xC4, 0xFF, 0xFF,  // 8p9p....
                            /* 0850 */  0x83, 0x83, 0xA3, 0x1E, 0x1C, 0xA0, 0x47, 0x3B,  // ......G;
                            /* 0858 */  0x38, 0x80, 0xE2, 0xE0, 0x03, 0x9E, 0x63, 0x0F,  // 8.....c.
                            /* 0860 */  0x1F, 0x1D, 0x9B, 0x2A, 0xF6, 0xE4, 0x00, 0x38,  // ...*...8
                            /* 0868 */  0x39, 0x83, 0xF9, 0xE4, 0x00, 0x2E, 0x15, 0x27,  // 9......'
                            /* 0870 */  0x07, 0xD0, 0xCD, 0xE9, 0x31, 0x0A, 0xAC, 0x07,  // ....1...
                            /* 0878 */  0x00, 0x38, 0x47, 0x07, 0xDC, 0x18, 0x2C, 0xF9,  // .8G...,.
                            /* 0880 */  0xE8, 0x80, 0xD0, 0x7A, 0xD6, 0x25, 0xC3, 0x38,  // ...z.%.8
                            /* 0888 */  0x07, 0x7E, 0xA8, 0xC4, 0xFC, 0xFF, 0x8F, 0xB7,  // .~......
                            /* 0890 */  0x80, 0x8F, 0x2B, 0x41, 0xAC, 0x53, 0x7F, 0xFB,  // ..+A.S..
                            /* 0898 */  0xF2, 0x24, 0x5F, 0xD4, 0x7D, 0x33, 0x66, 0xD3,  // .$_.}3f.
                            /* 08A0 */  0xC3, 0x9C, 0x1C, 0x00, 0x27, 0x87, 0x7F, 0xF0,  // ....'...
                            /* 08A8 */  0x8D, 0xDC, 0x87, 0x7F, 0xE0, 0x74, 0x72, 0xE0,  // .....tr.
                            /* 08B0 */  0x27, 0x00, 0xFC, 0x7D, 0x01, 0x7F, 0xF8, 0xC7,  // '..}....
                            /* 08B8 */  0xFD, 0xFF, 0x45, 0x41, 0x28, 0xC0, 0xE1, 0x1F,  // ..EA(...
                            /* 08C0 */  0xD2, 0xC9, 0x12, 0x83, 0x70, 0x0E, 0xCF, 0xB1,  // ....p...
                            /* 08C8 */  0xF6, 0x7C, 0xC2, 0xA4, 0xC7, 0x07, 0x7E, 0x82,  // .|....~.
                            /* 08D0 */  0xF0, 0x51, 0xC6, 0xC7, 0x07, 0x2E, 0x0B, 0x8E,  // .Q......
                            /* 08D8 */  0x82, 0xF8, 0xF8, 0xE0, 0xC8, 0xC7, 0x07, 0xE8,  // ........
                            /* 08E0 */  0x11, 0x8F, 0x0F, 0xA0, 0x38, 0x0C, 0x3C, 0xC6,  // ....8.<.
                            /* 08E8 */  0x80, 0x0D, 0xED, 0xE0, 0x70, 0x40, 0x06, 0x0B,  // ....p@..
                            /* 08F0 */  0x1A, 0xA2, 0x62, 0x28, 0x02, 0xDC, 0xFC, 0x09,  // ..b(....
                            /* 08F8 */  0x02, 0xD0, 0x72, 0x12, 0xF2, 0x09, 0x02, 0x5C,  // ..r....\
                            /* 0900 */  0x67, 0x00, 0x9F, 0x20, 0xC0, 0x75, 0x04, 0x80,  // g.. .u..
                            /* 0908 */  0xF7, 0xFF, 0x3F, 0x02, 0x80, 0x11, 0x29, 0xD6,  // ..?...).
                            /* 0910 */  0x23, 0x00, 0x93, 0x78, 0xBA, 0x43, 0x8B, 0x3F,  // #..x.C.?
                            /* 0918 */  0x72, 0x23, 0xCE, 0x0F, 0xB0, 0xE4, 0x9E, 0x1F,  // r#......
                            /* 0920 */  0x50, 0x42, 0x29, 0x74, 0x80, 0xF0, 0xF9, 0x81,  // PB)t....
                            /* 0928 */  0x1F, 0x76, 0x0D, 0x66, 0x10, 0x9F, 0x1F, 0x1C,  // .v.f....
                            /* 0930 */  0xFA, 0xFC, 0x00, 0x3D, 0xE4, 0x89, 0x1B, 0x14,  // ...=....
                            /* 0938 */  0x62, 0x8F, 0xC8, 0xA0, 0x1B, 0x2F, 0x3C, 0x4C,  // b..../<L
                            /* 0940 */  0xFB, 0xC2, 0x90, 0x66, 0x04, 0x9D, 0xF1, 0x00,  // ...f....
                            /* 0948 */  0x2F, 0x27, 0x22, 0x1F, 0x20, 0xC0, 0x65, 0x03,  // /'". .e.
                            /* 0950 */  0x96, 0xFE, 0xFF, 0x0F, 0x10, 0xE0, 0x39, 0x03,  // ......9.
                            /* 0958 */  0x00, 0x2F, 0x61, 0xE7, 0x3C, 0xB4, 0xF0, 0x33,  // ./a.<..3
                            /* 0960 */  0x0D, 0xA4, 0x39, 0xBF, 0x88, 0xDB, 0x27, 0x88,  // ..9...'.
                            /* 0968 */  0x08, 0x7C, 0x7E, 0xF0, 0x11, 0x82, 0x1F, 0x39,  // .|~....9
                            /* 0970 */  0x7D, 0xC0, 0xF2, 0x11, 0x82, 0x4B, 0x82, 0xA3,  // }....K..
                            /* 0978 */  0x20, 0x3E, 0x42, 0x38, 0xEE, 0x11, 0x02, 0x7A,  //  >B8...z
                            /* 0980 */  0xBC, 0x13, 0x0D, 0x28, 0x4E, 0x66, 0xE0, 0x41,  // ...(Nf.A
                            /* 0988 */  0x3A, 0x33, 0x8F, 0xD4, 0x28, 0x2F, 0x1F, 0xF8,  // :3..(/..
                            /* 0990 */  0xF3, 0x0C, 0xE0, 0xE5, 0xFF, 0x7F, 0xD2, 0x03,  // ........
                            /* 0998 */  0xA7, 0x8E, 0x93, 0x1E, 0xD0, 0x3A, 0x00, 0x80,  // .....:..
                            /* 09A0 */  0x43, 0xF0, 0xE1, 0x01, 0x1D, 0xE2, 0xF0, 0x40,  // C......@
                            /* 09A8 */  0x15, 0x62, 0xE8, 0xE0, 0x70, 0xB4, 0x3E, 0x3E,  // .b..p.>>
                            /* 09B0 */  0xE0, 0x2E, 0x0F, 0xEC, 0xF0, 0xE9, 0xC3, 0x03,  // ........
                            /* 09B8 */  0x3F, 0xD1, 0xF8, 0x84, 0xE5, 0xC3, 0x03, 0x3F,  // ?......?
                            /* 09C0 */  0xEE, 0xF9, 0xE4, 0xC9, 0x0F, 0x0F, 0x8E, 0x7E,  // .......~
                            /* 09C8 */  0x78, 0x80, 0x7E, 0xF6, 0xF4, 0xE1, 0x01, 0xFE,  // x.~.....
                            /* 09D0 */  0x11, 0x9A, 0x0F, 0x16, 0xFE, 0x34, 0x8D, 0x12,  // .....4..
                            /* 09D8 */  0xED, 0x10, 0xDF, 0x03, 0xCE, 0x23, 0x88, 0x71,  // .....#.q
                            /* 09E0 */  0x1E, 0xF6, 0x18, 0xEC, 0xC9, 0x9E, 0xB1, 0x5D,  // .......]
                            /* 09E8 */  0x1F, 0x21, 0x80, 0xE0, 0xFF, 0xFF, 0x08, 0x01,  // .!......
                            /* 09F0 */  0x5C, 0x0E, 0x69, 0x3E, 0x42, 0x80, 0xCB, 0xC7,  // \.i>B...
                            /* 09F8 */  0x11, 0x02, 0x74, 0xC7, 0x00, 0xE0, 0x28, 0xFB,  // ..t...(.
                            /* 0A00 */  0x20, 0x81, 0x92, 0x72, 0x90, 0xA0, 0xA7, 0x1C,  //  ..r....
                            /* 0A08 */  0x76, 0x91, 0xE0, 0xA7, 0x08, 0x26, 0xFD, 0x14,  // v....&..
                            /* 0A10 */  0x81, 0x3A, 0x48, 0xF8, 0x2C, 0xEA, 0x53, 0x04,  // .:H.,.S.
                            /* 0A18 */  0x3F, 0x0F, 0x73, 0x10, 0x9F, 0x22, 0x4C, 0xE3,  // ?.s.."L.
                            /* 0A20 */  0x53, 0x04, 0xDC, 0xC0, 0x67, 0x2C, 0x50, 0x4C,  // S...g,PL
                            /* 0A28 */  0xED, 0x78, 0xC1, 0x32, 0x7A, 0x9F, 0xF5, 0x7C,  // .x.2z..|
                            /* 0A30 */  0x5C, 0xF4, 0x89, 0xC3, 0x18, 0x67, 0x1F, 0x2E,  // \....g..
                            /* 0A38 */  0xEA, 0x0B, 0x1F, 0xC3, 0x62, 0x63, 0xC6, 0xFD,  // ....bc..
                            /* 0A40 */  0xFF, 0xC7, 0xCC, 0xA6, 0x62, 0x8C, 0xC3, 0xE7,  // ....b...
                            /* 0A48 */  0x27, 0x2D, 0xC0, 0xCB, 0x11, 0xDF, 0x07, 0x09,  // '-......
                            /* 0A50 */  0x70, 0x8D, 0xC5, 0x07, 0x09, 0x70, 0x9D, 0x04,  // p....p..
                            /* 0A58 */  0x80, 0x6F, 0xA8, 0xB3, 0x04, 0x4A, 0xDC, 0x09,  // .o...J..
                            /* 0A60 */  0xCD, 0x87, 0x63, 0xC4, 0x7C, 0x8F, 0xC6, 0x87,  // ..c.|...
                            /* 0A68 */  0xAF, 0x08, 0x67, 0x60, 0x9C, 0x73, 0xF3, 0x51,  // ..g`.s.Q
                            /* 0A70 */  0xD9, 0x30, 0x6F, 0x0F, 0xBE, 0xCA, 0x04, 0x09,  // .0o.....
                            /* 0A78 */  0xF3, 0x96, 0x1A, 0xE6, 0x3C, 0xC2, 0x44, 0x49,  // ....<.DI
                            /* 0A80 */  0xE0, 0x13, 0xAA, 0x0F, 0x15, 0xFC, 0x5C, 0xE1,  // ......\.
                            /* 0A88 */  0x23, 0x98, 0x0F, 0x15, 0x5C, 0x2A, 0x1C, 0x05,  // #...\*..
                            /* 0A90 */  0xF1, 0xA1, 0xC2, 0x32, 0x0E, 0x15, 0xA8, 0xFF,  // ...2....
                            /* 0A98 */  0xFF, 0xA1, 0x02, 0x4E, 0xEC, 0x93, 0x0E, 0x28,  // ...N...(
                            /* 0AA0 */  0xE4, 0x9F, 0x6A, 0x41, 0x77, 0x14, 0xF0, 0x08,  // ..jAw...
                            /* 0AA8 */  0x61, 0xDC, 0x48, 0x7C, 0x32, 0xF1, 0xB9, 0xCD,  // a.H|2...
                            /* 0AB0 */  0x38, 0x06, 0x3B, 0x5C, 0x1C, 0x36, 0xE6, 0xC8,  // 8.;\.6..
                            /* 0AB8 */  0xEC, 0xB9, 0x62, 0xCE, 0x15, 0x80, 0x93, 0xA3,  // ..b.....
                            /* 0AC0 */  0x9C, 0xCF, 0x15, 0xE0, 0x32, 0x72, 0xAE, 0x00,  // ....2r..
                            /* 0AC8 */  0xDD, 0x61, 0x00, 0x78, 0xFD, 0xFF, 0x0F, 0x03,  // .a.x....
                            /* 0AD0 */  0xE0, 0x38, 0x19, 0xE2, 0xC6, 0x63, 0xD9, 0x47,  // .8...c.G
                            /* 0AD8 */  0x0B, 0xC4, 0xCC, 0x0F, 0xFB, 0x25, 0xE0, 0xC1,  // .....%..
                            /* 0AE0 */  0x82, 0x9F, 0x25, 0x70, 0x07, 0x1E, 0x7E, 0x30,  // ..%p..~0
                            /* 0AE8 */  0xF4, 0x91, 0x82, 0x8B, 0x82, 0xA3, 0x20, 0x3E,  // ...... >
                            /* 0AF0 */  0x52, 0xF8, 0xB8, 0xE3, 0x23, 0x05, 0xDC, 0x80,  // R...#...
                            /* 0AF8 */  0x47, 0x0A, 0x50, 0x9C, 0xBB, 0xC1, 0x37, 0x39,  // G.P...79
                            /* 0B00 */  0x36, 0x70, 0x78, 0x07, 0x79, 0xC0, 0xA2, 0x92,  // 6px.y...
                            /* 0B08 */  0x73, 0x04, 0xA8, 0xFE, 0xFF, 0x27, 0x00, 0xE0,  // s....'..
                            /* 0B10 */  0x74, 0x78, 0x80, 0x89, 0xF1, 0xF0, 0x00, 0xF8,  // tx......
                            /* 0B18 */  0x9A, 0x1C, 0x3B, 0x3C, 0x00, 0x66, 0xFF, 0xFF,  // ..;<.f..
                            /* 0B20 */  0x27, 0x06, 0x9F, 0x02, 0x7C, 0x78, 0x00, 0x6E,  // '...|x.n
                            /* 0B28 */  0x27, 0x00, 0xF8, 0xA2, 0x0F, 0x0F, 0x28, 0x51,  // '.....(Q
                            /* 0B30 */  0x10, 0x0A, 0x72, 0x78, 0x40, 0x1C, 0xE1, 0xE1,  // ..rx@...
                            /* 0B38 */  0x8C, 0xF5, 0x61, 0xC1, 0xF8, 0xBE, 0x81, 0xF9,  // ..a.....
                            /* 0B40 */  0x9C, 0x0A, 0x78, 0x19, 0x2F, 0x3F, 0x72, 0x83,  // ..x./?r.
                            /* 0B48 */  0x03, 0xE7, 0x04, 0x8E, 0x12, 0x77, 0x8A, 0x00,  // .....w..
                            /* 0B50 */  0xAE, 0xFF, 0xFF, 0x73, 0x2A, 0xF0, 0x3A, 0x7F,  // ...s*.:.
                            /* 0B58 */  0xFA, 0x9C, 0x0A, 0x9C, 0x8E, 0x01, 0xE0, 0x0E,  // ........
                            /* 0B60 */  0x74, 0x94, 0x40, 0x1D, 0x01, 0x1C, 0xEC, 0x2C,  // t.@....,
                            /* 0B68 */  0x0F, 0x69, 0x3A, 0xCF, 0x88, 0xB8, 0x81, 0x9E,  // .i:.....
                            /* 0B70 */  0x86, 0x5D, 0xA2, 0xE8, 0xDE, 0xEA, 0xA3, 0x20,  // .]..... 
                            /* 0B78 */  0x60, 0xE6, 0x72, 0xF0, 0x92, 0x70, 0xB0, 0x9E,  // `.r..p..
                            /* 0B80 */  0x22, 0xEE, 0x58, 0x09, 0xC3, 0xFB, 0x1C, 0x09,  // ".X.....
                            /* 0B88 */  0x56, 0xC0, 0x28, 0x8F, 0xBD, 0x3E, 0x56, 0xFE,  // V.(..>V.
                            /* 0B90 */  0xFF, 0x0F, 0xD3, 0x27, 0x69, 0xC0, 0xD5, 0x51,  // ...'i..Q
                            /* 0B98 */  0x10, 0x7C, 0x56, 0x8E, 0x82, 0x40, 0xEB, 0x30,  // .|V..@.0
                            /* 0BA0 */  0x00, 0x9C, 0x8E, 0x3C, 0x38, 0x0E, 0xC7, 0x38,  // ...<8..8
                            /* 0BA8 */  0x4F, 0x23, 0x6E, 0x14, 0xB8, 0x03, 0x0F, 0xF6,  // O#n.....
                            /* 0BB0 */  0x1C, 0xE6, 0x43, 0x05, 0x17, 0x4C, 0xA1, 0x13,  // ..C..L..
                            /* 0BB8 */  0x8F, 0x0F, 0x15, 0x5C, 0x20, 0x1C, 0x05, 0xF1,  // ...\ ...
                            /* 0BC0 */  0xA1, 0xC2, 0xE1, 0x0F, 0x3C, 0x50, 0xFE, 0xFF,  // ....<P..
                            /* 0BC8 */  0x87, 0x0A, 0x5C, 0xD8, 0x23, 0x35, 0x28, 0xCE,  // ..\.#5(.
                            /* 0BD0 */  0x01, 0x07, 0x0E, 0x96, 0xE1, 0xB1, 0x09, 0xC3,  // ........
                            /* 0BD8 */  0x9C, 0x3A, 0xF6, 0x72, 0xF2, 0x48, 0x60, 0x1C,  // .:.r.H`.
                            /* 0BE0 */  0x7E, 0xA0, 0x06, 0xBC, 0x84, 0x3C, 0x4F, 0x80,  // ~....<O.
                            /* 0BE8 */  0x4E, 0xCB, 0x79, 0x02, 0x74, 0xE7, 0x00, 0xE0,  // N.y.t...
                            /* 0BF0 */  0x19, 0xE0, 0x28, 0x81, 0xFA, 0xFF, 0x73, 0x38,  // ..(...s8
                            /* 0BF8 */  0xCC, 0x61, 0x0C, 0x71, 0x94, 0x80, 0x29, 0xFE,  // .a.q..).
                            /* 0C00 */  0x28, 0x81, 0x3A, 0x4D, 0xF8, 0x38, 0xE6, 0xA3,  // (.:M.8..
                            /* 0C08 */  0x04, 0x97, 0x09, 0x47, 0x41, 0x7C, 0x94, 0xB0,  // ...GA|..
                            /* 0C10 */  0x84, 0xE3, 0x0E, 0xF4, 0xC8, 0xC7, 0x1D, 0x50,  // .......P
                            /* 0C18 */  0x80, 0xF8, 0xD0, 0x04, 0xAE, 0x31, 0x83, 0xF3,  // .....1..
                            /* 0C20 */  0x38, 0x06, 0x38, 0x3A, 0xD5, 0xF9, 0x34, 0x01,  // 8.8:..4.
                            /* 0C28 */  0x2E, 0x2F, 0xA7, 0x09, 0xD0, 0xFD, 0xFF, 0x8F,  // ./......
                            /* 0C30 */  0x02, 0xC0, 0x39, 0xC8, 0x61, 0x11, 0x1D, 0xE9,  // ..9.a...
                            /* 0C38 */  0x48, 0x06, 0x8A, 0x71, 0xBF, 0x4D, 0xFA, 0x60,  // H..q.M.`
                            /* 0C40 */  0xA4, 0x23, 0x05, 0xEA, 0x3C, 0xE6, 0x33, 0x85,  // .#..<.3.
                            /* 0C48 */  0x8F, 0x14, 0x5C, 0x28, 0x1C, 0x05, 0xF1, 0x91,  // ..\(....
                            /* 0C50 */  0xC2, 0x22, 0x8E, 0x14, 0xD0, 0x43, 0x1F, 0x29,  // ."...C.)
                            /* 0C58 */  0x40, 0x21, 0xFE, 0xD0, 0x04, 0x64, 0xA0, 0x8E,  // @!...d..
                            /* 0C60 */  0xC3, 0x27, 0x72, 0xDF, 0x97, 0x8C, 0xF7, 0xCA,  // .'r.....
                            /* 0C68 */  0x04, 0xEF, 0x4C, 0x01, 0x4C, 0xFF, 0xFF, 0x67,  // ..L.L..g
                            /* 0C70 */  0x0A, 0x70, 0x1D, 0x9C, 0x7C, 0xA6, 0x00, 0x17,  // .p..|...
                            /* 0C78 */  0x9C, 0xCF, 0x14, 0xE0, 0x3A, 0x0B, 0x00, 0x6F,  // ....:..o
                            /* 0C80 */  0xA1, 0x87, 0x6B, 0xF4, 0x49, 0xC2, 0x27, 0x21,  // ..k.I.'!
                            /* 0C88 */  0x76, 0x9B, 0xF0, 0x91, 0x07, 0x2B, 0xF9, 0x40,  // v....+.@
                            /* 0C90 */  0x81, 0x3A, 0xCB, 0xFA, 0xAC, 0xE8, 0x03, 0x05,  // .:......
                            /* 0C98 */  0x17, 0x07, 0x47, 0x41, 0x7C, 0xA0, 0x70, 0xF0,  // ..GA|.p.
                            /* 0CA0 */  0xC3, 0x18, 0xF4, 0xA0, 0x87, 0x31, 0x50, 0x08,  // .....1P.
                            /* 0CA8 */  0x3E, 0x35, 0x81, 0x6E, 0xB6, 0x30, 0xEE, 0x4C,  // >5.n.0.L
                            /* 0CB0 */  0xB0, 0xFF, 0xFF, 0x47, 0x09, 0xC0, 0xC9, 0x11,  // ...G....
                            /* 0CB8 */  0xDD, 0x47, 0x09, 0x70, 0x99, 0x39, 0x4A, 0x80,  // .G.p.9J.
                            /* 0CC0 */  0xEE, 0x14, 0x00, 0xFC, 0x84, 0x1F, 0x22, 0xD0,  // ......".
                            /* 0CC8 */  0x47, 0x44, 0x1F, 0x80, 0xD8, 0x21, 0x02, 0xC6,  // GD...!..
                            /* 0CD0 */  0x09, 0xD6, 0x87, 0x08, 0x7E, 0x0A, 0xF3, 0x41,  // ....~..A
                            /* 0CD8 */  0xC2, 0x87, 0x08, 0x7E, 0xE8, 0xF7, 0xB1, 0x9F,  // ...~....
                            /* 0CE0 */  0x1F, 0x22, 0x4C, 0xE3, 0x43, 0x04, 0xDC, 0x83,  // ."L.C...
                            /* 0CE8 */  0xBF, 0x0F, 0x39, 0xF0, 0x27, 0x78, 0xBC, 0xD8,  // ..9.'x..
                            /* 0CF0 */  0xFF, 0xFF, 0x61, 0x09, 0xFE, 0x78, 0xC1, 0x76,  // ..a..x.v
                            /* 0CF8 */  0x55, 0xC2, 0x1F, 0x24, 0x00, 0x2B, 0xC7, 0x11,  // U..$.+..
                            /* 0D00 */  0x1F, 0x24, 0xC0, 0xA5, 0xE6, 0x20, 0x01, 0xBA,  // .$... ..
                            /* 0D08 */  0x93, 0x00, 0xF0, 0x95, 0x7B, 0x98, 0x40, 0x1D,  // ....{.@.
                            /* 0D10 */  0xC7, 0x7D, 0xB2, 0xF6, 0x38, 0x18, 0xC6, 0x31,  // .}..8..1
                            /* 0D18 */  0xBF, 0x01, 0x84, 0x78, 0x37, 0xF3, 0xD9, 0x15,  // ...x7...
                            /* 0D20 */  0xD6, 0xFF, 0xFF, 0xEC, 0x0A, 0x7C, 0xCE, 0x12,  // .....|..
                            /* 0D28 */  0xB8, 0x43, 0x26, 0x78, 0x86, 0xCC, 0xE7, 0xC6,  // .C&x....
                            /* 0D30 */  0x40, 0x42, 0x3D, 0x25, 0xF9, 0x18, 0x70, 0x2A,  // @B=%..p*
                            /* 0D38 */  0x07, 0x1B, 0x27, 0xC8, 0x2B, 0x81, 0x87, 0x6B,  // ..'.+..k
                            /* 0D40 */  0x24, 0x9F, 0x9C, 0x82, 0x3C, 0x25, 0x9C, 0x42,  // $...<%.B
                            /* 0D48 */  0xD4, 0xD7, 0xB7, 0x87, 0x83, 0xA6, 0xCE, 0xAE,  // ........
                            /* 0D50 */  0x80, 0x48, 0x37, 0x67, 0x57, 0xA0, 0x75, 0x0E,  // .H7gW.u.
                            /* 0D58 */  0x80, 0xFF, 0xFF, 0x3F, 0x07, 0xC0, 0x3F, 0x77,  // ...?..?w
                            /* 0D60 */  0xC1, 0x39, 0x47, 0xE0, 0x7C, 0x4E, 0x5B, 0x07,  // .9G.|N[.
                            /* 0D68 */  0x09, 0x7E, 0xEE, 0x02, 0x8E, 0x07, 0x09, 0xDC,  // .~......
                            /* 0D70 */  0x11, 0x09, 0x3C, 0x23, 0xC6, 0x8F, 0xCE, 0xC7,  // ..<#....
                            /* 0D78 */  0x08, 0xC0, 0xDB, 0xB9, 0x0B, 0x7C, 0x23, 0xF4,  // .....|#.
                            /* 0D80 */  0x31, 0x02, 0xEE, 0xFF, 0xFF, 0xDC, 0x05, 0xDE,  // 1.......
                            /* 0D88 */  0x53, 0x00, 0x78, 0x25, 0x1D, 0x22, 0x50, 0xE3,  // S.x%."P.
                            /* 0D90 */  0xF2, 0x69, 0xCB, 0x87, 0x08, 0x3C, 0xF4, 0x63,  // .i...<.c
                            /* 0D98 */  0xE1, 0xB1, 0x3C, 0x5B, 0xB3, 0x73, 0x34, 0x3F,  // ..<[.s4?
                            /* 0DA0 */  0xD7, 0x70, 0x79, 0xA7, 0x08, 0x94, 0x20, 0x38,  // .py... 8
                            /* 0DA8 */  0x0A, 0xE2, 0x53, 0x84, 0x4F, 0x35, 0x3E, 0x45,  // ..S.O5>E
                            /* 0DB0 */  0xC0, 0x0D, 0x77, 0x8A, 0x00, 0x85, 0xC8, 0x01,  // ..w.....
                            /* 0DB8 */  0x83, 0xFC, 0x12, 0xE9, 0xE9, 0xB1, 0xF3, 0x03,  // ........
                            /* 0DC0 */  0xE0, 0x24, 0xD4, 0xF9, 0x01, 0xCA, 0xFF, 0xFF,  // .$......
                            /* 0DC8 */  0xFC, 0x00, 0xD7, 0xCE, 0xF9, 0x01, 0x74, 0xE3,  // ......t.
                            /* 0DD0 */  0x07, 0x1E, 0x82, 0x4F, 0x0E, 0xA8, 0xB1, 0x3B,  // ...O...;
                            /* 0DD8 */  0xC8, 0xC9, 0x01, 0x71, 0xAD, 0x67, 0x47, 0xAE,  // ...q.gG.
                            /* 0DE0 */  0x43, 0x78, 0x49, 0x38, 0x8B, 0xC3, 0xA9, 0x19,  // CxI8....
                            /* 0DE8 */  0x48, 0x57, 0x2E, 0x86, 0x13, 0xE5, 0x29, 0xD5,  // HW....).
                            /* 0DF0 */  0xE7, 0x2E, 0x13, 0xF8, 0xA0, 0xE5, 0xE3, 0x03,  // ........
                            /* 0DF8 */  0x3F, 0xD2, 0xF8, 0xD4, 0xEC, 0xE3, 0x03, 0x97,  // ?.......
                            /* 0E00 */  0x06, 0x47, 0x41, 0x7C, 0x7C, 0x70, 0xEC, 0xE3,  // .GA||p..
                            /* 0E08 */  0x03, 0xF4, 0x98, 0xC7, 0x07, 0x50, 0xC8, 0x1D,  // .....P..
                            /* 0E10 */  0x2F, 0xE8, 0xA6, 0x88, 0x47, 0x3A, 0x46, 0x2C,  // /...G:F,
                            /* 0E18 */  0xD0, 0x39, 0x62, 0xCE, 0x10, 0xC0, 0xED, 0xFF,  // .9b.....
                            /* 0E20 */  0x7F, 0x86, 0x00, 0x6F, 0xBC, 0x33, 0x04, 0xE8,  // ...o.3..
                            /* 0E28 */  0xF4, 0x9C, 0x21, 0x40, 0x77, 0x08, 0x00, 0x6E,  // ..!@w..n
                            /* 0E30 */  0xA7, 0x2C, 0x1C, 0x87, 0x0F, 0x7F, 0x98, 0xE1,  // .,......
                            /* 0E38 */  0xF9, 0x84, 0x63, 0xE4, 0x63, 0x78, 0xAB, 0xF0,  // ..c.cx..
                            /* 0E40 */  0xC4, 0x8E, 0xE4, 0x10, 0x02, 0x3D, 0x44, 0x00,  // .....=D.
                            /* 0E48 */  0x86, 0xA6, 0x87, 0xBB, 0x84, 0xF0, 0xF9, 0xF1,  // ........
                            /* 0E50 */  0xC3, 0x1A, 0x83, 0xC6, 0x1C, 0x22, 0x70, 0xFF,  // ....."p.
                            /* 0E58 */  0xFF, 0x43, 0x04, 0xE0, 0xCD, 0xCF, 0x21, 0x02,  // .C....!.
                            /* 0E60 */  0xE8, 0x1D, 0x02, 0xC0, 0x25, 0xFF, 0x10, 0x81,  // ....%...
                            /* 0E68 */  0x1A, 0x95, 0xE3, 0x1C, 0x19, 0x04, 0x7B, 0x1E,  // ......{.
                            /* 0E70 */  0x27, 0xFA, 0x62, 0x8F, 0x9B, 0x62, 0x68, 0xCF,  // '.b..bh.
                            /* 0E78 */  0x22, 0xCC, 0x31, 0x44, 0x8A, 0xF0, 0x50, 0x61,  // ".1D..Pa
                            /* 0E80 */  0xFC, 0x9E, 0x0F, 0xCF, 0x3E, 0x47, 0xA0, 0x4E,  // ....>G.N
                            /* 0E88 */  0x80, 0x3E, 0x4B, 0xF8, 0x1C, 0xC1, 0x25, 0xC2,  // .>K...%.
                            /* 0E90 */  0x51, 0x10, 0x9F, 0x23, 0x1C, 0xFF, 0x1C, 0x01,  // Q..#....
                            /* 0E98 */  0x3D, 0xEE, 0x39, 0x02, 0x14, 0xD3, 0x39, 0x66,  // =.9...9f
                            /* 0EA0 */  0xCC, 0xFF, 0x7F, 0xCC, 0x70, 0x27, 0x87, 0x59,  // ....p'.Y
                            /* 0EA8 */  0xE7, 0xD1, 0x61, 0xEF, 0x21, 0x30, 0xF0, 0xE3,  // ..a.!0..
                            /* 0EB0 */  0xBC, 0xDF, 0xFA, 0x42, 0x12, 0x31, 0xA6, 0xEF,  // ...B.1..
                            /* 0EB8 */  0x48, 0x3E, 0x01, 0x02, 0x5E, 0x0E, 0x24, 0x3E,  // H>..^.$>
                            /* 0EC0 */  0x4B, 0x80, 0xEB, 0x9B, 0xE0, 0xB3, 0x04, 0xB8,  // K.......
                            /* 0EC8 */  0x0E, 0x02, 0xC0, 0xF5, 0xBC, 0x8C, 0x1B, 0x99,  // ........
                            /* 0ED0 */  0xCF, 0xF2, 0x3E, 0xDE, 0xB3, 0xC3, 0x04, 0xBC,  // ..>.....
                            /* 0ED8 */  0x03, 0x3D, 0xF6, 0xFF, 0x7F, 0xCC, 0x01, 0x8E,  // .=......
                            /* 0EE0 */  0xC3, 0x31, 0x34, 0x3B, 0x92, 0x80, 0x69, 0x84,  // .14;..i.
                            /* 0EE8 */  0x6C, 0x99, 0x47, 0x0E, 0xF7, 0x2C, 0x0F, 0x38,  // l.G..,.8
                            /* 0EF0 */  0x3A, 0xE6, 0x80, 0xCF, 0xD0, 0x31, 0x07, 0x68,  // :....1.h
                            /* 0EF8 */  0x1D, 0x02, 0xE0, 0xFD, 0xFF, 0x0F, 0x01, 0x70,  // .......p
                            /* 0F00 */  0xCF, 0x11, 0x70, 0x0E, 0x3E, 0xEC, 0x1C, 0x01,  // ..p.>...
                            /* 0F08 */  0x98, 0x38, 0x7D, 0x81, 0xFB, 0x1C, 0x01, 0xF8,  // .8}.....
                            /* 0F10 */  0x56, 0x74, 0x8E, 0x80, 0xF2, 0xFF, 0x3F, 0x7D,  // Vt....?}
                            /* 0F18 */  0x01, 0x97, 0x43, 0x00, 0xB8, 0x64, 0x9F, 0x23,  // ..C..d.#
                            /* 0F20 */  0x50, 0xD2, 0x20, 0x14, 0xE6, 0xF4, 0x05, 0x69,  // P. ....i
                            /* 0F28 */  0xD0, 0x07, 0x10, 0xFF, 0x08, 0x8F, 0xC5, 0x43,  // .......C
                            /* 0F30 */  0xB0, 0xC6, 0x5B, 0x0F, 0x92, 0xC0, 0xA7, 0x79,  // ..[....y
                            /* 0F38 */  0xC0, 0xCB, 0xF4, 0xF0, 0x97, 0x24, 0xF0, 0x1C,  // .....$..
                            /* 0F40 */  0x25, 0x80, 0xEF, 0xFF, 0xFF, 0x34, 0x0F, 0x9C,  // %....4..
                            /* 0F48 */  0x1C, 0x9D, 0xE6, 0x81, 0xD6, 0x29, 0x00, 0xBC,  // .....)..
                            /* 0F50 */  0xD2, 0xCF, 0x12, 0x28, 0x49, 0x87, 0x68, 0x7A,  // ...(I.hz
                            /* 0F58 */  0xE8, 0x61, 0xB7, 0x57, 0xFC, 0x44, 0x30, 0x27,  // .a.W.D0'
                            /* 0F60 */  0x0B, 0x72, 0x8E, 0x40, 0x9D, 0x71, 0x2C, 0xF7,  // .r.@.q,.
                            /* 0F68 */  0x1C, 0x81, 0x3A, 0xD3, 0xFB, 0x54, 0xCF, 0xCF,  // ..:..T..
                            /* 0F70 */  0x11, 0x0E, 0x7F, 0x8E, 0x80, 0x7E, 0xAE, 0xF7,  // .....~..
                            /* 0F78 */  0xB9, 0x0B, 0xFE, 0x70, 0x0E, 0x19, 0x2C, 0xAE,  // ...p..,.
                            /* 0F80 */  0xCF, 0xBA, 0x10, 0xC6, 0xEA, 0xE1, 0x31, 0x98,  // ......1.
                            /* 0F88 */  0x58, 0x67, 0x1D, 0x21, 0x88, 0x8F, 0x24, 0x46,  // Xg.!..$F
                            /* 0F90 */  0xF6, 0x7D, 0xC4, 0xDE, 0xE7, 0x4C, 0xC6, 0x70,  // .}...L.p
                            /* 0F98 */  0x24, 0x3E, 0x49, 0xE0, 0xFE, 0xFF, 0x27, 0x09,  // $>I...'.
                            /* 0FA0 */  0xC0, 0xC3, 0x79, 0xC4, 0x27, 0x09, 0x70, 0x1D,  // ..y.'.p.
                            /* 0FA8 */  0x11, 0x7C, 0x92, 0x00, 0x17, 0xD8, 0xA3, 0x17,  // .|......
                            /* 0FB0 */  0xD8, 0x4E, 0x02, 0x60, 0x04, 0x0B, 0x12, 0xE3,  // .N.`....
                            /* 0FB8 */  0xB5, 0xD5, 0xE2, 0x4F, 0x13, 0x50, 0xA2, 0x9C,  // ...O.P..
                            /* 0FC0 */  0xF0, 0x21, 0x9E, 0x26, 0xB0, 0x67, 0x56, 0xE0,  // .!.&.gV.
                            /* 0FC8 */  0xFB, 0xFF, 0x3F, 0x5B, 0x82, 0xE7, 0xA4, 0xC4,  // ..?[....
                            /* 0FD0 */  0x87, 0x0D, 0x1F, 0xB6, 0xAF, 0x79, 0x23, 0x4E,  // .....y#N
                            /* 0FD8 */  0x60, 0x80, 0xA3, 0x33, 0x2B, 0xF8, 0x2C, 0x9D,  // `..3+.,.
                            /* 0FE0 */  0x59, 0x81, 0xD6, 0x41, 0x00, 0x38, 0x88, 0x5E,  // Y..A.8.^
                            /* 0FE8 */  0xA0, 0x4E, 0x13, 0x5C, 0xD4, 0x91, 0xDA, 0x2F,  // .N.\.../
                            /* 0FF0 */  0x07, 0x1D, 0xF3, 0x39, 0xE8, 0xD1, 0x18, 0xFD,  // ...9....
                            /* 0FF8 */  0x40, 0xD8, 0x88, 0x5F, 0x7D, 0x3C, 0x86, 0x18,  // @.._}<..
                            /* 1000 */  0xFF, 0xFF, 0xD3, 0xF4, 0x15, 0xCC, 0x87, 0x0B,  // ........
                            /* 1008 */  0x9F, 0x23, 0x7C, 0x8C, 0xB0, 0x68, 0x0A, 0xC9,  // .#|..h..
                            /* 1010 */  0x3A, 0x4E, 0xA0, 0x84, 0x1C, 0x27, 0x28, 0x88,  // :N...'(.
                            /* 1018 */  0x01, 0x9D, 0xF2, 0x38, 0x81, 0x3E, 0xE2, 0xB0,  // ...8.>..
                            /* 1020 */  0x21, 0x3C, 0x6E, 0x38, 0xD7, 0x69, 0x82, 0x8E,  // !<n8.i..
                            /* 1028 */  0xD5, 0x23, 0xE7, 0x1A, 0x8E, 0x3A, 0x08, 0xD8,  // .#...:..
                            /* 1030 */  0x17, 0xB4, 0x83, 0x06, 0xCB, 0xE4, 0xF0, 0xBB,  // ........
                            /* 1038 */  0x3C, 0x01, 0x8F, 0xCD, 0x33, 0xB1, 0x9A, 0xBB,  // <...3...
                            /* 1040 */  0x01, 0x6A, 0x1E, 0xBE, 0x42, 0x60, 0x74, 0x1D,  // .j..B`t.
                            /* 1048 */  0x21, 0x40, 0xA6, 0xEF, 0x06, 0x01, 0x72, 0x74,  // !@....rt
                            /* 1050 */  0x7E, 0x90, 0xF3, 0xD8, 0xB9, 0x9C, 0xB1, 0x53,  // ~......S
                            /* 1058 */  0x10, 0x8F, 0xDD, 0x51, 0xC7, 0x8E, 0x96, 0x02,  // ...Q....
                            /* 1060 */  0xA2, 0xC1, 0xFA, 0x3E, 0x80, 0x25, 0x18, 0xEB,  // ...>.%..
                            /* 1068 */  0x6C, 0x02, 0x0A, 0x79, 0x27, 0x1C, 0x10, 0x0D,  // l..y'...
                            /* 1070 */  0x84, 0x1D, 0xBA, 0x3C, 0x11, 0x7E, 0x1E, 0x81,  // ...<.~..
                            /* 1078 */  0xF7, 0xFF, 0x1F, 0x9B, 0xCF, 0x23, 0xC0, 0x3B,  // .....#.;
                            /* 1080 */  0xDC, 0x79, 0x04, 0x74, 0x9A, 0xCE, 0x23, 0xA0,  // .y.t..#.
                            /* 1088 */  0x13, 0x7B, 0x1E, 0x01, 0xDD, 0x69, 0x02, 0xC6,  // .{...i..
                            /* 1090 */  0xD5, 0x80, 0x5F, 0x01, 0x70, 0x87, 0x4B, 0x9D,  // .._.p.K.
                            /* 1098 */  0x93, 0xD0, 0xA7, 0x23, 0x1F, 0x45, 0x60, 0xDD,  // ...#.E`.
                            /* 10A0 */  0x38, 0x7D, 0x40, 0x38, 0x2B, 0x13, 0x58, 0xE6,  // 8}@8+.X.
                            /* 10A8 */  0x39, 0x09, 0x75, 0x7C, 0xB3, 0xBC, 0xE3, 0x03,  // 9.u|....
                            /* 10B0 */  0x4A, 0x10, 0x1C, 0x05, 0xF1, 0xF1, 0xC1, 0x87,  // J.......
                            /* 10B8 */  0x37, 0x9F, 0x93, 0xE0, 0x8E, 0xDF, 0x87, 0x07,  // 7.......
                            /* 10C0 */  0xF8, 0x22, 0x07, 0x0C, 0x8A, 0xFF, 0xFF, 0x59,  // .".....Y
                            /* 10C8 */  0x04, 0xD6, 0x5C, 0x3D, 0x3C, 0xCC, 0xF1, 0x08,  // ..\=<...
                            /* 10D0 */  0x70, 0x12, 0xEC, 0xFC, 0x00, 0x3A, 0x4F, 0xE7,  // p....:O.
                            /* 10D8 */  0x07, 0xD0, 0x0D, 0xE8, 0xF9, 0x01, 0xFC, 0x27,  // .......'
                            /* 10E0 */  0x00, 0xAC, 0xC8, 0xD3, 0x03, 0x8A, 0xC3, 0xF2,  // ........
                            /* 10E8 */  0x0F, 0xBB, 0x90, 0xE6, 0x10, 0x28, 0xFC, 0x6B,  // .....(.k
                            /* 10F0 */  0x8B, 0x0F, 0xE4, 0xE4, 0xF0, 0x80, 0x3A, 0x7F,  // ......:.
                            /* 10F8 */  0xFB, 0x00, 0xE1, 0xC3, 0x03, 0x17, 0x06, 0x47,  // .......G
                            /* 1100 */  0x41, 0x7C, 0x78, 0x70, 0xE8, 0xC3, 0x03, 0xF4,  // A|xp....
                            /* 1108 */  0x90, 0x87, 0x07, 0x68, 0xFF, 0xFF, 0xC3, 0x03,  // ...h....
                            /* 1110 */  0xEE, 0xF0, 0x01, 0x9E, 0xD1, 0x61, 0xE7, 0x78,  // .....a.x
                            /* 1118 */  0x76, 0x6D, 0x0D, 0x0F, 0x71, 0x2A, 0xC5, 0x1F,  // vm..q*..
                            /* 1120 */  0x20, 0x00, 0x2F, 0xE7, 0x19, 0xF0, 0x1D, 0xC2,  //  ./.....
                            /* 1128 */  0x7C, 0x9E, 0x01, 0x4E, 0x67, 0x00, 0xF0, 0x89,  // |..Ng...
                            /* 1130 */  0x3B, 0x42, 0xA0, 0xA5, 0x9F, 0x67, 0x10, 0xE7,  // ;B...g..
                            /* 1138 */  0x07, 0x0C, 0xC8, 0x63, 0x1B, 0xF6, 0xD4, 0xED,  // ...c....
                            /* 1140 */  0x23, 0x04, 0x17, 0x49, 0xA1, 0x03, 0xA4, 0x8F,  // #..I....
                            /* 1148 */  0x10, 0xFC, 0xFF, 0x2F, 0x0A, 0x8E, 0x82, 0xF8,  // .../....
                            /* 1150 */  0x08, 0xE1, 0xC0, 0x47, 0x08, 0xE8, 0x67, 0x66,  // ...G..gf
                            /* 1158 */  0x1F, 0x21, 0xE0, 0x9F, 0x3F, 0xC0, 0x37, 0x5A,  // .!..?.7Z
                            /* 1160 */  0xEC, 0xFC, 0x70, 0x07, 0x1A, 0xC0, 0xA4, 0xA9,  // ..p.....
                            /* 1168 */  0x03, 0x0D, 0xD0, 0x3B, 0x01, 0xC0, 0x3F, 0x3E,  // ...;..?>
                            /* 1170 */  0xC0, 0x39, 0xEB, 0xFA, 0xFF, 0x7F, 0x7C, 0x00,  // .9....|.
                            /* 1178 */  0xFE, 0x07, 0x6E, 0xDC, 0x68, 0xC1, 0x73, 0x32,  // ..n.h.s2
                            /* 1180 */  0xE6, 0xC7, 0x07, 0xC0, 0xB1, 0xAA, 0xE3, 0x03,  // ........
                            /* 1188 */  0xD0, 0x3A, 0x01, 0xF0, 0xFF, 0xFF, 0x09, 0x00,  // .:......
                            /* 1190 */  0xBE, 0xD4, 0xB3, 0x1E, 0x3A, 0xC2, 0xF1, 0x0A,  // ....:...
                            /* 1198 */  0x12, 0xCE, 0xE3, 0xB6, 0x51, 0x7C, 0x50, 0x7D,  // ....Q|P}
                            /* 11A0 */  0xF8, 0xF3, 0xF1, 0x9A, 0x9D, 0x1F, 0xF8, 0x11,  // ........
                            /* 11A8 */  0xC2, 0x07, 0x2C, 0x9F, 0x1F, 0xB8, 0x34, 0x38,  // ..,...48
                            /* 11B0 */  0x0A, 0xE2, 0xF3, 0x83, 0x63, 0x9F, 0x1F, 0xA0,  // ....c...
                            /* 11B8 */  0x9F, 0x8C, 0x7D, 0x9A, 0x81, 0x2F, 0xF7, 0x30,  // ..}../.0
                            /* 11C0 */  0x04, 0xDA, 0xE9, 0x61, 0x60, 0x8E, 0x8F, 0xDD,  // ...a`...
                            /* 11C8 */  0x86, 0x60, 0x1C, 0x21, 0x00, 0x27, 0xF1, 0x8E,  // .`.!.'..
                            /* 11D0 */  0x10, 0xA0, 0x73, 0x75, 0x84, 0x80, 0xF6, 0xFF,  // ..su....
                            /* 11D8 */  0x3F, 0x42, 0xC0, 0x3B, 0x04, 0x00, 0xB7, 0x33,  // ?B.;...3
                            /* 11E0 */  0x0D, 0xCC, 0x23, 0x04, 0x7E, 0x88, 0x6F, 0xA3,  // ..#.~.o.
                            /* 11E8 */  0xFC, 0x4C, 0x03, 0xF8, 0x19, 0x2E, 0x9C, 0xF9,  // .L......
                            /* 11F0 */  0x61, 0xCE, 0x34, 0x80, 0x99, 0xFF, 0xFF, 0x09,  // a.4.....
                            /* 11F8 */  0x02, 0x5C, 0xA0, 0x3E, 0xD3, 0x00, 0xB7, 0x13,  // .\.>....
                            /* 1200 */  0x00, 0xFC, 0xF3, 0x1E, 0xCC, 0xE3, 0x03, 0xB0,  // ........
                            /* 1208 */  0x3F, 0xEF, 0x81, 0xFB, 0xF8, 0x00, 0xFC, 0xFF,  // ?.......
                            /* 1210 */  0xFF, 0xC7, 0x07, 0xE0, 0x78, 0x91, 0x7A, 0xDE,  // ....x.z.
                            /* 1218 */  0x03, 0x76, 0x27, 0x00, 0xF8, 0x62, 0x8F, 0x0F,  // .v'..b..
                            /* 1220 */  0xA8, 0x23, 0xAA, 0x4F, 0x58, 0x3E, 0x3E, 0xC0,  // .#.OX>>.
                            /* 1228 */  0xBA, 0x52, 0xB0, 0x89, 0x18, 0xA6, 0xE7, 0x13,  // .R......
                            /* 1230 */  0x31, 0x20, 0x67, 0xBC, 0x70, 0xE6, 0x87, 0x3D,  // 1 g.p..=
                            /* 1238 */  0x42, 0x80, 0xE5, 0xFF, 0x7F, 0x84, 0x00, 0xEE,  // B.......
                            /* 1240 */  0x87, 0x10, 0x1F, 0x21, 0xC0, 0xA5, 0xEB, 0x08,  // ...!....
                            /* 1248 */  0x01, 0x3A, 0xC1, 0x47, 0x08, 0xA0, 0x70, 0x0A,  // .:.G..p.
                            /* 1250 */  0x80, 0x7B, 0x4A, 0xC7, 0x1D, 0x23, 0x1C, 0xE0,  // .{J..#..
                            /* 1258 */  0x18, 0x81, 0x98, 0x6E, 0xCC, 0xDE, 0x51, 0x34,  // ...n..Q4
                            /* 1260 */  0x86, 0xA3, 0x3E, 0xC1, 0xA3, 0x30, 0x7C, 0x9C,  // ..>..0|.
                            /* 1268 */  0xA7, 0x0A, 0xE4, 0x31, 0x02, 0x75, 0x8A, 0xF0,  // ...1.u..
                            /* 1270 */  0xB9, 0xC6, 0xC7, 0x08, 0x2E, 0x0B, 0x8E, 0x82,  // ........
                            /* 1278 */  0xF8, 0x18, 0xE1, 0xC8, 0xC7, 0x08, 0xE8, 0x11,  // ........
                            /* 1280 */  0x8F, 0x11, 0xA0, 0x38, 0x10, 0x1C, 0x33, 0xAC,  // ...8..3.
                            /* 1288 */  0xFF, 0xFF, 0x98, 0xE1, 0x4D, 0x10, 0x03, 0x73,  // ....M..s
                            /* 1290 */  0x84, 0xB8, 0x09, 0xE3, 0x4E, 0x11, 0x80, 0x93,  // ....N...
                            /* 1298 */  0x68, 0xA7, 0x08, 0xD0, 0xF9, 0x3A, 0x45, 0x80,  // h....:E.
                            /* 12A0 */  0xEE, 0x08, 0x00, 0x9C, 0x8E, 0x10, 0x38, 0x0E,  // ......8.
                            /* 12A8 */  0xCB, 0x3F, 0x42, 0xA0, 0x70, 0x63, 0xFA, 0x88,  // .?B.pc..
                            /* 12B0 */  0x70, 0x22, 0x71, 0x0E, 0xEB, 0x34, 0x9E, 0x01,  // p"q..4..
                            /* 12B8 */  0x03, 0x3D, 0xD6, 0x00, 0x97, 0xFF, 0xFF, 0xB1,  // .=......
                            /* 12C0 */  0x06, 0x78, 0x81, 0x1C, 0xC7, 0xCB, 0x80, 0x6F,  // .x.....o
                            /* 12C8 */  0x1F, 0x6C, 0x88, 0x58, 0xA0, 0x53, 0xC4, 0x9C,  // .l.X.S..
                            /* 12D0 */  0x20, 0x00, 0x27, 0xE1, 0x4E, 0x10, 0xA0, 0x1B,  //  .'.N...
                            /* 12D8 */  0x9A, 0x4F, 0x10, 0xE0, 0x3A, 0x03, 0x00, 0xAF,  // .O..:...
                            /* 12E0 */  0xA3, 0x16, 0x6E, 0x18, 0x3E, 0xD4, 0xF8, 0x6C,  // ..n.>..l
                            /* 12E8 */  0x0C, 0xC3, 0xE7, 0x45, 0x80, 0x88, 0x3E, 0x39,  // ...E..>9
                            /* 12F0 */  0xD0, 0xFF, 0x3F, 0x84, 0xCF, 0x10, 0x3E, 0xD4,  // ..?...>.
                            /* 12F8 */  0xF8, 0x00, 0xC1, 0xE5, 0xC1, 0x51, 0x10, 0x1F,  // .....Q..
                            /* 1300 */  0x20, 0x1C, 0xFD, 0x00, 0x01, 0x3D, 0xEA, 0x01,  //  ....=..
                            /* 1308 */  0x02, 0x14, 0xE3, 0xF5, 0x68, 0xC1, 0x31, 0xAF,  // ....h.1.
                            /* 1310 */  0xDA, 0xEF, 0x1E, 0x14, 0x31, 0x9C, 0x71, 0x7C,  // ....1.q|
                            /* 1318 */  0x81, 0xC5, 0x03, 0x05, 0x8F, 0x13, 0x3B, 0x44,  // ......;D
                            /* 1320 */  0xC5, 0x88, 0x3A, 0x09, 0x84, 0x88, 0xF6, 0x82,  // ..:.....
                            /* 1328 */  0xFD, 0x0C, 0x01, 0x58, 0x39, 0x17, 0xF9, 0x0C,  // ...X9...
                            /* 1330 */  0x01, 0x2E, 0x63, 0x67, 0x08, 0xD0, 0x1D, 0x03,  // ..cg....
                            /* 1338 */  0xC0, 0xFF, 0xFF, 0x3F, 0x06, 0x80, 0xE3, 0x38,  // ...?...8
                            /* 1340 */  0x8A, 0x1B, 0x89, 0x85, 0x1F, 0x6C, 0x10, 0x67,  // .....l.g
                            /* 1348 */  0x08, 0x9F, 0xDE, 0x71, 0xC7, 0x2C, 0xC0, 0xD0,  // ...q.,..
                            /* 1350 */  0x90, 0x61, 0xDD, 0xF5, 0x3D, 0x42, 0xCC, 0x31,  // .a..=B.1
                            /* 1358 */  0x0B, 0x70, 0x38, 0x1F, 0x1F, 0x21, 0xC0, 0xF1,  // .p8..!..
                            /* 1360 */  0xFF, 0x3F, 0x66, 0x81, 0xF7, 0x08, 0x00, 0x8E,  // .?f.....
                            /* 1368 */  0xE3, 0x03, 0x9C, 0x43, 0x20, 0x3B, 0x3E, 0x00,  // ...C ;>.
                            /* 1370 */  0xEB, 0x83, 0x3A, 0x6E, 0xB0, 0xE0, 0x39, 0x57,  // ..:n..9W
                            /* 1378 */  0xF3, 0xE3, 0x03, 0xE0, 0xF5, 0xFF, 0x7F, 0x7C,  // .......|
                            /* 1380 */  0xC0, 0x0F, 0xE8, 0xF1, 0x01, 0x58, 0x1D, 0x01,  // .....X..
                            /* 1388 */  0xC0, 0x25, 0xF5, 0xF8, 0x80, 0x1A, 0x93, 0x43,  // .%.....C
                            /* 1390 */  0x1C, 0x1F, 0x10, 0xE3, 0x8D, 0xFC, 0xC4, 0x75,  // .......u
                            /* 1398 */  0x70, 0x51, 0x0E, 0xF9, 0x30, 0x0C, 0xF2, 0xCC,  // pQ..0...
                            /* 13A0 */  0xE5, 0x69, 0x9D, 0xC5, 0x93, 0x60, 0x9C, 0xC3,  // .i...`..
                            /* 13A8 */  0xF0, 0xB9, 0x0F, 0x78, 0x9E, 0x21, 0x70, 0x87,  // ...x.!p.
                            /* 13B0 */  0x34, 0xF0, 0x8C, 0x98, 0xCF, 0x10, 0x73, 0x6A,  // 4.....sj
                            /* 13B8 */  0xF4, 0x10, 0x71, 0x03, 0xF7, 0x14, 0x31, 0x87,  // ..q...1.
                            /* 13C0 */  0x08, 0xE0, 0xF8, 0xFF, 0x3F, 0xF7, 0x01, 0x3F,  // ....?..?
                            /* 13C8 */  0x69, 0xE7, 0x3E, 0xA0, 0x75, 0x06, 0x00, 0xDF,  // i.>.u...
                            /* 13D0 */  0xD9, 0x18, 0xCE, 0x08, 0xD8, 0x44, 0x9E, 0x69,  // .....D.i
                            /* 13D8 */  0x7C, 0x88, 0x80, 0x7B, 0xAE, 0x01, 0xFC, 0x4C,  // |..{...L
                            /* 13E0 */  0x90, 0x9D, 0x21, 0xC0, 0xFA, 0xFF, 0x3F, 0xD7,  // ..!...?.
                            /* 13E8 */  0x00, 0xAE, 0xAC, 0x9D, 0x6B, 0x80, 0xDE, 0x11,  // ....k...
                            /* 13F0 */  0x00, 0x1C, 0x29, 0x96, 0xA6, 0x23, 0x04, 0x97,  // ..)..#..
                            /* 13F8 */  0x04, 0xA1, 0x54, 0xAF, 0x05, 0x9D, 0x44, 0x3D,  // ..T...D=
                            /* 1400 */  0xCE, 0xE3, 0x30, 0xF4, 0x93, 0xA8, 0x51, 0x22,  // ..0...Q"
                            /* 1408 */  0x1F, 0x41, 0xAD, 0x97, 0x05, 0xE1, 0xBF, 0xE4,  // .A......
                            /* 1410 */  0x3C, 0xAC, 0xB3, 0x0C, 0xA0, 0x3A, 0x3A, 0xF8,  // <....::.
                            /* 1418 */  0xE4, 0x60, 0xF5, 0x14, 0xD2, 0x75, 0x82, 0x40,  // .`...u.@
                            /* 1420 */  0x29, 0x39, 0x41, 0x50, 0x10, 0x03, 0x3A, 0xE6,  // )9AP..:.
                            /* 1428 */  0x09, 0x02, 0x7D, 0x70, 0x60, 0xB3, 0x2C, 0x1E,  // ..}p`.,.
                            /* 1430 */  0x44, 0xC1, 0x0E, 0x10, 0x74, 0x90, 0x1E, 0x32,  // D...t..2
                            /* 1438 */  0xD7, 0x70, 0x80, 0x40, 0xC0, 0x16, 0x39, 0x5A,  // .p.@..9Z
                            /* 1440 */  0xD0, 0x0C, 0xEC, 0xE8, 0x3D, 0xB1, 0xFF, 0xFF,  // ....=...
                            /* 1448 */  0x93, 0xBE, 0x6F, 0x02, 0x06, 0x8B, 0xF9, 0xD0,  // ..o.....
                            /* 1450 */  0x68, 0xAC, 0x50, 0x0F, 0x21, 0x09, 0xAA, 0x39,  // h.P.!..9
                            /* 1458 */  0x15, 0xA0, 0x06, 0xE2, 0xC3, 0x03, 0x46, 0xD7,  // ......F.
                            /* 1460 */  0xDD, 0x01, 0x64, 0xFA, 0xCE, 0x0E, 0x20, 0x47,  // ..d... G
                            /* 1468 */  0xE7, 0x37, 0x48, 0xC0, 0xC3, 0x4D, 0x81, 0xC1,  // .7H..M..
                            /* 1470 */  0x3C, 0x37, 0xF8, 0x78, 0x65, 0x94, 0x90, 0x31,  // <7.xe..1
                            /* 1478 */  0x9E, 0xB0, 0x5E, 0x15, 0xF8, 0x05, 0x00, 0x77,  // ..^....w
                            /* 1480 */  0x19, 0x81, 0x77, 0x9F, 0x22, 0x97, 0x11, 0xA0,  // ..w."...
                            /* 1488 */  0x7D, 0x8D, 0xF0, 0x65, 0x04, 0xFB, 0xFF, 0xBF,  // }..e....
                            /* 1490 */  0x8C, 0xC0, 0xD6, 0x76, 0x19, 0x01, 0x1D, 0xD6,  // ...v....
                            /* 1498 */  0x1B, 0x24, 0xD8, 0xE6, 0xE2, 0xD9, 0xE3, 0x2E,  // .$......
                            /* 14A0 */  0x01, 0x86, 0x89, 0xF1, 0x1E, 0xE0, 0x3B, 0x08,  // ......;.
                            /* 14A8 */  0xE6, 0x42, 0xE2, 0xA9, 0x3E, 0x0A, 0xE0, 0x08,  // .B..>...
                            /* 14B0 */  0x7C, 0x8F, 0xC4, 0x71, 0xF8, 0x56, 0x8B, 0x99,  // |..q.V..
                            /* 14B8 */  0xEE, 0x59, 0x18, 0xFD, 0xC0, 0x02, 0x7B, 0x96,  // .Y....{.
                            /* 14C0 */  0x07, 0x69, 0x68, 0x76, 0x67, 0xF3, 0x15, 0x89,  // .ihvg...
                            /* 14C8 */  0x4B, 0xA4, 0x90, 0xC0, 0x63, 0x04, 0x4A, 0x12,  // K...c.J.
                            /* 14D0 */  0x1C, 0x05, 0xF1, 0x31, 0xC2, 0x71, 0x8F, 0x11,  // ...1.q..
                            /* 14D8 */  0xD0, 0xE3, 0x1D, 0x23, 0x40, 0x71, 0x2F, 0x78,  // ...#@q/x
                            /* 14E0 */  0x8C, 0x00, 0xD3, 0xD8, 0x3C, 0xC4, 0xE3, 0xF3,  // ....<...
                            /* 14E8 */  0x68, 0x3D, 0x3E, 0x06, 0x74, 0x7E, 0x98, 0x0B,  // h=>.t~..
                            /* 14F0 */  0x12, 0xB0, 0xFA, 0xFF, 0x5F, 0x90, 0x80, 0xAD,  // ...._...
                            /* 14F8 */  0xB7, 0x5B, 0x2D, 0xD0, 0x3B, 0x02, 0x80, 0xE3,  // .[-.;...
                            /* 1500 */  0xF8, 0x80, 0x3B, 0x05, 0xF8, 0x9E, 0xE6, 0x01,  // ..;.....
                            /* 1508 */  0x30, 0x85, 0x63, 0xD2, 0x55, 0xE2, 0x44, 0xDF,  // 0.c.U.D.
                            /* 1510 */  0x25, 0x0C, 0x8C, 0xB9, 0xF3, 0xF3, 0xDB, 0x23,  // %......#
                            /* 1518 */  0x3F, 0xCE, 0xF8, 0xF4, 0xC0, 0x85, 0xC0, 0x51,  // ?......Q
                            /* 1520 */  0x10, 0x9F, 0x1E, 0x7C, 0x77, 0xF4, 0xE9, 0x01,  // ...|w...
                            /* 1528 */  0x6E, 0xA8, 0xD3, 0x03, 0x28, 0xC4, 0x5D, 0xD2,  // n...(.].
                            /* 1530 */  0x41, 0x74, 0xEA, 0xF0, 0xC1, 0x01, 0xFC, 0xFF,  // At......
                            /* 1538 */  0xFF, 0xC3, 0x0C, 0x60, 0x63, 0xBC, 0x3E, 0xCC,  // ...`c.>.
                            /* 1540 */  0x00, 0xC7, 0xF1, 0x33, 0xD4, 0xC7, 0xB4, 0x27,  // ...3...'
                            /* 1548 */  0x7D, 0x03, 0xC7, 0x7A, 0xA2, 0xC5, 0xE2, 0x3C,  // }..z...<
                            /* 1550 */  0x84, 0x19, 0xE3, 0xA5, 0x81, 0x13, 0xF8, 0x56,  // .......V
                            /* 1558 */  0x8B, 0x97, 0x7C, 0x81, 0x44, 0x40, 0x9E, 0x15,  // ..|.D@..
                            /* 1560 */  0x9B, 0xD3, 0xD3, 0xBF, 0x6F, 0x38, 0x67, 0xC6,  // ....o8g.
                            /* 1568 */  0xE0, 0x4E, 0xA1, 0xE2, 0xE3, 0x04, 0xEE, 0x08,  // .N......
                            /* 1570 */  0x81, 0x3A, 0x41, 0x58, 0xD4, 0x11, 0x02, 0x25,  // .:AX...%
                            /* 1578 */  0x03, 0x8E, 0x82, 0xF8, 0x08, 0xE1, 0xD3, 0x95,  // ........
                            /* 1580 */  0x8F, 0x10, 0x70, 0x23, 0xDD, 0x20, 0x41, 0x71,  // ..p#. Aq
                            /* 1588 */  0x1D, 0xF5, 0xB8, 0xC1, 0xF0, 0xFF, 0x27, 0x78,  // ......'x
                            /* 1590 */  0x0B, 0x78, 0xF0, 0xC1, 0x9C, 0x20, 0x00, 0x27,  // .x... .'
                            /* 1598 */  0x47, 0x22, 0x9F, 0x20, 0xC0, 0x65, 0xEE, 0x04,  // G". .e..
                            /* 15A0 */  0x01, 0x3A, 0xF9, 0x37, 0x47, 0xD0, 0x9D, 0x20,  // .:.7G.. 
                            /* 15A8 */  0x38, 0xE2, 0x83, 0x42, 0xC8, 0x27, 0x19, 0x0F,  // 8..B.'..
                            /* 15B0 */  0xC2, 0x40, 0x8F, 0x00, 0xFC, 0xFC, 0xC0, 0x6F,  // .@.....o
                            /* 15B8 */  0x0D, 0xB0, 0x2E, 0x27, 0xB8, 0x53, 0x04, 0xAC,  // ...'.S..
                            /* 15C0 */  0xB3, 0x05, 0x3B, 0x45, 0x00, 0xCF, 0xFF, 0xFF,  // ..;E....
                            /* 15C8 */  0x29, 0x02, 0x0C, 0xE7, 0x1A, 0xDC, 0x29, 0x02,  // ).....).
                            /* 15D0 */  0xF0, 0xAE, 0xEE, 0x14, 0x01, 0xB4, 0x8E, 0x35,  // .......5
                            /* 15D8 */  0xF8, 0x53, 0x04, 0x70, 0x10, 0x7B, 0x8A, 0x40,  // .S.p.{.@
                            /* 15E0 */  0xC9, 0x83, 0x90, 0xF8, 0x53, 0x04, 0xE2, 0xDC,  // ....S...
                            /* 15E8 */  0xFA, 0xAA, 0x70, 0x1C, 0x41, 0xDF, 0x76, 0x82,  // ..p.A.v.
                            /* 15F0 */  0x18, 0xE9, 0x1C, 0xFC, 0xFF, 0xBF, 0x0B, 0x46,  // .......F
                            /* 15F8 */  0x7F, 0x8B, 0xF0, 0xAC, 0x22, 0xBC, 0x0B, 0x1A,  // ...."...
                            /* 1600 */  0xF3, 0xF1, 0xF6, 0xF9, 0xCF, 0x73, 0x3B, 0x32,  // .....s;2
                            /* 1608 */  0x7E, 0xE0, 0x02, 0xBC, 0xDC, 0x19, 0x0F, 0x0D,  // ~.......
                            /* 1610 */  0x7B, 0xE0, 0x02, 0x1C, 0xBA, 0x3B, 0x70, 0x01,  // {....;p.
                            /* 1618 */  0xBD, 0xB1, 0xBC, 0x30, 0x60, 0x91, 0xFE, 0xFF,  // ...0`...
                            /* 1620 */  0x8F, 0x11, 0x3E, 0x31, 0xF8, 0xC0, 0xE5, 0x1B,  // ..>1....
                            /* 1628 */  0x03, 0xEE, 0x2E, 0xEA, 0x83, 0x00, 0xF6, 0x30,  // .......0
                            /* 1630 */  0x8A, 0x17, 0x7C, 0x8C, 0x40, 0xCC, 0x3A, 0x76,  // ..|.@.:v
                            /* 1638 */  0xF8, 0x1A, 0x27, 0x41, 0x8C, 0x1F, 0x4C, 0x09,  // ..'A..L.
                            /* 1640 */  0xF0, 0x11, 0x35, 0x7F, 0x04, 0xF0, 0xF9, 0x01,  // ..5.....
                            /* 1648 */  0x25, 0x8D, 0x42, 0x07, 0x08, 0x9F, 0x1F, 0xB8,  // %.B.....
                            /* 1650 */  0x14, 0x38, 0x0A, 0xE2, 0xDB, 0x36, 0x9C, 0xF3,  // .8...6..
                            /* 1658 */  0x03, 0x3E, 0xD6, 0xF9, 0x01, 0x14, 0x87, 0x0D,  // .>......
                            /* 1660 */  0x0F, 0x1A, 0x1C, 0x93, 0x3D, 0x36, 0x18, 0x07,  // ....=6..
                            /* 1668 */  0x08, 0xC0, 0xC9, 0xE9, 0xC8, 0x07, 0x08, 0x70,  // .......p
                            /* 1670 */  0x0D, 0xD8, 0x07, 0x08, 0x70, 0x81, 0xFC, 0xFF,  // ....p...
                            /* 1678 */  0x1F, 0x20, 0xC0, 0x76, 0x55, 0x60, 0x47, 0x1B,  // . .vU`G.
                            /* 1680 */  0x5F, 0x8B, 0xF9, 0xB4, 0xDF, 0x6C, 0x7C, 0x31,  // _....l|1
                            /* 1688 */  0x78, 0xAE, 0x7F, 0x43, 0xF6, 0x2D, 0x00, 0x06,  // x..C.-..
                            /* 1690 */  0x41, 0xB9, 0xC7, 0x07, 0xD4, 0x11, 0xC0, 0x87,  // A.......
                            /* 1698 */  0x1A, 0xCC, 0x98, 0xDF, 0x4D, 0x0D, 0x1D, 0xF6,  // ....M...
                            /* 16A0 */  0x8D, 0xC2, 0x77, 0x9C, 0x73, 0x0E, 0xF3, 0xC0,  // ..w.s...
                            /* 16A8 */  0x6C, 0x9C, 0x73, 0xF3, 0x58, 0x5E, 0x13, 0x3C,  // l.s.X^.<
                            /* 16B0 */  0x38, 0x1F, 0xD8, 0xD9, 0x11, 0x82, 0x1F, 0x6A,  // 8......j
                            /* 16B8 */  0x7C, 0xDC, 0xF2, 0x11, 0x82, 0xCB, 0x81, 0xA3,  // |.......
                            /* 16C0 */  0x20, 0x3E, 0x42, 0x38, 0xEA, 0x11, 0x02, 0xFA,  //  >B8....
                            /* 16C8 */  0xE9, 0xD6, 0x47, 0x08, 0xF8, 0xD7, 0x05, 0x0F,  // ..G.....
                            /* 16D0 */  0x1B, 0x1C, 0x30, 0x27, 0x87, 0x1B, 0x36, 0x1B,  // ..0'..6.
                            /* 16D8 */  0x1D, 0x3F, 0x44, 0x00, 0x4E, 0x82, 0x1E, 0x22,  // .?D.N.."
                            /* 16E0 */  0x20, 0xFC, 0xFF, 0x0F, 0x11, 0xB0, 0xED, 0x1D,  //  .......
                            /* 16E8 */  0x22, 0x40, 0x07, 0xF6, 0x10, 0x01, 0xB6, 0x91,  // "@......
                            /* 16F0 */  0x05, 0x7A, 0x2C, 0xF0, 0xC5, 0xD8, 0xE3, 0xC7,  // .z,.....
                            /* 16F8 */  0xDC, 0xD8, 0xF9, 0xC1, 0x01, 0x8F, 0xF4, 0xE2,  // ........
                            /* 1700 */  0x80, 0x3D, 0x36, 0xE8, 0x8C, 0x8C, 0x16, 0x7D,  // .=6....}
                            /* 1708 */  0x62, 0xD0, 0xC0, 0x4E, 0xE6, 0x84, 0x4F, 0xFB,  // b..N..O.
                            /* 1710 */  0xA1, 0xE6, 0x39, 0xD5, 0x18, 0xAF, 0x16, 0x3E,  // ..9....>
                            /* 1718 */  0xAC, 0x9A, 0xC0, 0x32, 0x8F, 0x10, 0xA8, 0x73,  // ...2...s
                            /* 1720 */  0x8D, 0xCF, 0x10, 0x3E, 0x42, 0x70, 0x41, 0x70,  // ...>BpAp
                            /* 1728 */  0x14, 0xC4, 0x47, 0x08, 0x87, 0x3D, 0x42, 0x40,  // ..G..=B@
                            /* 1730 */  0x0F, 0x77, 0x84, 0x00, 0xC5, 0x65, 0xEC, 0xA0,  // .w...e..
                            /* 1738 */  0xC1, 0x32, 0x38, 0x4F, 0xD8, 0x37, 0x36, 0x63,  // .28O.76c
                            /* 1740 */  0x74, 0x7D, 0xE1, 0x47, 0x4C, 0xE1, 0x50, 0x9F,  // t}.GL.P.
                            /* 1748 */  0x21, 0x80, 0xDD, 0xFF, 0xFF, 0x9C, 0x05, 0x4C,  // !......L
                            /* 1750 */  0xF5, 0x9D, 0xB3, 0x80, 0xD6, 0xF0, 0xCE, 0x1E,  // ........
                            /* 1758 */  0x73, 0x04, 0xE4, 0xB3, 0x3B, 0x83, 0x37, 0x83,  // s...;.7.
                            /* 1760 */  0x98, 0x3E, 0x61, 0x19, 0xCC, 0x67, 0x9A, 0x38,  // .>a..g.8
                            /* 1768 */  0xD1, 0x7C, 0x7E, 0xF0, 0x45, 0xC2, 0xA7, 0x2D,  // .|~.E..-
                            /* 1770 */  0xA3, 0xF9, 0xDA, 0xC0, 0xE2, 0x3D, 0x11, 0x7C,  // .....=.|
                            /* 1778 */  0xAE, 0xA1, 0x81, 0x60, 0x50, 0x1A, 0x0E, 0x0A,  // ...`P...
                            /* 1780 */  0x50, 0x06, 0x7A, 0x9C, 0x87, 0x77, 0x64, 0x4C,  // P.z..wdL
                            /* 1788 */  0x12, 0x1C, 0xEA, 0x0C, 0xE0, 0x91, 0x1D, 0xCA,  // ........
                            /* 1790 */  0x51, 0x9D, 0xCE, 0x09, 0x7B, 0x52, 0x4F, 0x9F,  // Q...{RO.
                            /* 1798 */  0x30, 0xA4, 0x40, 0xE8, 0x84, 0xC1, 0xEE, 0x61,  // 0.@....a
                            /* 17A0 */  0x11, 0x5F, 0x0E, 0x0D, 0x93, 0xC0, 0xA3, 0x67,  // ._.....g
                            /* 17A8 */  0x68, 0x1C, 0x1A, 0x3B, 0x0C, 0x5F, 0x0B, 0x82,  // h..;._..
                            /* 17B0 */  0x1D, 0xC4, 0xA3, 0x87, 0x4F, 0x8A, 0x6C, 0x42,  // ....O.lB
                            /* 17B8 */  0xCF, 0x04, 0xE5, 0x5E, 0x17, 0x74, 0x1B, 0x8A,  // ...^.t..
                            /* 17C0 */  0x1A, 0xE3, 0x65, 0xD7, 0x47, 0x21, 0x0D, 0x1E,  // ..e.G!..
                            /* 17C8 */  0x34, 0x67, 0x84, 0x77, 0x01, 0xCF, 0xD9, 0x68,  // 4g.w...h
                            /* 17D0 */  0x27, 0xF1, 0xFF, 0x7F, 0xD8, 0xF6, 0x15, 0x89,  // '.......
                            /* 17D8 */  0xDD, 0x27, 0x0C, 0xF4, 0x28, 0x62, 0x1C, 0x43,  // .'..(b.C
                            /* 17E0 */  0x3C, 0xB0, 0xF9, 0x4E, 0xC2, 0xCE, 0x04, 0xD8,  // <..N....
                            /* 17E8 */  0x23, 0x87, 0x21, 0x63, 0x1F, 0xA0, 0x09, 0xEC,  // #.!c....
                            /* 17F0 */  0xFE, 0xE6, 0xAD, 0x9B, 0xC8, 0xB9, 0x9C, 0xD2,  // ........
                            /* 17F8 */  0x83, 0x44, 0x88, 0xF7, 0xC3, 0xC6, 0x04, 0xD8,  // .D......
                            /* 1800 */  0x3A, 0x10, 0xE8, 0xF0, 0x10, 0xE1, 0x65, 0x22,  // :.....e"
                            /* 1808 */  0x4A, 0xA4, 0xD6, 0x26, 0x26, 0x28, 0x86, 0x11,  // J..&&(..
                            /* 1810 */  0xA5, 0x37, 0x14, 0x02, 0x1C, 0xBA, 0x36, 0x58,  // .7....6X
                            /* 1818 */  0x41, 0x1B, 0xF0, 0x85, 0x20, 0x44, 0xA4, 0x38,  // A... D.8
                            /* 1820 */  0xED, 0x0F, 0x82, 0x88, 0x7A, 0x43, 0xE8, 0x38,  // ....zC.8
                            /* 1828 */  0xE0, 0x43, 0xAD, 0x47, 0xC3, 0x4F, 0x16, 0x3E,  // .C.G.O.>
                            /* 1830 */  0x12, 0xF8, 0x72, 0xE9, 0xA3, 0x39, 0x3B, 0x48,  // ..r..9;H
                            /* 1838 */  0x79, 0x60, 0x8F, 0x19, 0xCF, 0x02, 0x1E, 0x35,  // y`.....5
                            /* 1840 */  0x3B, 0x7A, 0xF8, 0x48, 0xE1, 0xC3, 0x01, 0xFE,  // ;z.H....
                            /* 1848 */  0xD8, 0x10, 0xF0, 0x95, 0xCA, 0x67, 0x02, 0x8F,  // .....g..
                            /* 1850 */  0xD1, 0x70, 0x7C, 0x88, 0x9E, 0xAE, 0x27, 0x70,  // .p|...'p
                            /* 1858 */  0x88, 0x0C, 0xD0, 0x67, 0x10, 0xF8, 0xE3, 0xF1,  // ...g....
                            /* 1860 */  0x21, 0xC0, 0x33, 0x37, 0x81, 0x8F, 0xAA, 0x1E,  // !.37....
                            /* 1868 */  0x04, 0x1F, 0x99, 0xA1, 0x3D, 0xCF, 0xD3, 0x7A,  // ....=..z
                            /* 1870 */  0x17, 0xF0, 0x01, 0xC0, 0x87, 0x52, 0x02, 0xA1,  // .....R..
                            /* 1878 */  0x43, 0x8C, 0xC7, 0x03, 0xFE, 0xE3, 0xF2, 0x03,  // C.......
                            /* 1880 */  0x42, 0x84, 0x17, 0x06, 0xCF, 0xD7, 0x27, 0x05,  // B.....'.
                            /* 1888 */  0x1D, 0x2C, 0x74, 0xB0, 0xC1, 0x9D, 0x29, 0x7C,  // .,t...)|
                            /* 1890 */  0x4E, 0xE0, 0xA7, 0x0E, 0x9F, 0x11, 0x38, 0xFC,  // N.....8.
                            /* 1898 */  0x2B, 0x02, 0x3F, 0x92, 0xB0, 0xC0, 0xC7, 0x1B,  // +.?.....
                            /* 18A0 */  0x2A, 0x6A, 0xF0, 0xE4, 0xFF, 0x7F, 0xAC, 0xC0,  // *j......
                            /* 18A8 */  0x9C, 0x28, 0xD8, 0x45, 0x87, 0xC3, 0xB2, 0x43,  // .(.E...C
                            /* 18B0 */  0x0F, 0x19, 0x1E, 0x74, 0xC1, 0xC7, 0x09, 0xA0,  // ...t....
                            /* 18B8 */  0x75, 0x90, 0xE0, 0xC3, 0x86, 0x7F, 0xA5, 0x30,  // u......0
                            /* 18C0 */  0xB0, 0x0F, 0x3A, 0xFC, 0xC8, 0x81, 0x3B, 0xE8,  // ..:...;.
                            /* 18C8 */  0xC0, 0x43, 0x89, 0xFE, 0xFC, 0xF0, 0xBC, 0xF2,  // .C......
                            /* 18D0 */  0xAC, 0x1B, 0x22, 0xDA, 0x3B, 0xD5, 0x9B, 0x0E,  // ..".;...
                            /* 18D8 */  0x53, 0x8B, 0x23, 0xAC, 0x20, 0x91, 0x1E, 0x76,  // S.#. ..v
                            /* 18E0 */  0x8C, 0x74, 0x20, 0x51, 0x82, 0x84, 0x0C, 0x6B,  // .t Q...k
                            /* 18E8 */  0xA4, 0x04, 0x3E, 0x24, 0xE1, 0xC7, 0xC1, 0x01,  // ..>$....
                            /* 18F0 */  0x4F, 0x80, 0x8D, 0xE3, 0xED, 0xC7, 0x53, 0x39,  // O.....S9
                            /* 18F8 */  0x2C, 0x9F, 0x51, 0x7C, 0xCF, 0xF2, 0xA0, 0x1E,  // ,.Q|....
                            /* 1900 */  0x55, 0x7C, 0x98, 0x39, 0xD2, 0x77, 0x24, 0x7E,  // U|.9.w$~
                            /* 1908 */  0x90, 0xC3, 0x1E, 0x2E, 0x3C, 0x04, 0x3E, 0x80,  // ....<.>.
                            /* 1910 */  0x77, 0xA3, 0xB3, 0xF4, 0x59, 0xE8, 0xDC, 0x70,  // w...Y..p
                            /* 1918 */  0xA7, 0x19, 0x7E, 0x45, 0xC0, 0x9C, 0xB1, 0x91,  // ..~E....
                            /* 1920 */  0x87, 0x1B, 0x1A, 0xE0, 0x6D, 0xA0, 0x80, 0x30,  // ....m..0
                            /* 1928 */  0xA8, 0xF3, 0x0D, 0x58, 0xFE, 0xFF, 0xE7, 0x1B,  // ...X....
                            /* 1930 */  0xC0, 0xC2, 0x91, 0x12, 0x4C, 0x07, 0x4A, 0x76,  // ....L.Jv
                            /* 1938 */  0xC2, 0x01, 0xCE, 0x68, 0x4F, 0x38, 0x60, 0x12,  // ...hO8`.
                            /* 1940 */  0x78, 0xC2, 0x01, 0x44, 0xFD, 0xFF, 0x4F, 0x38,  // x..D..O8
                            /* 1948 */  0xC0, 0x5E, 0xD4, 0x09, 0x07, 0x7D, 0x70, 0xF3,  // .^...}p.
                            /* 1950 */  0x49, 0x81, 0x5D, 0x71, 0xC0, 0x41, 0x30, 0xF4,  // I.]q.A0.
                            /* 1958 */  0x19, 0x07, 0xE8, 0x8C, 0xE5, 0x91, 0x02, 0xD8,  // ........
                            /* 1960 */  0x9D, 0x72, 0xC0, 0x7B, 0xF0, 0xC0, 0x9D, 0x72,  // .r.{...r
                            /* 1968 */  0xC0, 0x8B, 0x74, 0x1C, 0xEF, 0x31, 0xCF, 0x39,  // ..t..1.9
                            /* 1970 */  0xF8, 0xFF, 0xFF, 0x39, 0x07, 0xB0, 0x13, 0xE5,  // ...9....
                            /* 1978 */  0x90, 0x43, 0xA5, 0xBF, 0x0F, 0x24, 0x1E, 0x06,  // .C...$..
                            /* 1980 */  0x75, 0xCE, 0x01, 0x5C, 0x9D, 0x3F, 0x7C, 0x8A,  // u..\.?|.
                            /* 1988 */  0x00, 0xC7, 0x95, 0xD2, 0x67, 0x87, 0x17, 0x8F,  // ....g...
                            /* 1990 */  0xF7, 0x57, 0x23, 0x84, 0x32, 0xCE, 0x83, 0xB4,  // .W#.2...
                            /* 1998 */  0x71, 0x8D, 0xF0, 0xD8, 0xE9, 0x2B, 0x04, 0xEE,  // q....+..
                            /* 19A0 */  0x90, 0x03, 0x7F, 0x26, 0x07, 0xF4, 0x5E, 0xF3,  // ...&..^.
                            /* 19A8 */  0xFE, 0x70, 0x44, 0x41, 0x7C, 0xB5, 0x79, 0xB9,  // .pDA|.y.
                            /* 19B0 */  0x79, 0xBD, 0x89, 0xF3, 0xA2, 0xE3, 0x43, 0x0E,  // y.....C.
                            /* 19B8 */  0x3B, 0xE2, 0x18, 0x25, 0xDE, 0xFF, 0x3F, 0x82,  // ;..%..?.
                            /* 19C0 */  0xB1, 0x42, 0xF9, 0x7C, 0xF3, 0x2E, 0x11, 0xEB,  // .B.|....
                            /* 19C8 */  0x69, 0xC7, 0x28, 0xE1, 0x62, 0x04, 0x0B, 0x12,  // i.(.b...
                            /* 19D0 */  0xF4, 0x21, 0x87, 0x49, 0x38, 0xE4, 0x00, 0x34,  // .!.I8..4
                            /* 19D8 */  0x09, 0x7F, 0x7A, 0x46, 0x0F, 0xD7, 0xC7, 0x04,  // ..zF....
                            /* 19E0 */  0x1F, 0x08, 0xDE, 0x12, 0x30, 0xA7, 0x91, 0x87,  // ....0...
                            /* 19E8 */  0x07, 0x9F, 0xFC, 0x4D, 0x30, 0xE4, 0x01, 0x07,  // ...M0...
                            /* 19F0 */  0xE8, 0x1C, 0xA6, 0xC1, 0x73, 0x96, 0xC0, 0xFC,  // ....s...
                            /* 19F8 */  0xFF, 0xCF, 0x12, 0x98, 0x73, 0x04, 0xEE, 0x60,  // ....s..`
                            /* 1A00 */  0x03, 0xBE, 0x93, 0x06, 0xEE, 0x60, 0x03, 0xDE,  // .....`..
                            /* 1A08 */  0x51, 0xF9, 0x54, 0x03, 0x38, 0x8A, 0x76, 0xA4,  // Q.T.8.v.
                            /* 1A10 */  0x41, 0x85, 0x39, 0xD5, 0x00, 0x02, 0xFF, 0xFF,  // A.9.....
                            /* 1A18 */  0x47, 0x07, 0xD8, 0x97, 0xBC, 0xB7, 0x14, 0x76,  // G......v
                            /* 1A20 */  0xD3, 0x60, 0x27, 0x11, 0x76, 0x02, 0x67, 0x28,  // .`'.v.g(
                            /* 1A28 */  0x21, 0x22, 0xBF, 0x69, 0x3D, 0xD5, 0x80, 0xEB,  // !".i=...
                            /* 1A30 */  0xC6, 0xF1, 0x26, 0xF0, 0xFC, 0xF7, 0xF2, 0xF0,  // ..&.....
                            /* 1A38 */  0x28, 0x70, 0x4A, 0xAF, 0x0F, 0xCF, 0x31, 0x6F,  // (pJ...1o
                            /* 1A40 */  0x33, 0xCF, 0x32, 0x86, 0x7A, 0x17, 0xF4, 0x0D,  // 3.2.z...
                            /* 1A48 */  0xD0, 0x70, 0xA1, 0x8C, 0x19, 0x2E, 0xD8, 0xBB,  // .p......
                            /* 1A50 */  0xA0, 0x67, 0x15, 0x2F, 0xCE, 0x3B, 0x8D, 0xD1,  // .g./.;..
                            /* 1A58 */  0x02, 0xC6, 0x0E, 0x13, 0x22, 0xE2, 0x09, 0x3E,  // ...."..>
                            /* 1A60 */  0xD5, 0x30, 0x49, 0xA7, 0x1A, 0x80, 0x26, 0x22,  // .0I...&"
                            /* 1A68 */  0x4E, 0x82, 0x68, 0x68, 0x5F, 0x33, 0x30, 0xFF,  // N.hh_30.
                            /* 1A70 */  0xFF, 0x73, 0x0C, 0x8B, 0x7C, 0xA4, 0x01, 0x3A,  // .s..|..:
                            /* 1A78 */  0x87, 0x54, 0xF0, 0x1C, 0x24, 0x60, 0x01, 0x9D,  // .T..$`..
                            /* 1A80 */  0x1F, 0x3F, 0x4B, 0xC0, 0x3D, 0xD9, 0x80, 0xEF,  // .?K.=...
                            /* 1A88 */  0x9C, 0x88, 0x3B, 0xD9, 0x80, 0x77, 0x70, 0x91,  // ..;..wp.
                            /* 1A90 */  0xA2, 0x84, 0x36, 0x52, 0x84, 0xB8, 0x27, 0x13,  // ..6R..'.
                            /* 1A98 */  0x27, 0xE6, 0xDB, 0x0D, 0xF6, 0x74, 0x03, 0x38,  // '....t.8
                            /* 1AA0 */  0x89, 0x7A, 0x6C, 0x46, 0x85, 0x3B, 0x39, 0x23,  // .zlF.;9#
                            /* 1AA8 */  0xFF, 0xFF, 0x27, 0x67, 0xC0, 0xA8, 0xCB, 0x23,  // ..'g...#
                            /* 1AB0 */  0x0A, 0x39, 0x3B, 0x1C, 0xC3, 0x51, 0xF8, 0x96,  // .9;..Q..
                            /* 1AB8 */  0x12, 0xE5, 0x95, 0x85, 0xDD, 0x4B, 0x8D, 0xF2,  // .....K..
                            /* 1AC0 */  0x5C, 0x0A, 0x93, 0xC0, 0x07, 0x1C, 0xD8, 0xA7,  // \.......
                            /* 1AC8 */  0x3F, 0x1F, 0x97, 0x7D, 0x1C, 0x78, 0x09, 0x3C,  // ?..}.x.<
                            /* 1AD0 */  0x9F, 0xB3, 0x7A, 0xC0, 0x31, 0xD0, 0x93, 0x8D,  // ..z.1...
                            /* 1AD8 */  0x4F, 0x81, 0xEC, 0x2C, 0xE8, 0x6B, 0xB3, 0x0F,  // O..,.k..
                            /* 1AE0 */  0x13, 0xC1, 0x9E, 0x9C, 0x0D, 0x1C, 0x35, 0xE8,  // ......5.
                            /* 1AE8 */  0x03, 0x45, 0x8C, 0x37, 0x67, 0x63, 0x46, 0x88,  // .E.7gcF.
                            /* 1AF0 */  0x61, 0xAC, 0x07, 0x1C, 0x26, 0xEE, 0x80, 0x03,  // a...&...
                            /* 1AF8 */  0x48, 0xF8, 0xFF, 0x1F, 0x70, 0x00, 0x43, 0x52,  // H...p.CR
                            /* 1B00 */  0x0E, 0x38, 0xE8, 0xE1, 0xFA, 0xA4, 0xC0, 0x6E,  // .8.....n
                            /* 1B08 */  0x0F, 0x6C, 0xB8, 0xCF, 0x0E, 0x0F, 0x0A, 0x6C,  // .l.....l
                            /* 1B10 */  0x48, 0xEC, 0x8C, 0x03, 0xBC, 0x8F, 0x13, 0xE0,  // H.......
                            /* 1B18 */  0x3E, 0xE3, 0x80, 0x6F, 0x38, 0xCF, 0x38, 0xC0,  // >..o8.8.
                            /* 1B20 */  0x60, 0x70, 0x31, 0x0E, 0xE4, 0xFF, 0x1F, 0xF3,  // `p1.....
                            /* 1B28 */  0x71, 0xD0, 0x30, 0x8F, 0x31, 0x1E, 0x4C, 0xC8,  // q.0.1.L.
                            /* 1B30 */  0x10, 0xEF, 0x31, 0x51, 0x1E, 0x09, 0x01, 0x47,  // ..1Q...G
                            /* 1B38 */  0xA1, 0x2C, 0x80, 0x30, 0xF9, 0x2F, 0x04, 0xC5,  // .,.0./..
                            /* 1B40 */  0x80, 0x41, 0x9D, 0x72, 0x00, 0x57, 0x82, 0xCF,  // .A.r.W..
                            /* 1B48 */  0x11, 0xA0, 0x41, 0x3F, 0x96, 0x53, 0x88, 0x15,  // ..A?.S..
                            /* 1B50 */  0xE9, 0xF5, 0xE1, 0xE9, 0x8B, 0x81, 0x44, 0x0A,  // ......D.
                            /* 1B58 */  0x77, 0x4E, 0xBE, 0x46, 0xC0, 0x3D, 0x39, 0xC3,  // wN.F.=9.
                            /* 1B60 */  0x3F, 0x44, 0xFC, 0xFF, 0x1F, 0x22, 0x8E, 0x29,  // ?D...".)
                            /* 1B68 */  0xC4, 0x83, 0xCD, 0x41, 0xBD, 0x09, 0xBC, 0xDC,  // ...A....
                            /* 1B70 */  0x04, 0x39, 0x8F, 0xA7, 0x1C, 0x1F, 0x72, 0x7C,  // .9....r|
                            /* 1B78 */  0x66, 0xF6, 0x21, 0xC7, 0x50, 0xEF, 0x3A, 0xB1,  // f.!.P.:.
                            /* 1B80 */  0xDE, 0x75, 0x0C, 0x12, 0x2A, 0xC2, 0x5B, 0xA1,  // .u..*.[.
                            /* 1B88 */  0xAF, 0xCE, 0x3E, 0x41, 0xFB, 0x8E, 0x13, 0x23,  // ..>A...#
                            /* 1B90 */  0xDC, 0x43, 0x0E, 0x13, 0xF2, 0x1A, 0x91, 0x87,  // .C......
                            /* 1B98 */  0x43, 0x0E, 0x40, 0x91, 0xD7, 0x8C, 0x0F, 0x39,  // C.@....9
                            /* 1BA0 */  0xB8, 0x51, 0xF8, 0x8C, 0xC0, 0x09, 0x1C, 0xF8,  // .Q......
                            /* 1BA8 */  0x80, 0x03, 0x74, 0x4E, 0x12, 0xB0, 0xFF, 0xFF,  // ..tN....
                            /* 1BB0 */  0x27, 0x09, 0xD8, 0x43, 0x7C, 0x92, 0x00, 0xC3,  // '..C|...
                            /* 1BB8 */  0xF9, 0x06, 0x7C, 0xB1, 0x4F, 0xDE, 0x68, 0x68,  // ..|.O.hh
                            /* 1BC0 */  0xCF, 0xC1, 0xD3, 0x39, 0xAB, 0x63, 0xE2, 0xC7,  // ...9.c..
                            /* 1BC8 */  0x6E, 0x70, 0x9D, 0x0C, 0xC0, 0x71, 0xEC, 0x06,  // np...q..
                            /* 1BD0 */  0xCF, 0x90, 0xB0, 0xB3, 0x88, 0xF1, 0x80, 0x73,  // .......s
                            /* 1BD8 */  0xCE, 0x3E, 0x5C, 0x74, 0x25, 0xC0, 0xE8, 0xD1,  // .>\t%...
                            /* 1BE0 */  0x08, 0x68, 0x43, 0x06, 0x0A, 0xF5, 0xDA, 0x73,  // .hC....s
                            /* 1BE8 */  0x26, 0x0F, 0x94, 0x18, 0xA4, 0x78, 0x47, 0x18,  // &....xG.
                            /* 1BF0 */  0xCF, 0x47, 0x23, 0xF0, 0xFF, 0xFF, 0x8F, 0x46,  // .G#....F
                            /* 1BF8 */  0xC0, 0x30, 0xF0, 0x61, 0x92, 0xC6, 0x78, 0x5B,  // .0.a..x[
                            /* 1C00 */  0x28, 0x22, 0x0C, 0xEA, 0x68, 0x04, 0xB8, 0x3A,  // ("..h..:
                            /* 1C08 */  0x22, 0xE0, 0x4E, 0x20, 0xE0, 0x03, 0x0D, 0x1B,  // ".N ....
                            /* 1C10 */  0x28, 0xA4, 0xEF, 0xB9, 0xEC, 0x78, 0x04, 0x1C,  // (....x..
                            /* 1C18 */  0x2F, 0xE1, 0x3E, 0x1E, 0x81, 0xE5, 0xFF, 0x7F,  // /.>.....
                            /* 1C20 */  0xA4, 0x04, 0x98, 0x22, 0xE4, 0x78, 0x04, 0x3D,  // ...".x.=
                            /* 1C28 */  0xF8, 0xF1, 0x08, 0xE8, 0x9C, 0x26, 0xC0, 0x0D,  // .....&..
                            /* 1C30 */  0xF5, 0x34, 0x01, 0x9E, 0xFF, 0xFF, 0x11, 0x09,  // .4......
                            /* 1C38 */  0xCC, 0xD0, 0x3E, 0xE7, 0x00, 0x27, 0xA8, 0x68,  // ..>..'.h
                            /* 1C40 */  0x81, 0x22, 0x3C, 0x87, 0x03, 0x9E, 0x82, 0x9E,  // ."<.....
                            /* 1C48 */  0x72, 0x68, 0x84, 0x57, 0x82, 0xA2, 0xC1, 0xA0,  // rh.W....
                            /* 1C50 */  0x0E, 0x3A, 0x80, 0xA5, 0xFF, 0xFF, 0x41, 0x87,  // .:....A.
                            /* 1C58 */  0x9D, 0xFB, 0x71, 0x67, 0x09, 0xB8, 0x33, 0x79,  // ..qg..3y
                            /* 1C60 */  0x3D, 0x38, 0x98, 0x03, 0xF7, 0xF9, 0xE1, 0xC4,  // =8......
                            /* 1C68 */  0xDF, 0x09, 0x9E, 0x0F, 0x7C, 0x32, 0x08, 0xF4,  // ....|2..
                            /* 1C70 */  0xEA, 0xE6, 0x4B, 0x15, 0x03, 0xF3, 0x45, 0x02,  // ..K...E.
                            /* 1C78 */  0x77, 0xB0, 0xC2, 0x1E, 0x2A, 0x81, 0xCD, 0x49,  // w...*..I
                            /* 1C80 */  0xFC, 0x31, 0x07, 0xAE, 0xB0, 0x63, 0x0E, 0x40,  // .1...c.@
                            /* 1C88 */  0x92, 0xFF, 0x3F, 0xAC, 0x8E, 0x39, 0xD0, 0x43,  // ..?..9.C
                            /* 1C90 */  0x1F, 0x73, 0x80, 0xCE, 0x59, 0x02, 0x78, 0x1E,  // .s..Y.x.
                            /* 1C98 */  0x72, 0x80, 0xF3, 0xE8, 0x30, 0xE0, 0x1E, 0x1D,  // r...0...
                            /* 1CA0 */  0xE6, 0x72, 0x08, 0xEF, 0x90, 0x03, 0x18, 0xF8,  // .r......
                            /* 1CA8 */  0xFF, 0x1F, 0x72, 0x60, 0x84, 0x3F, 0xE1, 0xD0,  // ..r`.?..
                            /* 1CB0 */  0x50, 0x6F, 0x04, 0xC5, 0x85, 0x41, 0x1D, 0x72,  // Po...A.r
                            /* 1CB8 */  0x00, 0x57, 0x31, 0x4E, 0x12, 0xA0, 0x39, 0xBB,  // .W1N..9.
                            /* 1CC0 */  0xC4, 0x78, 0x4D, 0x3D, 0x80, 0x50, 0x07, 0xF1,  // .xM=.P..
                            /* 1CC8 */  0xC8, 0xE2, 0x83, 0x97, 0x87, 0x71, 0x70, 0xBE,  // .....qp.
                            /* 1CD0 */  0xAB, 0xBC, 0x77, 0xE1, 0x64, 0xE1, 0x08, 0xCC,  // ..w.d...
                            /* 1CD8 */  0x47, 0x89, 0x87, 0x89, 0x47, 0x31, 0x03, 0x9F,  // G...G1..
                            /* 1CE0 */  0x97, 0x4F, 0x04, 0x91, 0xCE, 0xC8, 0xB7, 0x30,  // .O.....0
                            /* 1CE8 */  0xB8, 0xA7, 0x1D, 0xE0, 0x83, 0xF2, 0xB4, 0x03,  // ........
                            /* 1CF0 */  0x57, 0xDA, 0x69, 0x07, 0x84, 0xFF, 0xFF, 0xD3,  // W.i.....
                            /* 1CF8 */  0x0E, 0x60, 0x5D, 0xC2, 0x69, 0x07, 0x0D, 0xED,  // .`].i...
                            /* 1D00 */  0x3B, 0x07, 0xE6, 0x8C, 0xC3, 0x8E, 0xE4, 0xC0,  // ;.......
                            /* 1D08 */  0xFB, 0xA0, 0xF1, 0x28, 0x01, 0xD6, 0xC3, 0x0E,  // ...(....
                            /* 1D10 */  0xF8, 0x0E, 0x04, 0x06, 0xFE, 0xFF, 0x3F, 0xEC,  // ......?.
                            /* 1D18 */  0x80, 0x1D, 0xF0, 0x48, 0x62, 0xBD, 0xE1, 0x3C,  // ...Hb..<
                            /* 1D20 */  0x20, 0x7A, 0x26, 0x6F, 0x32, 0xC1, 0x5E, 0x29,  //  z&o2.^)
                            /* 1D28 */  0x22, 0xC5, 0xF6, 0x81, 0x87, 0x9F, 0x10, 0x7D,  // "......}
                            /* 1D30 */  0xB4, 0x06, 0x2C, 0x05, 0x3C, 0x57, 0xA3, 0x22,  // ..,.<W."
                            /* 1D38 */  0x1D, 0xAD, 0x01, 0xBD, 0x37, 0x82, 0x47, 0x88,  // ....7.G.
                            /* 1D40 */  0xC3, 0xF1, 0x64, 0xFE, 0xFF, 0x07, 0xE1, 0x4B,  // ..d....K
                            /* 1D48 */  0x98, 0x0F, 0xAE, 0x7C, 0xF2, 0x6F, 0x17, 0x86,  // ...|.o..
                            /* 1D50 */  0xC2, 0x1E, 0xAD, 0x81, 0xD9, 0x39, 0x07, 0x0B,  // .....9..
                            /* 1D58 */  0xF1, 0x9C, 0x03, 0x57, 0xCC, 0x39, 0x07, 0xA0,  // ...W.9..
                            /* 1D60 */  0x49, 0x78, 0x08, 0x1D, 0x12, 0xE1, 0x86, 0x3D,  // Ix.....=
                            /* 1D68 */  0xE6, 0x20, 0xFF, 0xFF, 0xC7, 0x1C, 0x60, 0x30,  // . ....`0
                            /* 1D70 */  0x44, 0x9F, 0x26, 0x80, 0xCF, 0x21, 0x07, 0x9C,  // D.&..!..
                            /* 1D78 */  0x67, 0x0A, 0xDC, 0x21, 0x07, 0xBC, 0xF3, 0x78,  // g..!...x
                            /* 1D80 */  0xAD, 0x79, 0x7B, 0xF1, 0xAD, 0xDA, 0xB0, 0x6F,  // .y{....o
                            /* 1D88 */  0x87, 0xF0, 0x0E, 0x38, 0x80, 0x15, 0x91, 0xF2,  // ...8....
                            /* 1D90 */  0x40, 0x98, 0xF8, 0xD7, 0x81, 0x8E, 0x6C, 0x86,  // @.....l.
                            /* 1D98 */  0xE1, 0x07, 0x1C, 0xD8, 0xFF, 0xFF, 0x03, 0x0E,  // ........
                            /* 1DA0 */  0x60, 0x03, 0xE8, 0xC9, 0x0B, 0x3C, 0x47, 0x04,  // `....<G.
                            /* 1DA8 */  0xDC, 0x59, 0xC0, 0x07, 0x04, 0x5F, 0x0E, 0xD8,  // .Y..._..
                            /* 1DB0 */  0xFD, 0xDD, 0x07, 0x83, 0xC7, 0x03, 0xDF, 0x11,  // ........
                            /* 1DB8 */  0xD9, 0x64, 0x4E, 0x20, 0xC2, 0xB3, 0x0D, 0xFC,  // .dN ....
                            /* 1DC0 */  0xA1, 0xBC, 0xCA, 0x84, 0x88, 0xF3, 0x60, 0x10,  // ......`.
                            /* 1DC8 */  0xE1, 0x25, 0x24, 0xC4, 0x3B, 0x4D, 0x9C, 0x47,  // .%$.;M.G
                            /* 1DD0 */  0x9A, 0xD7, 0x88, 0x08, 0xCF, 0x36, 0x46, 0x8A,  // .....6F.
                            /* 1DD8 */  0x10, 0xE8, 0xD9, 0x86, 0x81, 0xBE, 0xDD, 0x78,  // .......x
                            /* 1DE0 */  0x1A, 0x31, 0x1E, 0xA8, 0x63, 0x45, 0x0A, 0x71,  // .1..cE.q
                            /* 1DE8 */  0x22, 0xE1, 0x42, 0x46, 0x8A, 0x16, 0xE3, 0xD9,  // ".BF....
                            /* 1DF0 */  0x86, 0xC5, 0x3B, 0x0E, 0xE8, 0x24, 0xE2, 0xB3,  // ..;..$..
                            /* 1DF8 */  0x0D, 0x60, 0xE8, 0xFF, 0x7F, 0xB6, 0x01, 0xF6,  // .`......
                            /* 1E00 */  0x97, 0x83, 0xA7, 0x13, 0xF0, 0x9D, 0x15, 0xE0,  // ........
                            /* 1E08 */  0x9D, 0x4A, 0x80, 0xC9, 0x97, 0xC2, 0x5A, 0xC6,  // .J....Z.
                            /* 1E10 */  0xEA, 0xC5, 0xCA, 0xC6, 0x62, 0x7D, 0xC6, 0xA0,  // ....b}..
                            /* 1E18 */  0x32, 0x4F, 0x09, 0x9A, 0xC0, 0xE1, 0x19, 0x39,  // 2O.....9
                            /* 1E20 */  0xEC, 0xFB, 0x8B, 0x41, 0x22, 0x3F, 0x9B, 0x18,  // ...A"?..
                            /* 1E28 */  0xFE, 0xB9, 0x22, 0xC2, 0x41, 0x9C, 0x45, 0x20,  // ..".A.E 
                            /* 1E30 */  0x76, 0x4E, 0x30, 0x44, 0xAC, 0xB7, 0x09, 0x8F,  // vN0D....
                            /* 1E38 */  0x49, 0xE0, 0x3A, 0x02, 0x19, 0xC2, 0x32, 0x28,  // I.:...2(
                            /* 1E40 */  0x74, 0x18, 0xF7, 0xB8, 0x0C, 0xE7, 0xD8, 0x60,  // t......`
                            /* 1E48 */  0x14, 0xC4, 0x07, 0x01, 0x1F, 0x1E, 0x7C, 0x3E,  // ......|>
                            /* 1E50 */  0xC2, 0xED, 0xC7, 0x03, 0x81, 0x7F, 0x5A, 0xF3,  // ......Z.
                            /* 1E58 */  0xE9, 0x01, 0x0E, 0x70, 0xC4, 0x93, 0xF4, 0x54,  // ...p...T
                            /* 1E60 */  0x0C, 0xE7, 0xB3, 0x12, 0x87, 0xF3, 0xAD, 0xE0,  // ........
                            /* 1E68 */  0xE4, 0x4D, 0xE0, 0xFF, 0xFF, 0x51, 0x08, 0x8C,  // .M...Q..
                            /* 1E70 */  0x02, 0x4F, 0x07, 0xA0, 0x00, 0xF2, 0x5D, 0xC0,  // .O....].
                            /* 1E78 */  0x07, 0x9C, 0xE7, 0x01, 0x36, 0x87, 0x67, 0x1C,  // ....6.g.
                            /* 1E80 */  0x9F, 0x70, 0xD8, 0x61, 0x10, 0x31, 0x2A, 0x7A,  // .p.a.1*z
                            /* 1E88 */  0x0E, 0x3E, 0x2E, 0xCC, 0xF1, 0xC0, 0x47, 0x18,  // .>....G.
                            /* 1E90 */  0x86, 0xFD, 0x1E, 0xE0, 0xCB, 0xD3, 0x43, 0x93,  // ......C.
                            /* 1E98 */  0xCF, 0x54, 0x18, 0x58, 0x8F, 0x94, 0xC3, 0x1A,  // .T.X....
                            /* 1EA0 */  0x2D, 0xEC, 0x01, 0x3F, 0x44, 0xF8, 0x02, 0xE2,  // -..?D...
                            /* 1EA8 */  0x99, 0xF9, 0x84, 0xE2, 0xC3, 0x28, 0xD8, 0x8E,  // .....(..
                            /* 1EB0 */  0x08, 0xEC, 0x2A, 0xF0, 0x9C, 0x80, 0x81, 0x79,  // ..*....y
                            /* 1EB8 */  0x1A, 0xC0, 0x02, 0x3D, 0xD1, 0x05, 0x7A, 0x37,  // ...=..z7
                            /* 1EC0 */  0x31, 0x36, 0xBF, 0x0E, 0x90, 0x83, 0x03, 0xEA,  // 16......
                            /* 1EC8 */  0x04, 0x64, 0x59, 0x07, 0x07, 0x88, 0x87, 0x03,  // .dY.....
                            /* 1ED0 */  0xEC, 0x81, 0xC1, 0x87, 0x06, 0x1E, 0xFF, 0x70,  // .......p
                            /* 1ED8 */  0x46, 0x0F, 0x0D, 0x3C, 0x2E, 0x18, 0x05, 0xF1,  // F..<....
                            /* 1EE0 */  0xA1, 0xC1, 0x51, 0x0E, 0x0D, 0xE8, 0xC3, 0x80,  // ..Q.....
                            /* 1EE8 */  0x0F, 0x0C, 0xC0, 0xE6, 0xFF, 0x7F, 0x60, 0x00,  // ......`.
                            /* 1EF0 */  0x4C, 0x0D, 0xDA, 0x07, 0x06, 0xE0, 0x79, 0x58,  // L.....yX
                            /* 1EF8 */  0x80, 0x71, 0x6A, 0xF0, 0x71, 0x00, 0x7B, 0x60,  // .qj.q.{`
                            /* 1F00 */  0x80, 0x0F, 0xFC, 0xC0, 0x00, 0xEC, 0x6F, 0x07,  // ......o.
                            /* 1F08 */  0x3E, 0x16, 0xF1, 0x03, 0x03, 0xCC, 0xFF, 0xFF,  // >.......
                            /* 1F10 */  0x81, 0x01, 0x30, 0x05, 0xCB, 0x0F, 0x0C, 0xC0,  // ..0.....
                            /* 1F18 */  0xE7, 0x68, 0xC0, 0x0E, 0x0C, 0x60, 0x14, 0x72,  // .h...`.r
                            /* 1F20 */  0x60, 0x40, 0xDD, 0xD8, 0x12, 0x94, 0x77, 0x60,  // `@....w`
                            /* 1F28 */  0x81, 0x76, 0xDC, 0xB3, 0x77, 0x10, 0x82, 0xEF,  // .v..w...
                            /* 1F30 */  0x99, 0x79, 0x18, 0xCF, 0x68, 0xEF, 0x57, 0x3E,  // .y..h.W>
                            /* 1F38 */  0x6B, 0x62, 0x0E, 0xF5, 0x3E, 0x35, 0xF0, 0x43,  // kb..>5.C
                            /* 1F40 */  0x83, 0xA3, 0x9F, 0x1A, 0x50, 0x87, 0x53, 0x83,  // ....P.S.
                            /* 1F48 */  0x19, 0xC4, 0xA7, 0x06, 0x07, 0x39, 0xA8, 0x42,  // .....9.B
                            /* 1F50 */  0x3F, 0xB4, 0x80, 0xED, 0xFF, 0x7F, 0x68, 0x00,  // ?.....h.
                            /* 1F58 */  0xCC, 0x1D, 0x04, 0x7D, 0x68, 0x01, 0x9E, 0x27,  // ...}h..'
                            /* 1F60 */  0x04, 0x06, 0xE2, 0x13, 0x02, 0xEE, 0x70, 0x8B,  // ......p.
                            /* 1F68 */  0x3D, 0x34, 0xC0, 0x3F, 0xB4, 0xF0, 0x43, 0x03,  // =4.?..C.
                            /* 1F70 */  0xE0, 0xE1, 0xE0, 0xC2, 0xFE, 0xFF, 0x87, 0x06,  // ........
                            /* 1F78 */  0xC0, 0xA4, 0x85, 0x83, 0x0B, 0x50, 0x3D, 0x34,  // .....P=4
                            /* 1F80 */  0x80, 0x23, 0xD0, 0xEA, 0x74, 0x68, 0xE0, 0x67,  // .#..th.g
                            /* 1F88 */  0x71, 0xC7, 0x7D, 0x1B, 0xE8, 0xE0, 0x02, 0x07,  // q.}.....
                            /* 1F90 */  0xEA, 0xCC, 0x42, 0x04, 0x79, 0x6C, 0xF5, 0x95,  // ..B.yl..
                            /* 1F98 */  0xF2, 0x00, 0x12, 0x38, 0x1A, 0xAC, 0x0E, 0x0C,  // ...8....
                            /* 1FA0 */  0x3C, 0x14, 0x8C, 0x22, 0x41, 0xE8, 0xC0, 0xC0,  // <.."A...
                            /* 1FA8 */  0x43, 0xC0, 0x51, 0x10, 0x8F, 0xD6, 0x07, 0x06,  // C.Q.....
                            /* 1FB0 */  0x38, 0x83, 0x38, 0x84, 0x63, 0x7C, 0x3B, 0xF5,  // 8.8.c|;.
                            /* 1FB8 */  0xA1, 0x05, 0xFE, 0xFF, 0xFF, 0xC0, 0x00, 0x8C,  // ........
                            /* 1FC0 */  0x06, 0x05, 0x13, 0xF9, 0xA0, 0xC0, 0x3F, 0x5C,  // ......?\
                            /* 1FC8 */  0x0F, 0x0A, 0x38, 0x9C, 0x12, 0x42, 0x56, 0x7F,  // ..8..BV.
                            /* 1FD0 */  0x20, 0xD0, 0xC4, 0x3D, 0x28, 0x70, 0x1F, 0x48,  //  ..=(p.H
                            /* 1FD8 */  0x3C, 0x28, 0xE0, 0x32, 0x71, 0x0F, 0x0A, 0xDC,  // <(.2q...
                            /* 1FE0 */  0x50, 0x1E, 0x14, 0xD8, 0xFE, 0xFF, 0x87, 0x13,  // P.......
                            /* 1FE8 */  0x60, 0x12, 0xEC, 0x70, 0x02, 0xBA, 0x63, 0xBD,  // `..p..c.
                            /* 1FF0 */  0x0F, 0x27, 0xE0, 0x1A, 0xD0, 0x03, 0x12, 0x98,  // .'......
                            /* 1FF8 */  0x4F, 0x22, 0x0C, 0xE4, 0x49, 0x04, 0x77, 0x30,  // O"..I.w0
                            /* 2000 */  0x81, 0x7F, 0x38, 0xE2, 0x07, 0x13, 0xE0, 0x7D,  // ..8....}
                            /* 2008 */  0x30, 0x02, 0x5E, 0x83, 0xC2, 0xFE, 0xFF, 0x0F,  // 0.^.....
                            /* 2010 */  0x26, 0x60, 0x1A, 0x14, 0x38, 0x0E, 0x26, 0xC0,  // &`..8.&.
                            /* 2018 */  0x75, 0x50, 0xE0, 0x38, 0x98, 0x00, 0xD7, 0x41,  // uP.8...A
                            /* 2020 */  0x81, 0xE3, 0x60, 0x02, 0x18, 0xF9, 0xFF, 0x1F,  // ..`.....
                            /* 2028 */  0x4C, 0x60, 0x7A, 0x38, 0x98, 0x00, 0xAD, 0x43,  // L`z8...C
                            /* 2030 */  0x18, 0x9C, 0x83, 0x09, 0x9C, 0x70, 0x87, 0x40,  // .....p.@
                            /* 2038 */  0x94, 0xC8, 0x83, 0x89, 0x0F, 0xA2, 0xD0, 0x40,  // .......@
                            /* 2040 */  0x42, 0x9D, 0x93, 0x51, 0x8E, 0xF7, 0x48, 0xCE,  // B..Q..H.
                            /* 2048 */  0x29, 0xC8, 0xFB, 0x69, 0xD0, 0x33, 0x09, 0x72,  // )..i.3.r
                            /* 2050 */  0x42, 0x81, 0x4E, 0xE8, 0xE0, 0x8C, 0xF8, 0x22,  // B.N...."
                            /* 2058 */  0xE8, 0x9B, 0x06, 0x23, 0x70, 0x94, 0x83, 0x20,  // ...#p.. 
                            /* 2060 */  0x2A, 0x04, 0x85, 0x22, 0x40, 0xE8, 0x80, 0xC2,  // *.."@...
                            /* 2068 */  0x45, 0xC3, 0x51, 0x10, 0x0F, 0xDD, 0x07, 0x31,  // E.Q....1
                            /* 2070 */  0xC0, 0xEE, 0xFF, 0xFF, 0x80, 0x02, 0x0C, 0x0E,  // ........
                            /* 2078 */  0x16, 0xC0, 0x23, 0xE4, 0xC1, 0x02, 0x74, 0xE0,  // ..#...t.
                            /* 2080 */  0x3E, 0x58, 0x80, 0x0B, 0xFE, 0x01, 0x0A, 0xCC,  // >X......
                            /* 2088 */  0x27, 0x09, 0x8E, 0xF2, 0x24, 0xC1, 0x2E, 0xCE,  // '...$...
                            /* 2090 */  0x3E, 0x49, 0x18, 0xE4, 0x49, 0x02, 0x7B, 0xBC,  // >I..I.{.
                            /* 2098 */  0x00, 0xC7, 0x31, 0x8A, 0x1F, 0x2F, 0x00, 0x0B,  // ..1../..
                            /* 20A0 */  0xFF, 0xFF, 0xE3, 0x14, 0x60, 0xFE, 0x78, 0x01,  // ....`.x.
                            /* 20A8 */  0xBC, 0x4D, 0x1C, 0x2F, 0x80, 0xD6, 0x31, 0x08,  // .M./..1.
                            /* 20B0 */  0xCE, 0xF1, 0x02, 0x0C, 0xFF, 0xFF, 0xE3, 0x05,  // ........
                            /* 20B8 */  0x26, 0xEC, 0xA1, 0x0F, 0x75, 0x06, 0x70, 0xFC,  // &...u.p.
                            /* 20C0 */  0xC3, 0x2D, 0xB4, 0xE3, 0x05, 0x3C, 0x02, 0xC7,  // .-...<..
                            /* 20C8 */  0x3C, 0xF6, 0xA1, 0x02, 0xC2, 0x28, 0xDE, 0xB1,  // <....(..
                            /* 20D0 */  0x0F, 0x15, 0x08, 0x8E, 0x82, 0xF8, 0xD8, 0xE7,  // ........
                            /* 20D8 */  0x38, 0x87, 0x06, 0xF4, 0x38, 0x7D, 0x1E, 0x78,  // 8...8}.x
                            /* 20E0 */  0x33, 0x38, 0xCC, 0x08, 0x47, 0xCC, 0x86, 0x81,  // 38..G...
                            /* 20E8 */  0x39, 0x09, 0x01, 0xDF, 0x28, 0xE3, 0x42, 0x43,  // 9...(.BC
                            /* 20F0 */  0x7B, 0xAE, 0xB5, 0x0B, 0xF0, 0x3C, 0x2A, 0xA0,  // {....<*.
                            /* 20F8 */  0x71, 0xB8, 0x00, 0xE7, 0xA8, 0xE0, 0x00, 0x3F,  // q......?
                            /* 2100 */  0x13, 0x14, 0x3F, 0x2A, 0x90, 0xFF, 0xFF, 0xCF,  // ..?*....
                            /* 2108 */  0x7E, 0x60, 0x1F, 0x15, 0x2C, 0x48, 0x8F, 0x0A,  // ~`..,H..
                            /* 2110 */  0x58, 0x1C, 0xFE, 0x80, 0xFB, 0x31, 0x05, 0x7C,  // X....1.|
                            /* 2118 */  0x2A, 0x8E, 0x29, 0x80, 0x16, 0x31, 0x87, 0x2A,  // *.)..1.*
                            /* 2120 */  0x94, 0xBC, 0x81, 0xFB, 0x50, 0x85, 0xFC, 0xFF,  // ....P...
                            /* 2128 */  0x1F, 0x53, 0xE0, 0xDE, 0x36, 0x7D, 0xD9, 0x38,  // .S..6}.8
                            /* 2130 */  0xB4, 0x78, 0xBE, 0xE6, 0x63, 0x24, 0x9C, 0xA8,  // .x..c$..
                            /* 2138 */  0x50, 0xE1, 0x21, 0x14, 0xFD, 0x24, 0x40, 0x4F,  // P.!..$@O
                            /* 2140 */  0x30, 0x04, 0x8C, 0x82, 0xF8, 0x10, 0xE1, 0xD3,  // 0.......
                            /* 2148 */  0x12, 0x9C, 0x91, 0x3C, 0xF9, 0x63, 0x8E, 0x29,  // ...<.c.)
                            /* 2150 */  0xC0, 0xF7, 0xDC, 0x00, 0x3C, 0x22, 0x9E, 0x1B,  // ....<"..
                            /* 2158 */  0x40, 0x37, 0x4E, 0x9F, 0x1B, 0xC0, 0x75, 0xD0,  // @7N...u.
                            /* 2160 */  0xE3, 0x67, 0x3B, 0x60, 0x71, 0x44, 0xC0, 0xC0,  // .g;`qD..
                            /* 2168 */  0x3C, 0x22, 0x60, 0x8E, 0x0D, 0xEC, 0xFF, 0x7F,  // <"`.....
                            /* 2170 */  0x6C, 0x80, 0x79, 0xB4, 0x83, 0x79, 0x6C, 0x00,  // l.y..yl.
                            /* 2178 */  0xE6, 0xE7, 0x3A, 0xE0, 0x75, 0x6C, 0x00, 0xDE,  // ..:.ul..
                            /* 2180 */  0xC3, 0xF5, 0xB1, 0x01, 0x38, 0x9D, 0x5E, 0xC0,  // ....8.^.
                            /* 2188 */  0x72, 0x44, 0xF0, 0xFF, 0xFF, 0xD8, 0x00, 0x43,  // rD.....C
                            /* 2190 */  0xDA, 0x91, 0x0D, 0x75, 0x6C, 0xB0, 0xDC, 0x23,  // ...ul..#
                            /* 2198 */  0x1B, 0x88, 0x26, 0x1D, 0x24, 0x92, 0xE7, 0xF4,  // ..&.$...
                            /* 21A0 */  0xEE, 0x8F, 0x13, 0x74, 0x6A, 0x43, 0x49, 0x81,  // ...tjCI.
                            /* 21A8 */  0x91, 0x90, 0x53, 0x1B, 0x2A, 0xFA, 0xE9, 0x81,  // ..S.*...
                            /* 21B0 */  0x82, 0x58, 0xC2, 0x79, 0x1C, 0xE2, 0x5C, 0x4E,  // .X.y..\N
                            /* 21B8 */  0xE5, 0x28, 0x1E, 0x5A, 0x7C, 0x78, 0x01, 0xBE,  // .(.Z|x..
                            /* 21C0 */  0x31, 0x06, 0x85, 0x86, 0x37, 0x68, 0xC4, 0x47,  // 1...7h.G
                            /* 21C8 */  0x02, 0x1F, 0xD8, 0x80, 0xEF, 0xB8, 0xE1, 0x40,  // .......@
                            /* 21D0 */  0x3F, 0x3A, 0x78, 0xDE, 0x1E, 0x14, 0x78, 0xFF,  // ?:x...x.
                            /* 21D8 */  0xFF, 0xE7, 0x35, 0x30, 0x9F, 0x3E, 0x80, 0xB7,  // ..50.>..
                            /* 21E0 */  0x8D, 0x33, 0x10, 0x90, 0x3F, 0x69, 0x60, 0xEE,  // .3..?i`.
                            /* 21E8 */  0xF6, 0xB8, 0xD3, 0x07, 0xFC, 0x33, 0x10, 0xCC,  // .....3..
                            /* 21F0 */  0xD3, 0x07, 0x30, 0x3F, 0x03, 0xB1, 0xFF, 0xFF,  // ..0?....
                            /* 21F8 */  0xE9, 0x03, 0xB0, 0x70, 0x52, 0x06, 0x5E, 0xA7,  // ...pR.^.
                            /* 2200 */  0x0F, 0xF0, 0x0E, 0x0A, 0x1C, 0xA7, 0x0F, 0xC0,  // ........
                            /* 2208 */  0x95, 0x8E, 0xD3, 0x07, 0xC4, 0xFF, 0xFF, 0x51,  // .......Q
                            /* 2210 */  0x0A, 0x38, 0x9E, 0x3E, 0xA0, 0x1D, 0xE8, 0x50,  // .8.>...P
                            /* 2218 */  0x97, 0x00, 0x8B, 0x3C, 0x56, 0x82, 0x68, 0xEE,  // ...<V.h.
                            /* 2220 */  0x4F, 0x39, 0x9E, 0x9C, 0x71, 0xA2, 0xF4, 0x8E,  // O9..q...
                            /* 2228 */  0xA2, 0xF3, 0x07, 0xEE, 0x48, 0x07, 0xFE, 0x79,  // ....H..y
                            /* 2230 */  0x7A, 0x30, 0x3E, 0x58, 0x02, 0xEE, 0x06, 0xEA,  // z0>X....
                            /* 2238 */  0x83, 0x03, 0x58, 0xFE, 0xFF, 0x07, 0x07, 0xE6,  // ..X.....
                            /* 2240 */  0xE3, 0xE0, 0x00, 0xBA, 0xD3, 0xF4, 0x53, 0x10,  // ......S.
                            /* 2248 */  0x70, 0x39, 0x24, 0xC0, 0x38, 0x3D, 0x80, 0xF7,  // p9$.8=..
                            /* 2250 */  0x28, 0x04, 0xF3, 0xF4, 0x00, 0x18, 0x38, 0x5F,  // (.....8_
                            /* 2258 */  0x02, 0x56, 0xFE, 0xFF, 0xA7, 0x07, 0x30, 0x8F,  // .V....0.
                            /* 2260 */  0xC5, 0xA7, 0x07, 0xE0, 0x74, 0x8A, 0x01, 0xCB,  // ....t...
                            /* 2268 */  0xE9, 0x01, 0x4C, 0xAF, 0x03, 0x9F, 0x1E, 0xF8,  // ..L.....
                            /* 2270 */  0x39, 0xC0, 0xD2, 0x8E, 0x32, 0xD0, 0xAE, 0xDF,  // 9...2...
                            /* 2278 */  0xD8, 0x6B, 0x2E, 0xEE, 0xB4, 0x0D, 0xB8, 0xFD,  // .k......
                            /* 2280 */  0xFF, 0x1F, 0x1C, 0xC0, 0x14, 0xEE, 0xE0, 0x00,  // ........
                            /* 2288 */  0x3A, 0x23, 0x07, 0x07, 0xD0, 0x89, 0x3D, 0xC5,  // :#....=.
                            /* 2290 */  0x80, 0xFA, 0x7C, 0x80, 0xBD, 0xE3, 0xE2, 0x0E,  // ..|.....
                            /* 2298 */  0x0C, 0x60, 0x38, 0xBD, 0xF0, 0x03, 0x03, 0xF0,  // .`8.....
                            /* 22A0 */  0x3F, 0xB8, 0x00, 0xEB, 0xFF, 0xFF, 0x81, 0x01,  // ?.......
                            /* 22A8 */  0x98, 0x29, 0x39, 0x30, 0x00, 0xAD, 0x83, 0x0B,  // .)90....
                            /* 22B0 */  0x9C, 0x03, 0x03, 0xB8, 0x8F, 0x72, 0xD8, 0x13,  // .....r..
                            /* 22B8 */  0x89, 0x4F, 0x0D, 0xBE, 0xC4, 0x9C, 0x44, 0x94,  // .O....D.
                            /* 22C0 */  0xF3, 0x39, 0xC9, 0x07, 0x16, 0xC0, 0xEE, 0xFF,  // .9......
                            /* 22C8 */  0xFF, 0xC0, 0x00, 0xCC, 0x46, 0xEC, 0x03, 0x0B,  // ....F...
                            /* 22D0 */  0xF0, 0x3C, 0x1F, 0x60, 0x6E, 0xF9, 0x3E, 0x1F,  // .<.`n.>.
                            /* 22D8 */  0x60, 0x0F, 0x2C, 0xE0, 0x39, 0x30, 0x00, 0xFF,  // `.,.90..
                            /* 22E0 */  0x03, 0x0B, 0xB0, 0xFE, 0xFF, 0x1F, 0x18, 0x80,  // ........
                            /* 22E8 */  0x99, 0x94, 0x03, 0x0B, 0x50, 0x3D, 0x30, 0xC0,  // ....P=0.
                            /* 22F0 */  0x0D, 0x73, 0x2E, 0x47, 0x71, 0x38, 0xEA, 0xB9,  // .s.Gq8..
                            /* 22F8 */  0x1C, 0x7D, 0x60, 0xE1, 0x13, 0x8C, 0x75, 0xB4,  // .}`...u.
                            /* 2300 */  0xA7, 0x9B, 0xC0, 0xD1, 0x0E, 0xE4, 0xA8, 0x50,  // .......P
                            /* 2308 */  0x30, 0x8A, 0x74, 0x20, 0x47, 0x85, 0x80, 0xA3,  // 0.t G...
                            /* 2310 */  0x20, 0xB6, 0x70, 0x58, 0x80, 0x36, 0x85, 0x63,  //  .pX.6.c
                            /* 2318 */  0x3B, 0xBE, 0x93, 0xF4, 0x61, 0x05, 0x18, 0x0F,  // ;...a...
                            /* 2320 */  0x0A, 0x26, 0xF2, 0x41, 0xC1, 0xF8, 0xFF, 0x0F,  // .&.A....
                            /* 2328 */  0x0A, 0x6C, 0x27, 0x72, 0xE0, 0x71, 0x32, 0x08,  // .l'r.q2.
                            /* 2330 */  0x59, 0xFD, 0x71, 0x40, 0x13, 0xF7, 0xA0, 0xC0,  // Y.q@....
                            /* 2338 */  0x7D, 0x22, 0x07, 0xE7, 0xA0, 0xE0, 0x4E, 0xDC,  // }"....N.
                            /* 2340 */  0x83, 0x02, 0x37, 0x94, 0x0F, 0x26, 0xC0, 0x3B,  // ..7..&.;
                            /* 2348 */  0xD8, 0xC1, 0x04, 0x74, 0x56, 0x60, 0xC9, 0xFF,  // ...tV`..
                            /* 2350 */  0xFF, 0x60, 0x02, 0xA6, 0x01, 0x3D, 0x18, 0x81,  // .`...=..
                            /* 2358 */  0xF9, 0x1C, 0xC2, 0x51, 0x8E, 0xD7, 0xC7, 0x52,  // ...Q...R
                            /* 2360 */  0x76, 0x2C, 0x81, 0x7F, 0x2C, 0xE2, 0xC7, 0x12,  // v,..,...
                            /* 2368 */  0xE0, 0x7B, 0x24, 0x02, 0x5E, 0xC7, 0x12, 0xF0,  // .{$.^...
                            /* 2370 */  0x0E, 0x0A, 0x1C, 0xC7, 0x12, 0x30, 0xFF, 0xFF,  // .....0..
                            /* 2378 */  0x8F, 0x25, 0x60, 0x1C, 0x14, 0x38, 0x8E, 0x25,  // .%`..8.%
                            /* 2380 */  0xC0, 0x75, 0x50, 0xE0, 0x38, 0x96, 0x00, 0xAE,  // .uP.8...
                            /* 2388 */  0xB4, 0x1C, 0x4B, 0x80, 0xD6, 0xF1, 0x0B, 0xCE,  // ..K.....
                            /* 2390 */  0x7C, 0xFE, 0xFF, 0x8F, 0x25, 0x30, 0x64, 0x7A,  // |...%0dz
                            /* 2398 */  0x18, 0x03, 0x0B, 0xF1, 0x8A, 0x90, 0x30, 0x18,  // ......0.
                            /* 23A0 */  0x94, 0x86, 0xF3, 0x00, 0x94, 0x11, 0x9E, 0xC0,  // ........
                            /* 23A8 */  0x71, 0x1D, 0x12, 0x93, 0x04, 0x87, 0x1A, 0xBC,  // q.......
                            /* 23B0 */  0x87, 0xF4, 0x4A, 0x7A, 0x14, 0x8F, 0x65, 0x1E,  // ..Jz..e.
                            /* 23B8 */  0xC7, 0x39, 0x85, 0x64, 0xD2, 0xC6, 0x86, 0x3A,  // .9.d...:
                            /* 23C0 */  0xB8, 0x79, 0x3E, 0x67, 0x76, 0x34, 0xB5, 0x9F,  // .y>gv4..
                            /* 23C8 */  0xD2, 0xC9, 0xF1, 0xDC, 0x04, 0x1E, 0x36, 0x43,  // ......6C
                            /* 23D0 */  0xE3, 0xD0, 0xD8, 0x61, 0xF8, 0x3E, 0x10, 0xEC,  // ...a.>..
                            /* 23D8 */  0x20, 0x0E, 0xE3, 0x9C, 0x4D, 0xE0, 0x09, 0x9D,  //  ...M...
                            /* 23E0 */  0x66, 0xB9, 0xF7, 0x04, 0x1D, 0xE4, 0xA3, 0xC6,  // f.......
                            /* 23E8 */  0x68, 0x0E, 0x8A, 0xC0, 0x1D, 0x35, 0x58, 0xC0,  // h....5X.
                            /* 23F0 */  0x3C, 0xDB, 0xE3, 0xF5, 0xE5, 0xCD, 0x58, 0x6C,  // <.....Xl
                            /* 23F8 */  0xCC, 0x31, 0x42, 0xC5, 0xA8, 0x71, 0xE8, 0x64,  // .1B..q.d
                            /* 2400 */  0xE4, 0x06, 0x39, 0x8E, 0xC7, 0x38, 0xA3, 0xC7,  // ..9..8..
                            /* 2408 */  0x7D, 0x1C, 0x30, 0xCC, 0x81, 0x3C, 0xCC, 0xFA,  // }.0..<..
                            /* 2410 */  0xCE, 0xE4, 0xB1, 0x60, 0x4F, 0x17, 0xF6, 0x7C,  // ...`O..|
                            /* 2418 */  0x85, 0x20, 0xF7, 0x02, 0x13, 0x74, 0x3F, 0x1A,  // . ...t?.
                            /* 2420 */  0x1D, 0x22, 0x42, 0xF4, 0x36, 0x02, 0xA1, 0x57,  // ."B.6..W
                            /* 2428 */  0x2C, 0x40, 0x9C, 0x00, 0x5B, 0x33, 0x13, 0xD0,  // ,@..[3..
                            /* 2430 */  0xA1, 0xD5, 0x86, 0x42, 0x30, 0x8F, 0xCE, 0x28,  // ...B0..(
                            /* 2438 */  0xC1, 0x4E, 0xE6, 0x6D, 0xE2, 0xF8, 0xA2, 0xC4,  // .N.m....
                            /* 2440 */  0x68, 0x0C, 0x42, 0xB8, 0x01, 0x63, 0x46, 0x08,  // h.B..cF.
                            /* 2448 */  0x18, 0x3D, 0x62, 0x9C, 0x08, 0xED, 0x0F, 0x82,  // .=b.....
                            /* 2450 */  0x84, 0x7A, 0xE6, 0x68, 0x2C, 0x8E, 0x34, 0x1A,  // .z.h,.4.
                            /* 2458 */  0xD4, 0xB1, 0xC2, 0xC7, 0x02, 0x5F, 0xF6, 0x3D,  // ....._.=
                            /* 2460 */  0x2A, 0xCF, 0xCE, 0xE8, 0xE7, 0x52, 0xE7, 0xE9,  // *....R..
                            /* 2468 */  0x9F, 0x12, 0x78, 0x6A, 0x3E, 0x7F, 0xC0, 0x71,  // ..xj>..q
                            /* 2470 */  0x2D, 0xE0, 0xFF, 0x0F, 0xF8, 0x66, 0xF0, 0x5C,  // -....f.\
                            /* 2478 */  0xC0, 0x4E, 0x44, 0x86, 0xE3, 0x43, 0xF4, 0xD8,  // .ND..C..
                            /* 2480 */  0xC3, 0x9D, 0xC0, 0x21, 0x32, 0x40, 0x1F, 0x40,  // ...!2@.@
                            /* 2488 */  0xE0, 0x8F, 0xC7, 0x07, 0x01, 0xCF, 0xE7, 0x84,  // ........
                            /* 2490 */  0x13, 0x58, 0xFE, 0x20, 0x50, 0x23, 0x33, 0xB4,  // .X. P#3.
                            /* 2498 */  0x6F, 0x1E, 0xA7, 0xF5, 0x28, 0xE0, 0x63, 0xC2,  // o...(.c.
                            /* 24A0 */  0x61, 0xB1, 0xA3, 0x8C, 0xCF, 0x2E, 0x1E, 0x0F,  // a.......
                            /* 24A8 */  0xF8, 0xAF, 0x01, 0x4F, 0x07, 0x11, 0x5E, 0x1A,  // ...O..^.
                            /* 24B0 */  0x3C, 0x5F, 0x9F, 0x49, 0xD9, 0x81, 0xDE, 0xE3,  // <_.I....
                            /* 24B8 */  0xC1, 0x1D, 0x12, 0xD8, 0xE1, 0xE4, 0x4D, 0x84,  // ......M.
                            /* 24C0 */  0x9D, 0xA1, 0x74, 0x4C, 0x35, 0x84, 0x44, 0x1D,  // ..tL5.D.
                            /* 24C8 */  0x4B, 0x50, 0xA7, 0x0A, 0x1F, 0x28, 0xD8, 0xB5,  // KP...(..
                            /* 24D0 */  0x21, 0xEE, 0x33, 0x80, 0x71, 0xD9, 0x41, 0xC8,  // !.3.q.A.
                            /* 24D8 */  0x23, 0x83, 0x7F, 0x42, 0x78, 0x9A, 0x00, 0xCB,  // #..Bx...
                            /* 24E0 */  0x31, 0x82, 0x9F, 0x6B, 0xAC, 0xEB, 0xAC, 0x42,  // 1..k...B
                            /* 24E8 */  0x8F, 0x35, 0xE0, 0x18, 0x88, 0x03, 0x0F, 0x13,  // .5......
                            /* 24F0 */  0x3D, 0x38, 0x0F, 0x93, 0x83, 0xBC, 0x6F, 0xFB,  // =8....o.
                            /* 24F8 */  0x3C, 0xC0, 0xCE, 0xA6, 0x1E, 0x27, 0x58, 0xFE,  // <....'X.
                            /* 2500 */  0xFF, 0x07, 0x02, 0xB0, 0xC8, 0x1B, 0x27, 0xE8,  // ......'.
                            /* 2508 */  0xC6, 0xC4, 0x07, 0x0A, 0x3E, 0x29, 0x4F, 0x01,  // ....>)O.
                            /* 2510 */  0x1D, 0xDF, 0x3D, 0x50, 0x3E, 0x40, 0x0F, 0x94,  // ..=P>@..
                            /* 2518 */  0x9F, 0x4D, 0x18, 0x4C, 0xE0, 0xE3, 0x88, 0xFB,  // .M.L....
                            /* 2520 */  0x56, 0xC2, 0x4E, 0x25, 0x98, 0xD3, 0x02, 0x1B,  // V.N%....
                            /* 2528 */  0x2D, 0x78, 0x00, 0x3D, 0x5A, 0xF8, 0x87, 0x5A,  // -x.=Z..Z
                            /* 2530 */  0xF0, 0x8C, 0x96, 0x0F, 0x0C, 0x7B, 0x7C, 0x81,  // .....{|.
                            /* 2538 */  0x33, 0x67, 0x9F, 0x31, 0xC0, 0x60, 0x15, 0x48,  // 3g.1.`.H
                            /* 2540 */  0xE7, 0x93, 0x40, 0x8F, 0x2C, 0x4F, 0x2C, 0x47,  // ..@.,O,G
                            /* 2548 */  0x48, 0x46, 0x0D, 0x15, 0xFE, 0x5C, 0x0E, 0xEA,  // HF...\..
                            /* 2550 */  0xF4, 0x7C, 0x01, 0xF0, 0xA8, 0xC1, 0xF9, 0xFF,  // .|......
                            /* 2558 */  0x1F, 0x35, 0x06, 0xD4, 0xA3, 0x06, 0x3E, 0x03,  // .5....>.
                            /* 2560 */  0xC3, 0x8E, 0x1A, 0x98, 0x0C, 0x09, 0x77, 0x2E,  // ......w.
                            /* 2568 */  0x83, 0x87, 0x12, 0x3D, 0x74, 0x9F, 0x02, 0xB4,  // ...=t...
                            /* 2570 */  0x42, 0xE8, 0xDE, 0x61, 0xB0, 0x38, 0xEF, 0x90,  // B..a.8..
                            /* 2578 */  0x06, 0x89, 0xFF, 0x1E, 0xE9, 0x69, 0x18, 0xE1,  // .....i..
                            /* 2580 */  0x04, 0x5F, 0x23, 0x0C, 0x75, 0x1C, 0x21, 0x12,  // ._#.u.!.
                            /* 2588 */  0x14, 0x39, 0x50, 0xF4, 0x30, 0x38, 0xFA, 0x83,  // .9P.08..
                            /* 2590 */  0x1A, 0xC3, 0x36, 0xCA, 0x99, 0x1C, 0x95, 0x0F,  // ..6.....
                            /* 2598 */  0x56, 0x46, 0x38, 0xCB, 0xE7, 0xA9, 0xE7, 0x2B,  // VF8....+
                            /* 25A0 */  0x5F, 0x17, 0x30, 0xE7, 0x35, 0x9C, 0xA4, 0xE7,  // _.0.5...
                            /* 25A8 */  0x01, 0x0D, 0x70, 0x42, 0x90, 0x08, 0x18, 0xD4,  // ..pB....
                            /* 25B0 */  0x19, 0x0C, 0x30, 0xF1, 0xFF, 0x3F, 0x83, 0x81,  // ..0..?..
                            /* 25B8 */  0xE1, 0xBE, 0xE0, 0x33, 0x18, 0xF0, 0xB8, 0x09,  // ...3....
                            /* 25C0 */  0x04, 0x79, 0x36, 0x3A, 0x17, 0x9F, 0xC0, 0xC0,  // .y6:....
                            /* 25C8 */  0x75, 0x6D, 0x79, 0xE3, 0x3A, 0x83, 0xE0, 0x8F,  // umy.:...
                            /* 25D0 */  0x5D, 0x0C, 0xEB, 0xCD, 0x2B, 0x44, 0xA8, 0x03,  // ]...+D..
                            /* 25D8 */  0x0B, 0xF4, 0x04, 0x66, 0x94, 0x73, 0x08, 0x18,  // ...f.s..
                            /* 25E0 */  0xE5, 0xDC, 0x02, 0x85, 0x7A, 0x11, 0x63, 0xD6,  // ....z.c.
                            /* 25E8 */  0x90, 0x74, 0x01, 0x33, 0x48, 0xF0, 0x10, 0x41,  // .t.3H..A
                            /* 25F0 */  0x62, 0x45, 0xF6, 0x09, 0x8C, 0x85, 0x58, 0xAE,  // bE....X.
                            /* 25F8 */  0xBE, 0x04, 0x3E, 0x81, 0x01, 0x2C, 0xF8, 0xFF,  // ..>..,..
                            /* 2600 */  0x9F, 0xC0, 0x00, 0xE3, 0xE1, 0x8F, 0xB2, 0xE8,  // ........
                            /* 2608 */  0x43, 0x82, 0x07, 0xC1, 0xEE, 0x15, 0x98, 0x89,  // C.......
                            /* 2610 */  0xBE, 0x76, 0x3C, 0xDD, 0x98, 0xC0, 0x21, 0xCF,  // .v<...!.
                            /* 2618 */  0x60, 0x40, 0xE7, 0x24, 0x83, 0x1F, 0x29, 0xFC,  // `@.$..).
                            /* 2620 */  0xD3, 0x07, 0x6E, 0x56, 0xEC, 0xF4, 0x03, 0x96,  // ..nV....
                            /* 2628 */  0x43, 0x2E, 0x5E, 0xDC, 0x11, 0xCA, 0x87, 0x71,  // C.^....q
                            /* 2630 */  0x3A, 0x5C, 0xCC, 0xFF, 0x7F, 0xB8, 0xF8, 0x41,  // :\.....A
                            /* 2638 */  0xF2, 0x71, 0x08, 0x58, 0x47, 0x70, 0x1F, 0xC2,  // .q.XGp..
                            /* 2640 */  0x80, 0xC7, 0x70, 0xC1, 0x3D, 0x17, 0x3E, 0x5D,  // ..p.=.>]
                            /* 2648 */  0x1F, 0x8B, 0x71, 0x83, 0xC2, 0x5C, 0x9D, 0xF9,  // ..q..\..
                            /* 2650 */  0xA0, 0x8E, 0xE2, 0x21, 0x01, 0xF6, 0xF0, 0xC1,  // ...!....
                            /* 2658 */  0x73, 0x96, 0xE2, 0x91, 0x4F, 0x83, 0x50, 0xCE,  // s...O.P.
                            /* 2660 */  0xC0, 0xBE, 0xBA, 0x78, 0x72, 0xE7, 0xF7, 0xCE,  // ...xr...
                            /* 2668 */  0xE1, 0x9B, 0xB4, 0xE3, 0x9D, 0xC5, 0x80, 0xCE,  // ........
                            /* 2670 */  0x50, 0x71, 0xC7, 0x64, 0xF8, 0x63, 0xE2, 0x97,  // Pq.d.c..
                            /* 2678 */  0x0E, 0xCC, 0xA9, 0x03, 0x3C, 0xFF, 0xFF, 0x53,  // ....<..S
                            /* 2680 */  0x07, 0x7B, 0x97, 0xF8, 0xD4, 0x81, 0x1B, 0x97,  // .{......
                            /* 2688 */  0x87, 0x81, 0xBB, 0x02, 0xC0, 0x89, 0x39, 0x58,  // ......9X
                            /* 2690 */  0x50, 0x1D, 0x21, 0x3C, 0x58, 0xF8, 0xC3, 0x38,  // P.!<X..8
                            /* 2698 */  0x58, 0x70, 0xDE, 0x3B, 0x60, 0x9D, 0x3B, 0xC0,  // Xp.;`.;.
                            /* 26A0 */  0x27, 0xF3, 0xDC, 0x81, 0x3E, 0x90, 0x79, 0xC0,  // '...>.y.
                            /* 26A8 */  0xF0, 0x2E, 0x1E, 0x98, 0x73, 0x21, 0x3B, 0x79,  // ....s!;y
                            /* 26B0 */  0x80, 0xE7, 0xB4, 0xE6, 0x11, 0xC3, 0x3F, 0xA3,  // ......?.
                            /* 26B8 */  0x83, 0x6B, 0xC4, 0xB0, 0xAE, 0x1E, 0xB8, 0x01,  // .k......
                            /* 26C0 */  0xF8, 0xEC, 0x01, 0xFF, 0xFF, 0x7F, 0x54, 0x00,  // ......T.
                            /* 26C8 */  0xC3, 0xE1, 0x03, 0x7C, 0x87, 0x4B, 0x38, 0xE7,  // ...|.K8.
                            /* 26D0 */  0x4E, 0xEC, 0xBD, 0x84, 0xDD, 0x2D, 0x61, 0x1C,  // N....-a.
                            /* 26D8 */  0x2E, 0xC1, 0xF6, 0xAD, 0xF7, 0xE1, 0x12, 0x78,  // .......x
                            /* 26E0 */  0x9C, 0x4F, 0xF1, 0xE7, 0x75, 0x98, 0xE7, 0x21,  // .O..u..!
                            /* 26E8 */  0xB0, 0x8D, 0x1A, 0xEE, 0xB9, 0x13, 0x3B, 0x6A,  // ......;j
                            /* 26F0 */  0x60, 0x31, 0x2A, 0x8F, 0x1A, 0x6C, 0xFF, 0xFF,  // `1*..l..
                            /* 26F8 */  0x51, 0xC3, 0x3C, 0x9F, 0xE2, 0x47, 0x0D, 0x1C,  // Q.<..G..
                            /* 2700 */  0x8F, 0x0E, 0xB0, 0xC0, 0x3D, 0x6A, 0x30, 0x9B,  // ....=j0.
                            /* 2708 */  0x38, 0x3A, 0x00, 0xC9, 0x91, 0xF9, 0xE8, 0x00,  // 8:......
                            /* 2710 */  0x5C, 0x47, 0x0D, 0x76, 0x15, 0xA3, 0x46, 0xFC,  // \G.v..F.
                            /* 2718 */  0xFF, 0x8F, 0x0E, 0xC0, 0x6D, 0xD4, 0xC0, 0xE2,  // ....m...
                            /* 2720 */  0x70, 0xE8, 0x51, 0xE3, 0x8E, 0x77, 0x98, 0x69,  // p.Q..w.i
                            /* 2728 */  0x60, 0x50, 0x02, 0x07, 0x89, 0xF3, 0x70, 0x08,  // `P....p.
                            /* 2730 */  0xBE, 0x01, 0xFB, 0x78, 0x07, 0x7C, 0x66, 0x85,  // ...x.|f.
                            /* 2738 */  0x81, 0xF1, 0xB0, 0xD8, 0xA9, 0x0A, 0x5C, 0xC3,  // ......\.
                            /* 2740 */  0xE5, 0x62, 0xCE, 0x0C, 0xE8, 0x43, 0x9A, 0x0F,  // .b...C..
                            /* 2748 */  0x2E, 0xFC, 0x72, 0x84, 0x83, 0x39, 0xCC, 0x93,  // ..r..9..
                            /* 2750 */  0x31, 0xCC, 0x69, 0xFA, 0x4C, 0xE0, 0x63, 0x2B,  // 1.i.L.c+
                            /* 2758 */  0x3B, 0x34, 0x80, 0xE5, 0xFF, 0x3F, 0x64, 0x36,  // ;4...?d6
                            /* 2760 */  0x5C, 0x1F, 0x1A, 0x80, 0xC7, 0xC1, 0x05, 0x73,  // \......s
                            /* 2768 */  0xB2, 0xC2, 0x0E, 0x0D, 0xCE, 0xB0, 0x81, 0xC9,  // ........
                            /* 2770 */  0xA1, 0x83, 0x0D, 0x1B, 0xF8, 0xD8, 0x18, 0x36,  // .......6
                            /* 2778 */  0x90, 0x39, 0x74, 0xF0, 0x61, 0x03, 0xD3, 0x49,  // .9t.a..I
                            /* 2780 */  0x83, 0xE1, 0xFF, 0x7F, 0xFD, 0xC0, 0x0C, 0x1B,  // ........
                            /* 2788 */  0x5C, 0x3A, 0x0E, 0x0F, 0x80, 0xAA, 0x53, 0x20,  // \:....S 
                            /* 2790 */  0x0E, 0xD8, 0xE3, 0xF6, 0x3D, 0x2F, 0x42, 0xF0,  // ....=/B.
                            /* 2798 */  0x17, 0xBD, 0x67, 0xF0, 0xB3, 0x89, 0xF0, 0x3C,  // ..g....<
                            /* 27A0 */  0x69, 0xF4, 0x67, 0xF5, 0x3E, 0x05, 0x68, 0x85,  // i.g.>.h.
                            /* 27A8 */  0x10, 0xDA, 0x2B, 0x4A, 0xB0, 0x38, 0x41, 0x8E,  // ..+J.8A.
                            /* 27B0 */  0x22, 0x48, 0x85, 0x70, 0xE4, 0xB6, 0x68, 0x98,  // "H.p..h.
                            /* 27B8 */  0x40, 0x3E, 0xB4, 0xC0, 0x18, 0x04, 0x47, 0x8E,  // @>....G.
                            /* 27C0 */  0x77, 0x48, 0x61, 0x0F, 0xE2, 0x64, 0xA2, 0x9C,  // wHa..d..
                            /* 27C8 */  0xC7, 0x31, 0x79, 0x74, 0x4F, 0xE1, 0x1E, 0x53,  // .1ytO..S
                            /* 27D0 */  0xB9, 0xC3, 0xD6, 0xF5, 0x09, 0x77, 0x7E, 0xE7,  // .....w~.
                            /* 27D8 */  0x04, 0x16, 0x6D, 0x06, 0x84, 0x49, 0x3F, 0x20,  // ..m..I? 
                            /* 27E0 */  0x48, 0xD6, 0x73, 0x80, 0xC2, 0xF8, 0xF0, 0xE8,  // H.s.....
                            /* 27E8 */  0xB3, 0x3C, 0xFE, 0x4C, 0x70, 0x22, 0xE7, 0xFA,  // .<.Lp"..
                            /* 27F0 */  0x20, 0xC0, 0x4E, 0x96, 0x86, 0xE3, 0xC3, 0xF4,  //  .N.....
                            /* 27F8 */  0xC4, 0xDE, 0xE8, 0x0F, 0xF7, 0xE1, 0xDE, 0x03,  // ........
                            /* 2800 */  0x7E, 0x13, 0x08, 0xC9, 0xAE, 0xFC, 0x0F, 0x8C,  // ~.......
                            /* 2808 */  0xD8, 0x69, 0x9D, 0x94, 0xAF, 0xEF, 0x11, 0x0F,  // .i......
                            /* 2810 */  0xCA, 0x30, 0x09, 0xFE, 0xFF, 0x0F, 0x0A, 0x1C,  // .0......
                            /* 2818 */  0x8D, 0x43, 0x63, 0x87, 0xE1, 0x01, 0x07, 0x3B,  // .Cc....;
                            /* 2820 */  0x88, 0xC3, 0x78, 0x6B, 0x34, 0x81, 0x27, 0x74,  // ..xk4.'t
                            /* 2828 */  0xA2, 0x07, 0xF9, 0x46, 0xF0, 0x74, 0x10, 0x35,  // ...F.t.5
                            /* 2830 */  0x46, 0x73, 0x27, 0x7A, 0xC4, 0x59, 0x01, 0x1C,  // Fs'z.Y..
                            /* 2838 */  0x47, 0x01, 0x58, 0xB3, 0xF7, 0x39, 0xE0, 0x31,  // G.X..9.1
                            /* 2840 */  0x20, 0x54, 0xF0, 0xD7, 0x85, 0xD8, 0xA7, 0x72,  //  T.....r
                            /* 2848 */  0x2E, 0xF1, 0x9F, 0x2B, 0x8D, 0x72, 0x18, 0x98,  // ...+.r..
                            /* 2850 */  0x93, 0x84, 0x6F, 0xFD, 0xEF, 0x09, 0x3E, 0x49,  // ..o...>I
                            /* 2858 */  0x30, 0xF7, 0xE3, 0xD1, 0xFD, 0xB4, 0xB5, 0x19,  // 0.......
                            /* 2860 */  0x09, 0x24, 0x06, 0xB3, 0x85, 0xA1, 0xFB, 0xE5,  // .$......
                            /* 2868 */  0x69, 0x1A, 0xC5, 0x77, 0x81, 0xF3, 0x7A, 0x61,  // i..w..za
                            /* 2870 */  0x88, 0x72, 0x0C, 0x27, 0x11, 0x25, 0x50, 0x94,  // .r.'.%P.
                            /* 2878 */  0x20, 0xD1, 0xDE, 0x75, 0x23, 0x46, 0x8B, 0x11,  //  ..u#F..
                            /* 2880 */  0x37, 0x44, 0xD4, 0x30, 0xF1, 0x22, 0xB4, 0x3F,  // 7D.0.".?
                            /* 2888 */  0x08, 0x12, 0xEE, 0x34, 0xA0, 0x03, 0x87, 0x23,  // ...4...#
                            /* 2890 */  0x8D, 0x06, 0x75, 0x98, 0xE2, 0xA7, 0x81, 0xD7,  // ..u.....
                            /* 2898 */  0x0A, 0x1F, 0x38, 0x0C, 0x72, 0x06, 0x9E, 0xDD,  // ..8.r...
                            /* 28A0 */  0xA3, 0x80, 0x07, 0xCD, 0xEE, 0x08, 0xFE, 0x1D,  // ........
                            /* 28A8 */  0xF8, 0x6C, 0x80, 0x77, 0x0D, 0xA8, 0x4B, 0xC1,  // .l.w..K.
                            /* 28B0 */  0x23, 0x01, 0x3B, 0x7B, 0xC0, 0x3F, 0x65, 0xC0,  // #.;{.?e.
                            /* 28B8 */  0x1F, 0x8F, 0xCF, 0x00, 0x9E, 0xCF, 0x09, 0x27,  // .......'
                            /* 28C0 */  0xB0, 0xFC, 0x41, 0xA0, 0x46, 0x66, 0x68, 0x9F,  // ..A.Ffh.
                            /* 28C8 */  0x01, 0x4E, 0xEB, 0x55, 0xC0, 0x27, 0x84, 0xC3,  // .N.U.'..
                            /* 28D0 */  0x62, 0xA7, 0x02, 0x1F, 0xEA, 0xC1, 0xF0, 0xFF,  // b.......
                            /* 28D8 */  0x1F, 0x0F, 0x18, 0x46, 0xFE, 0x84, 0xE1, 0xFB,  // ...F....
                            /* 28E0 */  0x82, 0xE7, 0xEB, 0x03, 0x07, 0xF6, 0x10, 0x02,  // ........
                            /* 28E8 */  0xB6, 0xA3, 0x02, 0xEE, 0x08, 0x02, 0x4C, 0x44,  // ......LD
                            /* 28F0 */  0x69, 0x19, 0x02, 0x0B, 0x7E, 0x40, 0x90, 0x8D,  // i...~@..
                            /* 28F8 */  0x13, 0x32, 0x3D, 0x77, 0x58, 0x16, 0x90, 0x4E,  // .2=wX..N
                            /* 2900 */  0x65, 0x6C, 0x14, 0x3D, 0x62, 0x0B, 0xF7, 0x94,  // el.=b...
                            /* 2908 */  0x0C, 0x6E, 0x84, 0xD7, 0x3F, 0xDC, 0x51, 0xDF,  // .n..?.Q.
                            /* 2910 */  0x0C, 0x82, 0x20, 0xF1, 0x0F, 0x73, 0x74, 0x4C,  // .. ..stL
                            /* 2918 */  0x1E, 0x82, 0xE3, 0x82, 0x51, 0x10, 0x9F, 0x01,  // ....Q...
                            /* 2920 */  0x1C, 0xE5, 0x38, 0x00, 0xE5, 0x02, 0xE4, 0x8B,  // ..8.....
                            /* 2928 */  0x0D, 0xBB, 0x5C, 0x98, 0xE0, 0x19, 0xC8, 0x87,  // ..\.....
                            /* 2930 */  0x06, 0x38, 0x03, 0x8C, 0x78, 0x72, 0x9E, 0x86,  // .8..xr..
                            /* 2938 */  0xE1, 0x7C, 0x12, 0xE2, 0x70, 0xBE, 0xC0, 0x33,  // .|..p..3
                            /* 2940 */  0x02, 0x76, 0x28, 0x00, 0xDF, 0xD1, 0x1D, 0x77,  // .v(....w
                            /* 2948 */  0x28, 0x80, 0x07, 0xE4, 0x3B, 0x80, 0x95, 0x9E,  // (...;...
                            /* 2950 */  0x03, 0xE8, 0x1C, 0x42, 0x84, 0x89, 0xE6, 0xFF,  // ...B....
                            /* 2958 */  0x3F, 0x3C, 0x26, 0xD8, 0xA8, 0xE8, 0xF1, 0xC9,  // ?<&.....
                            /* 2960 */  0xE3, 0xE2, 0xC7, 0x02, 0x1F, 0x5C, 0x18, 0xF6,  // .....\..
                            /* 2968 */  0x0B, 0x80, 0x45, 0x4F, 0x47, 0xA3, 0x7F, 0x62,  // ..EOG..b
                            /* 2970 */  0x62, 0xC3, 0x36, 0xAC, 0x47, 0xCA, 0x61, 0x8D,  // b.6.G.a.
                            /* 2978 */  0xF6, 0x74, 0xE4, 0x71, 0xF9, 0xDE, 0xE1, 0x1B,  // .t.q....
                            /* 2980 */  0x91, 0x4F, 0x02, 0xEC, 0x9C, 0x0D, 0xAE, 0xB3,  // .O......
                            /* 2988 */  0x01, 0x3B, 0x42, 0x62, 0x4E, 0x07, 0xFC, 0x1A,  // .;BbN...
                            /* 2990 */  0x88, 0x3D, 0x2C, 0xC0, 0x3E, 0x43, 0xF9, 0xB0,  // .=,.>C..
                            /* 2998 */  0x00, 0xFC, 0xEF, 0x26, 0x3E, 0x89, 0xF0, 0xC3,  // ...&>...
                            /* 29A0 */  0x02, 0x60, 0xE6, 0xFF, 0x7F, 0x58, 0x00, 0xD3,  // .`...X..
                            /* 29A8 */  0xA0, 0x7D, 0x58, 0x00, 0x4E, 0x67, 0x03, 0x76,  // .}X.Ng.v
                            /* 29B0 */  0x58, 0x00, 0x43, 0xC6, 0x95, 0xE9, 0xB0, 0x80,  // X.C.....
                            /* 29B8 */  0x53, 0x00, 0xA4, 0x83, 0x0A, 0xFE, 0x00, 0x0E,  // S.......
                            /* 29C0 */  0x27, 0xEF, 0xF2, 0x74, 0x4A, 0xF0, 0x00, 0x9D,  // '..tJ...
                            /* 29C8 */  0x94, 0x42, 0xA9, 0x0F, 0x0B, 0xA8, 0x9C, 0x87,  // .B......
                            /* 29D0 */  0x05, 0x0A, 0x62, 0x40, 0x87, 0x80, 0x90, 0x91,  // ..b@....
                            /* 29D8 */  0xC3, 0x02, 0xEA, 0xA8, 0xE7, 0x91, 0xF0, 0xD3,  // ........
                            /* 29E0 */  0x01, 0x3B, 0xCF, 0x9C, 0x3B, 0x9B, 0xA4, 0xA7,  // .;..;...
                            /* 29E8 */  0xCC, 0xAF, 0x66, 0xBE, 0x2B, 0x30, 0xE4, 0x6A,  // ..f.+0.j
                            /* 29F0 */  0xEE, 0x00, 0x28, 0x30, 0x5F, 0x15, 0x30, 0xE3,  // ..(0_.0.
                            /* 29F8 */  0xF7, 0xF1, 0x0E, 0x1C, 0xC7, 0xAA, 0x04, 0xF5,  // ........
                            /* 2A00 */  0x9D, 0x14, 0x40, 0x8E, 0xCE, 0x23, 0x6F, 0x53,  // ..@..#oS
                            /* 2A08 */  0x53, 0xE5, 0x21, 0x6F, 0x1B, 0x14, 0xC4, 0x03,  // S.!o....
                            /* 2A10 */  0xF3, 0x4D, 0xCB, 0x4E, 0x20, 0xF4, 0xFF, 0x9F,  // .M.N ...
                            /* 2A18 */  0x2A, 0x7F, 0x06, 0xF8, 0x44, 0x0F, 0x0B, 0xE5,  // *...D...
                            /* 2A20 */  0xB0, 0xAA, 0x3F, 0x45, 0x91, 0x6B, 0x0E, 0xB8,  // ..?E.k..
                            /* 2A28 */  0xC7, 0xE3, 0xEB, 0x21, 0x78, 0x9C, 0x1D, 0xD3,  // ...!x...
                            /* 2A30 */  0x74, 0x27, 0xE1, 0x46, 0x2E, 0x0B, 0x74, 0x64,  // t'.F..td
                            /* 2A38 */  0x3E, 0x0D, 0xF8, 0xE8, 0x0F, 0xEF, 0x8E, 0xE1,  // >.......
                            /* 2A40 */  0xFB, 0x99, 0xC7, 0x05, 0x77, 0x4A, 0xBE, 0xF3,  // ....wJ..
                            /* 2A48 */  0xE1, 0xAE, 0x1A, 0x6C, 0xA0, 0x7C, 0x4C, 0x0F,  // ...l.|L.
                            /* 2A50 */  0x29, 0x1E, 0x31, 0xFC, 0x81, 0xC2, 0xBB, 0x77,  // ).1....w
                            /* 2A58 */  0xF0, 0x8B, 0x02, 0x78, 0x6E, 0x28, 0xC0, 0x1B,  // ...xn(..
                            /* 2A60 */  0x96, 0x8F, 0x9C, 0xFF, 0xFF, 0x6F, 0x47, 0xC0,  // .....oG.
                            /* 2A68 */  0xEB, 0x96, 0x8A, 0x39, 0xA1, 0xE0, 0x0E, 0x00,  // ...9....
                            /* 2A70 */  0x5A, 0xBA, 0x6E, 0x28, 0x38, 0xB1, 0xB7, 0x23,  // Z.n(8..#
                            /* 2A78 */  0x28, 0x37, 0x14, 0x38, 0xD2, 0x6E, 0x47, 0x28,  // (7.8.nG(
                            /* 2A80 */  0x51, 0x14, 0x92, 0x74, 0xCE, 0x40, 0x5D, 0x92,  // Q..t.@].
                            /* 2A88 */  0x38, 0x88, 0x8F, 0x04, 0x0E, 0x78, 0x7C, 0x40,  // 8....x|@
                            /* 2A90 */  0x0F, 0xC5, 0xC7, 0x04, 0x58, 0x97, 0x80, 0x40,  // ....X..@
                            /* 2A98 */  0x0F, 0x42, 0xAF, 0x99, 0xFC, 0xBE, 0xE2, 0x13,  // .B......
                            /* 2AA0 */  0x04, 0x9C, 0x2B, 0x12, 0xDC, 0x49, 0xB0, 0x63,  // ..+..I.c
                            /* 2AA8 */  0x07, 0xE6, 0xA6, 0x04, 0xEF, 0xDC, 0x00, 0x78,  // .......x
                            /* 2AB0 */  0xF9, 0xFF, 0x9F, 0x1B, 0x70, 0xE3, 0xF5, 0x45,  // ....p..E
                            /* 2AB8 */  0x09, 0x38, 0x9E, 0x1B, 0xE0, 0x49, 0x5B, 0x90,  // .8...I[.
                            /* 2AC0 */  0xCE, 0x0D, 0xFC, 0x0C, 0x60, 0xF1, 0x17, 0x25,  // ....`..%
                            /* 2AC8 */  0x28, 0x97, 0x03, 0x9C, 0x5C, 0x40, 0x5D, 0x93,  // (...\@].
                            /* 2AD0 */  0xB8, 0x50, 0x18, 0xDD, 0x7E, 0x7D, 0x6A, 0xE0,  // .P..~}j.
                            /* 2AD8 */  0xC7, 0x08, 0xC3, 0x19, 0xC4, 0xE3, 0x75, 0x86,  // ......u.
                            /* 2AE0 */  0x6B, 0x12, 0xFA, 0xCA, 0xE9, 0x71, 0xB0, 0x63,  // k....q.c
                            /* 2AE8 */  0x12, 0x70, 0x8D, 0x31, 0x23, 0xF4, 0xE1, 0xDC,  // .p.1#...
                            /* 2AF0 */  0xC7, 0x6D, 0xDC, 0x98, 0xC0, 0x7D, 0x28, 0xE4,  // .m...}(.
                            /* 2AF8 */  0x27, 0x29, 0xB0, 0xFD, 0xFF, 0x4F, 0x52, 0xE0,  // ')...OR.
                            /* 2B00 */  0x0F, 0x7B, 0x1A, 0x40, 0xC5, 0x3B, 0x0D, 0x50,  // .{.@.;.P
                            /* 2B08 */  0x10, 0x0F, 0xCC, 0x81, 0x4E, 0x52, 0xE8, 0x53,  // ....NR.S
                            /* 2B10 */  0x82, 0x4F, 0x03, 0xEC, 0x86, 0x80, 0xB9, 0x06,  // .O......
                            /* 2B18 */  0x61, 0x0E, 0x52, 0x60, 0x3F, 0x31, 0xF8, 0x20,  // a.R`?1. 
                            /* 2B20 */  0x05, 0xBE, 0xA8, 0x47, 0x17, 0xF4, 0xA9, 0xC9,  // ...G....
                            /* 2B28 */  0x03, 0xC3, 0x13, 0x38, 0xD6, 0x39, 0x0A, 0x14,  // ...8.9..
                            /* 2B30 */  0xA7, 0x13, 0xDC, 0x39, 0x0A, 0xF6, 0x78, 0x61,  // ...9..xa
                            /* 2B38 */  0x0D, 0x13, 0xDE, 0x01, 0x85, 0x9F, 0x5F, 0x80,  // ......_.
                            /* 2B40 */  0xD7, 0xFF, 0xFF, 0xFC, 0x02, 0x2F, 0xD4, 0xF9,  // ...../..
                            /* 2B48 */  0x05, 0x74, 0x16, 0xCE, 0x2F, 0xA0, 0xBB, 0x2F,  // .t../../
                            /* 2B50 */  0xE3, 0x8F, 0x51, 0xE0, 0x99, 0x3F, 0xE6, 0x79,  // ..Q..?.y
                            /* 2B58 */  0xC0, 0xE2, 0xDF, 0x58, 0x51, 0x27, 0x00, 0x0B,  // ...XQ'..
                            /* 2B60 */  0x3C, 0x44, 0x41, 0xB9, 0x23, 0xE0, 0x8E, 0x4F,  // <DA.#..O
                            /* 2B68 */  0x3E, 0x42, 0x71, 0x31, 0x14, 0x92, 0x72, 0xC0,  // >Bq1..r.
                            /* 2B70 */  0x40, 0x5D, 0x59, 0x0D, 0x66, 0x10, 0x1F, 0x22,  // @]Y.f.."
                            /* 2B78 */  0x7C, 0x00, 0xF2, 0xC1, 0x01, 0x1C, 0xC7, 0x27,  // |......'
                            /* 2B80 */  0x70, 0x1F, 0x0E, 0x7C, 0x7C, 0x02, 0xEE, 0xFF,  // p..||...
                            /* 2B88 */  0xFF, 0xF3, 0x02, 0x70, 0x38, 0xD1, 0xF8, 0xBC,  // ...p8...
                            /* 2B90 */  0x00, 0x9C, 0x8E, 0x4F, 0xF8, 0xF3, 0x02, 0x3E,  // ...O...>
                            /* 2B98 */  0xFC, 0x19, 0x0E, 0x75, 0x5E, 0xB1, 0x30, 0x20,  // ...u^.0 
                            /* 2BA0 */  0x1D, 0x9E, 0xB0, 0xD3, 0x3D, 0xF0, 0xB3, 0x78,  // ....=..x
                            /* 2BA8 */  0xD9, 0xF7, 0x84, 0x0C, 0xC7, 0x8E, 0x71, 0xD8,  // ......q.
                            /* 2BB0 */  0xA7, 0x82, 0x4F, 0x50, 0x3C, 0x3A, 0x89, 0x42,  // ..OP<:.B
                            /* 2BB8 */  0xDF, 0x5B, 0x51, 0x31, 0x0F, 0x0D, 0x14, 0xC4,  // .[Q1....
                            /* 2BC0 */  0x80, 0x3E, 0x41, 0x01, 0x16, 0x8E, 0x47, 0xC0,  // .>A...G.
                            /* 2BC8 */  0xE2, 0xEC, 0x67, 0x74, 0xFF, 0xFF, 0x61, 0x1C,  // ..gt..a.
                            /* 2BD0 */  0x7B, 0xA8, 0x14, 0xC4, 0x43, 0xF5, 0xB9, 0xD5,  // {...C...
                            /* 2BD8 */  0xD7, 0x2A, 0x9F, 0x5B, 0x71, 0x57, 0x00, 0xF8,  // .*.[qW..
                            /* 2BE0 */  0xE7, 0x56, 0xE0, 0x69, 0x4C, 0x80, 0x36, 0x48,  // .V.iL.6H
                            /* 2BE8 */  0x72, 0xD6, 0x00, 0x1E, 0xD1, 0xCE, 0x1A, 0xA0,  // r.......
                            /* 2BF0 */  0xF3, 0x70, 0xD6, 0x00, 0xDD, 0x68, 0x1E, 0x75,  // .p...h.u
                            /* 2BF8 */  0xC0, 0x76, 0x14, 0xC0, 0x9E, 0x37, 0x30, 0x67,  // .v...70g
                            /* 2C00 */  0x01, 0x9C, 0xB6, 0x2B, 0x37, 0x6A, 0xC8, 0x56,  // ...+7j.V
                            /* 2C08 */  0x7B, 0xDC, 0x80, 0x7E, 0x91, 0xC3, 0x0D, 0xEA,  // {..~....
                            /* 2C10 */  0xCC, 0x3C, 0x06, 0xC3, 0xBC, 0xE1, 0xFB, 0xFF,  // .<......
                            /* 2C18 */  0x0F, 0xEA, 0x1B, 0x8E, 0xD5, 0x1C, 0x39, 0x50,  // ......9P
                            /* 2C20 */  0x3A, 0x28, 0x94, 0xFB, 0xC8, 0x81, 0x4A, 0x7A,  // :(....Jz
                            /* 2C28 */  0x32, 0xA0, 0x20, 0x06, 0xF4, 0x0D, 0x0F, 0xB8,  // 2. .....
                            /* 2C30 */  0xDD, 0x39, 0x80, 0xB5, 0x9C, 0x3B, 0x07, 0x6A,  // .9...;.j
                            /* 2C38 */  0xAB, 0x9E, 0xAB, 0x29, 0x3C, 0x57, 0x87, 0xBB,  // ...)<W..
                            /* 2C40 */  0x73, 0xA0, 0xA5, 0xDD, 0x39, 0x20, 0x1C, 0x04,  // s...9 ..
                            /* 2C48 */  0xC0, 0x71, 0xF1, 0x00, 0xBC, 0xFC, 0xFF, 0x2F,  // .q...../
                            /* 2C50 */  0x1E, 0x60, 0x08, 0x79, 0xF1, 0x00, 0x1D, 0xB8,  // .`.y....
                            /* 2C58 */  0x2F, 0x1E, 0xE0, 0x82, 0x7F, 0xF1, 0x00, 0xFB,  // /.......
                            /* 2C60 */  0x7D, 0x00, 0x77, 0x72, 0xF2, 0x81, 0x00, 0xCE,  // }.wr....
                            /* 2C68 */  0xDB, 0xC3, 0x31, 0x6C, 0x8C, 0x84, 0xC5, 0x78,  // ..1l...x
                            /* 2C70 */  0x03, 0x48, 0x38, 0x0C, 0xEA, 0x3C, 0xE1, 0x53,  // .H8..<.S
                            /* 2C78 */  0x01, 0x7E, 0x9C, 0x87, 0x79, 0x74, 0x07, 0xC6,  // .~..yt..
                            /* 2C80 */  0xEE, 0xCF, 0x86, 0xE3, 0x47, 0x00, 0x0F, 0xAC,  // ....G...
                            /* 2C88 */  0xF9, 0xC1, 0x68, 0x1C, 0xE7, 0xEB, 0x99, 0x85,  // ..h.....
                            /* 2C90 */  0x64, 0xA7, 0x06, 0xDF, 0x17, 0x71, 0xA7, 0x80,  // d....q..
                            /* 2C98 */  0xB3, 0x39, 0xA8, 0xDA, 0x11, 0x35, 0xD3, 0x53,  // .9...5.S
                            /* 2CA0 */  0x32, 0x81, 0x07, 0xCF, 0xD0, 0x38, 0x34, 0x76,  // 2....84v
                            /* 2CA8 */  0x18, 0xBE, 0x15, 0x04, 0x3B, 0x88, 0xC3, 0x78,  // ....;..x
                            /* 2CB0 */  0x8B, 0xE3, 0x13, 0x3A, 0xCD, 0x72, 0x6F, 0x0B,  // ...:.ro.
                            /* 2CB8 */  0xBA, 0xB9, 0x45, 0x8D, 0xD1, 0xDC, 0x09, 0x02,  // ..E.....
                            /* 2CC0 */  0x31, 0x76, 0x70, 0x80, 0xF9, 0x40, 0xF2, 0xD0,  // 1vp..@..
                            /* 2CC8 */  0x60, 0x88, 0x58, 0x7C, 0xC4, 0x31, 0x42, 0x3D,  // `.X|.1B=
                            /* 2CD0 */  0x00, 0x78, 0x44, 0xAD, 0x82, 0xC8, 0x27, 0x8A,  // .xD...'.
                            /* 2CD8 */  0x30, 0xFE, 0xFF, 0xB1, 0x4F, 0xE6, 0xD4, 0x7D,  // 0...O..}
                            /* 2CE0 */  0x2C, 0xF0, 0xAD, 0xC0, 0x27, 0x00, 0x4F, 0x28,  // ,...'.O(
                            /* 2CE8 */  0xF2, 0x59, 0x3C, 0x55, 0x18, 0xE5, 0x60, 0x30,  // .Y<U..`0
                            /* 2CF0 */  0x77, 0x2D, 0x7B, 0xBE, 0x49, 0x90, 0xEB, 0x17,  // w-{.I...
                            /* 2CF8 */  0x73, 0x3F, 0x2C, 0x4D, 0xE0, 0xB0, 0x8E, 0xEB,  // s?,M....
                            /* 2D00 */  0x1D, 0xB4, 0xB5, 0xD3, 0x84, 0x46, 0xD3, 0x16,  // .....F..
                            /* 2D08 */  0x92, 0x10, 0x5E, 0x20, 0x9E, 0x21, 0xA2, 0xC4,  // ..^ .!..
                            /* 2D10 */  0x89, 0x14, 0xE4, 0xC5, 0x24, 0x4A, 0x6F, 0x28,  // ....$Jo(
                            /* 2D18 */  0x02, 0x8C, 0x19, 0x25, 0xC8, 0xEB, 0x68, 0xB0,  // ...%..h.
                            /* 2D20 */  0x57, 0x9B, 0x90, 0x21, 0x62, 0x56, 0x08, 0xAE,  // W..!bV..
                            /* 2D28 */  0x01, 0x44, 0x89, 0xD0, 0xFE, 0x20, 0x48, 0xE4,  // .D... H.
                            /* 2D30 */  0x97, 0x80, 0x7C, 0xDC, 0xA7, 0xE8, 0x68, 0xF8,  // ..|...h.
                            /* 2D38 */  0xED, 0x95, 0x9F, 0x09, 0x5E, 0x14, 0x3C, 0xA9,  // ....^.<.
                            /* 2D40 */  0x27, 0x1D, 0xCF, 0xF5, 0xCC, 0xEA, 0x9C, 0x1C,  // '.......
                            /* 2D48 */  0x25, 0xF0, 0xD0, 0x7C, 0x0C, 0x81, 0xE3, 0x1A,  // %..|....
                            /* 2D50 */  0x50, 0x57, 0x83, 0x07, 0x03, 0x76, 0x60, 0x30,  // PW...v`0
                            /* 2D58 */  0x1C, 0x1F, 0xA2, 0x4F, 0x0D, 0x9E, 0xC0, 0x21,  // ...O...!
                            /* 2D60 */  0x32, 0x40, 0x9F, 0x43, 0xE0, 0x8F, 0xC7, 0x27,  // 2@.C...'
                            /* 2D68 */  0x01, 0xCF, 0xE7, 0x84, 0x13, 0x58, 0xFE, 0x20,  // .....X. 
                            /* 2D70 */  0x50, 0x23, 0x33, 0xB4, 0xE7, 0x7A, 0x5A, 0xCF,  // P#3..zZ.
                            /* 2D78 */  0x02, 0x3E, 0x27, 0x1C, 0x16, 0x13, 0x7B, 0xF7,  // .>'...{.
                            /* 2D80 */  0xA1, 0xE3, 0x01, 0xFF, 0x65, 0xEF, 0xF1, 0x20,  // ....e.. 
                            /* 2D88 */  0xC2, 0x5B, 0x83, 0xE7, 0x6B, 0x82, 0x71, 0x6F,  // .[..k.qo
                            /* 2D90 */  0x74, 0x50, 0xC6, 0xFC, 0x40, 0xE2, 0xE1, 0xB0,  // tP..@...
                            /* 2D98 */  0x78, 0x77, 0x4A, 0x2A, 0xEA, 0x70, 0x82, 0xBA,  // xwJ*.p..
                            /* 2DA0 */  0xD4, 0x62, 0x0E, 0x04, 0x6F, 0x1D, 0x86, 0x78,  // .b..o..x
                            /* 2DA8 */  0x36, 0x61, 0xFF, 0x8D, 0xFF, 0xFF, 0x81, 0x81,  // 6a......
                            /* 2DB0 */  0xE1, 0x08, 0x83, 0x3B, 0x4D, 0xC0, 0x3D, 0x44,  // ...;M.=D
                            /* 2DB8 */  0xB0, 0x29, 0x71, 0x94, 0x47, 0x07, 0xEB, 0xBA,  // .)q.G...
                            /* 2DC0 */  0x23, 0x81, 0x2E, 0xF2, 0x38, 0xD1, 0xC0, 0x6C,  // #...8..l
                            /* 2DC8 */  0x26, 0x21, 0x03, 0x3F, 0x23, 0xBC, 0xA5, 0x98,  // &!.?#...
                            /* 2DD0 */  0x60, 0xC0, 0x81, 0x82, 0xEA, 0x40, 0x00, 0x8E,  // `....@..
                            /* 2DD8 */  0x8B, 0x90, 0x07, 0x0A, 0xA6, 0x39, 0x31, 0x90,  // .....91.
                            /* 2DE0 */  0x60, 0x07, 0xC5, 0x26, 0xEA, 0x91, 0x82, 0xF1,  // `..&....
                            /* 2DE8 */  0xD6, 0x8D, 0x03, 0x36, 0x6A, 0xC4, 0x80, 0xE7,  // ...6j...
                            /* 2DF0 */  0xF0, 0x1C, 0xC2, 0x47, 0x0A, 0x2E, 0x40, 0x9F,  // ...G..@.
                            /* 2DF8 */  0x10, 0xC0, 0xFC, 0xFF, 0x1F, 0x29, 0x9C, 0xDB,  // .....)..
                            /* 2E00 */  0x8F, 0xE7, 0xE4, 0x13, 0x02, 0xE6, 0x1A, 0x0E,  // ........
                            /* 2E08 */  0xBE, 0x0B, 0xB0, 0xAF, 0xEB, 0xF8, 0x53, 0x0D,  // ......S.
                            /* 2E10 */  0x9B, 0x55, 0xD8, 0x67, 0x8C, 0xA8, 0xB5, 0x5E,  // .U.g...^
                            /* 2E18 */  0x75, 0x08, 0xCC, 0xD3, 0x05, 0x3B, 0x49, 0x79,  // u....;Iy
                            /* 2E20 */  0xB0, 0xE0, 0x01, 0xF5, 0x60, 0xE1, 0x5F, 0x64,  // ....`._d
                            /* 2E28 */  0xC1, 0x33, 0x2A, 0xEC, 0x2C, 0x9E, 0x4F, 0xCE,  // .3*.,.O.
                            /* 2E30 */  0x8A, 0x1F, 0x13, 0xD8, 0x70, 0xC1, 0x17, 0xF8,  // ....p...
                            /* 2E38 */  0x9C, 0x00, 0xE5, 0x14, 0xE0, 0xB9, 0xE2, 0x0E,  // ........
                            /* 2E40 */  0x26, 0xE0, 0xBA, 0x85, 0x7B, 0xAC, 0xF0, 0xE5,  // &...{...
                            /* 2E48 */  0x9D, 0x13, 0x40, 0x36, 0x25, 0xCC, 0x31, 0x81,  // ..@6%.1.
                            /* 2E50 */  0xFD, 0xFF, 0x07, 0x0A, 0xB6, 0x7B, 0xAF, 0x07,  // .....{..
                            /* 2E58 */  0x8A, 0x1B, 0x9E, 0x81, 0x43, 0xFA, 0x90, 0x80,  // ....C...
                            /* 2E60 */  0x3D, 0x60, 0x80, 0xEB, 0x40, 0xE6, 0x03, 0x06,  // =`..@...
                            /* 2E68 */  0xF0, 0x18, 0x13, 0x9B, 0x29, 0x7E, 0xA8, 0xC0,  // ....)~..
                            /* 2E70 */  0xE3, 0x72, 0xEE, 0xA1, 0x82, 0xF9, 0xFA, 0xEA,  // .r......
                            /* 2E78 */  0xA1, 0x02, 0x93, 0x31, 0x79, 0xA8, 0xC0, 0x20,  // ...1y.. 
                            /* 2E80 */  0xB8, 0x80, 0xFF, 0xFF, 0x50, 0xB1, 0xA3, 0xF1,  // ....P...
                            /* 2E88 */  0x6D, 0xEE, 0x8D, 0x8E, 0x8F, 0x15, 0x1B, 0x71,  // m......q
                            /* 2E90 */  0xAC, 0xA0, 0x1A, 0x91, 0x8F, 0x43, 0xC0, 0x63,  // .....C.c
                            /* 2E98 */  0x50, 0x98, 0xC1, 0x02, 0x83, 0x8B, 0xB6, 0x8F,  // P.......
                            /* 2EA0 */  0x09, 0xF8, 0x63, 0x87, 0x21, 0xCE, 0xE6, 0xD5,  // ..c.!...
                            /* 2EA8 */  0x90, 0x5D, 0x88, 0xD8, 0x58, 0xC1, 0x65, 0xE2,  // .]..X.e.
                            /* 2EB0 */  0x24, 0x05, 0x84, 0xE6, 0x84, 0xB9, 0x10, 0x61,  // $......a
                            /* 2EB8 */  0x4E, 0x44, 0xC0, 0x60, 0x38, 0x3E, 0xFE, 0x9D,  // ND.`8>..
                            /* 2EC0 */  0x2B, 0xFE, 0xFF, 0x3F, 0x32, 0x76, 0xD1, 0xF7,  // +..?2v..
                            /* 2EC8 */  0x60, 0xC1, 0xA3, 0x62, 0xB0, 0xA0, 0x38, 0x63,  // `..b..8c
                            /* 2ED0 */  0x1E, 0x2C, 0x58, 0x06, 0x65, 0x88, 0xD7, 0xC6,  // .,X.e...
                            /* 2ED8 */  0xC3, 0x05, 0x2E, 0xD1, 0x4F, 0x0A, 0x50, 0x0E,  // ....O.P.
                            /* 2EE0 */  0x90, 0xBE, 0x67, 0xB2, 0x8B, 0x12, 0x1B, 0x2D,  // ..g....-
                            /* 2EE8 */  0xF8, 0xC6, 0xEA, 0xD1, 0x02, 0x0F, 0x30, 0x4F,  // ......0O
                            /* 2EF0 */  0x28, 0xFA, 0x03, 0xDC, 0xAB, 0x98, 0xB1, 0x1E,  // (.......
                            /* 2EF8 */  0x31, 0x3D, 0x58, 0x1F, 0x6F, 0x0C, 0x13, 0xF9,  // 1=X.o...
                            /* 2F00 */  0xB1, 0x08, 0x9C, 0x82, 0xCF, 0xCA, 0xA0, 0x40,  // .......@
                            /* 2F08 */  0x89, 0xFE, 0x30, 0xE0, 0x13, 0x48, 0x88, 0x68,  // ..0..H.h
                            /* 2F10 */  0xBE, 0xB1, 0x1A, 0xE4, 0xFF, 0x1F, 0xC8, 0xA7,  // ........
                            /* 2F18 */  0x65, 0xA3, 0xFA, 0x46, 0x60, 0x97, 0x53, 0x11,  // e..F`.S.
                            /* 2F20 */  0xE6, 0xB3, 0x70, 0xB4, 0x43, 0x8B, 0x7E, 0x32,  // ..p.C.~2
                            /* 2F28 */  0x21, 0x12, 0xF8, 0x10, 0x86, 0x1F, 0x08, 0x47,  // !......G
                            /* 2F30 */  0x7D, 0x7C, 0x66, 0x03, 0x79, 0x83, 0x36, 0xFE,  // }|f.y.6.
                            /* 2F38 */  0x71, 0xF9, 0xA0, 0x6B, 0x84, 0xE3, 0x7A, 0xBE,  // q..k..z.
                            /* 2F40 */  0x7D, 0x46, 0xF0, 0x3D, 0x0C, 0x73, 0x8A, 0xC6,  // }F.=.s..
                            /* 2F48 */  0x29, 0xB3, 0x02, 0xC2, 0xA4, 0x3F, 0x28, 0x25,  // )....?(%
                            /* 2F50 */  0xEB, 0x3D, 0x40, 0x61, 0x7C, 0x26, 0x06, 0x5C,  // .=@a|&.\
                            /* 2F58 */  0x1D, 0x54, 0x7D, 0x58, 0x00, 0xC7, 0x71, 0x00,  // .T}X..q.
                            /* 2F60 */  0xD6, 0x5D, 0x9C, 0x1D, 0x03, 0x42, 0x05, 0x7F,  // .]...B..
                            /* 2F68 */  0x5C, 0x88, 0xFD, 0xD2, 0x60, 0xFC, 0x08, 0x4F,  // \...`..O
                            /* 2F70 */  0xC3, 0xF0, 0xEF, 0xE9, 0x27, 0x14, 0xF5, 0x2D,  // ....'..-
                            /* 2F78 */  0x20, 0xD0, 0x63, 0x70, 0x04, 0x9F, 0x3F, 0x22,  //  .cp..?"
                            /* 2F80 */  0x9D, 0xD4, 0x6B, 0x70, 0xA4, 0xF7, 0x61, 0x0F,  // ..kp..a.
                            /* 2F88 */  0xE1, 0xB8, 0x1E, 0x5E, 0xA3, 0x84, 0x78, 0x6D,  // ...^..xm
                            /* 2F90 */  0x88, 0x10, 0x28, 0x4A, 0xD0, 0x20, 0x6F, 0x93,  // ..(J. o.
                            /* 2F98 */  0x11, 0x82, 0x84, 0x8B, 0x1B, 0xE4, 0xFC, 0x8C,  // ........
                            /* 2FA0 */  0x77, 0x6A, 0x4F, 0xC3, 0x2C, 0x9C, 0x81, 0xFF,  // wjO.,...
                            /* 2FA8 */  0xFF, 0x89, 0x83, 0x9D, 0x86, 0x01, 0x7E, 0x1C,  // ......~.
                            /* 2FB0 */  0x38, 0x70, 0x07, 0x11, 0xB0, 0x1D, 0x15, 0x70,  // 8p.....p
                            /* 2FB8 */  0x47, 0x10, 0x60, 0x92, 0xFC, 0xE5, 0xAB, 0xB3,  // G.`.....
                            /* 2FC0 */  0x87, 0x93, 0xAE, 0x55, 0x36, 0xD6, 0x6A, 0x02,  // ...U6.j.
                            /* 2FC8 */  0x9D, 0x3B, 0xAC, 0x03, 0x48, 0xD3, 0xE1, 0x87,  // .;..H...
                            /* 2FD0 */  0x7F, 0x76, 0x51, 0x31, 0x52, 0x8C, 0xD3, 0x78,  // .vQ1R..x
                            /* 2FD8 */  0x45, 0xF0, 0x35, 0xD5, 0x27, 0x09, 0xA7, 0x3E,  // E.5.'..>
                            /* 2FE0 */  0x2E, 0xE8, 0xBC, 0x6C, 0xDE, 0xFF, 0x7F, 0x82,  // ...l....
                            /* 2FE8 */  0x79, 0x49, 0x94, 0x79, 0x4C, 0x74, 0x08, 0x4E,  // yI.yLt.N
                            /* 2FF0 */  0x79, 0x6C, 0xA6, 0x20, 0x06, 0x74, 0x84, 0x53,  // yl. .t.S
                            /* 2FF8 */  0x31, 0xFA, 0xC0, 0xE4, 0xC3, 0x34, 0x66, 0x58,  // 1....4fX
                            /* 3000 */  0xAF, 0x0C, 0x6C, 0x8E, 0xBE, 0x0C, 0xF0, 0x69,  // ..l....i
                            /* 3008 */  0xF9, 0x78, 0x60, 0x60, 0xAB, 0xB9, 0x07, 0xA1,  // .x``....
                            /* 3010 */  0xC0, 0x7C, 0x14, 0x38, 0x64, 0x9F, 0x7E, 0xC1,  // .|.8d.~.
                            /* 3018 */  0xA7, 0xEF, 0x40, 0x00, 0x0A, 0x20, 0xCF, 0xDF,  // ..@.. ..
                            /* 3020 */  0x67, 0x9C, 0x67, 0x00, 0x36, 0x85, 0xC7, 0x1C,  // g.g.6...
                            /* 3028 */  0xA3, 0x19, 0x9D, 0x5F, 0x9B, 0x3C, 0x53, 0x1E,  // ..._.<S.
                            /* 3030 */  0x76, 0xA6, 0x14, 0xC4, 0x33, 0x75, 0x90, 0xEB,  // v...3u..
                            /* 3038 */  0x34, 0x94, 0xD1, 0x63, 0xAF, 0x25, 0xEC, 0xB6,  // 4..c.%..
                            /* 3040 */  0x01, 0x67, 0xCC, 0x11, 0x1F, 0x0B, 0x3C, 0x0D,  // .g....<.
                            /* 3048 */  0xC3, 0x79, 0xB0, 0x1C, 0xCE, 0x83, 0xE5, 0x63,  // .y.....c
                            /* 3050 */  0xF1, 0x64, 0xC1, 0x75, 0x65, 0xC4, 0x4D, 0x16,  // .d.ue.M.
                            /* 3058 */  0x8C, 0xF0, 0x98, 0x60, 0x83, 0xA2, 0xE3, 0xF1,  // ...`....
                            /* 3060 */  0xB0, 0xF8, 0xD9, 0xC0, 0x17, 0x1E, 0x86, 0xFD,  // ........
                            /* 3068 */  0xFF, 0x7F, 0x72, 0xB0, 0xE8, 0x3B, 0x02, 0xB9,  // ..r..;..
                            /* 3070 */  0xB4, 0x63, 0x60, 0x3D, 0x50, 0x0E, 0x6B, 0xB4,  // .c`=P.k.
                            /* 3078 */  0xB0, 0x2F, 0x39, 0xEF, 0x1C, 0x3E, 0xB0, 0xF8,  // ./9..>..
                            /* 3080 */  0x0A, 0xC6, 0x60, 0x3D, 0x58, 0x0F, 0xE8, 0x8D,  // ..`=X...
                            /* 3088 */  0x07, 0x2C, 0x77, 0x0A, 0x76, 0x00, 0xF7, 0xBD,  // .,w.v...
                            /* 3090 */  0xC2, 0x67, 0x35, 0x5F, 0xD6, 0x7C, 0x11, 0xC0,  // .g5_.|..
                            /* 3098 */  0xFD, 0x30, 0x98, 0xF8, 0x4B, 0x06, 0x3A, 0xDA,  // .0..K.:.
                            /* 30A0 */  0xA2, 0x74, 0xC9, 0xE0, 0xB8, 0x2F, 0x19, 0x30,  // .t.../.0
                            /* 30A8 */  0x83, 0x5C, 0x32, 0x28, 0x84, 0x23, 0x50, 0x28,  // .\2(.#P(
                            /* 30B0 */  0x00, 0x84, 0xCE, 0x0A, 0x5C, 0x32, 0x1C, 0x05,  // ....\2..
                            /* 30B8 */  0xF1, 0x88, 0x1D, 0xE3, 0xAC, 0x80, 0xBE, 0xB8,  // ........
                            /* 30C0 */  0xF8, 0x92, 0x81, 0x39, 0x2A, 0xC0, 0x3C, 0x65,  // ...9*.<e
                            /* 30C8 */  0xB0, 0xA3, 0x02, 0xEC, 0x6B, 0x06, 0xF8, 0x8E,  // ....k...
                            /* 30D0 */  0x13, 0xE0, 0x1E, 0x14, 0x38, 0x8E, 0x13, 0xF0,  // ....8...
                            /* 30D8 */  0xFF, 0xFF, 0xC7, 0x09, 0xC0, 0xC3, 0x89, 0xC4,  // ........
                            /* 30E0 */  0xC7, 0x09, 0xE0, 0x74, 0x7A, 0x60, 0xC7, 0x09,  // ...tz`..
                            /* 30E8 */  0x30, 0xC8, 0xFB, 0x71, 0xE9, 0x38, 0xC1, 0x2F,  // 0..q.8./
                            /* 30F0 */  0xE1, 0x96, 0xBC, 0x3A, 0x5D, 0x81, 0xF0, 0xD8,  // ...:]...
                            /* 30F8 */  0x27, 0xE7, 0x89, 0x84, 0x39, 0xD9, 0x57, 0x38,  // '...9.W8
                            /* 3100 */  0xCF, 0xEA, 0x90, 0x8D, 0xD4, 0x3B, 0x0E, 0x19,  // .....;..
                            /* 3108 */  0xF8, 0x33, 0xA2, 0x21, 0x5E, 0x8C, 0x98, 0xA8,  // .3.!^...
                            /* 3110 */  0x01, 0xE8, 0x50, 0xC1, 0xE5, 0xC0, 0x48, 0x0C,  // ..P...H.
                            /* 3118 */  0x84, 0x0E, 0x15, 0x3C, 0xFE, 0x5A, 0x05, 0x66,  // ...<.Z.f
                            /* 3120 */  0x10, 0x5F, 0xD4, 0x7D, 0x69, 0xF7, 0xE5, 0x12,  // ._.}i...
                            /* 3128 */  0x77, 0x24, 0xF0, 0x78, 0x8E, 0xEB, 0x28, 0x1E,  // w$.x..(.
                            /* 3130 */  0xAF, 0x3C, 0x5C, 0x4F, 0x07, 0x4C, 0xE3, 0x7D,  // .<\O.L.}
                            /* 3138 */  0xB2, 0x01, 0xDB, 0xFF, 0xFF, 0x7C, 0x81, 0xBF,  // .....|..
                            /* 3140 */  0x4E, 0x82, 0xEF, 0x80, 0xE1, 0xF1, 0xE1, 0xCE,  // N.......
                            /* 3148 */  0x20, 0xBE, 0x9E, 0x79, 0x58, 0xA7, 0xE4, 0x41,  //  ..yX..A
                            /* 3150 */  0x81, 0x7D, 0xE4, 0x1E, 0x14, 0xF8, 0xA2, 0x0D,  // .}......
                            /* 3158 */  0x0A, 0x3D, 0x00, 0xDF, 0xDA, 0xD9, 0x09, 0x00,  // .=......
                            /* 3160 */  0x58, 0x1E, 0x31, 0x3C, 0x3A, 0x60, 0x71, 0x51,  // X.1<:`qQ
                            /* 3168 */  0xF7, 0xE8, 0x80, 0xE1, 0xFF, 0x9F, 0xC0, 0x50,  // .......P
                            /* 3170 */  0x1E, 0x1D, 0xF8, 0x8E, 0x2E, 0xC0, 0xE3, 0x2A,  // .......*
                            /* 3178 */  0xEE, 0xA3, 0x0B, 0xB8, 0x60, 0xF9, 0xD1, 0x05,  // ....`...
                            /* 3180 */  0x3C, 0x77, 0x7A, 0x7E, 0xB0, 0x02, 0xDF, 0x75,  // <wz~...u
                            /* 3188 */  0x00, 0x3C, 0x9F, 0x17, 0x8B, 0x39, 0x5D, 0xA1,  // .<...9].
                            /* 3190 */  0xCE, 0x2F, 0x16, 0x78, 0xBA, 0x82, 0x72, 0x7E,  // ./.x..r~
                            /* 3198 */  0x01, 0x97, 0x84, 0x33, 0x16, 0xEA, 0x86, 0xEE,  // ...3....
                            /* 31A0 */  0xE3, 0x1D, 0xFC, 0x03, 0x09, 0xFE, 0xA4, 0xCD,  // ........
                            /* 31A8 */  0x6E, 0xFE, 0x3E, 0x36, 0xC0, 0x3C, 0x3F, 0xF1,  // n.>6.<?.
                            /* 31B0 */  0xFF, 0xFF, 0xA1, 0x05, 0xFC, 0x23, 0x7D, 0x78,  // .....#}x
                            /* 31B8 */  0x36, 0xD0, 0x63, 0x03, 0xF0, 0xBF, 0xE1, 0xFA,  // 6.c.....
                            /* 31C0 */  0xD8, 0x00, 0x9C, 0x0E, 0x50, 0xF8, 0x63, 0x03,  // ....P.c.
                            /* 31C8 */  0xB8, 0xC4, 0x9D, 0xA2, 0x50, 0xA7, 0x24, 0x0B,  // ....P.$.
                            /* 31D0 */  0x3E, 0x45, 0x41, 0xB9, 0x4A, 0xFB, 0xA2, 0xEB,  // >EA.J...
                            /* 31D8 */  0x5B, 0x03, 0xFC, 0x43, 0x14, 0xB0, 0x99, 0x0D,  // [..C....
                            /* 31E0 */  0xE6, 0xFF, 0x7F, 0xA6, 0x80, 0x7F, 0x88, 0x02,  // ........
                            /* 31E8 */  0x98, 0x71, 0x02, 0x00, 0x96, 0x87, 0x28, 0x60,  // .q....(`
                            /* 31F0 */  0x33, 0x3A, 0x18, 0xFF, 0xFF, 0xD1, 0x01, 0xA7,  // 3:......
                            /* 31F8 */  0x43, 0x14, 0xE0, 0xEA, 0xF0, 0xE1, 0x43, 0x14,  // C.....C.
                            /* 3200 */  0x70, 0xBC, 0x0E, 0xE0, 0x91, 0xDE, 0x5E, 0xE0,  // p.....^.
                            /* 3208 */  0x11, 0x94, 0x72, 0x88, 0x42, 0x9D, 0x4F, 0x2C,  // ..r.B.O,
                            /* 3210 */  0xEF, 0x10, 0x05, 0xE5, 0x8A, 0x00, 0x9E, 0x33,  // .......3
                            /* 3218 */  0x14, 0xFC, 0xFF, 0xFF, 0x19, 0x0A, 0xE0, 0xC4,  // ........
                            /* 3220 */  0xD1, 0xDE, 0x67, 0x28, 0xE0, 0x78, 0x42, 0x00,  // ..g(.xB.
                            /* 3228 */  0xCB, 0x93, 0x81, 0x45, 0xF3, 0x31, 0x10, 0x16,  // ...E.1..
                            /* 3230 */  0xE3, 0x71, 0xA0, 0x30, 0x30, 0xA8, 0xB1, 0xF9,  // .q.00...
                            /* 3238 */  0x50, 0x80, 0x1F, 0xE6, 0x51, 0x1E, 0xDC, 0x71,  // P...Q..q
                            /* 3240 */  0xB1, 0x13, 0xB8, 0xE1, 0xF8, 0x09, 0xC0, 0xE3,  // ........
                            /* 3248 */  0x6A, 0x7E, 0x34, 0x3A, 0x25, 0x1C, 0x87, 0x27,  // j~4:%..'
                            /* 3250 */  0x96, 0xE0, 0xFF, 0x1F, 0xD2, 0xD2, 0x06, 0x88,  // ........
                            /* 3258 */  0x92, 0x02, 0xA1, 0x19, 0x1D, 0xD0, 0x21, 0xBD,  // ......!.
                            /* 3260 */  0x2E, 0x44, 0x7C, 0xE9, 0x36, 0x4C, 0x02, 0x8F,  // .D|.6L..
                            /* 3268 */  0x9D, 0xA1, 0x71, 0x68, 0xEC, 0x30, 0x3C, 0x46,  // ..qh.0<F
                            /* 3270 */  0x0F, 0xE2, 0xD9, 0xC1, 0x27, 0x70, 0x36, 0xA1,  // ....'p6.
                            /* 3278 */  0x73, 0x2D, 0xF7, 0xB2, 0xA0, 0xD3, 0x4C, 0xD4,  // s-....L.
                            /* 3280 */  0x18, 0xCD, 0x9D, 0x62, 0x10, 0x43, 0x07, 0x07,  // ...b.C..
                            /* 3288 */  0x98, 0x35, 0xDF, 0x22, 0xC8, 0x80, 0x8D, 0xC5,  // .5."....
                            /* 3290 */  0x66, 0x1C, 0x23, 0x54, 0x8C, 0xC7, 0x90, 0x47,  // f.#T...G
                            /* 3298 */  0x64, 0x1C, 0xF6, 0xC9, 0xC4, 0x3F, 0x47, 0x5F,  // d....?G_
                            /* 32A0 */  0x03, 0x3C, 0x36, 0x43, 0x9D, 0x50, 0xE4, 0x97,  // .<6C.P..
                            /* 32A8 */  0x27, 0x1F, 0xBF, 0xD9, 0x60, 0xF8, 0x19, 0xC3,  // '...`...
                            /* 32B0 */  0x57, 0x81, 0xB7, 0x19, 0xDF, 0x0D, 0x4C, 0xD0,  // W.....L.
                            /* 32B8 */  0xFD, 0x35, 0x44, 0x97, 0x87, 0x10, 0xA7, 0x15,  // .5D.....
                            /* 32C0 */  0xE2, 0xC4, 0x9E, 0x1E, 0x5E, 0x26, 0xDA, 0x82,  // ....^&..
                            /* 32C8 */  0x10, 0x42, 0x9C, 0x1A, 0x51, 0xA4, 0x0D, 0x44,  // .B..Q..D
                            /* 32D0 */  0xD6, 0x50, 0x88, 0x42, 0x3C, 0x41, 0x06, 0x8A,  // .P.B<A..
                            /* 32D8 */  0x72, 0x56, 0x11, 0x22, 0xC7, 0x32, 0x44, 0xD0,  // rV.".2D.
                            /* 32E0 */  0xF3, 0x89, 0x16, 0x3B, 0x4A, 0x8C, 0xF6, 0x07,  // ...;J...
                            /* 32E8 */  0xC2, 0x74, 0x1C, 0xD1, 0x59, 0xA4, 0xD1, 0xA0,  // .t..Y...
                            /* 32F0 */  0x0E, 0x17, 0x3E, 0x17, 0xF8, 0x4C, 0x70, 0x80,  // ..>..Lp.
                            /* 32F8 */  0x27, 0xE5, 0xA1, 0x05, 0x39, 0xD7, 0x33, 0x7B,  // '...9.3{
                            /* 3300 */  0xD2, 0x38, 0x39, 0x46, 0xE0, 0xA1, 0xF9, 0x14,  // .89F....
                            /* 3308 */  0x02, 0xC7, 0x35, 0xA0, 0xAE, 0x06, 0x0F, 0x06,  // ..5.....
                            /* 3310 */  0xEC, 0xC2, 0x60, 0x38, 0x3E, 0x44, 0xDF, 0xD0,  // ..`8>D..
                            /* 3318 */  0x3C, 0x81, 0x43, 0x64, 0x80, 0x3E, 0x86, 0xC0,  // <.Cd.>..
                            /* 3320 */  0x1F, 0x8F, 0x4F, 0x02, 0x3E, 0x4B, 0x98, 0xC0,  // ..O.>K..
                            /* 3328 */  0xF2, 0x07, 0x81, 0xFA, 0xFF, 0x9F, 0xE6, 0xF9,  // ........
                            /* 3330 */  0x34, 0x4F, 0xEB, 0x59, 0xC0, 0xE7, 0x84, 0xC3,  // 4O.Y....
                            /* 3338 */  0x62, 0x62, 0x4F, 0x2D, 0x74, 0x3C, 0xE0, 0x57,  // bbO-t<.W
                            /* 3340 */  0x7C, 0x3C, 0x10, 0xC2, 0x5B, 0x83, 0xE7, 0xEB,  // |<..[...
                            /* 3348 */  0xB3, 0x0C, 0x3B, 0xEC, 0xE3, 0x46, 0xE1, 0x31,  // ..;..F.1
                            /* 3350 */  0x3F, 0x8F, 0x78, 0x38, 0x2C, 0xDC, 0x19, 0x91,  // ?.x8,...
                            /* 3358 */  0x8A, 0x3A, 0x9B, 0xA0, 0x4E, 0x15, 0x3E, 0x50,  // .:..N.>P
                            /* 3360 */  0xB0, 0x0B, 0xC1, 0xDB, 0xB9, 0x21, 0x1E, 0x4D,  // .....!.M
                            /* 3368 */  0xD8, 0xF9, 0xC6, 0x03, 0x83, 0x7F, 0x28, 0xF5,  // ......(.
                            /* 3370 */  0x69, 0x02, 0x1C, 0x87, 0x08, 0x36, 0x25, 0x8E,  // i....6%.
                            /* 3378 */  0x52, 0xD7, 0xF1, 0x1F, 0x74, 0x91, 0x87, 0x89,  // R...t...
                            /* 3380 */  0x06, 0xF6, 0xD9, 0xE2, 0x44, 0x42, 0x06, 0x7E,  // ....DB.~
                            /* 3388 */  0x44, 0x08, 0x72, 0x9E, 0x0E, 0x38, 0x4E, 0x50,  // D.r..8NP
                            /* 3390 */  0x9D, 0x07, 0xC0, 0x71, 0x0D, 0xF2, 0x38, 0xC1,  // ...q..8.
                            /* 3398 */  0x34, 0x27, 0x06, 0x12, 0xEC, 0xA0, 0xD8, 0x44,  // 4'.....D
                            /* 33A0 */  0x4D, 0xF0, 0xFF, 0x3F, 0x52, 0x70, 0x85, 0x3E,  // M..?Rp.>
                            /* 33A8 */  0x38, 0xA1, 0xCF, 0x2E, 0xEC, 0xA8, 0x72, 0x76,  // 8.....rv
                            /* 33B0 */  0xBE, 0x8F, 0xF8, 0xAC, 0xC4, 0x87, 0x0A, 0x2E,  // ........
                            /* 33B8 */  0x40, 0x0F, 0x15, 0xFE, 0x91, 0x09, 0x37, 0x54,  // @.....7T
                            /* 33C0 */  0xB8, 0x63, 0x7A, 0x33, 0x39, 0x27, 0xCC, 0x2C,  // .cz39'.,
                            /* 33C8 */  0x0E, 0xCA, 0x33, 0xF5, 0x99, 0x0E, 0x7C, 0x81,  // ..3...|.
                            /* 33D0 */  0x87, 0x8A, 0x86, 0x66, 0x27, 0x8C, 0x17, 0x1D,  // ...f'...
                            /* 33D8 */  0x1F, 0x4B, 0xCE, 0x94, 0x9D, 0x44, 0x3D, 0x52,  // .K...D=R
                            /* 33E0 */  0xF0, 0x80, 0xFA, 0x68, 0x01, 0x3C, 0xCE, 0x5B,  // ...h.<.[
                            /* 33E8 */  0x3E, 0x24, 0xD8, 0xE5, 0x40, 0x41, 0x7D, 0x64,  // >$..@A}d
                            /* 33F0 */  0xF3, 0x40, 0xF9, 0xFF, 0xFF, 0x64, 0xC3, 0x6F,  // .@...d.o
                            /* 33F8 */  0x1B, 0x3E, 0x08, 0x9D, 0x54, 0xD8, 0x43, 0x8D,  // .>..T.C.
                            /* 3400 */  0xFA, 0xB6, 0x86, 0x23, 0x18, 0x72, 0xAC, 0xA0,  // ...#.r..
                            /* 3408 */  0x3A, 0x04, 0x7A, 0xAC, 0xF0, 0x45, 0x1E, 0x99,  // :.z..E..
                            /* 3410 */  0x40, 0x36, 0x2A, 0x3E, 0x8B, 0xB3, 0xC2, 0x9C,  // @6*>....
                            /* 3418 */  0x2F, 0xD8, 0x70, 0xC1, 0xF7, 0x78, 0xF1, 0x70,  // /.p..x.p
                            /* 3420 */  0xF1, 0x67, 0x00, 0x43, 0x9C, 0x49, 0x84, 0x13,  // .g.C.I..
                            /* 3428 */  0x7A, 0x82, 0xF2, 0x3D, 0xE9, 0xDC, 0x6C, 0x1C,  // z..=..l.
                            /* 3430 */  0x92, 0x04, 0x1D, 0x2E, 0xA8, 0x8E, 0x64, 0x1E,  // ......d.
                            /* 3438 */  0x2E, 0xFC, 0x59, 0x3D, 0x9C, 0x80, 0x6B, 0x56,  // ..Y=..kV
                            /* 3440 */  0x38, 0x9C, 0x28, 0x87, 0xC5, 0xCE, 0x73, 0x46,  // 8.(...sF
                            /* 3448 */  0x7E, 0x41, 0x79, 0x5C, 0x00, 0xE7, 0x80, 0xF1,  // ~Ay\....
                            /* 3450 */  0x23, 0xF2, 0xFF, 0x7F, 0x2C, 0x3E, 0xE4, 0xB2,  // #...,>..
                            /* 3458 */  0xC1, 0xE0, 0x08, 0x46, 0x1D, 0x2F, 0xA8, 0x3C,  // ...F./.<
                            /* 3460 */  0x8C, 0x17, 0x14, 0xB3, 0x3A, 0x5E, 0x70, 0x4D,  // ....:^pM
                            /* 3468 */  0x8A, 0x9D, 0xD6, 0xD8, 0x88, 0x31, 0x07, 0x06,  // .....1..
                            /* 3470 */  0xE0, 0x33, 0x60, 0xCC, 0xB9, 0xD7, 0x03, 0x06,  // .3`.....
                            /* 3478 */  0xF3, 0x88, 0x3C, 0x60, 0xE0, 0x33, 0x29, 0x0F,  // ..<`.3).
                            /* 3480 */  0x18, 0xF8, 0xC4, 0x3F, 0xAE, 0x40, 0xF9, 0xFF,  // ...?.@..
                            /* 3488 */  0x1F, 0x38, 0xF0, 0x07, 0xA0, 0x37, 0x44, 0x4C,  // .8...7DL
                            /* 3490 */  0xCC, 0x11, 0x83, 0xCA, 0xC4, 0x88, 0x41, 0x71,  // ......Aq
                            /* 3498 */  0xBD, 0x79, 0xE0, 0x00, 0xF3, 0xB0, 0x30, 0xE3,  // .y....0.
                            /* 34A0 */  0x05, 0x6B, 0xEC, 0xF3, 0x15, 0x94, 0xF1, 0xB2,  // .k......
                            /* 34A8 */  0xF9, 0xBC, 0x69, 0xB2, 0x6B, 0x23, 0x3B, 0xBB,  // ..i.k#;.
                            /* 34B0 */  0x7A, 0xB4, 0xE0, 0x51, 0x71, 0x32, 0x03, 0x42,  // z..Qq2.B
                            /* 34B8 */  0x73, 0xC2, 0xC0, 0x1C, 0x94, 0xC7, 0x0A, 0xD6,  // s.......
                            /* 34C0 */  0x83, 0x12, 0x7E, 0x38, 0x3E, 0x4D, 0x9E, 0x2B,  // ..~8>M.+
                            /* 34C8 */  0x1C, 0x82, 0xFF, 0xFF, 0x93, 0x02, 0xB8, 0x86,  // ........
                            /* 34D0 */  0xEA, 0x93, 0x02, 0xF0, 0x18, 0x94, 0x21, 0x1E,  // ......!.
                            /* 34D8 */  0xCE, 0x0E, 0x17, 0xB8, 0x9C, 0xB3, 0x7D, 0x52,  // ......}R
                            /* 34E0 */  0xC0, 0x9F, 0x47, 0x7D, 0x6D, 0x65, 0xF7, 0x0F,  // ..G}me..
                            /* 34E8 */  0x36, 0x5A, 0xF0, 0x8D, 0xD4, 0xA3, 0x05, 0x1E,  // 6Z......
                            /* 34F0 */  0x60, 0x9E, 0x50, 0xF4, 0xF7, 0xA3, 0x37, 0x42,  // `.P...7B
                            /* 34F8 */  0x1F, 0x94, 0x7D, 0xB3, 0xF3, 0x55, 0x87, 0xC1,  // ..}..U..
                            /* 3500 */  0x44, 0x7E, 0x4A, 0x02, 0xE7, 0x31, 0x03, 0x3F,  // D~J..1.?
                            /* 3508 */  0x20, 0x43, 0x1F, 0xC9, 0x6B, 0xAF, 0xCF, 0xA3,  //  C..k...
                            /* 3510 */  0x61, 0xDF, 0x79, 0x7D, 0x59, 0xF4, 0xB1, 0x10,  // a.y}Y...
                            /* 3518 */  0xDE, 0xFF, 0x7F, 0xB8, 0xF0, 0x6C, 0x1C, 0x0B,  // .....l..
                            /* 3520 */  0x81, 0xCA, 0xA0, 0xE0, 0x8D, 0x15, 0x7C, 0x82,  // ......|.
                            /* 3528 */  0x0F, 0xED, 0xA0, 0x40, 0x89, 0xFE, 0x1C, 0x61,  // ...@...a
                            /* 3530 */  0xAD, 0x10, 0x42, 0x7B, 0x77, 0x66, 0x20, 0x81,  // ..B{wf .
                            /* 3538 */  0x7C, 0x6C, 0xF7, 0xFD, 0x0F, 0x73, 0x95, 0x37,  // |l...s.7
                            /* 3540 */  0x5E, 0xB4, 0xA7, 0x64, 0x4F, 0x26, 0x44, 0x02,  // ^..dO&D.
                            /* 3548 */  0x1F, 0xEB, 0xF0, 0x03, 0xE1, 0xA8, 0xCF, 0xF1,  // ........
                            /* 3550 */  0x6C, 0x20, 0xAF, 0xF2, 0xC6, 0x3F, 0x2E, 0x1F,  // l ...?..
                            /* 3558 */  0xB9, 0x8D, 0x70, 0x5C, 0x4F, 0xDA, 0xAF, 0x7F,  // ..p\O...
                            /* 3560 */  0xD8, 0xE3, 0x3C, 0x2E, 0xD7, 0x3B, 0xC0, 0x27,  // ..<..;.'
                            /* 3568 */  0x65, 0x1F, 0xA7, 0x24, 0xEB, 0x31, 0x40, 0x61,  // e..$.1@a
                            /* 3570 */  0x7C, 0x3A, 0x07, 0x5C, 0xFC, 0xFF, 0x4F, 0xE7,  // |:.\..O.
                            /* 3578 */  0xF0, 0x8F, 0xCC, 0x3E, 0x29, 0x80, 0xE3, 0x38,  // ...>)..8
                            /* 3580 */  0x00, 0x6B, 0xF6, 0xBE, 0x07, 0x3C, 0x06, 0x84,  // .k...<..
                            /* 3588 */  0x0A, 0xFE, 0x0E, 0x11, 0xFB, 0x7D, 0xC3, 0xF8,  // .....}..
                            /* 3590 */  0x11, 0x9E, 0xCB, 0xE1, 0x83, 0x04, 0xED, 0xED,  // ........
                            /* 3598 */  0x1E, 0xAE, 0x21, 0xC5, 0x78, 0x0E, 0x68, 0xEC,  // ..!.x.h.
                            /* 35A0 */  0xE8, 0xA2, 0x03, 0xED, 0x13, 0x43, 0x9C, 0x60,  // .....C.`
                            /* 35A8 */  0x51, 0x8E, 0xCB, 0x68, 0xB1, 0xA2, 0x3C, 0x44,  // Q..h..<D
                            /* 35B0 */  0x1C, 0x53, 0xC0, 0x43, 0x8B, 0x12, 0x2C, 0x46,  // .S.C..,F
                            /* 35B8 */  0x84, 0x60, 0xAF, 0x0E, 0x91, 0x82, 0x46, 0x79,  // .`....Fy
                            /* 35C0 */  0x13, 0x37, 0x54, 0xB8, 0xE7, 0x72, 0x16, 0xEE,  // .7T..r..
                            /* 35C8 */  0x34, 0xA0, 0xE3, 0x86, 0xCF, 0xE5, 0x00, 0x27,  // 4......'
                            /* 35D0 */  0xFE, 0xFF, 0xE7, 0x72, 0xDC, 0x81, 0x03, 0x77,  // ...r...w
                            /* 35D8 */  0x10, 0x01, 0xDB, 0x51, 0x01, 0x77, 0x04, 0x01,  // ...Q.w..
                            /* 35E0 */  0x26, 0xBA, 0x1F, 0xE1, 0x3A, 0x7B, 0x38, 0xE9,  // &...:{8.
                            /* 35E8 */  0x5A, 0x65, 0x63, 0xAD, 0x26, 0xD0, 0xB9, 0xC3,  // Zec.&...
                            /* 35F0 */  0x3A, 0x80, 0x34, 0x1D, 0x0E, 0xF2, 0xE0, 0xE6,  // :.4.....
                            /* 35F8 */  0x8B, 0x8A, 0x07, 0x11, 0xE3, 0x7D, 0x99, 0x8F,  // .....}..
                            /* 3600 */  0xE0, 0x49, 0xC2, 0xA9, 0x8F, 0x0B, 0x3A, 0xB9,  // .I....:.
                            /* 3608 */  0x7B, 0xEC, 0xCE, 0x4B, 0xA2, 0xCC, 0x63, 0xA2,  // {..K..c.
                            /* 3610 */  0x43, 0x70, 0xCA, 0x03, 0x3C, 0x05, 0x31, 0xA0,  // Cp..<.1.
                            /* 3618 */  0x23, 0x1C, 0xD0, 0xD1, 0xE7, 0x34, 0x1F, 0xEB,  // #....4..
                            /* 3620 */  0x31, 0xC3, 0x7A, 0x65, 0x60, 0x73, 0xF4, 0x65,  // 1.ze`s.e
                            /* 3628 */  0x80, 0x4F, 0xCB, 0xC7, 0x03, 0x03, 0x5B, 0xCD,  // .O....[.
                            /* 3630 */  0x25, 0x08, 0x05, 0xE6, 0x2B, 0x37, 0x3F, 0x88,  // %...+7?.
                            /* 3638 */  0x83, 0x4D, 0xDF, 0x81, 0x00, 0x14, 0x40, 0x9E,  // .M....@.
                            /* 3640 */  0xBF, 0xCF, 0x38, 0xCF, 0x00, 0x6C, 0x0A, 0x8F,  // ..8..l..
                            /* 3648 */  0x39, 0x46, 0x33, 0x3A, 0xBF, 0x71, 0x79, 0xA6,  // 9F3:.qy.
                            /* 3650 */  0x3C, 0xEC, 0x4C, 0x29, 0x88, 0x67, 0xEA, 0x20,  // <.L).g. 
                            /* 3658 */  0x37, 0x7B, 0x08, 0xFF, 0x7F, 0x82, 0xA3, 0xC7,  // 7{......
                            /* 3660 */  0x5E, 0x4B, 0xD8, 0x6D, 0x03, 0xCE, 0x98, 0x23,  // ^K.m...#
                            /* 3668 */  0x3E, 0x16, 0x78, 0x1A, 0x86, 0xF3, 0x60, 0x39,  // >.x...`9
                            /* 3670 */  0x9C, 0x07, 0xCB, 0xC7, 0xE2, 0xC9, 0x82, 0xEB,  // ........
                            /* 3678 */  0x02, 0x85, 0x9B, 0x2C, 0x18, 0xE1, 0x31, 0xC1,  // ...,..1.
                            /* 3680 */  0x06, 0x45, 0xC7, 0xE3, 0x61, 0xF1, 0xB3, 0x81,  // .E..a...
                            /* 3688 */  0x2F, 0x3C, 0x0C, 0xFB, 0xC9, 0xC1, 0xA2, 0xEF,  // /<......
                            /* 3690 */  0x08, 0xE4, 0x9E, 0xC5, 0x86, 0xC6, 0x07, 0xCA,  // ........
                            /* 3698 */  0x61, 0x8D, 0x16, 0xF6, 0x25, 0xE7, 0x9D, 0xC3,  // a...%...
                            /* 36A0 */  0x07, 0x16, 0xDF, 0xDE, 0x18, 0xAC, 0xAF, 0xC7,  // ........
                            /* 36A8 */  0xE0, 0xBA, 0x53, 0xB0, 0xAF, 0xC5, 0x7B, 0x05,  // ..S...{.
                            /* 36B0 */  0x3B, 0xE6, 0xF9, 0x9E, 0xE7, 0x8B, 0x00, 0xEE,  // ;.......
                            /* 36B8 */  0x87, 0xC1, 0xC4, 0x5F, 0x32, 0xD0, 0xD1, 0x16,  // ..._2...
                            /* 36C0 */  0xA5, 0x4B, 0x06, 0xC7, 0x7D, 0xC9, 0x80, 0x19,  // .K..}...
                            /* 36C8 */  0xE4, 0x92, 0x41, 0x21, 0x1C, 0x81, 0x42, 0x01,  // ..A!..B.
                            /* 36D0 */  0x20, 0x74, 0x56, 0xE0, 0x92, 0xE1, 0x28, 0x88,  //  tV...(.
                            /* 36D8 */  0x47, 0xEC, 0x18, 0x67, 0x05, 0xF4, 0xC5, 0xC5,  // G..g....
                            /* 36E0 */  0x97, 0x0C, 0xCC, 0x51, 0x81, 0xFF, 0xFF, 0x8F,  // ...Q....
                            /* 36E8 */  0x0A, 0x30, 0x4E, 0x19, 0xEC, 0xA8, 0x00, 0xFB,  // .0N.....
                            /* 36F0 */  0x9A, 0x01, 0xBE, 0xE3, 0x04, 0xB8, 0x07, 0x05,  // ........
                            /* 36F8 */  0x8E, 0xE3, 0x04, 0xE0, 0xE9, 0x44, 0xE2, 0xE3,  // .....D..
                            /* 3700 */  0x04, 0x70, 0x3A, 0x3D, 0xB0, 0xE3, 0x04, 0x18,  // .p:=....
                            /* 3708 */  0x64, 0xFC, 0xB8, 0x74, 0x9C, 0xE0, 0xF7, 0x26,  // d..t...&
                            /* 3710 */  0x0B, 0x74, 0xF0, 0xFF, 0xBF, 0x02, 0xC1, 0xC0,  // .t......
                            /* 3718 */  0x39, 0x5B, 0x2B, 0x44, 0x21, 0xF3, 0xE8, 0xFD,  // 9[+D!...
                            /* 3720 */  0x0E, 0x47, 0x66, 0xFD, 0x6E, 0xE9, 0xEB, 0xA1,  // .Gf.n...
                            /* 3728 */  0x07, 0x2F, 0x68, 0x9D, 0x28, 0xB8, 0x84, 0xD5,  // ./h.(...
                            /* 3730 */  0x1A, 0x42, 0x27, 0x0A, 0x1E, 0x79, 0xA1, 0x02,  // .B'..y..
                            /* 3738 */  0x33, 0x88, 0x2D, 0x1C, 0x33, 0x7C, 0xAF, 0x44,  // 3.-.3|.D
                            /* 3740 */  0x8F, 0xC6, 0xD3, 0x3A, 0xA8, 0x93, 0x78, 0xB6,  // ...:..x.
                            /* 3748 */  0xF2, 0x58, 0x3D, 0x17, 0xF8, 0x04, 0x87, 0xFA,  // .X=.....
                            /* 3750 */  0x50, 0x03, 0xE6, 0x9B, 0x24, 0x38, 0xCF, 0x16,  // P...$8..
                            /* 3758 */  0x1E, 0x1D, 0xEE, 0xF8, 0xE1, 0x9B, 0x99, 0xA7,  // ........
                            /* 3760 */  0x75, 0x4A, 0x1E, 0x14, 0xD8, 0xC7, 0xED, 0x41,  // uJ.....A
                            /* 3768 */  0x81, 0x2F, 0xD6, 0xA0, 0xD0, 0xF7, 0x53, 0x1F,  // ./....S.
                            /* 3770 */  0xFC, 0xD9, 0xF8, 0x81, 0xC3, 0xFF, 0x7F, 0x6C,  // .......l
                            /* 3778 */  0x30, 0xCF, 0x16, 0x1E, 0x1B, 0xB0, 0x38, 0xE3,  // 0.....8.
                            /* 3780 */  0x7B, 0x6C, 0xC0, 0x0E, 0xCA, 0x63, 0x03, 0xDF,  // {l...c..
                            /* 3788 */  0x89, 0x05, 0x78, 0x84, 0x3B, 0xB1, 0x80, 0x0E,  // ..x.;...
                            /* 3790 */  0x96, 0x9F, 0x58, 0xC0, 0x73, 0x21, 0x05, 0xCF,  // ..X.s!..
                            /* 3798 */  0x79, 0x0A, 0x7F, 0x19, 0xE0, 0x28, 0xBE, 0x0C,  // y....(..
                            /* 37A0 */  0x40, 0x3A, 0x51, 0x91, 0xFF, 0xFF, 0xC9, 0x03,  // @:Q.....
                            /* 37A8 */  0x23, 0xED, 0x44, 0x05, 0xE5, 0x76, 0x00, 0x5F,  // #.D..v._
                            /* 37B0 */  0xC2, 0xA1, 0x0A, 0x75, 0x9B, 0xF7, 0x79, 0x0E,  // ...u..y.
                            /* 37B8 */  0xFE, 0x31, 0x04, 0x7F, 0x2A, 0x67, 0xD7, 0x82,  // .1..*g..
                            /* 37C0 */  0x97, 0x2A, 0x1F, 0x18, 0xE0, 0x1D, 0xAA, 0xC0,  // .*......
                            /* 37C8 */  0x73, 0x60, 0x80, 0x3F, 0xCC, 0xA7, 0x65, 0x03,  // s`.?..e.
                            /* 37D0 */  0x3D, 0x30, 0x00, 0xFF, 0x2B, 0xAD, 0x0F, 0x0C,  // =0..+...
                            /* 37D8 */  0xC0, 0xE9, 0xC4, 0x84, 0x3F, 0x30, 0xC0, 0x3F,  // ....?0.?
                            /* 37E0 */  0x33, 0xB1, 0xFF, 0xFF, 0x99, 0x09, 0xF6, 0x4C,  // 3......L
                            /* 37E8 */  0x4E, 0x36, 0x94, 0xCF, 0x4C, 0xC0, 0x72, 0x30,  // N6..L.r0
                            /* 37F0 */  0x60, 0x38, 0x33, 0x01, 0xCC, 0x18, 0x3F, 0x78,  // `83...?x
                            /* 37F8 */  0xFF, 0xFF, 0x67, 0x26, 0xE0, 0x3C, 0x36, 0x60,  // ..g&.<6`
                            /* 3800 */  0x77, 0x66, 0x02, 0x5C, 0x1D, 0x3B, 0x7C, 0x66,  // wf.\.;|f
                            /* 3808 */  0x02, 0x8E, 0x87, 0x01, 0x7E, 0x66, 0x81, 0xF1,  // ....~f..
                            /* 3810 */  0xFF, 0x3F, 0x22, 0xD1, 0x33, 0x13, 0x28, 0x4E,  // .?".3.(N
                            /* 3818 */  0x07, 0xF0, 0xCF, 0x4C, 0x00, 0x07, 0xE2, 0x1D,  // ...L....
                            /* 3820 */  0x18, 0x40, 0x77, 0x76, 0xF7, 0x81, 0x01, 0x5C,  // .@wv...\
                            /* 3828 */  0x37, 0xFF, 0x67, 0x26, 0xB0, 0x1E, 0x18, 0x60,  // 7.g&...`
                            /* 3830 */  0xFE, 0xFF, 0x8F, 0x1C, 0x8C, 0xC0, 0x62, 0x5F,  // ......b_
                            /* 3838 */  0xF8, 0x26, 0xD0, 0x29, 0xDA, 0xF2, 0x60, 0x50,  // .&.)..`P
                            /* 3840 */  0x23, 0xF3, 0x91, 0x00, 0x3F, 0xC8, 0x63, 0x3C,  // #...?.c<
                            /* 3848 */  0xB4, 0xA3, 0x62, 0x07, 0x6C, 0xC3, 0xF1, 0xF1,  // ..b.l...
                            /* 3850 */  0x7B, 0x54, 0xCD, 0x8F, 0x42, 0x67, 0x84, 0xE3,  // {T..Bg..
                            /* 3858 */  0xF0, 0x70, 0x42, 0x32, 0x69, 0xC3, 0x43, 0x49,  // .pB2i.CI
                            /* 3860 */  0x81, 0xD0, 0x8C, 0x0E, 0xE8, 0x90, 0x5E, 0x16,  // ......^.
                            /* 3868 */  0x22, 0xBE, 0x53, 0x1B, 0x26, 0x81, 0x47, 0xCE,  // ".S.&.G.
                            /* 3870 */  0xD0, 0x38, 0x34, 0x76, 0x18, 0x1E, 0x5C, 0xB0,  // .84v..\.
                            /* 3878 */  0x83, 0x78, 0x72, 0xF0, 0x01, 0x9B, 0x4D, 0xE8,  // .xr...M.
                            /* 3880 */  0x4C, 0x0F, 0xFA, 0x55, 0xE1, 0x21, 0x26, 0x6A,  // L..U.!&j
                            /* 3888 */  0x8C, 0xE6, 0xA0, 0xC8, 0xD0, 0x3D, 0x70, 0x70,  // .....=pp
                            /* 3890 */  0x80, 0x59, 0xF3, 0x78, 0xC9, 0xF9, 0xC2, 0x58,  // .Y.x...X
                            /* 3898 */  0x6C, 0xDC, 0x31, 0x42, 0xC5, 0x78, 0x33, 0xF0,  // l.1B.x3.
                            /* 38A0 */  0xD1, 0xDB, 0xD0, 0x87, 0xF8, 0x0A, 0xCC, 0x47,  // .......G
                            /* 38A8 */  0x13, 0xF2, 0x71, 0xC9, 0x47, 0x6B, 0x3E, 0x12,  // ..q.Gk>.
                            /* 38B0 */  0x7E, 0xBC, 0xB0, 0xE7, 0x3B, 0x0C, 0x99, 0x8E,  // ~...;...
                            /* 38B8 */  0x09, 0xBA, 0xBF, 0x44, 0xC8, 0x1B, 0x8C, 0x06,  // ...D....
                            /* 38C0 */  0x15, 0xA1, 0xB1, 0x61, 0x49, 0xB1, 0x00, 0x5B,  // ...aI..[
                            /* 38C8 */  0x48, 0x04, 0xE7, 0x88, 0xA2, 0x04, 0x8A, 0x72,  // H......r
                            /* 38D0 */  0x38, 0x46, 0x09, 0x16, 0x23, 0x54, 0xB4, 0x28,  // 8F..#T.(
                            /* 38D8 */  0xAD, 0x1D, 0xAA, 0x85, 0x10, 0x2B, 0xC4, 0x69,  // .....+.i
                            /* 38E0 */  0x86, 0x0C, 0xF6, 0x50, 0x11, 0x2D, 0xC8, 0x09,  // ...P.-..
                            /* 38E8 */  0xB4, 0x7F, 0x88, 0x60, 0x2B, 0xD4, 0x10, 0x1D,  // ...`+...
                            /* 38F0 */  0x69, 0x34, 0xA8, 0x73, 0x85, 0x0F, 0x05, 0x3E,  // i4.s...>
                            /* 38F8 */  0x10, 0x1C, 0xDD, 0x51, 0x19, 0x3C, 0x48, 0xE4,  // ...Q.<H.
                            /* 3900 */  0x13, 0x78, 0xC8, 0x78, 0x1A, 0xF0, 0xB8, 0xD9,  // .x.x....
                            /* 3908 */  0xD4, 0x7C, 0x00, 0x81, 0xE3, 0x1A, 0x50, 0xB3,  // .|....P.
                            /* 3910 */  0x7C, 0x2A, 0x60, 0x7F, 0x15, 0xC3, 0xFD, 0xFF,  // |*`.....
                            /* 3918 */  0x0F, 0x11, 0x73, 0x23, 0xF3, 0x04, 0x0E, 0x91,  // ..s#....
                            /* 3920 */  0x01, 0xFA, 0x04, 0x02, 0x7F, 0x3C, 0x3E, 0x06,  // .....<>.
                            /* 3928 */  0x78, 0x3E, 0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81,  // x>'.....
                            /* 3930 */  0x3A, 0xA9, 0xF3, 0xAB, 0xC7, 0x69, 0x3D, 0x08,  // :....i=.
                            /* 3938 */  0xF8, 0x90, 0x70, 0x58, 0xEC, 0x80, 0xE3, 0x03,  // ..pX....
                            /* 3940 */  0x8B, 0xC7, 0x03, 0xFE, 0xA1, 0x3F, 0x18, 0x44,  // .....?.D
                            /* 3948 */  0x78, 0x65, 0xF0, 0x7C, 0xFD, 0x8E, 0x61, 0x07,  // xe.|..a.
                            /* 3950 */  0x79, 0xDC, 0x40, 0x7C, 0x32, 0x31, 0xC4, 0xD3,  // y.@|21..
                            /* 3958 */  0xC9, 0x0B, 0x82, 0x31, 0x4E, 0x29, 0xF4, 0x21,  // ...1N).!
                            /* 3960 */  0x3D, 0x22, 0x78, 0x50, 0x27, 0x6C, 0x82, 0x31,  // ="xP'l.1
                            /* 3968 */  0xCF, 0x84, 0xF4, 0x58, 0xE5, 0xB3, 0x09, 0x3F,  // ...X...?
                            /* 3970 */  0x57, 0xF8, 0x48, 0xC1, 0x2E, 0x0E, 0xAF, 0xDF,  // W.H.....
                            /* 3978 */  0x86, 0x78, 0x34, 0x61, 0xE7, 0x1B, 0x8F, 0x0E,  // .x4a....
                            /* 3980 */  0xFE, 0xD9, 0x1C, 0x3C, 0x07, 0x09, 0x38, 0xF3,  // ...<..8.
                            /* 3988 */  0xC2, 0xEA, 0x1A, 0x01, 0x39, 0xE4, 0x83, 0x4B,  // ....9..K
                            /* 3990 */  0xCE, 0xC2, 0xA4, 0x64, 0xC0, 0x28, 0x78, 0x0F,  // ...d.(x.
                            /* 3998 */  0x18, 0x7B, 0x1D, 0xE3, 0x1A, 0x87, 0x47, 0x8C,  // .{....G.
                            /* 39A0 */  0x1F, 0x85, 0xC8, 0xF1, 0xC1, 0xFF, 0xFF, 0x31,  // .......1
                            /* 39A8 */  0xB3, 0xB8, 0x63, 0x06, 0xD5, 0x01, 0x01, 0x1C,  // ..c.....
                            /* 39B0 */  0x47, 0x1B, 0xF0, 0x8C, 0x19, 0xCE, 0xD4, 0x18,  // G.......
                            /* 39B8 */  0xC8, 0xA9, 0xC1, 0x18, 0x36, 0x3B, 0xA7, 0x81,  // ....6;..
                            /* 39C0 */  0xE7, 0x40, 0x52, 0x1B, 0x24, 0x19, 0x37, 0x38,  // .@R.$.78
                            /* 39C8 */  0x2E, 0x80, 0x6C, 0xDC, 0xC0, 0x00, 0xD0, 0xE3,  // ..l.....
                            /* 39D0 */  0x06, 0x76, 0x53, 0xF3, 0xB8, 0x81, 0x89, 0x2C,  // .vS....,
                            /* 39D8 */  0x03, 0xFF, 0xFF, 0x71, 0x63, 0x4F, 0x43, 0x1E,  // ...qcOC.
                            /* 39E0 */  0x37, 0xF6, 0xEA, 0xC3, 0x06, 0x18, 0xFD, 0xBD,  // 7.......
                            /* 39E8 */  0xE2, 0x8D, 0xCD, 0x23, 0x87, 0x15, 0x79, 0xE4,  // ...#..y.
                            /* 39F0 */  0xA0, 0x02, 0xF5, 0xC8, 0xE1, 0x1F, 0x91, 0xC0,  // ........
                            /* 39F8 */  0x33, 0x72, 0x38, 0x93, 0xC3, 0x8E, 0x1D, 0x98,  // 3r8.....
                            /* 3A00 */  0x48, 0x1A, 0x3B, 0x7A, 0x00, 0x1E, 0x3B, 0x76,  // H.;z..;v
                            /* 3A08 */  0x2A, 0x30, 0xEE, 0x7F, 0x3E, 0x5D, 0xF1, 0x9B,  // *0..>]..
                            /* 3A10 */  0x96, 0x03, 0x0F, 0x1D, 0x54, 0xE7, 0x46, 0x0F,  // ....T.F.
                            /* 3A18 */  0x1D, 0xBE, 0xE0, 0xA1, 0x83, 0x7A, 0x6E, 0xEC,  // .....zn.
                            /* 3A20 */  0xFF, 0x3F, 0x37, 0x1C, 0xD4, 0xB9, 0xE1, 0x66,  // .?7....f
                            /* 3A28 */  0xEE, 0x91, 0x83, 0x4F, 0xD0, 0x91, 0x08, 0x7D,  // ...O...}
                            /* 3A30 */  0x5A, 0x65, 0x23, 0xC7, 0x5D, 0x98, 0xC2, 0x3C,  // Ze#.]..<
                            /* 3A38 */  0x41, 0xFA, 0x6E, 0x15, 0xFE, 0xA4, 0xDE, 0x76,  // A.n....v
                            /* 3A40 */  0x4E, 0xC5, 0x93, 0x7B, 0x82, 0x00, 0xDF, 0xA9,  // N..{....
                            /* 3A48 */  0xCE, 0xE3, 0x86, 0x7F, 0x14, 0x3C, 0x6E, 0x30,  // .....<n0
                            /* 3A50 */  0x0F, 0xF9, 0xBC, 0x42, 0x46, 0x88, 0xE5, 0x13,  // ...BF...
                            /* 3A58 */  0x84, 0x67, 0xC7, 0x40, 0xCE, 0x0E, 0x7B, 0x34,  // .g.@..{4
                            /* 3A60 */  0x02, 0xA3, 0xBC, 0x13, 0x04, 0x1A, 0xCA, 0x03,  // ........
                            /* 3A68 */  0xC7, 0x5E, 0xBA, 0x7D, 0x0D, 0xF3, 0x74, 0xCE,  // .^.}..t.
                            /* 3A70 */  0xD6, 0xEA, 0xA7, 0xA2, 0xD3, 0x08, 0xBC, 0xE0,  // ........
                            /* 3A78 */  0x83, 0x07, 0x95, 0x87, 0xC1, 0x43, 0xFC, 0xFF,  // .....C..
                            /* 3A80 */  0x0F, 0x1E, 0x73, 0x1A, 0xF5, 0xE0, 0xC1, 0x3B,  // ..s....;
                            /* 3A88 */  0x3B, 0x18, 0x47, 0x12, 0x4F, 0x88, 0x5D, 0x48,  // ;.G.O.]H
                            /* 3A90 */  0xE0, 0x9D, 0x23, 0xC0, 0x27, 0xEA, 0x88, 0x04,  // ..#.'...
                            /* 3A98 */  0x82, 0xF1, 0xC3, 0xC1, 0x79, 0x42, 0xB5, 0x4B,  // ....yB.K
                            /* 3AA0 */  0x58, 0x85, 0x1E, 0x3C, 0xA8, 0x86, 0xE5, 0x83,  // X..<....
                            /* 3AA8 */  0x04, 0x70, 0x1B, 0x3C, 0xEC, 0xD1, 0xF1, 0xA3,  // .p.<....
                            /* 3AB0 */  0x0D, 0xB0, 0x18, 0x3A, 0xEC, 0xFF, 0xFF, 0xD0,  // ...:....
                            /* 3AB8 */  0xB1, 0x47, 0x12, 0xF0, 0x99, 0x38, 0x23, 0x01,  // .G...8#.
                            /* 3AC0 */  0xBD, 0xA1, 0x83, 0xE3, 0x0C, 0x01, 0x4E, 0x71,  // ......Nq
                            /* 3AC8 */  0xC7, 0x2D, 0x10, 0x8C, 0x1C, 0xD6, 0x61, 0x39,  // .-....a9
                            /* 3AD0 */  0xD8, 0x01, 0x45, 0x61, 0x87, 0x45, 0x9F, 0x48,  // ..Ea.E.H
                            /* 3AD8 */  0xC0, 0xA5, 0xE2, 0x44, 0x02, 0xE4, 0xC7, 0x87,  // ...D....
                            /* 3AE0 */  0x3F, 0x47, 0xF0, 0xFF, 0xFF, 0x89, 0x04, 0x58,  // ?G.....X
                            /* 3AE8 */  0x9E, 0xBE, 0x7D, 0xF5, 0xF6, 0x89, 0x04, 0x5C,  // ..}....\
                            /* 3AF0 */  0x43, 0xF7, 0x89, 0x04, 0xB8, 0x8F, 0x8E, 0x0D,  // C.......
                            /* 3AF8 */  0x1D, 0xD8, 0x62, 0x9D, 0xF2, 0x1B, 0x89, 0x87,  // ..b.....
                            /* 3B00 */  0x0E, 0xAE, 0x61, 0x7B, 0xE8, 0x60, 0xFE, 0xFF,  // ..a{.`..
                            /* 3B08 */  0x9F, 0x48, 0x80, 0xC3, 0xE8, 0x3C, 0x74, 0x60,  // .H...<t`
                            /* 3B10 */  0x7B, 0x89, 0x7A, 0x2E, 0x38, 0x9B, 0x43, 0x07,  // {.z.8.C.
                            /* 3B18 */  0x9B, 0x8D, 0xA1, 0x03, 0xFD, 0xD1, 0xB1, 0xA3,  // ........
                            /* 3B20 */  0x29, 0xB0, 0x38, 0x4F, 0xC2, 0x38, 0x8E, 0xC0,  // ).8O.8..
                            /* 3B28 */  0x83, 0x3C, 0x9C, 0xE3, 0x48, 0xE0, 0xB1, 0xC3,  // .<..H...
                            /* 3B30 */  0xFA, 0xFF, 0x8F, 0x1D, 0x96, 0x8E, 0xF3, 0x08,  // ........
                            /* 3B38 */  0x20, 0x60, 0x78, 0xEC, 0xE8, 0x06, 0x5C, 0x47,  //  `x...\G
                            /* 3B40 */  0x73, 0x32, 0xD1, 0x0E, 0x1D, 0x6C, 0x3E, 0x86,  // s2...l>.
                            /* 3B48 */  0x0E, 0x08, 0x18, 0x9D, 0xCF, 0x23, 0xE0, 0xFE,  // .....#..
                            /* 3B50 */  0xFF, 0x0F, 0x1D, 0x9C, 0x08, 0x47, 0x74, 0xE8,  // .....Gt.
                            /* 3B58 */  0x60, 0x1B, 0x94, 0x87, 0x0E, 0xEC, 0x47, 0xE7,  // `.....G.
                            /* 3B60 */  0xA1, 0x03, 0xDF, 0x51, 0x3C, 0xB9, 0x79, 0xE8,  // ...Q<.y.
                            /* 3B68 */  0xE0, 0x3A, 0xFF, 0x7A, 0xE8, 0xC0, 0xF6, 0xFF,  // .:.z....
                            /* 3B70 */  0x3F, 0x74, 0xFC, 0xE8, 0x3C, 0x74, 0x60, 0x3B,  // ?t..<t`;
                            /* 3B78 */  0xE4, 0xA3, 0x38, 0x9C, 0x43, 0x07, 0xDB, 0x50,  // ..8.C..P
                            /* 3B80 */  0x3C, 0x74, 0xE0, 0x3E, 0x3A, 0x76, 0x46, 0x02,  // <t.>:vF.
                            /* 3B88 */  0xAE, 0xD7, 0xE9, 0x80, 0x81, 0xCE, 0x33, 0xCC,  // ......3.
                            /* 3B90 */  0x33, 0x12, 0xF8, 0x9C, 0x8C, 0x1D, 0xF2, 0xFF,  // 3.......
                            /* 3B98 */  0x7F, 0xEC, 0xC0, 0x6F, 0x78, 0x98, 0x33, 0x12,  // ...ox.3.
                            /* 3BA0 */  0x38, 0xCF, 0xB8, 0x60, 0xD5, 0x3A, 0x20, 0x5D,  // 8..`.: ]
                            /* 3BA8 */  0x6C, 0x7C, 0xC6, 0x05, 0x1B, 0x98, 0xCF, 0xB8,  // l|......
                            /* 3BB0 */  0xC0, 0x7C, 0x74, 0x6C, 0xE4, 0xE0, 0x3C, 0xC9,  // .|tl..<.
                            /* 3BB8 */  0x18, 0x18, 0x37, 0x74, 0x8F, 0xF8, 0xB4, 0x7D,  // ..7t...}
                            /* 3BC0 */  0x2B, 0x7C, 0xC1, 0xF4, 0x71, 0xD4, 0x28, 0xD1,  // +|..q.(.
                            /* 3BC8 */  0x5F, 0x09, 0x0E, 0xE9, 0x4C, 0x42, 0x44, 0x7B,  // _...LBD{
                            /* 3BD0 */  0x01, 0x60, 0x28, 0x2F, 0x18, 0x47, 0xF1, 0xFF,  // .`(/.G..
                            /* 3BD8 */  0x7F, 0x04, 0xE0, 0xE3, 0x09, 0x7B, 0x24, 0x21,  // .....{$!
                            /* 3BE0 */  0x12, 0x14, 0x39, 0x52, 0xF4, 0x20, 0xF8, 0x00,  // ..9R. ..
                            /* 3BE8 */  0xE2, 0x45, 0xF7, 0x20, 0x4E, 0x26, 0x4A, 0xE8,  // .E. N&J.
                            /* 3BF0 */  0x63, 0xF2, 0x40, 0xCF, 0x31, 0xC2, 0x31, 0x95,  // c.@.1.1.
                            /* 3BF8 */  0x7B, 0x51, 0x20, 0x9A, 0xA7, 0xA8, 0x79, 0x95,  // {Q ...y.
                            /* 3C00 */  0x0D, 0x24, 0x02, 0x8F, 0x80, 0x67, 0x7B, 0xEE,  // .$...g{.
                            /* 3C08 */  0x9A, 0x40, 0xF2, 0xCF, 0x08, 0x92, 0xF7, 0x22,  // .@....."
                            /* 3C10 */  0xA0, 0x30, 0xD6, 0x00, 0x22, 0x39, 0x87, 0x01,  // .0.."9..
                            /* 3C18 */  0x14, 0xB0, 0x8F, 0x05, 0x27, 0xF2, 0x6E, 0xE7,  // ....'.n.
                            /* 3C20 */  0xB3, 0x80, 0x25, 0xC1, 0xA1, 0x86, 0xE9, 0x89,  // ..%.....
                            /* 3C28 */  0x3D, 0x03, 0x1C, 0xEE, 0x89, 0x9C, 0xBF, 0x2F,  // =....../
                            /* 3C30 */  0x03, 0x21, 0xD9, 0xF1, 0xD8, 0x43, 0xE1, 0x07,  // .!...C..
                            /* 3C38 */  0x04, 0x4F, 0xEB, 0xA4, 0xAC, 0x1D, 0x51, 0x83,  // .O....Q.
                            /* 3C40 */  0x32, 0x4C, 0x02, 0x9F, 0x15, 0x18, 0x1A, 0x87,  // 2L......
                            /* 3C48 */  0xC6, 0x0E, 0xC3, 0xE3, 0x0E, 0x76, 0x10, 0x87,  // .....v..
                            /* 3C50 */  0x71, 0x78, 0xCF, 0x21, 0x6C, 0x42, 0x27, 0x7A,  // qx.!lB'z
                            /* 3C58 */  0x90, 0x6F, 0x04, 0xC5, 0xA3, 0x0A, 0xA3, 0x39,  // .o.....9
                            /* 3C60 */  0x28, 0x22, 0xF8, 0xB8, 0x00, 0x9A, 0xA3, 0x00,  // ("......
                            /* 3C68 */  0x5C, 0x1C, 0x5F, 0x04, 0xDE, 0x03, 0x02, 0xC5,  // \._.....
                            /* 3C70 */  0x7F, 0x58, 0x08, 0x7F, 0x30, 0x47, 0x73, 0x04,  // .X..0Gs.
                            /* 3C78 */  0x11, 0x12, 0x18, 0xE6, 0x40, 0x30, 0xC7, 0x09,  // ....@0..
                            /* 3C80 */  0x7B, 0xBE, 0x29, 0x90, 0xE3, 0x04, 0x73, 0x3F,  // {.)...s?
                            /* 3C88 */  0x23, 0x39, 0x3B, 0x2B, 0x08, 0xA3, 0xB7, 0x8B,  // #9;+....
                            /* 3C90 */  0x80, 0xC0, 0x4F, 0xA7, 0x2D, 0x18, 0xC1, 0x15,  // ..O.-...
                            /* 3C98 */  0x87, 0x25, 0x94, 0x23, 0x8B, 0xF6, 0xCA, 0x50,  // .%.#...P
                            /* 3CA0 */  0x19, 0x8A, 0x80, 0x0E, 0x22, 0x4C, 0x3C, 0x43,  // ...."L<C
                            /* 3CA8 */  0x45, 0x09, 0xF1, 0x50, 0x60, 0xD0, 0x20, 0xF1,  // E..P`. .
                            /* 3CB0 */  0x5A, 0xBB, 0x61, 0x90, 0x29, 0xB6, 0x3F, 0x08,  // Z.a.).?.
                            /* 3CB8 */  0x12, 0xF0, 0x3C, 0xA0, 0x53, 0x87, 0x23, 0x8D,  // ..<.S.#.
                            /* 3CC0 */  0x86, 0xFC, 0xFF, 0xCF, 0x21, 0x98, 0x33, 0x81,  // ....!.3.
                            /* 3CC8 */  0xCF, 0x03, 0x67, 0xF8, 0x64, 0x61, 0xDC, 0x20,  // ..g.da. 
                            /* 3CD0 */  0xA7, 0xE2, 0x31, 0x3E, 0x0C, 0x78, 0xD8, 0xEC,  // ..1>.x..
                            /* 3CD8 */  0x96, 0xE0, 0xFF, 0x81, 0x4F, 0x07, 0x78, 0xD7,  // ....O.x.
                            /* 3CE0 */  0x80, 0xBA, 0x16, 0x3C, 0x14, 0xB0, 0x03, 0x08,  // ...<....
                            /* 3CE8 */  0xFC, 0x73, 0x06, 0xFC, 0xF1, 0xF8, 0x14, 0xE0,  // .s......
                            /* 3CF0 */  0xF9, 0x9C, 0xF0, 0xA3, 0x03, 0x19, 0x04, 0x6A,  // .......j
                            /* 3CF8 */  0x64, 0x86, 0xF6, 0x79, 0xE2, 0xB4, 0x5E, 0x06,  // d..y..^.
                            /* 3D00 */  0x7C, 0x46, 0x38, 0x2C, 0x26, 0x16, 0x42, 0x0A,  // |F8,&.B.
                            /* 3D08 */  0xCE, 0x27, 0xA0, 0x18, 0x0F, 0x7C, 0xC5, 0x67,  // .'...|.g
                            /* 3D10 */  0x0C, 0x72, 0x63, 0xF0, 0x7C, 0x7D, 0x0C, 0x01,  // .rc.|}..
                            /* 3D18 */  0x06, 0x87, 0x05, 0x1C, 0x81, 0x8F, 0x21, 0xC0,  // ......!.
                            /* 3D20 */  0x43, 0xB3, 0x87, 0x23, 0x01, 0xCB, 0xBA, 0x5A,  // C..#...Z
                            /* 3D28 */  0xD9, 0x58, 0xAD, 0x8F, 0x3E, 0x3E, 0x9D, 0x1A,  // .X..>>..
                            /* 3D30 */  0x48, 0xE7, 0x1E, 0xEE, 0x11, 0x5B, 0xB8, 0xCF,  // H....[..
                            /* 3D38 */  0x29, 0x7C, 0x1A, 0x2F, 0x09, 0x86, 0x78, 0xA0,  // )|./..x.
                            /* 3D40 */  0x31, 0xC1, 0xD4, 0x07, 0x06, 0x31, 0x68, 0xF4,  // 1....1h.
                            /* 3D48 */  0x24, 0xAF, 0x81, 0xFF, 0x3F, 0xC4, 0xCC, 0x63,  // $...?..c
                            /* 3D50 */  0xA2, 0x43, 0x70, 0x4A, 0x08, 0xC1, 0x19, 0xC4,  // .CpJ....
                            /* 3D58 */  0x80, 0x8E, 0x70, 0xAA, 0xA3, 0x07, 0x02, 0xFE,  // ..p.....
                            /* 3D60 */  0x45, 0xF1, 0x31, 0xC7, 0x47, 0x2A, 0x36, 0xAC,  // E.1.G*6.
                            /* 3D68 */  0x53, 0x62, 0x73, 0xF4, 0x75, 0x80, 0xDF, 0x52,  // Sbs.u..R
                            /* 3D70 */  0x7C, 0x40, 0x30, 0xB0, 0xD5, 0xDC, 0x86, 0x50,  // |@0....P
                            /* 3D78 */  0x60, 0x3E, 0x0C, 0x9C, 0x32, 0x3B, 0x71, 0xE9,  // `>..2;q.
                            /* 3D80 */  0xA4, 0x03, 0x9A, 0x53, 0x46, 0x82, 0xFA, 0x8E,  // ...SF...
                            /* 3D88 */  0x04, 0xA0, 0x00, 0xF2, 0xFC, 0x7D, 0x3A, 0xF7,  // .....}:.
                            /* 3D90 */  0x71, 0x80, 0x41, 0x84, 0x89, 0x66, 0x74, 0x1E,  // q.A..ft.
                            /* 3D98 */  0x7D, 0xA6, 0xA8, 0xB0, 0x33, 0xA5, 0x20, 0x9E,  // }...3. .
                            /* 3DA0 */  0xA9, 0x83, 0xCC, 0x14, 0x3D, 0x13, 0x8F, 0x1E,  // ....=...
                            /* 3DA8 */  0x7B, 0x31, 0x61, 0xF7, 0x0D, 0x38, 0x63, 0x8E,  // {1a..8c.
                            /* 3DB0 */  0xF8, 0x58, 0xE0, 0x69, 0x18, 0xCE, 0x83, 0xE5,  // .X.i....
                            /* 3DB8 */  0x70, 0x1E, 0x2C, 0x1F, 0x8B, 0x27, 0x0B, 0x2E,  // p.,..'..
                            /* 3DC0 */  0x81, 0x93, 0x05, 0x39, 0x3C, 0x26, 0xDA, 0xA0,  // ...9<&..
                            /* 3DC8 */  0xE8, 0x78, 0x3C, 0x2C, 0x7E, 0x36, 0xF0, 0xA5,  // .x<,~6..
                            /* 3DD0 */  0x87, 0x9D, 0xAC, 0x3C, 0x98, 0xFF, 0xFF, 0xEB,  // ...<....
                            /* 3DD8 */  0xDA, 0x3B, 0x82, 0x2F, 0x5C, 0x6C, 0x68, 0x7C,  // .;./\lh|
                            /* 3DE0 */  0xA0, 0x1C, 0xD6, 0x68, 0x61, 0x5F, 0x74, 0xDE,  // ...ha_t.
                            /* 3DE8 */  0x3A, 0x7C, 0x64, 0xF1, 0xC4, 0x8C, 0x11, 0xD6,  // :|d.....
                            /* 3DF0 */  0x83, 0xF5, 0x68, 0xDE, 0x7A, 0xC0, 0x72, 0xA7,  // ..h.z.r.
                            /* 3DF8 */  0x60, 0x5F, 0x8B, 0xB7, 0x2E, 0x38, 0x47, 0x01,  // `_...8G.
                            /* 3E00 */  0xDC, 0x1B, 0xC3, 0xF2, 0x6F, 0x19, 0xE8, 0x68,  // ....o..h
                            /* 3E08 */  0xAB, 0xD2, 0x2D, 0x83, 0xC3, 0xBE, 0x65, 0xC0,  // ..-...e.
                            /* 3E10 */  0x0C, 0x72, 0xCB, 0xA0, 0x10, 0x8E, 0x40, 0xA1,  // .r....@.
                            /* 3E18 */  0x00, 0x10, 0x3A, 0x2C, 0x70, 0xC9, 0x70, 0x14,  // ..:,p.p.
                            /* 3E20 */  0xC4, 0x43, 0x76, 0x8C, 0xC3, 0x02, 0xFA, 0xEE,  // .Cv.....
                            /* 3E28 */  0xE2, 0x5B, 0x06, 0xE6, 0xAC, 0x00, 0xF3, 0x98,  // .[......
                            /* 3E30 */  0xC1, 0xCE, 0x0A, 0xB0, 0xEF, 0x19, 0xE0, 0x3B,  // .......;
                            /* 3E38 */  0x4F, 0x80, 0x7B, 0x50, 0xE0, 0x38, 0x4F, 0xC0,  // O.{P.8O.
                            /* 3E40 */  0xFF, 0xFF, 0x9F, 0x27, 0x00, 0x0F, 0x47, 0x12,  // ...'..G.
                            /* 3E48 */  0x9F, 0x27, 0x80, 0xD3, 0xE9, 0x81, 0x9D, 0x27,  // .'.....'
                            /* 3E50 */  0xC0, 0x22, 0xE3, 0x3C, 0x81, 0xE2, 0xB0, 0xC8,  // .".<....
                            /* 3E58 */  0xF3, 0x04, 0xC4, 0xE3, 0x21, 0xBF, 0xED, 0xB2,  // ....!...
                            /* 3E60 */  0xE3, 0x04, 0x97, 0x43, 0x21, 0x31, 0xC7, 0x09,  // ...C!1..
                            /* 3E68 */  0x54, 0x7C, 0x30, 0x0A, 0xE2, 0x81, 0x7A, 0xD4,  // T|0...z.
                            /* 3E70 */  0x36, 0x32, 0x10, 0x0A, 0xE9, 0xE1, 0xF9, 0x8E,  // 62......
                            /* 3E78 */  0x89, 0x9B, 0x05, 0x86, 0x60, 0x88, 0xEB, 0x25,  // ....`..%
                            /* 3E80 */  0x3D, 0x2D, 0x80, 0x6B, 0x08, 0xE1, 0xDF, 0xEE,  // =-.k....
                            /* 3E88 */  0xDE, 0x35, 0xD9, 0xC1, 0x02, 0x3C, 0xFF, 0xFF,  // .5...<..
                            /* 3E90 */  0x43, 0x03, 0x1C, 0xAB, 0x40, 0xBA, 0x55, 0x05,  // C...@.U.
                            /* 3E98 */  0x7A, 0x68, 0x00, 0x2E, 0xC1, 0x0E, 0x0D, 0xA0,  // zh......
                            /* 3EA0 */  0x83, 0xE5, 0x87, 0x06, 0xF0, 0xDC, 0xCD, 0x70,  // .......p
                            /* 3EA8 */  0x87, 0x06, 0xF0, 0xDE, 0x49, 0x31, 0x04, 0xE3,  // ....I1..
                            /* 3EB0 */  0xFC, 0x21, 0x4D, 0x20, 0xF1, 0x0F, 0x04, 0x49,  // .!M ...I
                            /* 3EB8 */  0x5B, 0x1C, 0x85, 0xF1, 0xED, 0x12, 0x70, 0x05,  // [.....p.
                            /* 3EC0 */  0x74, 0xD4, 0x60, 0xF8, 0xFF, 0xDF, 0x2E, 0x61,  // t.`....a
                            /* 3EC8 */  0x40, 0xBC, 0xDD, 0xF9, 0x82, 0xE0, 0xD3, 0x25,  // @......%
                            /* 3ED0 */  0xDC, 0xCB, 0x25, 0x6C, 0x90, 0xB0, 0x4F, 0x95,  // ..%l..O.
                            /* 3ED8 */  0x61, 0x5F, 0x20, 0x22, 0x9C, 0xD3, 0x03, 0xE5,  // a_ "....
                            /* 3EE0 */  0x53, 0xE5, 0xB3, 0x65, 0x1C, 0x63, 0xBD, 0x57,  // S..e.c.W
                            /* 3EE8 */  0xFA, 0x52, 0xF9, 0x2C, 0x18, 0x27, 0xCA, 0xC3,  // .R.,.'..
                            /* 3EF0 */  0xA5, 0x4F, 0x70, 0x6F, 0x99, 0x0F, 0x99, 0x9E,  // .Opo....
                            /* 3EF8 */  0x5C, 0xE0, 0xF3, 0x0A, 0x12, 0x21, 0x66, 0x98,  // \....!f.
                            /* 3F00 */  0xA0, 0x27, 0x10, 0x39, 0xE6, 0xCB, 0x25, 0x8B,  // .'.9..%.
                            /* 3F08 */  0x77, 0xB9, 0x04, 0x68, 0x72, 0x44, 0x78, 0xB9,  // w..hrDx.
                            /* 3F10 */  0x04, 0x1F, 0xC4, 0xFF, 0xFF, 0x59, 0x01, 0xD6,  // .....Y..
                            /* 3F18 */  0xDD, 0x12, 0x98, 0x48, 0x7D, 0x67, 0x69, 0x08,  // ...H}gi.
                            /* 3F20 */  0x16, 0x7E, 0x0E, 0x42, 0x1D, 0x0A, 0x1C, 0xEC,  // .~.B....
                            /* 3F28 */  0x94, 0xA0, 0x63, 0x1B, 0xBB, 0x55, 0xF8, 0xBC,  // ..c..U..
                            /* 3F30 */  0xE1, 0xFB, 0x81, 0x07, 0xF4, 0x58, 0xF0, 0x5A,  // .....X.Z
                            /* 3F38 */  0x71, 0xE6, 0x8E, 0x72, 0x0C, 0x42, 0x85, 0xA0,  // q..r.B..
                            /* 3F40 */  0xD0, 0x29, 0xCD, 0xC7, 0x20, 0x2E, 0x1A, 0x8E,  // .).. ...
                            /* 3F48 */  0x82, 0xF8, 0xA0, 0xE0, 0x13, 0x18, 0x9C, 0x69,  // .......i
                            /* 3F50 */  0x1D, 0xC2, 0x19, 0x1D, 0x04, 0xE6, 0x80, 0x08,  // ........
                            /* 3F58 */  0xEE, 0x53, 0x1A, 0x70, 0x18, 0xEB, 0x41, 0x01,  // .S.p..A.
                            /* 3F60 */  0x93, 0x53, 0x1A, 0x70, 0xF9, 0xFF, 0x9F, 0x90,  // .S.p....
                            /* 3F68 */  0xC0, 0x15, 0xEB, 0x10, 0x09, 0xF4, 0x0E, 0x18,  // ........
                            /* 3F70 */  0xB8, 0x43, 0x24, 0x38, 0xAE, 0x0F, 0x38, 0x9C,  // .C$8..8.
                            /* 3F78 */  0xE7, 0x00, 0xFE, 0x92, 0xA0, 0x87, 0x09, 0xD4,  // ........
                            /* 3F80 */  0x88, 0x2C, 0xEC, 0x30, 0x81, 0x18, 0xE5, 0x71,  // .,.0...q
                            /* 3F88 */  0x07, 0x8D, 0xF0, 0xBC, 0x64, 0x9C, 0xD8, 0x27,  // ....d..'
                            /* 3F90 */  0xF7, 0x34, 0xE4, 0x39, 0x3D, 0x03, 0x79, 0x84,  // .4.9=.y.
                            /* 3F98 */  0x6F, 0x8C, 0x5C, 0xC2, 0x81, 0x02, 0x15, 0xFE,  // o.\.....
                            /* 3FA0 */  0x00, 0x0B, 0x0A, 0x27, 0x87, 0x48, 0xA8, 0x63,  // ...'.H.c
                            /* 3FA8 */  0x79, 0x9E, 0x00, 0xFB, 0x91, 0x05, 0xFE, 0x59,  // y......Y
                            /* 3FB0 */  0x81, 0x5F, 0x7E, 0x9E, 0x80, 0x12, 0xF8, 0xB0,  // ._~.....
                            /* 3FB8 */  0x00, 0xAE, 0xFF, 0xFF, 0x61, 0x01, 0x6E, 0xBC,  // ....a.n.
                            /* 3FC0 */  0x13, 0x22, 0xD0, 0x3B, 0x58, 0x81, 0xE7, 0xB0,  // .".;X...
                            /* 3FC8 */  0xC0, 0xCF, 0x06, 0xD8, 0x13, 0x9A, 0x4F, 0x02,  // ......O.
                            /* 3FD0 */  0xEC, 0x8A, 0x08, 0xE3, 0x80, 0xA0, 0x03, 0x03,  // ........
                            /* 3FD8 */  0x5A, 0xDA, 0x81, 0x01, 0x31, 0xE3, 0x98, 0x06,  // Z...1...
                            /* 3FE0 */  0x09, 0x7F, 0x08, 0x27, 0xC0, 0x47, 0xFC, 0x0C,  // ...'.G..
                            /* 3FE8 */  0x74, 0x2E, 0x47, 0x11, 0x22, 0xD8, 0x6B, 0x93,  // t.G.".k.
                            /* 3FF0 */  0x87, 0xA5, 0x03, 0x03, 0xEA, 0x80, 0xE8, 0x13,  // ........
                            /* 3FF8 */  0x83, 0x0F, 0x0C, 0x3C, 0x2E, 0x18, 0x05, 0xF1,  // ...<....
                            /* 4000 */  0x68, 0x1D, 0xE5, 0xC0, 0x80, 0x3E, 0x2D, 0xB1,  // h....>-.
                            /* 4008 */  0x49, 0x60, 0x4F, 0x0C, 0x80, 0x97, 0xFF, 0xFF,  // I`O.....
                            /* 4010 */  0x89, 0x01, 0xF8, 0x1C, 0x0F, 0xC1, 0x77, 0x62,  // ......wb
                            /* 4018 */  0x00, 0xDF, 0xFD, 0x00, 0x77, 0x61, 0xC0, 0x1D,  // ....wa..
                            /* 4020 */  0x06, 0x38, 0xB2, 0x2F, 0x89, 0x3E, 0xB1, 0xE0,  // .8./.>..
                            /* 4028 */  0x0F, 0x00, 0x3E, 0x31, 0xF8, 0x88, 0xCA, 0x87,  // ..>1....
                            /* 4030 */  0x80, 0x3B, 0x6F, 0x79, 0x08, 0xEC, 0x16, 0x8D,  // .;oy....
                            /* 4038 */  0x3F, 0xB2, 0x80, 0xF1, 0x8C, 0x0C, 0xDC, 0x8E,  // ?.......
                            /* 4040 */  0x54, 0xE0, 0x3B, 0x31, 0x80, 0xE3, 0xFF, 0x7F,  // T.;1....
                            /* 4048 */  0x62, 0x00, 0x47, 0xB8, 0x13, 0x03, 0xE8, 0xCE,  // b.G.....
                            /* 4050 */  0x86, 0x3E, 0x31, 0x80, 0xEB, 0xD0, 0xE7, 0xF3,  // .>1.....
                            /* 4058 */  0x29, 0xB8, 0x4E, 0x0C, 0xF0, 0x6E, 0x2C, 0x78,  // ).N..n,x
                            /* 4060 */  0x59, 0x07, 0x06, 0xD4, 0x05, 0xC0, 0x32, 0x4F,  // Y.....2O
                            /* 4068 */  0x2C, 0x88, 0xD1, 0x9E, 0x70, 0x90, 0x97, 0xC3,  // ,...p...
                            /* 4070 */  0xD3, 0x60, 0x87, 0x64, 0x5F, 0xA1, 0x30, 0x27,  // .`.d_.0'
                            /* 4078 */  0x06, 0x5F, 0x9C, 0x70, 0x40, 0x35, 0x5E, 0x04,  // ._.p@5^.
                            /* 4080 */  0xC9, 0x30, 0x7C, 0x31, 0xF4, 0xB9, 0x05, 0x18,  // .0|1....
                            /* 4088 */  0x9C, 0x1A, 0xF0, 0xE7, 0x16, 0xE0, 0xFE, 0xFF,  // ........
                            /* 4090 */  0x3F, 0x36, 0x80, 0x3B, 0xE6, 0xB1, 0x01, 0x74,  // ?6.;...t
                            /* 4098 */  0x16, 0x8E, 0x0D, 0xA0, 0x3B, 0xC9, 0xE2, 0x0E,  // ....;...
                            /* 40A0 */  0x6D, 0x60, 0xBC, 0x21, 0x60, 0x81, 0xDE, 0x10,  // m`.!`...
                            /* 40A8 */  0xB0, 0x77, 0x07, 0x2C, 0x41, 0x79, 0x67, 0x07,  // .w.,Ayg.
                            /* 40B0 */  0xD4, 0x79, 0xD3, 0x67, 0x07, 0xDC, 0xBD, 0x01,  // .y.g....
                            /* 40B8 */  0x7B, 0x9F, 0xF0, 0x04, 0x8E, 0xC0, 0x73, 0xF3,  // {.....s.
                            /* 40C0 */  0xDD, 0x01, 0x0C, 0x67, 0x38, 0x60, 0x30, 0x89,  // ...g8`0.
                            /* 40C8 */  0xC7, 0x61, 0x1F, 0x64, 0xD9, 0xD9, 0x01, 0xF8,  // .a.d....
                            /* 40D0 */  0xFC, 0xFF, 0xCF, 0x0E, 0xC0, 0xF3, 0xD0, 0xE1,  // ........
                            /* 40D8 */  0xB3, 0x03, 0xB8, 0x8E, 0xE2, 0x3E, 0x3B, 0x80,  // .....>;.
                            /* 40E0 */  0xEB, 0x38, 0xEC, 0xB3, 0x03, 0x98, 0x4F, 0x09,  // .8....O.
                            /* 40E8 */  0xD8, 0xF3, 0x03, 0xF8, 0x64, 0x9E, 0x1F, 0xA0,  // ....d...
                            /* 40F0 */  0x1C, 0xA5, 0xF8, 0xF9, 0x01, 0xF0, 0xF3, 0xFF,  // ........
                            /* 40F8 */  0x3F, 0x4F, 0x81, 0xEB, 0xFC, 0x00, 0xBC, 0x63,  // ?O.....c
                            /* 4100 */  0x9F, 0x1F, 0x40, 0xE7, 0xE1, 0xFC, 0x00, 0xBA,  // ..@.....
                            /* 4108 */  0x18, 0x07, 0x2A, 0xD0, 0x9D, 0x1F, 0xC0, 0x0E,  // ..*.....
                            /* 4110 */  0x6A, 0xA0, 0x77, 0xBB, 0x63, 0xB2, 0xAF, 0x11,  // j.w.c...
                            /* 4118 */  0x69, 0x08, 0xC7, 0xF2, 0x90, 0x69, 0xA4, 0x97,  // i....i..
                            /* 4120 */  0x05, 0x4B, 0x3A, 0x43, 0xA0, 0x0E, 0x00, 0x16,  // .K:C....
                            /* 4128 */  0x79, 0xA4, 0x41, 0xDD, 0x1D, 0xF0, 0x27, 0x2C,  // y.A...',
                            /* 4130 */  0x9C, 0x5A, 0x0C, 0x72, 0x92, 0xF0, 0x35, 0xFD,  // .Z.r..5.
                            /* 4138 */  0xC9, 0xD3, 0xA3, 0x38, 0x3B, 0x7E, 0xB8, 0x82,  // ...8;~..
                            /* 4140 */  0xFD, 0xFF, 0x3F, 0x5C, 0x81, 0x63, 0x12, 0xF8,  // ..?\.c..
                            /* 4148 */  0x13, 0x0D, 0xE0, 0x2D, 0xE4, 0x11, 0x02, 0x74,  // ...-...t
                            /* 4150 */  0xE0, 0x3E, 0x42, 0x80, 0x0B, 0xFE, 0x89, 0x06,  // .>B.....
                            /* 4158 */  0x6C, 0x57, 0x07, 0xFC, 0x21, 0x01, 0xA7, 0xFE,  // lW..!...
                            /* 4160 */  0x90, 0x40, 0xB1, 0x1E, 0x12, 0x60, 0x08, 0x55,  // .@...`.U
                            /* 4168 */  0x31, 0x12, 0x26, 0xFF, 0x79, 0x20, 0x69, 0x30,  // 1.&.y i0
                            /* 4170 */  0xA8, 0xD3, 0x8F, 0x4F, 0x05, 0xF8, 0x71, 0x1E,  // ...O..q.
                            /* 4178 */  0xE6, 0xD1, 0x1D, 0x18, 0x93, 0x04, 0x87, 0x3A,  // .......:
                            /* 4180 */  0x02, 0x78, 0x60, 0xAF, 0x9E, 0xFF, 0xFF, 0x67,  // .x`....g
                            /* 4188 */  0x0A, 0xCF, 0xD7, 0x33, 0x0B, 0xC9, 0xA4, 0x8D,  // ...3....
                            /* 4190 */  0x10, 0x25, 0x65, 0x2C, 0x1E, 0x8F, 0x86, 0xF3,  // .%e,....
                            /* 4198 */  0xAE, 0xE1, 0x93, 0xA0, 0x61, 0x12, 0x78, 0xF0,  // ....a.x.
                            /* 41A0 */  0x0C, 0x8D, 0x43, 0x63, 0x87, 0xE1, 0x21, 0x06,  // ..Cc..!.
                            /* 41A8 */  0x3B, 0x88, 0xA7, 0x0C, 0x9F, 0x70, 0xD8, 0x84,  // ;....p..
                            /* 41B0 */  0x4E, 0xF5, 0x51, 0xF5, 0x6D, 0xA1, 0x78, 0x54,  // N.Q.m.xT
                            /* 41B8 */  0x61, 0x34, 0x07, 0x45, 0x04, 0x8F, 0x1D, 0x34,  // a4.E...4
                            /* 41C0 */  0x60, 0xD6, 0x7C, 0x68, 0x20, 0x57, 0x60, 0x63,  // `.|h W`c
                            /* 41C8 */  0xB1, 0x51, 0xC7, 0x08, 0x75, 0xF0, 0x06, 0x3A,  // .Q..u..:
                            /* 41D0 */  0xF8, 0xB7, 0x81, 0x60, 0xC6, 0x8A, 0x12, 0x89,  // ...`....
                            /* 41D8 */  0x5D, 0x1B, 0x7D, 0x7E, 0xC3, 0x1E, 0x79, 0x8C,  // ].}~..y.
                            /* 41E0 */  0xF7, 0x16, 0xE1, 0xAB, 0x81, 0x09, 0xBA, 0x1F,  // ........
                            /* 41E8 */  0x92, 0x50, 0x22, 0xB4, 0x76, 0x1A, 0x11, 0xC6,  // .P".v...
                            /* 41F0 */  0xAB, 0x67, 0x9C, 0xB6, 0x04, 0x18, 0xC3, 0xD1,  // .g......
                            /* 41F8 */  0xE4, 0x8E, 0x2B, 0x4A, 0x9C, 0xDE, 0x46, 0xA3,  // ..+J..F.
                            /* 4200 */  0xEB, 0x44, 0x94, 0x40, 0xF1, 0x6A, 0x03, 0x13,  // .D.@.j..
                            /* 4208 */  0xCA, 0x61, 0x45, 0x88, 0x12, 0x32, 0x52, 0x9C,  // .aE..2R.
                            /* 4210 */  0x28, 0xC6, 0x3B, 0xA0, 0x70, 0xC7, 0xD8, 0xFE,  // (.;.p...
                            /* 4218 */  0xC1, 0x93, 0x2D, 0x45, 0xC7, 0x00, 0x47, 0x1A,  // ..-E..G.
                            /* 4220 */  0x0D, 0xEA, 0x64, 0xE1, 0x33, 0x81, 0xCF, 0x03,  // ..d.3...
                            /* 4228 */  0xA7, 0x75, 0x52, 0x46, 0x0F, 0xF2, 0xF0, 0x62,  // .uRF...b
                            /* 4230 */  0x9D, 0x87, 0x01, 0x32, 0x6C, 0x36, 0x34, 0x1F,  // ...2l64.
                            /* 4238 */  0x41, 0xE0, 0xB8, 0x06, 0xD4, 0xE9, 0xD9, 0x87,  // A.......
                            /* 4240 */  0x02, 0x7F, 0x59, 0x0C, 0xC7, 0x87, 0xE8, 0x13,  // ..Y.....
                            /* 4248 */  0x8C, 0x87, 0xE5, 0xC3, 0x11, 0x3F, 0x83, 0xC0,  // .....?..
                            /* 4250 */  0x1F, 0x8F, 0x4F, 0x01, 0x1E, 0xB8, 0x8F, 0x0E,  // ..O.....
                            /* 4258 */  0x64, 0x10, 0xA8, 0x91, 0xF9, 0xFF, 0x7F, 0xB6,  // d.......
                            /* 4260 */  0x66, 0xD3, 0x7A, 0x02, 0xF0, 0x19, 0xE1, 0xB0,  // f.z.....
                            /* 4268 */  0xD8, 0xA1, 0xD4, 0x67, 0x16, 0x8F, 0x07, 0xFC,  // ...g....
                            /* 4270 */  0xF7, 0x80, 0x47, 0x83, 0x08, 0x6F, 0x0C, 0x9E,  // ..G..o..
                            /* 4278 */  0xAF, 0x8F, 0x48, 0xEC, 0xE0, 0x8B, 0x3B, 0x2E,  // ..H...;.
                            /* 4280 */  0xF8, 0x84, 0x80, 0xBF, 0xA1, 0x3C, 0x8F, 0xB0,  // .....<..
                            /* 4288 */  0x80, 0x47, 0x58, 0x2A, 0xEA, 0x6C, 0x82, 0x3A,  // .GX*.l.:
                            /* 4290 */  0x54, 0xF8, 0x3C, 0xC1, 0x6E, 0x0D, 0x2F, 0x41,  // T.<.n./A
                            /* 4298 */  0x86, 0x08, 0xCB, 0x0E, 0x38, 0x1E, 0x1B, 0xFC,  // ....8...
                            /* 42A0 */  0xFB, 0x8C, 0x0F, 0x13, 0xE0, 0x38, 0x45, 0xC0,  // .....8E.
                            /* 42A8 */  0xB8, 0xDE, 0x58, 0xD7, 0x79, 0x18, 0x84, 0xC7,  // ..X.y...
                            /* 42B0 */  0x33, 0x8F, 0x15, 0x77, 0x1E, 0x31, 0xF0, 0x91,  // 3..w.1..
                            /* 42B8 */  0xF8, 0x50, 0xE0, 0x59, 0x7B, 0xAA, 0x3E, 0xC0,  // .P.Y{.>.
                            /* 42C0 */  0x30, 0xA0, 0x77, 0x88, 0x63, 0x7B, 0x6F, 0xF0,  // 0.w.c{o.
                            /* 42C8 */  0x29, 0x94, 0x0D, 0x17, 0x3C, 0x27, 0x03, 0x70,  // )...<'.p
                            /* 42D0 */  0x4C, 0xEB, 0x70, 0x61, 0xFF, 0xFF, 0x87, 0xCB,  // L.pa....
                            /* 42D8 */  0xC7, 0x85, 0x9D, 0xC5, 0x29, 0xB2, 0x71, 0xE1,  // ....).q.
                            /* 42E0 */  0xA0, 0xCE, 0xD8, 0x23, 0x06, 0xD7, 0xD9, 0xCE,  // ...#....
                            /* 42E8 */  0x23, 0xC6, 0x1D, 0x35, 0x7C, 0x58, 0x80, 0x01,  // #..5|X..
                            /* 42F0 */  0xFF, 0xAC, 0x71, 0x4A, 0xC7, 0xEB, 0x88, 0xE3,  // ..qJ....
                            /* 42F8 */  0x05, 0x15, 0xA0, 0xC7, 0x0B, 0xFF, 0x4C, 0xE8,  // ......L.
                            /* 4300 */  0xD3, 0x02, 0x58, 0x47, 0xC5, 0x8F, 0x0B, 0x60,  // ..XG...`
                            /* 4308 */  0xB1, 0x0A, 0xA4, 0x63, 0x4A, 0xA0, 0xA3, 0xF5,  // ...cJ...
                            /* 4310 */  0x9B, 0xC2, 0xA3, 0xC5, 0x8D, 0xCC, 0x77, 0x47,  // ......wG
                            /* 4318 */  0x7E, 0x2F, 0xF3, 0x34, 0x38, 0x4A, 0xE4, 0x63,  // ~/.48J.c
                            /* 4320 */  0x3F, 0xCC, 0x47, 0x60, 0x3E, 0x5C, 0xF0, 0x80,  // ?.G`>\..
                            /* 4328 */  0xFA, 0xB4, 0x00, 0x3C, 0x86, 0xE5, 0xFF, 0xFF,  // ...<....
                            /* 4330 */  0xB0, 0xD8, 0x64, 0x31, 0x28, 0x87, 0xC5, 0xEE,  // ..d1(...
                            /* 4338 */  0x74, 0x06, 0x3E, 0x60, 0x30, 0x9E, 0x16, 0xE0,  // t.>`0...
                            /* 4340 */  0x9C, 0x90, 0xD8, 0x54, 0x0E, 0xE3, 0x35, 0xE2,  // ...T..5.
                            /* 4348 */  0x11, 0x8F, 0x0D, 0x87, 0x9F, 0x16, 0xC0, 0x76,  // .......v
                            /* 4350 */  0x80, 0xF6, 0x69, 0x01, 0x78, 0x8C, 0x0A, 0x7B,  // ..i.x..{
                            /* 4358 */  0x49, 0xC5, 0x9C, 0x16, 0x80, 0xC3, 0x59, 0xC5,  // I.....Y.
                            /* 4360 */  0x0A, 0x27, 0x43, 0x6E, 0x11, 0xEC, 0x88, 0xE6,  // .'Cn....
                            /* 4368 */  0x11, 0x45, 0x78, 0x39, 0x64, 0x37, 0x21, 0xDF,  // .Ex9d7!.
                            /* 4370 */  0xAB, 0x7C, 0xA8, 0x63, 0xE3, 0x05, 0xCF, 0x39,  // .|.c...9
                            /* 4378 */  0xCD, 0xE3, 0x85, 0x3F, 0x8F, 0xE3, 0x05, 0xCB,  // ...?....
                            /* 4380 */  0xB8, 0x70, 0xFF, 0xFF, 0x71, 0xF1, 0xFB, 0x1C,  // .p..q...
                            /* 4388 */  0x1B, 0x17, 0x3B, 0xAA, 0x80, 0x63, 0xC0, 0x38,  // ..;..c.8
                            /* 4390 */  0x41, 0x03, 0x46, 0x1F, 0xDA, 0x7C, 0x5A, 0xC0,  // A.F..|Z.
                            /* 4398 */  0x0F, 0x1A, 0x1C, 0x47, 0x5C, 0x0F, 0x1A, 0x3C,  // ...G\..<
                            /* 43A0 */  0x27, 0x55, 0x0F, 0x1A, 0xFE, 0x69, 0xEE, 0x99,  // 'U...i..
                            /* 43A8 */  0x01, 0xAC, 0x03, 0x07, 0x3E, 0x87, 0x12, 0xDC,  // ....>...
                            /* 43B0 */  0x01, 0x13, 0x1E, 0x4A, 0xEC, 0xC0, 0x7D, 0xDE,  // ...J..}.
                            /* 43B8 */  0x15, 0x05, 0x71, 0xD8, 0xC6, 0x7F, 0x73, 0x7C,  // ..q...s|
                            /* 43C0 */  0xC6, 0x38, 0x80, 0x33, 0x30, 0xCA, 0x23, 0xB4,  // .8.30.#.
                            /* 43C8 */  0x51, 0xE3, 0x84, 0x78, 0x92, 0xE6, 0xC3, 0xC4,  // Q..x....
                            /* 43D0 */  0x0D, 0x82, 0xA3, 0x3E, 0x6F, 0xB2, 0x41, 0xBC,  // ...>o.A.
                            /* 43D8 */  0x72, 0x7A, 0x1E, 0x87, 0xE4, 0x43, 0x92, 0x11,  // rz...C..
                            /* 43E0 */  0x0E, 0xF1, 0x98, 0x1F, 0x10, 0x3D, 0x53, 0xCC,  // .....=S.
                            /* 43E8 */  0x59, 0x8E, 0xFF, 0xFF, 0x09, 0x1C, 0xEB, 0x04,  // Y.......
                            /* 43F0 */  0x49, 0x03, 0x1C, 0x11, 0x24, 0xF1, 0x39, 0x40,  // I...$.9@
                            /* 43F8 */  0x61, 0x7C, 0x88, 0x04, 0x5C, 0x1D, 0x4E, 0xF9,  // a|..\.N.
                            /* 4400 */  0x59, 0x09, 0x0C, 0x47, 0x01, 0xD8, 0xE7, 0x57,  // Y..G...W
                            /* 4408 */  0x86, 0x14, 0xEF, 0x04, 0x9E, 0x16, 0x0E, 0xE0,  // ........
                            /* 4410 */  0xFD, 0xDB, 0x07, 0x06, 0x13, 0xF8, 0x14, 0x09,  // ........
                            /* 4418 */  0xFB, 0xAA, 0x10, 0xF7, 0x25, 0xD2, 0x83, 0x7A,  // ....%..z
                            /* 4420 */  0x74, 0x7C, 0x70, 0x7C, 0x82, 0x7C, 0x7B, 0x3C,  // t|p|.|{<
                            /* 4428 */  0xA1, 0x48, 0xF1, 0xDE, 0x23, 0x0D, 0xF1, 0x08,  // .H..#...
                            /* 4430 */  0x69, 0x28, 0xE3, 0x05, 0x3D, 0xBA, 0x47, 0x82,  // i(..=.G.
                            /* 4438 */  0x28, 0x41, 0x22, 0x45, 0x0D, 0x13, 0x22, 0x54,  // (A"E.."T
                            /* 4440 */  0xA0, 0x10, 0x11, 0x8E, 0xD4, 0x50, 0x4F, 0x91,  // .....PO.
                            /* 4448 */  0x2C, 0xE2, 0x81, 0x40, 0x67, 0x0E, 0x9F, 0x22,  // ,..@g.."
                            /* 4450 */  0x81, 0xDF, 0xFF, 0xFF, 0x14, 0x09, 0xF8, 0x43,  // .......C
                            /* 4458 */  0x7B, 0x0E, 0x01, 0x06, 0xA7, 0x05, 0xDC, 0x41,  // {......A
                            /* 4460 */  0x04, 0xB8, 0x48, 0x7D, 0xD9, 0x68, 0xB4, 0x8E,  // ..H}.h..
                            /* 4468 */  0xFA, 0x28, 0xD0, 0x29, 0x9D, 0x1F, 0x5A, 0x1C,  // .(.)..Z.
                            /* 4470 */  0x9F, 0x4A, 0xA7, 0x74, 0x7E, 0xE8, 0x83, 0x71,  // .J.t~..q
                            /* 4478 */  0x88, 0xC7, 0xDE, 0xBD, 0x30, 0x58, 0x6F, 0x14,  // ....0Xo.
                            /* 4480 */  0x8E, 0x08, 0xAF, 0xC3, 0xA6, 0x87, 0xE1, 0x70,  // .......p
                            /* 4488 */  0x14, 0x3A, 0x8C, 0xF9, 0x8C, 0xCE, 0x0F, 0x40,  // .:.....@
                            /* 4490 */  0x86, 0x33, 0x88, 0x01, 0x9D, 0xE4, 0x30, 0x0A,  // .3....0.
                            /* 4498 */  0x8A, 0xFF, 0xFF, 0x8D, 0xD2, 0xB3, 0xF5, 0xF4,  // ........
                            /* 44A0 */  0x1E, 0x1F, 0x18, 0xA4, 0x0F, 0x06, 0xFC, 0xC0,  // ........
                            /* 44A8 */  0x62, 0x4C, 0xE3, 0x5B, 0xCD, 0xA9, 0x08, 0x05,  // bL.[....
                            /* 44B0 */  0xE6, 0x43, 0x3A, 0xE6, 0xD2, 0x08, 0x2E, 0x7D,  // .C:....}
                            /* 44B8 */  0x57, 0x74, 0x90, 0xA3, 0xF3, 0x80, 0x2B, 0xD5,  // Wt....+.
                            /* 44C0 */  0x68, 0x79, 0xA4, 0x73, 0x3E, 0x05, 0xF1, 0xC0,  // hy.s>...
                            /* 44C8 */  0x1C, 0x6A, 0xB4, 0xE8, 0x33, 0x94, 0x2F, 0x01,  // .j..3./.
                            /* 44D0 */  0xF0, 0x0E, 0x85, 0xB8, 0x83, 0x0A, 0x3F, 0xE6,  // ......?.
                            /* 44D8 */  0x83, 0x77, 0x44, 0x9E, 0x32, 0xB8, 0xA2, 0x0D,  // .wD.2...
                            /* 44E0 */  0x0D, 0x7D, 0xDA, 0xF1, 0xD0, 0xF0, 0xA7, 0x2F,  // .}...../
                            /* 44E8 */  0x70, 0x8C, 0x0E, 0xDC, 0x27, 0x07, 0xFF, 0xFF,  // p...'...
                            /* 44F0 */  0x47, 0x07, 0x2E, 0x81, 0xF7, 0x03, 0x90, 0xC3,  // G.......
                            /* 44F8 */  0x63, 0x4E, 0x8B, 0x1E, 0x94, 0xC7, 0xE3, 0x61,  // cN.....a
                            /* 4500 */  0xF1, 0xE3, 0x84, 0x8F, 0x4C, 0x0C, 0xFB, 0xB5,  // ....L...
                            /* 4508 */  0xC3, 0xA3, 0x3D, 0xC1, 0x97, 0x90, 0x07, 0x65,  // ..=....e
                            /* 4510 */  0x0C, 0xAC, 0x07, 0xCA, 0x61, 0x8D, 0x16, 0xF6,  // ....a...
                            /* 4518 */  0xF1, 0xE0, 0x91, 0xC5, 0xD7, 0x1D, 0x9F, 0x6D,  // .......m
                            /* 4520 */  0x19, 0xAC, 0x07, 0xEB, 0x33, 0x13, 0x78, 0x4E,  // ....3.xN
                            /* 4528 */  0x24, 0xEC, 0x59, 0xF2, 0x38, 0x80, 0x3D, 0xC6,  // $.Y.8.=.
                            /* 4530 */  0xC3, 0x39, 0x91, 0xE0, 0x9E, 0x28, 0x4C, 0xFC,  // .9...(L.
                            /* 4538 */  0x29, 0x05, 0x1D, 0xE8, 0x0D, 0x20, 0xCC, 0xA7,  // ).... ..
                            /* 4540 */  0x14, 0xB0, 0x8A, 0x3E, 0xA5, 0x50, 0x08, 0xCB,  // ...>.P..
                            /* 4548 */  0x85, 0x91, 0x58, 0x08, 0x1D, 0x34, 0xB8, 0x3C,  // ..X..4.<
                            /* 4550 */  0x38, 0x0A, 0xE2, 0x43, 0x93, 0xC3, 0x9C, 0x52,  // 8..C...R
                            /* 4558 */  0x40, 0x75, 0x6E, 0x80, 0x77, 0x4A, 0x61, 0x63,  // @un.wJac
                            /* 4560 */  0x67, 0xFF, 0xFF, 0x73, 0x03, 0xBC, 0x6B, 0x0A,  // g..s..k.
                            /* 4568 */  0xF8, 0x8E, 0x23, 0xC0, 0x69, 0x68, 0xE0, 0x38,  // ..#.ih.8
                            /* 4570 */  0x8E, 0x00, 0x3E, 0x46, 0x07, 0x8E, 0xE3, 0x08,  // ..>F....
                            /* 4578 */  0xE0, 0xE2, 0xFF, 0x7F, 0x1C, 0x81, 0x3B, 0x34,  // ......;4
                            /* 4580 */  0x7E, 0x1C, 0x01, 0x3E, 0x47, 0x0F, 0x76, 0x1C,  // ~..>G.v.
                            /* 4588 */  0x01, 0xAB, 0xE4, 0x17, 0x87, 0x41, 0xFC, 0x5C,  // .....A.\
                            /* 4590 */  0x90, 0x48, 0x18, 0xD4, 0xD9, 0x12, 0x70, 0x75,  // .H....pu
                            /* 4598 */  0xAC, 0x07, 0xF3, 0x85, 0x82, 0xCD, 0x9D, 0x1D,  // ........
                            /* 45A0 */  0x2A, 0xE1, 0x1F, 0x23, 0xA3, 0x76, 0x86, 0xA0,  // *..#.v..
                            /* 45A8 */  0x43, 0xA5, 0x07, 0x15, 0xE2, 0x65, 0xF2, 0xAD,  // C....e..
                            /* 45B0 */  0xF2, 0x48, 0x1E, 0x22, 0x02, 0x3D, 0x54, 0x32,  // .H.".=T2
                            /* 45B8 */  0x88, 0xA8, 0x51, 0xFE, 0xFF, 0x71, 0x5E, 0x26,  // ..Q..q^&
                            /* 45C0 */  0x83, 0x84, 0x32, 0xEA, 0x81, 0x45, 0x0C, 0xF8,  // ..2..E..
                            /* 45C8 */  0x22, 0xF8, 0x68, 0x19, 0x24, 0x7C, 0x8C, 0xD8,  // ".h.$|..
                            /* 45D0 */  0x07, 0xE0, 0x43, 0x25, 0x8B, 0xFC, 0x66, 0xD0,  // ..C%..f.
                            /* 45D8 */  0x49, 0xC0, 0x87, 0x4A, 0x80, 0x1F, 0x81, 0x0F,  // I..J....
                            /* 45E0 */  0x32, 0x68, 0x68, 0xBB, 0x1C, 0x2B, 0xB9, 0x15,  // 2hh..+..
                            /* 45E8 */  0x71, 0x82, 0xF1, 0x8E, 0xDA, 0xA0, 0x3A, 0xE8,  // q.....:.
                            /* 45F0 */  0x78, 0x64, 0xF0, 0x0F, 0x2E, 0xB8, 0x43, 0x04,  // xd....C.
                            /* 45F8 */  0xDC, 0x21, 0xB1, 0x1B, 0x04, 0x0E, 0xED, 0xFF,  // .!......
                            /* 4600 */  0x7F, 0x06, 0x3E, 0xD3, 0x80, 0xEB, 0x8C, 0x0D,  // ..>.....
                            /* 4608 */  0x1C, 0xF0, 0xA2, 0x45, 0xF4, 0xF9, 0xD4, 0x67,  // ...E...g
                            /* 4610 */  0x51, 0xE0, 0x71, 0x0D, 0xF0, 0x10, 0xF8, 0x59,  // Q.q....Y
                            /* 4618 */  0xC2, 0x43, 0xE0, 0x03, 0x78, 0x25, 0x3F, 0x43,  // .C..x%?C
                            /* 4620 */  0x9F, 0x79, 0x4E, 0x0C, 0x77, 0x6E, 0xE1, 0x60,  // .yN.wn.`
                            /* 4628 */  0xA7, 0xCC, 0x8F, 0x3E, 0x38, 0x85, 0x36, 0x7D,  // ...>8.6}
                            /* 4630 */  0x6A, 0x34, 0x6A, 0xD5, 0xA0, 0x4C, 0x8D, 0x32,  // j4j..L.2
                            /* 4638 */  0x0D, 0x6A, 0xF5, 0xA9, 0xD4, 0x98, 0xB1, 0xE6,  // .j......
                            /* 4640 */  0x2F, 0x02, 0x09, 0x7A, 0x3B, 0xE8, 0x6C, 0x60,  // /..z;.l`
                            /* 4648 */  0xF9, 0x20, 0x54, 0x36, 0x85, 0x40, 0x7C, 0xA2,  // . T6.@|.
                            /* 4650 */  0x31, 0x88, 0x05, 0x9E, 0x55, 0x05, 0xE2, 0x78,  // 1...U..x
                            /* 4658 */  0x20, 0x34, 0xD0, 0x1A, 0x04, 0xE2, 0x30, 0x26,  //  4....0&
                            /* 4660 */  0x40, 0x98, 0xF8, 0x93, 0xB8, 0x40, 0x2C, 0xF8,  // @....@,.
                            /* 4668 */  0x89, 0x20, 0x70, 0xF2, 0x44, 0x10, 0x88, 0xC5,  // . p.D...
                            /* 4670 */  0xD9, 0x00, 0x61, 0x92, 0x74, 0x1C, 0x3D, 0xA8,  // ..a.t.=.
                            /* 4678 */  0x0F, 0x10, 0x26, 0xE4, 0x1D, 0x20, 0x10, 0x8B,  // ..&.. ..
                            /* 4680 */  0x70, 0x02, 0xC2, 0x22, 0x80, 0x50, 0xD9, 0x4F,  // p..".P.O
                            /* 4688 */  0x07, 0x81, 0x58, 0xA6, 0x15, 0x10, 0x26, 0x51,  // ..X...&Q
                            /* 4690 */  0x0B, 0x08, 0xF5, 0x02, 0x42, 0x5F, 0x00, 0x02,  // ....B_..
                            /* 4698 */  0x21, 0x66, 0x86, 0x45, 0x9F, 0xA7, 0x3A, 0x2D,  // !f.E..:-
                            /* 46A0 */  0x11, 0x37, 0x43, 0xA1, 0xEB, 0xD6, 0x51, 0x95,  // .7C...Q.
                            /* 46A8 */  0xD8, 0x01, 0x61, 0xFF, 0x7F, 0x09, 0x7A, 0x40,  // ..a...z@
                            /* 46B0 */  0x58, 0xEC, 0x97, 0x84, 0x40, 0x2C, 0xDA, 0x10,  // X...@,..
                            /* 46B8 */  0x20, 0x75, 0x74, 0xC4, 0x60, 0xD2, 0x40, 0x34,  //  ut.`.@4
                            /* 46C0 */  0x08, 0x62, 0x09, 0x88, 0x09, 0x06, 0x11, 0x90,  // .b......
                            /* 46C8 */  0x03, 0x78, 0x02, 0x62, 0x71, 0x40, 0x04, 0xE4,  // .x.bq@..
                            /* 46D0 */  0x80, 0xA6, 0x80, 0x58, 0x5C, 0x10, 0x01, 0x39,  // ...X\..9
                            /* 46D8 */  0xBC, 0x2B, 0x20, 0x26, 0xE5, 0x1D, 0x21, 0x20,  // .+ &..! 
                            /* 46E0 */  0x0B, 0x7A, 0xFD, 0x0B, 0xC8, 0xF2, 0x40, 0x04,  // .z....@.
                            /* 46E8 */  0x64, 0x69, 0xCF, 0x10, 0x01, 0x59, 0x28, 0x88,  // di...Y(.
                            /* 46F0 */  0x06, 0x49, 0x3E, 0x33, 0x81, 0x88, 0x68, 0x10,  // .I>3..h.
                            /* 46F8 */  0x0D, 0x89, 0x3C, 0x83, 0x04, 0xE4, 0x08, 0x20,  // ..<.... 
                            /* 4700 */  0x02, 0x72, 0x8C, 0xC7, 0x4D, 0x20, 0x12, 0x0A,  // .r..M ..
                            /* 4708 */  0x44, 0x40, 0x0E, 0xF6, 0xA6, 0x10, 0x90, 0x63,  // D@.....c
                            /* 4710 */  0x82, 0x08, 0xC8, 0xD1, 0xD5, 0x01, 0x31, 0x21,  // ......1!
                            /* 4718 */  0xEE, 0x06, 0x42, 0xED, 0x0D, 0x84, 0x82, 0x08,  // ..B.....
                            /* 4720 */  0xC8, 0xC2, 0xFD, 0x01, 0xB1, 0x18, 0x20, 0x02,  // ...... .
                            /* 4728 */  0x72, 0xB8, 0x2F, 0x43, 0x20, 0x12, 0x15, 0x44,  // r./C ..D
                            /* 4730 */  0x83, 0x25, 0x0F, 0x08, 0x0D, 0x96, 0x80, 0x08,  // .%......
                            /* 4738 */  0xC8, 0xD1, 0x34, 0x02, 0xB1, 0xA0, 0x20, 0x3A,  // ..4... :
                            /* 4740 */  0x14, 0x90, 0x27, 0x94, 0x80, 0x2C, 0x0B, 0x44,  // ..'..,.D
                            /* 4748 */  0xC7, 0x00, 0xF2, 0x06, 0x09, 0x44, 0xE4, 0x82,  // .....D..
                            /* 4750 */  0x08, 0xC8, 0x51, 0xFE, 0x10, 0x81, 0x48, 0x30,  // ..Q...H0
                            /* 4758 */  0x10, 0x1D, 0x11, 0xC8, 0xD3, 0x43, 0x40, 0x16,  // .....C@.
                            /* 4760 */  0x07, 0xA2, 0x23, 0x03, 0x79, 0x50, 0x04, 0x22,  // ..#.yP."
                            /* 4768 */  0xD1, 0x40, 0x04, 0x64, 0x19, 0xBF, 0x8A, 0x40,  // .@.d...@
                            /* 4770 */  0x44, 0x14, 0x88, 0x00, 0xC9, 0xA3, 0x22, 0x20,  // D....." 
                            /* 4778 */  0x03, 0xD1, 0xA9, 0x85, 0xA8, 0x05, 0x62, 0x72,  // ......br
                            /* 4780 */  0x40, 0x74, 0x7C, 0x20, 0xAF, 0x8D, 0x40, 0x44,  // @t| ..@D
                            /* 4788 */  0x3E, 0x88, 0x80, 0x1C, 0x51, 0x2F, 0x10, 0x0B,  // >...Q/..
                            /* 4790 */  0x0C, 0xA2, 0xC1, 0x90, 0x37, 0xC7, 0xC1, 0x30,  // ....7..0
                            /* 4798 */  0x10, 0x01, 0x59, 0xEC, 0x2B, 0x4B, 0x40, 0x96,  // ..Y.+K@.
                            /* 47A0 */  0x0E, 0x22, 0x20, 0x47, 0xFA, 0xED, 0x08, 0xC8,  // ." G....
                            /* 47A8 */  0x01, 0x41, 0x34, 0x78, 0xF2, 0xF5, 0x11, 0x90,  // .A4x....
                            /* 47B0 */  0xFF, 0xFF, 0x42, 0xFE, 0x51, 0x07, 0xC2, 0x54,  // ..B.Q..T
                            /* 47B8 */  0x0F, 0x84, 0x82, 0x08, 0xC8, 0x31, 0xDF, 0x51,  // .....1.Q
                            /* 47C0 */  0x02, 0x72, 0x68, 0x10, 0x01, 0x59, 0xD4, 0x73,  // .rh..Y.s
                            /* 47C8 */  0x24, 0x10, 0x91, 0x08, 0x22, 0x20, 0x07, 0x31,  // $..." .1
                            /* 47D0 */  0x0E, 0xC4, 0x62, 0x81, 0x68, 0x10, 0xE4, 0x89,  // ..b.h...
                            /* 47D8 */  0xA9, 0x41, 0x90, 0x2F, 0x88, 0x8E, 0x16, 0xE4,  // .A./....
                            /* 47E0 */  0xDD, 0x25, 0x20, 0x87, 0x00, 0x11, 0x90, 0xB3,  // .% .....
                            /* 47E8 */  0x3D, 0xB8, 0x1E, 0x02, 0x18, 0x88, 0x80, 0x1C,  // =.......
                            /* 47F0 */  0xFA, 0xBD, 0x24, 0x20, 0x4B, 0x50, 0x7F, 0xAC,  // ..$ KP..
                            /* 47F8 */  0xA0, 0xAF, 0x23, 0x01, 0x59, 0x20, 0x88, 0x80,  // ..#.Y ..
                            /* 4800 */  0x2C, 0x59, 0x3F, 0x10, 0x0B, 0x00, 0xA2, 0x01,  // ,Y?.....
                            /* 4808 */  0x92, 0x00, 0x03, 0xA4, 0x20, 0x02, 0x72, 0xDC,  // .... .r.
                            /* 4810 */  0x04, 0x40, 0x2C, 0x3C, 0x88, 0x06, 0x40, 0x2A,  // .@,<..@*
                            /* 4818 */  0x0C, 0x80, 0x82, 0xE8, 0x00, 0x41, 0x3A, 0x1C,  // .....A:.
                            /* 4820 */  0x20, 0x28, 0x88, 0x0E, 0x25, 0xA4, 0x04, 0x10,  //  (..%...
                            /* 4828 */  0x8B, 0x07, 0xA2, 0x01, 0x91, 0x16, 0x03, 0xA2,  // ........
                            /* 4830 */  0x31, 0x80, 0x98, 0xBC, 0x1C, 0x40, 0x4C, 0x2C,  // 1....@L,
                            /* 4838 */  0x88, 0x0E, 0x1A, 0x24, 0xC8, 0x41, 0x83, 0x82,  // ...$.A..
                            /* 4840 */  0x68, 0xD0, 0xE4, 0x0D, 0xAE, 0x41, 0x13, 0x10,  // h....A..
                            /* 4848 */  0x01, 0x59, 0x4A, 0x15, 0x20, 0x26, 0x0C, 0x44,  // .YJ. &.D
                            /* 4850 */  0x07, 0x0C, 0xD2, 0xE5, 0x80, 0x41, 0x41, 0x04,  // .....AA.
                            /* 4858 */  0xE4, 0x38, 0x65, 0x80, 0x58, 0x38, 0x10, 0x0D,  // .8e.X8..
                            /* 4860 */  0x86, 0xB4, 0x19, 0x0C, 0x8D, 0x73, 0x98, 0xA0,  // .....s..
                            /* 4868 */  0x79, 0x80, 0x98, 0x32, 0x10, 0x01, 0x59, 0x6D,  // y..2..Ym
                            /* 4870 */  0x1F, 0x20, 0xA6, 0x1D, 0x44, 0x40, 0x4E, 0x55,  // . ..D@NU
                            /* 4878 */  0x08, 0x88, 0x65, 0x04, 0x11, 0x90, 0x53, 0x36,  // ..e...S6
                            /* 4880 */  0x02, 0x62, 0x99, 0x41, 0x04, 0x64, 0x1D, 0x99,  // .b.A.d..
                            /* 4888 */  0x80, 0x98, 0x2A, 0x10, 0x01, 0x59, 0xF1, 0x83,  // ..*..Y..
                            /* 4890 */  0x54, 0x40, 0xD6, 0x0F, 0x22, 0x60, 0x92, 0x0A,  // T@.."`..
                            /* 4898 */  0x98, 0x82, 0x08, 0xC8, 0x2A, 0x6A, 0x01, 0x31,  // ....*j.1
                            /* 48A0 */  0x4D, 0x20, 0x1A, 0x0C, 0xE9, 0x05, 0xC4, 0xFE,  // M ......
                            /* 48A8 */  0xFF, 0xDA, 0x41, 0x04, 0xE4, 0x4C, 0xC5, 0x80,  // ..A..L..
                            /* 48B0 */  0x58, 0x42, 0x10, 0x0D, 0x84, 0x54, 0x03, 0x61,  // XB...T.a
                            /* 48B8 */  0x29, 0x40, 0x68, 0xA2, 0x6C, 0x20, 0x2C, 0x69,  // )@h.l ,i
                            /* 48C0 */  0x39, 0x10, 0xA6, 0x33, 0x1D, 0x08, 0xD3, 0xDE,  // 9..3....
                            /* 48C8 */  0x0E, 0x90, 0xE6, 0x03, 0x61, 0x7A, 0xFA, 0x81,  // ....az..
                            /* 48D0 */  0x30, 0x2D, 0x01, 0x41, 0x98, 0xB6, 0x86, 0x20,  // 0-.A... 
                            /* 48D8 */  0x2C, 0x19, 0x08, 0x4D, 0xF7, 0xA2, 0x14, 0x88,  // ,..M....
                            /* 48E0 */  0xB3, 0x77, 0x04, 0x61, 0xCA, 0x43, 0x82, 0xB0,  // .w.a.C..
                            /* 48E8 */  0x0C, 0x25, 0x41, 0x58, 0xC6, 0x98, 0x20, 0x4C,  // .%AX.. L
                            /* 48F0 */  0x61, 0x4D, 0x10, 0x9A, 0x13, 0x84, 0xE9, 0xEA,  // aM......
                            /* 48F8 */  0x09, 0xC2, 0xF4, 0x27, 0x05, 0x61, 0xE9, 0x41,  // ...'.a.A
                            /* 4900 */  0xA8, 0x8A, 0xA8, 0x20, 0x4C, 0x6B, 0xD7, 0x81,  // ... Lk..
                            /* 4908 */  0x51, 0x10, 0x9A, 0xF6, 0xC5, 0x2F, 0x10, 0xAB,  // Q..../..
                            /* 4910 */  0x8C, 0x3B, 0x0C, 0x0A, 0x42, 0x53, 0xD6, 0x05,  // .;..BS..
                            /* 4918 */  0x61, 0x9A, 0x0A, 0x0F, 0x8F, 0x82, 0xD0, 0x34,  // a......4
                            /* 4920 */  0x89, 0x07, 0x40, 0x2B, 0x0F, 0x94, 0x66, 0x06,  // ..@+..f.
                            /* 4928 */  0x61, 0x99, 0x3B, 0x0F, 0x9B, 0x29, 0x08, 0x0D,  // a.;..)..
                            /* 4930 */  0x44, 0x4B, 0x03, 0xD1, 0xD4, 0x40, 0xB4, 0x35,  // DK...@.5
                            /* 4938 */  0x10, 0x8D, 0x3D, 0x4C, 0x5A, 0x1B, 0x88, 0x29,  // ..=LZ..)
                            /* 4940 */  0xC9, 0x0D, 0xC4, 0x34, 0x04, 0x07, 0x62, 0x8A,  // ...4..b.
                            /* 4948 */  0x40, 0x04, 0x44, 0x92, 0x03, 0x51, 0x10, 0x01,  // @.D..Q..
                            /* 4950 */  0x39, 0x0B, 0x10, 0x4D, 0x06, 0x44, 0x35, 0x35,  // 9..M.D55
                            /* 4958 */  0x07, 0x62, 0x0A, 0x41, 0x74, 0xFC, 0x20, 0x40,  // .b.At. @
                            /* 4960 */  0x34, 0x29, 0x10, 0xCD, 0x54, 0xFD, 0x68, 0x40,  // 4)..T.h@
                            /* 4968 */  0x41, 0x74, 0x10, 0x20, 0xD9, 0x81, 0x98, 0x52,  // At. ...R
                            /* 4970 */  0x10, 0x0D, 0x95, 0x00, 0xD1, 0xC4, 0x40, 0x54,  // ......@T
                            /* 4978 */  0x6B, 0x77, 0x20, 0xA6, 0x1C, 0x44, 0x40, 0xD6,  // kw ..D@.
                            /* 4980 */  0x5C, 0x1E, 0x88, 0x25, 0x00, 0x11, 0x90, 0xFF,  // \..%....
                            /* 4988 */  0xFF, 0xD9, 0x81, 0xA8, 0x92, 0xF4, 0x07, 0x04,  // ........
                            /* 4990 */  0x1A, 0x1F, 0x88, 0xA9, 0x03, 0x11, 0x90, 0x73,  // .......s
                            /* 4998 */  0x01, 0xD1, 0x94, 0x40, 0x34, 0x65, 0xFE, 0x63,  // ...@4e.c
                            /* 49A0 */  0x04, 0x05, 0x11, 0x90, 0xF5, 0x1E, 0xE8, 0x04,  // ........
                            /* 49A8 */  0x64, 0xF5, 0x20, 0x02, 0x72, 0x72, 0x20, 0xFA,  // d. .rr .
                            /* 49B0 */  0xC7, 0xFA, 0xFA, 0x7A, 0x4C, 0x20, 0x20, 0x02,  // ...zL  .
                            /* 49B8 */  0x72, 0x22, 0x20, 0x9A, 0x48, 0x01, 0x10, 0xCB,  // r" .H...
                            /* 49C0 */  0x07, 0xA2, 0x43, 0x03, 0x91, 0x00, 0xC4, 0xB2,  // ..C.....
                            /* 49C8 */  0x82, 0xE8, 0x40, 0x40, 0x34, 0x00, 0xB1, 0xDC,  // ..@@4...
                            /* 49D0 */  0x20, 0x1A, 0x08, 0xF1, 0x00, 0xC4, 0xD4, 0x83,  //  .......
                            /* 49D8 */  0x08, 0xC8, 0xB9, 0x81, 0xA8, 0x0A, 0x11, 0x40,  // .......@
                            /* 49E0 */  0x4C, 0x83, 0x0A, 0x20, 0xA6, 0x08, 0x44, 0x40,  // L.. ..D@
                            /* 49E8 */  0x4E, 0x02, 0x44, 0x73, 0x01, 0x51, 0x45, 0x2E,  // N.Ds.QE.
                            /* 49F0 */  0x80, 0x98, 0x3E, 0x10, 0x1D, 0x22, 0x88, 0x0D,  // ..>.."..
                            /* 49F8 */  0x20, 0xA6, 0x17, 0x44, 0x07, 0x0C, 0xE2, 0x03,  //  ..D....
                            /* 4A00 */  0x88, 0x25, 0x01, 0xD1, 0xA1, 0x80, 0x18, 0x01,  // .%......
                            /* 4A08 */  0x62, 0xC9, 0x40, 0x04, 0x44, 0x9C, 0x00, 0x51,  // b.@.D..Q
                            /* 4A10 */  0x10, 0x01, 0x11, 0x2B, 0x40, 0x14, 0x44, 0x40,  // ...+@.D@
                            /* 4A18 */  0xC4, 0x0B, 0x10, 0x05, 0xD1, 0x60, 0x89, 0x99,  // .....`..
                            /* 4A20 */  0xC1, 0x52, 0x10, 0x1D, 0x39, 0x88, 0x1A, 0x20,  // .R..9.. 
                            /* 4A28 */  0xA6, 0x0C, 0x44, 0x07, 0x04, 0x02, 0x44, 0x13,  // ..D...D.
                            /* 4A30 */  0x02, 0x51, 0x6D, 0x6E, 0x80, 0x98, 0x52, 0x10,  // .Qmn..R.
                            /* 4A38 */  0x1D, 0x08, 0x88, 0x1D, 0x20, 0xA6, 0x0E, 0x44,  // .... ..D
                            /* 4A40 */  0x07, 0x02, 0x02, 0x44, 0x53, 0x02, 0x51, 0x7D,  // ...DS.Q}
                            /* 4A48 */  0x7A, 0x80, 0x98, 0x5A, 0x10, 0x01, 0x39, 0x27,  // z..Z..9'
                            /* 4A50 */  0x10, 0x4D, 0x0D, 0x44, 0x55, 0x29, 0x1A, 0x0A,  // .M.DU)..
                            /* 4A58 */  0x05, 0xA1, 0x09, 0x1C, 0x81, 0x30, 0xC5, 0x92,  // .....0..
                            /* 4A60 */  0x40, 0x98, 0x72, 0x4B, 0x43, 0xA3, 0x9A, 0x40,  // @.rKC..@
                            /* 4A68 */  0xD8, 0xFF, 0x5F, 0xB7, 0x29, 0x10, 0x96, 0x1A,  // .._.)...
                            /* 4A70 */  0x84, 0x66, 0x54, 0x75, 0x2C, 0xA0, 0xAE, 0x40,  // .fTu,..@
                            /* 4A78 */  0x58, 0x72, 0x59, 0x20, 0x2C, 0xAD, 0x2D, 0x10,  // XrY ,.-.
                            /* 4A80 */  0x96, 0x55, 0xD7, 0x31, 0x80, 0x0A, 0x1B, 0x20,  // .U.1... 
                            /* 4A88 */  0x35, 0x06, 0xC2, 0x54, 0x2A, 0x3B, 0x1C, 0x50,  // 5..T*;.P
                            /* 4A90 */  0x67, 0x43, 0xA1, 0xD2, 0x40, 0x98, 0x6A, 0x6B,  // gC..@.jk
                            /* 4A98 */  0x43, 0xA2, 0xDA, 0x40, 0x58, 0x1A, 0x6F, 0x20,  // C..@X.o 
                            /* 4AA0 */  0x2C, 0x99, 0xB8, 0x21, 0x51, 0x77, 0x20, 0x4C,  // ,..!Qw L
                            /* 4AA8 */  0x81, 0xBC, 0x43, 0x01, 0xB5, 0x77, 0x28, 0xA0,  // ..C..w(.
                            /* 4AB0 */  0x20, 0x3A, 0x5C, 0x10, 0x7F, 0x40, 0x2C, 0x01,  //  :\..@,.
                            /* 4AB8 */  0x88, 0x80, 0x2C, 0xD4, 0x20, 0x10, 0x53, 0x0D,  // ..,. .S.
                            /* 4AC0 */  0x22, 0x20, 0xA2, 0x10, 0x88, 0xC9, 0x06, 0x11,  // " ......
                            /* 4AC8 */  0x90, 0x85, 0x39, 0x04, 0x62, 0x32, 0x41, 0x74,  // ..9.b2At
                            /* 4AD0 */  0x2C, 0x22, 0x16, 0x81, 0x98, 0x68, 0x10, 0x1D,  // ,"...h..
                            /* 4AD8 */  0xB1, 0x88, 0x47, 0x20, 0xA6, 0x10, 0x44, 0x47,  // ..G ..DG
                            /* 4AE0 */  0x35, 0x02, 0x44, 0x73, 0x02, 0xD1, 0x60, 0x22,  // 5.Ds..`"
                            /* 4AE8 */  0x81, 0x58, 0x4C, 0x10, 0x01, 0x39, 0x84, 0x49,  // .XL..9.I
                            /* 4AF0 */  0x20, 0x16, 0x09, 0x44, 0x47, 0x42, 0xE2, 0x12,  //  ..DGB..
                            /* 4AF8 */  0x88, 0x05, 0x02, 0xD1, 0x51, 0x8B, 0xD8, 0x04,  // ....Q...
                            /* 4B00 */  0x62, 0x19, 0x40, 0x04, 0x44, 0x74, 0x02, 0xB1,  // b.@.Dt..
                            /* 4B08 */  0x10, 0x20, 0x02, 0xB2, 0x7A, 0xA1, 0x40, 0x2C,  // . ..z.@,
                            /* 4B10 */  0x0A, 0x88, 0x80, 0x9C, 0xC3, 0x28, 0x10, 0x4B,  // .....(.K
                            /* 4B18 */  0x05, 0xA2, 0x03, 0x06, 0xB1, 0x3A, 0x70, 0x0A,  // .....:p.
                            /* 4B20 */  0x42, 0x15, 0x6B, 0x05, 0x61, 0x1A, 0xBD, 0x82,  // B.k.a...
                            /* 4B28 */  0x30, 0x4D, 0x62, 0x8F, 0x0D, 0xD4, 0x2C, 0x08,  // 0Mb...,.
                            /* 4B30 */  0xCB, 0x0F, 0x42, 0x33, 0xAB, 0x3D, 0x30, 0x50,  // ..B3.=0P
                            /* 4B38 */  0xB7, 0x20, 0x2C, 0x9F, 0x5C, 0x10, 0x96, 0xCA,  // . ,.\...
                            /* 4B40 */  0xEE, 0x51, 0x84, 0xEA, 0x3D, 0x58, 0x50, 0xBF,  // .Q..=XP.
                            /* 4B48 */  0x43, 0xA2, 0x8A, 0x41, 0x58, 0x76, 0x10, 0x2A,  // C..AXv.*
                            /* 4B50 */  0xF8, 0xF5, 0xAD, 0x21, 0xF9, 0xFF, 0xAF, 0x1E,  // ...!....
                            /* 4B58 */  0x44, 0x47, 0x00, 0x62, 0xF9, 0x08, 0x40, 0x41,  // DG.b..@A
                            /* 4B60 */  0x74, 0xAC, 0x24, 0x9E, 0x81, 0x98, 0x54, 0x10,  // t.$...T.
                            /* 4B68 */  0x01, 0x39, 0x24, 0x10, 0x8D, 0x0C, 0x44, 0xA3,  // .9$...D.
                            /* 4B70 */  0x9B, 0x06, 0x62, 0x42, 0x54, 0x0F, 0x9B, 0x82,  // ..bBT...
                            /* 4B78 */  0x68, 0xD8, 0x04, 0x88, 0x8A, 0x73, 0x3D, 0x00,  // h....s=.
                            /* 4B80 */  0x0A, 0xA2, 0x83, 0x24, 0x01, 0xA2, 0x22, 0x64,  // ...$.."d
                            /* 4B88 */  0x03, 0x31, 0x09, 0xBA, 0x81, 0x98, 0x20, 0x10,  // .1.... .
                            /* 4B90 */  0x1D, 0x24, 0x89, 0x70, 0x20, 0x26, 0x18, 0x44,  // .$.p &.D
                            /* 4B98 */  0x40, 0x8E, 0x0A, 0x44, 0x83, 0x03, 0xD1, 0x10,  // @..D....
                            /* 4BA0 */  0xC6, 0x8F, 0x04, 0x14, 0x44, 0x87, 0x33, 0xA2,  // ....D.3.
                            /* 4BA8 */  0x1C, 0x88, 0x89, 0x05, 0xD1, 0x00, 0x89, 0xF4,  // ........
                            /* 4BB0 */  0x01, 0x52, 0x10, 0x1D, 0xFC, 0x88, 0x77, 0x10,  // .R....w.
                            /* 4BB8 */  0x26, 0x50, 0x3C, 0x08, 0x93, 0x63, 0x1E, 0x84,  // &P<..c..
                            /* 4BC0 */  0x2D, 0x36, 0x08, 0x8B, 0x0C, 0x42, 0x23, 0xBA,  // -6...B#.
                            /* 4BC8 */  0x07, 0x61, 0xF1, 0xE4, 0x83, 0x50, 0xFB, 0x20,  // .a...P. 
                            /* 4BD0 */  0x54, 0x3F, 0x08, 0xF5, 0x0F, 0xC2, 0xC2, 0x05,  // T?......
                            /* 4BD8 */  0x00, 0x61, 0x91, 0x0A, 0x80, 0xB0, 0x38, 0x09,  // .a....8.
                            /* 4BE0 */  0x40, 0x58, 0x90, 0x06, 0x20, 0x4C, 0x7E, 0x84,  // @X.. L~.
                            /* 4BE8 */  0x63, 0x00, 0xED, 0x00, 0xC2, 0xE2, 0x82, 0x50,  // c......P
                            /* 4BF0 */  0x8D, 0x25, 0x86, 0x49, 0x41, 0x74, 0xF8, 0x20,  // .%.IAt. 
                            /* 4BF8 */  0x29, 0x0E, 0x2B, 0x14, 0x44, 0xC7, 0x04, 0x12,  // ).+.D...
                            /* 4C00 */  0xE3, 0xB0, 0x42, 0x41, 0x74, 0x58, 0x21, 0x40,  // ..BAtX!@
                            /* 4C08 */  0x34, 0x25, 0x10, 0xCD, 0x98, 0x03, 0x88, 0x25,  // 4%.....%
                            /* 4C10 */  0x06, 0xD1, 0x21, 0x89, 0xF4, 0x00, 0x62, 0xCA,  // ..!...b.
                            /* 4C18 */  0x41, 0x74, 0xFC, 0x20, 0x41, 0x80, 0x98, 0x1E,  // At. A...
                            /* 4C20 */  0x10, 0x0D, 0x80, 0x00, 0xD1, 0x94, 0x40, 0x3C,  // ......@<
                            /* 4C28 */  0x09, 0x10, 0x05, 0xD1, 0x41, 0x88, 0x44, 0x39,  // ....A.D9
                            /* 4C30 */  0x08, 0x51, 0x10, 0x01, 0xF9, 0xFF, 0xAF, 0xB8,  // .Q......
                            /* 4C38 */  0x0A, 0x10, 0xD3, 0x0F, 0xA2, 0xE3, 0x1A, 0xC9,  // ........
                            /* 4C40 */  0x02, 0xC4, 0x54, 0x81, 0xE8, 0xC8, 0x42, 0x80,  // ..T...B.
                            /* 4C48 */  0x68, 0x56, 0x20, 0x1E, 0x06, 0x88, 0x82, 0x08,  // hV .....
                            /* 4C50 */  0xC8, 0x6A, 0xE2, 0x1C, 0x25, 0x28, 0x08, 0x4D,  // .j..%(.M
                            /* 4C58 */  0x53, 0xE7, 0xA0, 0x42, 0xF3, 0x1C, 0x2C, 0x68,  // S..B..,h
                            /* 4C60 */  0x1F, 0x10, 0x96, 0x3E, 0xD0, 0x60, 0x69, 0xA2,  // ...>.`i.
                            /* 4C68 */  0x23, 0x11, 0x6D, 0x74, 0xAC, 0xA0, 0x91, 0x0E,  // #.mt....
                            /* 4C70 */  0x17, 0xB4, 0xD2, 0x60, 0x69, 0xA6, 0xA3, 0x06,  // ...`i...
                            /* 4C78 */  0xED, 0x74, 0xE0, 0xA0, 0xA5, 0x40, 0x98, 0xCE,  // .t...@..
                            /* 4C80 */  0x54, 0x07, 0x17, 0xDA, 0x0A, 0x98, 0xC6, 0x02,  // T.......
                            /* 4C88 */  0x61, 0x29, 0x6B, 0x1D, 0x6D, 0x68, 0xAE, 0x41,  // a)k.mh.A
                            /* 4C90 */  0xD1, 0x60, 0x03, 0xA1, 0xC5, 0x0E, 0x3A, 0x34,  // .`....:4
                            /* 4C98 */  0xD9, 0xB1, 0x89, 0x36, 0x03, 0xA2, 0xD9, 0x0E,  // ...6....
                            /* 4CA0 */  0x3B, 0x14, 0x84, 0xCA, 0x0D, 0x37, 0x48, 0xA6,  // ;....7H.
                            /* 4CA8 */  0x1D, 0x44, 0x87, 0x17, 0x52, 0xEE, 0xF0, 0x42,  // .D..R..B
                            /* 4CB0 */  0x41, 0x74, 0xC4, 0x20, 0xED, 0x8E, 0x18, 0x14,  // At. ....
                            /* 4CB8 */  0x44, 0x47, 0x0E, 0x02, 0x44, 0x23, 0x03, 0xD1,  // DG..D#..
                            /* 4CC0 */  0xB0, 0xF5, 0x80, 0x58, 0x74, 0x10, 0x1D, 0x75,  // ...Xt..u
                            /* 4CC8 */  0x49, 0xC1, 0x83, 0x03, 0x05, 0xA1, 0x32, 0x1A,  // I.....2.
                            /* 4CD0 */  0x02, 0x32, 0x51, 0x20, 0x02, 0x23, 0x40, 0x34,  // .2Q .#@4
                            /* 4CD8 */  0x1C, 0x10, 0x0D, 0x51, 0xF1, 0x98, 0x41, 0x41,  // ...Q..AA
                            /* 4CE0 */  0x74, 0xD4, 0x25, 0x1D, 0x81, 0x58, 0x28, 0x10,  // t.%..X(.
                            /* 4CE8 */  0x1D, 0x63, 0x49, 0x49, 0x20, 0x16, 0x0C, 0x44,  // .cII ..D
                            /* 4CF0 */  0x40, 0x0E, 0xD5, 0x12, 0x88, 0x45, 0x04, 0xD1,  // @....E..
                            /* 4CF8 */  0xD1, 0x83, 0xD4, 0x3C, 0x7A, 0x50, 0x10, 0x1D,  // ...<zP..
                            /* 4D00 */  0x6D, 0x49, 0x50, 0x20, 0x26, 0x0B, 0x44, 0x47,  // mIP &.DG
                            /* 4D08 */  0x56, 0x92, 0x14, 0x88, 0x49, 0x07, 0xD1, 0xD1,  // V...I...
                            /* 4D10 */  0x98, 0x54, 0x3D, 0x80, 0xD0, 0xAC, 0x20, 0xEC,  // .T=... .
                            /* 4D18 */  0xFF, 0x2F, 0xAB, 0xEB, 0xF1, 0x87, 0x86, 0x05,  // ./......
                            /* 4D20 */  0x61, 0x92, 0xCA, 0x82, 0xD0, 0xB4, 0x20, 0x4C,  // a..... L
                            /* 4D28 */  0x4C, 0x5B, 0x10, 0x1A, 0x77, 0xD0, 0xB4, 0x2E,  // L[..w...
                            /* 4D30 */  0x08, 0x93, 0x12, 0xF8, 0xC0, 0x41, 0x41, 0xA8,  // .....AA.
                            /* 4D38 */  0xA8, 0xC4, 0xC7, 0x20, 0x0A, 0xA2, 0x41, 0x90,  // ... ..A.
                            /* 4D40 */  0xC6, 0x47, 0x22, 0x0A, 0xA2, 0xC3, 0x08, 0x01,  // .G".....
                            /* 4D48 */  0xA2, 0x24, 0x8F, 0x24, 0x34, 0x33, 0x10, 0x93,  // .$.$43..
                            /* 4D50 */  0x03, 0xA2, 0x61, 0x12, 0x20, 0x1A, 0x11, 0x88,  // ..a. ...
                            /* 4D58 */  0xCA, 0xED, 0x0C, 0xC4, 0xC4, 0x83, 0xE8, 0x38,  // .......8
                            /* 4D60 */  0x42, 0x52, 0x1F, 0x04, 0x68, 0xEB, 0x03, 0x0C,  // BR..h...
                            /* 4D68 */  0x8D, 0x0D, 0xC2, 0xFE, 0xFF                     // .....
                        })
                    }
                }
            }
        }
    }

    Scope (\)
    {
        Name (HPDT, Package (0x09)
        {
            "LEGACYHP", 
            0x80000000, 
            0x80000000, 
            "NATIVEHP", 
            0x80000000, 
            0x80000000, 
            "THERMALX", 
            0x80000000, 
            0x80000000
        })
        Name (DDB0, 0x00)
        Name (DDB1, 0x00)
        Name (DDB2, 0x00)
    }

    Scope (_GPE)
    {
        Method (XL08, 0, NotSerialized)
        {
            TPST (0x3908)
            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
        }

        Method (_E0B, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
        {
            Sleep (0x64)
            Notify (\_SB.PCI0.GPP0.PEGP, 0x81) // Information Change
        }

        Method (_E17, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
        {
            Sleep (0x64)
            Notify (\_SB.PCI0.GPP0.PEGP, 0x81) // Information Change
        }

        Method (XL19, 0, NotSerialized)
        {
            TPST (0x3919)
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
        }
    }

    Name (TSOS, 0x75)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            HFPE,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, 0x00, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == 0x01))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (FUIO, 1, Serialized)
        {
            If ((IER0 == 0x01))
            {
                If ((WUR0 == Arg0))
                {
                    Return (0x00)
                }
            }

            If ((IER1 == 0x01))
            {
                If ((WUR1 == Arg0))
                {
                    Return (0x01)
                }
            }

            If ((IER2 == 0x01))
            {
                If ((WUR2 == Arg0))
                {
                    Return (0x02)
                }
            }

            If ((IER3 == 0x01))
            {
                If ((WUR3 == Arg0))
                {
                    Return (0x03)
                }
            }

            Return (0x0F)
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << 0x01)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << 0x01)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg0 != ADTD))
            {
                If ((Arg1 == 0x00))
                {
                    ADTD = 0x00
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x00))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (0x01 << Arg0)
            Local0 = (Arg0 << 0x01)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == 0x00))
                {
                    PG1A = One
                    ADTD = 0x00
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x00))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED81200,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDC9000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC7000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If ((FUIO (0x00) != 0x0F))
                        {
                            Return (0x00)
                        }

                        Return (0x0F)
                    }

                    Return (0x00)
                }
                Else
                {
                    Return (0x00)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCA000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC8000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If ((FUIO (0x01) != 0x0F))
                        {
                            Return (0x00)
                        }

                        Return (0x0F)
                    }

                    Return (0x00)
                }
                Else
                {
                    Return (0x00)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDCE000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCC000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If ((FUIO (0x02) != 0x0F))
                        {
                            Return (0x00)
                        }

                        Return (0x0F)
                    }

                    Return (0x00)
                }
                Else
                {
                    Return (0x00)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCF000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCD000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If ((FUIO (0x03) != 0x0F))
                        {
                            Return (0x00)
                        }

                        Return (0x0F)
                    }

                    Return (0x00)
                }
                Else
                {
                    Return (0x00)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (0x00)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (0x00)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDC4000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (0x00)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {6}
                Memory32Fixed (ReadWrite,
                    0xFEDC5000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (0x00)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {14}
                Memory32Fixed (ReadWrite,
                    0xFEDC6000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (0x00)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {15}
                Memory32Fixed (ReadWrite,
                    0xFEDCB000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC5E == One))
                    {
                        Return (0x0F)
                    }

                    Return (0x00)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = Zero
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM4A = One
            IM58 = One
            IM4B = One
            IM57 = One
            IM6D = One
            IM1F = One
            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCICC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If (EMMD)
                {
                    Return (SHID) /* \_SB_.SHID */
                }
                Else
                {
                    Return (AHID) /* \_SB_.AHID */
                }
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If (EMMD)
                {
                    Return (SCID) /* \_SB_.SCID */
                }
                Else
                {
                    Return (ACID) /* \_SB_.ACID */
                }
            }

            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    Return (DCRS) /* \_SB_.DCRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (0x00)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x00)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x00) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (0x00)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y09)
                    IRQNoFlags (_Y0A)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y09._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y09._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y0A._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x00)
                Switch (ToInteger (Local0))
                {
                    Case (0x00)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (0x01)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA0 /* \_SB_.IUA0 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x01) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (0x00)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0B)
                    IRQNoFlags (_Y0C)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y0B._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y0B._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y0C._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x01)
                Switch (ToInteger (Local0))
                {
                    Case (0x00)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (0x01)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA1 /* \_SB_.IUA1 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x02) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (0x00)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0D)
                    IRQNoFlags (_Y0E)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y0D._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y0D._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y0E._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x02)
                Switch (ToInteger (Local0))
                {
                    Case (0x00)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (0x01)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA2 /* \_SB_.IUA2 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x03) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (0x00)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0F)
                    IRQNoFlags (_Y10)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y0F._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y0F._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y10._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x03)
                Switch (ToInteger (Local0))
                {
                    Case (0x00)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (0x01)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA3 /* \_SB_.IUA3 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    Scope (_SB.I2CD)
    {
        Device (TPD0)
        {
            Name (_HID, "CUST0001")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((TPID == 0x01))
                {
                    _HID = "ELAN06FA"
                }

                If ((TPID == 0x02))
                {
                    _HID = "SYNA2BA6"
                }

                If ((TPID == 0x03))
                {
                    _HID = "CRQ1080"
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (0x01)
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (0x01)
                        {
                            If ((TPID == 0x01))
                            {
                                Return (0x01)
                            }

                            If ((TPID == 0x02))
                            {
                                Return (0x20)
                            }
                        }
                        Default
                        {
                            Return (0x00)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TPID == 0x00))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFG, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0082
                        }
                })
                If ((TPID == 0x01))
                {
                    Name (SBFB, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CD",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (ConcatenateResTemplate (SBFB, SBFG))
                }

                If ((TPID == 0x02))
                {
                    Name (SBFC, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x002C, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CD",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (ConcatenateResTemplate (SBFC, SBFG))
                }
            }

            Method (RHRW, 0, NotSerialized)
            {
                Return (GPRW (0x16, 0x03))
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : 43
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000003
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]                 FACS Address : CC97D000
[028h 0040   4]                 DSDT Address : C8F9F000
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B0
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000800
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0064
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0000C5AD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 03
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000C8F9F000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000400

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000404

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000800

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000408

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 03 [DWord Access:32]
[0E0h 0224   8]                      Address : 0000000000000420

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 03 [DWord Access:32]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 01 [SystemIO]
[0F5h 0245   1]                    Bit Width : 08
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 01 [SystemIO]
[101h 0257   1]                    Bit Width : 08
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 43 4C 45 4E 4F 56 4F  // FACP.....CLENOVO
    0010: 43 42 2D 30 31 20 20 20 03 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 00 D0 97 CC 00 F0 F9 C8 01 02 09 00  // ................
    0030: B0 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 00 08 00 00 08 04 00 00  // ................
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 64 00 E9 03 00 00 00 00 01 03 0D 00 32 03 00 00  // d...........2...
    0070: AD C5 00 00 01 08 00 01 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 03 00 00 00 00 00 00 00 00 00 F0 F9 C8  // ................
    0090: 00 00 00 00 01 20 00 02 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 00 08 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 40 00 03  // . ...........@..
    00E0: 20 04 00 00 00 00 00 00 01 00 00 03 00 00 00 00  //  ...............
    00F0: 00 00 00 00 01 08 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 01 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00001F3A
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 3A 1F 00 00 00 00 00 00  // FACS@...:.......
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000034
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 74
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 00000000CC36A000

Raw Table Data: Length 52 (0x34)

    0000: 46 50 44 54 34 00 00 00 01 74 4C 45 4E 4F 56 4F  // FPDT4....tLENOVO
    0010: 43 42 2D 30 31 20 20 20 02 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 00 00 10 01 00 00 00 00 00 A0 36 CC  // ..............6.
    0030: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0D
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]            Hardware Block ID : 43538210

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 02
[035h 0053   2]          Minimum Clock Ticks : 0014
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 0D 4C 45 4E 4F 56 4F  // HPET8.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 10 82 53 43 00 08 00 00 00 00 D0 FE  // ......SC........
    0030: 00 00 00 00 02 14 00 00                          // ........


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000001A4
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 2D
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]          Virtualization Info : 00203043
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002
[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FDB00000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]            Feature Reporting : 80048F6F

[048h 0072   1]                Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076   1]                Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081   2]                    Device ID : FF00
[053h 0083   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A5
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                Subtable Type : 04 [Device Entry: End of Range]
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[060h 0096   1]                Subtable Type : 48 [Device Entry: Special Device]
[061h 0097   2]                    Device ID : 0000
[063h 0099   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                Subtable Type : 48 [Device Entry: Special Device]
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[06Ch 0108   1]                       Handle : 20
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                Subtable Type : 48 [Device Entry: Special Device]
[071h 0113   2]                    Device ID : 0000
[073h 0115   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[074h 0116   1]                       Handle : 21
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Hardware Definition Block (IVHD)]
[079h 0121   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002
[07Eh 0126   2]            Capability Offset : 0040
[080h 0128   8]                 Base Address : 00000000FDB00000
[088h 0136   2]            PCI Segment Group : 0000
[08Ah 0138   2]          Virtualization Info : 0000
[08Ch 0140   4]                   Attributes : 00040200
[090h 0144   8]                    EFR Image : 206D73EF22254ADE
[098h 0152   8]                     Reserved : 0000000000000000

[0A0h 0160   1]                Subtable Type : 03 [Device Entry: Start of Range]
[0A1h 0161   2]                    Device ID : 0008
[0A3h 0163   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164   1]                Subtable Type : 04 [Device Entry: End of Range]
[0A5h 0165   2]                    Device ID : FFFE
[0A7h 0167   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A8h 0168   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A9h 0169   2]                    Device ID : FF00
[0ABh 0171   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0ACh 0172   1]                     Reserved : 00
[0ADh 0173   2]        Source Used Device ID : 00A5
[0AFh 0175   1]                     Reserved : 00

[0B0h 0176   1]                Subtable Type : 04 [Device Entry: End of Range]
[0B1h 0177   2]                    Device ID : FFFF
[0B3h 0179   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B4h 0180   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[0B5h 0181   2]                    Device ID : 0000
[0B7h 0183   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B8h 0184   1]                Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185   2]                    Device ID : 0000
[0BBh 0187   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0BCh 0188   1]                       Handle : 00
[0BDh 0189   2]        Source Used Device ID : 00A0
[0BFh 0191   1]                      Variety : 02

[0C0h 0192   1]                Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193   2]                    Device ID : 0000
[0C3h 0195   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0C4h 0196   1]                       Handle : 20
[0C5h 0197   2]        Source Used Device ID : 00A0
[0C7h 0199   1]                      Variety : 01

[0C8h 0200   1]                Subtable Type : 48 [Device Entry: Special Device]
[0C9h 0201   2]                    Device ID : 0000
[0CBh 0203   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0CCh 0204   1]                       Handle : 21
[0CDh 0205   2]        Source Used Device ID : 0001
[0CFh 0207   1]                      Variety : 01

[0D0h 0208   1]                Subtable Type : 40 [Hardware Definition Block - Mixed Format (IVHD)]
[0D1h 0209   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[0D2h 0210   2]                       Length : 00D4
[0D4h 0212   2]                     DeviceId : 0002
[0D6h 0214   2]            Capability Offset : 0040
[0D8h 0216   8]                 Base Address : 00000000FDB00000
[0E0h 0224   2]            PCI Segment Group : 0000
[0E2h 0226   2]          Virtualization Info : 0000
[0E4h 0228   4]                   Attributes : 00040200
[0E8h 0232   8]                    EFR Image : 206D73EF22254ADE
[0F0h 0240   8]                     Reserved : 0000000000000000

[0F8h 0248   1]                Subtable Type : 03 [Device Entry: Start of Range]
[0F9h 0249   2]                    Device ID : 0008
[0FBh 0251   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0FCh 0252   1]                Subtable Type : 04 [Device Entry: End of Range]
[0FDh 0253   2]                    Device ID : FFFE
[0FFh 0255   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[100h 0256   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[101h 0257   2]                    Device ID : FF00
[103h 0259   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[104h 0260   1]                     Reserved : 00
[105h 0261   2]        Source Used Device ID : 00A5
[107h 0263   1]                     Reserved : 00

[108h 0264   1]                Subtable Type : 04 [Device Entry: End of Range]
[109h 0265   2]                    Device ID : FFFF
[10Bh 0267   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[10Ch 0268   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[10Dh 0269   2]                    Device ID : 0000
[10Fh 0271   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[110h 0272   1]                Subtable Type : 48 [Device Entry: Special Device]
[111h 0273   2]                    Device ID : 0000
[113h 0275   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[114h 0276   1]                       Handle : 00
[115h 0277   2]        Source Used Device ID : 00A0
[117h 0279   1]                      Variety : 02

[118h 0280   1]                Subtable Type : 48 [Device Entry: Special Device]
[119h 0281   2]                    Device ID : 0000
[11Bh 0283   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[11Ch 0284   1]                       Handle : 20
[11Dh 0285   2]        Source Used Device ID : 00A0
[11Fh 0287   1]                      Variety : 01

[120h 0288   1]                Subtable Type : 48 [Device Entry: Special Device]
[121h 0289   2]                    Device ID : 0000
[123h 0291   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[124h 0292   1]                       Handle : 21
[125h 0293   2]        Source Used Device ID : 0001
[127h 0295   1]                      Variety : 01

[128h 0296   1]                Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[129h 0297   2]                    Device ID : 00A5
[12Bh 0299   1] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[12Ch 0300   8]                     ACPI HID : "AMDI0020"
[134h 0308   8]                     ACPI CID : 0000000000000000
[13Ch 0316   1]                   UID Format : 02
[13Dh 0317   1]                   UID Length : 09
[13Eh 0318   9]                          UID : "\_SB.FUR0"

[147h 0327   1]                Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[148h 0328   2]                    Device ID : 00A5
[14Ah 0330   1] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[14Bh 0331   8]                     ACPI HID : "AMDI0020"
[153h 0339   8]                     ACPI CID : 0000000000000000
[15Bh 0347   1]                   UID Format : 02
[15Ch 0348   1]                   UID Length : 09
[15Dh 0349   9]                          UID : "\_SB.FUR1"

[166h 0358   1]                Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[167h 0359   2]                    Device ID : 00A5
[169h 0361   1] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[16Ah 0362   8]                     ACPI HID : "AMDI0020"
[172h 0370   8]                     ACPI CID : 0000000000000000
[17Ah 0378   1]                   UID Format : 02
[17Bh 0379   1]                   UID Length : 09
[17Ch 0380   9]                          UID : "\_SB.FUR2"

[185h 0389   1]                Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[186h 0390   2]                    Device ID : 00A5
[188h 0392   1] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[189h 0393   8]                     ACPI HID : "AMDI0020"
[191h 0401   8]                     ACPI CID : 0000000000000000
[199h 0409   1]                   UID Format : 02
[19Ah 0410   1]                   UID Length : 09
[19Bh 0411   9]                          UID : "\_SB.FUR3"

Raw Table Data: Length 420 (0x1A4)

    0000: 49 56 52 53 A4 01 00 00 02 2D 4C 45 4E 4F 56 4F  // IVRS.....-LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 43 30 20 00 00 00 00 00 00 00 00 00  // ....C0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 B0 FD 00 00 00 00  // ..H...@.........
    0040: 00 00 00 00 6F 8F 04 80 03 08 00 00 04 FE FF 00  // ....o...........
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 20 A0 00 01  // H.......H... ...
    0070: 48 00 00 00 21 01 00 01 11 B0 58 00 02 00 40 00  // H...!.....X...@.
    0080: 00 00 B0 FD 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0090: DE 4A 25 22 EF 73 6D 20 00 00 00 00 00 00 00 00  // .J%".sm ........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A5 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 20 A0 00 01 48 00 00 00 21 01 00 01  // H... ...H...!...
    00D0: 40 B0 D4 00 02 00 40 00 00 00 B0 FD 00 00 00 00  // @.....@.........
    00E0: 00 00 00 00 00 02 04 00 DE 4A 25 22 EF 73 6D 20  // .........J%".sm 
    00F0: 00 00 00 00 00 00 00 00 03 08 00 00 04 FE FF 00  // ................
    0100: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0110: 48 00 00 00 00 A0 00 02 48 00 00 D7 20 A0 00 01  // H.......H... ...
    0120: 48 00 00 00 21 01 00 01 F0 A5 00 40 41 4D 44 49  // H...!......@AMDI
    0130: 30 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F  // 0020..........\_
    0140: 53 42 2E 46 55 52 30 F0 A5 00 40 41 4D 44 49 30  // SB.FUR0...@AMDI0
    0150: 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53  // 020..........\_S
    0160: 42 2E 46 55 52 31 F0 A5 00 40 41 4D 44 49 30 30  // B.FUR1...@AMDI00
    0170: 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42  // 20..........\_SB
    0180: 2E 46 55 52 32 F0 A5 00 40 41 4D 44 49 30 30 32  // .FUR2...@AMDI002
    0190: 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42 2E  // 0..........\_SB.
    01A0: 46 55 52 33                                      // FUR3


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : FA
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 FA 4C 45 4E 4F 56 4F  // MCFG<.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


MSDM
----
[000h 0000   4]                    Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 63
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036  49] Software Licensing Structure : 54 00 00 00 01 01 00 01 01 00 00 00 00 00 01 01 /* T............... */\
/* 034h 0052  16 */                            0A 43 45 54 2D 31 43 45 53 54 2C 4D 33 2E 35 2E /* .CET-1CEST,M3.5. */\
/* 044h 0068  16 */                            30 2C 4D 31 30 2E 35 2E 30 2F 33 0A 46 05 C9 90 /* 0,M10.5.0/3.F... */\
/* 054h 0084   1 */                            00                                              /* . */\

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 63 4C 45 4E 4F 56 4F  // MSDMU....cLENOVO
    0010: 43 42 2D 30 31 20 20 20 00 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 58 42 39 4E 32 2D 48 50  // ........XB9N2-HP
    0040: 48 44 39 2D 58 39 59 37 38 2D 42 38 59 52 4A 2D  // HD9-X9Y78-B8YRJ-
    0050: 44 47 50 48 32                                   // DGPH2


SBST
----
[000h 0000   4]                    Signature : "SBST"    [Smart Battery Specification Table]
[004h 0004   4]                 Table Length : 00000030
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 1E
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]                Warning Level : 00000000
[028h 0040   4]                    Low Level : 00000000
[02Ch 0044   4]               Critical Level : 00000000

Raw Table Data: Length 48 (0x30)

    0000: 53 42 53 54 30 00 00 00 01 1E 4C 45 4E 4F 56 4F  // SBST0.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "AMD AOD", 0x00000001)
{
    Scope (\)
    {
        Device (AOD)
        {
            Name (DBG, 0x00)
            Name (GDBG, 0x00)
            Name (CDBG, 0x00)
            Name (VDBG, 0x00)
            Name (RDBG, 0x00)
            OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
            Field (PSMI, ByteAcc, NoLock, Preserve)
            {
                APMC,   8, 
                APMD,   8
            }

            Method (ASMI, 1, NotSerialized)
            {
                APMC = Arg0
                Sleep (0x0A)
            }

            Name (OBID, Package (0xC1)
            {
                0x40, 
                0x00010001, 
                0x00010002, 
                0x00020001, 
                0x00020002, 
                0x00020003, 
                0x00020004, 
                0x00020005, 
                0x00020006, 
                0x00020007, 
                0x00020008, 
                0x00020009, 
                0x0002000A, 
                0x0002000B, 
                0x0002000C, 
                0x0002000D, 
                0x0002000E, 
                0x0002000F, 
                0x00020010, 
                0x00020011, 
                0x00020012, 
                0x00020013, 
                0x00020014, 
                0x00020015, 
                0x00020016, 
                0x00020017, 
                0x00020018, 
                0x00020019, 
                0x0002001A, 
                0x0002001B, 
                0x0002001C, 
                0x0002001D, 
                0x0002001E, 
                0x0002001F, 
                0x00020020, 
                0x00020021, 
                0x00020022, 
                0x00020023, 
                0x00020024, 
                0x00020025, 
                0x00020027, 
                0x00020028, 
                0x00020029, 
                0x0002002A, 
                0x0002002B, 
                0x0002002C, 
                0x0002002D, 
                0x0002002E, 
                0x0002002F, 
                0x00020030, 
                0x00020031, 
                0x00020032, 
                0x00020033, 
                0x00020035, 
                0x00020036, 
                0x00020037, 
                0x00030001, 
                0x00040001, 
                0x00040002, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                "Get APCB Config", 
                "Get memory voltages", 
                "Set memory clock frequency", 
                "Set Tcl", 
                "Set Trcdrd", 
                "Set Trcdwr", 
                "Set Tras", 
                "Set Trp", 
                "Set ProcODT", 
                "Set Trcpage", 
                "Set Trc", 
                "Set Trfc", 
                "Set Trfc2", 
                "Set Trfc4", 
                "Set Tfaw", 
                "Set TrrdS", 
                "Set TrrdL", 
                "Set Twr", 
                "Set TwtrS", 
                "Set TwtrL", 
                "Set TCke", 
                "Set Tcwl", 
                "Set Trtp", 
                "Set TrdrdSc", 
                "Set TrdrdScL", 
                "Set TrdrdSd", 
                "Set TrdrdDd", 
                "Set TwrwrSc", 
                "Set TwrwrScL", 
                "Set TwrwrSd", 
                "Set TwrwrDd", 
                "Set Trdwr", 
                "Set Twrrd", 
                "Set GearDownEn", 
                "Set Cmd2t", 
                "Set RttNom", 
                "Set RttWR", 
                "Set RttPark", 
                "Set PowerDownEn", 
                "Software Downcore Config", 
                "Set EDC Throttler Control", 
                "Set AddrCmdSetup", 
                "Set CsOdtSetup", 
                "Set CkeSetup", 
                "Set CadBusClkDrvStren", 
                "Set CadBusAddrCmdDrvStren", 
                "Set CadBusCsOdtCmdDrvStren", 
                "Set CadBusCkeDrvStren", 
                "Set CLDO_VDDP", 
                "Set Interleave Mode", 
                "Set Interleave Size", 
                "Set FCLK OC Mode", 
                "Set FCLK Frequency", 
                "Set CCLK Fmax", 
                "Set GFXCLK Fmax", 
                "Set VDDIO", 
                "Command Buffer Start", 
                "Command Buffer End", 
                "", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIE, Package (0xC1)
            {
                0x40, 
                0x00050001, 
                0x00050002, 
                0x00050003, 
                0x00050004, 
                0x00050005, 
                0x0005000A, 
                0x0005000B, 
                0x0005000C, 
                0x0005000D, 
                0x0005000E, 
                0x0005000F, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x01, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                "Set PPT Limit", 
                "Set TDC Limit", 
                "Set EDC Limit", 
                "Set Scalar", 
                "Set DRAM Map Inversion", 
                "Set Curve Optimizer", 
                "Set IOD VDDG", 
                "Set Soc TDC Limit", 
                "Set Soc EDC Limit", 
                "Set Dram Latency Enhance", 
                "Get Dram Latency Enhance", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIT, Package (0xED)
            {
                0x00020001, 
                0x014D, 
                0x0FA0, 
                0x21, 
                0x00020002, 
                0x08, 
                0x21, 
                0x01, 
                0x00020003, 
                0x08, 
                0x3F, 
                0x01, 
                0x00020004, 
                0x08, 
                0x3F, 
                0x01, 
                0x00020005, 
                0x15, 
                0x3A, 
                0x01, 
                0x00020006, 
                0x08, 
                0x3F, 
                0x01, 
                0x00020007, 
                0x00, 
                0x3F, 
                0x01, 
                0x00020008, 
                0x00, 
                0x03FF, 
                0x01, 
                0x00020009, 
                0x1D, 
                0x87, 
                0x01, 
                0x0002000A, 
                0x3C, 
                0x03DE, 
                0x01, 
                0x0002000B, 
                0x3C, 
                0x03DE, 
                0x01, 
                0x0002000C, 
                0x3C, 
                0x03DE, 
                0x01, 
                0x0002000D, 
                0x06, 
                0x36, 
                0x01, 
                0x0002000E, 
                0x04, 
                0x0C, 
                0x01, 
                0x0002000F, 
                0x04, 
                0x0C, 
                0x01, 
                0x00020010, 
                0x0A, 
                0x51, 
                0x01, 
                0x00020011, 
                0x02, 
                0x0E, 
                0x01, 
                0x00020012, 
                0x02, 
                0x0E, 
                0x01, 
                0x00020013, 
                0x01, 
                0x1F, 
                0x01, 
                0x00020014, 
                0x09, 
                0x16, 
                0x01, 
                0x00020015, 
                0x05, 
                0x0E, 
                0x01, 
                0x00020016, 
                0x01, 
                0x0F, 
                0x01, 
                0x00020017, 
                0x01, 
                0x0F, 
                0x01, 
                0x00020018, 
                0x01, 
                0x0F, 
                0x01, 
                0x00020019, 
                0x01, 
                0x0F, 
                0x01, 
                0x0002001A, 
                0x01, 
                0x0F, 
                0x01, 
                0x0002001B, 
                0x01, 
                0x3F, 
                0x01, 
                0x0002001C, 
                0x01, 
                0x0F, 
                0x01, 
                0x0002001D, 
                0x01, 
                0x0F, 
                0x01, 
                0x0002001E, 
                0x01, 
                0x1F, 
                0x01, 
                0x0002001F, 
                0x00, 
                0x0F, 
                0x01, 
                0x00020020, 
                0x00, 
                0x01, 
                0x01, 
                0x00020021, 
                0x00, 
                0x01, 
                0x01, 
                0x00020022, 
                0x00, 
                0x07, 
                0x01, 
                0x00020023, 
                0x00, 
                0x04, 
                0x01, 
                0x00020024, 
                0x00, 
                0x07, 
                0x01, 
                0x00020025, 
                0x00, 
                0x01, 
                0x01, 
                0x00020027, 
                0x00, 
                0xFFFFFFFF, 
                0x01, 
                0x00020028, 
                0x00, 
                0x0F, 
                0x01, 
                0x00020029, 
                0x00, 
                0x3F, 
                0x01, 
                0x0002002A, 
                0x00, 
                0x3F, 
                0x01, 
                0x0002002B, 
                0x00, 
                0x3F, 
                0x01, 
                0x0002002C, 
                0x00, 
                0x1F, 
                0x01, 
                0x0002002D, 
                0x00, 
                0x1F, 
                0x01, 
                0x0002002E, 
                0x00, 
                0x1F, 
                0x01, 
                0x0002002F, 
                0x00, 
                0x1F, 
                0x01, 
                0x00020030, 
                0x00, 
                0x05DC, 
                0x01, 
                0x00020031, 
                0x00, 
                0xFFFFFFFF, 
                0x01, 
                0x00020032, 
                0x00, 
                0x07, 
                0x01, 
                0x00020033, 
                0x00, 
                0x01, 
                0x01, 
                0x00020035, 
                0x014D, 
                0x0FA0, 
                0x21, 
                0x00020036, 
                0x1162, 
                0x122A, 
                0x01, 
                0x00020037, 
                0x07D0, 
                0x0898, 
                0x01, 
                0x00030001, 
                0x0230, 
                0x072B, 
                0x05, 
                0x00050001, 
                0x00, 
                0x0000007D, 
                0x01, 
                0x00050002, 
                0x00, 
                0x0000003C, 
                0x01, 
                0x00050003, 
                0x00, 
                0x00000073, 
                0x01, 
                0x00050004, 
                0x64, 
                0x03E8, 
                0x64, 
                0x00050005, 
                0x00, 
                0xFF, 
                0x01, 
                0x00
            })
            Name (OBIU, Package (0x11)
            {
                0x0005000A, 
                0x00, 
                0x1E, 
                0x01, 
                0x0005000B, 
                0x0258, 
                0x05DC, 
                0x01, 
                0x0005000C, 
                0x00, 
                0x00000011, 
                0x01, 
                0x0005000D, 
                0x00, 
                0x00000018, 
                0x01, 
                0x00
            })
            Name (OBD1, Package (0xCF)
            {
                0x00020001, 
                0x4A, 
                0x014D, 
                0x0190, 
                0x0215, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x0BEA, 
                0x0C1C, 
                0x0C4E, 
                0x0C80, 
                0x0CB2, 
                0x0CE4, 
                0x0D16, 
                0x0D48, 
                0x0D7A, 
                0x0DAC, 
                0x0DDE, 
                0x0E10, 
                0x0E42, 
                0x0E74, 
                0x0EA6, 
                0x0ED8, 
                0x0F0A, 
                0x0F3C, 
                0x0F6E, 
                0x0FA0, 
                0x00020002, 
                0x1A, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x00020005, 
                0x26, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x00020007, 
                0x12, 
                0x00, 
                0x01, 
                0x02, 
                0x03, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3E, 
                0x3F, 
                0x00020014, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x0002002C, 
                0x06, 
                0x00, 
                0x01, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002D, 
                0x06, 
                0x00, 
                0x01, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002E, 
                0x06, 
                0x00, 
                0x01, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002F, 
                0x06, 
                0x00, 
                0x01, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x00
            })
            Name (OBD2, Package (0x4E)
            {
                0x00020035, 
                0x47, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x0BEA, 
                0x0C1C, 
                0x0C4E, 
                0x0C80, 
                0x0CB2, 
                0x0CE4, 
                0x0D16, 
                0x0D48, 
                0x0D7A, 
                0x0DAC, 
                0x0DDE, 
                0x0E10, 
                0x0E42, 
                0x0E74, 
                0x0EA6, 
                0x0ED8, 
                0x0F0A, 
                0x0F3C, 
                0x0F6E, 
                0x0FA0, 
                0x0005000E, 
                0x02, 
                0x00, 
                0x01, 
                0x00
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (SBSL, 1, NotSerialized)
            {
                OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
                Field (PMRG, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x2E), 
                    SBSL,   8
                }

                Local0 = (Arg0 | 0x01)
                SBSL = Local0
            }

            Method (SETV, 2, NotSerialized)
            {
            }

            Method (GETV, 1, NotSerialized)
            {
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, 0x00)
                CreateDWordField (Arg1, 0x00, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                Local0 = 0x00
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + 0x00)])
                        BUF1 = DerefOf (OBIT [(Local0 + 0x01)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        Break
                    }

                    Local0 += 0x04
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == 0x00))
                {
                    Local0 = 0x00
                    LOID = DerefOf (OBIU [Local0])
                    While (LOID)
                    {
                        If ((LOID == Arg0))
                        {
                            BUF0 = DerefOf (OBIU [(Local0 + 0x00)])
                            BUF1 = DerefOf (OBIU [(Local0 + 0x01)])
                            BUF2 = DerefOf (OBIU [(Local0 + 0x02)])
                            BUF3 = DerefOf (OBIU [(Local0 + 0x03)])
                            Break
                        }

                        Local0 += 0x04
                        LOID = DerefOf (OBIU [Local0])
                    }
                }

                If ((LOID == 0x00))
                {
                    Return (0xFF)
                }

                Return (0x00)
            }

            Name (GF01, 0x00)
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, 0x00, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM02, 0, NotSerialized)
            {
                If (!GF01)
                {
                    BM01 ()
                    XINI ()
                    EM01 ()
                    GF01 = 0x01
                }

                Return (0x00)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Package (0x66)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Local0 = 0x00
                While (0x01)
                {
                    If ((DerefOf (OBD1 [Local0]) == Arg0))
                    {
                        Local4 = 0x00
                        Break
                    }

                    If ((DerefOf (OBD1 [Local0]) == 0x00))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD1 [(Local0 + 0x01)])
                    Local0 += 0x02
                }

                If ((Local4 == 0x00))
                {
                    Local1 = DerefOf (OBD1 [(Local0 + 0x01)])
                    Local1 += 0x02
                    Local2 = 0x00
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD1 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Local0 = 0x00
                While (0x01)
                {
                    If ((DerefOf (OBD2 [Local0]) == Arg0))
                    {
                        Local4 = 0x00
                        Break
                    }

                    If ((DerefOf (OBD2 [Local0]) == 0x00))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD2 [(Local0 + 0x01)])
                    Local0 += 0x02
                }

                If ((Local4 == 0x00))
                {
                    Local1 = DerefOf (OBD2 [(Local0 + 0x01)])
                    Local1 += 0x02
                    Local2 = 0x00
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD2 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            Method (AM05, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x00, ACMD)
                CreateField (OBUF, 0x00, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = 0x00
                CreateWordField (OBUF, 0x00, BSCD)
                CreateDWordField (OBUF, 0x02, BSTS)
                CreateWordField (OBUF, 0x06, BSD1)
                CreateDWordField (OBUF, 0x08, BBSN)
                CreateDWordField (OBUF, 0x0C, BBVS)
                CreateDWordField (OBUF, 0x10, BBCB)
                CreateWordField (OBUF, 0x14, BBMC)
                CreateByteField (OBUF, 0x16, BTCL)
                CreateByteField (OBUF, 0x17, BTRR)
                CreateByteField (OBUF, 0x18, BTRW)
                CreateByteField (OBUF, 0x19, BRAS)
                CreateByteField (OBUF, 0x1A, BTRP)
                CreateWordField (OBUF, 0x1B, BVIO)
                CreateWordField (OBUF, 0x1D, BVTT)
                CreateWordField (OBUF, 0x1F, BVPP)
                CreateWordField (OBUF, 0x21, BODT)
                CreateWordField (OBUF, 0x23, BRPG)
                CreateByteField (OBUF, 0x25, BTRC)
                CreateWordField (OBUF, 0x26, BRFC)
                CreateWordField (OBUF, 0x28, BRF2)
                CreateWordField (OBUF, 0x2A, BRF4)
                CreateByteField (OBUF, 0x2C, BFAW)
                CreateByteField (OBUF, 0x2D, BRRS)
                CreateByteField (OBUF, 0x2E, BRRL)
                CreateByteField (OBUF, 0x2F, BTWR)
                CreateByteField (OBUF, 0x30, BWTS)
                CreateByteField (OBUF, 0x31, BWTL)
                CreateByteField (OBUF, 0x32, BCKE)
                CreateByteField (OBUF, 0x33, BCWL)
                CreateByteField (OBUF, 0x34, BRTP)
                CreateByteField (OBUF, 0x35, BRSC)
                CreateByteField (OBUF, 0x36, BRSL)
                CreateByteField (OBUF, 0x37, BRSD)
                CreateByteField (OBUF, 0x38, BRDD)
                CreateByteField (OBUF, 0x39, BWSC)
                CreateByteField (OBUF, 0x3A, BWSL)
                CreateByteField (OBUF, 0x3B, BWSD)
                CreateByteField (OBUF, 0x3C, BWDD)
                CreateByteField (OBUF, 0x3D, BRWR)
                CreateByteField (OBUF, 0x3E, BWRD)
                CreateByteField (OBUF, 0x3F, BRDN)
                CreateByteField (OBUF, 0x40, BM2T)
                CreateByteField (OBUF, 0x41, RBNM)
                CreateByteField (OBUF, 0x42, RBWR)
                CreateByteField (OBUF, 0x43, RBPK)
                CreateByteField (OBUF, 0x44, BPWD)
                CreateByteField (OBUF, 0x45, BOCD)
                CreateDWordField (OBUF, 0x46, BOCV)
                CreateDWordField (OBUF, 0x4A, BOCF)
                CreateByteField (OBUF, 0x4E, BSMT)
                CreateDWordField (OBUF, 0x4F, BTOF)
                CreateByteField (OBUF, 0x53, BEDC)
                CreateWordField (OBUF, 0x54, BCNT)
                CreateByteField (OBUF, 0x56, BACS)
                CreateByteField (OBUF, 0x57, BCOS)
                CreateByteField (OBUF, 0x58, BCES)
                CreateByteField (OBUF, 0x59, BCBC)
                CreateByteField (OBUF, 0x5A, BCBA)
                CreateByteField (OBUF, 0x5B, BCBO)
                CreateByteField (OBUF, 0x5C, BCBE)
                CreateDWordField (OBUF, 0x5D, BCVP)
                CreateByteField (OBUF, 0x5F, BEDO)
                CreateDWordField (OBUF, 0x60, BNLC)
                CreateDWordField (OBUF, 0x64, BNLM)
                CreateDWordField (OBUF, 0x68, BNLS)
                CreateDWordField (OBUF, 0x6C, BPPL)
                CreateDWordField (OBUF, 0x70, BTDL)
                CreateDWordField (OBUF, 0x74, BEDL)
                CreateByteField (OBUF, 0x78, BFOC)
                CreateByteField (OBUF, 0x79, BSVD)
                CreateWordField (OBUF, 0x7A, BFCK)
                CreateByteField (OBUF, 0x7C, BDPC)
                CreateByteField (OBUF, 0x7D, BCPS)
                CreateWordField (OBUF, 0x7E, BFMX)
                CreateWordField (OBUF, 0x80, BGMX)
                CreateWordField (OBUF, 0x82, BVDG)
                CreateDWordField (OBUF, 0x84, BEOG)
                CreateDWordField (OBUF, 0x88, BEOS)
                CreateDWordField (OBUF, 0x8C, BPPT)
                CreateDWordField (OBUF, 0x90, BTDC)
                CreateDWordField (OBUF, 0x94, BEDM)
                CreateDWordField (OBUF, 0x98, BSCA)
                CreateByteField (OBUF, 0x9C, BDMI)
                CreateByteField (OBUF, 0x9D, BGAS)
                CreateByteField (OBUF, 0x9E, BGAG)
                CreateByteField (OBUF, 0x9F, BNPS)
                CreateByteField (OBUF, 0xA0, BNPG)
                CreateDWordField (OBUF, 0xA1, BPCS)
                CreateWordField (OBUF, 0xA5, BIOD)
                CreateWordField (OBUF, 0xA7, BGFV)
                CreateWordField (OBUF, 0xA9, BGFX)
                CreateDWordField (OBUF, 0xAB, BSTD)
                CreateDWordField (OBUF, 0xAF, BSED)
                CreateByteField (OBUF, 0xB3, BSLC)
                CreateByteField (OBUF, 0xB4, BGLC)
                If ((ACMD == 0x00010001))
                {
                    R101 (Arg0)
                }
                ElseIf ((ACMD == 0x00010002))
                {
                    R102 (Arg0)
                }
                ElseIf ((ACMD == 0x00020001))
                {
                    R201 (Arg0)
                }
                ElseIf ((ACMD == 0x00020002))
                {
                    R202 (Arg0)
                }
                ElseIf ((ACMD == 0x00020003))
                {
                    R203 (Arg0)
                }
                ElseIf ((ACMD == 0x00020004))
                {
                    R204 (Arg0)
                }
                ElseIf ((ACMD == 0x00020005))
                {
                    R205 (Arg0)
                }
                ElseIf ((ACMD == 0x00020006))
                {
                    R206 (Arg0)
                }
                ElseIf ((ACMD == 0x00020007))
                {
                    R207 (Arg0)
                }
                ElseIf ((ACMD == 0x00020008))
                {
                    R208 (Arg0)
                }
                ElseIf ((ACMD == 0x00020009))
                {
                    R209 (Arg0)
                }
                ElseIf ((ACMD == 0x0002000A))
                {
                    R20A (Arg0)
                }
                ElseIf ((ACMD == 0x0002000B))
                {
                    R20B (Arg0)
                }
                ElseIf ((ACMD == 0x0002000C))
                {
                    R20C (Arg0)
                }
                ElseIf ((ACMD == 0x0002000D))
                {
                    R20D (Arg0)
                }
                ElseIf ((ACMD == 0x0002000E))
                {
                    R20E (Arg0)
                }
                ElseIf ((ACMD == 0x0002000F))
                {
                    R20F (Arg0)
                }
                ElseIf ((ACMD == 0x00020010))
                {
                    R210 (Arg0)
                }
                ElseIf ((ACMD == 0x00020011))
                {
                    R211 (Arg0)
                }
                ElseIf ((ACMD == 0x00020012))
                {
                    R212 (Arg0)
                }
                ElseIf ((ACMD == 0x00020013))
                {
                    R213 (Arg0)
                }
                ElseIf ((ACMD == 0x00020014))
                {
                    R214 (Arg0)
                }
                ElseIf ((ACMD == 0x00020015))
                {
                    R215 (Arg0)
                }
                ElseIf ((ACMD == 0x00020016))
                {
                    R216 (Arg0)
                }
                ElseIf ((ACMD == 0x00020017))
                {
                    R217 (Arg0)
                }
                ElseIf ((ACMD == 0x00020018))
                {
                    R218 (Arg0)
                }
                ElseIf ((ACMD == 0x00020019))
                {
                    R219 (Arg0)
                }
                ElseIf ((ACMD == 0x0002001A))
                {
                    R21A (Arg0)
                }
                ElseIf ((ACMD == 0x0002001B))
                {
                    R21B (Arg0)
                }
                ElseIf ((ACMD == 0x0002001C))
                {
                    R21C (Arg0)
                }
                ElseIf ((ACMD == 0x0002001D))
                {
                    R21D (Arg0)
                }
                ElseIf ((ACMD == 0x0002001E))
                {
                    R21E (Arg0)
                }
                ElseIf ((ACMD == 0x0002001F))
                {
                    R21F (Arg0)
                }
                ElseIf ((ACMD == 0x00020020))
                {
                    R220 (Arg0)
                }
                ElseIf ((ACMD == 0x00020021))
                {
                    R221 (Arg0)
                }
                ElseIf ((ACMD == 0x00020022))
                {
                    R222 (Arg0)
                }
                ElseIf ((ACMD == 0x00020023))
                {
                    R223 (Arg0)
                }
                ElseIf ((ACMD == 0x00020024))
                {
                    R224 (Arg0)
                }
                ElseIf ((ACMD == 0x00020025))
                {
                    R225 (Arg0)
                }
                ElseIf ((ACMD == 0x00020026))
                {
                    R226 (Arg0)
                }
                ElseIf ((ACMD == 0x00020027))
                {
                    R227 (Arg0)
                }
                ElseIf ((ACMD == 0x00020028))
                {
                    R228 (Arg0)
                }
                ElseIf ((ACMD == 0x00020029))
                {
                    R229 (Arg0)
                }
                ElseIf ((ACMD == 0x0002002A))
                {
                    R22A (Arg0)
                }
                ElseIf ((ACMD == 0x0002002B))
                {
                    R22B (Arg0)
                }
                ElseIf ((ACMD == 0x0002002C))
                {
                    R22C (Arg0)
                }
                ElseIf ((ACMD == 0x0002002D))
                {
                    R22D (Arg0)
                }
                ElseIf ((ACMD == 0x0002002E))
                {
                    R22E (Arg0)
                }
                ElseIf ((ACMD == 0x0002002F))
                {
                    R22F (Arg0)
                }
                ElseIf ((ACMD == 0x00020030))
                {
                    R230 (Arg0)
                }
                ElseIf ((ACMD == 0x00020031))
                {
                    R231 (Arg0)
                }
                ElseIf ((ACMD == 0x00020032))
                {
                    R232 (Arg0)
                }
                ElseIf ((ACMD == 0x00020033))
                {
                    R233 (Arg0)
                }
                ElseIf ((ACMD == 0x00020034))
                {
                    R234 (Arg0)
                }
                ElseIf ((ACMD == 0x00020035))
                {
                    R235 (Arg0)
                }
                ElseIf ((ACMD == 0x00020036))
                {
                    R236 (Arg0)
                }
                ElseIf ((ACMD == 0x00020037))
                {
                    R237 (Arg0)
                }
                ElseIf ((ACMD == 0x00020038))
                {
                    R238 (Arg0)
                }
                ElseIf ((ACMD == 0x00020039))
                {
                    R239 (Arg0)
                }
                ElseIf ((ACMD == 0x0002003A))
                {
                    R23A (Arg0)
                }
                ElseIf ((ACMD == 0x00050001))
                {
                    R23B (Arg0)
                }
                ElseIf ((ACMD == 0x00050002))
                {
                    R23C (Arg0)
                }
                ElseIf ((ACMD == 0x00050003))
                {
                    R23D (Arg0)
                }
                ElseIf ((ACMD == 0x00050004))
                {
                    R23E (Arg0)
                }
                ElseIf ((ACMD == 0x00050005))
                {
                    R23F (Arg0)
                }
                ElseIf ((ACMD == 0x00030001))
                {
                    R301 (Arg0)
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00050006))
                {
                    R304 (Arg0)
                }
                ElseIf ((ACMD == 0x00050007))
                {
                    R305 (Arg0)
                }
                ElseIf ((ACMD == 0x00050008))
                {
                    R306 (Arg0)
                }
                ElseIf ((ACMD == 0x00050009))
                {
                    R307 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000A))
                {
                    R308 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000B))
                {
                    R309 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000C))
                {
                    R30A (Arg0)
                }
                ElseIf ((ACMD == 0x0005000D))
                {
                    R30B (Arg0)
                }
                ElseIf ((ACMD == 0x0005000E))
                {
                    R30C (Arg0)
                }
                ElseIf ((ACMD == 0x0005000F))
                {
                    R30D (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                Else
                {
                }

                BSCD = ASCD /* \AOD_.ASCD */
                BSTS = ASTS /* \AOD_.ASTS */
                BSD1 = RSD1 /* \AOD_.RSD1 */
                BBSN = MBSN /* \AOD_.MBSN */
                BBVS = MBVS /* \AOD_.MBVS */
                BBCB = MBCB /* \AOD_.MBCB */
                BBMC = MBMC /* \AOD_.MBMC */
                BTCL = TTCL /* \AOD_.TTCL */
                BTRR = TRCR /* \AOD_.TRCR */
                BTRW = TRCW /* \AOD_.TRCW */
                BRAS = TRAS /* \AOD_.TRAS */
                BTRP = TTRP /* \AOD_.TTRP */
                BVIO = VDIO /* \AOD_.VDIO */
                BVTT = VMTT /* \AOD_.VMTT */
                BVPP = VMPP /* \AOD_.VMPP */
                BODT = PODT /* \AOD_.PODT */
                BRPG = TRPG /* \AOD_.TRPG */
                BTRC = TTRC /* \AOD_.TTRC */
                BRFC = TRFC /* \AOD_.TRFC */
                BRF2 = TRF2 /* \AOD_.TRF2 */
                BRF4 = TRF4 /* \AOD_.TRF4 */
                BFAW = TFAW /* \AOD_.TFAW */
                BRRS = TRRS /* \AOD_.TRRS */
                BRRL = TRRL /* \AOD_.TRRL */
                BTWR = TTWR /* \AOD_.TTWR */
                BWTS = TWTS /* \AOD_.TWTS */
                BWTL = TWTL /* \AOD_.TWTL */
                BCKE = TCKE /* \AOD_.TCKE */
                BCWL = TCWL /* \AOD_.TCWL */
                BRTP = TRTP /* \AOD_.TRTP */
                BRSC = TRSC /* \AOD_.TRSC */
                BRSL = TRSL /* \AOD_.TRSL */
                BRSD = TRSD /* \AOD_.TRSD */
                BRDD = TRDD /* \AOD_.TRDD */
                BWSC = TWSC /* \AOD_.TWSC */
                BWSL = TWSL /* \AOD_.TWSL */
                BWSD = TWSD /* \AOD_.TWSD */
                BWDD = TWDD /* \AOD_.TWDD */
                BRWR = TRWR /* \AOD_.TRWR */
                BWRD = TWRD /* \AOD_.TWRD */
                BRDN = GRDN /* \AOD_.GRDN */
                BM2T = CM2T /* \AOD_.CM2T */
                RBNM = RTNM /* \AOD_.RTNM */
                RBWR = RTWR /* \AOD_.RTWR */
                RBPK = RTPK /* \AOD_.RTPK */
                BPWD = PWDE /* \AOD_.PWDE */
                BOCD = OCDS /* \AOD_.OCDS */
                BOCV = OCVM /* \AOD_.OCVM */
                BOCF = OCFM /* \AOD_.OCFM */
                BSMT = SMTE /* \AOD_.SMTE */
                BTOF = TOFF /* \AOD_.TOFF */
                BEDC = EDCT /* \AOD_.EDCT */
                BCNT = ACNT /* \AOD_.ACNT */
                BACS = ACSP /* \AOD_.ACSP */
                BCOS = COSP /* \AOD_.COSP */
                BCES = CESP /* \AOD_.CESP */
                BCBC = CBCK /* \AOD_.CBCK */
                BCBA = CBAC /* \AOD_.CBAC */
                BCBO = CBCO /* \AOD_.CBCO */
                BCBE = CBCE /* \AOD_.CBCE */
                BCVP = CDVP /* \AOD_.CDVP */
                BEDO = EDCO /* \AOD_.EDCO */
                BNLC = INLC /* \AOD_.INLC */
                BNLM = INLM /* \AOD_.INLM */
                BNLS = INLS /* \AOD_.INLS */
                BPPL = PPTL /* \AOD_.PPTL */
                BTDL = TDCL /* \AOD_.TDCL */
                BEDL = EDCL /* \AOD_.EDCL */
                BFOC = FCOC /* \AOD_.FCOC */
                BSVD = SVID /* \AOD_.SVID */
                BFCK = FCLK /* \AOD_.FCLK */
                BDPC = MDPC /* \AOD_.MDPC */
                BCPS = MCPS /* \AOD_.MCPS */
                BFMX = FMAX /* \AOD_.FMAX */
                BGMX = GMAX /* \AOD_.GMAX */
                BVDG = CVDG /* \AOD_.CVDG */
                BEOG = ECOG /* \AOD_.ECOG */
                BEOS = ECOS /* \AOD_.ECOS */
                BPPT = PPTS /* \AOD_.PPTS */
                BTDC = TDCS /* \AOD_.TDCS */
                BEDM = EDCS /* \AOD_.EDCS */
                BSCA = SCAS /* \AOD_.SCAS */
                BDMI = DMIS /* \AOD_.DMIS */
                BGAS = GAMS /* \AOD_.GAMS */
                BGAG = GAMG /* \AOD_.GAMG */
                BNPS = NPSS /* \AOD_.NPSS */
                BNPG = NPSG /* \AOD_.NPSG */
                BPCS = COPS /* \AOD_.COPS */
                BIOD = IVDG /* \AOD_.IVDG */
                BGFV = OGFV /* \AOD_.OGFV */
                BGFX = OGFX /* \AOD_.OGFX */
                BSTD = OTDC /* \AOD_.OTDC */
                BSED = OEDC /* \AOD_.OEDC */
                BSLC = DMLC /* \AOD_.DMLC */
                BGLC = DMLG /* \AOD_.DMLG */
                Return (OBUF) /* \AOD_.OBUF */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CPTB (Arg0, INFO)
                Return (INFO) /* \AOD_.AM06.INFO */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214) {})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == 0x00))
                {
                    BSPD = DSPD /* \AOD_.DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = 0x00
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = 0x00
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (OBIE) /* \AOD_.OBIE */
            }

            Name (CMDV, 0x05)
            Name (OBUF, Buffer (0xC8) {})
            OperationRegion (AODT, SystemMemory, 0xCD234018, 0x220C)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                RSD1,   16, 
                MBSN,   32, 
                MBVS,   32, 
                MBCB,   32, 
                MBMC,   16, 
                TTCL,   8, 
                TRCR,   8, 
                TRCW,   8, 
                TRAS,   8, 
                TTRP,   8, 
                VDIO,   16, 
                VMTT,   16, 
                VMPP,   16, 
                PODT,   16, 
                TRPG,   16, 
                TTRC,   8, 
                TRFC,   16, 
                TRF2,   16, 
                TRF4,   16, 
                TFAW,   8, 
                TRRS,   8, 
                TRRL,   8, 
                TTWR,   8, 
                TWTS,   8, 
                TWTL,   8, 
                TCKE,   8, 
                TCWL,   8, 
                TRTP,   8, 
                TRSC,   8, 
                TRSL,   8, 
                TRSD,   8, 
                TRDD,   8, 
                TWSC,   8, 
                TWSL,   8, 
                TWSD,   8, 
                TWDD,   8, 
                TRWR,   8, 
                TWRD,   8, 
                GRDN,   8, 
                CM2T,   8, 
                RTNM,   8, 
                RTWR,   8, 
                RTPK,   8, 
                PWDE,   8, 
                OCDS,   8, 
                OCVM,   32, 
                OCFM,   32, 
                SMTE,   8, 
                TOFF,   32, 
                EDCT,   8, 
                ACNT,   16, 
                ACSP,   8, 
                COSP,   8, 
                CESP,   8, 
                CBCK,   8, 
                CBAC,   8, 
                CBCO,   8, 
                CBCE,   8, 
                CDVP,   16, 
                EDCO,   8, 
                INLC,   32, 
                INLM,   32, 
                INLS,   32, 
                PPTL,   32, 
                TDCL,   32, 
                EDCL,   32, 
                FCOC,   8, 
                SVID,   8, 
                FCLK,   16, 
                MDPC,   8, 
                MCPS,   8, 
                FMAX,   16, 
                GMAX,   16, 
                CVDG,   16, 
                ECOG,   32, 
                ECOS,   32, 
                PPTS,   32, 
                TDCS,   32, 
                EDCS,   32, 
                SCAS,   32, 
                DMIS,   8, 
                GAMS,   8, 
                GAMG,   8, 
                NPSS,   8, 
                NPSG,   8, 
                COPS,   32, 
                IVDG,   16, 
                OGFV,   16, 
                OGFX,   16, 
                OTDC,   32, 
                OEDC,   32, 
                DMLC,   8, 
                DMLG,   8, 
                MRSD,   88, 
                RSD2,   64, 
                NDPC,   8, 
                NCPS,   8, 
                RSD3,   16, 
                DSPD,   68096
            }

            Method (R101, 1, NotSerialized)
            {
                MBVS = 0x05
                MBCB = 0x80000000
                ASMI (0x9D)
            }

            Method (R102, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x40000000
                MBCB = Local0
                ASMI (0x9E)
            }

            Method (R201, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MCLK)
                MBVS = 0x05
                MBMC = MCLK /* \AOD_.R201.MCLK */
                MBCB = 0x01
                ASMI (0x9D)
            }

            Method (R202, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTCL)
                MBVS = 0x05
                TTCL = MTCL /* \AOD_.R202.MTCL */
                MBCB = 0x02
                ASMI (0x9D)
            }

            Method (R203, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDD)
                MBVS = 0x05
                TRCR = MRDD /* \AOD_.R203.MRDD */
                MBCB = 0x04
                ASMI (0x9D)
            }

            Method (R204, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDW)
                MBVS = 0x05
                TRCW = MRDW /* \AOD_.R204.MRDW */
                MBCB = 0x08
                ASMI (0x9D)
            }

            Method (R205, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRS)
                MBVS = 0x05
                TRAS = MTRS /* \AOD_.R205.MTRS */
                MBCB = 0x20
                ASMI (0x9D)
            }

            Method (R206, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRP)
                MBVS = 0x05
                TTRP = MTRP /* \AOD_.R206.MTRP */
                MBCB = 0x10
                ASMI (0x9D)
            }

            Method (R207, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MPOT)
                MBVS = 0x05
                PODT = MPOT /* \AOD_.R207.MPOT */
                MBCB = 0x3000
                ASMI (0x9D)
            }

            Method (R208, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MRPG)
                MBVS = 0x05
                TRPG = MRPG /* \AOD_.R208.MRPG */
                MBCB = 0x4000
                ASMI (0x9D)
            }

            Method (R209, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTRC = SVAL /* \AOD_.R209.SVAL */
                MBCB = 0x5000
                ASMI (0x9D)
            }

            Method (R20A, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRFC = SVAL /* \AOD_.R20A.SVAL */
                MBCB = 0x6000
                ASMI (0x9D)
            }

            Method (R20B, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF2 = SVAL /* \AOD_.R20B.SVAL */
                MBCB = 0x7000
                ASMI (0x9D)
            }

            Method (R20C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF4 = SVAL /* \AOD_.R20C.SVAL */
                MBCB = 0x8000
                ASMI (0x9D)
            }

            Method (R20D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TFAW = SVAL /* \AOD_.R20D.SVAL */
                MBCB = 0x9000
                ASMI (0x9D)
            }

            Method (R20E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRS = SVAL /* \AOD_.R20E.SVAL */
                MBCB = 0xA000
                ASMI (0x9D)
            }

            Method (R20F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRL = SVAL /* \AOD_.R20F.SVAL */
                MBCB = 0xB000
                ASMI (0x9D)
            }

            Method (R210, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTWR = SVAL /* \AOD_.R210.SVAL */
                MBCB = 0xC000
                ASMI (0x9D)
            }

            Method (R211, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTS = SVAL /* \AOD_.R211.SVAL */
                MBCB = 0xD000
                ASMI (0x9D)
            }

            Method (R212, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTL = SVAL /* \AOD_.R212.SVAL */
                MBCB = 0xE000
                ASMI (0x9D)
            }

            Method (R213, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCKE = SVAL /* \AOD_.R213.SVAL */
                MBCB = 0xF000
                ASMI (0x9D)
            }

            Method (R214, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCWL = SVAL /* \AOD_.R214.SVAL */
                MBCB = 0x00010000
                ASMI (0x9D)
            }

            Method (R215, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRTP = SVAL /* \AOD_.R215.SVAL */
                MBCB = 0x00020000
                ASMI (0x9D)
            }

            Method (R216, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSC = SVAL /* \AOD_.R216.SVAL */
                MBCB = 0x00030000
                ASMI (0x9D)
            }

            Method (R217, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSL = SVAL /* \AOD_.R217.SVAL */
                MBCB = 0x00040000
                ASMI (0x9D)
            }

            Method (R218, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSD = SVAL /* \AOD_.R218.SVAL */
                MBCB = 0x00050000
                ASMI (0x9D)
            }

            Method (R219, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRDD = SVAL /* \AOD_.R219.SVAL */
                MBCB = 0x00060000
                ASMI (0x9D)
            }

            Method (R21A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSC = SVAL /* \AOD_.R21A.SVAL */
                MBCB = 0x00070000
                ASMI (0x9D)
            }

            Method (R21B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSL = SVAL /* \AOD_.R21B.SVAL */
                MBCB = 0x00080000
                ASMI (0x9D)
            }

            Method (R21C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSD = SVAL /* \AOD_.R21C.SVAL */
                MBCB = 0x00090000
                ASMI (0x9D)
            }

            Method (R21D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWDD = SVAL /* \AOD_.R21D.SVAL */
                MBCB = 0x000A0000
                ASMI (0x9D)
            }

            Method (R21E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRWR = SVAL /* \AOD_.R21E.SVAL */
                MBCB = 0x000B0000
                ASMI (0x9D)
            }

            Method (R21F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWRD = SVAL /* \AOD_.R21F.SVAL */
                MBCB = 0x000C0000
                ASMI (0x9D)
            }

            Method (R220, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GRDN = SVAL /* \AOD_.R220.SVAL */
                MBCB = 0x000D0000
                ASMI (0x9D)
            }

            Method (R221, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CM2T = SVAL /* \AOD_.R221.SVAL */
                MBCB = 0x000E0000
                ASMI (0x9D)
            }

            Method (R222, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTNM = SVAL /* \AOD_.R222.SVAL */
                MBCB = 0x000F0000
                ASMI (0x9D)
            }

            Method (R223, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTWR = SVAL /* \AOD_.R223.SVAL */
                MBCB = 0x00100000
                ASMI (0x9D)
            }

            Method (R224, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTPK = SVAL /* \AOD_.R224.SVAL */
                MBCB = 0x00200000
                ASMI (0x9D)
            }

            Method (R225, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PWDE = SVAL /* \AOD_.R225.SVAL */
                MBCB = 0x00300000
                ASMI (0x9D)
            }

            Method (R226, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SMTE = SVAL /* \AOD_.R226.SVAL */
                MBCB = 0x00400000
                ASMI (0x9D)
            }

            Method (R227, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACNT = SVAL /* \AOD_.R227.SVAL */
                MBCB = 0x00500000
                ASMI (0x9D)
            }

            Method (R228, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCT = SVAL /* \AOD_.R228.SVAL */
                MBCB = 0x00600000
                ASMI (0x9D)
            }

            Method (R229, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACSP = SVAL /* \AOD_.R229.SVAL */
                MBCB = 0x00800000
                ASMI (0x9D)
            }

            Method (R22A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COSP = SVAL /* \AOD_.R22A.SVAL */
                MBCB = 0x00900000
                ASMI (0x9D)
            }

            Method (R22B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CESP = SVAL /* \AOD_.R22B.SVAL */
                MBCB = 0x00A00000
                ASMI (0x9D)
            }

            Method (R22C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCK = SVAL /* \AOD_.R22C.SVAL */
                MBCB = 0x00B00000
                ASMI (0x9D)
            }

            Method (R22D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBAC = SVAL /* \AOD_.R22D.SVAL */
                MBCB = 0x00C00000
                ASMI (0x9D)
            }

            Method (R22E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCO = SVAL /* \AOD_.R22E.SVAL */
                MBCB = 0x00D00000
                ASMI (0x9D)
            }

            Method (R22F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCE = SVAL /* \AOD_.R22F.SVAL */
                MBCB = 0x00E00000
                ASMI (0x9D)
            }

            Method (R230, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CDVP = SVAL /* \AOD_.R230.SVAL */
                MBCB = 0x00700000
                ASMI (0x9D)
            }

            Method (R231, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLM = SVAL /* \AOD_.R231.SVAL */
                MBCB = 0x00100001
                ASMI (0x9D)
            }

            Method (R232, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLS = SVAL /* \AOD_.R232.SVAL */
                MBCB = 0x00100002
                ASMI (0x9D)
            }

            Method (R233, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCOC = SVAL /* \AOD_.R233.SVAL */
                MBCB = 0x00100003
                ASMI (0x9D)
            }

            Method (R234, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SVID = SVAL /* \AOD_.R234.SVAL */
                MBCB = 0x00100004
                ASMI (0x9D)
            }

            Method (R235, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCLK = SVAL /* \AOD_.R235.SVAL */
                MBCB = 0x00100005
                ASMI (0x9D)
            }

            Method (R236, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FMAX = SVAL /* \AOD_.R236.SVAL */
                MBCB = 0x00100006
                ASMI (0x9D)
            }

            Method (R237, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GMAX = SVAL /* \AOD_.R237.SVAL */
                MBCB = 0x00100007
                ASMI (0x9D)
            }

            Method (R238, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CVDG = SVAL /* \AOD_.R238.SVAL */
                MBCB = 0x00100008
                ASMI (0x9D)
            }

            Method (R239, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100009
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R23A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ECOS = SVAL /* \AOD_.R23A.SVAL */
                MBCB = 0x0010000A
                ASMI (0x9D)
            }

            Method (R23B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PPTS = SVAL /* \AOD_.R23B.SVAL */
                MBCB = 0x0010000B
                ASMI (0x9D)
            }

            Method (R23C, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TDCS = SVAL /* \AOD_.R23C.SVAL */
                MBCB = 0x0010000C
                ASMI (0x9D)
            }

            Method (R23D, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCS = SVAL /* \AOD_.R23D.SVAL */
                MBCB = 0x0010000D
                ASMI (0x9D)
            }

            Method (R23E, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SCAS = SVAL /* \AOD_.R23E.SVAL */
                MBCB = 0x0010000E
                ASMI (0x9D)
            }

            Method (R23F, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMIS = SVAL /* \AOD_.R23F.SVAL */
                MBCB = 0x0010000F
                ASMI (0x9D)
            }

            Method (R301, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVIO)
                MBVS = 0x05
                VDIO = MVIO /* \AOD_.R301.MVIO */
                MBCB = 0x0100
                ASMI (0x9E)
            }

            Method (R302, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVTT)
                MBVS = 0x05
                VMTT = MVTT /* \AOD_.R302.MVTT */
                MBCB = 0x0200
                ASMI (0x9E)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                VMPP = MVPP /* \AOD_.R303.MVPP */
                MBCB = 0x2000
                ASMI (0x9E)
            }

            Method (R304, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GAMS = SVAL /* \AOD_.R304.SVAL */
                MBCB = 0x00100010
                ASMI (0x9D)
            }

            Method (R305, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100020
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R306, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                NPSS = SVAL /* \AOD_.R306.SVAL */
                MBCB = 0x00100030
                ASMI (0x9D)
            }

            Method (R307, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100031
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R308, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COPS = SVAL /* \AOD_.R308.SVAL */
                MBCB = 0x00100032
                ASMI (0x9D)
            }

            Method (R309, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                IVDG = SVAL /* \AOD_.R309.SVAL */
                MBCB = 0x00100033
                ASMI (0x9D)
            }

            Method (R30A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OTDC = SVAL /* \AOD_.R30A.SVAL */
                MBCB = 0x00100034
                ASMI (0x9D)
            }

            Method (R30B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OEDC = SVAL /* \AOD_.R30B.SVAL */
                MBCB = 0x00100035
                ASMI (0x9D)
            }

            Method (R30C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMLC = SVAL /* \AOD_.R30C.SVAL */
                MBCB = 0x00100036
                ASMI (0x9D)
            }

            Method (R30D, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100037
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R401, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x01000000
                ASMI (0x9E)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x02000000
                ASMI (0x9E)
            }

            Method (R505, 1, NotSerialized)
            {
                MBVS = 0x05
            }

            Name (WQBA, Buffer (0x0A57)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x47, 0x0A, 0x00, 0x00, 0x38, 0x37, 0x00, 0x00,  // G...87..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xDB, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0F, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x50, 0x1A, 0x40,  // x\.A.P.@
                /* 00A8 */  0x98, 0xFC, 0x21, 0x2B, 0x06, 0x0C, 0x4A, 0xC2,  // ..!+..J.
                /* 00B0 */  0x58, 0xA8, 0x8B, 0x51, 0xA3, 0x46, 0xCA, 0x06,  // X..Q.F..
                /* 00B8 */  0x64, 0x88, 0xD2, 0x46, 0x8D, 0x1E, 0xD0, 0xF9,  // d..F....
                /* 00C0 */  0x1D, 0xC9, 0xD9, 0x1D, 0xDD, 0x91, 0x24, 0x30,  // ......$0
                /* 00C8 */  0xEA, 0x31, 0x1D, 0x63, 0x61, 0x33, 0x12, 0x6A,  // .1.ca3.j
                /* 00D0 */  0x8C, 0xE6, 0xA0, 0x48, 0xB8, 0x41, 0xA3, 0x25,  // ...H.A.%
                /* 00D8 */  0xC2, 0x6A, 0x5C, 0xB1, 0xCF, 0xCC, 0xC2, 0x87,  // .j\.....
                /* 00E0 */  0x25, 0x8C, 0x23, 0x38, 0xB0, 0x83, 0xB5, 0x68,  // %.#8...h
                /* 00E8 */  0x18, 0xA1, 0x15, 0x04, 0xA7, 0x41, 0x1C, 0x45,  // .....A.E
                /* 00F0 */  0x94, 0x30, 0x0C, 0xCF, 0x98, 0x81, 0x8E, 0x92,  // .0......
                /* 00F8 */  0x21, 0x85, 0x09, 0x7A, 0x02, 0x41, 0x4E, 0x9E,  // !..z.AN.
                /* 0100 */  0x61, 0x19, 0xE2, 0x0C, 0x38, 0x56, 0x8C, 0x50,  // a...8V.P
                /* 0108 */  0x21, 0x31, 0x03, 0x09, 0xFE, 0xFF, 0x3F, 0x81,  // !1....?.
                /* 0110 */  0xAE, 0x31, 0xE4, 0x19, 0x88, 0xDC, 0x03, 0x4E,  // .1.....N
                /* 0118 */  0x20, 0x48, 0xF4, 0x28, 0xC1, 0x8D, 0x6B, 0x54,  //  H.(..kT
                /* 0120 */  0x36, 0xA6, 0xB3, 0xC1, 0x0D, 0xCC, 0x04, 0x71,  // 6......q
                /* 0128 */  0x0E, 0x0F, 0x23, 0x03, 0x42, 0x13, 0x88, 0x1F,  // ..#.B...
                /* 0130 */  0x3B, 0x7C, 0x02, 0xBB, 0x3F, 0x0E, 0x48, 0x21,  // ;|..?.H!
                /* 0138 */  0x82, 0x2E, 0x04, 0x67, 0x5A, 0xA3, 0x80, 0x77,  // ...gZ..w
                /* 0140 */  0xC4, 0xB3, 0x43, 0x5B, 0x10, 0x3A, 0x0B, 0xC4,  // ..C[.:..
                /* 0148 */  0x6A, 0x0C, 0x45, 0x10, 0x11, 0x82, 0x46, 0x31,  // j.E...F1
                /* 0150 */  0x5E, 0x84, 0x50, 0x21, 0xA2, 0x44, 0x3D, 0xE7,  // ^.P!.D=.
                /* 0158 */  0x20, 0xB5, 0x09, 0x50, 0x06, 0x22, 0xB4, 0x60,  //  ..P.".`
                /* 0160 */  0x46, 0x60, 0xF6, 0xCF, 0x00, 0xCC, 0x02, 0xC4,  // F`......
                /* 0168 */  0x1F, 0x81, 0x25, 0x9C, 0x08, 0x64, 0x64, 0x34,  // ..%..dd4
                /* 0170 */  0xF4, 0xB0, 0xE0, 0x93, 0x00, 0x3B, 0x20, 0x78,  // .....; x
                /* 0178 */  0x3E, 0xA7, 0x66, 0x02, 0x07, 0x86, 0x10, 0xAF,  // >.f.....
                /* 0180 */  0x04, 0x88, 0x3A, 0x5A, 0x50, 0x02, 0x4B, 0x39,  // ..:ZP.K9
                /* 0188 */  0x1A, 0x10, 0xDB, 0x03, 0xD3, 0x3D, 0xE0, 0x08,  // .....=..
                /* 0190 */  0xCF, 0xDD, 0x97, 0x83, 0x53, 0xF3, 0x4F, 0xC3,  // ....S.O.
                /* 0198 */  0xD3, 0x7C, 0x48, 0xC0, 0x0C, 0xD1, 0x63, 0x3D,  // .|H...c=
                /* 01A0 */  0x88, 0x80, 0x87, 0xC8, 0x4E, 0x09, 0x06, 0xC4,  // ....N...
                /* 01A8 */  0x7B, 0xBF, 0x16, 0x90, 0x11, 0xBC, 0x24, 0x18,  // {.....$.
                /* 01B0 */  0xD0, 0x93, 0x78, 0x40, 0x00, 0xCB, 0x41, 0xE3,  // ..x@..A.
                /* 01B8 */  0xC0, 0x4F, 0xA8, 0xE2, 0x3B, 0x00, 0x3D, 0x12,  // .O..;.=.
                /* 01C0 */  0xB0, 0x19, 0xC5, 0x37, 0x41, 0x59, 0xC7, 0x07,  // ...7AY..
                /* 01C8 */  0xF4, 0x9C, 0xA3, 0x3D, 0x3B, 0xBC, 0x2C, 0x34,  // ...=;.,4
                /* 01D0 */  0x7B, 0xC5, 0x20, 0x04, 0xAF, 0x01, 0xBE, 0x29,  // {. ....)
                /* 01D8 */  0xF8, 0x34, 0x62, 0x51, 0xAB, 0x93, 0x93, 0x55,  // .4bQ...U
                /* 01E0 */  0x79, 0xC4, 0x14, 0xDC, 0x43, 0xE0, 0x32, 0xE0,  // y...C.2.
                /* 01E8 */  0x34, 0x74, 0x8F, 0x17, 0x1C, 0x0A, 0xC6, 0x4B,  // 4t.....K
                /* 01F0 */  0xFF, 0xFF, 0xE3, 0x05, 0xF7, 0xBC, 0x8E, 0x17,  // ........
                /* 01F8 */  0x2C, 0xC7, 0x84, 0x87, 0x8D, 0xAA, 0x20, 0x34,  // ,..... 4
                /* 0200 */  0x88, 0x03, 0x6E, 0x7E, 0x00, 0xE4, 0x6A, 0xE1,  // ..n~..j.
                /* 0208 */  0x11, 0xB3, 0xB9, 0x9C, 0x15, 0x3B, 0xA2, 0xF0,  // .....;..
                /* 0210 */  0xE1, 0xF1, 0x61, 0x78, 0xC4, 0xEF, 0x0D, 0xC5,  // ..ax....
                /* 0218 */  0x82, 0x48, 0x20, 0x84, 0xCE, 0x0C, 0x47, 0x0E,  // .H ...G.
                /* 0220 */  0x16, 0x67, 0x27, 0x08, 0x11, 0x58, 0xDA, 0xD0,  // .g'..X..
                /* 0228 */  0xD1, 0x43, 0xF6, 0xA8, 0x5E, 0x62, 0x8C, 0xF1,  // .C..^b..
                /* 0230 */  0x44, 0x60, 0xD4, 0x53, 0x3A, 0x7A, 0xF0, 0x01,  // D`.S:z..
                /* 0238 */  0x7A, 0xF4, 0x80, 0xCF, 0xFF, 0xFF, 0xE8, 0x71,  // z......q
                /* 0240 */  0x92, 0xC6, 0x2C, 0x11, 0xA3, 0x47, 0x9F, 0x23,  // ..,..G.#
                /* 0248 */  0x3C, 0x9D, 0xB7, 0x1F, 0x7E, 0x14, 0x49, 0xE0,  // <...~.I.
                /* 0250 */  0xF8, 0x10, 0x1A, 0x3D, 0x78, 0x4E, 0x3F, 0x1E,  // ...=xN?.
                /* 0258 */  0x3D, 0xF8, 0xC7, 0xE8, 0xD1, 0x83, 0x67, 0x0C,  // =.....g.
                /* 0260 */  0xE7, 0x86, 0xBB, 0xDA, 0x78, 0xE4, 0x60, 0x1F,  // ....x.`.
                /* 0268 */  0x2F, 0x5E, 0xDE, 0x71, 0x0B, 0x14, 0x3E, 0x67,  // /^.q..>g
                /* 0270 */  0x4F, 0x06, 0xF0, 0x1E, 0x84, 0x3B, 0x6F, 0x01,  // O....;o.
                /* 0278 */  0x97, 0x11, 0x70, 0xC1, 0x4F, 0x1D, 0x9F, 0xAB,  // ..p.O...
                /* 0280 */  0xA8, 0x44, 0x18, 0xD4, 0xD1, 0x0A, 0x5C, 0xFF,  // .D....\.
                /* 0288 */  0xFF, 0xA3, 0x15, 0xC0, 0x84, 0xFB, 0xC3, 0xAB,  // ........
                /* 0290 */  0xD5, 0xA3, 0x15, 0xD8, 0x43, 0xBE, 0x24, 0xF4,  // ....C.$.
                /* 0298 */  0x23, 0x70, 0x6C, 0x08, 0x39, 0x39, 0x5A, 0xA1,  // #pl.99Z.
                /* 02A0 */  0x4E, 0x46, 0xB8, 0xA0, 0x07, 0x2B, 0xA0, 0x7B,  // NF...+.{
                /* 02A8 */  0xD0, 0xC0, 0x1D, 0x0F, 0xE0, 0xFC, 0xFF, 0x8F,  // ........
                /* 02B0 */  0x07, 0x7C, 0x60, 0xFC, 0xF4, 0x02, 0x3E, 0x11,  // .|`...>.
                /* 02B8 */  0x47, 0x21, 0x9F, 0xCA, 0xA0, 0x9F, 0x20, 0x3D,  // G!.... =
                /* 02C0 */  0x5A, 0xF0, 0x1C, 0xAB, 0x80, 0xC3, 0xA9, 0x0C,  // Z.......
                /* 02C8 */  0x38, 0x0C, 0x19, 0x7C, 0xF2, 0x0E, 0x53, 0xE8,  // 8..|..S.
                /* 02D0 */  0x03, 0x89, 0xA7, 0x50, 0xEB, 0x2D, 0x84, 0xC0,  // ...P.-..
                /* 02D8 */  0x1E, 0x90, 0x8F, 0x12, 0x41, 0x4E, 0x24, 0xC2,  // ....AN$.
                /* 02E0 */  0xB9, 0xF8, 0x38, 0x05, 0x98, 0xF8, 0xFF, 0x8F,  // ..8.....
                /* 02E8 */  0x1A, 0x7F, 0xCB, 0x60, 0xD7, 0x29, 0x30, 0x9C,  // ...`.)0.
                /* 02F0 */  0x82, 0xE0, 0x4D, 0xCA, 0xE3, 0x07, 0xDF, 0xB1,  // ..M.....
                /* 02F8 */  0x07, 0x77, 0x0A, 0x82, 0xE7, 0x71, 0x48, 0x42,  // .w...qHB
                /* 0300 */  0x3E, 0x8F, 0x97, 0x00, 0xDC, 0x45, 0x08, 0x7F,  // >....E..
                /* 0308 */  0x10, 0x02, 0x3E, 0xB2, 0x16, 0x4A, 0x4F, 0x41,  // ..>..JOA
                /* 0310 */  0x16, 0x02, 0x83, 0x3A, 0x08, 0x01, 0x2E, 0xFF,  // ...:....
                /* 0318 */  0xFF, 0x07, 0x21, 0x60, 0xE7, 0xED, 0xB6, 0xA1,  // ..!`....
                /* 0320 */  0x6B, 0x90, 0x6F, 0x03, 0x4F, 0x03, 0xAF, 0x11,  // k.o.O...
                /* 0328 */  0x51, 0x1E, 0x84, 0x7C, 0x13, 0x7A, 0x21, 0x88,  // Q..|.z!.
                /* 0330 */  0x10, 0xE5, 0x78, 0x4F, 0x20, 0xC2, 0xD3, 0x90,  // ..xO ...
                /* 0338 */  0x27, 0x1C, 0x26, 0xDC, 0xC9, 0x46, 0x79, 0x69,  // '.&..Fyi
                /* 0340 */  0x08, 0x63, 0xE8, 0x58, 0x81, 0x22, 0xC7, 0x0F,  // .c.X."..
                /* 0348 */  0xE1, 0x4B, 0x85, 0x0F, 0x42, 0x2C, 0xCA, 0x79,  // .K..B,.y
                /* 0350 */  0x40, 0x3F, 0x02, 0x9F, 0x3F, 0x6C, 0xE4, 0x2C,  // @?..?l.,
                /* 0358 */  0x82, 0x3A, 0x09, 0xF8, 0xD0, 0xE1, 0x41, 0x3D,  // .:....A=
                /* 0360 */  0x21, 0x60, 0x42, 0x9F, 0xEC, 0x40, 0x75, 0x14,  // !`B..@u.
                /* 0368 */  0x02, 0xCE, 0x07, 0x10, 0x78, 0x21, 0x0F, 0xAD,  // ....x!..
                /* 0370 */  0xA0, 0x3B, 0x92, 0x83, 0xE3, 0x50, 0x17, 0x39,  // .;...P.9
                /* 0378 */  0xEE, 0x03, 0x0D, 0xF6, 0xEC, 0xC1, 0xFF, 0xFF,  // ........
                /* 0380 */  0x67, 0x0F, 0xE0, 0x21, 0xED, 0xE0, 0x81, 0x12,  // g..!....
                /* 0388 */  0x73, 0xF6, 0x00, 0x48, 0x73, 0xD9, 0x78, 0xF7,  // s..Hs.x.
                /* 0390 */  0xF0, 0xA5, 0xE7, 0x4C, 0x9F, 0x3D, 0x3C, 0xD7,  // ...L.=<.
                /* 0398 */  0x77, 0x0E, 0x1F, 0xEB, 0x8C, 0x62, 0x88, 0xF7,  // w....b..
                /* 03A0 */  0x0F, 0x1F, 0x0A, 0xA2, 0x44, 0x3C, 0xD7, 0x28,  // ....D<.(
                /* 03A8 */  0x87, 0x1C, 0x25, 0x6E, 0x84, 0x30, 0xCF, 0x77,  // ..%n.0.w
                /* 03B0 */  0xC6, 0x89, 0x11, 0x2A, 0x02, 0x03, 0x7D, 0xF6,  // ...*..}.
                /* 03B8 */  0x60, 0x71, 0xCE, 0x1E, 0x50, 0xB1, 0xCF, 0xE6,  // `q..P...
                /* 03C0 */  0x8D, 0x23, 0xC2, 0x6B, 0xC0, 0x39, 0xFE, 0xFF,  // .#.k.9..
                /* 03C8 */  0xCF, 0xC7, 0x67, 0x0F, 0xC0, 0x9B, 0x94, 0xB7,  // ..g.....
                /* 03D0 */  0x9B, 0xCE, 0x1E, 0xE0, 0x3A, 0xC2, 0xE2, 0xCE,  // ....:...
                /* 03D8 */  0x1E, 0xF0, 0xC6, 0x8D, 0x3D, 0x7D, 0x00, 0x3B,  // ....=}.;
                /* 03E0 */  0x19, 0xAF, 0x01, 0x1F, 0x3D, 0x68, 0xF0, 0x03,  // ....=h..
                /* 03E8 */  0x2A, 0xD0, 0xFE, 0xFF, 0x1F, 0x50, 0x01, 0x97,  // *....P..
                /* 03F0 */  0x87, 0x8F, 0x07, 0x54, 0xB0, 0x4B, 0x7F, 0x0E,  // ...T.K..
                /* 03F8 */  0xE8, 0x53, 0xE0, 0xE0, 0x07, 0x54, 0xF4, 0x70,  // .S...T.p
                /* 0400 */  0x7C, 0x9C, 0xC3, 0x9C, 0x50, 0x01, 0x9B, 0xFF,  // |...P...
                /* 0408 */  0x7F, 0x02, 0x1F, 0x6E, 0xE1, 0x00, 0x87, 0xF4,  // ...n....
                /* 0410 */  0x58, 0xC1, 0x76, 0x3E, 0x05, 0x0E, 0x63, 0x05,  // X.v>..c.
                /* 0418 */  0xCF, 0xC0, 0xF8, 0x58, 0x81, 0xC5, 0xC4, 0x9E,  // ...X....
                /* 0420 */  0x3D, 0x8E, 0x15, 0x6C, 0xA7, 0x52, 0xE0, 0x30,  // =..l.R.0
                /* 0428 */  0x56, 0x30, 0x0D, 0x8C, 0x8D, 0x15, 0x7C, 0x12,  // V0....|.
                /* 0430 */  0xCE, 0xC5, 0xE8, 0x31, 0xFA, 0xDA, 0x72, 0x40,  // ...1..r@
                /* 0438 */  0x9E, 0x47, 0x84, 0xA7, 0x7C, 0xF6, 0xFF, 0x27,  // .G..|..'
                /* 0440 */  0x70, 0xDC, 0xE1, 0x82, 0xEA, 0x5C, 0xE3, 0xE1,  // p....\..
                /* 0448 */  0x82, 0x5F, 0xDE, 0x70, 0x41, 0x33, 0x36, 0x38,  // ._.pA368
                /* 0450 */  0x23, 0x06, 0xDF, 0xD1, 0xC9, 0xE7, 0x58, 0xB0,  // #.....X.
                /* 0458 */  0x5C, 0x22, 0xD8, 0x59, 0x80, 0x4D, 0x07, 0x7F,  // \".Y.M..
                /* 0460 */  0x95, 0xC5, 0x9F, 0x99, 0x80, 0x91, 0xE4, 0xC7,  // ........
                /* 0468 */  0x92, 0x09, 0x14, 0xE0, 0x74, 0x20, 0x51, 0x2F,  // ....t Q/
                /* 0470 */  0x02, 0x0A, 0xE3, 0x43, 0x8D, 0xCF, 0x4C, 0x70,  // ...C..Lp
                /* 0478 */  0x25, 0xC1, 0xA1, 0xCE, 0x69, 0xEC, 0x74, 0x7C,  // %...i.t|
                /* 0480 */  0x72, 0x27, 0xF2, 0x7A, 0xE0, 0xC9, 0x3D, 0x3C,  // r'.z..=<
                /* 0488 */  0xC1, 0x38, 0x26, 0x78, 0x5A, 0x27, 0x65, 0xED,  // .8&xZ'e.
                /* 0490 */  0x47, 0x20, 0xF2, 0xFF, 0xBF, 0x66, 0xB1, 0xB3,  // G ...f..
                /* 0498 */  0x02, 0x47, 0xE3, 0x27, 0x29, 0xB0, 0x5E, 0x18,  // .G.').^.
                /* 04A0 */  0x7C, 0x4C, 0x00, 0xC7, 0xAC, 0x5F, 0xA3, 0x30,  // |L..._.0
                /* 04A8 */  0x58, 0xA1, 0x62, 0x34, 0x7A, 0x0D, 0x22, 0xA0,  // X.b4z.".
                /* 04B0 */  0xC7, 0xD7, 0xD7, 0x30, 0x74, 0x27, 0x30, 0x54,  // ...0t'0T
                /* 04B8 */  0xC4, 0x10, 0x6F, 0x06, 0x76, 0x79, 0x1E, 0x42,  // ..o.vy.B
                /* 04C0 */  0x1E, 0x9A, 0xC0, 0x85, 0xFD, 0xD0, 0x04, 0xF6,  // ........
                /* 04C8 */  0x50, 0x67, 0x32, 0x1A, 0x69, 0x34, 0xA8, 0x73,  // Pg2.i4.s
                /* 04D0 */  0x3A, 0x3F, 0x10, 0x3C, 0x72, 0xF9, 0xD8, 0x61,  // :?.<r..a
                /* 04D8 */  0x90, 0x13, 0x3D, 0xAD, 0xC7, 0x85, 0xA7, 0x01,  // ..=.....
                /* 04E0 */  0x8F, 0x9B, 0x5D, 0x13, 0xFC, 0x41, 0xF0, 0xF1,  // ..]..A..
                /* 04E8 */  0x00, 0x7F, 0x80, 0x08, 0x78, 0xA2, 0x4F, 0x1E,  // ....x.O.
                /* 04F0 */  0xB0, 0x4E, 0x20, 0xF8, 0xA3, 0x06, 0xFC, 0xF1,  // .N .....
                /* 04F8 */  0xF8, 0x18, 0xE0, 0x63, 0x07, 0x97, 0x3F, 0x08,  // ...c..?.
                /* 0500 */  0xD4, 0x51, 0x91, 0x8F, 0xF4, 0xB4, 0xDE, 0x06,  // .Q......
                /* 0508 */  0x7C, 0x48, 0x38, 0x2C, 0x76, 0xE6, 0xF0, 0xC9,  // |H8,v...
                /* 0510 */  0x08, 0xFF, 0xFF, 0x1F, 0x0F, 0x38, 0x8F, 0xED,  // .....8..
                /* 0518 */  0x0F, 0x19, 0xBE, 0x32, 0x78, 0xBE, 0x3E, 0xD1,  // ...2x.>.
                /* 0520 */  0x82, 0xE5, 0xD6, 0xE1, 0x43, 0x43, 0xA8, 0xA7,  // ....CC..
                /* 0528 */  0x0E, 0xCF, 0xE0, 0xFD, 0xC2, 0x27, 0x10, 0x60,  // .....'.`
                /* 0530 */  0x22, 0xCA, 0xCC, 0x10, 0x98, 0xD0, 0x75, 0xCA,  // ".....u.
                /* 0538 */  0xC6, 0x59, 0x93, 0x9E, 0x07, 0x2C, 0xF7, 0x80,  // .Y...,..
                /* 0540 */  0xA0, 0x6B, 0x04, 0xE6, 0x06, 0x11, 0xC4, 0xC3,  // .k......
                /* 0548 */  0x7F, 0xA3, 0xE0, 0x87, 0x46, 0x01, 0xEA, 0x60,  // ....F..`
                /* 0550 */  0x66, 0x08, 0x4B, 0xA3, 0x90, 0x30, 0x08, 0x8D,  // f.K..0..
                /* 0558 */  0xC8, 0x47, 0x0F, 0x02, 0x47, 0x41, 0x3C, 0x7A,  // .G..GA<z
                /* 0560 */  0xC7, 0x3C, 0x3E, 0xA1, 0x87, 0xEA, 0x63, 0x80,  // .<>...c.
                /* 0568 */  0x27, 0x81, 0x0B, 0x75, 0xF0, 0xA1, 0xC7, 0x05,  // '..u....
                /* 0570 */  0x3C, 0xDE, 0x03, 0xB1, 0xCF, 0x01, 0x6C, 0xEC,  // <.....l.
                /* 0578 */  0xB8, 0x93, 0x07, 0xDC, 0x71, 0xE0, 0x4F, 0x9C,  // ....q.O.
                /* 0580 */  0xF8, 0xB3, 0x1A, 0x3F, 0xF5, 0x80, 0xF3, 0xC8,  // ...?....
                /* 0588 */  0x89, 0xFB, 0xFF, 0x1F, 0x0E, 0xE0, 0x01, 0xF9,  // ........
                /* 0590 */  0x3E, 0x60, 0xA5, 0x67, 0x02, 0x3A, 0x87, 0x10,  // >`.g.:..
                /* 0598 */  0x61, 0xA2, 0x19, 0x1E, 0x13, 0xF8, 0xF8, 0x44,  // a......D
                /* 05A0 */  0x4F, 0xA4, 0x1E, 0x17, 0x1F, 0xA5, 0xCF, 0x30,  // O......0
                /* 05A8 */  0x0C, 0xFB, 0x11, 0xC5, 0xC7, 0xC4, 0x03, 0x7C,  // .......|
                /* 05B0 */  0x39, 0x78, 0xE6, 0xC3, 0xC0, 0x7A, 0xDC, 0x1C,  // 9x...z..
                /* 05B8 */  0xD6, 0x68, 0x61, 0x0F, 0xF7, 0x19, 0xC2, 0xF7,  // .ha.....
                /* 05C0 */  0x0F, 0xCF, 0xCC, 0xD7, 0x46, 0x9F, 0x3C, 0xC0,  // ....F.<.
                /* 05C8 */  0x72, 0x94, 0x82, 0x3F, 0x54, 0xDC, 0x59, 0x00,  // r..?T.Y.
                /* 05D0 */  0xEE, 0x81, 0x89, 0xCD, 0xE1, 0x69, 0x00, 0x2F,  // .....i./
                /* 05D8 */  0xF3, 0x10, 0x81, 0x1A, 0x88, 0x45, 0x2E, 0x50,  // .....E.P
                /* 05E0 */  0xC7, 0x15, 0x8F, 0xC4, 0x04, 0x96, 0x77, 0x80,  // ......w.
                /* 05E8 */  0x40, 0x9D, 0x1F, 0x2C, 0xEB, 0x00, 0x81, 0x12,  // @..,....
                /* 05F0 */  0x02, 0x47, 0x41, 0x7C, 0x80, 0xF0, 0x31, 0xDD,  // .GA|..1.
                /* 05F8 */  0x46, 0x0E, 0x10, 0xE8, 0x03, 0x0C, 0x83, 0x78,  // F......x
                /* 0600 */  0xE8, 0x34, 0x81, 0x8F, 0x32, 0x3E, 0x40, 0x00,  // .4..2>@.
                /* 0608 */  0x8F, 0x71, 0xE0, 0x0F, 0x10, 0xF0, 0xFE, 0xFF,  // .q......
                /* 0610 */  0x04, 0x3E, 0x01, 0x03, 0x9F, 0xF3, 0x03, 0x38,  // .>.....8
                /* 0618 */  0x4E, 0xA2, 0x3E, 0x3F, 0x80, 0xEB, 0x04, 0xE0,  // N.>?....
                /* 0620 */  0xF3, 0x03, 0x70, 0x1D, 0xE0, 0xA3, 0x00, 0x58,  // ..p....X
                /* 0628 */  0xCE, 0x64, 0x6C, 0x0E, 0x2F, 0x35, 0x67, 0xFE,  // .dl./5g.
                /* 0630 */  0xCA, 0xE4, 0x13, 0x2F, 0xE6, 0xD4, 0xCB, 0x75,  // .../...u
                /* 0638 */  0x8D, 0x80, 0x44, 0x3C, 0x43, 0xA0, 0x06, 0xE1,  // ..D<C...
                /* 0640 */  0x83, 0xB9, 0x8F, 0x13, 0xCC, 0xE7, 0x21, 0x48,  // ......!H
                /* 0648 */  0xAA, 0x51, 0x04, 0xEF, 0x5B, 0x01, 0x8B, 0x70,  // .Q..[..p
                /* 0650 */  0x8C, 0x40, 0x89, 0xA7, 0x90, 0xF4, 0x63, 0x04,  // .@....c.
                /* 0658 */  0x4A, 0x2C, 0x1C, 0x05, 0xF1, 0xA8, 0x7D, 0x90,  // J,....}.
                /* 0660 */  0xB0, 0x8D, 0xB3, 0x2D, 0xFA, 0x30, 0xCC, 0x8F,  // ...-.0..
                /* 0668 */  0x02, 0xFC, 0x14, 0x01, 0xF7, 0xFF, 0x3F, 0x0B,  // ......?.
                /* 0670 */  0x9F, 0xC2, 0x70, 0x47, 0x0F, 0x70, 0x5C, 0xC4,  // ..pG.p\.
                /* 0678 */  0x0E, 0xED, 0xEC, 0x1E, 0x12, 0xA2, 0xC4, 0x3C,  // .......<
                /* 0680 */  0x83, 0x37, 0x3F, 0x03, 0x86, 0x8D, 0xE6, 0x31,  // .7?....1
                /* 0688 */  0xE2, 0x70, 0xCE, 0xD1, 0x17, 0x35, 0xCF, 0x29,  // .p...5.)
                /* 0690 */  0xD6, 0xE3, 0x1B, 0x3F, 0x52, 0xC0, 0x45, 0xF1,  // ...?R.E.
                /* 0698 */  0x91, 0x02, 0xEE, 0x4C, 0xCE, 0x03, 0xA3, 0x6E,  // ...L...n
                /* 06A0 */  0x2C, 0x82, 0xF7, 0xB5, 0x10, 0x7F, 0xB0, 0x00,  // ,.......
                /* 06A8 */  0x1E, 0xC7, 0x25, 0x1F, 0x2C, 0xC0, 0x05, 0xE9,  // ..%.,...
                /* 06B0 */  0x83, 0x05, 0x70, 0x3D, 0x1F, 0xF8, 0x74, 0x00,  // ..p=..t.
                /* 06B8 */  0xD6, 0x0B, 0x19, 0xBF, 0x1F, 0xB0, 0xFF, 0xFF,  // ........
                /* 06C0 */  0xFD, 0x00, 0x77, 0xC2, 0x80, 0x71, 0x3E, 0xC0,  // ..w..q>.
                /* 06C8 */  0xDC, 0x30, 0x1C, 0x6B, 0xA5, 0x3A, 0x61, 0xE0,  // .0.k.:a.
                /* 06D0 */  0x62, 0x3D, 0x28, 0x34, 0x10, 0x36, 0xBC, 0xE7,  // b=(4.6..
                /* 06D8 */  0x9F, 0x27, 0x43, 0x7E, 0x98, 0x61, 0x51, 0xE0,  // .'C~.aQ.
                /* 06E0 */  0x74, 0xB4, 0xF0, 0xC9, 0xC2, 0x21, 0x28, 0x74,  // t....!(t
                /* 06E8 */  0x10, 0xF3, 0x09, 0x83, 0x8B, 0x39, 0x61, 0x50,  // .....9aP
                /* 06F0 */  0x10, 0x03, 0x3A, 0xE9, 0x39, 0x0C, 0x7D, 0xDA,  // ..:.9.}.
                /* 06F8 */  0xF4, 0xB1, 0x81, 0xDD, 0xEE, 0x7D, 0xBF, 0xF0,  // .....}..
                /* 0700 */  0x5C, 0x3C, 0x67, 0x8E, 0xE7, 0xF3, 0x32, 0x43,  // \<g...2C
                /* 0708 */  0x7D, 0x33, 0x01, 0xCF, 0x95, 0x82, 0x1D, 0xE7,  // }3......
                /* 0710 */  0x31, 0xB7, 0x49, 0x76, 0xE0, 0x64, 0xC7, 0x02,  // 1.Iv.d..
                /* 0718 */  0xA3, 0x1C, 0xEF, 0x6B, 0xA1, 0xD5, 0xDC, 0x15,  // ...k....
                /* 0720 */  0x50, 0x33, 0xC2, 0x10, 0x78, 0xC0, 0x3E, 0x89,  // P3..x.>.
                /* 0728 */  0x81, 0x49, 0xDF, 0x8D, 0x02, 0xE4, 0xE8, 0x5C,  // .I.....\
                /* 0730 */  0xE8, 0xE8, 0x51, 0x07, 0x00, 0x1F, 0xED, 0xF8,  // ..Q.....
                /* 0738 */  0xE8, 0x7D, 0xC4, 0xF6, 0x71, 0x05, 0xEE, 0xE1,  // .}..q...
                /* 0740 */  0xCE, 0x67, 0x28, 0x70, 0xFC, 0xFF, 0xCF, 0x50,  // .g(p...P
                /* 0748 */  0xC0, 0x65, 0x60, 0x9E, 0xE1, 0x13, 0x0A, 0xB8,  // .e`.....
                /* 0750 */  0xEE, 0x0F, 0xFC, 0xA2, 0x8A, 0x99, 0xC8, 0xB3,  // ........
                /* 0758 */  0x30, 0x8C, 0x53, 0x0A, 0xF0, 0x18, 0xBD, 0x4F,  // 0.S....O
                /* 0760 */  0x29, 0xE0, 0x3A, 0x00, 0xF8, 0x94, 0x02, 0x5C,  // ).:....\
                /* 0768 */  0xE7, 0xF8, 0x50, 0x00, 0x96, 0x33, 0x4A, 0x14,  // ..P..3J.
                /* 0770 */  0xDF, 0x7F, 0x3D, 0x11, 0x1B, 0x1F, 0x3E, 0xBD,  // ..=...>.
                /* 0778 */  0xA0, 0x78, 0x2C, 0xCF, 0xE6, 0xEC, 0x4C, 0xA9,  // .x,...L.
                /* 0780 */  0xB3, 0x09, 0x3A, 0xDA, 0xEB, 0x41, 0x83, 0x7E,  // ..:..A.~
                /* 0788 */  0x50, 0xF1, 0xEC, 0xC3, 0x1F, 0x5F, 0x84, 0xE7,  // P...._..
                /* 0790 */  0x53, 0x03, 0xFF, 0xFF, 0x13, 0x38, 0xCE, 0xD9,  // S....8..
                /* 0798 */  0x04, 0x15, 0x84, 0x42, 0xC7, 0x4E, 0x1F, 0x27,  // ...B.N.'
                /* 07A0 */  0xB8, 0xA4, 0xE3, 0x04, 0x05, 0x31, 0xA0, 0xF3,  // .....1..
                /* 07A8 */  0x1E, 0xF1, 0x3C, 0x0C, 0x7A, 0x9C, 0xE0, 0xA7,  // ..<.z...
                /* 07B0 */  0x3E, 0xDF, 0x12, 0x8E, 0xE3, 0x09, 0x24, 0xC1,  // >.....$.
                /* 07B8 */  0x7C, 0x27, 0x01, 0x7A, 0x39, 0x81, 0x77, 0x5E,  // |'.z9.w^
                /* 07C0 */  0x07, 0xCF, 0x28, 0xBC, 0x93, 0xB3, 0x60, 0x08,  // ..(...`.
                /* 07C8 */  0x6F, 0xD6, 0xEC, 0x38, 0x81, 0xBF, 0x1C, 0x3C,  // o..8...<
                /* 07D0 */  0x2B, 0x3C, 0xA8, 0xF3, 0xEB, 0x09, 0xCC, 0x7B,  // +<.....{
                /* 07D8 */  0x1E, 0xB8, 0x8E, 0x27, 0xC0, 0x42, 0xE6, 0x01,  // ...'.B..
                /* 07E0 */  0x00, 0x75, 0x6C, 0xF4, 0xC1, 0x91, 0x1F, 0x00,  // .ul.....
                /* 07E8 */  0x1C, 0xFA, 0x78, 0x82, 0x9E, 0x89, 0x8F, 0x45,  // ..x....E
                /* 07F0 */  0x4F, 0x25, 0xBE, 0x00, 0xF0, 0xB3, 0x9B, 0xCE,  // O%......
                /* 07F8 */  0x27, 0xA0, 0x38, 0x67, 0x82, 0x67, 0x1C, 0xEC,  // '.8g.g..
                /* 0800 */  0x0A, 0x80, 0x3F, 0x03, 0x60, 0xFE, 0xFF, 0x27,  // ..?.`..'
                /* 0808 */  0x14, 0x38, 0x47, 0x32, 0xF0, 0x4D, 0xC4, 0xA7,  // .8G2.M..
                /* 0810 */  0x8A, 0x03, 0xC1, 0x9E, 0x64, 0x81, 0x37, 0x2C,  // ....d.7,
                /* 0818 */  0x3F, 0xC9, 0x02, 0x3E, 0x6E, 0x23, 0xD8, 0x59,  // ?..>n#.Y
                /* 0820 */  0x3C, 0x93, 0x30, 0x82, 0x91, 0x8F, 0x26, 0xA8,  // <.0...&.
                /* 0828 */  0x23, 0xB2, 0x83, 0x9E, 0xC2, 0x10, 0xE3, 0x7C,  // #......|
                /* 0830 */  0xAC, 0x30, 0x46, 0xE4, 0xE2, 0x47, 0xAD, 0xC9,  // .0F..G..
                /* 0838 */  0xF8, 0x6C, 0xE6, 0xCB, 0x3A, 0x3B, 0xFC, 0xE0,  // .l..:;..
                /* 0840 */  0x08, 0x06, 0x3A, 0xA0, 0xA0, 0x8E, 0x63, 0x3E,  // ..:...c>
                /* 0848 */  0x8B, 0x81, 0xEB, 0xFF, 0x7F, 0x16, 0x03, 0x78,  // .......x
                /* 0850 */  0x70, 0x76, 0xF7, 0xE8, 0xF9, 0xB1, 0x9D, 0x83,  // pv......
                /* 0858 */  0x78, 0xF4, 0x0E, 0x7F, 0x16, 0x83, 0x1E, 0xF6,  // x.......
                /* 0860 */  0x2C, 0x06, 0xB4, 0x05, 0x9F, 0xC5, 0x40, 0x79,  // ,.....@y
                /* 0868 */  0x8B, 0xC0, 0xFF, 0xFF, 0x6F, 0x11, 0xB8, 0x33,  // ....o..3
                /* 0870 */  0x28, 0xF0, 0x5A, 0x9B, 0x4F, 0x28, 0xE0, 0xBA,  // (.Z.O(..
                /* 0878 */  0x33, 0xF8, 0x84, 0x02, 0x5C, 0x8F, 0x00, 0xB8,  // 3...\...
                /* 0880 */  0x33, 0x28, 0x38, 0x4E, 0x00, 0xCC, 0xD7, 0x0D,  // 3(8N....
                /* 0888 */  0x80, 0x82, 0x3C, 0x02, 0xE0, 0xAF, 0xF0, 0x3E,  // ..<....>
                /* 0890 */  0x98, 0xE0, 0xE2, 0x9D, 0x54, 0x50, 0x1C, 0x8E,  // ....TP..
                /* 0898 */  0x77, 0x52, 0x41, 0x4C, 0x25, 0xF2, 0x5B, 0x8B,  // wRAL%.[.
                /* 08A0 */  0x27, 0x10, 0xFE, 0xE0, 0xE2, 0xBC, 0x9F, 0xF1,  // '.......
                /* 08A8 */  0x53, 0x19, 0x0C, 0x51, 0x07, 0x0B, 0x94, 0x8C,  // S..Q....
                /* 08B0 */  0x83, 0x05, 0x05, 0x31, 0xA0, 0x33, 0x9E, 0x52,  // ...1.3.R
                /* 08B8 */  0xD0, 0xA7, 0x32, 0x7E, 0x19, 0xF1, 0xC0, 0x12,  // ..2~....
                /* 08C0 */  0xCC, 0x74, 0x4D, 0x81, 0xFA, 0xFF, 0x47, 0xF6,  // .tM...G.
                /* 08C8 */  0x05, 0x04, 0x37, 0x60, 0xB8, 0x60, 0x0F, 0x12,  // ..7`.`..
                /* 08D0 */  0x46, 0x78, 0x4D, 0xF6, 0x3C, 0x30, 0x47, 0x14,  // FxM.<0G.
                /* 08D8 */  0xC0, 0x86, 0xE4, 0xA1, 0xA3, 0x44, 0x0E, 0x9D,  // .....D..
                /* 08E0 */  0x82, 0x78, 0xE8, 0xA6, 0xF1, 0x11, 0x05, 0x37,  // .x.....7
                /* 08E8 */  0x56, 0x76, 0x21, 0x80, 0x15, 0xF5, 0x94, 0x02,  // Vv!.....
                /* 08F0 */  0x0A, 0x91, 0xC3, 0x07, 0xCD, 0x38, 0x8E, 0xEE,  // .....8..
                /* 08F8 */  0xA9, 0xC7, 0xF3, 0xE0, 0x77, 0x62, 0x1F, 0xF3,  // ....wb..
                /* 0900 */  0xE0, 0x9E, 0x54, 0x70, 0xA7, 0x46, 0xDC, 0x49,  // ..Tp.F.I
                /* 0908 */  0x05, 0x0C, 0x73, 0xC4, 0x9E, 0xCA, 0xC0, 0xF1,  // ..s.....
                /* 0910 */  0xFF, 0x3F, 0x82, 0x02, 0x47, 0x0F, 0x47, 0x50,  // .?..G.GP
                /* 0918 */  0x40, 0xCB, 0x21, 0x85, 0x1F, 0x33, 0x30, 0x57,  // @.!..30W
                /* 0920 */  0x03, 0x7E, 0x04, 0xC5, 0xC4, 0x7C, 0x3E, 0xE8,  // .~...|>.
                /* 0928 */  0x7C, 0xC2, 0x8F, 0x06, 0x0E, 0xF4, 0x2A, 0x10,  // |.....*.
                /* 0930 */  0x38, 0x3B, 0xEB, 0xE3, 0x2E, 0x07, 0x3E, 0x61,  // 8;....>a
                /* 0938 */  0x98, 0x60, 0x84, 0xD3, 0x04, 0x85, 0xB0, 0x78,  // .`.....x
                /* 0940 */  0x0A, 0x49, 0x3F, 0x54, 0xA0, 0xC4, 0xC2, 0x51,  // .I?T...Q
                /* 0948 */  0x10, 0x1F, 0x2A, 0x2C, 0xE4, 0x50, 0x81, 0x3E,  // ..*,.P.>
                /* 0950 */  0x46, 0xE1, 0x83, 0x9F, 0x28, 0x40, 0x71, 0x01,  // F...(@q.
                /* 0958 */  0x78, 0x64, 0x07, 0xEF, 0x7D, 0x9D, 0xFD, 0xFF,  // xd..}...
                /* 0960 */  0xEF, 0xEB, 0x98, 0x41, 0xE2, 0x2E, 0x2A, 0x1E,  // ...A..*.
                /* 0968 */  0xB2, 0x0F, 0xEC, 0x98, 0x79, 0xFA, 0x68, 0x01,  // ....y.h.
                /* 0970 */  0x8F, 0xC0, 0xA7, 0x47, 0xF0, 0xC1, 0xFB, 0x30,  // ...G...0
                /* 0978 */  0x05, 0xBC, 0xCE, 0x7A, 0x3E, 0x58, 0x80, 0x0B,  // ...z>X..
                /* 0980 */  0xDC, 0x07, 0x0B, 0xE0, 0x7A, 0xFB, 0xF1, 0xE9,  // ....z...
                /* 0988 */  0x00, 0xAC, 0xA3, 0x3D, 0xE6, 0xF3, 0x8D, 0xF3,  // ...=....
                /* 0990 */  0x7E, 0x00, 0xE3, 0xA6, 0xF2, 0x10, 0xE9, 0x7B,  // ~......{
                /* 0998 */  0x80, 0xF1, 0xD9, 0xF9, 0x00, 0x7B, 0x25, 0xF2,  // .....{%.
                /* 09A0 */  0xF1, 0x59, 0x36, 0x7D, 0x6A, 0x34, 0x6A, 0xD5,  // .Y6}j4j.
                /* 09A8 */  0xA0, 0x4C, 0x8D, 0x32, 0x0D, 0x6A, 0xF5, 0xA9,  // .L.2.j..
                /* 09B0 */  0xD4, 0x98, 0x31, 0x4F, 0x50, 0xFA, 0xFF, 0x47,  // ..1OP..G
                /* 09B8 */  0x58, 0xB8, 0x46, 0xEE, 0x50, 0x4F, 0x09, 0x81,  // X.F.PO..
                /* 09C0 */  0x38, 0xEE, 0xF2, 0x35, 0x7A, 0xF2, 0x3A, 0x11,  // 8..5z.:.
                /* 09C8 */  0x88, 0x85, 0xA8, 0x00, 0x61, 0x62, 0x16, 0x29,  // ....ab.)
                /* 09D0 */  0x10, 0x4B, 0x5D, 0xA4, 0x40, 0x1C, 0xC5, 0x07,  // .K].@...
                /* 09D8 */  0x08, 0x0B, 0xA8, 0x04, 0x84, 0x45, 0xB5, 0x02,  // .....E..
                /* 09E0 */  0x44, 0xB5, 0x80, 0xB0, 0x58, 0x5E, 0x40, 0x58,  // D...X^@X
                /* 09E8 */  0xB0, 0x85, 0x0A, 0xC4, 0x61, 0xDC, 0x80, 0x30,  // ....a..0
                /* 09F0 */  0x29, 0x2F, 0x08, 0x0D, 0x86, 0xD8, 0x39, 0x42,  // )/....9B
                /* 09F8 */  0xEB, 0xAC, 0x6B, 0x10, 0x01, 0x39, 0xB4, 0x1F,  // ..k..9..
                /* 0A00 */  0x20, 0x26, 0x61, 0xFD, 0x02, 0xB2, 0x70, 0x45,  //  &a...pE
                /* 0A08 */  0x40, 0x2C, 0x06, 0x88, 0x80, 0xAC, 0xC3, 0x12,  // @,......
                /* 0A10 */  0x10, 0x13, 0x05, 0x22, 0x20, 0x4B, 0xD3, 0x04,  // ..." K..
                /* 0A18 */  0xC4, 0x84, 0x82, 0x08, 0xC8, 0x21, 0x45, 0x01,  // .....!E.
                /* 0A20 */  0xB1, 0xC4, 0x20, 0x02, 0x72, 0x78, 0x53, 0x40,  // .. .rxS@
                /* 0A28 */  0x4C, 0x8A, 0x2A, 0x20, 0xA6, 0xFE, 0xA1, 0x20,  // L.* ... 
                /* 0A30 */  0x20, 0x47, 0x01, 0x11, 0x90, 0x03, 0xD9, 0x02,  //  G......
                /* 0A38 */  0x62, 0xF1, 0x40, 0x04, 0x64, 0x85, 0xEF, 0x51,  // b.@.d..Q
                /* 0A40 */  0x01, 0x59, 0x2E, 0x88, 0x80, 0x1C, 0xC1, 0x18,  // .Y......
                /* 0A48 */  0x10, 0x0B, 0x04, 0x22, 0x20, 0xCB, 0x92, 0x06,  // ..." ...
                /* 0A50 */  0xC4, 0x44, 0x82, 0x08, 0xC8, 0xFF, 0x7F         // .D.....
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == 0x00))
                {
                    If ((((Arg1 != 0x01) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, 0x00, WIID)
                    }

                    If ((Arg1 == 0x01))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "UsbCUcsi", 0x00000001)
{
    External (_SB_.PCI0.LPC0.H_EC, DeviceObj)

    Scope (\_SB.PCI0.LPC0.H_EC)
    {
        Method (_Q79, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            \_SB.UBTC.NTFY ()
        }
    }

    Scope (\_SB)
    {
        Device (UBTC)
        {
            Name (_HID, EisaId ("USBC000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0CA0"))  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "USB Type C")  // _DDN: DOS Device Name
            Name (_ADR, Zero)  // _ADR: Address
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PCI0.LPC0.H_EC
            })
            OperationRegion (ECMS, SystemIO, 0x72, 0x02)
            Field (ECMS, ByteAcc, Lock, Preserve)
            {
                INDX,   8, 
                DATA,   8
            }

            Method (RECM, 1, Serialized)
            {
                INDX = Arg0
                Return (DATA) /* \_SB_.UBTC.DATA */
            }

            Method (WECM, 2, Serialized)
            {
                INDX = Arg0
                DATA = Arg1
            }

            OperationRegion (DBG0, SystemIO, 0x80, 0x01)
            Field (DBG0, ByteAcc, NoLock, Preserve)
            {
                IO80,   8
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xCD237000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.UBTC._CRS.RBUF */
            }

            Device (CR01)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x09, 
                    0x00, 
                    0x00
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "RIGHT",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "CENTER",
                        PLD_Shape              = "OVAL",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x0,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0)

                })
            }

            Device (CR02)
            {
                Name (_ADR, 0x01)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x09, 
                    0x00, 
                    0x00
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "RIGHT",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "CENTER",
                        PLD_Shape              = "OVAL",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x5,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x0,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0)

                })
            }

            OperationRegion (USBC, SystemMemory, 0xCD237000, 0x30)
            Field (USBC, ByteAcc, Lock, Preserve)
            {
                VER1,   8, 
                VER2,   8, 
                RSV1,   8, 
                RSV2,   8, 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8, 
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8, 
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8
            }

            OperationRegion (USBD, SystemMemory, 0xFE00DA80, 0x80)
            Field (USBD, ByteAcc, Lock, Preserve)
            {
                CCD1,   8, 
                CCD2,   8, 
                Offset (0x10), 
                CVE1,   8, 
                CVE2,   8, 
                CRS1,   8, 
                CRS2,   8, 
                MCI0,   8, 
                MCI1,   8, 
                MCI2,   8, 
                MCI3,   8, 
                MTL0,   8, 
                MTL1,   8, 
                MTL2,   8, 
                MTL3,   8, 
                MTL4,   8, 
                MTL5,   8, 
                MTL6,   8, 
                MTL7,   8, 
                CGI0,   8, 
                CGI1,   8, 
                CGI2,   8, 
                CGI3,   8, 
                CGI4,   8, 
                CGI5,   8, 
                CGI6,   8, 
                CGI7,   8, 
                CGI8,   8, 
                CGI9,   8, 
                CGIA,   8, 
                CGIB,   8, 
                CGIC,   8, 
                CGID,   8, 
                CGIE,   8, 
                CGIF,   8, 
                CGO0,   8, 
                CGO1,   8, 
                CGO2,   8, 
                CGO3,   8, 
                CGO4,   8, 
                CGO5,   8, 
                CGO6,   8, 
                CGO7,   8, 
                CGO8,   8, 
                CGO9,   8, 
                CGOA,   8, 
                CGOB,   8, 
                CGOC,   8, 
                CGOD,   8, 
                CGOE,   8, 
                CGOF,   8
            }

            Method (NTFY, 0, Serialized)
            {
                IO80 = 0x79
                Local0 = Timer
                ECR1 ()
                Local1 = ((Timer - Local0) / 0x2710)
                Notify (\_SB.UBTC, 0x80) // Status Change
            }

            Method (ECR1, 0, Serialized)
            {
                MGI0 = CGI0 /* \_SB_.UBTC.CGI0 */
                MGI1 = CGI1 /* \_SB_.UBTC.CGI1 */
                MGI2 = CGI2 /* \_SB_.UBTC.CGI2 */
                MGI3 = CGI3 /* \_SB_.UBTC.CGI3 */
                MGI4 = CGI4 /* \_SB_.UBTC.CGI4 */
                MGI5 = CGI5 /* \_SB_.UBTC.CGI5 */
                MGI6 = CGI6 /* \_SB_.UBTC.CGI6 */
                MGI7 = CGI7 /* \_SB_.UBTC.CGI7 */
                MGI8 = CGI8 /* \_SB_.UBTC.CGI8 */
                MGI9 = CGI9 /* \_SB_.UBTC.CGI9 */
                MGIA = CGIA /* \_SB_.UBTC.CGIA */
                MGIB = CGIB /* \_SB_.UBTC.CGIB */
                MGIC = CGIC /* \_SB_.UBTC.CGIC */
                MGID = CGID /* \_SB_.UBTC.CGID */
                MGIE = CGIE /* \_SB_.UBTC.CGIE */
                MGIF = CGIF /* \_SB_.UBTC.CGIF */
                VER1 = CVE1 /* \_SB_.UBTC.CVE1 */
                VER2 = CVE2 /* \_SB_.UBTC.CVE2 */
                RSV1 = CRS1 /* \_SB_.UBTC.CRS1 */
                RSV2 = CRS2 /* \_SB_.UBTC.CRS2 */
                CCI0 = MCI0 /* \_SB_.UBTC.MCI0 */
                CCI1 = MCI1 /* \_SB_.UBTC.MCI1 */
                CCI2 = MCI2 /* \_SB_.UBTC.MCI2 */
                CCI3 = MCI3 /* \_SB_.UBTC.MCI3 */
                CCD2 = 0xE1
                Return (Zero)
            }

            Method (ECRD, 0, Serialized)
            {
                MGI0 = CGI0 /* \_SB_.UBTC.CGI0 */
                MGI1 = CGI1 /* \_SB_.UBTC.CGI1 */
                MGI2 = CGI2 /* \_SB_.UBTC.CGI2 */
                MGI3 = CGI3 /* \_SB_.UBTC.CGI3 */
                MGI4 = CGI4 /* \_SB_.UBTC.CGI4 */
                MGI5 = CGI5 /* \_SB_.UBTC.CGI5 */
                MGI6 = CGI6 /* \_SB_.UBTC.CGI6 */
                MGI7 = CGI7 /* \_SB_.UBTC.CGI7 */
                MGI8 = CGI8 /* \_SB_.UBTC.CGI8 */
                MGI9 = CGI9 /* \_SB_.UBTC.CGI9 */
                MGIA = CGIA /* \_SB_.UBTC.CGIA */
                MGIB = CGIB /* \_SB_.UBTC.CGIB */
                MGIC = CGIC /* \_SB_.UBTC.CGIC */
                MGID = CGID /* \_SB_.UBTC.CGID */
                MGIE = CGIE /* \_SB_.UBTC.CGIE */
                MGIF = CGIF /* \_SB_.UBTC.CGIF */
                VER1 = CVE1 /* \_SB_.UBTC.CVE1 */
                VER2 = CVE2 /* \_SB_.UBTC.CVE2 */
                RSV1 = CRS1 /* \_SB_.UBTC.CRS1 */
                RSV2 = CRS2 /* \_SB_.UBTC.CRS2 */
                CCI0 = MCI0 /* \_SB_.UBTC.MCI0 */
                CCI1 = MCI1 /* \_SB_.UBTC.MCI1 */
                CCI2 = MCI2 /* \_SB_.UBTC.MCI2 */
                CCI3 = MCI3 /* \_SB_.UBTC.MCI3 */
                Return (Zero)
            }

            Method (ECWR, 0, Serialized)
            {
                CGO0 = MGO0 /* \_SB_.UBTC.MGO0 */
                CGO1 = MGO1 /* \_SB_.UBTC.MGO1 */
                CGO2 = MGO2 /* \_SB_.UBTC.MGO2 */
                CGO3 = MGO3 /* \_SB_.UBTC.MGO3 */
                CGO4 = MGO4 /* \_SB_.UBTC.MGO4 */
                CGO5 = MGO5 /* \_SB_.UBTC.MGO5 */
                CGO6 = MGO6 /* \_SB_.UBTC.MGO6 */
                CGO7 = MGO7 /* \_SB_.UBTC.MGO7 */
                CGO8 = MGO8 /* \_SB_.UBTC.MGO8 */
                CGO9 = MGO9 /* \_SB_.UBTC.MGO9 */
                CGOA = MGOA /* \_SB_.UBTC.MGOA */
                CGOB = MGOB /* \_SB_.UBTC.MGOB */
                CGOC = MGOC /* \_SB_.UBTC.MGOC */
                CGOD = MGOD /* \_SB_.UBTC.MGOD */
                CGOE = MGOE /* \_SB_.UBTC.MGOE */
                CGOF = MGOF /* \_SB_.UBTC.MGOF */
                MTL0 = CTL0 /* \_SB_.UBTC.CTL0 */
                MTL1 = CTL1 /* \_SB_.UBTC.CTL1 */
                MTL2 = CTL2 /* \_SB_.UBTC.CTL2 */
                MTL3 = CTL3 /* \_SB_.UBTC.CTL3 */
                MTL4 = CTL4 /* \_SB_.UBTC.CTL4 */
                MTL5 = CTL5 /* \_SB_.UBTC.CTL5 */
                MTL6 = CTL6 /* \_SB_.UBTC.CTL6 */
                MTL7 = CTL7 /* \_SB_.UBTC.CTL7 */
                CCD1 = 0xE0
                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("6f8398c2-7ca4-11e4-ad36-631042b5008f") /* Unknown UUID */))
                {
                    If ((ToInteger (Arg2) == 0x00))
                    {
                        Return (Buffer (0x01)
                        {
                             0x0F                                             // .
                        })
                    }
                    ElseIf ((ToInteger (Arg2) == 0x01))
                    {
                        IO80 = 0xA0
                        ECWR ()
                        IO80 = 0xA1
                    }
                    ElseIf ((ToInteger (Arg2) == 0x02))
                    {
                        IO80 = 0xA2
                        ECRD ()
                        IO80 = 0xA3
                    }
                    Else
                    {
                        Return (0x00)
                    }
                }

                Return (0x00)
            }
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "AmdTable", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M207, Buffer (0xFF) {})
        Name (M208, Buffer (0x03) {})
        Name (M204, 0x01)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                ATC0 ()
            }

            If ((Arg0 == 0x01))
            {
                ATC1 ()
            }

            If ((Arg0 == 0x02))
            {
                ATC2 (Arg1)
            }

            If ((Arg0 == 0x03))
            {
                ATC3 ()
            }

            If ((Arg0 == 0x04))
            {
                ATC4 (Arg1)
            }

            If ((Arg0 == 0x06))
            {
                ATC6 (Arg1)
            }

            If ((Arg0 == 0x07))
            {
                ATC7 (Arg1)
            }

            If ((Arg0 == 0x08))
            {
                ATC8 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x03]), DerefOf (
                    Arg1 [0x04]), DerefOf (Arg1 [0x05]))
            }

            If ((Arg0 == 0x09))
            {
                ATC9 ()
            }

            Return (M207) /* \_SB_.PCI0.GP17.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = 0x01
            M160 = M100 /* External reference */
            M207 = \_SB.ALIB (0x00, M207)
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, 0x01, M203)
            M157 = 0x0A
            M161 = 0x01
            M162 = M100 /* External reference */
            Local0 = M049 (M133, 0x15)
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & 0x01)
            }
            ElseIf ((Local0 & 0x7F))
            {
                M204 = M113 (Local0)
            }

            M203 = M204 /* \_SB_.PCI0.GP17.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = 0x01
            M207 = \_SB.ALIB (0x02, Arg0)
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, 0x00, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = 0x01
            M197 = 0x03
            M206 = 0x01
            M207 = \_SB.ALIB (0x03, M208)
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = 0x01
            M207 = \_SB.ALIB (0x04, Arg0)
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235, 0x00, 0x01)
        }

        Method (ATC8, 4, Serialized)
        {
            Local0 = Buffer (0x05) {}
            CreateWordField (Local0, 0x00, M157)
            CreateByteField (Local0, 0x02, M425)
            CreateWordField (Local0, 0x03, M426)
            M157 = 0x05
            Local1 = Arg0
            Local2 = Arg1
            M426 = ((Local2 << 0x08) + Local1)
            Local3 = Arg2
            Local4 = Arg3
            If (((Local3 == 0x00) && (Local4 == 0x00)))
            {
                M425 = 0x01
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == 0x00) && (Local4 == 0x01)))
            {
                M425 = 0x00
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == 0x03) && (Local4 == 0x01)))
            {
                M425 = 0x03
                \_SB.ALIB (0xAA, Local0)
            }
        }

        Method (ATC9, 0, Serialized)
        {
            M207 = M444 /* External reference */
        }

        Method (XTRM, 2, Serialized)
        {
            If ((M105 == 0x00))
            {
                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Local4 = M105 /* External reference */
            If ((Local4 > 0x00010000))
            {
                Local4 = 0x00010000
            }

            Local5 = Arg0
            Local6 = Arg1
            If ((Local6 > 0x1000))
            {
                Local6 = 0x1000
            }

            If ((Local5 >= Local4))
            {
                Return (Buffer (Local6)
                {
                     0x00                                             // .
                })
            }

            If ((((Local5 & 0x0FFF) + Local6) > 0x1000))
            {
                Local6 = (0x1000 - (Local5 & 0x0FFF))
            }

            Name (M202, Buffer (0x1000)
            {
                 0x00                                             // .
            })
            If (((Local5 & 0xF000) == 0x00))
            {
                M202 = M106 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x1000))
            {
                M202 = M378 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x2000))
            {
                M202 = M379 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x3000))
            {
                M202 = M380 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x4000))
            {
                M202 = M381 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x5000))
            {
                M202 = M382 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x6000))
            {
                M202 = M383 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x7000))
            {
                M202 = M384 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x8000))
            {
                M202 = M385 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x9000))
            {
                M202 = M386 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xA000))
            {
                M202 = M387 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xB000))
            {
                M202 = M388 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xC000))
            {
                M202 = M389 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xD000))
            {
                M202 = M390 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xE000))
            {
                M202 = M391 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xF000))
            {
                M202 = M392 /* External reference */
            }

            If (((Local5 + Local6) <= Local4))
            {
                If ((Local6 == 0x1000))
                {
                    Return (M202) /* \_SB_.PCI0.GP17.VGA_.XTRM.M202 */
                }
            }
            Else
            {
                Local6 = (Local4 - Local5)
            }

            Name (M393, Buffer (Local6)
            {
                 0x00                                             // .
            })
            CreateField (M202, ((Local5 & 0x0FFF) * 0x08), (Local6 * 0x08
                ), M394)
            M393 = M394 /* \_SB_.PCI0.GP17.VGA_.XTRM.M394 */
            Return (M393) /* \_SB_.PCI0.GP17.VGA_.XTRM.M393 */
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN0))
            {
                \_SB.PCI0.GP17.VGA.AFN0 ()
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN0))
            {
                \_SB.PCI0.PB2.VGA.AFN0 ()
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN0))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN0 ()
            }
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN1))
            {
                \_SB.PCI0.GP17.VGA.AFN1 (Arg0)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN1))
            {
                \_SB.PCI0.PB2.VGA.AFN1 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN1))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN1 (Arg0)
            }
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN2))
            {
                \_SB.PCI0.GP17.VGA.AFN2 (Arg0, Arg1)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN2))
            {
                \_SB.PCI0.PB2.VGA.AFN2 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN2))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
            }
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN3))
            {
                \_SB.PCI0.GP17.VGA.AFN3 (Arg0, Arg1)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN3))
            {
                \_SB.PCI0.PB2.VGA.AFN3 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN3))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
            }
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN4))
            {
                \_SB.PCI0.GP17.VGA.AFN4 (Arg0)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN4))
            {
                \_SB.PCI0.PB2.VGA.AFN4 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN4))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN4 (Arg0)
            }
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN5))
            {
                \_SB.PCI0.GP17.VGA.AFN5 ()
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN5))
            {
                \_SB.PCI0.PB2.VGA.AFN5 ()
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN5))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN5 ()
            }
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN6))
            {
                \_SB.PCI0.GP17.VGA.AFN6 ()
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN6))
            {
                \_SB.PCI0.PB2.VGA.AFN6 ()
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN6))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN6 ()
            }
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN7))
            {
                \_SB.PCI0.GP17.VGA.AFN7 (Arg0)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN7))
            {
                \_SB.PCI0.PB2.VGA.AFN7 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN7))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN7 (Arg0)
            }
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN8))
            {
                \_SB.PCI0.GP17.VGA.AFN8 ()
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN8))
            {
                \_SB.PCI0.PB2.VGA.AFN8 ()
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN8))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN8 ()
            }
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFNC))
            {
                \_SB.PCI0.GP17.VGA.AFNC (Arg0, Arg1)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFNC))
            {
                \_SB.PCI0.PB2.VGA.AFNC (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFNC))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
            }
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "AmdTable", 0x00000001)
{
    External (_SB_.PLTF, DeviceObj)

    Scope (\_SB.PLTF)
    {
        Name (_LPI, Package (0x04)  // _LPI: Low Power Idle States
        {
            0x00, 
            0x00, 
            0x01, 
            Package (0x0A)
            {
                0x000F4240, 
                0xC350, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "S0i3"
            }
        })
    }
}



SSDT13
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "Tpm2Tabl", 0x00009999)
{
    Scope (\_SB)
    {
        Device (TPM)
        {
            Name (_HID, "MSFT0101" /* TPM 2.0 Security Device */)  // _HID: Hardware ID
            Name (_CID, "MSFT0101" /* TPM 2.0 Security Device */)  // _CID: Compatible ID
            Name (_STR, Unicode ("TPM 2.0 Device"))  // _STR: Description String
            OperationRegion (SMIP, SystemIO, 0xB0, 0x01)
            Field (SMIP, ByteAcc, NoLock, Preserve)
            {
                IOB0,   8
            }

            Name (PFPF, 0x00000001)
            OperationRegion (DBG1, SystemIO, 0x80, 0x02)
            Field (DBG1, WordAcc, NoLock, Preserve)
            {
                P80L,   16
            }

            OperationRegion (TNVS, SystemMemory, 0xCC97C000, 0x2A)
            Field (TNVS, AnyAcc, NoLock, Preserve)
            {
                PPIN,   8, 
                PPIP,   32, 
                PPRP,   32, 
                PPRQ,   32, 
                PPRM,   32, 
                LPPR,   32, 
                FRET,   32, 
                MCIN,   8, 
                MCIP,   32, 
                MORD,   32, 
                MRET,   32, 
                UCRQ,   32
            }

            OperationRegion (PFCA, SystemMemory, 0xFDA10510, 0xF0)
            Field (PFCA, DWordAcc, NoLock, Preserve)
            {
                HRTB,   32, 
                ERRR,   32, 
                CLFG,   32, 
                STA1,   32, 
                AccessAs (QWordAcc, 0x00), 
                PFIN,   64, 
                AccessAs (DWordAcc, 0x00), 
                CMSZ,   32, 
                AccessAs (QWordAcc, 0x00), 
                CMDB,   64, 
                AccessAs (DWordAcc, 0x00), 
                RPSZ,   32, 
                AccessAs (QWordAcc, 0x00), 
                RESP,   64
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xCC362000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xCC366000,         // Address Base
                    0x00004000,         // Address Length
                    )
            })
            Method (PTS, 1, Serialized)
            {
                If (((Arg0 < 0x06) && (Arg0 > 0x03)))
                {
                    If (!(MORD & 0x10))
                    {
                        MCIP = 0x02
                        IOB0 = MCIN /* \_SB_.TPM_.MCIN */
                    }
                }

                Return (0x00)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PFPF == 0x01))
                {
                    Return (0x0F)
                }

                Return (0x00)
            }

            Method (HINF, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (0x00)
                    {
                        P80L = 0x10
                        Return (Buffer (0x01)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (0x01)
                    {
                        P80L = 0x11
                        Name (TPMV, Package (0x02)
                        {
                            0x01, 
                            Package (0x02)
                            {
                                0x01, 
                                0x20
                            }
                        })
                        If ((_STA () == 0x00))
                        {
                            Return (Package (0x01)
                            {
                                0x00
                            })
                        }

                        Return (TPMV) /* \_SB_.TPM_.HINF.TPMV */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Name (TPM2, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (TPM3, Package (0x03)
            {
                Zero, 
                Zero, 
                Zero
            })
            Method (TPPI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (0x00)
                    {
                        P80L = 0x20
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (0x01)
                    {
                        P80L = 0x21
                        Return ("1.3")
                    }
                    Case (0x02)
                    {
                        P80L = 0x22
                        PPRQ = DerefOf (Arg2 [0x00])
                        PPIP = 0x02
                        IOB0 = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x03)
                    {
                        P80L = 0x23
                        TPM2 [0x01] = PPRQ /* \_SB_.TPM_.PPRQ */
                        Return (TPM2) /* \_SB_.TPM_.TPM2 */
                    }
                    Case (0x04)
                    {
                        P80L = 0x24
                        Return (0x02)
                    }
                    Case (0x05)
                    {
                        P80L = 0x25
                        PPIP = 0x05
                        IOB0 = PPIN /* \_SB_.TPM_.PPIN */
                        TPM3 [0x01] = LPPR /* \_SB_.TPM_.LPPR */
                        TPM3 [0x02] = PPRP /* \_SB_.TPM_.PPRP */
                        Return (TPM3) /* \_SB_.TPM_.TPM3 */
                    }
                    Case (0x06)
                    {
                        P80L = 0x26
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        P80L = 0x27
                        PPIP = 0x07
                        PPRQ = DerefOf (Arg2 [0x00])
                        PPRM = 0x00
                        If ((PPRQ == 0x17))
                        {
                            PPRM = DerefOf (Arg2 [0x01])
                        }

                        IOB0 = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x08)
                    {
                        P80L = 0x28
                        PPIP = 0x08
                        PPRQ = DerefOf (Arg2 [0x00])
                        IOB0 = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (0x01)
            }

            Method (TMCI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (0x00)
                    {
                        P80L = 0x30
                        Return (Buffer (0x01)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (0x01)
                    {
                        P80L = 0x31
                        MORD = DerefOf (Arg2 [0x00])
                        MCIP = 0x01
                        IOB0 = MCIN /* \_SB_.TPM_.MCIN */
                        Return (MRET) /* \_SB_.TPM_.MRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (0x01)
            }

            Method (TPMS, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (0x00)
                    {
                        Return (Buffer (0x01)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (0x01)
                    {
                        P80L = 0x42
                        Return (0x00)
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (0x01)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
                {
                    P80L = 0x50
                    Return (HINF (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    P80L = 0x51
                    Return (TPPI (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    P80L = 0x52
                    Return (TMCI (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
                {
                    P80L = 0x53
                    Return (TPMS (Arg1, Arg2, Arg3))
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT14
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "AmdTable", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.MACO, BuffFieldObj)
    External (_SB_.PCI0.PB2_, DeviceObj)
    External (_SB_.PCI0.PB2_.SWUS, DeviceObj)
    External (_SB_.PCI0.PB2_.SWUS.SWDS, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M010, MethodObj)    // 2 Arguments
    External (M013, MethodObj)    // 4 Arguments
    External (M014, MethodObj)    // 5 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M018, MethodObj)    // 7 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M021, MethodObj)    // 4 Arguments
    External (M023, MethodObj)    // 3 Arguments
    External (M024, MethodObj)    // 3 Arguments
    External (M025, MethodObj)    // 4 Arguments
    External (M026, MethodObj)    // 3 Arguments
    External (M027, MethodObj)    // 3 Arguments
    External (M028, MethodObj)    // 4 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M04A, MethodObj)    // 2 Arguments
    External (M04B, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M111, MethodObj)    // 2 Arguments
    External (M112, MethodObj)    // 2 Arguments
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M275, MethodObj)    // 2 Arguments
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M402, MethodObj)    // 2 Arguments
    External (M403, MethodObj)    // 3 Arguments
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M429, MethodObj)    // 7 Arguments
    External (M430, MethodObj)    // 3 Arguments
    External (M444, FieldUnitObj)

    Scope (\_SB.PCI0.PB2)
    {
        Name (M236, Buffer (0x0C)
        {
            /* 0000 */  0x24, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,  // $.......
            /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M266, 0x00)
        Name (M267, 0x00)
        Name (M268, 0x00)
        Name (M269, 0x00)
        Name (M270, 0x00)
        Name (M271, 0x00)
        Name (M407, 0x01)
        Name (M442, 0x00010000)
        Name (M443, 0x00)
        Name (M434, 0x2711)
        Name (M350, Buffer (0x18)
        {
            /* 0000 */  0x03, 0x00, 0x10, 0x00, 0x00, 0x01, 0x01, 0x00,  // ........
            /* 0008 */  0x00, 0xFC, 0x00, 0xFD, 0x01, 0x00, 0xF1, 0x01,  // ........
            /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00   // ........
        })
        Name (M351, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (M352, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (M353, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x10, 0x00, 0x0A, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x0C, 0x00, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00,  // ..... ..
            /* 0010 */  0xDE, 0x10, 0x60, 0x25, 0x00, 0x00, 0x00, 0x00   // ..`%....
        })
        Name (M354, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (M355, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (M356, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (M357, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (M358, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (M371, 5, NotSerialized)
        {
            CreateDWordField (Arg3, 0x00, M365)
            CreateDWordField (Arg3, 0x04, M366)
            CreateDWordField (Arg3, 0x08, M367)
            CreateDWordField (Arg3, 0x0C, M368)
            CreateDWordField (Arg3, 0x10, M369)
            CreateDWordField (Arg3, 0x14, M370)
            If ((Arg4 < 0x02))
            {
                If ((Arg4 == 0x00))
                {
                    M365 = M019 (Arg0, Arg1, Arg2, 0x04)
                    M366 = M019 (Arg0, Arg1, Arg2, 0x18)
                    M367 = M019 (Arg0, Arg1, Arg2, 0x20)
                    M368 = M019 (Arg0, Arg1, Arg2, 0x24)
                    M369 = M019 (Arg0, Arg1, Arg2, 0x28)
                    M370 = M019 (Arg0, Arg1, Arg2, 0x2C)
                }
                Else
                {
                    M365 = M019 (Arg0, Arg1, Arg2, 0x04)
                    M366 = M019 (Arg0, Arg1, Arg2, 0x18)
                    M367 = M019 (Arg0, Arg1, Arg2, 0x1C)
                    M368 = M019 (Arg0, Arg1, Arg2, 0x24)
                    M369 = M019 (Arg0, Arg1, Arg2, 0x00)
                    M370 = Arg0
                }
            }
            Else
            {
                If (((Arg4 & 0x01) == 0x00))
                {
                    M020 (Arg0, Arg1, Arg2, 0x18, M366)
                    M020 (Arg0, Arg1, Arg2, 0x20, M367)
                    M020 (Arg0, Arg1, Arg2, 0x24, M368)
                    M020 (Arg0, Arg1, Arg2, 0x28, M369)
                    M020 (Arg0, Arg1, Arg2, 0x2C, M370)
                }
                Else
                {
                    M020 (Arg0, Arg1, Arg2, 0x18, M366)
                    M020 (Arg0, Arg1, Arg2, 0x1C, M367)
                    M020 (Arg0, Arg1, Arg2, 0x24, M368)
                }

                If (((Arg4 & 0x04) == 0x04))
                {
                    M020 (Arg0, Arg1, Arg2, 0x04, (M365 & 0x06FFFFFF))
                }
                Else
                {
                    Local0 = M019 (Arg0, Arg1, Arg2, 0x04)
                    M020 (Arg0, Arg1, Arg2, 0x04, ((Local0 & 0x06FFFFF8) | 0x02))
                }
            }
        }

        Method (M372, 0, NotSerialized)
        {
            CreateDWordField (M353, 0x10, M362)
            Local0 = 0x00
            If (((M362 & 0xFFDF) == 0x1002))
            {
                Local1 = (M362 >> 0x10)
                Local1 &= 0xFFFF
                If (((Local1 >= 0x67C0) && (Local1 <= 0x67DF)))
                {
                    Local0 = 0x10
                }
                ElseIf (((Local1 >= 0x67E0) && (Local1 <= 0x67FF)))
                {
                    Local0 = 0x11
                }
                ElseIf (((Local1 >= 0x6900) && (Local1 <= 0x695F)))
                {
                    Local0 = 0x12
                }
                ElseIf (((Local1 >= 0x6980) && (Local1 <= 0x699F)))
                {
                    Local0 = 0x13
                }
                ElseIf (((Local1 >= 0x6860) && (Local1 <= 0x687F)))
                {
                    Local0 = 0x20
                }
                ElseIf (((Local1 >= 0x69A0) && (Local1 <= 0x69BF)))
                {
                    Local0 = 0x21
                }
                ElseIf (((Local1 >= 0x7310) && (Local1 <= 0x731F)))
                {
                    Local0 = 0x22
                }
                ElseIf ((Local1 == 0x7330))
                {
                    Local0 = 0x22
                }
                ElseIf (((Local1 >= 0x7340) && (Local1 <= 0x734F)))
                {
                    Local0 = 0x23
                }
                ElseIf (((Local1 >= 0x73A0) && (Local1 <= 0x73BF)))
                {
                    Local0 = 0x24
                }
                ElseIf (((Local1 >= 0x73C0) && (Local1 <= 0x73DF)))
                {
                    Local0 = 0x26
                }
                ElseIf (((Local1 >= 0x73E0) && (Local1 <= 0x73FF)))
                {
                    Local0 = 0x27
                }
                ElseIf (((Local1 >= 0x7420) && (Local1 <= 0x743F)))
                {
                    Local0 = 0x28
                }
                Else
                {
                    Local0 = 0x00
                }
            }
            ElseIf (((M362 & 0xFFFF) == 0x10DE))
            {
                Local0 = 0xC0
            }

            Return (Local0)
        }

        Method (M373, 3, NotSerialized)
        {
            CreateDWordField (M350, 0x04, M359)
            CreateDWordField (M351, 0x04, M360)
            CreateDWordField (M352, 0x04, M361)
            M354 = M358 /* \_SB_.PCI0.PB2_.M358 */
            M355 = M358 /* \_SB_.PCI0.PB2_.M358 */
            M356 = M358 /* \_SB_.PCI0.PB2_.M358 */
            M357 = M358 /* \_SB_.PCI0.PB2_.M358 */
            M371 (Arg0, Arg1, Arg2, M354, 0x00)
            M020 (Arg0, Arg1, Arg2, 0x18, M359)
            Local0 = (M359 >> 0x08)
            Local0 &= 0xFF
            If ((M360 != 0x00))
            {
                M371 (Local0, 0x00, 0x00, M355, 0x00)
                M020 (Local0, 0x00, 0x00, 0x18, M360)
                Local0 = (M360 >> 0x08)
                Local0 &= 0xFF
            }

            If (((M360 != 0x00) && (M361 != 0x00)))
            {
                M371 (Local0, 0x00, 0x00, M356, 0x00)
                M020 (Local0, 0x00, 0x00, 0x18, M361)
                Local0 = (M361 >> 0x08)
                Local0 &= 0xFF
            }

            M371 (Local0, 0x00, 0x00, M357, 0x01)
        }

        Method (M374, 3, NotSerialized)
        {
            CreateDWordField (M350, 0x04, M359)
            CreateDWordField (M351, 0x04, M360)
            CreateDWordField (M352, 0x04, M361)
            M371 (Arg0, Arg1, Arg2, M350, 0x02)
            Local0 = (M359 >> 0x08)
            Local0 &= 0xFF
            If ((M360 != 0x00))
            {
                M371 (Local0, 0x00, 0x00, M351, 0x02)
                Local0 = (M360 >> 0x08)
                Local0 &= 0xFF
            }

            If (((M360 != 0x00) && (M361 != 0x00)))
            {
                M371 (Local0, 0x00, 0x00, M352, 0x02)
                Local0 = (M361 >> 0x08)
                Local0 &= 0xFF
            }

            M371 (Local0, 0x00, 0x00, M353, 0x03)
        }

        Method (M375, 0, Serialized)
        {
            CreateQWordField (M353, 0x04, M363)
            CreateDWordField (M353, 0x0C, M364)
            Local0 = M372 ()
            If (((Local0 >= 0x00) && (Local0 <= 0x0F)))
            {
                M232 (M097, 0x00, 0x10)
            }
            ElseIf (((Local0 >= 0x10) && (Local0 <= 0x1F)))
            {
                Local2 = M013 ((M364 & 0xFFFFFFF0), 0x5418, 0x00, 0x20)
                M014 ((M364 & 0xFFFFFFF0), 0x5418, 0x00, 0x20, (Local2 & 0xFFFFFFFD))
            }
            ElseIf (((Local0 >= 0x20) && (Local0 <= 0xBF)))
            {
                Local2 = M013 ((M364 & 0xFFFFFFF0), 0x34E0, 0x00, 0x20)
                M014 ((M364 & 0xFFFFFFF0), 0x34E0, 0x00, 0x20, (Local2 & 0xEFFFFFFF))
            }
        }

        Method (M424, 0, Serialized)
        {
            CreateDWordField (M353, 0x0C, M364)
            Local0 = M372 ()
            If (((Local0 >= 0x22) && (Local0 <= 0xBF)))
            {
                Local0 = (M364 & 0xFFFFFFF0)
                Local1 = M013 (Local0, 0x0005818C, 0x00, 0x20)
                Local2 = 0x4EEA
                While (((Local2 > 0x00) && ((Local1 & 0x80000000) != 0x80000000)))
                {
                    Local2 = (Local2 - 0x01)
                    Stall (0x63)
                    Local1 = M013 (Local0, 0x0005818C, 0x00, 0x20)
                }

                M014 (Local0, 0x0005818C, 0x00, 0x20, 0x01000000)
                Local1 = M013 (Local0, 0x0005818C, 0x00, 0x20)
                Local2 = 0x4EEA
                While (((Local2 > 0x00) && ((Local1 & 0x80000000) != 0x80000000)))
                {
                    Local2 = (Local2 - 0x01)
                    Stall (0x63)
                    Local1 = M013 (Local0, 0x0005818C, 0x00, 0x20)
                }

                If (((Local2 > 0x00) && ((Local1 & 0xFFFF) == 0x00)))
                {
                    If ((M013 (Local0, 0x00058190, 0x00, 0x20) == 0x01))
                    {
                        M014 (Local0, 0x0005818C, 0x00, 0x20, 0x00400000)
                        Local1 = M013 (Local0, 0x0005818C, 0x00, 0x20)
                        Local2 = 0x4EEA
                        While (((Local2 > 0x00) && ((Local1 & 0x80000000) != 0x80000000)))
                        {
                            Local2 = (Local2 - 0x01)
                            Stall (0x63)
                            Local1 = M013 (Local0, 0x0005818C, 0x00, 0x20)
                        }
                    }
                }
            }
        }

        Method (M376, 0, Serialized)
        {
            CreateByteField (M236, 0x03, M245)
            CreateDWordField (M236, 0x04, M246)
            CreateDWordField (M236, 0x08, M247)
            Local0 = M372 ()
            If (((Local0 >= 0x00) && (Local0 <= 0xBF)))
            {
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                M020 (M245, 0x00, 0x00, 0x4C, M246)
                Local1 = M019 (M245, 0x00, 0x01, 0x00)
                If (((Local1 != Local2) && (M247 != Local2)))
                {
                    M020 (M245, 0x00, 0x01, 0x4C, M247)
                }
            }
        }

        Method (M377, 3, NotSerialized)
        {
            CreateByteField (M236, 0x03, M245)
            CreateDWordField (M350, 0x04, M359)
            CreateDWordField (M351, 0x04, M360)
            CreateDWordField (M352, 0x04, M361)
            M371 (M245, 0x00, 0x00, M357, 0x05)
            If (((M360 != 0x00) && (M361 != 0x00)))
            {
                Local0 = (M360 >> 0x08)
                Local0 &= 0xFF
                M371 (Local0, 0x00, 0x00, M356, 0x04)
            }

            If ((M360 != 0x00))
            {
                Local0 = (M359 >> 0x08)
                Local0 &= 0xFF
                M371 (Local0, 0x00, 0x00, M355, 0x04)
            }

            M371 (Arg0, Arg1, Arg2, M354, 0x04)
        }

        Method (M439, 3, NotSerialized)
        {
            Local6 = 0x7FFFFFFF
            Local6 |= 0x80000000
            Local1 = M019 (Arg0, Arg1, Arg2, 0x54)
            M020 (Arg0, Arg1, Arg2, 0x54, (Local1 & 0xFFFF7FFC))
            Local2 = M017 (Arg0, Arg1, Arg2, 0x19, 0x00, 0x08)
            Local4 = 0x01
            Local5 = 0x28
            While ((Local4 && Local5))
            {
                Local0 = M019 (Local2, 0x00, 0x00, 0x00)
                If ((Local0 != Local6))
                {
                    Local0 = M372 ()
                    If (((Local0 >= 0x00) && (Local0 <= 0xBF)))
                    {
                        M373 (Arg0, Arg1, Arg2)
                        M374 (Arg0, Arg1, Arg2)
                        If ((M097 != 0x00))
                        {
                            M375 ()
                        }

                        If ((M443 != 0x00))
                        {
                            M376 ()
                        }

                        If ((((M049 (M128, 0x66) >> 0x01) & 0x01) == 0x01))
                        {
                            M424 ()
                        }

                        M377 (Arg0, Arg1, Arg2)
                    }

                    Local4 = 0x00
                }
                Else
                {
                    Sleep (0x19)
                    Local5--
                }
            }

            M020 (Arg0, Arg1, Arg2, 0x54, (Local1 & 0xFFFF7FFF))
        }

        Mutex (EEBC, 0x00)
        Method (M241, 1, NotSerialized)
        {
            Acquire (EEBC, 0xFFFF)
            CreateByteField (M236, 0x00, M242)
            CreateByteField (M236, 0x01, M243)
            CreateByteField (M236, 0x02, M244)
            CreateByteField (M236, 0x03, M245)
            CreateDWordField (M236, 0x04, M246)
            CreateDWordField (M236, 0x08, M247)
            Name (M272, 0x00)
            Name (M273, 0x00)
            Name (M274, 0x00)
            Name (M400, 0x00)
            Name (M427, 0x00)
            Name (M431, 0x00)
            If ((M085 >= 0x08))
            {
                M400 = ((M049 (M128, 0x66) >> 0x00) & 0x01)
            }

            M273 = ((M049 (M128, 0x65) >> 0x05) & 0x01)
            M274 = ((M049 (M128, 0x65) >> 0x06) & 0x01)
            M427 = ((M049 (M128, 0x66) >> 0x02) & 0x01)
            M431 = ((M049 (M128, 0x66) >> 0x03) & 0x01)
            If ((M273 != 0x01))
            {
                Local7 = Buffer (0x05) {}
                CreateWordField (Local7, 0x00, M197)
                CreateField (Local7, 0x10, 0x03, M200)
                CreateField (Local7, 0x13, 0x05, M199)
                CreateByteField (Local7, 0x03, M198)
                CreateByteField (Local7, 0x04, M201)
                M197 = 0x05
                M198 = 0x00
                Local0 = M243 /* \_SB_.PCI0.PB2_.M241.M243 */
                M199 = Local0
                Local0 = M244 /* \_SB_.PCI0.PB2_.M241.M244 */
                M200 = Local0
            }

            Name (M447, 0x00)
            If (((M085 == 0x09) || (M085 == 0x0A)))
            {
                M447 = 0x01
            }
            ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
            {
                M447 = 0x01
            }
            ElseIf ((M085 == 0x0F))
            {
                M447 = 0x01
            }

            Local3 = Buffer (0x08) {}
            CreateWordField (Local3, 0x00, M254)
            CreateByteField (Local3, 0x02, M255)
            CreateDWordField (Local3, 0x03, M256)
            M254 = 0x07
            M255 = 0x10
            M443 = M049 (M133, 0x01E0)
            M442 = M04B (M133, 0x01DC)
            If ((M442 == 0x00))
            {
                If ((\_SB.PCI0.PB2.M434 <= 0x2710))
                {
                    M442 = \_SB.PCI0.PB2.M434
                    M256 = M442 /* \_SB_.PCI0.PB2_.M442 */
                    Local0 = M255 /* \_SB_.PCI0.PB2_.M241.M255 */
                    M255 = 0x12
                    \_SB.ALIB (0x0C, Local3)
                    M255 = Local0
                }
            }

            If ((M431 == 0x01))
            {
                M439 (0x00, M243, M244)
                Release (EEBC)
                Return (Zero)
            }

            M266 = M04A (M133, 0x01D4)
            M267 = M04A (M133, 0x01D6)
            M268 = M049 (M133, 0x01D8)
            M269 = M049 (M133, 0x01D9)
            M270 = M049 (M133, 0x01DA)
            M271 = M049 (M133, 0x01DB)
            Local0 = ((M084 + 0x1502) + ((M266 & 0xFF) * 0x04
                ))
            OperationRegion (VAMM, SystemMemory, Local0, 0x01)
            Field (VAMM, ByteAcc, NoLock, Preserve)
            {
                P011,   8
            }

            Local0 = ((M084 + 0x1502) + ((M267 & 0xFF) * 0x04
                ))
            OperationRegion (VANN, SystemMemory, Local0, 0x01)
            Field (VANN, ByteAcc, NoLock, Preserve)
            {
                P141,   8
            }

            If ((M274 == 0x01))
            {
                Local6 = 0x01
            }
            Else
            {
                Local6 = M113 (M242)
            }

            M023 (0x00, M243, M244)
            If ((M275 (M242, Arg0) == 0x00))
            {
                If ((Arg0 && Local6))
                {
                    M000 (0x9D)
                    If (CondRefOf (\_SB.MACO))
                    {
                        If ((\_SB.MACO == 0x01))
                        {
                            If ((M267 < 0x0100))
                            {
                                P141 = 0xC4
                            }
                            Else
                            {
                                M010 (M267, 0x01)
                            }

                            Sleep (M270)
                            M112 (M242, 0x01)
                            Sleep (M271)
                            If ((M266 < 0x0100))
                            {
                                P011 = 0x84
                            }
                            Else
                            {
                                M010 (M266, 0x00)
                            }

                            \_SB.MACO = 0x00
                        }
                        Else
                        {
                            M112 (M242, 0x00)
                            M111 (M242, 0x01)
                            Sleep (0x20)
                            M112 (M242, 0x02)
                            M112 (M242, 0x01)
                            Sleep (0x64)
                        }
                    }
                    Else
                    {
                        M112 (M242, 0x00)
                        M111 (M242, 0x01)
                        Sleep (0x20)
                        M112 (M242, 0x02)
                        M112 (M242, 0x01)
                        Sleep (0x64)
                    }

                    If ((M400 == 0x01))
                    {
                        M403 (M243, M244, 0x01)
                    }

                    M000 (0x9E)
                    M272 = 0x01
                    If ((M273 == 0x01))
                    {
                        If ((M400 == 0x00))
                        {
                            Local1 = M017 (0x00, M243, M244, 0x68, 0x00, 0x08)
                            M018 (0x00, M243, M244, 0x68, 0x00, 0x08, (Local1 & 0xEF))
                            Sleep (0x18)
                            Local1 = M025 (0x00, M243, M244, 0x00)
                        }

                        Local1 = 0x00
                        Local2 = 0x13BB
                        While ((((Local1 & 0x28) != 0x20) && (Local2 > 0x00)))
                        {
                            M000 (0xC0)
                            Local1 = M017 (0x00, M243, M244, 0x6B, 0x00, 0x08)
                            Local2 = (Local2 - 0x01)
                            Stall (0x63)
                        }
                    }
                    Else
                    {
                        Sleep (0x14)
                        M201 = 0x01
                        Local6 = \_SB.ALIB (0x06, Local7)
                        If ((M085 < 0x08))
                        {
                            M272 = 0x00
                            Local2 = 0x00
                            While ((Local2 < 0x0F))
                            {
                                M023 (0x00, M243, M244)
                                Local4 = 0x01
                                Local5 = 0xC8
                                While ((Local4 && Local5))
                                {
                                    Local0 = M021 (0x00, M243, M244, 0xA5)
                                    Local0 &= 0x7F
                                    If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                                    {
                                        Local4 = 0x00
                                    }
                                    Else
                                    {
                                        Sleep (0x05)
                                        Local5--
                                    }
                                }

                                If (!Local4)
                                {
                                    Local5 = M024 (0x00, M243, M244)
                                    If (Local5)
                                    {
                                        M026 (0x00, M243, M244)
                                        Sleep (0x05)
                                        Local2++
                                    }
                                    Else
                                    {
                                        Local0 = 0x00
                                        If ((M025 (0x00, M243, M244, 0x00) == Ones))
                                        {
                                            Local0 = 0x01
                                        }

                                        If (Local0)
                                        {
                                            M272 = 0x01
                                            Local2 = 0x10
                                        }
                                        Else
                                        {
                                            M272 = 0x00
                                            Local2 = 0x10
                                        }
                                    }
                                }
                                Else
                                {
                                    Local2 = 0x10
                                }
                            }

                            If (!M272)
                            {
                                M000 (0x9F)
                                Local1 = M019 (M245, 0x00, 0x00, 0x00)
                                Sleep (0x0A)
                                Local4 = 0x01
                                Local5 = 0x05
                                While ((Local4 && Local5))
                                {
                                    Local0 = M021 (0x00, M243, M244, 0xA5)
                                    Local0 &= 0x7F
                                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                                    {
                                        Local4 = 0x00
                                    }
                                    Else
                                    {
                                        Local0 = M019 (M245, 0x00, 0x00, 0x00)
                                        Sleep (0x05)
                                        Local5--
                                    }
                                }

                                M201 = 0x00
                                \_SB.ALIB (0x06, Local7)
                            }
                        }
                    }

                    If ((M400 == 0x01))
                    {
                        M403 (M243, M244, 0x00)
                    }

                    M000 (0xC1)
                    If ((M272 == 0x01))
                    {
                        M439 (0x00, M243, M244)
                    }

                    If ((M447 == 0x01))
                    {
                        Local0 = M372 ()
                        If (((Local0 >= 0x00) && (Local0 <= 0xBF)))
                        {
                            M256 = 0x01
                            \_SB.ALIB (0x0C, Local3)
                        }
                    }

                    \_SB.PCI0.PB2.M407 = 0x01
                    M000 (0xA0)
                }
                Else
                {
                    M000 (0xA1)
                    \_SB.PCI0.PB2.M407 = ((M049 (M128, 0x65) >> 0x07) & 0x01)
                    If ((M447 == 0x01))
                    {
                        Local0 = M372 ()
                        If (((Local0 >= 0x00) && (Local0 <= 0xBF)))
                        {
                            M256 = 0x00
                            \_SB.ALIB (0x0C, Local3)
                        }
                    }

                    If ((M273 == 0x01))
                    {
                        Local1 = M019 (0x00, M243, M244, 0x54)
                        M020 (0x00, M243, M244, 0x54, (Local1 & 0xFFFF7FFC))
                        Sleep (0x01)
                        Local2 = M017 (0x00, M243, M244, 0x19, 0x00, 0x08)
                        M028 (Local2, 0x00, 0x00, 0x00)
                        Local3 = M027 (Local2, 0x00, 0x00)
                        M020 (0x00, M243, M244, 0x54, (Local1 & 0xFFFF7FFF))
                        If ((M400 == 0x00))
                        {
                            Local1 = M017 (0x00, M243, M244, 0x68, 0x00, 0x08)
                            M018 (0x00, M243, M244, 0x68, 0x00, 0x08, (Local1 | 0x10))
                            Sleep (0x18)
                        }
                    }
                    Else
                    {
                        Local1 = M019 (0x00, M243, M244, 0x54)
                        M020 (0x00, M243, M244, 0x54, (Local1 & 0xFFFF7FFC))
                        M201 = 0x00
                        \_SB.ALIB (0x06, Local7)
                        M020 (0x00, M243, M244, 0x54, (Local1 & 0xFFFF7FFF))
                    }

                    If ((M427 == 0x01))
                    {
                        Local1 = M430 (0x00, M243, M244)
                        Local1 &= 0x0F
                        If ((Local1 > 0x01))
                        {
                            Local4 = M025 (0x00, M243, M244, 0x01)
                        }
                    }

                    If ((M400 == 0x01))
                    {
                        M402 (M243, M244)
                    }

                    If ((M442 > 0x00))
                    {
                        Divide (M442, 0x03E8, Local5, Local4)
                        If ((Local4 >= 0x01))
                        {
                            Sleep (Local4)
                        }

                        Divide (Local5, 0x63, Local5, Local4)
                        While ((Local4 >= 0x01))
                        {
                            Local4--
                            Stall (0x63)
                        }

                        If ((Local5 >= 0x01))
                        {
                            Stall (Local5)
                        }
                    }

                    M000 (0xA2)
                    If (CondRefOf (\_SB.MACO))
                    {
                        If ((\_SB.MACO == 0x01))
                        {
                            If ((M266 < 0x0100))
                            {
                                P011 = 0xC4
                            }
                            Else
                            {
                                M010 (M266, 0x01)
                            }

                            Stall (M268)
                            If ((M267 < 0x0100))
                            {
                                P141 = 0x84
                            }
                            Else
                            {
                                M010 (M267, 0x00)
                            }

                            Sleep (M269)
                            M112 (M242, 0x00)
                        }
                        Else
                        {
                            M112 (M242, 0x00)
                            Sleep (0x0A)
                            M111 (M242, 0x00)
                        }
                    }
                    Else
                    {
                        M112 (M242, 0x00)
                        Sleep (0x0A)
                        M111 (M242, 0x00)
                    }

                    If ((M427 == 0x01))
                    {
                        If ((Local1 > 0x01))
                        {
                            M429 (0x00, M243, M244, 0x88, 0x00, 0x04, Local1)
                        }
                    }

                    M023 (0x00, M243, M244)
                    If ((M400 == 0x00))
                    {
                        Local1 = M019 (M245, 0x00, 0x00, 0x00)
                        Sleep (0x0A)
                    }

                    If ((M085 < 0x08))
                    {
                        Local4 = 0x01
                        Local5 = 0x05
                        While ((Local4 && Local5))
                        {
                            Local0 = M021 (0x00, M243, M244, 0xA5)
                            Local0 &= 0x7F
                            If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                            {
                                Local4 = 0x00
                            }
                            Else
                            {
                                Local1 = M019 (M245, 0x00, 0x00, 0x00)
                                Sleep (0x05)
                                Local5--
                            }
                        }
                    }

                    M000 (0xA3)
                    M272 = 0x02
                }
            }

            Release (EEBC)
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "Nvddable", 0x00000001)
{
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.LPC0.H_EC.BPWM, UnknownObj)
    External (_SB_.PCI0.LPC0.H_EC.CAC1, UnknownObj)
    External (_SB_.PCI0.LPC0.H_EC.CTGP, IntObj)
    External (_SB_.PCI0.LPC0.H_EC.ECRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPC0.H_EC.ECWR, UnknownObj)
    External (_SB_.PCI0.LPC0.H_EC.GPPS, UnknownObj)
    External (_SB_.PCI0.LPC0.H_EC.GPUF, UnknownObj)
    External (_SB_.PCI0.LPC0.H_EC.GPUO, UnknownObj)
    External (_SB_.PCI0.LPC0.H_EC.ITSM, IntObj)
    External (_SB_.PCI0.LPC0.H_EC.LSTE, UnknownObj)
    External (_SB_.PCI0.LPC0.H_EC.PAWT, IntObj)
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)
    External (DGDS, UnknownObj)
    External (DGMD, UnknownObj)
    External (EDID, UnknownObj)
    External (EDOR, UnknownObj)
    External (EDUD, UnknownObj)
    External (FHDN, UnknownObj)
    External (GPUT, UnknownObj)
    External (H264, UnknownObj)
    External (LTGP, UnknownObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M009, MethodObj)    // 1 Arguments
    External (M010, MethodObj)    // 2 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M402, MethodObj)    // 2 Arguments
    External (M403, MethodObj)    // 3 Arguments
    External (PANT, UnknownObj)
    External (PPAB, UnknownObj)
    External (PTPW, UnknownObj)

    OperationRegion (BTWF, SystemMemory, 0xFC022408, 0xFF)
    Field (BTWF, DWordAcc, NoLock, Preserve)
    {
        HWAC,   32
    }

    Name (CBPW, 0x32)
    Name (CPSF, 0x02)
    Scope (\_SB.PCI0.GPP0)
    {
        Scope (\)
        {
            Name (DGBA, 0xF8009000)
            Name (REST, 0x45)
            Name (PWEN, 0x55)
            Name (PWGD, 0x54)
        }

        Device (PEGP)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_STA, 0x0F)  // _STA: Status
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }
        }

        Device (NHDA)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }
        }

        OperationRegion (RPCX, SystemMemory, DGBA, 0x1000)
        Field (RPCX, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            CMDR,   8, 
            Offset (0x19), 
            PRBN,   8, 
            Offset (0x54), 
            D0ST,   2, 
            Offset (0x62), 
            CEDR,   1, 
            Offset (0x68), 
            ASPM,   2, 
                ,   2, 
            LNKD,   1, 
            Offset (0x80), 
            Offset (0x81), 
                ,   2, 
            LREN,   1
        }

        Method (SGPC, 1, NotSerialized)
        {
            If ((Arg0 == One))
            {
                M000 (0x9D)
                Sleep (0x05)
                If ((M009 (PWEN) == One))
                {
                    Return (Zero)
                }

                M010 (REST, Zero)
                Sleep (One)
                M010 (PWEN, One)
                Sleep (0x07)
                M010 (REST, One)
                Sleep (0x64)
                LNKD = Zero
                Local6 = 0x7FFFFFFF
                Local6 |= 0x80000000
                Local2 = M017 (Zero, One, One, 0x19, Zero, 0x08)
                Local1 = M019 (Zero, One, One, 0x54)
                M020 (Zero, One, One, 0x54, (Local1 & 0xFFFF7FFC))
                Local4 = One
                Local5 = 0x28
                While ((Local4 && Local5))
                {
                    Local0 = M019 (Local2, Zero, Zero, Zero)
                    If ((Local0 != Local6))
                    {
                        Local4 = Zero
                    }
                    Else
                    {
                        Sleep (0x05)
                        Local5--
                    }
                }

                LREN = \_SB.PCI0.GPP0.PEGP.LTRE
                CEDR = One
                M020 (Zero, One, One, 0x54, (Local1 & 0xFFFF7FFF))
                M000 (0xA0)
            }
            Else
            {
                M000 (0xA1)
                M010 (PWEN, One)
                \_SB.PCI0.GPP0.PEGP.LTRE = LREN /* \_SB_.PCI0.GPP0.LREN */
                LNKD = One
                M010 (REST, Zero)
                Sleep (One)
                M010 (PWEN, Zero)
                Sleep (0x64)
                M000 (0xA3)
            }
        }

        PowerResource (PG00, 0x00, 0x0000)
        {
            Name (M239, 0x01)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (M239) /* \_SB_.PCI0.GPP0.PG00.M239 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If ((M239 == Zero))
                {
                    If ((\_SB.PCI0.TDGC == One))
                    {
                        If ((\_SB.PCI0.DGCX == 0x03))
                        {
                            \_SB.PCI0.GC6O ()
                        }
                        ElseIf ((\_SB.PCI0.DGCX == 0x04))
                        {
                            \_SB.PCI0.GC6O ()
                        }

                        \_SB.PCI0.TDGC = Zero
                        \_SB.PCI0.DGCX = Zero
                    }
                    Else
                    {
                        SGPC (One)
                        CMDR = 0x07
                        D0ST = Zero
                        \_SB.PCI0.GPP0.PEGP.SSSV = 0x380117AA
                    }
                }

                M239 = One
                If ((H264 == 0x01))
                {
                    HWAC |= 0x30000000
                }

                If ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ECWR)) & 0x01)) {}
                ElseIf (((DGDS == 0x00) && (PANT == 0x01)))
                {
                    \_SB.PCI0.LPC0.H_EC.GPUO = One
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If ((M239 == One))
                {
                    If ((\_SB.PCI0.TDGC == One))
                    {
                        CreateField (\_SB.PCI0.TGPC, Zero, 0x03, GUPC)
                        If ((ToInteger (GUPC) == One))
                        {
                            \_SB.PCI0.GC6I ()
                        }
                        ElseIf ((ToInteger (GUPC) == 0x02))
                        {
                            \_SB.PCI0.GC6I ()
                        }
                    }
                    Else
                    {
                        SGPC (Zero)
                    }
                }

                M239 = Zero
                If ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ECWR)) & 0x01)) {}
                ElseIf (((DGDS == 0x00) && (PANT == 0x01)))
                {
                    \_SB.PCI0.LPC0.H_EC.GPUF = One
                    M010 (0x4C, 0x00)
                    \_SB.PCI0.LPC0.H_EC.GPPS = Zero
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PG00
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            PG00
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PG00
        })
        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
    }

    Scope (\_SB.PCI0)
    {
        Method (RTL2, 0, NotSerialized)
        {
            M402 (One, One)
        }

        Method (RTL0, 0, NotSerialized)
        {
            M403 (One, One, One)
            Local1 = Zero
            While (((Local1 & 0x28) != 0x20))
            {
                Local1 = M017 (Zero, One, One, 0x6B, Zero, 0x08)
                Stall (0x63)
            }

            M403 (One, One, Zero)
        }

        Name (TGPC, Buffer (0x04)
        {
             0x00                                             // .
        })
        Name (TDGC, Zero)
        Name (DGCX, Zero)
        Name (L23B, Buffer (0x05) {})
        Method (GC6I, 0, Serialized)
        {
            Sleep (0x14)
            \_SB.PCI0.RTL2 ()
            Sleep (0x14)
            M010 (REST, Zero)
            Sleep (0x14)
        }

        Method (GC6O, 0, Serialized)
        {
            Sleep (0x14)
            M010 (REST, One)
            \_SB.PCI0.RTL0 ()
            Sleep (0x14)
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Method (NVJT, 4, Serialized)
        {
            Debug = "------- NV JT DSM --------"
            If ((ToInteger (Arg1) < 0x0100))
            {
                Return (0x80000001)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Debug = "   JT fun0 JT_FUNC_SUPPORT"
                    Return (Buffer (0x04)
                    {
                         0x1B, 0x00, 0x00, 0x00                           // ....
                    })
                }
                Case (One)
                {
                    Debug = "   JT fun1 JT_FUNC_CAPS"
                    Name (JTCA, Buffer (0x04)
                    {
                         0x00                                             // .
                    })
                    CreateField (JTCA, Zero, One, JTEN)
                    CreateField (JTCA, One, 0x02, SREN)
                    CreateField (JTCA, 0x03, 0x02, PLPR)
                    CreateField (JTCA, 0x05, One, SRPR)
                    CreateField (JTCA, 0x06, 0x02, FBPR)
                    CreateField (JTCA, 0x08, 0x02, GUPR)
                    CreateField (JTCA, 0x0A, One, GC6R)
                    CreateField (JTCA, 0x0B, One, PTRH)
                    CreateField (JTCA, 0x0D, One, MHYB)
                    CreateField (JTCA, 0x0E, One, RPCL)
                    CreateField (JTCA, 0x0F, 0x02, GC6V)
                    CreateField (JTCA, 0x11, One, GEIS)
                    CreateField (JTCA, 0x12, One, GSWS)
                    CreateField (JTCA, 0x14, 0x0C, JTRV)
                    JTEN = One
                    GC6R = Zero
                    RPCL = One
                    SREN = One
                    FBPR = Zero
                    MHYB = One
                    GC6V = 0x02
                    JTRV = 0x0200
                    Return (JTCA) /* \_SB_.PCI0.GPP0.PEGP.NVJT.JTCA */
                }
                Case (0x02)
                {
                    Debug = "   JT fun2 JT_FUNC_POLICYSELECT"
                    Return (0x80000002)
                }
                Case (0x03)
                {
                    Debug = "   JT fun3 JT_FUNC_POWERCONTROL"
                    CreateField (Arg3, Zero, 0x03, GPPC)
                    CreateField (Arg3, 0x04, One, PLPC)
                    CreateField (Arg3, 0x07, One, ECOC)
                    CreateField (Arg3, 0x0E, 0x02, DFGC)
                    CreateField (Arg3, 0x10, 0x03, GPCX)
                    \_SB.PCI0.TGPC = Arg3
                    If (((ToInteger (GPPC) != Zero) || (ToInteger (DFGC
                        ) != Zero)))
                    {
                        \_SB.PCI0.TDGC = ToInteger (DFGC)
                        \_SB.PCI0.DGCX = ToInteger (GPCX)
                    }

                    Name (JTPC, Buffer (0x04)
                    {
                         0x00                                             // .
                    })
                    CreateField (JTPC, Zero, 0x03, GUPS)
                    CreateField (JTPC, 0x03, One, GPWO)
                    CreateField (JTPC, 0x07, One, PLST)
                    If ((ToInteger (DFGC) != Zero))
                    {
                        GPWO = One
                        GUPS = One
                        Return (JTPC) /* \_SB_.PCI0.GPP0.PEGP.NVJT.JTPC */
                    }

                    Debug = "   JT fun3 GPPC="
                    Debug = ToInteger (GPPC)
                    If ((ToInteger (GPPC) == One))
                    {
                        \_SB.PCI0.GC6I ()
                        PLST = One
                        GUPS = Zero
                    }
                    ElseIf ((ToInteger (GPPC) == 0x02))
                    {
                        \_SB.PCI0.GC6I ()
                        If ((ToInteger (PLPC) == Zero))
                        {
                            PLST = Zero
                        }

                        GUPS = Zero
                    }
                    ElseIf ((ToInteger (GPPC) == 0x03))
                    {
                        \_SB.PCI0.GC6O ()
                        If ((ToInteger (PLPC) != Zero))
                        {
                            PLST = Zero
                        }

                        GPWO = One
                        GUPS = One
                    }
                    ElseIf ((ToInteger (GPPC) == 0x04))
                    {
                        \_SB.PCI0.GC6O ()
                        If ((ToInteger (PLPC) != Zero))
                        {
                            PLST = Zero
                        }

                        GPWO = One
                        GUPS = One
                    }
                    ElseIf ((M009 (PWGD) == One))
                    {
                        Debug = "   JT GETS() return 0x1"
                        GPWO = One
                        GUPS = One
                    }
                    Else
                    {
                        Debug = "   JT GETS() return 0x3"
                        GPWO = Zero
                        GUPS = 0x03
                    }

                    Return (JTPC) /* \_SB_.PCI0.GPP0.PEGP.NVJT.JTPC */
                }
                Case (0x04)
                {
                    Debug = "   JT fun4 JT_FUNC_PLATPOLICY"
                    CreateField (Arg3, 0x02, One, PAUD)
                    CreateField (Arg3, 0x03, One, PADM)
                    CreateField (Arg3, 0x04, 0x04, PDGS)
                    Local0 = Zero
                    Local0 = (\_SB.PCI0.GPP0.PEGP.HDAE << 0x02)
                    Return (Local0)
                }
                Case (0x05)
                {
                    Local0 = Zero
                    Local0 |= 0x00100010
                    Return (Local0)
                }
                Case (0x06)
                {
                    Name (TMP6, Package (0x0F)
                    {
                        Ones, 
                        0x2C, 
                        Ones, 
                        0x2C, 
                        Ones, 
                        0x2C, 
                        Ones, 
                        Ones, 
                        0x2C, 
                        Ones, 
                        Ones, 
                        0x2C, 
                        Ones, 
                        Ones, 
                        0x2C
                    })
                    Return (TMP6) /* \_SB_.PCI0.GPP0.PEGP.NVJT.TMP6 */
                }

            }

            Return (0x80000002)
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Name (LTRE, Zero)
        Name (DGPS, Zero)
        Name (_PSC, Zero)  // _PSC: Power State Current
        Name (GPRF, Zero)
        Name (OPCE, 0x02)
        OperationRegion (PCIM, SystemMemory, (0xF8000000 + (\_SB.PCI0.GPP0.PRBN << 0x14)), 0x1000)
        Field (PCIM, DWordAcc, NoLock, Preserve)
        {
            NVID,   16, 
            NDID,   16, 
            CMDR,   8, 
            VGAR,   2008, 
            Offset (0x48B), 
                ,   1, 
            HDAE,   1
        }

        OperationRegion (DGPU, SystemMemory, (0xF8000000 + (\_SB.PCI0.GPP0.PRBN << 0x14)), 0x0100)
        Field (DGPU, DWordAcc, NoLock, Preserve)
        {
            Offset (0x40), 
            SSSV,   32
        }

        OperationRegion (PCIS, PCI_Config, Zero, 0x0100)
        Field (PCIS, AnyAcc, NoLock, Preserve)
        {
            PVID,   16, 
            PDID,   16
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            _PSC = Zero
            If ((DGPS != 0x00))
            {
                \_SB.PCI0.GPP0.PG00._ON ()
                DGPS = 0x00
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((OPCE == 0x03))
            {
                If ((DGPS == 0x00))
                {
                    \_SB.PCI0.GPP0.PG00._OFF ()
                    DGPS = 0x01
                }

                OPCE = 0x02
            }

            _PSC = 0x03
        }

        Method (SGST, 0, Serialized)
        {
            If ((PVID != 0x0FFF))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("a486d8f8-0bda-471b-a72b-6042a6b5bee0") /* Unknown UUID */))
            {
                Return (\_SB.PCI0.GPP0.PEGP.NVOP (Arg0, Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("d4a50b75-65c7-46f7-bfb7-41514cea0244") /* Unknown UUID */))
            {
                Return (\_SB.PCI0.GPP0.PEGP.NBCI (Arg0, Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("cbeca351-067b-4924-9cbd-b46b00b86f34") /* Unknown UUID */))
            {
                Return (\_SB.PCI0.GPP0.PEGP.NVJT (Arg0, Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("a3132d01-8cda-49ba-a52e-bc9d46df6b81") /* Unknown UUID */))
            {
                Return (\_SB.PCI0.GPP0.PEGP.NVPS (Arg0, Arg1, Arg2, Arg3))
            }

            Return (0x80000001)
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Method (NVOP, 4, Serialized)
        {
            If ((Arg2 == Zero))
            {
                Return (Buffer (0x04)
                {
                     0x01, 0x00, 0x00, 0x0C                           // ....
                })
            }
            Else
            {
                If ((Arg2 == 0x1A))
                {
                    CreateField (Arg3, 0x18, 0x02, OMPR)
                    CreateField (Arg3, Zero, One, FLCH)
                    CreateField (Arg3, One, One, DVSR)
                    CreateField (Arg3, 0x02, One, DVSC)
                    If (ToInteger (FLCH))
                    {
                        \_SB.PCI0.GPP0.PEGP.OPCE = OMPR /* \_SB_.PCI0.GPP0.PEGP.NVOP.OMPR */
                    }

                    Local0 = Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    CreateField (Local0, Zero, One, OPEN)
                    CreateField (Local0, 0x03, 0x02, CGCS)
                    CreateField (Local0, 0x06, One, SHPC)
                    CreateField (Local0, 0x08, One, SNSR)
                    CreateField (Local0, 0x18, 0x03, DGPC)
                    CreateField (Local0, 0x1B, 0x02, HDAC)
                    OPEN = One
                    SHPC = One
                    HDAC = 0x03
                    DGPC = One
                    If (ToInteger (DVSC))
                    {
                        If (ToInteger (DVSR))
                        {
                            \_SB.PCI0.GPP0.PEGP.GPRF = One
                        }
                        Else
                        {
                            \_SB.PCI0.GPP0.PEGP.GPRF = Zero
                        }
                    }

                    SNSR = \_SB.PCI0.GPP0.PEGP.GPRF
                    If ((\_SB.PCI0.GPP0.PEGP.SGST () != Zero))
                    {
                        CGCS = 0x03
                    }

                    Return (Local0)
                }

                If ((Arg2 == 0x1B))
                {
                    Local0 = Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    CreateField (Local0, 0x00, 0x01, OCCC)
                    CreateField (Local0, 0x02, 0x02, RGPS)
                    CreateField (Local0, 0x04, 0x01, ERGP)
                    CreateField (Local0, 0x05, 0x02, ROAP)
                    CreateField (Local0, 0x07, 0x01, EROA)
                    If ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ITSM)) == 0x02))
                    {
                        EROA = 0x01
                        ROAP = 0x01
                    }
                    Else
                    {
                        EROA = 0x01
                        ROAP = 0x00
                    }

                    Return (Local0)
                }
            }

            Return (0x80000002)
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        OperationRegion (GPPB, PCI_Config, 0xB4, 0x14)
        Field (GPPB, ByteAcc, NoLock, Preserve)
        {
            PBCI,   8, 
            PBNP,   8, 
            PBLS,   8, 
            PBCC,   8, 
            PBCN,   32, 
            PBDI,   32, 
            PBDO,   32, 
            PBMX,   32
        }

        Method (NBCI, 4, Serialized)
        {
            If ((Arg1 == 0x0102))
            {
                If ((Arg2 == Zero))
                {
                    Return (Buffer (0x04)
                    {
                         0x01, 0x00, 0x11, 0x00                           // ....
                    })
                }

                If ((Arg2 == 0x10))
                {
                    Name (RTDR, Buffer (0xA1)
                    {
                        /* 0000 */  0x57, 0x74, 0xDC, 0x86, 0x75, 0x84, 0xEC, 0xE7,  // Wt..u...
                        /* 0008 */  0x52, 0x44, 0xA1, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
                        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
                        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
                        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
                        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
                        /* 0038 */  0x51, 0x00, 0x00, 0x00, 0x04, 0x00, 0x4F, 0x00,  // Q.....O.
                        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x4D, 0x00, 0x00, 0x00,  // ....M...
                        /* 0048 */  0x06, 0x00, 0x4B, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..K.....
                        /* 0050 */  0x49, 0x00, 0x00, 0x00, 0x08, 0x00, 0x47, 0x00,  // I.....G.
                        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
                        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
                        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
                        /* 0080 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x60, 0x68, 0x9E,  // .....`h.
                        /* 0088 */  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 5.......
                        /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 00A0 */  0x00                                             // .
                    })
                    Name (BOEV, Buffer (0xD5)
                    {
                        /* 0000 */  0x07, 0x75, 0x31, 0xFF, 0xB1, 0x5D, 0x9D, 0xBE,  // .u1..]..
                        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
                        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
                        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
                        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
                        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
                        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
                        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
                        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
                        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
                        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
                        /* 0058 */  0x37, 0x30, 0x34, 0x30, 0x36, 0x35, 0x20, 0x20,  // 704065  
                        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x4A, 0x4D, 0x24,  //    - JM$
                        /* 0068 */  0x34, 0x3B, 0x51, 0x2C, 0x5E, 0x2B, 0x53, 0x35,  // 4;Q,^+S5
                        /* 0070 */  0x38, 0x5C, 0x58, 0x21, 0x25, 0x4D, 0x3A, 0x3D,  // 8\X!%M:=
                        /* 0078 */  0x54, 0x23, 0x43, 0x31, 0x4E, 0x52, 0x46, 0x2F,  // T#C1NRF/
                        /* 0080 */  0x5A, 0x47, 0x38, 0x49, 0x56, 0x43, 0x2F, 0x51,  // ZG8IVC/Q
                        /* 0088 */  0x59, 0x28, 0x3F, 0x57, 0x37, 0x20, 0x2D, 0x20,  // Y(?W7 - 
                        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
                        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
                        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
                        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
                        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
                        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
                        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
                        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
                        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
                    })
                    Name (AUOV, Buffer (0xD5)
                    {
                        /* 0000 */  0xA3, 0xE9, 0x89, 0xAC, 0x5E, 0x44, 0x02, 0xA8,  // ....^D..
                        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
                        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
                        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
                        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
                        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
                        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
                        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
                        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
                        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
                        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
                        /* 0058 */  0x37, 0x30, 0x34, 0x30, 0x36, 0x31, 0x20, 0x20,  // 704061  
                        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x46, 0x49, 0x20,  //    - FI 
                        /* 0068 */  0x30, 0x37, 0x55, 0x28, 0x5A, 0x27, 0x2F, 0x31,  // 07U(Z'/1
                        /* 0070 */  0x34, 0x58, 0x5C, 0x3D, 0x21, 0x49, 0x36, 0x31,  // 4X\=!I61
                        /* 0078 */  0x48, 0x3F, 0x47, 0x35, 0x4A, 0x2E, 0x5A, 0x2B,  // H?G5J.Z+
                        /* 0080 */  0x56, 0x43, 0x43, 0x45, 0x52, 0x43, 0x50, 0x2D,  // VCCERCP-
                        /* 0088 */  0x2A, 0x21, 0x3A, 0x53, 0x3E, 0x20, 0x2D, 0x20,  // *!:S> - 
                        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
                        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
                        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
                        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
                        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
                        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
                        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
                        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
                        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
                    })
                    Name (BOED, Buffer (0xD5)
                    {
                        /* 0000 */  0xCC, 0x22, 0x22, 0x6E, 0x95, 0x62, 0xCC, 0x31,  // .""n.b.1
                        /* 0008 */  0x52, 0x44, 0xCD, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
                        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
                        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
                        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
                        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
                        /* 0038 */  0x7D, 0x00, 0x00, 0x00, 0x04, 0x00, 0x7B, 0x00,  // }.....{.
                        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x79, 0x00, 0x00, 0x00,  // ....y...
                        /* 0048 */  0x06, 0x00, 0x77, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..w.....
                        /* 0050 */  0x75, 0x00, 0x00, 0x00, 0x08, 0x00, 0x73, 0x00,  // u.....s.
                        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
                        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
                        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
                        /* 0080 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
                        /* 0088 */  0x01, 0xC0, 0x3D, 0x9C, 0x01, 0xC4, 0xD5, 0xC4,  // ..=.....
                        /* 0090 */  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  .......
                        /* 0098 */  0x00, 0x14, 0x00, 0x00, 0x00, 0x31, 0x00, 0x36,  // .....1.6
                        /* 00A0 */  0x00, 0x35, 0x00, 0x2A, 0x00, 0x31, 0x00, 0x34,  // .5.*.1.4
                        /* 00A8 */  0x00, 0x35, 0x00, 0x34, 0x00, 0x35, 0x00, 0x00,  // .5.4.5..
                        /* 00B0 */  0x00, 0x60, 0x68, 0x9E, 0x35, 0x00, 0x00, 0x00,  // .`h.5...
                        /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    Name (AUOD, Buffer (0xD5)
                    {
                        /* 0000 */  0xCC, 0x22, 0x22, 0x6E, 0x95, 0x62, 0xCC, 0x31,  // .""n.b.1
                        /* 0008 */  0x52, 0x44, 0xCD, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
                        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
                        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
                        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
                        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
                        /* 0038 */  0x7D, 0x00, 0x00, 0x00, 0x04, 0x00, 0x7B, 0x00,  // }.....{.
                        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x79, 0x00, 0x00, 0x00,  // ....y...
                        /* 0048 */  0x06, 0x00, 0x77, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..w.....
                        /* 0050 */  0x75, 0x00, 0x00, 0x00, 0x08, 0x00, 0x73, 0x00,  // u.....s.
                        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
                        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
                        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
                        /* 0080 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
                        /* 0088 */  0x01, 0xC0, 0x3D, 0x9C, 0x01, 0xC4, 0xD5, 0xC4,  // ..=.....
                        /* 0090 */  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  .......
                        /* 0098 */  0x00, 0x14, 0x00, 0x00, 0x00, 0x31, 0x00, 0x36,  // .....1.6
                        /* 00A0 */  0x00, 0x35, 0x00, 0x2A, 0x00, 0x31, 0x00, 0x34,  // .5.*.1.4
                        /* 00A8 */  0x00, 0x35, 0x00, 0x34, 0x00, 0x35, 0x00, 0x00,  // .5.4.5..
                        /* 00B0 */  0x00, 0x60, 0x68, 0x9E, 0x35, 0x00, 0x00, 0x00,  // .`h.5...
                        /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    Name (BOEP, Buffer (0xD5)
                    {
                        /* 0000 */  0x09, 0x05, 0xCF, 0xFE, 0x37, 0x49, 0xBD, 0x1E,  // ....7I..
                        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
                        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
                        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
                        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
                        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
                        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
                        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
                        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
                        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
                        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
                        /* 0058 */  0x37, 0x32, 0x34, 0x32, 0x30, 0x35, 0x20, 0x20,  // 724205  
                        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x48, 0x4B, 0x26,  //    - HK&
                        /* 0068 */  0x36, 0x39, 0x53, 0x2E, 0x5C, 0x29, 0x51, 0x37,  // 69S.\)Q7
                        /* 0070 */  0x3A, 0x5A, 0x5A, 0x23, 0x23, 0x4B, 0x38, 0x33,  // :ZZ##K83
                        /* 0078 */  0x4A, 0x3D, 0x41, 0x33, 0x4F, 0x50, 0x58, 0x2D,  // J=A3OPX-
                        /* 0080 */  0x58, 0x41, 0x45, 0x47, 0x54, 0x41, 0x2D, 0x2F,  // XAEGTA-/
                        /* 0088 */  0x27, 0x26, 0x3D, 0x55, 0x35, 0x20, 0x2D, 0x20,  // '&=U5 - 
                        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
                        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
                        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
                        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
                        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
                        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
                        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
                        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
                        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
                    })
                    Name (AUOP, Buffer (0xD5)
                    {
                        /* 0000 */  0xE3, 0xF0, 0x3C, 0x27, 0xA8, 0xD6, 0x9A, 0x0E,  // ..<'....
                        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
                        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
                        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
                        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
                        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
                        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
                        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
                        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
                        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
                        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
                        /* 0058 */  0x37, 0x32, 0x34, 0x32, 0x30, 0x37, 0x20, 0x20,  // 724207  
                        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x4A, 0x4D, 0x24,  //    - JM$
                        /* 0068 */  0x34, 0x3B, 0x51, 0x2C, 0x5E, 0x2B, 0x53, 0x35,  // 4;Q,^+S5
                        /* 0070 */  0x38, 0x5C, 0x58, 0x21, 0x25, 0x4D, 0x3A, 0x3D,  // 8\X!%M:=
                        /* 0078 */  0x54, 0x23, 0x43, 0x31, 0x4D, 0x52, 0x46, 0x2F,  // T#C1MRF/
                        /* 0080 */  0x5A, 0x47, 0x38, 0x49, 0x56, 0x47, 0x5C, 0x51,  // ZG8IVG\Q
                        /* 0088 */  0x56, 0x2D, 0x3E, 0x57, 0x3A, 0x20, 0x2D, 0x20,  // V->W: - 
                        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
                        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
                        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
                        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
                        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
                        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
                        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
                        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
                        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
                    })
                    Name (LGDP, Buffer (0xD5)
                    {
                        /* 0000 */  0xE4, 0x73, 0xA0, 0x67, 0x3A, 0xB3, 0x6A, 0x33,  // .s.g:.j3
                        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
                        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
                        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
                        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
                        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
                        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
                        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
                        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
                        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
                        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
                        /* 0058 */  0x37, 0x35, 0x38, 0x39, 0x33, 0x31, 0x20, 0x20,  // 758931  
                        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x36, 0x3A, 0x51,  //    - 6:Q
                        /* 0068 */  0x26, 0x28, 0x41, 0x43, 0x31, 0x5C, 0x47, 0x2E,  // &(AC1\G.
                        /* 0070 */  0x52, 0x34, 0x31, 0x58, 0x5F, 0x29, 0x56, 0x53,  // R41X_)VS
                        /* 0078 */  0x2A, 0x42, 0x22, 0x5E, 0x52, 0x36, 0x21, 0x55,  // *B"^R6!U
                        /* 0080 */  0x43, 0x2F, 0x50, 0x53, 0x23, 0x34, 0x33, 0x3C,  // C/PS#43<
                        /* 0088 */  0x3F, 0x38, 0x40, 0x23, 0x33, 0x20, 0x2D, 0x20,  // ?8@#3 - 
                        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
                        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
                        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
                        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
                        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
                        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
                        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
                        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
                        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
                    })
                    Name (LGDV, Buffer (0xD5)
                    {
                        /* 0000 */  0x0A, 0xDF, 0x4F, 0xE1, 0x5F, 0xEA, 0xDF, 0x19,  // ..O._...
                        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
                        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
                        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
                        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
                        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
                        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
                        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
                        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
                        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
                        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
                        /* 0058 */  0x37, 0x35, 0x38, 0x39, 0x33, 0x30, 0x20, 0x20,  // 758930  
                        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x37, 0x39, 0x50,  //    - 79P
                        /* 0068 */  0x21, 0x29, 0x40, 0x5C, 0x30, 0x5D, 0x46, 0x29,  // !)@\0]F)
                        /* 0070 */  0x2D, 0x35, 0x30, 0x59, 0x5E, 0x26, 0x55, 0x52,  // -50Y^&UR
                        /* 0078 */  0x2B, 0x5D, 0x23, 0x51, 0x50, 0x37, 0x22, 0x52,  // +]#QP7"R
                        /* 0080 */  0x40, 0x28, 0x5F, 0x52, 0x20, 0x35, 0x32, 0x3D,  // @(_R 52=
                        /* 0088 */  0x3E, 0x37, 0x43, 0x5C, 0x30, 0x20, 0x2D, 0x20,  // >7C\0 - 
                        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
                        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
                        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
                        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
                        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
                        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
                        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
                        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
                        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
                    })
                    Name (LGDD, Buffer (0xCD)
                    {
                        /* 0000 */  0xCC, 0x22, 0x22, 0x6E, 0x95, 0x62, 0xCC, 0x31,  // .""n.b.1
                        /* 0008 */  0x52, 0x44, 0xCD, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
                        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
                        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
                        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
                        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
                        /* 0038 */  0x7D, 0x00, 0x00, 0x00, 0x04, 0x00, 0x7B, 0x00,  // }.....{.
                        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x79, 0x00, 0x00, 0x00,  // ....y...
                        /* 0048 */  0x06, 0x00, 0x77, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..w.....
                        /* 0050 */  0x75, 0x00, 0x00, 0x00, 0x08, 0x00, 0x73, 0x00,  // u.....s.
                        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
                        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
                        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
                        /* 0080 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
                        /* 0088 */  0x01, 0xC0, 0x3D, 0x9C, 0x01, 0xC4, 0xD5, 0xC4,  // ..=.....
                        /* 0090 */  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  .......
                        /* 0098 */  0x00, 0x14, 0x00, 0x00, 0x00, 0x31, 0x00, 0x36,  // .....1.6
                        /* 00A0 */  0x00, 0x35, 0x00, 0x2A, 0x00, 0x31, 0x00, 0x34,  // .5.*.1.4
                        /* 00A8 */  0x00, 0x35, 0x00, 0x34, 0x00, 0x35, 0x00, 0x00,  // .5.4.5..
                        /* 00B0 */  0x00, 0x60, 0x68, 0x9E, 0x35, 0x00, 0x00, 0x00,  // .`h.5...
                        /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    Name (QCTP, Buffer (0xD5)
                    {
                        /* 0000 */  0x27, 0x2C, 0x6C, 0x54, 0xC0, 0x05, 0xF1, 0x16,  // ',lT....
                        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
                        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
                        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
                        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
                        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
                        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
                        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
                        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
                        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
                        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
                        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x35, 0x31, 0x20, 0x20,  // 752651  
                        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x31, 0x33, 0x2E,  //    - 13.
                        /* 0068 */  0x3F, 0x23, 0x46, 0x5A, 0x49, 0x57, 0x40, 0x27,  // ?#FZIW@'
                        /* 0070 */  0x2B, 0x4C, 0x36, 0x57, 0x58, 0x20, 0x2F, 0x54,  // +L6WX /T
                        /* 0078 */  0x2D, 0x5B, 0x25, 0x57, 0x29, 0x31, 0x38, 0x4C,  // -[%W)18L
                        /* 0080 */  0x3B, 0x26, 0x59, 0x2C, 0x3A, 0x5C, 0x46, 0x38,  // ;&Y,:\F8
                        /* 0088 */  0x4D, 0x30, 0x5A, 0x29, 0x4D, 0x20, 0x2D, 0x20,  // M0Z)M - 
                        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
                        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
                        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
                        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
                        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
                        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
                        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
                        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
                        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
                    })
                    Name (QCTV, Buffer (0xD5)
                    {
                        /* 0000 */  0x0D, 0x4A, 0x55, 0xEC, 0x2A, 0x4A, 0x46, 0x63,  // .JU.*JFc
                        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
                        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
                        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
                        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
                        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
                        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
                        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
                        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
                        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
                        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
                        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x35, 0x30, 0x20, 0x20,  // 752650  
                        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x4F, 0x32, 0x29,  //    - O2)
                        /* 0068 */  0x3E, 0x20, 0x59, 0x5B, 0x48, 0x54, 0x5F, 0x26,  // > Y[HT_&
                        /* 0070 */  0x2A, 0x4D, 0x48, 0x50, 0x57, 0x21, 0x2E, 0x4B,  // *MHPW!.K
                        /* 0078 */  0x22, 0x5A, 0x3A, 0x56, 0x29, 0x4F, 0x39, 0x4D,  // "Z:V)O9M
                        /* 0080 */  0x38, 0x27, 0x58, 0x2B, 0x3B, 0x5F, 0x38, 0x37,  // 8'X+;_87
                        /* 0088 */  0x42, 0x31, 0x5B, 0x28, 0x4E, 0x20, 0x2D, 0x20,  // B1[(N - 
                        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
                        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
                        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
                        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
                        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
                        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
                        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
                        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
                        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
                    })
                    Name (QBEP, Buffer (0xD5)
                    {
                        /* 0000 */  0xFB, 0x3F, 0x85, 0x7F, 0xF7, 0x43, 0xE2, 0xA3,  // .?...C..
                        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
                        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
                        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
                        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
                        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
                        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
                        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
                        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
                        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
                        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
                        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x33, 0x33, 0x20, 0x20,  // 752633  
                        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x31, 0x33, 0x2E,  //    - 13.
                        /* 0068 */  0x3F, 0x23, 0x46, 0x5A, 0x49, 0x57, 0x40, 0x27,  // ?#FZIW@'
                        /* 0070 */  0x2B, 0x4C, 0x36, 0x57, 0x58, 0x20, 0x2F, 0x54,  // +L6WX /T
                        /* 0078 */  0x2D, 0x5B, 0x25, 0x57, 0x29, 0x31, 0x38, 0x4C,  // -[%W)18L
                        /* 0080 */  0x3B, 0x26, 0x59, 0x2C, 0x3A, 0x2F, 0x35, 0x38,  // ;&Y,:/58
                        /* 0088 */  0x31, 0x31, 0x2E, 0x2B, 0x3E, 0x20, 0x2D, 0x20,  // 11.+> - 
                        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
                        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
                        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
                        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
                        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
                        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
                        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
                        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
                        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
                    })
                    Name (QBEV, Buffer (0xD5)
                    {
                        /* 0000 */  0x01, 0x25, 0x30, 0x1F, 0x3D, 0xDE, 0x7D, 0xD1,  // .%0.=.}.
                        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
                        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
                        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
                        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
                        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
                        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
                        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
                        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
                        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
                        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
                        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x33, 0x32, 0x20, 0x20,  // 752632  
                        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x4F, 0x32, 0x29,  //    - O2)
                        /* 0068 */  0x3E, 0x20, 0x59, 0x5B, 0x48, 0x54, 0x5F, 0x26,  // > Y[HT_&
                        /* 0070 */  0x2A, 0x4D, 0x48, 0x50, 0x57, 0x21, 0x2E, 0x4B,  // *MHPW!.K
                        /* 0078 */  0x22, 0x5A, 0x3A, 0x56, 0x29, 0x4F, 0x39, 0x4D,  // "Z:V)O9M
                        /* 0080 */  0x38, 0x27, 0x58, 0x2B, 0x3B, 0x2C, 0x4B, 0x37,  // 8'X+;,K7
                        /* 0088 */  0x3E, 0x30, 0x2F, 0x2A, 0x3D, 0x20, 0x2D, 0x20,  // >0/*= - 
                        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
                        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
                        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
                        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
                        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
                        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
                        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
                        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
                        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
                    })
                    Name (QCTD, Buffer (0xD7)
                    {
                        /* 0000 */  0xF8, 0x76, 0xEA, 0xEB, 0x43, 0x6B, 0x2B, 0x8E,  // .v..Ck+.
                        /* 0008 */  0x52, 0x44, 0xD7, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
                        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
                        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
                        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
                        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
                        /* 0038 */  0x87, 0x00, 0x00, 0x00, 0x04, 0x00, 0x85, 0x00,  // ........
                        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x83, 0x00, 0x00, 0x00,  // ........
                        /* 0048 */  0x06, 0x00, 0x81, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
                        /* 0050 */  0x7F, 0x00, 0x00, 0x00, 0x08, 0x00, 0x7D, 0x00,  // ......}.
                        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
                        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
                        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
                        /* 0080 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
                        /* 0088 */  0x01, 0xC0, 0x3D, 0x9C, 0x01, 0xC4, 0xD5, 0xC4,  // ..=.....
                        /* 0090 */  0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // *.......
                        /* 0098 */  0x00, 0x1E, 0x00, 0x00, 0x00, 0x31, 0x00, 0x36,  // .....1.6
                        /* 00A0 */  0x00, 0x35, 0x00, 0x2A, 0x00, 0x31, 0x00, 0x34,  // .5.*.1.4
                        /* 00A8 */  0x00, 0x35, 0x00, 0x34, 0x00, 0x35, 0x00, 0x3B,  // .5.4.5.;
                        /* 00B0 */  0x00, 0x36, 0x00, 0x30, 0x00, 0x2A, 0x00, 0x31,  // .6.0.*.1
                        /* 00B8 */  0x00, 0x00, 0x00, 0x60, 0x68, 0x9E, 0x35, 0x00,  // ...`h.5.
                        /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                    Name (QBED, Buffer (0xDF)
                    {
                        /* 0000 */  0x31, 0x70, 0x69, 0x27, 0x43, 0xDC, 0x49, 0xDF,  // 1pi'C.I.
                        /* 0008 */  0x52, 0x44, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
                        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
                        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
                        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
                        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
                        /* 0038 */  0x8F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x8D, 0x00,  // ........
                        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x8B, 0x00, 0x00, 0x00,  // ........
                        /* 0048 */  0x06, 0x00, 0x89, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
                        /* 0050 */  0x87, 0x00, 0x00, 0x00, 0x08, 0x00, 0x85, 0x00,  // ........
                        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
                        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
                        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
                        /* 0080 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
                        /* 0088 */  0x01, 0xC0, 0x3D, 0x9C, 0x01, 0xC4, 0xD5, 0xC4,  // ..=.....
                        /* 0090 */  0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 2.......
                        /* 0098 */  0x00, 0x26, 0x00, 0x00, 0x00, 0x31, 0x00, 0x36,  // .&...1.6
                        /* 00A0 */  0x00, 0x35, 0x00, 0x2A, 0x00, 0x31, 0x00, 0x34,  // .5.*.1.4
                        /* 00A8 */  0x00, 0x35, 0x00, 0x34, 0x00, 0x35, 0x00, 0x3B,  // .5.4.5.;
                        /* 00B0 */  0x00, 0x36, 0x00, 0x30, 0x00, 0x2A, 0x00, 0x34,  // .6.0.*.4
                        /* 00B8 */  0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30,  // .0.0.0.0
                        /* 00C0 */  0x00, 0x00, 0x00, 0x60, 0x68, 0x9E, 0x35, 0x00,  // ...`h.5.
                        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                    Name (BOAP, Buffer (0xD5)
                    {
                        /* 0000 */  0xD3, 0xC1, 0x71, 0xAC, 0x15, 0x11, 0x6F, 0xE8,  // ..q...o.
                        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
                        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
                        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
                        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
                        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
                        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
                        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
                        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
                        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
                        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x32,  // NOVO 342
                        /* 0058 */  0x36, 0x38, 0x32, 0x36, 0x20, 0x20, 0x20, 0x20,  // 6826    
                        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x53, 0x53, 0x48,  //    - SSH
                        /* 0068 */  0x5B, 0x5D, 0x3F, 0x33, 0x3E, 0x49, 0x31, 0x51,  // []?3>I1Q
                        /* 0070 */  0x57, 0x39, 0x3E, 0x59, 0x5C, 0x22, 0x2F, 0x4A,  // W9>Y\"/J
                        /* 0078 */  0x21, 0x51, 0x3D, 0x21, 0x3D, 0x40, 0x49, 0x3B,  // !Q=!=@I;
                        /* 0080 */  0x27, 0x4D, 0x31, 0x32, 0x5F, 0x49, 0x2A, 0x55,  // 'M12_I*U
                        /* 0088 */  0x5A, 0x2A, 0x46, 0x5F, 0x4D, 0x20, 0x2D, 0x20,  // Z*F_M - 
                        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
                        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
                        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
                        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
                        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
                        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
                        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
                        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
                        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
                    })
                    Name (BOAV, Buffer (0xD5)
                    {
                        /* 0000 */  0x50, 0x7C, 0x7E, 0x91, 0x22, 0xF8, 0x30, 0xC3,  // P|~.".0.
                        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
                        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
                        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
                        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
                        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
                        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
                        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
                        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
                        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
                        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x32,  // NOVO 342
                        /* 0058 */  0x36, 0x38, 0x32, 0x35, 0x20, 0x20, 0x20, 0x20,  // 6825    
                        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x50, 0x52, 0x4B,  //    - PRK
                        /* 0068 */  0x5A, 0x5A, 0x3E, 0x4D, 0x3D, 0x46, 0x30, 0x50,  // ZZ>M=F0P
                        /* 0070 */  0x56, 0x36, 0x31, 0x5A, 0x5B, 0x23, 0x2E, 0x49,  // V61Z[#.I
                        /* 0078 */  0x26, 0x50, 0x32, 0x20, 0x3D, 0x41, 0x4A, 0x38,  // &P2 =AJ8
                        /* 0080 */  0x24, 0x4E, 0x30, 0x31, 0x5C, 0x4E, 0x2B, 0x54,  // $N01\N+T
                        /* 0088 */  0x5B, 0x29, 0x47, 0x5C, 0x4E, 0x20, 0x2D, 0x20,  // [)G\N - 
                        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
                        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
                        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
                        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
                        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
                        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
                        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
                        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
                        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
                    })
                    Name (QBEA, Buffer (0xCD)
                    {
                        /* 0000 */  0xCC, 0x22, 0x22, 0x6E, 0x95, 0x62, 0xCC, 0x31,  // .""n.b.1
                        /* 0008 */  0x52, 0x44, 0xCD, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
                        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
                        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
                        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
                        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
                        /* 0038 */  0x7D, 0x00, 0x00, 0x00, 0x04, 0x00, 0x7B, 0x00,  // }.....{.
                        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x79, 0x00, 0x00, 0x00,  // ....y...
                        /* 0048 */  0x06, 0x00, 0x77, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..w.....
                        /* 0050 */  0x75, 0x00, 0x00, 0x00, 0x08, 0x00, 0x73, 0x00,  // u.....s.
                        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
                        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
                        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
                        /* 0080 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
                        /* 0088 */  0x01, 0xC0, 0x3D, 0x9C, 0x01, 0xC4, 0xD5, 0xC4,  // ..=.....
                        /* 0090 */  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  .......
                        /* 0098 */  0x00, 0x14, 0x00, 0x00, 0x00, 0x31, 0x00, 0x36,  // .....1.6
                        /* 00A0 */  0x00, 0x35, 0x00, 0x2A, 0x00, 0x31, 0x00, 0x34,  // .5.*.1.4
                        /* 00A8 */  0x00, 0x35, 0x00, 0x34, 0x00, 0x35, 0x00, 0x00,  // .5.4.5..
                        /* 00B0 */  0x00, 0x60, 0x68, 0x9E, 0x35, 0x00, 0x00, 0x00,  // .`h.5...
                        /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    Name (AUBP, Buffer (0xD5)
                    {
                        /* 0000 */  0x6A, 0x8A, 0x49, 0xFB, 0xA4, 0x19, 0x4C, 0x31,  // j.I...L1
                        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
                        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
                        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
                        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
                        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
                        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
                        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
                        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
                        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x59, 0x37,  // m for Y7
                        /* 0050 */  0x36, 0x30, 0x73, 0x2D, 0x67, 0x6E, 0x32, 0x30,  // 60s-gn20
                        /* 0058 */  0x2D, 0x50, 0x31, 0x2D, 0x41, 0x55, 0x4F, 0x42,  // -P1-AUOB
                        /* 0060 */  0x36, 0x39, 0x20, 0x2D, 0x20, 0x4F, 0x32, 0x29,  // 69 - O2)
                        /* 0068 */  0x3E, 0x20, 0x59, 0x5B, 0x48, 0x54, 0x5F, 0x26,  // > Y[HT_&
                        /* 0070 */  0x2A, 0x4D, 0x48, 0x50, 0x57, 0x21, 0x2E, 0x4B,  // *MHPW!.K
                        /* 0078 */  0x22, 0x5A, 0x3A, 0x56, 0x2A, 0x4F, 0x39, 0x4D,  // "Z:V*O9M
                        /* 0080 */  0x38, 0x27, 0x58, 0x2B, 0x3B, 0x28, 0x38, 0x37,  // 8'X+;(87
                        /* 0088 */  0x31, 0x42, 0x58, 0x21, 0x3B, 0x20, 0x2D, 0x20,  // 1BX!; - 
                        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
                        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
                        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
                        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
                        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
                        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
                        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
                        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
                        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
                    })
                    Name (AUBV, Buffer (0xD5)
                    {
                        /* 0000 */  0x4F, 0x96, 0xD9, 0xDD, 0x35, 0x2F, 0xD4, 0xBC,  // O...5/..
                        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
                        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
                        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
                        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
                        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
                        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
                        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
                        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
                        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x79, 0x37,  // m for y7
                        /* 0050 */  0x36, 0x30, 0x73, 0x2D, 0x45, 0x33, 0x2D, 0x41,  // 60s-E3-A
                        /* 0058 */  0x55, 0x4F, 0x42, 0x36, 0x39, 0x42, 0x20, 0x20,  // UOB69B  
                        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x44, 0x4D, 0x2E,  //    - DM.
                        /* 0068 */  0x20, 0x2D, 0x36, 0x4E, 0x23, 0x34, 0x24, 0x4F,  //  -6N#4$O
                        /* 0070 */  0x35, 0x41, 0x41, 0x52, 0x5A, 0x29, 0x5B, 0x25,  // 5AARZ)[%
                        /* 0078 */  0x3B, 0x33, 0x59, 0x35, 0x31, 0x5A, 0x37, 0x42,  // ;3Y51Z7B
                        /* 0080 */  0x34, 0x26, 0x5E, 0x56, 0x2B, 0x3F, 0x5F, 0x56,  // 4&^V+?_V
                        /* 0088 */  0x5D, 0x2B, 0x2B, 0x35, 0x30, 0x20, 0x2D, 0x20,  // ]++50 - 
                        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
                        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
                        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
                        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
                        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
                        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
                        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
                        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
                        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
                    })
                    Name (AU2D, Buffer (0xCD)
                    {
                        /* 0000 */  0xCC, 0x22, 0x22, 0x6E, 0x95, 0x62, 0xCC, 0x31,  // .""n.b.1
                        /* 0008 */  0x52, 0x44, 0xCD, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
                        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
                        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
                        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
                        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
                        /* 0038 */  0x7D, 0x00, 0x00, 0x00, 0x04, 0x00, 0x7B, 0x00,  // }.....{.
                        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x79, 0x00, 0x00, 0x00,  // ....y...
                        /* 0048 */  0x06, 0x00, 0x77, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..w.....
                        /* 0050 */  0x75, 0x00, 0x00, 0x00, 0x08, 0x00, 0x73, 0x00,  // u.....s.
                        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
                        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
                        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
                        /* 0080 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
                        /* 0088 */  0x01, 0xC0, 0x3D, 0x9C, 0x01, 0xC4, 0xD5, 0xC4,  // ..=.....
                        /* 0090 */  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  .......
                        /* 0098 */  0x00, 0x14, 0x00, 0x00, 0x00, 0x31, 0x00, 0x36,  // .....1.6
                        /* 00A0 */  0x00, 0x35, 0x00, 0x2A, 0x00, 0x31, 0x00, 0x34,  // .5.*.1.4
                        /* 00A8 */  0x00, 0x35, 0x00, 0x34, 0x00, 0x35, 0x00, 0x00,  // .5.4.5..
                        /* 00B0 */  0x00, 0x60, 0x68, 0x9E, 0x35, 0x00, 0x00, 0x00,  // .`h.5...
                        /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    CreateWordField (Arg3, 0x02, USAG)
                    If ((USAG == 0x564B))
                    {
                        If (((PDID == 0x2560) || (PDID == 0x2563)))
                        {
                            If ((FHDN == 0x00))
                            {
                                If ((GPUT == 0x00))
                                {
                                    Return (BOEP) /* \_SB_.PCI0.GPP0.PEGP.NBCI.BOEP */
                                }
                                Else
                                {
                                    Return (BOEV) /* \_SB_.PCI0.GPP0.PEGP.NBCI.BOEV */
                                }
                            }
                            ElseIf ((FHDN == 0x01))
                            {
                                If ((GPUT == 0x00))
                                {
                                    Return (AUOP) /* \_SB_.PCI0.GPP0.PEGP.NBCI.AUOP */
                                }
                                Else
                                {
                                    Return (AUOV) /* \_SB_.PCI0.GPP0.PEGP.NBCI.AUOV */
                                }
                            }
                            ElseIf ((FHDN == 0x02))
                            {
                                If ((GPUT == 0x00))
                                {
                                    Return (LGDP) /* \_SB_.PCI0.GPP0.PEGP.NBCI.LGDP */
                                }
                                Else
                                {
                                    Return (LGDV) /* \_SB_.PCI0.GPP0.PEGP.NBCI.LGDV */
                                }
                            }
                            ElseIf ((FHDN == 0x03))
                            {
                                If ((GPUT == 0x00))
                                {
                                    Return (QCTP) /* \_SB_.PCI0.GPP0.PEGP.NBCI.QCTP */
                                }
                                Else
                                {
                                    Return (QCTV) /* \_SB_.PCI0.GPP0.PEGP.NBCI.QCTV */
                                }
                            }
                            ElseIf ((FHDN == 0x04))
                            {
                                If ((GPUT == 0x00))
                                {
                                    Return (QBEP) /* \_SB_.PCI0.GPP0.PEGP.NBCI.QBEP */
                                }
                                Else
                                {
                                    Return (QBEV) /* \_SB_.PCI0.GPP0.PEGP.NBCI.QBEV */
                                }
                            }
                            ElseIf ((FHDN == 0x05))
                            {
                                If ((GPUT == 0x00))
                                {
                                    Return (BOAP) /* \_SB_.PCI0.GPP0.PEGP.NBCI.BOAP */
                                }
                                Else
                                {
                                    Return (BOAV) /* \_SB_.PCI0.GPP0.PEGP.NBCI.BOAV */
                                }
                            }
                            ElseIf ((FHDN == 0x06))
                            {
                                If ((GPUT == 0x00))
                                {
                                    Return (AUBP) /* \_SB_.PCI0.GPP0.PEGP.NBCI.AUBP */
                                }
                                Else
                                {
                                    Return (AUBV) /* \_SB_.PCI0.GPP0.PEGP.NBCI.AUBV */
                                }
                            }
                        }
                    }

                    If ((USAG == 0x4452))
                    {
                        If ((FHDN == 0x00))
                        {
                            Return (BOED) /* \_SB_.PCI0.GPP0.PEGP.NBCI.BOED */
                        }
                        ElseIf ((FHDN == 0x01))
                        {
                            Return (AUOD) /* \_SB_.PCI0.GPP0.PEGP.NBCI.AUOD */
                        }
                        ElseIf ((FHDN == 0x02))
                        {
                            Return (LGDD) /* \_SB_.PCI0.GPP0.PEGP.NBCI.LGDD */
                        }
                        ElseIf ((FHDN == 0x03))
                        {
                            Return (QCTD) /* \_SB_.PCI0.GPP0.PEGP.NBCI.QCTD */
                        }
                        ElseIf ((FHDN == 0x04))
                        {
                            Return (QBED) /* \_SB_.PCI0.GPP0.PEGP.NBCI.QBED */
                        }
                        ElseIf ((FHDN == 0x05))
                        {
                            Return (QBEA) /* \_SB_.PCI0.GPP0.PEGP.NBCI.QBEA */
                        }
                        ElseIf ((FHDN == 0x06))
                        {
                            Return (AU2D) /* \_SB_.PCI0.GPP0.PEGP.NBCI.AU2D */
                        }

                        Return (RTDR) /* \_SB_.PCI0.GPP0.PEGP.NBCI.RTDR */
                    }

                    Return (Zero)
                }

                If ((Arg2 == 0x14))
                {
                    Return (Package (0x20)
                    {
                        0x8001A450, 
                        0x0200, 
                        0x00, 
                        0x00, 
                        0x05, 
                        0x01, 
                        Package (0x04)
                        {
                            0x03E8, 
                            0x00, 
                            0x03E8, 
                            Package (0x03)
                            {
                                0x0B, 
                                Package (0x0B)
                                {
                                    0x00, 
                                    0x0A, 
                                    0x1E, 
                                    0x32, 
                                    0x50, 
                                    0x78, 
                                    0xB4, 
                                    0x010E, 
                                    0x0186, 
                                    0x029E, 
                                    0x03E8
                                }, 

                                Package (0x0B)
                                {
                                    0x00, 
                                    0x64, 
                                    0xC8, 
                                    0x012C, 
                                    0x0190, 
                                    0x01F4, 
                                    0x0258, 
                                    0x02BC, 
                                    0x0320, 
                                    0x0384, 
                                    0x03E8
                                }
                            }
                        }
                    })
                }
            }

            Return (0x80000002)
        }

        Method (NINT, 2, NotSerialized)
        {
            If ((PBCC == One))
            {
                If ((Arg0 == One))
                {
                    PBMX = One
                    Local0 = Zero
                    While ((Local0 < 0x03E8))
                    {
                        PBCN = 0xC5100000
                        Stall (0x64)
                        Local1 = (PBCN & 0xFF)
                        Local0++
                        If ((Local1 == One))
                        {
                            Local0 = 0x03E8
                        }
                    }

                    PBCN = Zero
                    PBMX = Zero
                    Local2 = PBDO /* \_SB_.PCI0.GPP0.PEGP.PBDO */
                    Return (Local2)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = Arg1
                    Local0 = Zero
                    Local3 = (Local1 * 0x0A)
                    Local3 <<= 0x08
                    PBDI = Local3
                    While ((Local0 < 0x03E8))
                    {
                        PBMX = One
                        PBCN = 0x86100000
                        Stall (0x64)
                        Local2 = (PBCN & 0xFF)
                        Local0++
                        If ((Local2 == One))
                        {
                            Local0 = 0x03E8
                        }
                    }

                    PBCN = Zero
                    PBMX = Zero
                    Return (Zero)
                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Name (NLIM, One)
        Name (PSLS, Zero)
        Name (VPSC, One)
        Method (NVPS, 4, Serialized)
        {
            If ((Arg1 != 0x0200))
            {
                Return (0x80000002)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    If ((H264 == 0x01))
                    {
                        HWAC |= 0x30000000
                    }

                    Return (Buffer (0x08)
                    {
                         0x01, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00   // ........
                    })
                }
                Case (0x20)
                {
                    Name (RET1, Zero)
                    CreateBitField (Arg3, 0x02, SPBI)
                    If (NLIM)
                    {
                        RET1 |= 0x01
                    }

                    If (PSLS)
                    {
                        RET1 |= 0x02
                    }

                    Return (RET1) /* \_SB_.PCI0.GPP0.PEGP.NVPS.RET1 */
                }
                Case (0x2A)
                {
                    CreateField (Arg3, 0x00, 0x04, PSH0)
                    CreateBitField (Arg3, 0x08, GPUT)
                    Name (GPSP, Buffer (0x28) {})
                    CreateDWordField (GPSP, 0x00, RETN)
                    CreateDWordField (GPSP, 0x04, VRV1)
                    CreateDWordField (GPSP, 0x08, TGPU)
                    CreateDWordField (GPSP, 0x0C, PDTS)
                    CreateDWordField (GPSP, 0x10, SFAN)
                    CreateDWordField (GPSP, 0x14, SKNT)
                    CreateDWordField (GPSP, 0x18, CPUE)
                    CreateDWordField (GPSP, 0x1C, TMP1)
                    CreateDWordField (GPSP, 0x20, TMP2)
                    CreateDWordField (GPSP, 0x24, PCGP)
                    VRV1 = 0x00010000
                    Switch (ToInteger (PSH0))
                    {
                        Case (0x00)
                        {
                            Return (GPSP) /* \_SB_.PCI0.GPP0.PEGP.NVPS.GPSP */
                        }
                        Case (0x01)
                        {
                            RETN = 0x0100
                            RETN |= ToInteger (PSH0)
                            Return (GPSP) /* \_SB_.PCI0.GPP0.PEGP.NVPS.GPSP */
                        }
                        Case (0x02)
                        {
                            RETN = 0x0102
                            TGPU = 0x00
                            Return (GPSP) /* \_SB_.PCI0.GPP0.PEGP.NVPS.GPSP */
                        }

                    }
                }
                Default
                {
                    Return (0x80000002)
                }

            }

            Return (0x80000002)
        }
    }

    Scope (\_SB)
    {
        Device (NPCF)
        {
            Name (CTGP, One)
            Name (UOCT, 0xA0)
            Name (POCT, 0x50)
            Name (DTGP, One)
            Name (DCBT, 0x00)
            Name (DBAC, Zero)
            Name (DBDC, One)
            Name (AMAT, 0xA0)
            Name (AMIT, 0xFFFF)
            Name (ATPP, 0x0168)
            Name (IOBS, 0x0481)
            Name (CMPL, 0xFF)
            Name (CNPL, 0xAB)
            Name (HPCT, 0x02)
            Name (DMAT, 0x00)
            Name (DMIT, 0x00)
            Name (DTPP, 0x00)
            Name (CDIS, 0x00)
            Name (CUSL, 0x00)
            Name (CUCT, 0x00)
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                CDIS = 0x00
                Return ("NVDA0820")
            }

            Name (_UID, "NPCF")  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((CDIS == 0x01))
                {
                    Return (0x0D)
                }

                Return (0x0F)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                CDIS = 0x01
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("36b49710-2483-11e7-9598-0800200c9a66") /* Unknown UUID */))
                {
                    Return (NPCF (Arg0, Arg1, Arg2, Arg3))
                }
            }

            Method (NPCF, 4, Serialized)
            {
                OperationRegion (GPUP, SystemMemory, 0xFE00DD10, 0x10)
                Field (GPUP, ByteAcc, NoLock, Preserve)
                {
                    DTG1,   16, 
                    CTG1,   16
                }

                If ((ToInteger (Arg1) != 0x0200))
                {
                    Return (0x80000001)
                }

                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Return (Buffer (0x04)
                        {
                             0x07, 0x00, 0x00, 0x00                           // ....
                        })
                    }
                    Case (0x01)
                    {
                        Return (Buffer (0x1B)
                        {
                            /* 0000 */  0x20, 0x03, 0x01, 0x01, 0x20, 0x05, 0x02, 0x0F,  //  ... ...
                            /* 0008 */  0x01, 0x64, 0x00, 0x01, 0x01, 0x00, 0x00, 0xE8,  // .d......
                            /* 0010 */  0x00, 0x00, 0x66, 0x0E, 0x00, 0x10, 0x00, 0x00,  // ..f.....
                            /* 0018 */  0x00, 0x00, 0xD2                                 // ...
                        })
                    }
                    Case (0x02)
                    {
                        Name (PBD2, Buffer (0x31)
                        {
                             0x00                                             // .
                        })
                        CreateByteField (PBD2, Zero, PTV2)
                        CreateByteField (PBD2, 0x01, PHB2)
                        CreateByteField (PBD2, 0x02, GSB2)
                        CreateByteField (PBD2, 0x03, CTB2)
                        CreateByteField (PBD2, 0x04, NCE2)
                        PTV2 = 0x20
                        PHB2 = 0x05
                        GSB2 = 0x10
                        CTB2 = 0x1C
                        NCE2 = 0x01
                        CreateWordField (PBD2, 0x05, PGSO)
                        CreateWordField (PBD2, 0x07, TGPD)
                        CreateByteField (PBD2, 0x15, PC0O)
                        CreateByteField (PBD2, 0x16, PC02)
                        CreateWordField (PBD2, 0x19, TPPA)
                        CreateWordField (PBD2, 0x1B, TPPD)
                        CreateWordField (PBD2, 0x1D, MAGA)
                        CreateWordField (PBD2, 0x1F, MAGD)
                        CreateWordField (PBD2, 0x21, MIGA)
                        CreateWordField (PBD2, 0x23, MIGD)
                        CreateDWordField (PBD2, 0x25, PA4O)
                        CreateDWordField (PBD2, 0x29, PA5O)
                        CreateDWordField (PBD2, 0x2D, PA6O)
                        CreateField (Arg3, 0x28, 0x02, NIGS)
                        CreateByteField (Arg3, 0x15, IORC)
                        CreateField (Arg3, 0xB0, 0x01, CSSC)
                        If ((ToInteger (NIGS) == 0x00))
                        {
                            If ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ITSM)) == 0x01))
                            {
                                CTGP = 0x01
                            }
                            Else
                            {
                                CTGP = 0x00
                            }

                            If ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ITSM)) == 0x01))
                            {
                                DBAC = 0x00
                            }
                            Else
                            {
                                DBAC = 0x01
                            }

                            If ((CTGP == 0x01))
                            {
                                Local0 = \_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.CTGP))
                                If ((Local0 == 0xAA))
                                {
                                    PGSO = POCT /* \_SB_.NPCF.POCT */
                                }
                                Else
                                {
                                    PGSO = UOCT /* \_SB_.NPCF.UOCT */
                                }

                                If ((\_SB.PCI0.LPC0.H_EC.CAC1 == 0x01))
                                {
                                    PGSO = CTG1 /* \_SB_.NPCF.NPCF.CTG1 */
                                }
                            }
                            Else
                            {
                                PGSO = 0x00
                            }

                            TGPD = DCBT /* \_SB_.NPCF.DCBT */
                            PC0O = 0x00
                            PC02 = (DBAC | (DBDC << 0x01))
                            TPPA = ATPP /* \_SB_.NPCF.ATPP */
                            TPPD = DTPP /* \_SB_.NPCF.DTPP */
                            If ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.ITSM)) == 0x01))
                            {
                                DTGP = 0x01
                            }
                            Else
                            {
                                DTGP = 0x00
                            }

                            If ((DTGP == 0x01))
                            {
                                If ((\_SB.PCI0.LPC0.H_EC.CAC1 == 0x01))
                                {
                                    AMAT = DTG1 /* \_SB_.NPCF.NPCF.DTG1 */
                                }

                                MAGA = AMAT /* \_SB_.NPCF.AMAT */
                                MAGD = DMAT /* \_SB_.NPCF.DMAT */
                                MIGA = AMIT /* \_SB_.NPCF.AMIT */
                                MIGD = DMIT /* \_SB_.NPCF.DMIT */
                            }
                            Else
                            {
                                MAGA = 0x00
                                MAGD = 0x00
                                MIGA = 0x00
                                MIGD = 0x00
                            }
                        }

                        If ((ToInteger (NIGS) == 0x01))
                        {
                            If ((ToInteger (CSSC) == 0x01)) {}
                            Else
                            {
                            }

                            PGSO = 0x00
                            TGPD = 0x00
                            PC0O = 0x00
                            PC02 = 0x00
                            TPPA = 0x00
                            TPPD = 0x00
                            MAGA = 0x00
                            MIGA = 0x00
                            MAGD = 0x00
                            MIGD = 0x00
                        }

                        Return (PBD2) /* \_SB_.NPCF.NPCF.PBD2 */
                    }
                    Case (0x06)
                    {
                        Name (PBD6, Buffer (0x11)
                        {
                             0x00                                             // .
                        })
                        CreateByteField (PBD6, Zero, CCHV)
                        CreateByteField (PBD6, 0x01, CCHB)
                        CreateByteField (PBD6, 0x02, CCTB)
                        CreateByteField (PBD6, 0x03, RES0)
                        CreateByteField (PBD6, 0x04, RES1)
                        CCHV = 0x10
                        CCHB = 0x05
                        CCTB = 0x0C
                        CreateField (PBD6, 0x28, 0x02, F6O0)
                        CreateByteField (PBD6, 0x09, F6MP)
                        CreateByteField (PBD6, 0x0A, F6NP)
                        CreateDWordField (PBD6, 0x0D, F6O2)
                        CreateField (Arg3, 0x28, 0x02, INC6)
                        CreateByteField (Arg3, 0x09, NCHP)
                        Switch (ToInteger (INC6))
                        {
                            Case (0x00)
                            {
                                If ((IOBS != 0x00))
                                {
                                    F6O0 = HPCT /* \_SB_.NPCF.HPCT */
                                    F6MP = CMPL /* \_SB_.NPCF.CMPL */
                                    F6NP = CNPL /* \_SB_.NPCF.CNPL */
                                    F6O2 = IOBS /* \_SB_.NPCF.IOBS */
                                }
                            }
                            Case (0x01)
                            {
                                If ((IOBS != 0x00))
                                {
                                    OperationRegion (NVIO, SystemIO, IOBS, 0x10)
                                    Field (NVIO, ByteAcc, NoLock, Preserve)
                                    {
                                        CPUC,   8
                                    }

                                    CPUC = NCHP /* \_SB_.NPCF.NPCF.NCHP */
                                    F6MP = 0x00
                                    F6NP = 0x00
                                    F6O2 = 0x00
                                }
                            }
                            Default
                            {
                                Return (0x80000002)
                            }

                        }

                        Return (PBD6) /* \_SB_.NPCF.NPCF.PBD6 */
                    }

                }

                Return (0x80000002)
            }
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Name (MMID, Package (0x02)
        {
            Package (0x03)
            {
                Zero, 
                "PS8461", 
                0x00010001
            }, 

            Package (0x03)
            {
                One, 
                "NON-MUX or Error", 
                Zero
            }
        })
        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            If ((DGDS == 0x01))
            {
                Return (Package (0x03)
                {
                    0x8001A450, 
                    0x80016320, 
                    0x80016330
                })
            }
            Else
            {
                Return (Package (0x01)
                {
                    0x8000A450
                })
            }
        }

        OperationRegion (SMIP, SystemIO, 0xB0, One)
        Field (SMIP, ByteAcc, NoLock, Preserve)
        {
            IOB0,   8
        }

        Device (EDP0)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If ((DGDS == 0x01))
                {
                    Return (0x8001A450)
                }
                Else
                {
                    Return (0x8000A450)
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((\_SB.PCI0.LPC0.H_EC.ECRD (RefOf (\_SB.PCI0.LPC0.H_EC.LSTE)) == One))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x1F)
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
            }

            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                Return (Package (0x67)
                {
                    0x50, 
                    0x32, 
                    0x00, 
                    0x01, 
                    0x02, 
                    0x03, 
                    0x04, 
                    0x05, 
                    0x06, 
                    0x07, 
                    0x08, 
                    0x09, 
                    0x0A, 
                    0x0B, 
                    0x0C, 
                    0x0D, 
                    0x0E, 
                    0x0F, 
                    0x10, 
                    0x11, 
                    0x12, 
                    0x13, 
                    0x14, 
                    0x15, 
                    0x16, 
                    0x17, 
                    0x18, 
                    0x19, 
                    0x1A, 
                    0x1B, 
                    0x1C, 
                    0x1D, 
                    0x1E, 
                    0x1F, 
                    0x20, 
                    0x21, 
                    0x22, 
                    0x23, 
                    0x24, 
                    0x25, 
                    0x26, 
                    0x27, 
                    0x28, 
                    0x29, 
                    0x2A, 
                    0x2B, 
                    0x2C, 
                    0x2D, 
                    0x2E, 
                    0x2F, 
                    0x30, 
                    0x31, 
                    0x32, 
                    0x33, 
                    0x34, 
                    0x35, 
                    0x36, 
                    0x37, 
                    0x38, 
                    0x39, 
                    0x3A, 
                    0x3B, 
                    0x3C, 
                    0x3D, 
                    0x3E, 
                    0x3F, 
                    0x40, 
                    0x41, 
                    0x42, 
                    0x43, 
                    0x44, 
                    0x45, 
                    0x46, 
                    0x47, 
                    0x48, 
                    0x49, 
                    0x4A, 
                    0x4B, 
                    0x4C, 
                    0x4D, 
                    0x4E, 
                    0x4F, 
                    0x50, 
                    0x51, 
                    0x52, 
                    0x53, 
                    0x54, 
                    0x55, 
                    0x56, 
                    0x57, 
                    0x58, 
                    0x59, 
                    0x5A, 
                    0x5B, 
                    0x5C, 
                    0x5D, 
                    0x5E, 
                    0x5F, 
                    0x60, 
                    0x61, 
                    0x62, 
                    0x63, 
                    0x64
                })
            }

            Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
            {
            }

            Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
            {
            }

            Method (_DDC, 1, Serialized)  // _DDC: Display Data Current
            {
                If ((DGDS == 0x01))
                {
                    If ((Arg0 == One))
                    {
                        If ((PANT == 0x00))
                        {
                            Return (EDID) /* External reference */
                        }
                        ElseIf ((PANT == 0x01))
                        {
                            Return (EDOR) /* External reference */
                        }
                        ElseIf ((PANT == 0x02))
                        {
                            Return (EDID) /* External reference */
                        }
                        ElseIf ((PANT == 0x03))
                        {
                            Return (EDUD) /* External reference */
                        }
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        If ((PANT == 0x00))
                        {
                            Return (EDID) /* External reference */
                        }
                        ElseIf ((PANT == 0x01))
                        {
                            Return (EDOR) /* External reference */
                        }
                        ElseIf ((PANT == 0x02))
                        {
                            Return (EDID) /* External reference */
                        }
                        ElseIf ((PANT == 0x03))
                        {
                            Return (EDUD) /* External reference */
                        }
                    }

                    Return (Zero)
                }
                Else
                {
                    If ((Arg0 == One))
                    {
                        Return (EDID) /* External reference */
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        If ((PANT == 0x03))
                        {
                            Return (EDUD) /* External reference */
                        }
                        Else
                        {
                            Return (EDID) /* External reference */
                        }
                    }

                    Return (Zero)
                }
            }

            Method (MXDS, 1, NotSerialized)
            {
                Local0 = Arg0
                Local1 = (Local0 & 0x0F)
                Local2 = (Local0 & 0x10)
                If ((Local1 == Zero))
                {
                    If ((M009 (0x84) == Zero))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }
                ElseIf ((Local1 == One))
                {
                    If ((Local2 == 0x10))
                    {
                        M010 (0x84, One)
                    }
                    Else
                    {
                        M010 (0x84, Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (MXDM, 1, NotSerialized)
            {
                Local0 = Arg0
                Local1 = (Local0 & 0x07)
                If ((Local1 == Zero))
                {
                    Local2 = DGMD /* External reference */
                    If (((DGDS == 0x01) || (PANT == 0x00)))
                    {
                        Return (0x00)
                    }

                    Return (Local2)
                }
                ElseIf ((Local1 < 0x05))
                {
                    DGMD = Local1
                    If (((DGDS == 0x01) || (PANT == 0x00)))
                    {
                        DGMD = 0x00
                    }
                }
                Else
                {
                    Return (Zero)
                }

                Return (One)
            }

            Method (MXID, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Local0 = DerefOf (DerefOf (MMID [Zero]) [0x02])
                    Return (Local0)
                }
            }

            Method (LRST, 1, NotSerialized)
            {
                Local0 = Arg0
                Local1 = (Local0 & 0x07)
                If ((Local1 == Zero))
                {
                    If ((M009 (0x1F) == Zero))
                    {
                        Return (One)
                    }
                    ElseIf ((M009 (0x1F) == One))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((Local1 == One))
                {
                    M010 (0x1F, Zero)
                }
                ElseIf ((Local1 == 0x02))
                {
                    M010 (0x1F, One)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (AWMI)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "0x00")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x13, 0x96, 0x3E, 0x60, 0x25, 0xEF, 0x38, 0x43,  // ..>`%.8C
                /* 0008 */  0xA3, 0xD0, 0xC4, 0x61, 0x77, 0x51, 0x6D, 0xB7,  // ...awQm.
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x30, 0x30, 0x01, 0x00   // ..).00..
            })
            Name (WQ00, Buffer (0x037D)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x6D, 0x03, 0x00, 0x00, 0x68, 0x0B, 0x00, 0x00,  // m...h...
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0x59, 0x85, 0x00, 0x01, 0x06, 0x18, 0x42,  // .Y.....B
                /* 0020 */  0x20, 0x82, 0x02, 0x89, 0xC0, 0x82, 0x69, 0x24,  //  .....i$
                /* 0028 */  0xC7, 0x01, 0x0C, 0x46, 0x03, 0x88, 0xE4, 0x40,  // ...F...@
                /* 0030 */  0xC8, 0x05, 0x13, 0x13, 0x20, 0x02, 0x42, 0x5E,  // .... .B^
                /* 0038 */  0x05, 0xD8, 0x14, 0x60, 0x12, 0x44, 0xFD, 0xFB,  // ...`.D..
                /* 0040 */  0x43, 0x94, 0x04, 0x87, 0x12, 0x02, 0x21, 0x89,  // C.....!.
                /* 0048 */  0x02, 0xCC, 0x0B, 0xD0, 0x2D, 0xC0, 0xB0, 0x00,  // ....-...
                /* 0050 */  0xDB, 0x02, 0x4C, 0x0B, 0x70, 0x0C, 0x49, 0xA5,  // ..L.p.I.
                /* 0058 */  0x81, 0x53, 0x02, 0x4B, 0x81, 0x90, 0x50, 0x01,  // .S.K..P.
                /* 0060 */  0xCA, 0x05, 0xF8, 0x16, 0xA0, 0x1D, 0x51, 0x92,  // ......Q.
                /* 0068 */  0x05, 0x58, 0x86, 0x11, 0x81, 0x47, 0x11, 0xD9,  // .X...G..
                /* 0070 */  0x68, 0x1C, 0x1A, 0x3B, 0x0C, 0xCB, 0x04, 0xD3,  // h..;....
                /* 0078 */  0x20, 0x0E, 0xA3, 0x6C, 0x64, 0x11, 0x78, 0x42,  //  ..ld.xB
                /* 0080 */  0x9D, 0x0A, 0x90, 0x2B, 0x40, 0x98, 0x00, 0xF1,  // ...+@...
                /* 0088 */  0xA8, 0xC2, 0x68, 0x0E, 0x8A, 0x8C, 0x27, 0x34,  // ..h...'4
                /* 0090 */  0x46, 0x0C, 0x10, 0x81, 0xED, 0x1C, 0x5B, 0xA3,  // F.....[.
                /* 0098 */  0x38, 0x8D, 0xC2, 0x05, 0x48, 0xC7, 0xD0, 0x08,  // 8...H...
                /* 00A0 */  0x8E, 0xEB, 0x00, 0xB9, 0x20, 0x01, 0x1A, 0x05,  // .... ...
                /* 00A8 */  0x58, 0x07, 0x12, 0x60, 0x34, 0x0C, 0xC1, 0x81,  // X..`4...
                /* 00B0 */  0x1C, 0x01, 0x46, 0x06, 0x84, 0x3C, 0x43, 0x6A,  // ..F..<Cj
                /* 00B8 */  0x68, 0x26, 0xB0, 0x7B, 0x01, 0xDA, 0xC6, 0x22,  // h&.{..."
                /* 00C0 */  0x67, 0xB3, 0xD0, 0x60, 0xA2, 0x34, 0x86, 0x22,  // g..`.4."
                /* 00C8 */  0x5B, 0x30, 0xD2, 0x2C, 0x40, 0x99, 0x00, 0x6B,  // [0.,@..k
                /* 00D0 */  0x28, 0x1A, 0x52, 0xA0, 0x08, 0xC5, 0xA1, 0x68,  // (.R....h
                /* 00D8 */  0x66, 0x41, 0x22, 0x47, 0x8D, 0x72, 0x1C, 0xB1,  // fA"G.r..
                /* 00E0 */  0xA2, 0xDA, 0x1B, 0x82, 0x20, 0x83, 0x84, 0x09,  // .... ...
                /* 00E8 */  0x56, 0x31, 0x8C, 0xEC, 0x0F, 0x82, 0xC4, 0x3B,  // V1.....;
                /* 00F0 */  0x08, 0x48, 0x02, 0x88, 0x22, 0x8D, 0x06, 0x35,  // .H.."..5
                /* 00F8 */  0xF8, 0x04, 0x0F, 0x03, 0x1E, 0xD8, 0x41, 0x1D,  // ......A.
                /* 0100 */  0xDF, 0x69, 0x1D, 0xC3, 0x89, 0x79, 0x26, 0x75,  // .i...y&u
                /* 0108 */  0x9E, 0x02, 0xC8, 0x78, 0x19, 0x56, 0x82, 0x1F,  // ...x.V..
                /* 0110 */  0x03, 0x1F, 0x0B, 0xF0, 0xAE, 0x01, 0x75, 0x1F,  // ......u.
                /* 0118 */  0x78, 0x1A, 0x60, 0xF3, 0x0C, 0x87, 0x19, 0xA2,  // x.`.....
                /* 0120 */  0x47, 0x1C, 0xEE, 0x04, 0x0E, 0x91, 0xFD, 0xFF,  // G.......
                /* 0128 */  0x01, 0x3D, 0xAF, 0x07, 0x01, 0xAC, 0xC3, 0xC9,  // .=......
                /* 0130 */  0x68, 0xD6, 0xA5, 0x0A, 0x30, 0x7B, 0x22, 0x90,  // h...0{".
                /* 0138 */  0x45, 0x20, 0x8D, 0xC7, 0xC3, 0xF7, 0x7C, 0x4E,  // E ....|N
                /* 0140 */  0x38, 0x81, 0xE5, 0x0F, 0x02, 0x35, 0x32, 0x43,  // 8....52C
                /* 0148 */  0xDB, 0xE0, 0xF8, 0xE9, 0xE1, 0xE0, 0xB0, 0x98,  // ........
                /* 0150 */  0x58, 0x08, 0x29, 0x80, 0xD0, 0x78, 0xC0, 0x3F,  // X.)..x.?
                /* 0158 */  0xF1, 0x77, 0x82, 0x08, 0xAF, 0x0A, 0x9E, 0xAF,  // .w......
                /* 0160 */  0xCF, 0x0B, 0x06, 0xC6, 0x0E, 0xC8, 0x7E, 0x05,  // ......~.
                /* 0168 */  0x20, 0x04, 0x8F, 0x76, 0x44, 0x8F, 0x0C, 0x11,  //  ..vD...
                /* 0170 */  0x1E, 0x20, 0xB8, 0xC2, 0xD1, 0x91, 0xC9, 0x15,  // . ......
                /* 0178 */  0x3D, 0x2C, 0xA1, 0xBF, 0x2F, 0x18, 0xE1, 0xF4,  // =,../...
                /* 0180 */  0x8F, 0xE1, 0xCC, 0x7C, 0x34, 0x38, 0x6E, 0x8B,  // ...|48n.
                /* 0188 */  0x3C, 0x39, 0xA0, 0xC7, 0xC0, 0x31, 0x4F, 0xE1,  // <9...1O.
                /* 0190 */  0x88, 0xCE, 0xE7, 0x18, 0x8E, 0x28, 0xCA, 0x69,  // .....(.i
                /* 0198 */  0x1C, 0x92, 0xCF, 0x14, 0x86, 0xF7, 0x51, 0xE2,  // ......Q.
                /* 01A0 */  0xD1, 0xC2, 0x03, 0x38, 0xA7, 0x67, 0x86, 0xB3,  // ...8.g..
                /* 01A8 */  0x7A, 0x1F, 0x30, 0xC1, 0x40, 0x1E, 0xC6, 0xCA,  // z.0.@...
                /* 01B0 */  0x52, 0x3E, 0x09, 0x64, 0x63, 0xB1, 0x26, 0x90,  // R>.dc.&.
                /* 01B8 */  0x2C, 0x08, 0x65, 0xA2, 0xD2, 0x64, 0x70, 0x93,  // ,.e..dp.
                /* 01C0 */  0x82, 0x33, 0xBB, 0x20, 0x47, 0xEF, 0xB3, 0x84,  // .3. G...
                /* 01C8 */  0xD5, 0x03, 0xEB, 0x40, 0xE2, 0x31, 0x58, 0x37,  // ...@.1X7
                /* 01D0 */  0x85, 0x94, 0xD3, 0x68, 0x54, 0x1E, 0x84, 0xB5,  // ...hT...
                /* 01D8 */  0xC2, 0x08, 0xCE, 0x20, 0x3E, 0x2C, 0x38, 0x04,  // ... >,8.
                /* 01E0 */  0x84, 0x9C, 0x9C, 0x08, 0x50, 0xE7, 0x00, 0x5F,  // ....P.._
                /* 01E8 */  0x0C, 0x3C, 0xB8, 0x23, 0x79, 0x33, 0xF0, 0x48,  // .<.#y3.H
                /* 01F0 */  0x82, 0xB2, 0x61, 0xFA, 0x40, 0xC0, 0x0F, 0x28,  // ..a.@..(
                /* 01F8 */  0x86, 0x34, 0xB2, 0xD5, 0x00, 0xD2, 0xFF, 0x3F,  // .4.....?
                /* 0200 */  0x18, 0xBF, 0x0D, 0xBC, 0x7C, 0x98, 0xC0, 0xBA,  // ....|...
                /* 0208 */  0x2E, 0x05, 0xD0, 0x4F, 0x1C, 0x1E, 0xC1, 0x09,  // ...O....
                /* 0210 */  0x3E, 0x66, 0x3C, 0x6B, 0x1C, 0x12, 0xAC, 0x51,  // >f<k...Q
                /* 0218 */  0xE2, 0x86, 0x04, 0xD6, 0xA9, 0x7A, 0x48, 0x60,  // .....zH`
                /* 0220 */  0xD3, 0x77, 0x6C, 0x00, 0x05, 0x90, 0x2F, 0x09,  // .wl.../.
                /* 0228 */  0x56, 0x7A, 0x50, 0xA0, 0x63, 0x08, 0x11, 0x26,  // VzP.c..&
                /* 0230 */  0x9A, 0xD1, 0x79, 0x78, 0x74, 0x0A, 0xE3, 0xB8,  // ..yxt...
                /* 0238 */  0x43, 0xA2, 0x20, 0xBE, 0x14, 0x38, 0xCA, 0x54,  // C. ..8.T
                /* 0240 */  0xD1, 0x33, 0x31, 0xFE, 0x1B, 0x82, 0xAF, 0x0C,  // .31.....
                /* 0248 */  0x98, 0x6B, 0xCC, 0x3B, 0x09, 0xAC, 0x13, 0x43,  // .k.;...C
                /* 0250 */  0xC8, 0x88, 0x9E, 0x86, 0xE1, 0x3C, 0x59, 0x0E,  // .....<Y.
                /* 0258 */  0xE7, 0xEB, 0x00, 0x1F, 0x89, 0xEF, 0x1C, 0xF0,  // ........
                /* 0260 */  0x47, 0x8B, 0x25, 0x28, 0x70, 0xB6, 0x20, 0x87,  // G.%(p. .
                /* 0268 */  0xF7, 0xFF, 0x1F, 0x9E, 0x2E, 0x55, 0x16, 0x6E,  // .....U.n
                /* 0270 */  0x17, 0x74, 0x5C, 0xFC, 0x72, 0xE0, 0x2B, 0x08,  // .t\.r.+.
                /* 0278 */  0xC3, 0x3E, 0xD3, 0xA3, 0x79, 0x45, 0x38, 0xC3,  // .>..yE8.
                /* 0280 */  0xE7, 0x8D, 0x83, 0x7A, 0x3E, 0xF1, 0xB0, 0x0D,  // ...z>...
                /* 0288 */  0xEB, 0x91, 0x72, 0x58, 0xA3, 0x85, 0x3D, 0xE0,  // ..rX..=.
                /* 0290 */  0x57, 0x13, 0x9F, 0x6B, 0x3C, 0x33, 0x63, 0x84,  // W..k<3c.
                /* 0298 */  0xF5, 0x85, 0x06, 0x1C, 0x80, 0x78, 0xEF, 0x57,  // .....x.W
                /* 02A0 */  0x0F, 0x32, 0x01, 0x03, 0xB2, 0x63, 0x80, 0xEF,  // .2...c..
                /* 02A8 */  0x48, 0xE0, 0xF0, 0x38, 0x35, 0xE2, 0x6B, 0x9E,  // H..85.k.
                /* 02B0 */  0x02, 0xF1, 0x2C, 0x4E, 0xF5, 0x94, 0x63, 0x3C,  // ..,N..c<
                /* 02B8 */  0xC1, 0x3C, 0x8E, 0xC0, 0xC0, 0x3A, 0x35, 0xDF,  // .<...:5.
                /* 02C0 */  0x2C, 0x18, 0xCC, 0x7B, 0x10, 0x83, 0x78, 0x10,  // ,..{..x.
                /* 02C8 */  0x88, 0x92, 0xC0, 0x39, 0xAF, 0x28, 0xA8, 0x53,  // ...9.(.S
                /* 02D0 */  0x81, 0x73, 0x5D, 0x51, 0x40, 0x31, 0x9A, 0x37,  // .s]Q@1.7
                /* 02D8 */  0x05, 0x83, 0xBD, 0x18, 0x99, 0xC0, 0xFA, 0xEF,  // ........
                /* 02E0 */  0x28, 0x28, 0xE5, 0x14, 0xD2, 0x7E, 0x47, 0x41,  // ((...~GA
                /* 02E8 */  0xA9, 0xBD, 0xA3, 0x50, 0x10, 0x1F, 0x06, 0x9C,  // ...P....
                /* 02F0 */  0xE2, 0x1C, 0x81, 0xD6, 0x71, 0x47, 0x41, 0x4E,  // ....qGAN
                /* 02F8 */  0xC8, 0x87, 0x14, 0xE0, 0xF5, 0xFF, 0x3F, 0x45,  // ......?E
                /* 0300 */  0xE0, 0xA7, 0x04, 0xFB, 0x76, 0xF5, 0x92, 0x02,  // ....v...
                /* 0308 */  0xF0, 0x54, 0xC6, 0x25, 0x05, 0x34, 0xFF, 0xFF,  // .T.%.4..
                /* 0310 */  0x4B, 0x0A, 0x1F, 0x9B, 0x2F, 0x29, 0xC0, 0xF5,  // K.../)..
                /* 0318 */  0x1C, 0x88, 0xBB, 0xA4, 0x80, 0x0B, 0x34, 0x5A,  // ......4Z
                /* 0320 */  0xD0, 0xB3, 0xF2, 0x5C, 0x1E, 0x49, 0x02, 0xBD,  // ...\.I..
                /* 0328 */  0x92, 0xC0, 0xC1, 0x7A, 0x26, 0xC1, 0x2A, 0xB4,  // ...z&.*.
                /* 0330 */  0xE9, 0x53, 0xA3, 0x51, 0xAB, 0x06, 0x65, 0x6A,  // .S.Q..ej
                /* 0338 */  0x94, 0x69, 0x50, 0xAB, 0x4F, 0xA5, 0xC6, 0x8C,  // .iP.O...
                /* 0340 */  0x9D, 0x32, 0x2C, 0x61, 0xB1, 0x1A, 0xB6, 0x03,  // .2,a....
                /* 0348 */  0x80, 0xD0, 0xF0, 0x14, 0x32, 0x02, 0x22, 0x25,  // ....2."%
                /* 0350 */  0x2F, 0x42, 0x81, 0x11, 0x10, 0x01, 0x39, 0x0D,  // /B....9.
                /* 0358 */  0x10, 0x55, 0xFE, 0x06, 0x10, 0x90, 0x73, 0x80,  // .U....s.
                /* 0360 */  0x08, 0xC8, 0x21, 0x4F, 0x6B, 0x02, 0x72, 0x62,  // ..!Ok.rb
                /* 0368 */  0x10, 0x01, 0x59, 0xE9, 0x1A, 0x05, 0x64, 0xD9,  // ..Y...d.
                /* 0370 */  0x20, 0x02, 0xB2, 0x44, 0x13, 0x40, 0x4C, 0x30,  //  ..D.@L0
                /* 0378 */  0x88, 0x80, 0xFC, 0xFF, 0x07                     // .....
            })
            Method (WMAA, 3, Serialized)
            {
                Name (TEMP, Zero)
                CreateByteField (Arg2, Zero, MODF)
                CreateDWordField (Arg2, 0x04, LEDB)
                While (One)
                {
                    TEMP = Arg1
                    If ((TEMP == One))
                    {
                        If ((MODF == Zero))
                        {
                            LEDB = (\_SB.PCI0.LPC0.H_EC.BPWM & 0x0FFF)
                            Return (LEDB) /* \_SB_.PCI0.AWMI.WMAA.LEDB */
                        }
                        ElseIf ((MODF == One))
                        {
                            LEDB |= 0x8000
                            \_SB.PCI0.LPC0.H_EC.BPWM = LEDB /* \_SB_.PCI0.AWMI.WMAA.LEDB */
                            If ((\_SB.PCI0.LPC0.H_EC.BPWM == 0x01))
                            {
                                \_SB.PCI0.LPC0.H_EC.BPWM = 0x00
                            }

                            M010 (0x76, One)
                            Return (Zero)
                        }
                        ElseIf ((MODF == 0x02))
                        {
                            Return (0x64)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }
                    ElseIf ((TEMP == 0x02))
                    {
                        If ((MODF == Zero))
                        {
                            Return (0x02)
                        }
                        ElseIf ((MODF == One))
                        {
                            If ((LEDB < 0x03))
                            {
                                CPSF = LEDB /* \_SB_.PCI0.AWMI.WMAA.LEDB */
                                Return (Zero)
                            }

                            Return (One)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }
                    Else
                    {
                        Return (One)
                    }

                    Break
                }
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "AmdTable", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.LID_._LID, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M012, MethodObj)    // 5 Arguments
    External (M013, MethodObj)    // 4 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M021, MethodObj)    // 4 Arguments
    External (M023, MethodObj)    // 3 Arguments
    External (M024, MethodObj)    // 3 Arguments
    External (M025, MethodObj)    // 4 Arguments
    External (M026, MethodObj)    // 3 Arguments
    External (M037, DeviceObj)
    External (M043, MethodObj)    // 3 Arguments
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M111, MethodObj)    // 2 Arguments
    External (M112, MethodObj)    // 2 Arguments
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)

    Scope (\_SB)
    {
        Name (MACO, 0x00)
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M189, Buffer (0x0100) {})
        Name (M190, 0xFFFFFFFF)
        Name (M191, 0xFFFFFFFF)
        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (PX00 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            CreateWordField (M189, 0x00, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x00
            M158 = 0x00
            M160 = 0x00
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = 0x01
            M160 = M098 /* External reference */
            If (M098)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local0 = M019 (M095, M094, M093, 0x2C)
                Local1 = M019 (M095, M094, (M093 + 0x01), 0x2C)
                If ((Local0 != Local5))
                {
                    M190 = Local0
                }

                If ((Local1 != Local5))
                {
                    M191 = Local1
                }
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x0003FC80
            M162 = M099 /* External reference */
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & 0x01)
            Local7 = Buffer (0x05) {}
            CreateWordField (Local7, 0x00, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = 0x00
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, 0x00)
            Local0 = M049 (M133, 0x11)
            Local6 = M113 (Local0)
            M023 (0x00, M091, M090)
            If ((M192 && Local6))
            {
                M000 (0x86)
                M112 (Local0, 0x00)
                M111 (Local0, 0x01)
                Sleep (0x20)
                M112 (Local0, 0x02)
                M112 (Local0, 0x01)
                M000 (0x87)
                HPOK = 0x00
                Sleep (0x14)
                M201 = 0x01
                Local6 = \_SB.ALIB (0x06, Local7)
                Local2 = 0x00
                While ((Local2 < 0x0F))
                {
                    M023 (0x00, M091, M090)
                    Local4 = 0x01
                    Local5 = 0xC8
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (0x00, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                        {
                            Local4 = 0x00
                        }
                        Else
                        {
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    If (!Local4)
                    {
                        Local5 = M024 (0x00, M091, M090)
                        If (Local5)
                        {
                            M026 (0x00, M091, M090)
                            Sleep (0x05)
                            Local2++
                        }
                        Else
                        {
                            Local0 = 0x00
                            If ((M025 (0x00, M091, M090, 0x00) == Ones))
                            {
                                Local0 = 0x01
                            }

                            If (Local0)
                            {
                                M111 (M049 (M133, 0x17), 0x01)
                                M111 (M049 (M133, 0x18), 0x01)
                                HPOK = 0x01
                                Local2 = 0x10
                            }
                            Else
                            {
                                HPOK = 0x00
                                Local2 = 0x10
                            }
                        }
                    }
                    Else
                    {
                        Local2 = 0x10
                    }
                }

                If (!HPOK)
                {
                    M000 (0x88)
                    Local1 = M019 (M095, M094, M093, 0x00)
                    Sleep (0x0A)
                    Local4 = 0x01
                    Local5 = 0x05
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (0x00, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                        {
                            Local4 = 0x00
                        }
                        Else
                        {
                            Local0 = M019 (M095, M094, M093, 0x00)
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    M201 = 0x00
                    \_SB.ALIB (0x06, Local7)
                }

                If ((M097 != 0x00))
                {
                    Local0 = M019 (0x00, M091, M090, 0x54)
                    M020 (0x00, M091, M090, 0x54, (Local0 & 0xFFFF7FFC))
                    M232 (M097, 0x00, 0x10)
                    M020 (0x00, M091, M090, 0x54, (Local0 & 0xFFFF7FFF))
                }

                M000 (0x89)
            }
            Else
            {
                M000 (0x8A)
                M201 = 0x00
                \_SB.ALIB (0x06, Local7)
                M000 (0x8B)
                M111 (M049 (M133, 0x17), 0x00)
                M111 (M049 (M133, 0x18), 0x00)
                M112 (Local0, 0x00)
                Sleep (0x0A)
                M111 (Local0, 0x00)
                M023 (0x00, M091, M090)
                Local1 = M019 (M095, M094, M093, 0x00)
                Sleep (0x0A)
                Local4 = 0x01
                Local5 = 0x05
                While ((Local4 && Local5))
                {
                    Local0 = M021 (0x00, M091, M090, 0xA5)
                    Local0 &= 0x7F
                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                    {
                        Local4 = 0x00
                    }
                    Else
                    {
                        Local1 = M019 (M095, M094, M093, 0x00)
                        Sleep (0x05)
                        Local5--
                    }
                }

                HPOK = 0x02
                M000 (0x8C)
            }

            If (HPOK)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local1 = M019 (0x00, M091, M090, 0x54)
                M020 (0x00, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                Local0 = M019 (M095, M094, M093, 0x00)
                If (((HPOK == 0x01) && (Local0 != Local5)))
                {
                    M020 (M095, M094, M093, 0x4C, M190)
                    Sleep (0x0A)
                    If ((M191 != Local5))
                    {
                        M020 (M095, M094, (M093 + 0x01), 0x4C, M191)
                    }

                    Sleep (0x0A)
                }

                M020 (0x00, M091, M090, 0x54, (Local1 & 0xFFFF7FFF))
            }
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & 0x01)
            If (M195)
            {
                M111 (M049 (M133, 0x17), 0x01)
            }
            Else
            {
                M111 (M049 (M133, 0x17), 0x00)
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & 0x01)
            If (M196)
            {
                M111 (M049 (M133, 0x18), 0x01)
            }
            Else
            {
                M111 (M049 (M133, 0x18), 0x00)
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, 0x00, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x19)
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX08.M157 */
            Local1 = 0x00
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x1A + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, 0x00, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x7E)
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX09.M157 */
            Local1 = 0x00
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x7F + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & 0x01)
            \_SB.MACO = (Arg0 & 0x01)
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & 0x01)
            Local2 = M162 /* \_SB_.PCI0.GP17.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                Local0 = M049 (M131, 0x10)
                Local1 = M049 (M131, 0x11)
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, 0x00, 0x01, Local2)
            }
        }

        Name (ATIB, Buffer (0x0100) {})
        Method (ATIF, 2, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (AF00 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }
            Else
            {
                CreateWordField (ATIB, 0x00, M157)
                CreateWordField (ATIB, 0x02, M158)
                CreateDWordField (ATIB, 0x04, M159)
                CreateDWordField (ATIB, 0x08, M160)
                M157 = 0x00
                M158 = 0x00
                M159 = 0x00
                M160 = 0x00
                Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
            }
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, 0x00, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = 0x01
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, 0x00, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            Local0 = (M103 & 0xFF000000)
            Local1 = (M103 & 0x03)
            If ((Local1 == 0x02))
            {
                M157 = 0x0B
                M161 = 0x03
                M162 = Local1
                M163 = Local0
            }
            Else
            {
                M157 = 0x0A
                M161 = 0x03
                M162 = M103 /* External reference */
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, 0x00)
        Name (M211, 0x00)
        Name (M212, 0x00)
        Name (M213, 0x00)
        Name (M214, 0x00)
        Name (M215, 0x00)
        Name (M303, 0x00)
        Name (M304, 0x00)
        Name (SSDM, 0x0A)
        Name (SCDY, 0x00)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, 0x00, M165)
            CreateBitField (M164, 0x01, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, 0x00, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            M157 = 0x0D
            M174 = M164 /* \_SB_.PCI0.GP17.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GP17.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GP17.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GP17.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GP17.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GP17.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GP17.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GP17.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, 0x00, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, 0x00)
            M187 = M049 (M133, 0xBF)
            Local1 = 0x00
            While ((Local1 < M187))
            {
                Local2 = M049 (M133, (0xC0 + Local1))
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GP17.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GP17.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local2 &= 0xFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GP17.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = 0x00
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GP17.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, 0x00, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = 0x00
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local1 = (Local0 ^ 0x01)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            Local0 = M013 (M133, 0xD4, 0x00, 0x10)
            If (Local0)
            {
                Local1 = 0x00
                While ((Local1 < Local0))
                {
                    Local2 = M049 (M133, (0xD4 + Local1))
                    ATIB [Local1] = Local2
                    Local1++
                }
            }
            Else
            {
                Local3 = M043 (0x00, Arg0, 0x00)
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [0x00] = 0x05
                    ATIB [0x01] = 0x00
                    ATIB [0x02] = 0x00
                    ATIB [0x03] = 0x00
                    ATIB [0x04] = 0x02
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            If ((M101 & 0x01))
            {
                CreateBitField (M164, 0x00, M165)
                M165 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN1, 1, Serialized)
        {
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, 0x01, M166)
                M166 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN2, 2, Serialized)
        {
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN3, 2, Serialized)
        {
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN4, 1, Serialized)
        {
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M215 = Local0
                If ((Local0 == Local1)) {}
                Else
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    Notify (VGA, 0x81) // Information Change
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN6, 0, Serialized)
        {
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN7, 1, Serialized)
        {
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN8, 0, Serialized)
        {
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
            }
        }

        Method (AFNC, 2, Serialized)
        {
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & 0xFFFFFFFF)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                Notify (VGA, 0x81) // Information Change
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "AmdTable", 0x00000001)
{
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M250, MethodObj)    // 5 Arguments
    External (M251, FieldUnitObj)
    External (M276, MethodObj)    // 0 Arguments
    External (M277, MethodObj)    // 0 Arguments
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)

    Name (M278, 0x01)
    Name (M279, 0x01)
    Name (M27A, 0x01)
    Name (APGE, Zero)
    One
    Name (ACGE, 0x01)
    Method (M276, 0, NotSerialized)
    {
        If ((M27A == 0x00))
        {
            M278 = 0x00
        }

        If (((M278 == 0x01) || (M279 == 0x01)))
        {
            Local0 = M017 (0x00, 0x08, 0x01, 0x19, 0x00, 0x08)
            Local1 = M019 (Local0, 0x00, 0x05, 0x00)
            If ((M27A == 0x00))
            {
                Local1 = 0x15E21022
            }

            If (((Local0 != 0x00) && (Local0 != 0xFF)))
            {
                If ((Local1 != 0xFFFFFFFF))
                {
                    M000 (0xB4)
                    If ((ACGE != 0x00))
                    {
                        M250 (0x00, 0x00, 0x00, 0x03B10564, 0x00)
                        M250 (0x00, 0x00, 0x00, 0x03B10998, 0xC8)
                        M250 (0x00, 0x00, 0x00, 0x03B10528, 0x59)
                        Local4 = M249 (0x00, 0x00, 0x00, 0x03B10564)
                        While ((Local4 == 0x00))
                        {
                            Local4 = M249 (0x00, 0x00, 0x00, 0x03B10564)
                            If ((Local4 != 0x00))
                            {
                                Break
                            }
                        }
                    }

                    If ((APGE != 0x00))
                    {
                        M250 (0x00, 0x00, 0x00, 0x0900E784, 0x0103)
                        Local4 = 0x01
                        Local5 = 0x64
                        While (((Local4 != 0x00) && Local5))
                        {
                            Local4 = M249 (0x00, 0x00, 0x00, 0x0900E784)
                            Local4 |= 0x06
                            Local4 &= 0xFFFFFF0F
                            M250 (0x00, 0x00, 0x00, 0x0900E784, Local4)
                            Local4 = M249 (0x00, 0x00, 0x00, 0x0900E78C)
                            Local4 &= 0x03
                            Local5--
                            Stall (0x63)
                        }

                        M250 (0x00, 0x00, 0x00, 0x0900E784, 0x00)
                        M000 (0xB5)
                    }
                }
            }
        }
    }

    Method (M277, 0, NotSerialized)
    {
        If ((M27A == 0x00))
        {
            M278 = 0x00
        }

        If (((M278 == 0x00) && (M279 == 0x00)))
        {
            Local0 = M017 (0x00, 0x08, 0x01, 0x19, 0x00, 0x08)
            Local1 = M019 (Local0, 0x00, 0x05, 0x00)
            If ((M27A == 0x00))
            {
                Local1 = 0x15E21022
            }

            If (((Local0 != 0x00) && (Local0 != 0xFF)))
            {
                If ((Local1 != 0xFFFFFFFF))
                {
                    M000 (0xB6)
                    If ((ACGE != 0x00))
                    {
                        M250 (0x00, 0x00, 0x00, 0x03B10564, 0x00)
                        M250 (0x00, 0x00, 0x00, 0x03B10998, 0x00)
                        M250 (0x00, 0x00, 0x00, 0x03B10528, 0x59)
                        Local4 = M249 (0x00, 0x00, 0x00, 0x03B10564)
                        While ((Local4 == 0x00))
                        {
                            Local4 = M249 (0x00, 0x00, 0x00, 0x03B10564)
                            If ((Local4 != 0x00))
                            {
                                Break
                            }
                        }
                    }

                    If ((APGE != 0x00))
                    {
                        M250 (0x00, 0x00, 0x00, 0x0900E784, 0x0101)
                        Local4 = 0x01
                        Local5 = 0x64
                        While (((Local4 != 0x02) && Local5))
                        {
                            Local4 = M249 (0x00, 0x00, 0x00, 0x0900E784)
                            Local4 |= 0x06
                            Local4 &= 0xFFFFFF0F
                            M250 (0x00, 0x00, 0x00, 0x0900E784, Local4)
                            Local4 = M249 (0x00, 0x00, 0x00, 0x0900E78C)
                            Local4 &= 0x03
                            Local5--
                            Stall (0x63)
                        }

                        M250 (0x00, 0x00, 0x00, 0x0900E784, 0x00)
                        M000 (0xB7)
                    }
                }
            }
        }
    }

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M278 = 0x01
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M278 = 0x00
            M277 ()
        }

        Method (MSG0, 3, Serialized)
        {
            M000 (0x5511)
            OperationRegion (VARM, SystemIO, 0x80, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            If ((Arg2 != 0x09))
            {
                M000 (0x5518)
                M250 (0x00, 0x00, 0x00, 0x00058A74, Arg0)
                M250 (0x00, 0x00, 0x00, 0x00058A54, Arg1)
                M250 (0x00, 0x00, 0x00, 0x00058A14, Arg2)
                Local0 = M249 (0x00, 0x00, 0x00, 0x00058A74)
                While ((Local0 == 0x00))
                {
                    Local0 = M249 (0x00, 0x00, 0x00, 0x00058A74)
                    If ((Local0 != 0x00))
                    {
                        Break
                    }
                }

                M000 (0x5519)
                Local1 = M249 (0x00, 0x00, 0x00, 0x00058A54)
                Return (Local1)
            }

            Name (MBOX, Buffer (0x04) {})
            Local0 = M249 (0x00, 0x00, 0x00, 0x03810570)
            VARR = Local0
            MBOX = Local0
            CreateWordField (MBOX, 0x00, STAS)
            CreateByteField (MBOX, 0x02, CMDI)
            CreateField (MBOX, 0x18, 0x05, RESV)
            CreateBitField (MBOX, 0x1D, RSET)
            CreateBitField (MBOX, 0x1E, RCOV)
            CreateBitField (MBOX, 0x1F, REDY)
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While (((REDY != 0x01) || (CMDI != 0x00)))
            {
                Local0 = M249 (0x00, 0x00, 0x00, 0x03810570)
                MBOX = Local0
                M000 (0x5516)
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            Local0 = 0x00
            MBOX = Local0
            REDY = 0x00
            CMDI = 0x33
            M000 (0x5514)
            Local0 = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            VARR = Local0
            M250 (0x00, 0x00, 0x00, 0x03810570, Local0)
            Sleep (0x01)
            M000 (0x5515)
            Local0 = M249 (0x00, 0x00, 0x00, 0x03810570)
            MBOX = Local0
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While ((CMDI != 0x00))
            {
                Local0 = M249 (0x00, 0x00, 0x00, 0x03810570)
                MBOX = Local0
                M000 (0x5517)
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            If ((STAS != 0x00))
            {
                M000 (0x5513)
            }

            M000 (0x5512)
            Return (Local0)
        }
    }

    Scope (\_SB.PCI0.GP17.AZAL)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M279 = 0x01
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M279 = 0x00
            M277 ()
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "AmdTable", 0x00000001)
{
    External (_SB_.PCI0, DeviceObj)

    Scope (\_SB.PCI0)
    {
        Device (P010)
        {
            Name (_ADR, 0x00010000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P020)
        {
            Name (_ADR, 0x00020000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P080)
        {
            Name (_ADR, 0x00080000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P180)
        {
            Name (_ADR, 0x00180000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P181)
        {
            Name (_ADR, 0x00180001)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P182)
        {
            Name (_ADR, 0x00180002)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P183)
        {
            Name (_ADR, 0x00180003)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P184)
        {
            Name (_ADR, 0x00180004)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P185)
        {
            Name (_ADR, 0x00180005)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P186)
        {
            Name (_ADR, 0x00180006)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P187)
        {
            Name (_ADR, 0x00180007)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "AmdTable", 0x00000001)
{
    External (_GPE, DeviceObj)
    External (_GPE.SP00, MethodObj)    // 0 Arguments
    External (_GPE.SP01, MethodObj)    // 0 Arguments
    External (_GPE.SP02, MethodObj)    // 0 Arguments
    External (_GPE.SP03, MethodObj)    // 0 Arguments
    External (_GPE.SP04, MethodObj)    // 0 Arguments
    External (_GPE.SP05, MethodObj)    // 0 Arguments
    External (_GPE.SP06, MethodObj)    // 0 Arguments
    External (_GPE.SP07, MethodObj)    // 0 Arguments
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M127, DeviceObj)
    External (MOEM, MethodObj)    // 3 Arguments

    OperationRegion (CPNV, SystemMemory, 0xCD368018, 0x000100D8)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, 0x00, M286)
        CreateByteField (M285, 0x01, M287)
        CreateWordField (M285, 0x02, M288)
        If ((ToInteger (M286) == 0x01))
        {
            Local0 = (Arg0 + 0xB0000C00)
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == 0x01))
            {
                OperationRegion (VARO, SystemIO, Local1, 0x01)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, 0x00, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, 0x00, 0x20, Arg4)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == 0x00))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != 0x00))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == 0x00))
        {
            Local0 = 0x00
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == 0xFFFFFFFF))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == 0x00))
        {
            Local0 = 0x00
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != 0xFFFFFFFF))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, 0x01, 0x00)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, 0x01, 0x01)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, 0x01, 0x00)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, 0x00, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, 0x01, 0x01)
        Local1 = 0x64
        Local2 = 0x01
        While ((Local1 && Local2))
        {
            Sleep (0x01)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = 0x00
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, 0x01, 0x00)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= 0x01
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, 0x00)
        Local3 >>= Local2
        Local3 &= 0x01
        Return (Local3)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= 0x01
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, 0x01)
        Local3 &= (0xFFFFFFFF ^ (0x01 << Local2))
        Local3 |= (Arg1 << Local2)
        M410 (Local0, Local1, 0x01, Local3)
    }

    Method (M440, 1, Serialized)
    {
        M012 (0xFEC30000, 0x00, Arg0, 0x01, 0x00)
        Local0 = M011 (0xFEC30000, 0x04, Arg0, 0x01)
        Return (Local0)
    }

    Method (M441, 2, Serialized)
    {
        M012 (0xFEC30000, 0x00, Arg0, 0x01, 0x01)
        M012 (0xFEC30000, 0x08, Arg0, 0x01, Arg1)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = 0x00
        If (((Local0 == 0x00) || (Local0 == 0x01)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == 0x00))
                {
                    If ((Local0 == 0x00))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), 0x00, 
                            0x01)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), 0x00, 
                            0x01)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= 0x01
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == 0x00))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= 0x01
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, 0x01)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= 0x01
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= 0x01
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == 0x01))
            {
                Local2 = M038 ((Local1 + 0x08))
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Local1)
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        If (((Local0 == 0x00) || (Local0 == 0x01)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == 0x00))
                {
                    If ((Local0 == 0x00))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= 0x01
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == 0x00))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, 0x01, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, 0x01, 0x00)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= 0x01
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == 0x01))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Local1, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, 0x01))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), 0x00, 0x01))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, 0x00, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), 0x01))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, 0x00, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), 0x01, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x01)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x01)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, 0x00, 0x00, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0xFF
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M011 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, 0x00, 0x00, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = 0x00
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
        While ((Local1 != 0x00))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
            If (((Local2 == 0x00) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, 0x01)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, 0x01)
                If (((Local3 == 0x01) && (Local4 == 0x01)))
                {
                    Local0 = 0x01
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x01), 0x00, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = 0x00
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
        While ((Local1 != 0x00))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
            If (((Local2 == 0x00) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x01), 0x00, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = 0x00
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
        While ((Local1 != 0x00))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
            If (((Local2 == 0x00) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x00, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x01), 0x00, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
        While (((Local1 != 0x00) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
            If (((Local2 == 0x00) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x00, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x01), 0x00, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, 0x00, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, 0x00, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, 0x00, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, 0x00, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, 0x00, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = 0x00
        If ((Arg0 == 0x15))
        {
            Local0 = 0x01
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == 0x00))
        {
            If ((Arg1 == 0x00))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x00)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x00)
            }

            If ((Arg1 == 0x01))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFDFFF, 0x00)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFDFD, 0x00)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x00)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x00)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFF7FFF, 0x00)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFF7F7, 0x00)
            }

            Sleep (0x01)
        }

        If ((Arg0 == 0x01))
        {
            If ((Arg1 == 0x00))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == 0x01))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (0x01)
        }

        If ((Arg0 == 0x00))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > 0x00) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (0x01)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (0x00, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (0x00, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, 0x01)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (0x01)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (0x00, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x01)
        M020 (0x00, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, 0x00)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (0x01)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                        If ((Local3 != 0x00))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, 0x00, 0x08)
                            If ((Local4 == 0x00))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == 0x01))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)) {}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, 0x00, 0x08)
                        If ((Local4 == 0x00))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == 0x01))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)) {}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = 0x00
                    Local2 = 0x01
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                        Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, 0x00, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == 0x00))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        If (((Local7 >> 0x10) > 0x00))
                                        {
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                            }
                                            Else
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            }

                                            Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << 0x01)))
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                            }
                                            Else
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                            }
                                        }
                                        ElseIf ((Local2 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), 0x01, ((Local2 - 0x04) * 0x02
                                                ), 0x02, 0x00)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), 0x00, (Local2 * 0x02), 0x02, 0x00)
                                        }
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            0x01) * 0x04), 0x04, 0x00)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == 0x01))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            If (((Local7 >> 0x10) > 0x00))
                                            {
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                }
                                                Else
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                }

                                                Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << 0x01)))
                                                Local6 |= (0x03 << (Local2 << 0x01))
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                }
                                                Else
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                }
                                            }
                                            ElseIf ((Local2 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), 0x01, ((Local2 - 0x04) * 0x02
                                                    ), 0x02, 0x03)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), 0x00, (Local2 * 0x02), 0x02, 0x03)
                                            }
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                0x01) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (0x00, M013 ((Local0 + Local1), 0x05, 0x00, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, 0x00, 0x08), 0x19, 0x00, 0x08)
                                        If ((M265 (Local6, 0x00, 0x00) == 0x01))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                If (((Local7 >> 0x10) > 0x00))
                                                {
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                    }
                                                    Else
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                    }

                                                    Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << 0x01)))
                                                    Local6 |= (Local3 << (Local2 << 0x01))
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                    }
                                                    Else
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                    }
                                                }
                                                ElseIf ((Local2 >= 0x04))
                                                {
                                                    M012 ((M084 + 0x0E00), 0x01, ((Local2 - 0x04) * 0x02
                                                        ), 0x02, Local3)
                                                }
                                                Else
                                                {
                                                    M012 ((M084 + 0x0E00), 0x00, (Local2 * 0x02), 0x02, Local3)
                                                }
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    0x01) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), 0x00, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        0x01) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = 0x01
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                    Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, 0x00, 0x08)
                            If ((Local4 == 0x00))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == 0x01))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                                Local7 = M009 (Local5)
                                Local4 = 0x03F2
                                While (((Local4 > 0x00) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - 0x01)
                                    Stall (0x63)
                                    Local7 = M009 (Local5)
                                }
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = 0x00
        If ((Arg0 != 0x00))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = 0x01
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                    Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 (Local5) == Local6))
                            {
                                Local7 = 0x01
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = M108 /* \M108 */
            Local7 = 0x01
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = 0x01
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                        If ((Local3 == 0x00))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x01))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, 0x00, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, 0x00, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = 0x00
        }

        If (Local7)
        {
            Local7 = 0x01
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = 0x00
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05) {})
            CreateWordField (M115, 0x00, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = 0x00
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == 0x00))
            {
                If ((Arg3 != 0x01))
                {
                    M120 = 0x00
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != 0x01))
                {
                    M120 = 0x01
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (0x00, Arg0, Arg1, 0x19, 0x00, 0x08)
                If (((Local0 != 0x00) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, 0x00, 0x00, 0x00)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != 0x00) && (Local1 != Local2)))
                    {
                        Local7 = 0x01
                    }
                }
            }
        }
        ElseIf ((Arg2 == 0x00))
        {
            M002 (0x01, Arg1)
        }
        Else
        {
            M002 (0x00, Arg1)
            Local0 = M017 (0x00, Arg0, Arg1, 0x19, 0x00, 0x08)
            If (((Local0 != 0x00) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, 0x00, 0x00, 0x00)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != 0x00) && (Local1 != Local2)))
                {
                    Local7 = 0x01
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = 0x00
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), 0x00, 0x00, 0x08)
                    Local3 = M011 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, 0x00, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (0xFFFFFFFF)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = 0x00
        If ((M047 == Ones))
        {
            M047 = 0x00
            M046 = 0x00
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = 0x01
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = 0x01
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = 0x01
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = 0x01
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = 0x01
                }
            }
        }

        If ((M046 == 0x01))
        {
            Local0 = 0x01
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = 0x00
        If ((Arg0 != 0x00))
        {
            Local0 = M011 (Arg0, Arg1, 0x00, 0x08)
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = 0x00
        If ((Arg0 != 0x00))
        {
            Local0 = M011 (Arg0, Arg1, 0x00, 0x08)
            Local1 = M011 (Arg0, (Arg1 + 0x01), 0x00, 0x08)
            Local0 |= (Local1 << 0x08)
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = 0x00
        If ((Arg0 != 0x00))
        {
            Local0 = M011 (Arg0, Arg1, 0x00, 0x08)
            Local1 = M011 (Arg0, (Arg1 + 0x01), 0x00, 0x08)
            Local2 = M011 (Arg0, (Arg1 + 0x02), 0x00, 0x08)
            Local3 = M011 (Arg0, (Arg1 + 0x03), 0x00, 0x08)
            Local0 |= (Local1 << 0x08)
            Local0 |= (Local2 << 0x10)
            Local0 |= (Local3 << 0x18)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > 0x00))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (0x00)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (0x00)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == 0x00))
            {
                Return (M017 (0x00, 0x07, 0x01, 0x19, 0x00, 0x08))
            }
            Else
            {
                Return (M017 (0x00, 0x08, 0x01, 0x19, 0x00, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (0x00, 0x08, (Arg0 + 0x01), 0x19, 0x00, 0x08))
            }
            ElseIf ((Arg0 == 0x00))
            {
                Return (M017 (0x00, 0x07, 0x01, 0x19, 0x00, 0x08))
            }
            Else
            {
                Return (M017 (0x00, 0x08, Arg0, 0x19, 0x00, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == 0x00))
            {
                Return (M017 (0x00, 0x08, 0x01, 0x19, 0x00, 0x08))
            }
            Else
            {
                Return (M017 (0x00, 0x08, 0x02, 0x19, 0x00, 0x08))
            }
        }
        Else
        {
            Return (0x00)
        }
    }

    Method (M401, 2, NotSerialized)
    {
        Local0 = (Arg0 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg1 & 0x07))
        Local1 = 0x00
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x07
        }
        Else
        {
            Local2 = 0x0A
        }

        Local3 = 0x14301000
        Local4 = M249 (0x00, 0x00, 0x00, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (0x00, 0x00, 0x00, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M402, 2, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local0 = M249 (0x00, 0x00, 0x00, 0x11180188)
                Local0 &= 0xFFFFDFFF
                M250 (0x00, 0x00, 0x00, 0x11180188, (Local0 | 0x2000))
            }

            Local1 = (M019 (0x00, 0x00, 0x00, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg0 << 0x13) | (Arg1 << 0x10))
            Local1 |= Local2
            M020 (0x00, 0x00, 0x00, 0x84, (Local1 | 0x0100))
            M020 (0x00, 0x00, 0x00, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (0x00, 0x00, 0x00, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > 0x00) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - 0x01)
                    Stall (0x63)
                    Local3 = M019 (0x00, 0x00, 0x00, 0x84)
                }
            }

            If (((M085 == 0x0D) && (Local4 >= 0x03)))
            {
                Local2 = (0x11240294 + ((Local4 - 0x03) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140294 + (Local4 << 0x0C))
            }

            Local3 = M249 (0x00, 0x00, 0x00, Local2)
            Local5 = 0x4EEA
            While (((Local5 > 0x00) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - 0x01)
                Stall (0x63)
                Local3 = M249 (0x00, 0x00, 0x00, Local2)
            }

            M020 (0x00, 0x00, 0x00, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (0x00, 0x00, 0x00, 0x11180188, Local0)
            }
        }
    }

    Method (M403, 3, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 == 0x0D) && (Local4 >= 0x03)))
            {
                Local2 = (0x11240280 + ((Local4 - 0x03) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }

            Local0 = M249 (0x00, 0x00, 0x00, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg2
            Local0 |= (Local1 << 0x16)
            M250 (0x00, 0x00, 0x00, Local2, Local0)
        }
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > 0x00) || (Arg1 > 0x00)) || ((Arg2 > 
                0x00) || (Arg3 > 0x00))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 <<= (Local1 * 0x02)
                Local0 &= 0x03
            }
            ElseIf ((Local1 >= 0x04))
            {
                Local0 = M011 ((M084 + 0x0E00), 0x01, ((Local1 - 0x04
                    ) * 0x02), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), 0x00, (Local1 * 0x02), 
                    0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 / 0x02), (
                (Arg4 & 0x01) * 0x04), 0x04)
        }

        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > 0x00) || (Arg1 > 0x00)) || ((Arg2 > 
                0x00) || (Arg3 > 0x00))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 &= (0xFFFFFFFF ^ (0x03 << (Local1 << 0x01)))
                Local0 |= (Arg5 << (Local1 << 0x01))
                If ((Arg3 == 0x02))
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D02300, Local0)
                }
                Else
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
            }
            ElseIf ((Local1 >= 0x04))
            {
                M012 ((M084 + 0x0E00), 0x01, ((Local1 - 0x04) * 0x02
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), 0x00, (Local1 * 0x02), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 / 0x02), ((Arg4 & 
                0x01) * 0x04), 0x04, Arg5)
        }
    }

    Mutex (M408, 0x00)
    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, 0x00, 0x08)
        M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, (Local5 | 0x01))
        If ((Arg0 == 0x01))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = 0x00
        Local2 = 0x64
        While (((Local2 > 0x00) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - 0x01)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            Local1 = 0x01
            Local2 = 0x64
            While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - 0x01)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == 0x00))
            {
                SMB2 = 0x02
                Local3 = (Local3 - 0x01)
            }
            Else
            {
                Local3 = 0x00
            }
        }

        If (((Local2 == 0x00) && (Local3 == 0x00)))
        {
            If ((Arg0 == 0x01))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
            Release (M408)
            Return (0x00)
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            Local1 = 0x01
            Local2 = 0x64
            While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - 0x01)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == 0x00))
            {
                SMB1 = 0x02
                Local3 = (Local3 - 0x01)
            }
            Else
            {
                Local3 = 0x00
            }
        }

        If (((Local2 == 0x00) && (Local3 == 0x00)))
        {
            If ((Arg0 == 0x01))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
            Release (M408)
            Return (0x00)
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << 0x01) | 0x01)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = 0x48
            Local1 = 0x01
            Local4 = 0x03E8
            While (((Local4 > 0x00) && ((Local1 & 0x0E) == 0x00)))
            {
                Local2 = 0x03E8
                While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
                {
                    Local2 = (Local2 - 0x01)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == 0x00))
                {
                    SMB2 = 0x02
                    If ((Arg0 == 0x01))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
                    Release (M408)
                    Return (0x00)
                }

                Local4 = (Local4 - 0x01)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != 0x00))
            {
                Local3 = 0x00
                Local4 = 0x00
            }
            ElseIf (((Local1 & 0x08) != 0x00))
            {
                SMB0 = 0x08
                Local3 = (Local3 - 0x01)
                Local4 = 0x00
            }
            Else
            {
                Local3 = 0x00
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == 0x01))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, 0x00, 0x08)
        M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, (Local5 | 0x01))
        If ((Arg0 == 0x01))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = 0x00
        Local2 = 0x64
        While (((Local2 > 0x00) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - 0x01)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            Local1 = 0x01
            Local2 = 0x64
            While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - 0x01)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == 0x00))
            {
                SMB2 = 0x02
                Local3 = (Local3 - 0x01)
            }
            Else
            {
                Local3 = 0x00
            }
        }

        If (((Local2 == 0x00) && (Local3 == 0x00)))
        {
            If ((Arg0 == 0x01))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
            Release (M408)
            Return (0x00)
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            Local1 = 0x01
            Local2 = 0x64
            While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - 0x01)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == 0x00))
            {
                SMB1 = 0x02
                Local3 = (Local3 - 0x01)
            }
            Else
            {
                Local3 = 0x00
            }
        }

        If (((Local2 == 0x00) && (Local3 == 0x00)))
        {
            If ((Arg0 == 0x01))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
            Release (M408)
            Return (0x00)
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << 0x01)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = 0x48
            Local1 = 0x01
            Local4 = 0x03E8
            While (((Local4 > 0x00) && ((Local1 & 0x0E) == 0x00)))
            {
                Local2 = 0x03E8
                While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
                {
                    Local2 = (Local2 - 0x01)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == 0x00))
                {
                    SMB2 = 0x02
                    If ((Arg0 == 0x01))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
                    Release (M408)
                    Return (0x00)
                }

                Local4 = (Local4 - 0x01)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != 0x00))
            {
                Local3 = 0x00
                Local4 = 0x00
            }
            ElseIf (((Local1 & 0x08) != 0x00))
            {
                SMB0 = 0x08
                Local3 = (Local3 - 0x01)
                Local4 = 0x00
            }
            Else
            {
                Local3 = 0x00
                Local4 = 0x00
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == 0x01))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != 0x00))
        {
            If (CondRefOf (\_SB.M263))
            {
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != 0x00))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != 0x00) && (Local1 != 0x00)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    \_SB.IPTS (Arg0)
                }
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != 0x00))
        {
            If (CondRefOf (\_SB.M264))
            {
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != 0x00))
        {
            If (CondRefOf (\_SB.M284))
            {
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != 0x00))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != 0x00) && (Local1 != 0x00)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    \_SB.IWAK (Arg0)
                }
            }
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            If ((\_GPE.M420 != 0xFF))
            {
                Local0 = (\_GPE.M415 & 0x01)
                Local1 = (\_GPE.M416 & 0x07)
                Local1 += \_GPE.M411
                \_GPE.M419 = M409 (Local0, Local1, 0x00)
            }
        }
    }

    Scope (\_GPE)
    {
        Name (M411, 0x20)
        Name (M415, 0x01)
        Name (M416, 0x04)
        Name (M417, 0x40)
        Name (M418, 0x40)
        Name (M419, 0xFF)
        Name (M420, 0xFF)
        Method (XL0A, 0, NotSerialized)
        {
            Local0 = (\_GPE.M415 & 0x01)
            Local1 = (\_GPE.M416 & 0x07)
            Local1 += \_GPE.M411
            Local2 = \_GPE.M419
            Local3 = M409 (Local0, Local1, 0x00)
            \_GPE.M419 = Local3
            Local3 ^= Local2
            Local3 |= \_GPE.M418
            Local3 &= \_GPE.M417
            If (((Local3 & 0x01) == 0x01))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    \_GPE.SP00 ()
                }
            }

            If (((Local3 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    \_GPE.SP01 ()
                }
            }

            If (((Local3 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    \_GPE.SP02 ()
                }
            }

            If (((Local3 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    \_GPE.SP03 ()
                }
            }

            If (((Local3 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    \_GPE.SP04 ()
                }
            }

            If (((Local3 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    \_GPE.SP05 ()
                }
            }

            If (((Local3 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    \_GPE.SP06 ()
                }
            }

            If (((Local3 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    \_GPE.SP07 ()
                }
            }
        }

        Method (XL0B, 0, NotSerialized)
        {
            Local0 = M049 (M128, 0x91)
            If (((Local0 & 0xC0) == 0xC0))
            {
                Local3 = Buffer (0x08) {}
                CreateWordField (Local3, 0x00, M254)
                CreateByteField (Local3, 0x02, M255)
                CreateDWordField (Local3, 0x03, M256)
                M256 = 0x00
                M254 = 0x07
                M255 = 0x30
                Local4 = \_SB.ALIB (0x0C, Local3)
                If (CondRefOf (\_SB.APAD))
                {
                    \_SB.APAD.M446 [0x01] = Local4
                    Notify (\_SB.APAD, 0x80) // Status Change
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                0x01, 
                0x00
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M049 (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (0x00)
                    }
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "AmdTable", 0x00000001)
{
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000C81
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000C81
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000C81
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000C81
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000C81
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000C81
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000C81
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000C81
        })
    }

    Scope (\_SB.PLTF.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C008.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000C81
        })
    }

    Scope (\_SB.PLTF.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C009.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000C81
        })
    }

    Scope (\_SB.PLTF.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000C81
        })
    }

    Scope (\_SB.PLTF.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000C81
        })
    }

    Scope (\_SB.PLTF.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000C81
        })
    }

    Scope (\_SB.PLTF.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000C81
        })
    }

    Scope (\_SB.PLTF.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000C81
        })
    }

    Scope (\_SB.PLTF.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000C80, 
                0x00000F3C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000514, 
                0x000004D3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00000447, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000C81
        })
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "AmdTable", 0x00000001)
{
    External (_SB_.PCI0.PB2_, DeviceObj)
    External (_SB_.PCI0.PB2_.M434, IntObj)
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)

    Scope (\_SB.PCI0.PB2)
    {
        Device (VGA)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (0x00)
            }
        }

        Device (HDAU)
        {
            Name (_ADR, 0x01)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (0x00)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((M097 != 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }
        }

        Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x04)
            {
                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                Package (0x00) {}, 
                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        0x01
                    }
                }
            })
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            Name (M432, 0x00)
            Name (M433, 0x00)
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Name (M435, Buffer (0x02)
                        {
                             0x00, 0x00                                       // ..
                        })
                        CreateBitField (M435, 0x00, M436)
                        CreateBitField (M435, 0x05, M445)
                        CreateBitField (M435, 0x0A, M437)
                        CreateBitField (M435, 0x0B, M438)
                        If ((Arg1 >= 0x04))
                        {
                            M436 = 0x01
                            M445 = 0x01
                            M432 = ((M049 (M128, 0x66) >> 0x04) & 0x01)
                            M433 = ((M049 (M128, 0x66) >> 0x05) & 0x01)
                            If ((M432 == 0x01))
                            {
                                M437 = 0x01
                            }

                            If ((M433 == 0x01))
                            {
                                M438 = 0x01
                            }
                        }
                        Else
                        {
                            M436 = 0x01
                            M445 = 0x01
                        }

                        Return (M435) /* \_SB_.PCI0.PB2_._DSM.M435 */
                    }
                    Case (0x05)
                    {
                        Return (0x00)
                    }
                    Case (0x0A)
                    {
                        Return (0x01)
                    }
                    Case (0x0B)
                    {
                        Local0 = ToInteger (Arg3)
                        If ((Local0 <= 0x2710))
                        {
                            \_SB.PCI0.PB2.M434 = 0x2710
                        }
                        Else
                        {
                            Local0 = 0x2710
                        }

                        Return (Local0)
                    }
                    Default
                    {
                        Return (0x00)
                    }

                }
            }
            Else
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "AmdTable", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF8000000)
        Name (ADBG, Buffer (0x0100) {})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x08,  // ........
            /* 0028 */  0x0B, 0xFF, 0xFF, 0x00, 0x00, 0x02, 0x03, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x10, 0x17, 0xFF, 0xFF, 0x01,  // ........
            /* 0040 */  0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0060 */  0x00, 0x00, 0x00, 0x05, 0x05, 0xFF, 0xFF, 0x03,  // ........
            /* 0068 */  0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0088 */  0x00, 0x00, 0x00, 0x07, 0x07, 0xFF, 0xFF, 0x05,  // ........
            /* 0090 */  0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A013)
                CreateWordField (Arg1, 0x02, A014)
                CreateDWordField (Arg1, 0x04, A015)
                Local0 = Buffer (0x0100) {}
                CreateWordField (Local0, 0x00, A016)
                A016 = A013 /* \_SB_.ALIB.A013 */
                CreateWordField (Local0, 0x02, A017)
                A017 = A014 /* \_SB_.ALIB.A014 */
                CreateDWordField (Local0, 0x04, A018)
                A018 = A015 /* \_SB_.ALIB.A015 */
                A018 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A018 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A019 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A022 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A023 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A024 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A025 (Arg1)
            }

            If ((Arg0 == 0x10))
            {
                Local7 = Buffer (0x18) {}
                CreateDWordField (Local7, 0x00, A026)
                CreateDWordField (Local7, 0x04, A027)
                CreateDWordField (Local7, 0x08, A028)
                CreateDWordField (Local7, 0x0C, A029)
                CreateDWordField (Local7, 0x10, A030)
                CreateDWordField (Local7, 0x14, A031)
                A026 = 0x00
                A027 = 0x00
                A028 = 0x00
                A029 = 0x00
                A030 = 0x00
                A031 = 0x00
                A011 (0x26, Local7)
            }

            If ((Arg0 == 0x11))
            {
                Local6 = Buffer (0x18) {}
                CreateDWordField (Local6, 0x00, A005)
                CreateDWordField (Local6, 0x04, A006)
                CreateDWordField (Local6, 0x08, A007)
                CreateDWordField (Local6, 0x0C, A008)
                CreateDWordField (Local6, 0x10, A009)
                CreateDWordField (Local6, 0x14, A010)
                A005 = 0x00
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                A011 (0x25, Local6)
            }

            If ((Arg0 == 0xAA))
            {
                Local6 = Buffer (0x18) {}
                CreateDWordField (Local6, 0x00, A032)
                CreateDWordField (Local6, 0x04, A033)
                CreateDWordField (Local6, 0x08, A034)
                CreateDWordField (Local6, 0x0C, A035)
                CreateDWordField (Local6, 0x10, A036)
                CreateDWordField (Local6, 0x14, A037)
                A032 = 0x00
                A033 = 0x00
                A034 = 0x00
                A035 = 0x00
                A036 = 0x00
                A037 = 0x00
                A038 (Arg1)
            }

            Return (0x00)
        }

        Method (A022, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A089 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local2 = A090 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A016)
            CreateByteField (Local7, 0x02, A040)
            CreateByteField (Local7, 0x03, A091)
            A016 = 0x04
            A040 = 0x00
            If ((Local2 == 0x00))
            {
                A091 = 0x00
            }
            Else
            {
                A091 = 0x01
            }

            Return (Local7)
        }

        Method (A089, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A084 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A084 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A084 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A084 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A084 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A084 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A084 (Arg1))
            }
        }

        Method (A090, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A085 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A085 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A085 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A085 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A085 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A085 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A085 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A019, 1, NotSerialized)
        {
            AD00 = Arg0
            A004 ()
        }

        Method (A023, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A024, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A039, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100) {}
            CreateWordField (Local7, 0x00, A016)
            A016 = 0x03
            CreateByteField (Local7, 0x02, A040)
            A040 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A040 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A040 = 0x01
                Return (Local7)
            }

            A041 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A042 ()
            A040 = 0x02
            Return (Local7)
        }

        Method (A043, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A042 ()
        }

        Method (A044, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A045, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A046, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x0A))
                {
                    A047 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A042 ()
            AP0B = Local1
            Local7 = Buffer (0x0100) {}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A048, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A041, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                If ((A049 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A050 (Local0)
                        A051 (Local0, Local1)
                    }
                    Else
                    {
                        A051 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A052, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A053 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A054, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A055 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A042, 0, NotSerialized)
        {
            A054 ()
            A052 ()
            If ((AP02 != AP01))
            {
                A012 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A053 (Local0)
                Local2 = A056 (Local0)
                If ((Local1 != Local2))
                {
                    A057 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A057 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A057, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A058 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A058 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A058 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A058 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A058 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A058 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A058 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A058 (Arg1))
            }
        }

        Method (A056, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A059 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A059 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A059 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A059 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A059 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A059 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A059 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A059 ())
            }
        }

        Method (A053, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A060 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A060 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A060 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A060 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A060 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A060 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A060 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A060 ())
            }
        }

        Method (A055, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A061 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A061 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A061 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A061 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A061 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A061 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A061 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A061 ())
            }
        }

        Method (A050, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A062 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A062 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A062 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A062 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A062 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A062 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A062 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A062 ())
            }
        }

        Method (A051, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A063 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A063 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A063 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A063 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A063 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A063 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A063 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A063 (Arg1))
            }
        }

        Method (A049, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A064 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A064 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A064 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A064 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A064 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A064 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A064 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A064 (Arg1))
            }
        }

        Method (A047, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A065 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A065 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A065 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A065 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A065 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A065 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A065 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A065 ())
            }
        }

        OperationRegion (A120, SystemMemory, AGRB, 0x1000)
        Field (A120, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A121,   32
        }

        BankField (A120, A121, 0x03B10528, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A118,   32
        }

        BankField (A120, A121, 0x03B10564, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A111,   32
        }

        BankField (A120, A121, 0x03B10998, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A112,   32
        }

        BankField (A120, A121, 0x03B1099C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A113,   32
        }

        BankField (A120, A121, 0x03B109A0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A114,   32
        }

        BankField (A120, A121, 0x03B109A4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A115,   32
        }

        BankField (A120, A121, 0x03B109A8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A116,   32
        }

        BankField (A120, A121, 0x03B109AC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A117,   32
        }

        BankField (A120, A121, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A094,   32
        }

        BankField (A120, A121, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A102,   32
        }

        BankField (A120, A121, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A103,   32
        }

        BankField (A120, A121, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A104,   32
        }

        BankField (A120, A121, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A095,   32
        }

        BankField (A120, A121, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A096,   32
        }

        BankField (A120, A121, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A097,   32
        }

        BankField (A120, A121, 0x11243280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A098,   32
        }

        BankField (A120, A121, 0x11244280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A099,   32
        }

        BankField (A120, A121, 0x11245280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A100,   32
        }

        BankField (A120, A121, 0x11246280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A101,   32
        }

        Method (A092, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A073 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A073 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A073 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A073 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A073 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A073 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A073 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A073 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A073 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A073 (Arg1))
            }
        }

        Method (A093, 2, NotSerialized)
        {
            If ((Arg1 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000B0300
                }

                Local1 = A094 /* \_SB_.A094 */
                Local1 &= 0xFF00FCFF
                A094 = (Local0 | Local1)
                Local1 = A094 /* \_SB_.A094 */
                A094 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == 0x00))
            {
                If ((Arg0 == 0x00))
                {
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0x00400000 | Local1)
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x01))
                {
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0x00400000 | Local1)
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A097 /* \_SB_.A097 */
                    A097 = (0x00400000 | Local1)
                    Local1 = A097 /* \_SB_.A097 */
                    A097 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A098 /* \_SB_.A098 */
                    A098 = (0x00400000 | Local1)
                    Local1 = A098 /* \_SB_.A098 */
                    A098 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A099 /* \_SB_.A099 */
                    A099 = (0x00400000 | Local1)
                    Local1 = A099 /* \_SB_.A099 */
                    A099 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A100 /* \_SB_.A100 */
                    A100 = (0x00400000 | Local1)
                    Local1 = A100 /* \_SB_.A100 */
                    A100 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A101 /* \_SB_.A101 */
                    A101 = (0x00400000 | Local1)
                    Local1 = A101 /* \_SB_.A101 */
                    A101 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A102 /* \_SB_.A102 */
                    A102 = (0x00400000 | Local1)
                    Local1 = A102 /* \_SB_.A102 */
                    A102 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A103 /* \_SB_.A103 */
                    A103 = (0x00400000 | Local1)
                    Local1 = A103 /* \_SB_.A103 */
                    A103 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A104 /* \_SB_.A104 */
                    A104 = (0x00400000 | Local1)
                    Local1 = A104 /* \_SB_.A104 */
                    A104 = (0xFFBFFFFF & Local1)
                }
            }
        }

        Method (A003, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A092 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    A093 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A011, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A105)
            CreateDWordField (Arg1, 0x04, A106)
            CreateDWordField (Arg1, 0x08, A107)
            CreateDWordField (Arg1, 0x0C, A108)
            CreateDWordField (Arg1, 0x10, A109)
            CreateDWordField (Arg1, 0x14, A110)
            A111 = 0x00
            While ((A111 != 0x00)) {}
            A112 = A105 /* \_SB_.A011.A105 */
            A113 = A106 /* \_SB_.A011.A106 */
            A114 = A107 /* \_SB_.A011.A107 */
            A115 = A108 /* \_SB_.A011.A108 */
            A116 = A109 /* \_SB_.A011.A109 */
            A117 = A110 /* \_SB_.A011.A110 */
            A118 = Arg0
            While ((A111 == 0x00)) {}
        }

        Method (A087, 5, NotSerialized)
        {
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = Arg0
            A006 = Arg1
            A007 = Arg2
            A008 = Arg3
            A011 (0x09, Local7)
        }

        Method (A025, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A119)
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            Local0 = 0x02
            While ((Local0 < A119))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A005 = 0x00
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                If ((Local1 == 0x01))
                {
                    A005 = Local2
                    A011 (0x18, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A005 = Local2
                    A011 (0x19, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A005 = Local2
                    A011 (0x14, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A005 = Local2
                    A011 (0x15, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A005 = Local2
                    A011 (0x16, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A005 = Local2
                    A011 (0x17, Local7)
                }

                If ((Local1 == 0x09))
                {
                    A005 = Local2
                    A011 (0x20, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A005 = Local2
                    A011 (0x1A, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A005 = Local2
                    A011 (0x1C, Local7)
                }

                If ((Local1 == 0x0D))
                {
                    A005 = Local2
                    A011 (0x1E, Local7)
                }

                If ((Local1 == 0x0E))
                {
                    A005 = Local2
                    A011 (0x1B, Local7)
                }

                If ((Local1 == 0x0F))
                {
                    A005 = Local2
                    A011 (0x1F, Local7)
                }

                If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
                {
                    If ((Local1 == 0x10))
                    {
                        If ((Local2 == 0x00))
                        {
                            A011 (0x26, Local7)
                        }
                        Else
                        {
                            A011 (0x25, Local7)
                        }
                    }
                }

                If ((Local1 == 0x11))
                {
                    A005 = Local2
                    A011 (0x1D, Local7)
                }

                If ((Local1 == 0x12))
                {
                    A005 = Local2
                    A011 (0x5E, Local7)
                }

                If ((Local1 == 0x20))
                {
                    A005 = Local2
                    A011 (0x36, Local7)
                }

                If ((Local1 == 0x21))
                {
                    A005 = Local2
                    A011 (0x37, Local7)
                }

                If ((Local1 == 0x22))
                {
                    A005 = Local2
                    A011 (0x38, Local7)
                }

                If ((Local1 == 0x23))
                {
                    A005 = Local2
                    A011 (0x39, Local7)
                }

                If ((Local1 == 0x24))
                {
                    A005 = Local2
                    A011 (0x3A, Local7)
                }

                If ((Local1 == 0x25))
                {
                    A005 = Local2
                    A011 (0x3B, Local7)
                }

                If ((Local1 == 0x26))
                {
                    A005 = Local2
                    A011 (0x3C, Local7)
                }

                If ((Local1 == 0x27))
                {
                    A005 = Local2
                    A011 (0x3D, Local7)
                }

                If ((Local1 == 0x28))
                {
                    A005 = Local2
                    A011 (0x3E, Local7)
                }

                If ((Local1 == 0x29))
                {
                    A005 = Local2
                    A011 (0x3F, Local7)
                }

                If ((Local1 == 0x2A))
                {
                    A005 = Local2
                    A011 (0x40, Local7)
                }

                If ((Local1 == 0x2B))
                {
                    A005 = Local2
                    A011 (0x41, Local7)
                }

                If ((Local1 == 0x2C))
                {
                    A005 = Local2
                    A011 (0x42, Local7)
                }

                If ((Local1 == 0x2D))
                {
                    A005 = Local2
                    A011 (0x43, Local7)
                }

                If ((Local1 == 0x2E))
                {
                    A005 = Local2
                    A011 (0x53, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR0.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR0.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR1.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR1.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR2.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR2.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR3.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR3.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR4.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR4.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR5.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR5.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR6.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR6.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR7.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR7.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR8.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR8.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR8.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR8.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR9.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR9.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR9.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR9.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A122, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
            {
                Local0 = 0x00
                While ((Local0 < 0x0A))
                {
                    A123 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A076, 3, NotSerialized)
        {
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = Arg1
            A006 = Arg2
            A011 (Arg0, Local7)
        }

        Method (A123, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A074 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A074 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A074 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A074 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A074 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A074 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A074 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A074 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A074 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A074 (Arg1))
            }
        }

        Method (A038, 1, Serialized)
        {
            Local0 = 0x00
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A005 = 0x00
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            If ((Local1 == 0x00))
            {
                A005 = Local2
                A122 (0x00)
            }

            If ((Local1 == 0x01))
            {
                A005 = Local2
                A122 (0x01)
            }

            If ((Local1 == 0x02))
            {
                A005 = Local2
                A011 (0x25, Local7)
            }

            If ((Local1 == 0x03))
            {
                A005 = Local2
                A011 (0x26, Local7)
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A003 (Local0, Local1)
        }

        Method (A004, 0, NotSerialized)
        {
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = 0x00
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            If ((AD00 == 0x00))
            {
                A011 (0x11, Local7)
            }
            Else
            {
                A011 (0x12, Local7)
            }
        }

        Method (A012, 2, NotSerialized)
        {
        }
    }
}



TPM2
----
[000h 0000   4]                    Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : 76
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   2]               Platform Class : 0000
[026h 0038   2]                     Reserved : 0000
[028h 0040   8]              Control Address : 00000000FDA10510
[030h 0048   4]                 Start Method : 02 [ACPI Start Method]

/**** ACPI subtable terminates early - may be older version (dump table) */

Raw Table Data: Length 56 (0x38)

    0000: 54 50 4D 32 38 00 00 00 04 76 4C 45 4E 4F 56 4F  // TPM28....vLENOVO
    0010: 43 42 2D 30 31 20 20 20 02 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 00 00 00 00 10 05 A1 FD 00 00 00 00  // ................
    0030: 02 00 00 00 00 00 00 00                          // ........


UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 000000EE
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 24
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036  16]              UUID Identifier : 0D9FB197-CEFC-4E91-ACB1-2535D9E5A844
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 238 (0xEE)

    0000: 55 45 46 49 EE 00 00 00 01 24 4C 45 4E 4F 56 4F  // UEFI.....$LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 97 B1 9F 0D FC CE 91 4E AC B1 25 35  // ...........N..%5
    0030: D9 E5 A8 44 36 00 09 00 00 00 10 00 00 00 D1 00  // ...D6...........
    0040: 00 00 11 00 00 00 8E 00 00 00 81 00 00 00 82 00  // ................
    0050: 00 00 20 00 00 00 EC 00 00 00 E9 00 00 00 03 25  // .. ............%
    0060: 05 FF F9 1A EB 4A 83 C4 C2 D4 CE B1 0C A3 16 29  // .....J.........)
    0070: EA 81 A0 F9 15 41 83 85 1A 86 4E 2F 30 9C E5 C3  // .....A....N/0...
    0080: 71 51 DD C7 15 44 AF FB AA EC D7 65 FE 15 B7 2B  // qQ...D.....e...+
    0090: 10 7A 91 1E E9 46 BB BA B7 1F 75 BA 5E 57 3D BE  // .z...F....u.^W=.
    00A0: 20 33 92 49 CD 4F B8 6C 60 E5 E9 15 69 1E 01 61  //  3.I.O.l`...i..a
    00B0: 38 67 4A 86 3A 47 B4 29 9A F3 2F 3C CC 06 66 73  // 8gJ.:G.)../<..fs
    00C0: 5E 52 29 84 65 4B B1 77 3B 79 04 DD BF 85 AA EF  // ^R).eK.w;y......
    00D0: E4 DC 31 57 BE 4B 8C 9E DE 67 F5 BF 93 67 58 DC  // ..1W.K...g...gX.
    00E0: AF D8 22 6E F8 42 99 66 36 FF 78 8C 9C AF        // .."n.B.f6.x...


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000D884
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E7
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 55428 (0xD884)

    0000: 56 46 43 54 84 D8 00 00 01 E7 4C 45 4E 4F 56 4F  // VFCT......LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // ....2..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 38 16 00 00 00 00  // ..........8.....
    0060: 01 00 00 00 00 D8 00 00 55 AA 6C E9 FF 01 00 00  // ........U.l.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: B0 01 00 00 00 00 49 42 4D 9E AE 90 00 00 00 00  // ......IBM.......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 88 01 00 00 00 00 00 00 31 31 2F 31 33 2F 32 30  // ........11/13/20
    00C0: 2C 30 32 3A 31 31 3A 31 30 00 00 00 E9 2F 03 00  // ,02:11:10..../..
    00D0: E9 39 03 00 00 00 70 00 31 31 33 2D 43 45 5A 41  // .9....p.113-CEZA
    00E0: 4E 4E 45 2D 30 31 37 00 52 45 4E 4F 49 52 00 50  // NNE-017.RENOIR.P
    00F0: 43 49 5F 45 58 50 52 45 53 53 00 30 00 0D 0A 43  // CI_EXPRESS.0...C
    0100: 65 7A 61 6E 6E 65 20 47 65 6E 65 72 69 63 20 56  // ezanne Generic V
    0110: 42 49 4F 53 20 20 20 20 20 20 20 20 20 20 20 20  // BIOS            
    0120: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0130: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0140: 20 20 20 20 20 20 20 20 20 20 20 0D 0A 00 0D 0A  //            .....
    0150: 20 0D 0A 00 28 43 29 20 31 39 38 38 2D 32 30 31  //  ...(C) 1988-201
    0160: 38 2C 20 41 64 76 61 6E 63 65 64 20 4D 69 63 72  // 8, Advanced Micr
    0170: 6F 20 44 65 76 69 63 65 73 2C 20 49 6E 63 2E 00  // o Devices, Inc..
    0180: 41 54 4F 4D 42 49 4F 53 42 4B 2D 41 4D 44 20 56  // ATOMBIOSBK-AMD V
    0190: 45 52 30 31 37 2E 30 31 30 2E 30 30 30 2E 30 32  // ER017.010.000.02
    01A0: 38 2E 30 30 30 30 30 30 00 43 5A 4E 47 65 6E 65  // 8.000000.CZNGene
    01B0: 72 69 63 56 62 00 32 32 30 31 31 32 30 20 00 35  // ricVb.2201120 .5
    01C0: 34 30 36 31 34 20 20 00 20 20 20 20 20 20 20 20  // 40614  .        
    01D0: 00 41 4D 44 5F 43 45 5A 41 4E 4E 45 5F 47 45 4E  // .AMD_CEZANNE_GEN
    01E0: 45 52 49 43 5C 63 6F 6E 66 69 67 2E 68 00 00 00  // ERIC\config.h...
    01F0: 28 00 02 02 41 54 4F 4D 00 C0 02 03 41 01 D5 01  // (...ATOM....A...
    0200: 95 00 74 03 00 00 00 00 02 10 02 10 B0 01 FA 93  // ..t.............
    0210: A0 94 00 00 00 00 00 00 50 43 49 52 02 10 38 16  // ........PCIR..8.
    0220: 00 00 18 00 00 00 00 03 6C 00 0A 11 00 80 00 00  // ........l.......
    0230: 41 4D 44 20 41 54 4F 4D 42 49 4F 53 00 E3 5A F2  // AMD ATOMBIOS..Z.
    0240: 81 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 1E 06 66  // ...............f
    0270: 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F A3  // PfQfRfSfUfVfW...
    0280: 14 00 8C 0E 08 00 B2 20 E8 AB 2F 0B C0 75 14 A2  // ....... ../..u..
    0290: 02 00 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // ..f_f^f]f[fZfYfX
    02A0: 07 1F CB E8 C5 30 E8 F3 00 E8 94 2E 32 D2 8D 3E  // .....0......2..>
    02B0: 88 01 89 55 16 E8 81 11 E8 44 11 E8 9B 12 E8 EC  // ...U.....D......
    02C0: 02 E8 C5 28 0B C0 74 0C E8 39 00 E8 9C 56 E8 40  // ...(..t..9...V.@
    02D0: 11 E8 EB 56 E8 A9 00 B4 80 E8 8E 2E 8A C7 66 C1  // ...V..........f.
    02E0: E0 10 8A E3 B0 20 66 A3 AE 90 E8 EB 02 E8 53 11  // ..... f.......S.
    02F0: E8 BB 30 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66  // ..0f_f^f]f[fZfYf
    0300: 58 07 1F CB 2E 8B 1E 08 00 83 3E 14 03 00 75 04  // X.........>...u.
    0310: 89 1E 12 03 1E 2E 8E 1E 0A 03 9C FA 66 C7 06 08  // ............f...
    0320: 01 65 F0 00 F0 C7 06 40 00 74 03 89 1E 42 00 C7  // .e.....@.t...B..
    0330: 06 B4 01 74 03 89 1E B6 01 C7 06 7C 00 90 5E 89  // ...t.......|..^.
    0340: 1E 7E 00 C7 06 0C 01 A3 62 89 1E 0E 01 C7 06 A8  // .~......b.......
    0350: 04 C8 58 89 1E AA 04 2E 8E 1E 12 03 8B C3 A3 CA  // ..X.............
    0360: 58 A3 DA 58 A3 EC 58 9D 1F C3 50 4D 49 44 74 03  // X..X..X...PMIDt.
    0370: FA 48 00 00 00 A0 00 B0 00 B8 00 C0 00 00 00 00  // .H..............
    0380: BB 00 00 E8 A6 10 66 C1 E8 10 A3 B6 01 BB 0B 00  // ......f.........
    0390: E8 99 10 8D 3E 88 01 66 89 45 18 C3 66 50 66 52  // ....>..f.E..fPfR
    03A0: 51 56 66 B8 52 54 53 5F BA 80 00 66 EF B0 56 EE  // QVf.RTS_...f..V.
    03B0: B0 42 EE B0 49 EE B0 4F EE B0 53 EE B0 20 EE BE  // .B..I..O..S.. ..
    03C0: 27 01 B9 19 00 AC E6 80 E2 FB 66 B8 44 4E 45 5F  // '.........f.DNE_
    03D0: BA 80 00 66 EF 5E 59 66 5A 66 58 C3 E8 AA 2F 80  // ...f.^YfZfX.../.
    03E0: FC A0 75 05 E8 3D 00 EB 11 80 FC 4F 75 05 E8 97  // ..u..=.....Ou...
    03F0: 44 EB 07 E8 EC 49 EB 02 B4 01 E8 B1 2F CF E8 88  // D....I....../...
    0400: 2F E8 20 00 EB 02 B4 01 E8 A3 2F CB E8 7A 2F 80  // /. ......./..z/.
    0410: FC 4F 75 05 E8 71 44 EB 07 E8 C6 49 EB 02 B4 01  // .Ou..qD....I....
    0420: E8 8B 2F CB 1E 06 66 50 66 51 66 52 66 53 66 55  // ../...fPfQfRfSfU
    0430: 66 56 66 57 0E 1F 3C 04 75 29 2E A1 1A 00 66 C1  // fVfW..<.u)....f.
    0440: E0 10 2E A1 18 00 8D 36 96 00 8A 3C 80 EF 30 B3  // .......6...<..0.
    0450: 02 8B EC 89 5E 0C 89 46 04 66 C1 E8 10 89 46 00  // ....^..F.f....F.
    0460: E9 28 01 3C 05 75 18 E8 00 2D E8 D3 2C 2E A1 08  // .(.<.u...-..,...
    0470: 00 8B EC 89 56 10 89 46 00 89 5E 04 E9 0C 01 3C  // ....V..F..^....<
    0480: 06 75 32 E8 8E 0F 66 D1 E0 8B EC 89 46 14 BB 02  // .u2...f.....F...
    0490: 00 E8 98 0F 88 46 18 E8 82 0F 66 89 46 0C BB 09  // .....F....f.F...
    04A0: 00 E8 88 0F 33 C0 66 89 46 00 2E 8B 16 B6 01 89  // ....3.f.F.......
    04B0: 56 10 E9 D6 00 3C 0B 75 24 0A DB 75 11 B9 80 00  // V....<.u$..u....
    04C0: BB 02 00 8B EC 89 5E 0C 89 4E 14 E9 BD 00 8A C7  // ......^..N......
    04D0: E8 D0 00 E8 34 01 0F 84 A9 00 E9 AE 00 3C 17 75  // ....4........<.u
    04E0: 1D E8 37 12 74 06 E8 95 0D E8 1F 17 E8 EE 09 E8  // ..7.t...........
    04F0: 00 0F 33 C9 8B C8 8B EC 89 4E 14 E9 8D 00 3C 18  // ..3......N....<.
    0500: 75 45 0A FF 75 10 E8 BE 11 8B EC 89 46 0C E8 3B  // uE..u.......F..;
    0510: 0A 89 4E 10 EB 75 E8 02 12 75 68 BB 00 1C E8 06  // ..N..u...uh.....
    0520: 2E 66 0B C0 74 5D 23 C9 74 59 E8 D6 11 BE 00 1C  // .f..t]#.tY......
    0530: E8 26 0F 74 4E BE 00 1C B0 40 E8 75 0F E8 87 11  // .&.tN....@.u....
    0540: 8B EC 89 46 0C EB 44 3C 82 75 1A 80 FB 05 75 15  // ...F..D<.u....u.
    0550: 0A FF 75 0A E8 CB 10 8B EC 89 46 14 EB 2D E8 98  // ..u.......F..-..
    0560: 10 74 18 EB 26 3C 8E 75 12 80 FF 01 74 08 80 FF  // .t..&<.u....t...
    0570: 02 75 08 80 C1 02 E8 F1 10 EB 10 8B EC C6 46 19  // .u............F.
    0580: 02 EB 0F 8B EC C6 46 19 01 EB 07 32 E4 8B EC 88  // ......F....2....
    0590: 66 19 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // f.f_f^f]f[fZfYfX
    05A0: 07 1F C3 51 8A C8 B8 01 00 D3 E0 59 C3 E8 24 2E  // ...Q.......Y..$.
    05B0: C3 0C 01 C3 50 51 B0 B6 E6 43 B0 33 E6 42 B0 05  // ....PQ...C.3.B..
    05C0: E6 42 E4 61 8A E0 0C 03 E6 61 8A C4 B9 C8 00 E8  // .B.a.....a......
    05D0: 33 29 E6 61 59 58 C3 00 1E 56 0E 1F 80 3E 02 00  // 3).aYX...V...>..
    05E0: 80 76 05 C6 06 02 00 80 8A 0E 02 00 C1 E1 09 FC  // .v..............
    05F0: C6 06 21 00 00 33 F6 32 E4 AC 02 E0 E2 FB F6 D4  // ..!..3.2........
    0600: FE C4 88 26 21 00 5E 1F C3 00 57 0B C0 75 0F E8  // ...&!.^...W..u..
    0610: 34 0C 74 25 E8 24 00 F6 C3 04 74 F3 EB 11 8B C8  // 4.t%.$....t.....
    0620: E8 66 25 23 C1 74 12 E8 11 00 F6 C3 04 74 0A 5F  // .f%#.t.......t._
    0630: 8D 5C 28 E8 4C 06 0B F6 C3 5F C3 50 E8 E9 0B E8  // .\(.L...._.P....
    0640: B8 24 E8 C6 24 0A C9 74 69 0A ED 74 10 8A CD B5  // .$..$..ti..t....
    0650: 02 E8 34 28 B1 02 8D 9C 48 01 E8 6E 2C E8 76 02  // ..4(....H..n,.v.
    0660: F6 C3 04 74 08 E8 FB 0C E8 29 23 74 45 8D 5C 28  // ...t.....)#tE.\(
    0670: E8 69 00 56 83 C6 08 E8 F5 22 5E 80 FD 02 75 11  // .i.V....."^...u.
    0680: 51 E8 16 18 59 80 FB 00 75 4D 51 B5 08 E8 E8 05  // Q...Y...uMQ.....
    0690: 59 8A DD 33 C9 E8 07 17 0A C0 75 3B E8 37 02 8A  // Y..3......u;.7..
    06A0: EB 8D 5C 28 80 CD 02 E8 3B 00 74 03 80 CD 04 E8  // ..\(....;.t.....
    06B0: C6 05 8D 9C A6 00 E8 6E 2C 0A C0 74 1A 56 83 C6  // .......n,..t.V..
    06C0: 08 E8 AB 22 5E 8A DD B9 80 00 E8 D2 16 E8 D8 04  // ..."^...........
    06D0: 74 05 33 C9 E8 A1 05 E8 FC 01 58 C3 51 B9 49 00  // t.3.......X.Q.I.
    06E0: E8 D1 27 59 C3 51 E8 1A 00 75 14 E8 B9 01 3C 01  // ..'Y.Q...u....<.
    06F0: 75 0D B9 20 00 E8 27 00 75 05 80 C9 01 EB 02 33  // u.. ..'.u......3
    0700: C9 59 C3 53 E8 20 2C 66 3D 00 FF FF FF 75 0E 83  // .Y.S. ,f=....u..
    0710: C3 04 E8 12 2C 66 3D FF FF FF 00 75 00 5B C3 50  // ....,f=....u.[.P
    0720: 52 32 D2 E8 01 2C 02 D0 02 D4 66 C1 E8 10 02 D0  // R2...,....f.....
    0730: 02 D4 83 C3 04 E2 EC 0A D2 5A 58 C3 E8 E9 0A 8D  // .........ZX.....
    0740: 9C 4C 01 E8 39 01 E8 8D 01 B5 13 F6 C3 08 75 0C  // .L..9.........u.
    0750: E8 10 0C 8A EA 80 FD 13 75 02 B5 03 66 50 8D 9C  // ........u...fP..
    0760: B8 02 66 33 C0 8A C5 E8 1D 2B 66 58 A9 C8 0E 74  // ..f3.....+fX...t
    0770: 55 E8 62 01 F6 C3 08 74 0F E8 0F 05 8D 5C 28 E8  // U.b....t.....\(.
    0780: 04 01 75 04 E8 72 00 C3 B5 02 E8 23 01 E8 46 01  // ..u..r.....#..F.
    0790: F6 C3 04 74 21 8D 5C 28 E8 49 01 E8 94 03 74 05  // ...t!.\(.I....t.
    07A0: B5 03 E8 0B 01 E8 68 04 E8 21 01 80 FD 00 75 48  // ......h..!....uH
    07B0: B5 02 E8 0D 01 C3 8D 9C 68 01 B8 00 55 E8 64 11  // ........h...U.d.
    07C0: B5 02 E8 FD 00 C3 A9 02 00 74 2D B5 04 E8 E0 00  // .........t-.....
    07D0: E8 03 01 F6 C3 08 74 03 E8 B0 04 8D 9C 68 01 56  // ......t......h.V
    07E0: E8 0B 29 8B F7 E8 68 04 5E E8 A8 28 E8 D3 00 8D  // ..)...h.^..(....
    07F0: 5C 28 E8 C8 28 E8 18 04 C3 B5 01 E8 B2 00 B5 02  // \(..(...........
    0800: E8 BF 00 E8 D0 00 F6 C3 04 75 10 8D 9C 68 01 B8  // .........u...h..
    0810: 00 55 E8 0F 11 B5 02 E8 17 00 C3 E8 C6 00 B5 02  // .U..............
    0820: 8D 5C 28 E8 6E 00 75 02 B5 01 E8 04 00 E8 E0 03  // .\(.n.u.........
    0830: C3 8D 9C B4 02 B1 02 E8 91 2A B5 02 E8 83 00 C3  // .........*......
    0840: 8D 9C 4C 01 E8 38 00 E8 8C 00 F6 C3 04 74 23 8D  // ..L..8.......t#.
    0850: 5C 28 E8 8F 00 E8 96 28 8D 9C 68 01 06 0E 07 B9  // \(.....(..h.....
    0860: 07 00 E8 89 26 07 E8 63 00 E8 F7 0A 8D 5C 28 E8  // ....&..c.....\(.
    0870: 87 28 8D 5C 28 E8 25 28 B8 02 00 E8 BE FE C3 B9  // .(.\(.%(........
    0880: 61 00 E8 2F 26 C3 53 81 C3 05 01 E8 99 2A 24 06  // a../&.S......*$.
    0890: 3C 02 5B C3 E8 10 00 3D 01 04 75 0A 53 83 C3 18  // <.[....=..u.S...
    08A0: E8 84 2A 5B A8 01 C3 53 83 C3 12 E8 79 2A 5B C3  // ..*[...S....y*[.
    08B0: 8D 9C B4 02 32 C9 E8 12 2A C3 8D 9C B4 02 E8 66  // ....2...*......f
    08C0: 2A C3 8D 9C B4 02 B1 01 E8 00 2A C3 8D 9C B4 02  // *.........*.....
    08D0: B1 01 E8 0E 2A C3 66 50 8D 9C 48 01 E8 48 2A 8A  // ....*.fP..H..H*.
    08E0: D8 66 58 C3 55 57 51 B9 08 00 BD 00 00 BB 08 00  // .fX.UWQ.........
    08F0: 2B D9 D1 E3 8D 58 4E E8 2D 2A E8 E3 01 E2 EE 8D  // +....XN.-*......
    0900: 5C 4B E8 22 2A B9 03 00 8B D0 BF 5C 09 85 55 06  // \K."*......\..U.
    0910: 74 17 66 8B 05 8D 9A F4 01 E8 6B 29 8B 45 04 8D  // t.f.......k).E..
    0920: 9A F8 01 E8 79 29 83 C5 08 83 C7 08 E2 DF 8D 7C  // ....y).........|
    0930: 5E B9 04 00 33 ED 8B DF E8 EC 29 0B C0 74 09 E8  // ^...3.....)..t..
    0940: 5D 01 E8 97 00 83 C5 1C 83 C7 12 E2 E9 55 32 ED  // ]............U2.
    0950: E8 6F FF 8D 5C 28 E8 4E FF 3D 01 04 75 10 83 C3  // .o..\(.N.=..u...
    0960: 14 E8 C3 29 24 70 C0 E8 04 8A E8 E8 54 FF 5D 8D  // ...)$p......T.].
    0970: 9C A6 00 E8 B1 29 0A C0 74 46 8D 9C A8 00 E8 A6  // .....)..tF......
    0980: 29 3C 02 75 3B 66 C1 E8 10 3C 04 72 33 8D 9C A8  // )<.u;f...<.r3...
    0990: 00 32 E4 03 D8 8B FB B9 04 00 8B DF E8 88 29 0B  // .2............).
    09A0: C0 74 15 E8 F9 00 A9 80 00 75 0D E8 2E 00 83 C5  // .t.......u......
    09B0: 1C 55 58 83 F8 70 73 08 83 C7 12 49 0B C9 75 DA  // .UX..ps....I..u.
    09C0: 59 5F 5D C3 20 03 58 02 3C 00 01 00 00 04 00 03  // Y_]. .X.<.......
    09D0: 3C 00 00 08 80 02 E0 01 3C 00 20 00 51 8D 1D E8  // <.......<. .Q...
    09E0: 45 29 8D 9A 68 01 E8 B6 28 8D 5D 02 E8 38 29 8D  // E)..h...(.]..8).
    09F0: 9A 6A 01 E8 89 00 8D 5D 05 E8 2B 29 8D 9A 6E 01  // .j.....]..+)..n.
    0A00: E8 7C 00 8D 5D 08 E8 1E 29 8B C8 8A DC 66 C1 C8  // .|..]...)....f..
    0A10: 10 8A D0 80 E2 0F 8A F0 C0 EE 04 8A EC C0 ED 06  // ................
    0A20: 8A FC C0 EF 04 80 E7 03 80 E4 0F C0 E4 04 0A D4  // ................
    0A30: 80 E2 3F 80 E4 C0 C0 EC 02 0A F4 8B C3 8D 9A 74  // ..?............t
    0A40: 01 E8 5B 28 8D 9A 72 01 8B C1 E8 52 28 8D 9A 76  // ..[(..r....R(..v
    0A50: 01 33 C0 8A C6 E8 47 28 8D 9A 78 01 33 C0 8A C2  // .3....G(..x.3...
    0A60: E8 3C 28 8D 5D 0C E8 BE 28 8D 9A 7A 01 E8 0F 00  // .<(.]...(..z....
    0A70: 8D 5D 0F E8 B1 28 8D 9A 7E 01 E8 22 28 59 C3 8B  // .]...(..~.."(Y..
    0A80: C8 8A D4 66 C1 C8 10 8A F0 80 E6 0F 8A E8 C0 ED  // ...f............
    0A90: 04 8B C1 E8 09 28 83 C3 02 8B C2 E8 01 28 C3 8D  // .....(.......(..
    0AA0: 5D 11 E8 82 28 8A E0 BA 06 00 C0 E8 07 74 03 80  // ]...(........t..
    0AB0: CA 80 8A C4 C0 E8 03 24 03 3C 02 75 03 80 CA 40  // .......$.<.u...@
    0AC0: 3C 03 75 12 8A C4 D0 E8 A8 01 74 03 80 E2 FD A8  // <.u.......t.....
    0AD0: 02 74 03 80 E2 FB 8B C2 8D 9A 80 01 E8 C0 27 C3  // .t............'.
    0AE0: 3C 01 74 3D 8B D0 0F B6 C6 24 3F 04 3C 8D 9A F8  // <.t=.....$?.<...
    0AF0: 01 E8 AB 27 0F B6 C2 83 C0 1F C1 E0 03 8D 9A F4  // ...'............
    0B00: 01 E8 9B 27 0F B6 DE C1 EB 06 C1 E3 02 2E F7 A7  // ...'............
    0B10: BC 0A 2E F7 B7 BA 0A 8D 9A F6 01 E8 81 27 83 C5  // .............'..
    0B20: 08 C3 10 00 0A 00 04 00 03 00 05 00 04 00 10 00  // ................
    0B30: 09 00 8D 9C A6 00 E8 EE 27 0A C0 74 1F 8D 9C A8  // ........'..t....
    0B40: 00 51 B1 03 E8 18 00 59 0B DB 74 10 E8 D8 27 32  // .Q.....Y..t...'2
    0B50: C0 66 3D 00 03 0C 00 75 03 0B DB C3 33 DB C3 66  // .f=....u....3..f
    0B60: 50 52 E8 C2 27 3C 02 75 39 80 FC 03 72 34 66 C1  // PR..'<.u9...r4f.
    0B70: E8 10 32 E4 3C 04 76 2A 03 C3 8B D0 83 C3 04 3B  // ..2.<.v*.......;
    0B80: DA 73 1F E8 A1 27 8A E0 80 E4 E0 C0 EC 05 24 1F  // .s...'........$.
    0B90: 38 CC 74 08 32 E4 FE C0 03 D8 EB E3 0B DB 5A 66  // 8.t.2.........Zf
    0BA0: 58 C3 33 DB 5A 66 58 C3 51 8D 9C A6 00 E8 77 27  // X.3.ZfX.Q.....w'
    0BB0: 0A C0 74 1B 8D 9C A8 00 B1 12 E8 18 00 74 10 E8  // ..t..........t..
    0BC0: 65 27 66 C1 E8 10 80 E4 07 75 04 B0 01 EB 02 32  // e'f......u.....2
    0BD0: C0 0A C0 59 C3 66 50 52 E8 4C 27 3C 70 75 2B 66  // ...Y.fPR.L'<pu+f
    0BE0: C1 E8 10 32 E4 83 C3 05 03 C3 8B D0 3B DA 73 1A  // ...2........;.s.
    0BF0: E8 34 27 38 C8 74 0D 66 C1 E8 10 32 E4 83 C0 03  // .4'8.t.f...2....
    0C00: 03 D8 EB E8 0B DB 5A 66 58 C3 33 DB 5A 66 58 C3  // ......ZfX.3.ZfX.
    0C10: 57 66 51 8D 9C 68 01 8B FB 8B DF E8 3D 00 0B C9  // WfQ..h......=...
    0C20: 74 0B 66 8B D1 E8 AA 0F 83 C7 1C EB EC 66 59 5F  // t.f..........fY_
    0C30: C3 50 53 51 B9 07 00 53 8B DA E8 EA 26 83 F8 00  // .PSQ...S....&...
    0C40: 5B 74 09 66 C1 E3 10 8B DA E8 7D 22 59 5B 58 C3  // [t.f......}"Y[X.
    0C50: 51 53 B9 07 00 E8 8A 22 5B 59 C3 66 50 53 83 C3  // QS....."[Y.fPS..
    0C60: 06 E8 C3 26 5B 8B C8 66 C1 E1 10 53 83 C3 02 E8  // ...&[..f...S....
    0C70: B5 26 8B C8 5B 66 58 C3 8D 9C 48 01 32 C9 E8 4A  // .&..[fX...H.2..J
    0C80: 26 C3 57 B9 20 00 E8 65 22 5F C3 E8 83 01 66 8B  // &.W. ..e"_....f.
    0C90: CA 66 52 E8 CD 06 E8 FB 1C 66 5A 74 10 E8 43 06  // .fR......fZt..C.
    0CA0: B3 00 E8 A8 19 66 3B CA 73 03 66 8B D1 8D 9C D0  // .....f;.s.f.....
    0CB0: 03 E8 73 26 0B C0 75 44 8D 9C 54 02 66 B8 48 3F  // ..s&..uD..T.f.H?
    0CC0: 00 00 E8 C2 25 B5 01 66 81 FA 78 69 00 00 72 25  // ....%..f..xi..r%
    0CD0: 83 C3 04 66 B8 78 69 00 00 E8 AB 25 B5 02 66 81  // ...f.xi....%..f.
    0CE0: FA F0 D2 00 00 72 0E 83 C3 04 66 B8 F0 D2 00 00  // .....r....f.....
    0CF0: E8 94 25 B5 03 B1 03 E8 CF 01 EB 45 66 B9 08 00  // ..%........Ef...
    0D00: 00 00 66 33 D2 53 8D 9C 54 02 8B D3 5B E8 17 26  // ..f3.S..T...[..&
    0D10: 0B C0 74 22 66 25 FF FF 00 00 66 D1 E0 53 8B DA  // ..t"f%....f..S..
    0D20: E8 64 25 5B 66 C1 CA 10 FE C2 66 C1 CA 10 83 C2  // .d%[f.....f.....
    0D30: 04 83 C3 02 E2 D7 66 C1 CA 10 8A EA B1 03 E8 88  // ......f.........
    0D40: 01 E8 41 06 A8 01 74 3F 8D 9C AE 03 E8 D8 25 3C  // ..A...t?......%<
    0D50: 00 74 34 E8 D8 05 8A EB E8 5C 01 32 ED E8 63 01  // .t4......\.2..c.
    0D60: E8 AB 05 8D 9C BB 02 E8 BD 25 33 C9 8A C8 E8 28  // .........%3....(
    0D70: 01 66 3B C2 74 0E 51 E8 43 01 FE C5 E8 44 01 59  // .f;.t.Q.C....D.Y
    0D80: E2 EC EB 03 B3 00 C3 8D 9C BB 02 E8 99 25 FE C8  // .............%..
    0D90: 8A E8 E8 2E 01 8D 9C 40 03 B9 00 00 E8 2C 25 E8  // .......@.....,%.
    0DA0: CC 02 E8 D2 00 E8 0F 01 66 52 E8 B6 05 E8 E4 1B  // ........fR......
    0DB0: 66 5A 75 04 B3 00 EB 58 E8 F6 00 80 FD 01 77 07  // fZu....X......w.
    0DC0: E8 FA 00 0A ED 74 47 E8 28 03 E8 3A 11 80 FB 00  // .....tG.(..:....
    0DD0: 75 1D E8 B0 05 A8 01 74 07 B1 0D E8 51 19 EB 30  // u......t....Q..0
    0DE0: B5 01 E8 A7 05 E8 37 0F B5 00 E8 9F 05 EB 21 E8  // ......7.......!.
    0DF0: BF 00 80 FD 01 76 07 D0 ED E8 BB 00 EB BA E8 76  // .....v.........v
    0E00: 00 E8 B3 00 E8 B6 00 FE CD E8 B7 00 EB AA B3 08  // ................
    0E10: C3 8D 9C 29 01 E8 0F 25 66 33 D2 8A D0 66 B8 8C  // ...)...%f3...f..
    0E20: 0A 00 00 66 F7 E2 E8 3A 05 E8 68 1B 75 3D 66 50  // ...f...:..h.u=fP
    0E30: 8D 9C 28 01 E8 F0 24 3C 14 66 58 72 2E 66 50 8D  // ..(...$<.fXr.fP.
    0E40: 9C D0 03 E8 E1 24 0B C0 66 58 74 1F B9 07 00 8D  // .....$..fXt.....
    0E50: 9C D0 03 8B C1 D1 E0 03 D8 E8 CB 24 0B C0 75 02  // ...........$..u.
    0E60: E2 ED 66 25 FF FF 00 00 66 D1 E0 66 0B C0 75 03  // ..f%....f..f..u.
    0E70: B8 48 3F 66 8B D0 C3 8D 9C 2A 01 E8 A9 24 24 0F  // .H?f.....*...$$.
    0E80: 8A E8 0A ED 75 02 B5 01 C3 B5 00 8D 9C 31 01 E8  // ....u........1..
    0E90: 95 24 A8 01 74 02 B5 01 C3 53 51 E8 1F 00 32 E4  // .$..t....SQ...2.
    0EA0: 8A C5 C1 E0 02 59 8D 9C 54 02 03 D8 E8 78 24 5B  // .....Y..T....x$[
    0EB0: C3 B1 02 E8 1D 00 C3 B1 02 E8 0D 00 C3 B1 01 E8  // ................
    0EC0: 11 00 C3 B1 01 E8 01 00 C3 53 8D 9C B8 02 E8 FA  // .........S......
    0ED0: 23 5B C3 53 8D 9C B8 02 E8 08 24 5B C3 33 C9 E8  // #[.S......$[.3..
    0EE0: 9C 20 75 3C 66 BA 37 F1 FF FF 66 33 C0 E8 E9 04  // . u<f.7...f3....
    0EF0: 33 C0 E8 51 03 74 1C A9 C8 0E 74 F6 E8 3C F7 F6  // 3..Q.t....t..<..
    0F00: C3 04 75 05 F6 C3 18 74 E9 E8 30 00 50 E8 2C F8  // ..u....t..0.P.,.
    0F10: 58 EB DF E8 1C 00 75 08 E8 31 00 8B C1 E8 1C F8  // X.....u..1......
    0F20: C3 8D 5D 28 66 C1 E3 10 8D 5C 28 B9 49 00 E8 98  // ..](f....\(.I...
    0F30: 1F C3 66 50 E8 BB 04 8B C8 66 58 C3 66 52 66 BA  // ..fP.....fX.fRf.
    0F40: FF FF FF FF 33 D0 E8 90 04 66 5A C3 50 53 52 E8  // ....3....fZ.PSR.
    0F50: E0 FF 75 13 B9 08 00 E8 2F 1C 23 C8 75 19 33 C0  // ..u...../.#.u.3.
    0F60: E8 E3 02 8B C8 EB 10 83 F9 02 74 0B E8 2B 08 80  // ..........t..+..
    0F70: FB 01 75 03 83 E1 FD 5A 5B 58 C3 56 66 33 C0 66  // ..u....Z[X.Vf3.f
    0F80: BA 00 F0 FF FF E8 4E 07 66 C1 E6 10 E8 C4 02 0B  // ......N.f.......
    0F90: C0 74 03 E8 1C 00 E8 2E 07 5E C3 66 52 66 8B D0  // .t.......^.fRf..
    0FA0: E8 DA 15 8D 9C 1C 03 E8 7D 23 8A C2 E8 D8 22 66  // ........}#...."f
    0FB0: 5A C3 50 51 E8 71 02 50 32 C0 E8 FC 03 E8 CC 01  // Z.PQ.q.P2.......
    0FC0: E8 98 00 8D 9C 40 03 E8 5D 23 38 E8 74 0A 8A C5  // .....@..]#8.t...
    0FD0: E8 B4 22 B0 02 E8 E1 03 58 E8 CA 00 E8 A8 00 E8  // ..".....X.......
    0FE0: 8C 00 8D 9C 4C 01 E8 3E 23 8B C8 8B D3 8D 9C 00  // ....L..>#.......
    0FF0: 03 E8 33 23 3B C1 74 05 B0 02 E8 BC 03 E8 31 FC  // ..3#;.t.......1.
    1000: 8D 9C 00 03 E8 53 15 8D 9C D8 02 E8 79 22 E8 8A  // .....S......y"..
    1010: FF 66 C1 CE 10 8B FE 66 C1 CE 10 E8 95 00 E8 D1  // .f.....f........
    1020: 00 E8 23 03 8A E9 8D 9C DC 02 32 C9 E8 9C 22 E8  // ..#.......2...".
    1030: 0C 03 66 25 FF 0F 00 00 59 58 66 BA FF FF FF FF  // ..f%....YXf.....
    1040: 33 D0 E8 91 06 33 D2 C3 53 66 50 8D 9C D4 02 E8  // 3....3..SfP.....
    1050: D5 22 8A C4 E8 30 22 66 58 5B C3 53 66 50 8D 9C  // ."...0"fX[.SfP..
    1060: D4 02 E8 C2 22 8A E0 E8 1D 22 66 58 5B C3 E8 72  // ...."...."fX[..r
    1070: 02 E8 2E 02 8A DD E8 9B 16 8A E9 8D 9C 3C 03 32  // .............<.2
    1080: C9 E8 47 22 0B DB C3 83 EC 08 8B EC E8 54 02 E8  // ..G".........T..
    1090: 10 02 E8 21 16 8D 9C 4C 03 E8 8B 22 8A 46 00 E8  // ...!...L...".F..
    10A0: E5 21 83 C4 08 C3 8D 9C D4 02 E8 7A 22 32 C0 E8  // .!.........z"2..
    10B0: D5 21 C3 E8 0A 00 8D 9C D0 02 32 C9 E8 0C 22 C3  // .!........2...".
    10C0: B5 00 8D 1D E8 60 22 66 8B D0 8D 9C 02 03 E8 56  // .....`"f.......V
    10D0: 22 0B C0 74 1C 51 8B C8 8D 9C 06 03 E8 48 22 66  // "..t.Q.......H"f
    10E0: C1 E0 10 8B C1 59 66 3B C2 75 04 B5 00 EB 02 B5  // .....Yf;.u......
    10F0: 02 C3 E8 2A 02 8D 9C 40 03 B1 03 E8 CD 21 E8 CB  // ...*...@.....!..
    1100: F7 8D 9C 40 03 B1 02 E8 C1 21 E8 95 01 80 FD 00  // ...@.....!......
    1110: 75 14 E8 9C FD E8 8A 02 E8 7E FD 66 8B D0 E8 76  // u........~.f...v
    1120: 02 E8 8A 02 EB 21 E8 49 02 E8 6B 02 E8 73 01 80  // .....!.I..k..s..
    1130: FD 02 B5 04 75 0B 81 FA 74 40 76 05 B5 08 66 D1  // ....u...t@v...f.
    1140: EA E8 6A 02 E8 5B 02 E8 2B 00 C3 66 52 52 32 ED  // ..j..[..+..fRR2.
    1150: 83 C1 02 B8 06 00 F7 E1 66 33 C9 8B C8 5A 51 66  // ........f3...ZQf
    1160: 8B C2 8A CF 66 F7 E1 66 C1 E0 03 59 66 F7 F1 66  // ....f..f...Yf..f
    1170: 8B C8 66 5A C3 B5 00 E8 E9 01 E8 13 18 75 03 E8  // ..fZ.........u..
    1180: 07 FD 8D 9C 48 03 32 C9 E8 40 21 C3 53 E8 5E 01  // ....H.2..@!.S.^.
    1190: 66 C1 E2 10 E8 4C 01 8D 9C B8 02 E8 89 21 8A E8  // f....L.......!..
    11A0: 8D 9C B4 02 E8 80 21 8A C8 E8 C2 14 8A EB 5B C3  // ......!.......[.
    11B0: 57 53 53 E8 D6 FF E8 2A 01 5B E8 27 15 74 66 80  // WSS....*.[.'.tf.
    11C0: FD 00 75 29 53 E8 D1 FC 66 8B D0 E8 FE F6 8A CD  // ..u)S...f.......
    11D0: 51 E8 DD FC 8A FD 59 E8 71 FF 5B E8 49 21 66 25  // Q.....Y.q.[.I!f%
    11E0: FF FF 00 00 66 3B C8 73 39 32 DB EB 38 80 FD 02  // ....f;.s92..8...
    11F0: 75 16 E8 6E 01 E8 A9 17 74 28 8D 1F E8 28 21 3D  // u..n....t(...(!=
    1200: 74 40 76 1E 32 DB EB 1D 80 FD 03 75 15 53 E8 D2  // t@v.2......u.S..
    1210: 00 B3 03 E8 37 14 5B E8 0D 21 3B C2 76 04 32 DB  // ....7.[..!;.v.2.
    1220: EB 03 80 CB 01 5B 5F C3 53 8B F0 E8 5B 19 23 F0  // .....[_.S...[.#.
    1230: 74 09 8B C6 E8 FA 17 8B F3 0B DB 5B C3 51 E8 0B  // t..........[.Q..
    1240: FD E8 0F 00 59 C3 51 50 E8 3E 19 8B C8 58 E8 02  // ....Y.QP.>...X..
    1250: 00 59 C3 57 53 E8 32 1B 0B C0 74 09 8B 1D 83 C7  // .Y.WS.2...t.....
    1260: 02 3B C3 75 F7 8B 1D 83 FB FF 74 0B 83 C7 02 85  // .;.u......t.....
    1270: D9 74 F2 8B C3 EB 02 33 C0 0B C0 5B 5F C3 33 C0  // .t.....3...[_.3.
    1280: E8 C3 FF 74 13 E8 A0 FF 8B DE B9 FB 00 E8 24 1C  // ...t..........$.
    1290: 83 C6 08 E8 A3 18 EB E8 BB F0 16 B8 5A A5 E8 FE  // ............Z...
    12A0: 1F C3 53 66 50 8D 9C 40 03 E8 7B 20 8A E8 66 58  // ..SfP..@..{ ..fX
    12B0: 5B C3 8D 9C 69 03 E8 6E 20 C3 56 E8 EA 1A 8B 44  // [...i..n .V....D
    12C0: 18 5E C3 53 66 50 8D 9C D4 02 E8 5A 20 8A C8 66  // .^.SfP.....Z ..f
    12D0: 58 5B C3 53 66 50 8D 9C D5 02 E8 4A 20 8A C8 66  // X[.SfP.....J ..f
    12E0: 58 5B C3 53 8D 5C 14 E8 3D 20 8B D0 5B C3 53 66  // X[.S.\..= ..[.Sf
    12F0: 50 8D 5C 16 E8 30 20 8B D0 66 58 5B C3 53 66 50  // P.\..0 ..fX[.SfP
    1300: 8D 9C 50 03 E8 20 20 66 8B D0 66 58 5B C3 53 66  // ..P..  f..fX[.Sf
    1310: 50 8D 9C 54 03 E8 0F 20 66 8B D0 66 58 5B C3 53  // P..T... f..fX[.S
    1320: 66 50 8D 5C 10 E8 FF 1F 8B C8 66 58 5B C3 66 50  // fP.\......fX[.fP
    1330: 53 8D 9C 41 03 E8 EF 1F 5B 8A D8 66 58 C3 53 8D  // S..A....[..fX.S.
    1340: 5C 08 E8 E2 1F 5B C3 53 50 8D 9C 4C 03 E8 D7 1F  // \....[.SP..L....
    1350: 8A C8 58 5B C3 53 50 8D 9C 4D 03 E8 C9 1F 8A C8  // ..X[.SP..M......
    1360: 58 5B C3 53 66 50 8D 5C 0C E8 BB 1F 8B D0 66 58  // X[.SfP.\......fX
    1370: 5B C3 53 66 50 8D 9C 00 03 E8 AB 1F 66 33 D2 8B  // [.SfP.......f3..
    1380: D0 66 58 5B C3 8D 5C 04 E8 9C 1F C3 51 8D 5C 04  // .fX[..\.....Q.\.
    1390: 32 C9 E8 36 1F 59 C3 8D 9C 50 03 66 8B C2 E8 E6  // 2..6.Y...P.f....
    13A0: 1E C3 53 8D 9C 40 03 B1 01 E8 1F 1F 5B C3 8D 9C  // ..S..@......[...
    13B0: 54 03 66 8B C2 E8 CF 1E C3 53 51 8A E8 E8 C5 FF  // T.f......SQ.....
    13C0: 24 FD 0A E8 E8 C5 FF 59 5B C3 66 50 8D 9C D8 02  // $......Y[.fP....
    13D0: E8 54 1F 66 8B D0 66 58 C3 53 66 50 51 66 8B C8  // .T.f..fX.SfPQf..
    13E0: BB 00 00 E8 2C 16 23 C2 0B C1 E8 2E 16 59 66 58  // ....,.#......YfX
    13F0: 5B C3 BB 00 00 E8 1A 16 66 25 CA 0E 00 00 C3 E8  // [.......f%......
    1400: 70 1A E8 FF 19 E8 DD 19 75 06 E8 8E 17 E8 E1 19  // p.......u.......
    1410: C3 B0 01 C3 55 B3 01 E8 00 1D 5D C3 66 53 66 BB  // ....U.....].fSf.
    1420: 04 00 00 00 E8 05 00 33 C0 66 5B C3 55 66 C1 E3  // .......3.f[.Uf..
    1430: 10 BB 00 00 E8 E3 1C 5D C3 E8 2F 1B BB 0A 00 E8  // .......]../.....
    1440: D9 15 C3 BB 0A 00 E8 C9 15 66 8B C8 E8 1C 1B BB  // .........f......
    1450: 0A 00 66 2B C1 E8 C3 15 C3 E8 29 00 0B C9 74 22  // ..f+......)...t"
    1460: E8 18 FB E8 31 07 66 51 66 8B C8 BB 07 00 E8 A1  // ....1.fQf.......
    1470: 15 66 25 00 FE 00 00 66 0B C1 E8 9E 15 66 59 0C  // .f%....f.....fY.
    1480: 01 C3 32 C0 C3 E8 6B 02 0B C9 75 06 E8 BD FA E8  // ..2...k...u.....
    1490: 71 02 51 E8 B6 FA 66 C1 E6 10 33 C0 E8 9E FD 74  // q.Q...f...3....t
    14A0: 09 E8 16 03 75 F6 33 C8 EB F2 58 23 C8 66 C1 EE  // ....u.3...X#.f..
    14B0: 10 C3 A8 10 75 63 E8 F0 06 66 C1 E6 10 33 C0 E8  // ....uc...f...3..
    14C0: 84 FD 74 35 E8 61 FD 50 51 8B C8 E8 F9 01 85 C1  // ..t5.a.PQ.......
    14D0: 59 58 74 0D 50 E8 AD FE 24 03 3C 03 58 75 E0 EB  // YXt.P...$.<.Xu..
    14E0: 0C 50 E8 A0 FE A8 01 58 74 D5 E8 6E FB 50 E8 D9  // .P.....Xt..n.P..
    14F0: 07 58 B5 00 E8 95 FE EB C6 E8 CB 01 E8 29 FD E8  // .X...........)..
    1500: 34 01 B1 00 E8 4D 07 66 C1 EE 10 E8 94 06 A8 20  // 4....M.f....... 
    1510: 75 42 A8 40 75 03 E8 1B 0E E8 7B 06 0A C0 75 07  // uB.@u.....{...u.
    1520: 32 C9 B5 01 E8 BE 0E E8 9D 01 E8 FB FC E8 33 FE  // 2.............3.
    1530: E8 61 14 75 14 E8 62 02 0A DB 74 0D E8 1C FB E8  // .a.u..b...t.....
    1540: 88 07 B5 00 E8 45 FE EB 08 E8 65 07 B5 01 E8 3B  // .....E....e....;
    1550: FE E8 E6 00 C3 E8 31 16 C3 E8 22 FD E8 AC 06 33  // ......1..."....3
    1560: C9 E8 9F 01 66 33 D2 66 33 C0 E8 6C FE E8 52 00  // ....f3.f3..l..R.
    1570: B1 FF E8 84 00 33 C0 E8 CC FC 74 0A E8 A9 FC 50  // .....3....t....P
    1580: E8 D1 07 58 EB F1 32 C9 E8 C4 01 E8 FB 15 0B C0  // ...X..2.........
    1590: C3 E8 EA FC E8 74 06 66 33 C0 66 BA 00 F0 FF FF  // .....t.f3.f.....
    15A0: E8 33 01 51 B1 01 E8 8C 01 59 33 C0 E8 97 FC 74  // .3.Q.....Y3....t
    15B0: 0A E8 74 FC 50 E8 67 07 58 EB F1 E8 B3 0D E8 96  // ..t.P.g.X.......
    15C0: 18 C3 B8 02 00 E8 60 FC 74 2E B1 07 E8 01 12 B8  // ......`.t.......
    15D0: 02 00 E8 66 F0 F6 C3 04 75 12 E8 11 1B 83 3D 00  // ...f....u.....=.
    15E0: 75 0A E8 A4 15 83 E0 FD E8 A7 15 C3 66 B8 02 00  // u...........f...
    15F0: 00 00 E8 E4 FD E8 48 F2 C3 E8 28 14 74 23 38 E1  // ......H...(.t#8.
    1600: 76 04 8A CC EB 06 38 C1 73 02 8A C8 BB 02 00 E8  // v.....8.s.......
    1610: 00 14 8A E1 E8 04 14 B1 04 E8 B4 11 0C 01 C3 0C  // ................
    1620: 01 C3 51 E8 FE 13 74 0C 8A CC BB 02 00 E8 E2 13  // ..Q...t.........
    1630: 8A C4 8A E1 59 C3 E8 FD 05 C3 E8 08 06 C3 E8 3D  // ....Y..........=
    1640: 19 75 18 E8 81 00 E8 DF FB 80 F9 01 75 0E 51 E8  // .u..........u.Q.
    1650: 5F 06 B5 01 E8 35 FD 59 E8 DF FF C3 E8 D7 FF 51  // _....5.Y.......Q
    1660: E8 BC 06 B5 00 E8 24 FD 59 C3 B8 02 00 E8 B8 FB  // ......$.Y.......
    1670: 74 03 E8 5B 11 C3 E8 BD 04 3B C1 7C 3A 8B C1 E8  // t..[.....;.|:...
    1680: FD 04 E8 C6 0E 8B C8 51 E8 2D 05 E8 F1 04 59 E8  // .......Q.-....Y.
    1690: B9 0E 3B C8 72 02 8B C1 8D 5C 04 E8 01 1C 32 C9  // ..;.r....\....2.
    16A0: B5 0F E8 04 0D E8 03 18 FE C1 38 C1 72 F2 8D 5C  // ..........8.r..\
    16B0: 04 E8 73 1C 0B C0 C3 33 C0 C3 BB 00 18 33 C0 8A  // ..s....3.....3..
    16C0: C2 C1 E0 02 03 D8 C3 53 BB 03 00 E8 44 13 66 25  // .......S....D.f%
    16D0: FF 0F 00 00 5B C3 53 66 50 66 51 66 8B C8 BB 03  // ....[.SfPfQf....
    16E0: 00 E8 2E 13 66 23 C2 66 0B C1 E8 2E 13 66 59 66  // ....f#.f.....fYf
    16F0: 58 5B C3 66 50 BB 05 00 E8 17 13 25 FF 0F 8B C8  // X[.fP......%....
    1700: 66 58 C3 E8 83 14 23 C8 66 50 BB 05 00 E8 02 13  // fX....#.fP......
    1710: 25 00 F0 0B C1 E8 03 13 66 58 C3 66 50 53 BB 06  // %.......fX.fPS..
    1720: 00 E8 EE 12 A8 10 75 09 BB F0 16 E8 F9 1B 3D 5A  // ......u.......=Z
    1730: A5 5B 66 58 C3 66 50 53 BB 06 00 E8 D4 12 80 F1  // .[fX.fPS........
    1740: 01 C0 E1 04 24 EF 0A C1 E8 D0 12 5B 66 58 C3 53  // ....$......[fX.S
    1750: 66 50 BB F8 16 E8 CF 1B 8A C1 E8 2A 1B 66 58 5B  // fP.........*.fX[
    1760: C3 53 BB F8 16 E8 BF 1B 83 E0 01 5B C3 53 66 50  // .S.........[.SfP
    1770: BB 07 00 E8 9C 12 F6 C4 01 66 58 B0 06 74 02 B0  // .........fX..t..
    1780: 08 5B C3 53 BB 07 00 E8 88 12 80 E4 FE 80 FD 06  // .[.S............
    1790: 74 03 80 CC 01 E8 83 12 5B C3 66 50 BB 06 00 E8  // t.......[.fP....
    17A0: 70 12 24 40 C0 E8 06 8A D8 66 58 C3 B3 81 E8 5E  // p.$@.....fX....^
    17B0: 19 75 04 83 C8 01 C3 33 C0 C3 50 66 51 E8 68 FA  // .u.....3..PfQ.h.
    17C0: 83 EC 04 8B EC 66 33 C0 66 89 46 00 33 D2 8D BC  // .....f3.f.F.3...
    17D0: 68 01 8D 1D E8 50 1B 0B C0 74 22 8B DF B0 00 E8  // h....P...t".....
    17E0: 12 01 74 14 8B DF E8 72 F4 66 8B 46 00 66 3B C8  // ..t....r.f.F.f;.
    17F0: 72 06 8B D7 66 89 4E 00 83 C7 1C EB D5 0B D2 74  // r...f.N........t
    1800: 0A 8D 9C 4C 01 E8 29 F4 E9 88 00 66 33 C0 66 89  // ...L..)....f3.f.
    1810: 46 00 8D BC F4 01 33 D2 8D 1D E8 0A 1B 0B C0 74  // F.....3........t
    1820: 58 66 50 E8 94 F0 3C 01 66 58 74 05 3D 40 06 73  // XfP...<.fXt.=@.s
    1830: 43 66 52 66 8B D0 8D 5D 04 E8 EB 1A E8 5D 00 8B  // CfRf...].....]..
    1840: CA 66 5A 74 2F 56 8D 9C 4C 01 8B F1 E8 01 F4 5E  // .fZt/V..L......^
    1850: B0 00 E8 9F 00 74 1D 8D 1D E8 CB 1A 8B D9 8B 47  // .....t.........G
    1860: 06 66 C1 E0 10 8B 47 02 66 3B 46 00 72 06 8B D1  // .f....G.f;F.r...
    1870: 66 89 46 00 83 C7 08 EB 9F 0B D2 74 16 56 8D 9C  // f.F........t.V..
    1880: 4C 01 8B F2 E8 C9 F3 5E 53 8D 9C 62 01 33 C0 E8  // L......^S..b.3..
    1890: 0D 1A 5B 83 C4 04 0B D2 66 59 58 C3 57 53 51 E8  // ..[.....fYX.WSQ.
    18A0: 0F 15 3B 55 02 75 18 66 C1 CA 10 8B DA 66 C1 CA  // ..;U.u.f.....f..
    18B0: 10 3B 5D 06 75 09 0A C0 74 0E 3A 45 1B 74 09 83  // .;].u...t.:E.t..
    18C0: C7 1C E2 DE 33 D2 EB 02 8B D7 0B D2 59 5B 5F C3  // ....3.......Y[_.
    18D0: 51 66 52 E8 DB 14 3A 65 1A 75 09 0A C0 74 0E 3A  // QfR...:e.u...t.:
    18E0: 45 1B 74 09 83 C7 1C E2 ED 33 FF EB 00 0B FF 66  // E.t......3.....f
    18F0: 5A 59 C3 C3 66 51 66 52 53 53 66 C1 CE 10 8B DE  // ZY..fQfRSSf.....
    1900: 66 C1 CE 10 E8 20 1A 5B 66 8B D0 E8 4D F3 3B CA  // f.... .[f...M.;.
    1910: 72 0A 66 3B CA 72 05 E8 96 F8 75 02 32 C0 5B 66  // r.f;.r....u.2.[f
    1920: 5A 66 59 C3 56 57 E8 A7 FF 8B F7 E8 22 F3 5F 5E  // ZfY.VW......"._^
    1930: C3 66 50 53 66 51 52 57 56 51 8B DE B9 08 00 E8  // .fPSfQRWVQ......
    1940: 72 15 59 8D 5C 08 8B C1 66 C1 E0 10 8A C2 E8 36  // r.Y.\...f......6
    1950: 19 F6 C2 03 75 24 8B C1 24 7F BF 14 1A 80 3D FF  // ....u$..$.....=.
    1960: 0F 84 0F 01 3A 05 75 0D 66 8B 45 01 66 B9 00 05  // ....:.u.f.E.f...
    1970: 02 00 E9 96 00 83 C7 05 EB E3 F6 C2 01 74 25 8B  // .............t%.
    1980: C1 E8 70 01 0F 84 EB 00 33 C9 8A CC 8A D0 0A C0  // ..p.....3.......
    1990: 75 12 8D 5C 08 66 25 FF FF 00 00 66 C1 E0 08 E8  // u..\.f%....f....
    19A0: E5 18 EB B2 8A E1 8A CA 80 E1 0C C0 E9 02 80 E2  // ................
    19B0: F0 C0 EA 04 8A EA 80 FC 70 72 2A 80 FC 75 73 25  // ........pr*..us%
    19C0: 80 EC 70 8A C4 32 E4 50 E8 30 02 8B D8 58 38 D8  // ..p..2.P.0...X8.
    19D0: 72 05 33 C0 E9 9C 00 E8 28 02 E8 4A 19 0B C0 0F  // r.3.....(..J....
    19E0: 84 90 00 EB 1B 32 C0 E8 E6 FE 0F 84 85 00 8D 5C  // .....2.........\
    19F0: 16 8B 05 E8 A9 18 8B 45 06 66 C1 E0 10 8B 45 02  // .......E.f....E.
    1A00: 50 E8 47 0B 66 C1 E1 10 8B C8 58 8D 1C E8 77 18  // P.G.f.....X...w.
    1A10: 66 50 8D 5C 04 66 8B C1 E8 6C 18 66 58 66 C1 E8  // fP.\.f...l.fXf..
    1A20: 10 66 81 E1 FF FF 00 00 66 F7 E1 66 50 8D 5C 06  // .f......f..fP.\.
    1A30: E8 F4 18 8B C8 66 58 66 D3 E0 66 C1 E8 10 40 8D  // .....fXf..f...@.
    1A40: 5C 14 E8 5A 18 BF 74 1A 83 F9 01 74 11 BF 7C 1A  // \..Z..t....t..|.
    1A50: 81 F9 01 01 74 08 BF 84 1A 83 F9 02 75 15 8D 5C  // ....t.......u..\
    1A60: 0C 66 8B 05 E8 20 18 8D 5C 10 66 8B 45 04 E8 16  // .f... ..\.f.E...
    1A70: 18 0B DB 5E 5F 5A 66 59 5B 66 58 C3 00 40 01 90  // ...^_ZfY[fX..@..
    1A80: 01 01 40 01 90 01 02 80 02 90 01 03 80 02 90 01  // ..@.............
    1A90: 04 40 01 90 01 05 40 01 90 01 06 80 02 90 01 07  // .@....@.........
    1AA0: D0 02 5E 01 0D 40 01 90 01 0E 80 02 90 01 0F 80  // ..^..@..........
    1AB0: 02 5E 01 10 80 02 5E 01 11 80 02 E0 01 12 80 02  // .^....^.........
    1AC0: E0 01 13 80 02 90 01 23 20 04 90 01 32 20 04 B0  // .......# ...2 ..
    1AD0: 02 33 20 04 C0 02 62 80 02 E0 01 FF 05 0A 05 05  // .3 ...b.........
    1AE0: 05 00 00 00 05 0B 06 05 05 00 00 00 08 10 08 08  // ................
    1AF0: 08 00 00 00 56 E8 8D 15 80 E4 01 3B 04 74 09 83  // ....V......;.t..
    1B00: C6 04 E2 F7 33 C0 EB 05 8B 44 02 0B C0 5E C3 57  // ....3....D...^.W
    1B10: 53 50 E8 70 15 83 E9 0A E8 E0 00 83 F8 05 76 03  // SP.p..........v.
    1B20: B8 05 00 D1 E0 03 C8 FB A5 83 C6 02 E2 FA B8 FF  // ................
    1B30: FF AB 58 5B 5F C3 66 53 51 66 52 E8 41 00 E8 77  // ..X[_.fSQfR.A..w
    1B40: 00 66 C1 E8 10 66 0F B7 D8 66 B8 00 00 00 03 66  // .f...f...f.....f
    1B50: D3 E8 66 33 D2 66 F7 F3 E8 F0 09 66 5A 59 66 5B  // ..f3.f.....fZYf[
    1B60: C3 53 66 50 BB 07 00 E8 A8 0E 0A C0 66 58 5B C3  // .SfP........fX[.
    1B70: 53 66 50 BB 07 00 E8 99 0E A8 01 66 58 5B C3 53  // SfP........fX[.S
    1B80: 66 50 8D 5C 06 E8 9F 17 8A C8 66 58 5B C3 51 B9  // fP.\......fX[.Q.
    1B90: 08 00 E8 34 13 59 C3 53 8D 5C 08 E8 89 17 24 03  // ...4.Y.S.\....$.
    1BA0: 5B C3 8D 5C 09 E8 7F 17 C3 51 53 B1 01 8A E8 8D  // [..\.....QS.....
    1BB0: 5C 08 E8 16 17 5B 59 C3 53 8D 1C E8 69 17 5B C3  // \....[Y.S...i.[.
    1BC0: 53 8D 5C 04 E8 60 17 5B C3 53 8D 5C 16 E8 57 17  // S.\..`.[.S.\..W.
    1BD0: 5B C3 53 66 52 33 C0 E8 C2 FC 66 5A 75 1B E8 34  // [.SfR3....fZu..4
    1BE0: 00 74 16 E8 15 00 40 83 F8 05 73 0D E8 98 16 48  // .t....@...s....H
    1BF0: E8 0F 00 66 8B C2 E8 8E 16 5B C3 BB 00 1E E8 26  // ...f.....[.....&
    1C00: 17 C3 BB 08 1E C1 E0 03 03 D8 C3 BB 00 1E B9 32  // ...............2
    1C10: 00 E8 A0 12 C3 51 E8 E2 FF 0B C0 74 12 8B C8 BB  // .....Q.....t....
    1C20: 08 1E E8 02 17 66 3B C2 74 07 83 C3 08 E2 F3 0B  // .....f;.t.......
    1C30: DB 59 C3 C3 C3 00 BB 20 DF E8 AB 36 E8 84 F6 B5  // .Y..... ...6....
    1C40: 01 E8 E5 07 C3 BB 00 DF E8 9C 36 E8 75 F6 B5 00  // ..........6.u...
    1C50: E8 D6 07 C3 80 F9 00 75 0A E8 55 12 8A C8 B5 02  // .......u..U.....
    1C60: E8 1D 09 0B F6 74 2E E8 59 F6 B5 01 51 E8 C0 07  // .....t..Y...Q...
    1C70: 59 E8 C3 07 56 33 F6 B5 00 E8 2D 07 5E B5 01 E8  // Y...V3....-.^...
    1C80: C5 F6 E8 FB 08 E8 C4 09 E8 38 F6 8D 9C 00 03 E8  // .........8......
    1C90: AC 07 E8 F5 07 66 C1 CE 10 B5 01 E8 0B 07 E8 01  // .....f..........
    1CA0: FF A8 40 75 07 32 C0 B5 01 E8 7E 08 66 C1 CE 10  // ..@u.2....~.f...
    1CB0: C3 E8 0F F6 B5 01 E8 4B 07 B5 00 E8 79 07 E8 DC  // .......K....y...
    1CC0: 07 B1 0F E8 69 0A E8 26 00 C3 E8 52 00 E8 03 F6  // ....i..&...R....
    1CD0: B5 00 E8 2F 07 B5 00 E8 5D 07 E8 78 F6 E8 D1 11  // .../....]..x....
    1CE0: 38 C1 74 0A 80 F9 0B 74 05 B5 03 E8 92 08 C3 B1  // 8.t....t........
    1CF0: 10 E8 3B 0A E8 AB F5 80 FD 00 74 06 B1 01 E8 CF  // ..;.......t.....
    1D00: 0A C3 E8 A6 05 80 FD 01 75 07 B5 02 E8 D5 05 EB  // ........u.......
    1D10: 03 E8 F3 01 B1 0D E8 16 0A B1 03 E8 54 00 C3 E8  // ............T...
    1D20: CC F5 0B D2 74 05 B1 00 E8 42 0A B1 02 E8 42 00  // ....t....B....B.
    1D30: E8 52 F6 A8 01 74 12 E8 68 F5 80 FD 00 75 0A B1  // .R...t..h....u..
    1D40: 0C E8 EB 09 B0 02 E8 91 04 B1 00 E8 82 0A B1 0D  // ................
    1D50: E8 1F 00 C3 B1 07 E8 77 0A E8 92 F5 0B D2 75 0C  // .......w......u.
    1D60: E8 00 F6 E8 2A 0C 75 09 E8 1D 0B C3 B1 07 E8 FC  // ....*.u.........
    1D70: 09 C3 E8 EE F5 E8 18 0C 75 24 51 E8 52 0A 59 80  // ........u$Q.R.Y.
    1D80: F9 0C 75 1A 33 D2 56 83 C6 08 E8 41 0C 5E 0A C0  // ..u.3.V....A.^..
    1D90: 75 0C B9 0A 00 E8 6D 11 42 83 FA 1E 75 E8 C3 80  // u.....m.B...u...
    1DA0: FB 01 0F 84 C5 00 E8 A5 05 66 C1 E1 10 8D 9C 35  // .........f.....5
    1DB0: 01 E8 73 15 A8 01 74 05 51 E8 2B 04 59 E8 5F F5  // ..s...t.Q.+.Y._.
    1DC0: B0 04 E8 9C 05 66 BA 50 01 40 50 E8 76 05 E8 F7  // .....f.P.@P.v...
    1DD0: 0A 75 7E 66 BA 50 01 50 4F 8D 9C 2D 01 E8 47 15  // .u~f.P.PO..-..G.
    1DE0: 24 06 3C 02 75 02 B6 02 B0 05 E8 74 05 E8 54 05  // $.<.u......t..T.
    1DF0: 8D 5C 28 03 D8 E8 D0 0A 75 57 0A FF 75 09 B0 0A  // .\(.....uW..u...
    1E00: E8 5E 05 32 DB EB 4A 51 33 C9 8A CF E8 35 05 03  // .^.2..JQ3....5..
    1E10: C8 E8 3A 05 59 B0 07 E8 47 05 66 BA 50 01 10 30  // ..:.Y...G.f.P..0
    1E20: 33 DB E8 A3 0A 74 0F 51 8A EB 8D 9C 44 01 B1 02  // 3....t.Q....D...
    1E30: E8 98 14 59 EB 61 E8 0B 05 66 C1 C9 10 2B C1 66  // ...Y.a...f...+.f
    1E40: C1 C1 10 3D 80 00 0F 82 76 FF B0 08 E8 12 05 EB  // ...=....v.......
    1E50: 43 51 8A EB 8D 9C 44 01 B1 02 E8 6E 14 59 66 BA  // CQ....D....n.Yf.
    1E60: 50 01 10 30 33 DB E8 5F 0A EB 2C 8D 5C 28 03 D9  // P..03.._..,.\(..
    1E70: 53 8A E9 B1 32 51 5F E8 A5 F4 8A E9 B1 A0 BA 00  // S...2Q_.........
    1E80: 80 E8 19 0A 80 FF 01 5B 74 0A B1 A2 E8 0E 0A 80  // .......[t.......
    1E90: FF 01 75 03 B0 00 C3 B0 01 C3 51 B1 0C E8 D2 FE  // ..u.......Q.....
    1EA0: 59 B0 01 E8 BB 04 56 83 C6 08 E8 21 0B 5E 0A C0  // Y.....V....!.^..
    1EB0: 75 04 B3 10 EB 3F B0 02 E8 A6 04 E8 38 00 74 11  // u....?......8.t.
    1EC0: B0 03 E8 9C 04 B0 01 E8 10 03 75 29 E8 27 00 75  // ..........u).'.u
    1ED0: 24 66 BA 0C 00 90 43 8D 9C 30 01 E8 EA 09 66 BA  // $f....C..0....f.
    1EE0: 20 00 90 41 8D 9C 34 01 E8 DD 09 E8 BD 03 B0 09  //  ..A..4.........
    1EF0: E8 6E 04 33 DB C3 E8 26 F4 66 BA 00 00 90 47 8D  // .n.3...&.f....G.
    1F00: 9C 28 01 E8 C2 09 C3 B1 0C E8 66 FE B1 00 E8 BF  // .(........f.....
    1F10: 08 B1 01 E8 BA 08 8D 9C AC 03 66 B8 00 00 00 00  // ..........f.....
    1F20: E8 64 13 B0 01 E8 B2 02 74 0A B5 04 E8 CB 03 B3  // .d......t.......
    1F30: 08 E9 3F 01 B1 08 E8 F6 07 E8 D2 02 B1 09 E8 EE  // ..?.............
    1F40: 07 E8 C5 01 8D 9C B8 03 66 33 C0 E8 39 13 E8 60  // ........f3..9..`
    1F50: 01 B9 90 01 E8 A3 0F B0 01 E8 63 02 B5 02 E8 8D  // ..........c.....
    1F60: 03 E8 74 01 E8 9F 03 E8 E0 01 B5 03 E8 7F 03 33  // ..t............3
    1F70: C9 E8 00 01 F6 C5 01 75 34 B5 02 E8 70 03 E8 20  // .......u4...p.. 
    1F80: 01 F6 C5 04 74 08 B5 01 E8 6F 03 E9 CC 00 8A FD  // ....t....o......
    1F90: 80 E7 03 E8 E8 00 80 E3 03 38 FB 75 0D E8 4C 01  // .........8.u..L.
    1FA0: 75 08 B5 02 E8 53 03 E9 B0 00 E8 67 01 FE C1 E8  // u....S.....g....
    1FB0: 7C F3 38 D9 75 BB 8D 9C AC 03 E8 6A 13 3C 03 74  // |.8.u......j.<.t
    1FC0: 05 E8 ED 00 EB 9B 8D 9C B0 03 66 33 C0 E8 B7 12  // ..........f3....
    1FD0: 8D 9C 2A 01 E8 50 13 A8 40 74 0C B1 13 E8 4F 07  // ..*..P..@t....O.
    1FE0: B0 03 E8 DA 01 EB 0A B1 0A E8 43 07 B0 02 E8 CE  // ..........C.....
    1FF0: 01 B5 04 E8 F8 02 E8 DF 00 E8 0A 03 E8 4B 01 B5  // .............K..
    2000: 05 E8 EA 02 33 C9 E8 6B 00 80 FD 07 75 05 E8 86  // ....3..k....u...
    2010: 00 75 2E 51 B5 04 E8 D5 02 59 F6 C5 01 75 07 B5  // .u.Q.....Y...u..
    2020: 03 E8 D6 02 EB 34 E8 78 00 8A D5 E8 E6 00 E8 70  // .....4.x.......p
    2030: 00 38 EA 75 0C E8 B4 00 75 07 B5 02 E8 BB 02 EB  // .8.u....u.......
    2040: 19 FE C1 E8 E8 F2 38 D9 75 BC 8D 9C AC 03 E8 D6  // ......8.u.......
    2050: 12 3C 04 75 05 E8 59 00 EB 9C B0 00 E8 60 01 B1  // .<.u..Y......`..
    2060: 0B E8 CB 06 8D 9C AD 03 E8 BC 12 B3 00 0A C0 74  // ...............t
    2070: 02 B3 08 C3 8D 9C C0 03 E8 0F 00 8A E8 C3 53 8D  // ..............S.
    2080: 9C C4 03 E8 04 00 5B 8A D8 C3 51 E8 99 12 C0 E1  // ......[...Q.....
    2090: 02 D3 E8 24 0F 59 C3 8D 9C C2 03 E8 89 12 A8 01  // ...$.Y..........
    20A0: C3 8D 9C B8 03 E8 3B 12 C3 8D 9C B8 03 E8 1B 12  // ......;.........
    20B0: C3 33 C9 33 D2 E8 E9 FF 38 D5 76 02 8A D5 FE C1  // .3.3....8.v.....
    20C0: E8 6B F2 38 D9 72 EE 33 C9 8A EA 8D 9C 5C 03 E8  // .k.8.r.3.....\..
    20D0: F9 11 B1 0B E8 F9 06 C3 E8 44 F2 8D 9C B8 03 E8  // .........D......
    20E0: 45 12 66 BA 03 01 80 83 E8 DD 07 C3 51 53 8D 9C  // E.f.........QS..
    20F0: B0 03 E8 EE 11 FE C5 E8 D1 11 80 FD 06 72 07 B5  // .............r..
    2100: 02 E8 F6 01 33 C9 5B 59 C3 66 33 C0 8D 9C B0 03  // ....3.[Y.f3.....
    2110: E8 74 11 C3 32 ED E8 65 FF 80 E3 0C C0 EB 02 B7  // .t..2..e........
    2120: 03 2A FB C0 E3 03 8A EB 80 FB 18 72 03 80 CD 20  // .*.........r... 
    2130: E8 4B FF 80 E3 03 38 FB 72 02 8A DF 80 FB 03 75  // .K....8.r......u
    2140: 03 80 CD 04 0A EB E8 60 FF C3 E8 D2 F1 8D 9C C0  // .......`........
    2150: 03 66 BA 02 02 90 45 E8 6E 07 C3 E8 C1 F1 66 BA  // .f....E.n.....f.
    2160: 00 01 90 42 8D 9C B4 03 E8 5D 07 E8 B1 F1 66 BA  // ...B.....]....f.
    2170: 03 01 90 45 8D 9C B8 03 E8 4D 07 E8 E5 F1 E8 13  // ...E.....M......
    2180: 08 75 3B E8 99 F1 66 BA 0A 01 90 40 8D 9C BF 03  // .u;...f....@....
    2190: E8 35 07 8D 9C 28 01 E8 8D 11 3C 14 72 20 E8 7E  // .5...(....<.r .~
    21A0: F1 66 BA 10 00 90 4F 8D 9C D0 03 E8 1A 07 E8 6E  // .f....O........n
    21B0: F1 66 BA 15 01 90 40 8D 9C CC 03 E8 0A 07 C3 E8  // .f....@.........
    21C0: 5D F1 66 BA 02 01 80 50 E8 FD 06 C3 E8 3F F1 8B  // ].f....P.....?..
    21D0: C2 66 33 D2 B9 8C 0A F7 F1 C3 E8 42 F1 66 BA 00  // .f3........B.f..
    21E0: 06 80 50 E8 E2 06 C3 E8 35 F1 66 BA 11 01 80 50  // ..P.....5.f....P
    21F0: B0 04 E8 D3 06 C3 E8 26 F1 66 BA 00 06 90 40 8D  // .......&.f....@.
    2200: 9C C8 03 E8 C2 06 8D 9C C8 03 E8 1A 11 C3 E8 BB  // ................
    2210: FF 3C 06 74 0E 3C 0A 74 0A 3C 14 74 06 3C 1E 74  // .<.t.<.t.<.t.<.t
    2220: 02 33 C0 E8 08 F1 8A E3 80 CC 80 50 E8 F0 F0 58  // .3.........P...X
    2230: 66 BA 00 01 80 61 E8 8F 06 33 C9 E8 7C F0 0B C0  // f....a...3..|...
    2240: 74 02 B5 10 8D 9C BC 03 E8 80 10 8A C5 E8 CF F0  // t...............
    2250: 66 BA 07 01 80 50 E8 6F 06 E8 07 F1 E8 35 07 75  // f....P.o.....5.u
    2260: 49 8D 9C 48 03 E8 BF 10 0A C0 74 0E E8 B0 F0 66  // I..H......t....f
    2270: BA 0A 01 80 50 B0 01 E8 4E 06 8D 9C 28 01 E8 A6  // ....P...N...(...
    2280: 10 3C 14 72 25 8D 9C D0 03 E8 9B 10 0B C0 74 1A  // .<.r%.........t.
    2290: E8 2A EC 32 C9 8D 9C CC 03 E8 2F 10 8A C5 E8 7E  // .*.2....../....~
    22A0: F0 66 BA 15 01 80 50 E8 1E 06 C3 8D 9C B4 03 B9  // .f....P.........
    22B0: 0E 00 E8 FF 0B E8 A3 FE E8 8F FE E8 38 FF 3C 01  // ............8.<.
    22C0: 75 1C E8 D2 FD 74 17 33 C9 E8 A8 FD 80 FD 07 75  // u....t.3.......u
    22D0: 0D FE C1 E8 58 F0 38 D9 75 EF B5 01 EB 02 B5 00  // ....X.8.u.......
    22E0: E8 01 00 C3 8D 9C AC 03 B1 02 E8 DE 0F C3 51 8D  // ..............Q.
    22F0: 9C AC 03 32 C9 E8 D3 0F 59 C3 51 8D 9C AC 03 B1  // ...2....Y.Q.....
    2300: 01 E8 C7 0F 59 C3 8D 9C 32 01 E8 1A 10 24 07 75  // ....Y...2....$.u
    2310: 15 B9 64 00 8D 9C AC 03 E8 0C 10 3C 02 74 03 B9  // ..d........<.t..
    2320: 90 01 E8 D5 0B C3 32 E4 B1 04 33 D2 F6 E1 8B C8  // ......2...3.....
    2330: E8 D2 0B C3 51 8D 5C 14 E8 EC 0F 66 C1 E0 10 E8  // ....Q.\....f....
    2340: A4 01 59 C3 53 8D 9C 44 01 E8 DB 0F 5B C3 53 66  // ..Y.S..D....[.Sf
    2350: 50 8D 9C 44 01 E8 CF 0F 8B C1 E8 2A 0F 66 58 5B  // P..D.......*.fX[
    2360: C3 53 51 8D 9C 44 01 8A E8 B1 03 E8 5D 0F 59 5B  // .SQ..D......].Y[
    2370: C3 33 C9 E8 38 0B 38 C1 73 05 B5 00 E8 8C 00 B5  // .3..8.8.s.......
    2380: 00 E8 80 00 FE C1 E8 25 0B 38 C1 72 E6 B1 14 8A  // .......%.8.r....
    2390: E9 E8 1D 0B 38 C1 74 05 B5 03 E8 E3 01 FE C1 E8  // ....8.t.........
    23A0: 06 0B 04 14 38 C1 76 E7 C3 83 EC 0C 8B EC 0B F6  // ....8.v.........
    23B0: 74 1E E8 03 F8 66 C1 C8 10 66 89 46 00 8D 5C 04  // t....f...f.F..\.
    23C0: E8 64 0F 66 89 46 04 8D 5C 08 E8 5A 0F 88 46 0A  // .d.f.F..\..Z..F.
    23D0: 89 4E 08 8C D0 66 C1 E0 10 8B C4 BB 2B 00 E8 E3  // .N...f......+...
    23E0: 09 83 C4 0C C3 83 EC 04 8B EC B0 02 88 46 01 88  // .............F..
    23F0: 4E 00 8C D0 66 C1 E0 10 8B C4 BB 25 00 E8 C4 09  // N...f......%....
    2400: 83 C4 04 C3 BB 23 00 E8 08 00 C3 BB 17 00 E8 01  // .....#..........
    2410: 00 C3 83 EC 04 8B EC 89 4E 00 8C D0 66 C1 E0 10  // ........N...f...
    2420: 8B C4 E8 9F 09 83 C4 04 C3 BB 22 00 E8 E3 FF C3  // ..........".....
    2430: BB 27 00 E8 DC FF C3 BB 2C 00 E8 D5 FF C3 E8 E6  // .'......,.......
    2440: 0E 66 A9 00 00 FF FF 74 40 83 EC 18 8B EC 55 51  // .f.....t@.....UQ
    2450: B9 04 00 83 C3 02 E8 CE 0E 66 89 46 00 83 C5 04  // .........f.F....
    2460: 83 C3 04 E2 F1 83 C3 04 E8 BC 0E 66 C1 C8 10 66  // ...........f...f
    2470: 89 46 00 59 5D 88 4E 14 8C D0 66 C1 E0 10 8B C4  // .F.Y].N...f.....
    2480: BB 31 00 E8 3E 09 83 C4 18 C3 E8 36 EE 8D 9C D0  // .1..>......6....
    2490: 02 E8 93 0E 8A E8 BB 21 00 E8 76 FF C3 8D 9C 3C  // .......!..v....<
    24A0: 03 E8 83 0E 8A F8 E8 F9 ED 8A DD 53 8D 9C 42 03  // ...........S..B.
    24B0: E8 74 0E 8A E8 5B E8 0A EE E8 A7 EE E8 D5 04 75  // .t...[.........u
    24C0: 02 B3 01 83 EC 04 8B EC 88 4E 00 88 7E 01 88 5E  // .........N..~..^
    24D0: 02 88 6E 03 8C D0 66 C1 E0 10 8B C4 BB 2A 00 E8  // ..n...f......*..
    24E0: E2 08 83 C4 04 C3 83 EC 10 8B EC 66 3D F0 FF FF  // ...........f=...
    24F0: 03 76 06 66 B8 F0 FF FF 03 66 8B C8 66 33 C0 66  // .v.f.....f..f3.f
    2500: 89 46 04 66 89 46 00 66 89 46 08 66 B8 00 00 00  // .F.f.F.f.F.f....
    2510: D0 66 0B C1 66 89 46 0C 8C D0 66 C1 E0 10 8B C4  // .f..f.F...f.....
    2520: BB 35 00 E8 9E 08 83 C4 10 C3 83 EC 08 8B EC 89  // .5..............
    2530: 4E 00 66 89 56 02 89 5E 06 8C D0 66 C1 E0 10 8B  // N.f.V..^...f....
    2540: C4 BB 2D 00 E8 7D 08 83 C4 08 C3 3D C0 7F 76 04  // ..-..}.....=..v.
    2550: B8 C0 7F C3 83 C0 3F 24 C0 C3 51 E8 C9 0D 66 33  // ......?$..Q...f3
    2560: D2 B9 0A 00 F7 F1 8B C8 E8 BC 0D 03 C1 66 25 FF  // .............f%.
    2570: FF 00 00 59 3D 10 27 73 03 B8 10 27 C3 32 D2 C3  // ...Y=.'s...'.2..
    2580: 80 FD 02 75 25 E8 42 EE 66 BB 00 08 00 00 E8 9A  // ...u%.B.f.......
    2590: 00 E8 36 EE 66 BB 03 08 00 00 E8 8E 00 66 33 D2  // ..6.f........f3.
    25A0: 66 BB 01 08 00 00 E8 82 00 C3 80 FD 03 75 10 66  // f............u.f
    25B0: 33 C0 8A C1 66 33 D2 66 BB FF 00 00 00 EB 36 51  // 3...f3.f......6Q
    25C0: 33 D2 E8 DD EC 8A D5 66 C1 E2 10 E8 15 ED 8A F2  // 3......f........
    25D0: 8A D1 66 8B C2 66 0D 00 00 00 80 E8 50 ED 80 FB  // ..f..f......P...
    25E0: 04 76 06 66 0D 00 00 00 08 E8 86 ED E8 D4 EC 66  // .v.f...........f
    25F0: 33 DB 8A D9 59 83 EC 10 8B EC 66 89 46 04 66 89  // 3...Y.....f.F.f.
    2600: 5E 08 66 8B C2 66 33 D2 66 BB 64 00 00 00 66 F7  // ^.f..f3.f.d...f.
    2610: E3 66 89 46 00 BB 0C 00 8C D0 66 C1 E0 10 8B C4  // .f.F......f.....
    2620: E8 A1 07 8B EC B3 01 83 C4 10 C3 83 EC 10 8B EC  // ................
    2630: 66 89 56 00 66 89 5E 04 BB 2E 00 8C D0 66 C1 E0  // f.V.f.^......f..
    2640: 10 8B C4 E8 7E 07 B3 01 83 C4 10 C3 C3 53 51 66  // ....~........SQf
    2650: 50 B9 68 74 80 FB 03 74 0B B9 A0 8C 80 FB 00 75  // P.ht...t.......u
    2660: 03 B9 78 69 66 33 D2 8B D1 66 58 59 5B C3 66 52  // ..xif3...fXY[.fR
    2670: B3 00 66 F7 C2 00 00 FF FF 75 1A 80 FD 13 74 15  // ..f......u....t.
    2680: 80 FD 14 74 10 B3 01 80 FD 0E 74 09 B3 03 80 F9  // ...t......t.....
    2690: 03 74 02 B3 02 66 5A C3 B5 11 80 FA 23 74 07 80  // .t...fZ.....#t..
    26A0: FA 22 74 02 B5 00 C3 B5 02 80 FA 23 74 07 80 FA  // ."t........#t...
    26B0: 22 74 02 B3 01 C3 32 C9 80 FD 00 75 08 C7 46 00  // "t....2....u..F.
    26C0: 0B 01 B1 01 C3 50 33 C0 E8 9E 01 04 14 89 46 00  // .....P3.......F.
    26D0: 58 B1 01 C3 C3 8B DA B7 22 80 FE 21 74 02 B7 21  // X......."..!t..!
    26E0: C3 0C 01 C3 E8 40 0C 66 C1 E8 10 0B C0 74 1C 53  // .....@.f.....t.S
    26F0: 83 C3 06 E8 31 0C 5B 3D E0 01 72 0F 53 83 C3 18  // ....1.[=..r.S...
    2700: E8 24 0C 5B A8 80 75 03 0C 01 C3 32 C0 C3 B5 0C  // .$.[..u....2....
    2710: C3 B5 02 C3 50 E8 51 01 B1 03 0A C0 74 04 B1 08  // ....P.Q.....t...
    2720: 02 C8 58 C3 80 FA 22 75 05 C7 46 00 78 69 C3 E8  // ..X..."u..F.xi..
    2730: 1A 01 80 FD FF 74 35 83 EC 0C 8B EC 88 4E 01 88  // .....t5......N..
    2740: 6E 00 80 F9 0F 75 05 E8 4F 00 EB 0F 80 F9 10 75  // n....u..O......u
    2750: 0A 8D 9C 48 03 E8 CF 0B 88 46 02 8C D0 66 C1 E0  // ...H.....F...f..
    2760: 10 8B C4 BB 04 00 E8 5B 06 83 C4 0C C3 83 EC 10  // .......[........
    2770: 8B EC 88 4E 01 E8 76 EB 81 E2 00 07 FE CE C0 E6  // ...N..v.........
    2780: 04 88 76 00 E8 12 00 8C D0 66 C1 E0 10 8B C4 BB  // ..v......f......
    2790: 32 00 E8 2F 06 83 C4 10 C3 66 53 E8 70 EB 66 8B  // 2../.....fS.p.f.
    27A0: C2 66 33 D2 66 BB 8C 0A 00 00 66 F7 F3 66 5B 8A  // .f3.f.....f..f[.
    27B0: E8 88 6E 09 8D 9C 40 03 E8 6C 0B 88 46 02 88 66  // ..n...@..l..F..f
    27C0: 03 66 C1 E8 10 88 46 08 E8 32 EB 66 89 56 04 C3  // .f....F..2.f.V..
    27D0: 83 EC 20 8B EC 80 F9 04 75 0A 88 4E 01 32 C0 88  // .. .....u..N.2..
    27E0: 46 00 EB 56 E8 FC EA E8 7F 00 88 46 00 88 4E 01  // F..V.......F..N.
    27F0: E8 70 EB 88 56 0A 80 F9 01 74 18 80 F9 0B 75 3A  // .p..V....t....u:
    2800: 8D 9C 5C 03 E8 20 0B 88 46 02 E8 F0 EA 66 89 56  // ..\.. ..F....f.V
    2810: 04 EB 27 E8 09 EB 88 6E 08 E8 E1 EA 66 89 56 04  // ..'....n....f.V.
    2820: E8 0B EB 88 5E 03 E8 79 EA 88 6E 02 51 E8 1C 00  // ....^..y..n.Q...
    2830: 8A CD B0 01 D2 E0 59 88 46 09 8C D0 66 C1 E0 10  // ......Y.F...f...
    2840: 8B C4 BB 4C 00 E8 7C 05 83 C4 20 C3 8D 9C 3C 03  // ...L..|... ...<.
    2850: E8 D4 0A 32 ED 3C 03 74 0C 3C 09 72 09 3C 0E 77  // ...2.<.t.<.r.<.w
    2860: 05 2C 08 8A E8 C3 B5 FF C3 52 32 C0 80 EE 21 80  // .,.......R2...!.
    2870: FA 1E 74 10 B0 02 80 FA 20 74 09 B0 04 80 FA 21  // ..t..... t.....!
    2880: 74 02 B0 06 02 C6 5A C3 83 EC 08 8C D0 66 C1 E0  // t.....Z......f..
    2890: 10 8B C4 BB 4B 00 E8 2B 05 83 C4 08 C3 83 EC 08  // ....K..+........
    28A0: 8B EC 89 7E 00 89 5E 02 89 56 04 89 4E 06 8C D0  // ...~..^..V..N...
    28B0: 66 C1 E0 10 8B C4 BB 36 00 E8 08 05 8B EC 8B 5E  // f......6.......^
    28C0: 02 8A 7E 01 83 C4 08 C3 56 33 F6 66 F7 C2 00 00  // ..~.....V3.f....
    28D0: 80 00 75 0A 50 33 C0 8A C6 8B F0 32 F6 58 53 BB  // ..u.P3.....2.XS.
    28E0: 04 1F E8 A2 09 66 8B C2 BB 00 1F E8 99 09 5B 66  // .....f........[f
    28F0: F7 C2 00 00 10 00 75 02 33 DB 8B D3 66 C1 E2 10  // ......u.3...f...
    2900: BA 00 1F 83 EC 08 8B EC 66 89 56 00 88 4E 04 8A  // ........f.V..N..
    2910: C5 FE C8 88 46 07 C6 46 05 00 C6 46 06 00 8C D0  // ....F..F...F....
    2920: 66 C1 E0 10 8B C4 BB 4E 00 E8 98 04 8B EC 8A 5E  // f......N.......^
    2930: 05 8A 7E 06 83 C4 08 0A DB 74 32 51 B9 90 01 80  // ..~......t2Q....
    2940: FB 20 74 05 80 FB 80 75 13 B9 0A 00 8B C6 0A C0  // . t....u........
    2950: 74 0A B9 90 01 3C 01 74 03 B9 E8 03 E8 9B 05 59  // t....<.t.......Y
    2960: 8B C6 FE C4 8B F0 80 FC 06 76 98 0A DB 5E C3 8D  // .........v...^..
    2970: 5C 04 E8 B2 09 8B D0 B5 02 E8 14 00 74 11 B5 01  // \...........t...
    2980: 80 FA 13 75 0A E8 61 00 80 FA 13 75 02 B5 02 C3  // ...u..a....u....
    2990: 80 FA 14 C3 E8 F9 FF 74 03 80 FA 0E C3 80 FA 05  // .......t........
    29A0: C3 80 FA 02 74 03 80 FA 04 C3 80 FA 01 74 03 80  // ....t........t..
    29B0: FA 02 C3 80 FA 02 75 03 B2 01 C3 80 FA 04 75 03  // ......u.......u.
    29C0: B2 03 C3 C3 B5 08 E8 D8 FF 74 02 B5 04 C3 8D 5C  // .........t.....\
    29D0: 09 E8 53 09 8A C8 0A C9 75 03 32 C0 C3 B5 02 E8  // ..S.....u.2.....
    29E0: A6 04 8A C5 24 02 D0 E8 C3 8D 5C 08 E8 38 09 8A  // ....$.....\..8..
    29F0: D0 B6 01 83 EC 10 8B EC 89 56 02 8C D0 66 C1 E0  // .........V...f..
    2A00: 10 8B C4 BB 4F 00 E8 BB 03 8B EC 8A 56 04 83 C4  // ....O.......V...
    2A10: 10 C3 53 83 C3 4C E8 DC 08 5B C3 53 83 C3 4C E8  // ..S..L...[.S..L.
    2A20: 2E 08 5B C3 56 E8 59 03 8B 44 38 83 7D 20 00 5E  // ..[.V.Y..D8.} .^
    2A30: C3 52 50 0F BC D8 32 FF 80 FB 01 75 05 BB 00 24  // .RP...2....u...$
    2A40: EB 0C FE CB B8 00 04 F7 E3 05 00 20 8B D8 58 5A  // ........... ..XZ
    2A50: C3 57 E8 56 00 74 0A 8B 5D 02 E8 08 00 0B DB 5F  // .W.V.t..]......_
    2A60: C3 33 DB 5F C3 52 51 0B DB 74 1B 56 E8 F9 02 03  // .3._.RQ..t.V....
    2A70: DE 5E 33 C9 8A 4F 01 80 3F FF 74 08 3A 07 74 06  // .^3..O..?.t.:.t.
    2A80: 03 D9 EB F0 33 DB 0B DB 59 5A C3 56 51 E8 D8 02  // ....3...YZ.VQ...
    2A90: 32 C9 8D 7C 08 3B 5D 04 74 0C 83 C7 10 FE C1 3A  // 2..|.;].t......:
    2AA0: 4C 06 72 F1 33 FF 0B FF 59 5E C3 56 51 E8 B8 02  // L.r.3...Y^.VQ...
    2AB0: 32 C9 8D 7C 08 3B 1D 74 0C 83 C7 10 FE C1 3A 4C  // 2..|.;.t......:L
    2AC0: 06 72 F2 33 FF 0B FF 59 5E C3 56 51 E8 99 02 32  // .r.3...Y^.VQ...2
    2AD0: C9 8D 7C 08 3B 45 0C 74 0C 83 C7 10 FE C1 3A 4C  // ..|.;E.t......:L
    2AE0: 06 72 F1 33 FF 0B FF 59 5E C3 57 50 E8 DB FF 8A  // .r.3...Y^.WP....
    2AF0: C3 8B 5D 02 E8 6E FF 58 5F C3 53 32 C9 B3 01 E8  // ..]..n.X_.S2....
    2B00: E8 FF 74 03 8A 4F 02 0A C9 5B C3 53 32 ED B3 02  // ..t..O...[.S2...
    2B10: E8 D7 FF 74 03 8A 6F 02 0A ED 5B C3 50 57 8B DA  // ...t..o...[.PW..
    2B20: E8 68 FF 75 04 33 DB EB 0D B0 14 8B 5D 08 E8 34  // .h.u.3......]..4
    2B30: FF 74 F2 8B 5F 02 5F 58 C3 66 50 53 51 57 8D 1C  // .t.._._X.fPSQW..
    2B40: 66 25 FF FF 00 00 E8 3E 07 8B D8 E8 3B 00 23 C3  // f%.....>....;.#.
    2B50: 74 31 E8 75 FF 0B FF 74 2A 66 50 66 8B 45 04 8D  // t1.u...t*fPf.E..
    2B60: 5C 0C E8 22 07 66 33 C0 8B 05 8D 5C 04 E8 17 07  // \..".f3....\....
    2B70: 66 58 E8 85 FF E8 93 FF 8D 5C 08 66 33 C0 8B C1  // fX.......\.f3...
    2B80: E8 04 07 5F 59 5B 66 58 C3 56 E8 DB 01 8B 44 04  // ..._Y[fX.V....D.
    2B90: 5E C3 56 E8 D2 01 89 44 04 5E C3 E8 F8 01 8B F7  // ^.V....D.^......
    2BA0: 83 C6 38 BB 00 2C B9 23 00 E8 36 03 E8 01 00 C3  // ..8..,.#..6.....
    2BB0: 51 66 57 56 E8 B1 01 66 33 FF 8D 7C 08 33 C0 E8  // QfWV...f3..|.3..
    2BC0: D0 FF 32 C9 8B 15 B8 00 70 23 C2 3D 00 30 75 5A  // ..2.....p#.=.0uZ
    2BD0: 80 FA 15 74 0B E8 B1 FF 0B 45 0C E8 B4 FF EB 4A  // ...t.....E.....J
    2BE0: E8 64 00 89 45 0C 0B C0 75 04 89 05 EB 3C E8 98  // .d..E...u....<..
    2BF0: FF 0B 45 0C E8 9B FF 83 7D 06 00 74 16 E8 50 00  // ..E.....}..t..P.
    2C00: 89 45 06 0B C0 74 0C 83 7D 06 00 74 06 8B 5C 0A  // .E...t..}..t..\.
    2C10: E8 C1 00 E8 46 00 89 05 8B 5D 02 E8 B6 00 8B 5D  // ....F....].....]
    2C20: 02 E8 D1 00 8B 5D 08 E8 EF 00 83 C7 10 FE C1 3A  // .....].........:
    2C30: 4C 06 72 90 5E 66 5F 59 C3 08 00 80 00 00 02 00  // L.r.^f_Y........
    2C40: 04 00 08 40 00 00 00 53 E8 58 00 E8 D9 06 5B C3  // ...@...S.X....[.
    2C50: 53 E8 4F 00 83 C3 08 E8 CD 06 5B C3 53 57 52 E8  // S.O.......[.SWR.
    2C60: 41 00 83 C3 04 E8 BF 06 8B D0 E8 34 FD 75 16 8B  // A..........4.u..
    2C70: 5D 04 8B D3 E8 5E FA 57 E8 10 FE 5F 75 07 8B D0  // ]....^.W..._u...
    2C80: E8 30 FD 8B C2 5A 5F 5B C3 E8 D0 FF 66 C1 E8 10  // .0...Z_[....f...
    2C90: B4 11 E8 25 00 C3 E8 C3 FF 66 C1 E8 18 B4 10 E8  // ...%.....f......
    2CA0: 18 00 C3 51 52 33 C9 8A CE 80 E1 07 49 B8 10 00  // ...QR3......I...
    2CB0: F7 E1 BB 14 2C 03 D8 5A 59 C3 57 53 51 33 C9 8A  // ....,..ZY.WSQ3..
    2CC0: C8 8A C4 BB 03 71 E8 88 FD 83 C3 02 03 D9 8A 07  // .....q..........
    2CD0: 59 5B 5F C3 50 53 B0 01 E8 8A FD 74 15 E8 A9 FF  // Y[_.PS.....t....
    2CE0: 88 47 02 5B 53 B0 02 E8 7B FD 74 06 E8 A7 FF 88  // .G.[S...{.t.....
    2CF0: 47 02 5B 58 C3 51 50 B0 17 E8 69 FD 74 18 53 E8  // G.[X.QP...i.t.S.
    2D00: A1 FF 83 C3 0C E8 1F 06 8B C8 5B F7 C1 00 04 74  // ..........[....t
    2D10: 05 66 83 4F 02 01 58 59 C3 51 50 B0 14 E8 45 FD  // .f.O..XY.QP...E.
    2D20: 74 3A 53 E8 7D FF 83 C3 0C E8 FB 05 8B C8 5B F6  // t:S.}.........[.
    2D30: C1 01 74 05 66 83 67 02 FD F6 C1 80 74 05 66 83  // ..t.f.g.....t.f.
    2D40: 67 02 F7 F7 C1 00 01 74 08 66 81 4F 02 00 01 00  // g......t.f.O....
    2D50: 00 F7 C1 00 02 74 05 66 83 67 02 FB 58 59 C3 BF  // .....t.f.g..XY..
    2D60: A8 01 8B 3D 8B 7D 0C C3 BE A8 01 8B 34 8B 74 30  // ...=.}......4.t0
    2D70: C3 1E 0E 1F BF A8 01 8B 3D 8B 7D 0E 83 C7 04 1F  // ........=.}.....
    2D80: C3 BE A8 01 8B 34 8B 74 10 C3 BF A8 01 8B 3D 8B  // .....4.t......=.
    2D90: 7D 26 83 C7 04 C3 BF A8 01 8B 3D 8B 7D 40 C3 BE  // }&........=.}@..
    2DA0: A8 01 8B 34 8B 74 1A C3 BE A8 01 8B 34 8B 74 3A  // ...4.t......4.t:
    2DB0: C3 BF A8 01 8B 3D 8B 7D 0A 83 C7 04 B9 0C 00 C3  // .....=.}........
    2DC0: E8 01 00 CB 83 EC 06 8B EC 89 46 00 66 33 C0 C6  // ..........F.f3..
    2DD0: 46 04 00 89 46 02 06 52 8A D3 8B C5 E8 8A 17 5A  // F...F..R.......Z
    2DE0: 07 83 C4 06 C3 E8 77 FF 66 F7 45 10 01 00 00 00  // ......w.f.E.....
    2DF0: C3 50 E8 6A FF B8 01 00 09 45 10 58 C3 E8 5F FF  // .P.j.....E.X.._.
    2E00: 88 45 10 C3 66 53 83 EC 48 8B EC 66 89 5E 00 66  // .E..fS..H..f.^.f
    2E10: 89 4E 04 8C D0 66 C1 E0 10 8B C4 BB 00 00 E8 A3  // .N...f..........
    2E20: FF 83 C4 48 66 5B E8 6A 01 E8 A4 01 83 EC 1C 8B  // ...Hf[.j........
    2E30: EC C6 46 01 07 8C D0 66 C1 E0 10 8B C4 BB 0D 00  // ..F....f........
    2E40: E8 81 FF 83 C4 1C E8 0E 00 BB 04 00 E8 C3 FB 66  // ...............f
    2E50: C1 E8 10 E8 A7 FF C3 83 EC 1C 8B EC C6 46 01 08  // .............F..
    2E60: 8C D0 66 C1 E0 10 8B C4 BB 0D 00 E8 56 FF 83 C4  // ..f.........V...
    2E70: 1C C3 E8 EA FE 66 8B 5D 08 66 8B 4D 0C C3 56 E8  // .....f.].f.M..V.
    2E80: 26 FF 66 8B 44 08 5E C3 83 EC 04 8B EC 89 4E 00  // &.f.D.^.......N.
    2E90: 8C D0 66 C1 E0 10 8B C4 BB 38 00 E8 26 FF 8B EC  // ..f......8..&...
    2EA0: 8A 6E 02 83 C4 04 C3 C3 B0 05 C3 B0 01 C3 B0 04  // .n..............
    2EB0: C3 B0 08 C3 53 66 50 66 33 C0 E8 CA 03 83 C3 04  // ....SfPf3.......
    2EC0: E2 F8 66 58 5B C3 32 C0 C3 FC E8 5A 04 66 C1 CB  // ..fX[.2....Z.f..
    2ED0: 10 E8 B3 03 66 C1 CB 10 66 81 C3 04 00 04 00 E2  // ....f...f.......
    2EE0: E9 C3 FC 66 AD E8 9F 03 83 C3 04 E2 F6 C3 FC E8  // ...f............
    2EF0: 35 04 66 AB 83 C3 04 E2 F6 C3 66 50 B8 30 00 E8  // 5.f.......fP.0..
    2F00: 10 00 66 58 C3 66 50 B8 C0 5D D1 E1 E8 03 00 66  // ..fX.fP..].....f
    2F10: 58 C3 52 F7 E1 8B CA E8 26 02 66 53 8B D9 66 C1  // X.R.....&.fS..f.
    2F20: E3 10 8B D8 66 B8 04 B1 03 00 B2 00 66 EF B2 04  // ....f.......f...
    2F30: 66 33 C0 66 EF 66 B8 08 B1 03 00 B2 00 66 EF B2  // f3.f.f.......f..
    2F40: 04 66 ED 33 C9 66 03 D8 73 0A 66 ED 66 A9 00 00  // .f.3.f..s.f.f...
    2F50: 00 80 75 F6 66 ED 66 3B C3 73 0C 66 C1 E8 10 3B  // ..u.f.f;.s.f...;
    2F60: C1 72 04 8B C8 EB ED 66 5B 5A C3 BB 42 EC E8 84  // .r.....f[Z..B...
    2F70: 03 66 33 D2 66 BB 30 00 00 00 66 F7 F3 C3 66 50  // .f3.f.0...f...fP
    2F80: 53 BB 07 00 E8 8B FA 25 00 02 35 00 02 0B C0 5B  // S......%..5....[
    2F90: 66 58 C3 66 51 B3 01 E8 80 01 E8 02 FE 66 33 C9  // fX.fQ........f3.
    2FA0: 8B 4C 08 66 C1 E0 0A 0B C9 75 03 B9 20 00 66 2B  // .L.f.....u.. .f+
    2FB0: C1 E8 EB FD 66 89 44 04 89 4C 08 66 59 C3 56 1E  // ....f.D..L.fY.V.
    2FC0: 0E 1F E8 DA FD 66 8B 44 04 66 C1 E0 0A 1F 5E C3  // .....f.D.f....^.
    2FD0: E8 C0 FF 06 E8 BF FD 0E 07 BB 00 78 E8 48 03 66  // ...........x.H.f
    2FE0: 3B 05 75 07 B9 00 01 FC E8 03 FF E8 A8 FD BE A8  // ;.u.............
    2FF0: 01 8B 34 8B 74 14 8B 45 14 89 44 0C E8 82 FD 0B  // ..4.t..E..D.....
    3000: F6 74 4F 8B 45 28 89 44 20 8A 45 33 88 44 38 F6  // .tO.E(.D .E3.D8.
    3010: 45 26 08 74 17 8A 45 26 C0 E8 04 88 44 24 80 64  // E&.t..E&....D$.d
    3020: 24 FD F6 45 26 01 74 04 80 4C 24 02 57 83 C7 38  // $..E&.t..L$.W..8
    3030: 8A 85 87 00 88 44 3B 5F 66 8B 45 18 89 44 28 B9  // .....D;_f.E..D(.
    3040: 07 00 8D 5D 2C 8A 07 0A C0 74 03 88 44 2C 43 46  // ...],....t..D,CF
    3050: E2 F3 E8 53 FD 8B 45 20 89 44 10 8B 45 22 89 44  // ...S..E .D..E".D
    3060: 12 8B 45 1C 89 44 14 8B 45 1E 89 44 16 BB 04 71  // ..E..D..E..D...q
    3070: B0 09 E8 DC F9 74 0C 57 83 C7 38 8A 85 85 00 88  // .....t.W..8.....
    3080: 47 04 5F 07 C3 BE A8 01 8B 34 8B 74 1E 83 C6 04  // G._......4.t....
    3090: B9 26 00 C3 56 E8 E9 FC 8A 6C 33 5E C3 56 E8 E0  // .&..V....l3^.V..
    30A0: FC 53 81 C3 09 01 E8 7E 02 8A E8 5B 53 81 C3 00  // .S.....~...[S...
    30B0: 01 E8 73 02 5B 8A C5 66 89 44 34 5E C3 56 E8 C0  // ..s.[..f.D4^.V..
    30C0: FC 66 8B 44 34 53 81 C3 08 01 B1 01 8A E8 E8 FA  // .f.D4S..........
    30D0: 01 5B 53 81 C3 00 01 B1 01 8A EC E8 ED 01 5B 53  // .[S...........[S
    30E0: 81 C3 02 01 66 C1 E8 10 E8 B4 01 5B 5E C3 56 E8  // ....f......[^.V.
    30F0: 8F FC 8B FE 83 C7 04 5E C3 56 E8 84 FC 8A 44 24  // .......^.V....D$
    3100: 80 FD 00 74 05 88 6C 33 0C 02 88 44 24 5E C3 32  // ...t..l3...D$^.2
    3110: C0 C3 E8 81 FC 66 8B 45 08 C3 66 53 83 EC 04 8B  // .....f.E..fS....
    3120: EC 8C D0 66 C1 E0 10 8B C4 66 89 5E 00 BB 06 00  // ...f.....f.^....
    3130: E8 91 FC 8B EC 66 8B 46 00 83 C4 04 66 5B C3 00  // .....f.F....f[..
    3140: 66 50 8C C8 3D 00 C0 75 0C BA C3 03 EC 8A F0 0A  // fP..=..u........
    3150: F6 74 02 EB 0E 53 2E 8B 1E 14 00 B2 20 E8 D6 00  // .t...S...... ...
    3160: 8A F4 5B 32 D2 66 ED 66 58 C3 2E 8B 1E 14 00 C3  // ..[2.f.fX.......
    3170: 0B C9 75 1A 4B 74 16 43 3B DA 77 09 8B C8 8B C2  // ..u.Kt.C;.w.....
    3180: 2B D2 F7 F3 91 F7 F3 8B DA 8B D1 2B C9 C3 3B CA  // +..........+..;.
    3190: 72 1A 75 10 3B D8 77 0C 2B C3 8B D8 2B C9 2B D2  // r.u.;.w.+...+.+.
    31A0: B8 01 00 C3 2B C9 2B DB 93 87 CA C3 55 56 2B F6  // ....+.+.....UV+.
    31B0: 8B EE 03 DB 13 C9 72 11 45 3B CA 72 F5 77 04 3B  // ......r.E;.r.w.;
    31C0: D8 76 EF F8 13 F6 4D 78 20 D1 D9 D1 DB 2B C3 1B  // .v....Mx ....+..
    31D0: D1 F5 72 F0 03 F6 4D 78 0C D1 E9 D1 DB 03 C3 13  // ..r...Mx........
    31E0: D1 73 F1 EB DF 03 C3 13 D1 8B D8 8B CA 8B C6 33  // .s.............3
    31F0: D2 5E 5D C3 93 50 92 0B C0 74 02 F7 E2 91 0B C0  // .^]..P...t......
    3200: 74 04 F7 E3 03 C8 58 F7 E3 03 D1 C3 52 66 50 B4  // t.....X.....RfP.
    3210: 80 8A C7 66 C1 E0 10 8A E3 8A C2 24 FC BA F8 0C  // ...f.......$....
    3220: 66 EF 66 58 5A C3 52 BA FC 0C 66 ED 5A C3 52 BA  // f.fXZ.R...f.Z.R.
    3230: FC 0C 66 EF 5A C3 E8 31 FF 9C FA E8 CE FF E8 E5  // ..f.Z..1........
    3240: FF 9D C3 E8 24 FF 9C FA E8 C1 FF E8 E0 FF 9D C3  // ....$...........
    3250: 52 66 53 66 50 E8 06 00 66 58 66 5B 5A C3 66 C1  // RfSfP...fXf[Z.f.
    3260: E3 10 66 C1 EB 0E E8 D7 FE E8 93 01 C3 66 50 66  // ..f..........fPf
    3270: C1 E3 10 66 C1 EB 10 E8 44 FD 66 03 D8 66 81 CB  // ...f....D.f..f..
    3280: 00 00 00 80 66 58 C3 52 66 53 E8 04 00 66 5B 5A  // ....fX.RfS...f[Z
    3290: C3 66 50 E8 AA FE E8 D4 FF E8 63 01 66 58 C3 52  // .fP.......c.fX.R
    32A0: 51 66 53 66 50 8A CB 80 E3 FC 80 E1 03 C0 E1 03  // QfSfP...........
    32B0: E8 8D FE E8 B7 FF E8 2D 01 66 D3 C8 58 50 66 D3  // .......-.f..XPf.
    32C0: C0 E8 3B 01 66 58 66 5B 59 5A C3 66 50 51 C0 E1  // ..;.fXf[YZ.fPQ..
    32D0: 03 E8 53 00 66 D3 C8 8A C5 66 D3 C0 E8 A8 FF 59  // ..S.f....f.....Y
    32E0: 66 58 C3 66 50 51 C0 E1 03 E8 3B 00 66 D3 C8 59  // fX.fPQ....;.f..Y
    32F0: 8A E8 66 58 C3 E8 5F 00 C3 E8 44 FE 66 C1 E3 10  // ..fX.._...D.f...
    3300: 66 C1 EB 0E E8 DF 00 C3 E8 35 FE 66 C1 E3 02 E8  // f........5.f....
    3310: D4 00 C3 52 66 53 E8 04 00 66 5B 5A C3 E8 20 FE  // ...RfS...f[Z.. .
    3320: E8 4A FF E8 C0 00 C3 51 66 52 8A EB 8A CB 80 E1  // .J.....QfR......
    3330: 03 C0 E1 03 80 E3 FC E8 D9 FF 80 F9 00 74 14 66  // .............t.f
    3340: 8B D0 83 C3 04 E8 CB FF 83 EB 04 66 92 66 0F AD  // ...........f.f..
    3350: D0 8A DD 66 5A 59 C3 52 66 53 E8 9C FF 66 5B 5A  // ...fZY.RfS...f[Z
    3360: C3 52 66 53 E8 A1 FF 66 5B 5A C3 66 50 55 52 66  // .RfS...f[Z.fPURf
    3370: 50 8B EC 8B 56 0C 89 56 08 E8 C4 FD B2 00 66 ED  // P...V..V......f.
    3380: 66 89 46 0A 66 58 5A 5D C3 66 50 55 52 66 50 8B  // f.F.fXZ].fPURfP.
    3390: EC 8B 56 0C 89 56 08 E8 A6 FD 2E A1 F5 01 B2 18  // ..V..V..........
    33A0: EF B2 00 66 ED 66 89 46 0A 66 58 5A 5D C3 66 50  // ...f.f.F.fXZ].fP
    33B0: 55 52 8B EC E8 89 FD B2 00 66 8B 46 0A 66 EF 8B  // UR.......f.F.f..
    33C0: 56 08 89 56 0C 66 8B 46 04 66 89 46 08 5A 5D 66  // V..V.f.F.f.F.Z]f
    33D0: 58 66 58 C3 66 50 52 E8 66 FD B2 18 66 ED 2E A3  // XfX.fPR.f...f...
    33E0: F5 01 5A 66 58 C3 66 81 FB FF 00 00 00 77 04 8A  // ..ZfX.f......w..
    33F0: D3 EB 09 66 8B C3 B2 00 66 EF B2 04 66 ED C3 66  // ...f....f...f..f
    3400: 81 FB FF 00 00 00 77 04 8A D3 EB 0A 66 93 B2 00  // ......w.....f...
    3410: 66 EF 66 93 B2 04 66 EF C3 C3 C3 55 8B EC 53 51  // f.f...f....U..SQ
    3420: 8B F0 26 8B 5C 14 26 8B 4C 16 E8 28 00 8D 66 FC  // ..&.\.&.L..(..f.
    3430: 59 5B 5D C3 53 51 8B F0 26 8B 5C 24 33 C9 E8 14  // Y[].SQ..&.\$3...
    3440: 00 59 5B C3 55 8B EC 53 51 8B F0 26 8B 5C 08 26  // .Y[.U..SQ..&.\.&
    3450: 8B 4C 0A EB D5 52 56 57 C8 06 00 00 8B F0 89 4E  // .L...RVW.......N
    3460: FE 8C D0 8E C0 26 8B 7C 26 8A 45 01 32 E4 B9 20  // .....&.|&.E.2.. 
    3470: 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA  // .+..............
    3480: 8A 4D 03 32 ED 8B FA E3 06 D1 E0 D1 D7 E2 FA F7  // .M.2............
    3490: D0 F7 D7 26 21 44 1C 26 21 7C 1E 8C D0 8E C0 26  // ...&!D.&!|.....&
    34A0: 8B 7C 26 8A 4D 01 32 ED B8 20 00 2B C1 8B C8 66  // .|&.M.2.. .+...f
    34B0: C7 46 FA FF FF FF FF E3 08 D1 6E FC D1 5E FA E2  // .F........n..^..
    34C0: F8 8A 4D 02 32 ED 8B C3 8B 56 FE E3 06 D1 EA D1  // ..M.2....V......
    34D0: D8 E2 FA 23 46 FA 23 56 FC 8A 4D 03 32 ED E3 06  // ...#F.#V..M.2...
    34E0: D1 E0 D1 D2 E2 FA 26 09 44 1C 26 09 54 1E C9 5F  // ......&.D.&.T.._
    34F0: 5E 5A C3 55 8B EC 53 51 52 57 50 8B D8 26 8B 7F  // ^Z.U..SQRWP..&..
    3500: 26 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0  // &.E.2.. .+......
    3510: E3 06 D1 EA D1 D8 E2 FA 8A 4D 02 88 4E F6 C6 46  // .........M..N..F
    3520: F7 00 8B FA 8B 4E F6 E3 06 D1 E0 D1 D7 E2 FA 26  // .....N.........&
    3530: 09 47 1C 26 09 7F 1E 8D 66 F8 5F 5A E9 F1 FE 53  // .G.&....f._Z...S
    3540: 51 52 57 8B D8 8C D0 8E C0 26 8B 77 26 8A 4C 01  // QRW......&.w&.L.
    3550: 32 ED B8 20 00 2B C1 8B C8 BE FF FF 8B D6 E3 06  // 2.. .+..........
    3560: D1 EA D1 DE E2 FA 26 8B 7F 26 8A 4D 02 32 ED 8B  // ......&..&.M.2..
    3570: C6 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47  // .............&!G
    3580: 1C 26 21 57 1E 5F E9 CC 05 53 56 8B D8 8C D2 8E  // .&!W._...SV.....
    3590: C2 26 8B 77 26 80 3C 00 74 73 80 3C 01 75 58 8A  // .&.w&.<.ts.<.uX.
    35A0: 44 01 32 E4 26 83 7F 1E 00 75 4C 26 3B 47 1C 75  // D.2.&....uL&;G.u
    35B0: 46 8A 04 6B F0 03 8A 84 E2 91 26 01 47 26 8C D0  // F..k......&.G&..
    35C0: 8E C0 26 8B 77 26 80 3C 09 74 17 8A 04 32 E4 6B  // ..&.w&.<.t...2.k
    35D0: F0 03 8B C3 FF 94 E0 91 26 8B 77 26 8A 04 32 E4  // ........&.w&..2.
    35E0: EB D1 8B 44 01 26 29 47 26 26 FF 47 26 26 8B 47  // ...D.&)G&&.G&&.G
    35F0: 1C 26 8B 77 1E EB 1A 26 8B 77 26 8A 04 32 E4 6B  // .&.w...&.w&..2.k
    3600: F0 03 8A 84 E2 91 26 01 47 26 E9 80 FF 33 C0 33  // ......&.G&...3.3
    3610: F6 8B D6 5E 5B C3 53 51 52 56 8B D8 8D 77 35 26  // ...^[.SQRV...w5&
    3620: 8B 54 02 26 89 57 14 26 C7 47 16 00 00 8B F0 26  // .T.&.W.&.G.....&
    3630: 8B 47 20 33 D2 26 01 47 14 26 11 54 16 8C D1 8E  // .G 3.&.G.&.T....
    3640: C1 26 F6 47 2F 06 0F 85 0A 05 26 80 7F 34 00 75  // .&.G/.....&..4.u
    3650: 22 26 8B 77 16 26 0B 77 14 75 10 26 D1 67 08 26  // "&.w.&.w.u.&.g.&
    3660: D1 57 0A 26 D1 67 08 26 D1 57 0A 8B C3 E8 79 11  // .W.&.g.&.W....y.
    3670: E9 E1 04 26 8A 47 34 32 E4 05 80 00 99 26 89 47  // ...&.G42.....&.G
    3680: 1C 26 89 57 1E 8B C3 E8 FF FE E9 C7 04 53 56 8B  // .&.W.........SV.
    3690: D8 8D 77 35 26 8A 44 02 32 E4 C1 E0 02 26 8B 37  // ..w5&.D.2....&.7
    36A0: 26 8B 34 03 F0 26 8B 47 08 26 8B 5F 0A 26 89 04  // &.4..&.G.&._.&..
    36B0: 26 89 5C 02 5E 5B C3 53 52 56 8B D8 8C D0 8D 77  // &.\.^[.SRV.....w
    36C0: 35 8E C0 26 8A 54 02 80 FA 40 73 21 26 8B 77 02  // 5..&.T...@s!&.w.
    36D0: 32 F6 C1 E2 02 26 8B 74 04 03 F2 26 8B 57 08 26  // 2....&.t...&.W.&
    36E0: 8B 47 0A 26 89 14 26 89 44 02 E9 7F 00 80 FA 41  // .G.&..&.D......A
    36F0: 75 12 26 8B 47 08 26 8B 57 0A 26 89 47 10 26 89  // u.&.G.&.W.&.G.&.
    3700: 57 12 EB 68 80 FA 40 75 12 26 8B 47 08 26 8B 57  // W..h..@u.&.G.&.W
    3710: 0A 26 89 47 0C 26 89 57 0E EB 51 80 FA 42 75 0A  // .&.G.&.W..Q..Bu.
    3720: 26 8B 47 08 26 89 47 22 EB 42 80 FA 43 75 0A 26  // &.G.&.G".B..Cu.&
    3730: 8A 47 08 26 88 47 33 EB 33 80 FA 46 75 12 26 8B  // .G.&.G3.3..Fu.&.
    3740: 57 08 26 8B 47 0A 26 89 57 18 26 89 47 1A EB 1C  // W.&.G.&.W.&.G...
    3750: 80 FA 47 75 0A 26 8B 47 08 26 89 47 24 EB 0D 80  // ..Gu.&.G.&.G$...
    3760: FA 48 75 08 26 8B 47 08 26 89 47 20 5E 5A 5B C3  // .Hu.&.G.&.G ^Z[.
    3770: 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4 26 89 47  // SV...w5&.D.2.&.G
    3780: 14 26 C7 47 16 00 00 5E 5B C3 53 56 8B D8 26 8B  // .&.G...^[.SV..&.
    3790: 77 02 26 8B 74 02 8A 04 32 E4 26 89 47 14 26 C7  // w.&.t...2.&.G.&.
    37A0: 47 16 00 00 26 8B 5F 02 26 FF 47 02 5E 5B C3 53  // G...&._.&.G.^[.S
    37B0: 56 8B D8 26 8B 77 02 26 8B 74 02 8B 34 26 89 77  // V..&.w.&.t..4&.w
    37C0: 14 26 C7 47 16 00 00 26 8B 5F 02 26 83 47 02 02  // .&.G...&._.&.G..
    37D0: 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B  // ^[.SV..&.w.&.t..
    37E0: 04 8B 74 02 26 89 47 14 26 89 77 16 26 8B 5F 02  // ..t.&.G.&.w.&._.
    37F0: 26 83 47 02 04 5E 5B C3 53 52 56 8B D8 E8 70 FF  // &.G..^[.SRV...p.
    3800: 8B F3 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA  // ..&.G.&.W.......
    3810: D1 D8 26 01 47 14 26 11 54 16 8B C3 E8 2B 10 E9  // ..&.G.&.T....+..
    3820: 4A FF 53 8B D8 26 8B 5F 02 26 FF 47 02 5B C3 53  // J.S..&._.&.G.[.S
    3830: 8B D8 26 8B 5F 02 26 83 47 02 02 5B C3 53 56 8B  // ..&._.&.G..[.SV.
    3840: D8 E8 6B FF 8B F3 26 8B 57 20 33 C0 26 01 57 14  // ..k...&.W 3.&.W.
    3850: 26 11 44 16 8C D2 8E C2 26 8B 47 2E 32 C0 80 E4  // &.D.....&.G.2...
    3860: 06 3D 00 02 75 07 32 E4 33 D2 5E 5B C3 26 8B 47  // .=..u.2.3.^[.&.G
    3870: 2E 32 C0 80 E4 06 3D 00 04 74 EB 26 80 7F 34 00  // .2....=..t.&..4.
    3880: 75 08 8B C3 E8 2F 0F 5E 5B C3 26 8A 47 34 32 E4  // u..../.^[.&.G42.
    3890: 26 89 47 1C 26 C7 47 1E 00 00 8B C3 E8 EA FC 5E  // &.G.&.G........^
    38A0: 5B C3 53 8B D8 E8 E2 FE 26 8B 47 14 C1 E0 02 26  // [.S.....&.G....&
    38B0: 8B 1F 26 8B 1F 03 D8 26 8B 07 26 8B 57 02 5B C3  // ..&....&..&.W.[.
    38C0: C6 38 BB 38 D1 38 20 39 D7 38 EF 38 09 39 14 39  // .8.8.8 9.8.8.9.9
    38D0: 1A 39 53 51 56 8B D8 E8 B0 FE 8C D2 8E C2 26 83  // .9SQV.........&.
    38E0: 7F 16 00 75 22 26 83 7F 14 40 73 1B 26 8B 77 02  // ...u"&...@s.&.w.
    38F0: 26 8B 5F 14 C1 E3 02 26 8B 44 04 03 D8 26 8B 07  // &._....&.D...&..
    3900: 26 8B 57 02 E9 7B 05 26 8B 77 14 26 8B 47 16 83  // &.W..{.&.w.&.G..
    3910: C6 C0 83 D0 FF 75 71 83 FE 08 77 6C 03 F6 2E FF  // .....uq...wl....
    3920: A4 58 38 26 8B 47 10 26 8B 57 12 E9 54 05 26 8B  // .X8&.G.&.W..T.&.
    3930: 47 0C 26 8B 57 0E E9 49 05 26 8B 47 22 EB 4B 26  // G.&.W..I.&.G".K&
    3940: 8A 4F 33 32 ED BB 01 00 33 D2 E3 06 D1 E3 D1 D2  // .O32....3.......
    3950: E2 FA 8B C3 E9 2B 05 26 8A 4F 33 32 ED B8 01 00  // .....+.&.O32....
    3960: 33 D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 E9 11  // 3...............
    3970: 05 26 8B 47 18 26 8B 57 1A E9 06 05 26 8B 47 24  // .&.G.&.W....&.G$
    3980: EB 08 26 8B 47 20 EB 02 33 C0 33 D2 E9 F3 04 53  // ..&.G ..3.3....S
    3990: 56 8B D8 E8 F4 FD 8B F3 26 8B 47 18 26 8B 57 1A  // V.......&.G.&.W.
    39A0: D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16  // ........&.G.&.T.
    39B0: 8B C3 E8 16 0E 5E 5B C3 33 C0 33 D2 C3 53 56 8B  // .....^[.3.3..SV.
    39C0: D8 E8 EB FD 26 8B 77 14 26 03 77 22 8B 04 8B 54  // ....&.w.&.w"...T
    39D0: 02 5E 5B C3 53 8B D8 26 C6 47 2B 04 E8 AB FD 26  // .^[.S..&.G+....&
    39E0: 8B 47 14 26 8B 57 16 5B C3 53 8B D8 26 C6 47 2B  // .G.&.W.[.S..&.G+
    39F0: 01 E8 BB FD EB E9 53 8B D8 26 C6 47 2B 00 E8 D2  // ......S..&.G+...
    3A00: FD EB DC 53 8B D8 83 C3 35 26 8A 5F 01 C0 EB 03  // ...S....5&._....
    3A10: 80 E3 07 32 FF 03 DB FF 97 70 91 5B C3 53 52 56  // ...2.....p.[.SRV
    3A20: 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // ..&.G,2.........
    3A30: 8C 91 26 89 47 08 26 89 57 0A 26 8A 47 2D 32 E4  // ..&.G.&.W.&.G-2.
    3A40: 8B F0 03 F0 8B C3 FF 94 A4 91 26 89 47 04 26 89  // ..........&.G.&.
    3A50: 57 06 E9 17 FD 53 51 56 8B D8 26 8A 4F 2B 32 ED  // W....SQV..&.O+2.
    3A60: 8B F1 8A 8C D4 91 E3 0A 26 D1 6F 06 26 D1 5F 04  // ........&.o.&._.
    3A70: E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C B4  // ..&.O+2.........
    3A80: 91 8B B4 B6 91 26 21 4F 04 26 21 77 06 26 8A 4F  // .....&!O.&!w.&.O
    3A90: 2A 32 ED 8B F1 8A 8C DC 91 E3 0A 26 D1 67 04 26  // *2.........&.g.&
    3AA0: D1 57 06 E2 F6 26 8B 4F 08 26 8B 77 0A 26 89 4F  // .W...&.O.&.w.&.O
    3AB0: 14 26 89 77 16 E9 CA 03 53 51 52 56 57 8B D8 8C  // .&.w....SQRVW...
    3AC0: D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A  // ...&.G+2......&.
    3AD0: 47 2A 8B F8 8A 8D DC 91 32 ED 8B 84 B4 91 8B 94  // G*......2.......
    3AE0: B6 91 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21  // ..............&!
    3AF0: 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C  // G.&!W.&.G*2.....
    3B00: DC 91 32 ED E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6  // ..2...&.o.&._...
    3B10: 26 8A 47 2B 8B F0 C1 E6 02 8B 84 B4 91 8B 94 B6  // &.G+............
    3B20: 91 26 21 47 08 26 21 57 0A 26 8A 47 2A 32 E4 8B  // .&!G.&!W.&.G*2..
    3B30: F0 8A 8C DC 91 32 ED E3 0A 26 D1 67 08 26 D1 57  // .....2...&.g.&.W
    3B40: 0A E2 F6 26 8B 47 14 26 8B 57 16 26 09 47 08 26  // ...&.G.&.W.&.G.&
    3B50: 09 57 0A 5F 5E 5A 59 5B C3 53 51 56 8B D8 26 8A  // .W._^ZY[.SQV..&.
    3B60: 4F 2B 32 ED 8B F1 8A 8C D4 91 E3 0A 26 D1 6F 06  // O+2.........&.o.
    3B70: 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6  // &._...&.O+2.....
    3B80: 02 8B 8C B4 91 8B B4 B6 91 26 21 4F 04 26 21 77  // .........&!O.&!w
    3B90: 06 26 8A 4F 2A 32 ED 8B F1 8A 8C DC 91 E3 0A 26  // .&.O*2.........&
    3BA0: D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F 2B 32 ED 8B  // .o.&._...&.O+2..
    3BB0: F1 C1 E6 02 8B 8C B4 91 8B B4 B6 91 26 21 4F 08  // ............&!O.
    3BC0: 26 21 77 0A E9 BB 02 51 52 57 8B D8 8C D0 8E C0  // &!w....QRW......
    3BD0: 26 80 7F 2B 00 74 1A 26 8A 47 2C 32 E4 8B F0 03  // &..+.t.&.G,2....
    3BE0: F0 8B C3 FF 94 8C 91 26 89 47 08 26 89 57 0A EB  // .......&.G.&.W..
    3BF0: 10 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 98  // .&.G,2..........
    3C00: 91 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 A4  // .&.G-2..........
    3C10: 91 26 89 47 04 26 89 57 06 8C D2 8E C2 26 80 7F  // .&.G.&.W.....&..
    3C20: 2B 00 74 4A 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26  // +.tJ&.G+2......&
    3C30: 8A 47 2A 8B F8 8A 8D DC 91 32 ED 8B 84 B4 91 8B  // .G*......2......
    3C40: 94 B6 91 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26  // ...............&
    3C50: 21 47 08 26 21 57 0A 8B C3 E8 F9 FD 26 8B 47 04  // !G.&!W......&.G.
    3C60: 26 8B 57 06 26 09 47 08 26 09 57 0A EB 10 26 8B  // &.W.&.G.&.W...&.
    3C70: 57 04 26 8B 47 06 26 89 57 08 26 89 47 0A 26 8A  // W.&.G.&.W.&.G.&.
    3C80: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 80 91 5F 5A  // G,2..........._Z
    3C90: 59 C3 53 51 52 56 57 8B D8 26 8A 47 2A 32 E4 8B  // Y.SQRVW..&.G*2..
    3CA0: F0 8A 8C DC 91 32 ED E3 0A 26 D1 67 04 26 D1 57  // .....2...&.g.&.W
    3CB0: 06 E2 F6 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1  // .......&.G+2....
    3CC0: E6 02 26 8A 47 2A 8B F8 8A 8D DC 91 32 ED 8B 84  // ..&.G*......2...
    3CD0: B4 91 8B 94 B6 91 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // ................
    3CE0: F7 D2 26 09 47 04 26 09 57 06 26 8B 47 04 26 8B  // ..&.G.&.W.&.G.&.
    3CF0: 57 06 26 21 47 08 26 21 57 0A E9 56 FE 55 8B EC  // W.&!G.&!W..V.U..
    3D00: 51 52 50 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // QRP..&.G,2......
    3D10: C3 FF 94 8C 91 26 89 47 08 26 89 57 0A 26 8A 47  // .....&.G.&.W.&.G
    3D20: 2B 88 46 FA 8B C3 E8 DA FC 26 89 47 04 26 89 57  // +.F......&.G.&.W
    3D30: 06 26 8A 4F 2D 32 ED 8B F1 03 F1 8B C3 FF 94 A4  // .&.O-2..........
    3D40: 91 26 89 47 14 26 89 57 16 8B C3 E8 44 FF 8A 46  // .&.G.&.W....D..F
    3D50: FA 32 E4 8B F0 8A 8C D4 91 E3 0A 26 D1 6F 16 26  // .2.........&.o.&
    3D60: D1 5F 14 E2 F6 26 8A 57 2B 32 F6 8B F2 C1 E6 02  // ._...&.W+2......
    3D70: 8B 84 B4 91 8B 94 B6 91 26 21 47 14 26 21 57 16  // ........&!G.&!W.
    3D80: 26 8A 47 2A 32 E4 8B F0 8A 8C DC 91 32 ED E3 0A  // &.G*2.......2...
    3D90: 26 D1 67 14 26 D1 57 16 E2 F6 26 8B 47 14 26 8B  // &.g.&.W...&.G.&.
    3DA0: 57 16 26 09 47 08 26 09 57 0A 26 8A 47 2C 32 E4  // W.&.G.&.W.&.G,2.
    3DB0: 8B F0 03 F0 8B C3 FF 94 80 91 8D 66 FC 5A 59 5D  // ...........f.ZY]
    3DC0: C3 51 8B D8 E8 56 FC 26 8A 4F 2B 32 ED 8B F1 8A  // .Q...V.&.O+2....
    3DD0: 8C D4 91 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 8B  // .....&.o.&._....
    3DE0: C3 E8 AE FE 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3  // ....&.O,2.......
    3DF0: FF 94 80 91 59 C3 8B D8 E8 22 FC 8B C3 E8 55 FC  // ....Y...."....U.
    3E00: 26 8B 47 04 26 8B 77 06 26 09 47 08 26 09 77 0A  // &.G.&.w.&.G.&.w.
    3E10: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 80 91  // &.G,2...........
    3E20: C3 53 56 8B D8 E8 F5 FB 8B C3 E8 28 FC 26 8B 47  // .SV........(.&.G
    3E30: 04 26 8B 77 06 26 31 47 08 26 31 77 0A 26 8A 47  // .&.w.&1G.&1w.&.G
    3E40: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 80 91 5E 5B C3  // ,2...........^[.
    3E50: 53 51 56 8B D8 E8 C5 FB 8B C3 E8 F8 FB 26 8B 4F  // SQV..........&.O
    3E60: 04 E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 8B C3 E8  // ...&.g.&.W......
    3E70: 46 FC 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF 94  // F.&.O,2.........
    3E80: 80 91 5E 59 5B C3 53 51 56 8B D8 E8 8F FB 8B C3  // ..^Y[.SQV.......
    3E90: E8 C2 FB 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F  // ...&.O...&.o.&._
    3EA0: 08 E2 F6 EB C8 52 8B D8 E8 72 FB 8B C3 E8 A5 FB  // .....R...r......
    3EB0: 8B F3 26 8B 47 04 26 8B 57 06 26 01 47 08 26 11  // ..&.G.&.W.&.G.&.
    3EC0: 54 0A 8B C3 E8 F1 FB 26 8A 47 2C 32 E4 8B F0 03  // T......&.G,2....
    3ED0: F0 8B C3 FF 94 80 91 5A C3 52 8B D8 E8 3E FB 8B  // .......Z.R...>..
    3EE0: C3 E8 71 FB 8B F3 26 8B 47 04 26 8B 57 06 26 29  // ..q...&.G.&.W.&)
    3EF0: 47 08 26 19 54 0A EB CA 51 52 8B F0 E8 1E FB 8B  // G.&.T...QR......
    3F00: C6 E8 55 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04  // ..U.&.D.&.T.&.\.
    3F10: 26 8B 4C 06 E8 DD F2 26 89 44 0C 26 89 54 0E 5A  // &.L....&.D.&.T.Z
    3F20: 59 C3 52 8B D0 E8 F5 FA 8B C2 E8 2C FC 8B C2 E8  // Y.R........,....
    3F30: 5C 08 5A C3 51 52 57 8B F0 E8 E1 FA 8B C6 E8 18  // \.Z.QRW.........
    3F40: FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C  // .&.D.&.T.&.\.&.L
    3F50: 06 E8 1C F2 26 89 44 0C 26 89 54 0E 8C D7 8E C7  // ....&.D.&.T.....
    3F60: 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06  // &.D.&.T.&.\.&.L.
    3F70: E8 FD F1 26 89 5C 10 26 89 4C 12 E9 10 FD 52 8B  // ...&.\.&.L....R.
    3F80: D0 E8 99 FA 8B C2 E8 D0 FB 8B C2 E8 D3 07 5A C3  // ..............Z.
    3F90: 51 52 8B D8 E8 86 FA 8B C3 E8 BD FB 8C D1 8E C1  // QR..............
    3FA0: 26 8B 47 08 26 8B 57 0A 26 3B 57 06 75 0E 26 3B  // &.G.&.W.&;W.u.&;
    3FB0: 47 04 75 08 26 C6 47 30 01 5A 59 C3 8B D0 26 8B  // G.u.&.G0.ZY...&.
    3FC0: 47 0A 26 3B 47 06 72 08 75 0A 26 3B 57 04 73 04  // G.&;G.r.u.&;W.s.
    3FD0: 33 C0 EB 03 B8 02 00 26 88 47 30 5A 59 C3 51 52  // 3......&.G0ZY.QR
    3FE0: 57 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // W..&.G,2........
    3FF0: 94 8C 91 26 89 47 08 26 89 57 0A 8C D0 8E C0 26  // ...&.G.&.W.....&
    4000: 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D D4 91  // .G+2............
    4010: 32 ED 8B 84 B4 91 8B 94 B6 91 E3 06 D1 E0 D1 D2  // 2...............
    4020: E2 FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A E9 4D  // ......&!G.&!W..M
    4030: FC 55 8B EC 51 52 57 83 EC 06 8B D8 26 8A 47 2B  // .U..QRW.....&.G+
    4040: 32 E4 8B F0 C1 E6 02 8B F8 8A 8D D4 91 32 ED 8B  // 2............2..
    4050: 84 B4 91 89 46 F4 8B 84 B6 91 89 46 F6 E3 08 D1  // ....F......F....
    4060: 66 F4 D1 56 F6 E2 F8 8B 7E F4 8B 46 F6 89 46 F8  // f..V....~..F..F.
    4070: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 8C 91  // &.G,2...........
    4080: 26 89 47 08 26 89 57 0A 8B C3 E8 47 F9 26 89 47  // &.G.&.W....G.&.G
    4090: 04 26 89 57 06 8B C7 F7 D0 8B 56 F6 F7 D2 26 23  // .&.W......V...&#
    40A0: 47 08 26 23 57 0A 26 89 47 14 26 89 57 16 26 21  // G.&#W.&.G.&.W.&!
    40B0: 7F 08 8B 46 F6 26 21 47 0A 8C D1 8D 77 35 8E C1  // ...F.&!G....w5..
    40C0: 26 80 3C 19 73 12 26 8B 4F 04 E3 0A 26 D1 67 08  // &.<.s.&.O...&.g.
    40D0: 26 D1 57 0A E2 F6 EB 10 26 8B 4F 04 E3 0A 26 D1  // &.W.....&.O...&.
    40E0: 6F 0A 26 D1 5F 08 E2 F6 26 21 7F 08 8B 46 F8 26  // o.&._...&!...F.&
    40F0: 21 47 0A 26 8B 57 14 26 8B 47 16 26 09 57 08 26  // !G.&.W.&.G.&.W.&
    4100: 09 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // .G.&.G,2........
    4110: 94 80 91 8D 66 FA 5F E9 A3 FC 52 8B D8 E8 FD F8  // ....f._...R.....
    4120: 8B C3 E8 34 FA 26 8B 47 08 26 8B 57 0A 26 85 57  // ...4.&.G.&.W.&.W
    4130: 06 75 06 26 85 47 04 74 05 B8 03 00 EB 03 B8 01  // .u.&.G.t........
    4140: 00 26 88 47 30 5A C3 53 51 52 56 8B D8 26 8A 4F  // .&.G0Z.SQRV..&.O
    4150: 2D 32 ED 8B F1 03 F1 FF 94 A4 91 26 89 47 04 26  // -2.........&.G.&
    4160: 89 57 06 26 8A 47 2B 32 E4 8B F0 8A 8C D4 91 E3  // .W.&.G+2........
    4170: 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 47 2B 8B  // .&.o.&._...&.G+.
    4180: F0 C1 E6 02 8B 84 B4 91 8B 94 B6 91 26 21 47 04  // ............&!G.
    4190: 26 21 57 06 E9 BD F9 52 8B D8 E8 AA FF 26 8B 47  // &!W....R.....&.G
    41A0: 04 26 8B 57 06 26 89 47 18 26 89 57 1A 5A C3 51  // .&.W.&.G.&.W.Z.Q
    41B0: 52 8B D8 E8 91 FF 8C D0 8E C0 26 8B 77 02 26 8B  // R.........&.w.&.
    41C0: 74 02 81 3C 5A 5A 74 5B 26 8B 77 02 26 8B 74 02  // t..<ZZt[&.w.&.t.
    41D0: 80 3C 63 75 E1 26 8B 77 02 26 FF 44 02 8B C3 E8  // .<cu.&.w.&.D....
    41E0: 21 F8 26 89 47 08 26 89 57 0A 8B C3 E8 FA F7 26  // !.&.G.&.W......&
    41F0: 89 47 14 26 89 57 16 8C D1 8E C1 26 8B 57 04 26  // .G.&.W.....&.W.&
    4200: 8B 47 06 26 3B 47 0A 75 AD 26 3B 57 08 75 A7 26  // .G.&;G.u.&;W.u.&
    4210: 8B 77 02 26 8B 04 26 03 47 14 8B DE 26 89 47 02  // .w.&..&.G...&.G.
    4220: 5A 59 C3 26 8B 5F 02 26 83 47 02 02 5A 59 C3 52  // ZY.&._.&.G..ZY.R
    4230: 57 8B D8 8C D0 8E C0 26 8B 77 02 26 8B 74 02 8A  // W......&.w.&.t..
    4240: 54 01 84 D2 75 08 26 C7 47 22 00 00 EB 2F 80 FA  // T...u.&.G".../..
    4250: FF 75 14 26 8B 77 02 26 8B 3F 26 8B 34 26 2B 75  // .u.&.w.&.?&.4&+u
    4260: 02 26 89 77 22 EB 16 26 8B 07 E8 E3 02 8B F0 8A  // .&.w"..&........
    4270: C2 32 E4 03 C0 03 F0 8B 04 26 89 47 22 26 8B 5F  // .2.......&.G"&._
    4280: 02 26 83 47 02 02 5F 5A C3 8B D8 26 80 67 2F F9  // .&.G.._Z...&.g/.
    4290: 26 8B 77 02 26 8B 74 02 8A 44 01 26 88 47 34 26  // &.w.&.t..D.&.G4&
    42A0: 8B 5F 02 26 83 47 02 03 C3 8B D8 26 8B 77 02 26  // ._.&.G.....&.w.&
    42B0: 8B 74 02 8B 74 01 26 89 77 20 EB E3 53 8B D8 26  // .t..t.&.w ..S..&
    42C0: 8A 47 2C 32 E4 24 03 26 80 67 2F F9 C1 E0 09 26  // .G,2.$.&.g/....&
    42D0: 09 47 2E E9 4F F5 8B D8 26 8B 77 02 26 8B 74 02  // .G..O...&.w.&.t.
    42E0: 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B  // .D.2.&.G.&.G....
    42F0: C3 E8 40 04 26 8B 5F 02 26 83 47 02 02 C3 8B D8  // ..@.&._.&.G.....
    4300: 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47  // &.w.&.t..D.2.&.G
    4310: 04 26 C7 47 06 00 00 8B C3 E8 08 04 EB D6 53 56  // .&.G..........SV
    4320: 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26  // ..&.w.&.t..D.2.&
    4330: 89 47 04 26 C7 47 06 00 00 8B C3 E8 06 04 E9 86  // .G.&.G..........
    4340: F4 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01  // .SV..&.w.&.t..D.
    4350: 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 F0  // 2.&.G.&.G.......
    4360: 03 E9 63 F4 53 56 8B D8 26 8B 77 02 8B DE 26 8B  // ..c.SV..&.w...&.
    4370: 5F 02 8B 5F 01 83 C3 03 26 01 5C 02 5E 5B C3 51  // _.._....&.\.^[.Q
    4380: 52 8B D8 26 8B 77 02 26 83 44 02 02 26 8B 07 E8  // R..&.w.&.D..&...
    4390: A0 01 8B C8 26 8B 77 28 8A 44 01 32 E4 03 C0 8B  // ....&.w(.D.2....
    43A0: F1 03 F0 83 3C 00 74 4F 26 8B 77 28 8A 54 01 32  // ....<.tO&.w(.T.2
    43B0: F6 8B C3 E8 B0 01 26 88 47 31 26 8B 77 02 26 8B  // ......&.G1&.w.&.
    43C0: 34 8B 44 04 C1 E8 08 32 E4 24 7F C1 E8 02 32 E4  // 4.D....2.$....2.
    43D0: 24 1F 26 80 67 2F 07 C1 E0 0B 26 09 47 2E 26 8B  // $.&.g/....&.G.&.
    43E0: 37 26 8B 47 2E C1 E8 0B C1 E0 02 26 01 04 26 C6  // 7&.G.......&..&.
    43F0: 47 32 01 26 89 4F 28 5A 59 C3 53 8B D8 26 C6 47  // G2.&.O(ZY.S..&.G
    4400: 32 82 5B C3 57 8B D8 8C D6 8E C6 26 80 7F 2C 05  // 2.[.W......&..,.
    4410: 74 0A 26 8A 47 2C 26 3A 47 30 75 1E 26 8B 77 02  // t.&.G,&:G0u.&.w.
    4420: 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01 03 F7  // &.t.&...&.=.t...
    4430: 26 8B 5F 02 26 89 77 02 5F C3 26 8B 5F 02 26 83  // &._.&.w._.&._.&.
    4440: 47 02 03 5F C3 53 56 57 8B D8 8C D6 8E C6 26 80  // G.._.SVW......&.
    4450: 7F 30 01 74 0A 26 8A 47 30 26 3A 47 2C 75 20 26  // .0.t.&.G0&:G,u &
    4460: 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74  // .w.&.t.&...&.=.t
    4470: 01 03 F7 26 8B 5F 02 26 89 77 02 5F 5E 5B C3 26  // ...&._.&.w._^[.&
    4480: 8B 5F 02 26 83 47 02 03 EB F1 53 56 57 8B D8 8C  // ._.&.G....SVW...
    4490: D0 8E C0 26 80 7F 30 01 74 E5 EB C3 55 8B EC 53  // ...&..0.t...U..S
    44A0: 51 52 57 8B D8 26 8B 77 02 26 8B 74 02 8A 04 26  // QRW..&.w.&.t...&
    44B0: C6 47 3D 00 8C D1 8E C1 26 80 7F 3D 08 73 20 26  // .G=.....&..=.s &
    44C0: 8B 77 02 26 8A 57 3D 32 F6 26 8B 7C 02 03 FA 8B  // .w.&.W=2.&.|....
    44D0: F3 03 F2 8A 15 26 88 54 35 26 FE 47 3D EB D5 26  // .....&.T5&.G=..&
    44E0: 8B 7F 02 8A D0 32 F6 8B F2 C1 E6 02 8A 94 01 92  // .....2..........
    44F0: 26 01 55 02 26 8B 7F 28 8A 55 01 80 E2 07 26 88  // &.U.&..(.U....&.
    4500: 57 2D 26 8B 7F 28 8A 55 01 C0 EA 03 80 E2 07 26  // W-&..(.U.......&
    4510: 88 57 2B 26 8B 7F 28 8A 55 01 C0 EA 06 26 88 57  // .W+&..(.U....&.W
    4520: 2A 8A 94 00 92 26 88 57 2C 8D 66 F8 5F 5A 59 5B  // *....&.W,.f._ZY[
    4530: 5D C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03  // ].SV..&.w....tH.
    4540: F0 8B D8 8B 74 1E 8B C6 03 C3 83 C0 04 5E 5B C3  // ....t........^[.
    4550: 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0 8B  // SV..&.w....tH...
    4560: D8 8B 74 20 EB E0 8A C2 C3 16 07 55 8B EC 53 51  // ..t .......U..SQ
    4570: 56 57 83 EC 40 8B F8 89 46 B8 E8 D3 FF 8B D8 89  // VW..@...F.......
    4580: 46 E0 26 8B 45 02 8B 5F 2E 03 D8 89 5E DE 83 46  // F.&.E.._....^..F
    4590: DE 04 8B C7 E8 9B FF 89 46 E0 32 F6 8D 46 B8 E8  // ........F.2..F..
    45A0: C4 FF 8A D0 32 F6 03 D2 8B 5E E0 03 DA 83 3F 00  // ....2....^....?.
    45B0: 0F 84 65 01 88 46 E9 80 66 E7 F9 C6 46 EC 00 C7  // ..e..F..f...F...
    45C0: 46 D8 00 00 66 C7 46 D0 00 00 00 00 C7 46 F6 00  // F...f.F......F..
    45D0: 00 C6 46 EA 01 EB 06 3C 01 0F 85 8C 00 8A 56 E9  // ..F....<......V.
    45E0: 8A C2 32 E4 03 C0 8B 5E E0 03 D8 83 3F 00 74 75  // ..2....^....?.tu
    45F0: 26 8B 45 02 8B 1F 03 D8 8B 47 04 32 E4 8B C8 83  // &.E......G.2....
    4600: C1 09 32 ED 80 E1 FE 83 F9 00 74 07 D1 E9 33 C0  // ..2.......t...3.
    4610: 50 E2 FD 8B C4 8B D8 89 46 BA 85 C0 74 41 83 C0  // P.......F...tA..
    4620: 08 26 89 47 04 8A C2 32 E4 03 C0 8B 5E E0 03 D8  // .&.G...2....^...
    4630: 26 8B 45 02 03 07 8B 5E BA 26 89 07 8B 5E BA 26  // &.E....^.&...^.&
    4640: 8B 07 83 C0 06 26 89 47 02 8B 5E BA 8B 76 F6 26  // .....&.G..^..v.&
    4650: 89 77 06 8B 5E BA 89 5E F6 C6 46 EA 00 EB 0A C6  // .w..^..^..F.....
    4660: 46 EA 87 EB 04 C6 46 EA 83 8A 46 EA 32 E4 83 F8  // F.....F...F.2...
    4670: 10 0F 8F 99 00 88 66 EA 8A 46 EA 32 E4 85 C0 0F  // ......f..F.2....
    4680: 8F 83 00 8C D0 8B 5E BA 8E C0 26 8B 5F 02 89 5E  // ......^...&._..^
    4690: E0 8B 5E BA 26 8B 5F 02 80 3F 5B 75 4A C6 46 EA  // ..^.&._..?[uJ.F.
    46A0: 10 8B 5E BA 26 8B 5F 06 89 5E F6 8B 5E BA 26 8B  // ..^.&._..^..^.&.
    46B0: 1F 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE  // ..G.2......2....
    46C0: 03 E1 8B 5E F6 89 5E BA 85 DB 74 AC 26 8B 1F 8B  // ...^..^...t.&...
    46D0: 47 04 C1 E8 08 32 E4 24 7F C1 E8 02 C1 E0 02 8B  // G....2.$........
    46E0: 5E B8 26 29 07 EB 91 8D 46 B8 E8 AF FD 8A D0 8D  // ^.&)....F.......
    46F0: 46 B8 E8 2E 00 8A DA 32 FF C1 E3 02 8D 46 B8 FF  // F......2.....F..
    4700: 97 FE 91 E9 72 FF 83 7E F6 00 0F 85 C9 FE 80 7E  // ....r..~.......~
    4710: EA 10 74 05 8A 46 EA EB 02 32 C0 8D 66 F8 5F 5E  // ..t..F...2..f._^
    4720: E9 0B FE C3 53 51 8B D8 26 8A 4F 04 32 ED E8 C9  // ....SQ..&.O.2...
    4730: E7 59 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8 C4  // .Y[.SQ..&.O.2...
    4740: E7 59 5B C3 53 8B D8 26 8A 47 04 32 E4 E6 80 5B  // .Y[.S..&.G.2...[
    4750: C3 53 51 8B D8 26 8A 4F 04 32 ED E8 D6 D4 59 5B  // .SQ..&.O.2....Y[
    4760: C3 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08 66  // .S..fPfRfQf&.G.f
    4770: 26 8B 57 10 66 26 8B 4F 04 66 F7 F1 66 26 89 47  // &.W.f&.O.f..f&.G
    4780: 0C 66 26 89 57 10 66 59 66 5A 66 58 5B C3 53 8B  // .f&.W.fYfZfX[.S.
    4790: D8 66 50 66 52 66 51 66 26 8B 47 08 66 26 8B 4F  // .fPfRfQf&.G.f&.O
    47A0: 04 66 F7 E1 66 26 89 47 0C 66 26 89 57 10 66 59  // .f..f&.G.f&.W.fY
    47B0: 66 5A 66 58 5B C3 53 57 8B D8 26 8B 5F 14 E8 38  // fZfX[.SW..&._..8
    47C0: EB 8B D0 66 C1 E8 10 92 5F 5B C3 53 57 8B D8 26  // ...f...._[.SW..&
    47D0: 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3 10 8B  // .G.&.W.....f....
    47E0: DA C1 E3 02 E8 36 EB EB D8 53 52 57 8B D8 26 8B  // .....6...SRW..&.
    47F0: 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 26 8B 5F  // G.&.W..f.....&._
    4800: 14 E8 5A EA 5F 5A 5B C3 53 52 8B D8 26 8B 47 1C  // ..Z._Z[.SR..&.G.
    4810: 26 8B 57 1E 92 66 C1 E0 10 8B C2 26 8B 5F 26 8B  // &.W..f.....&._&.
    4820: 5F 01 E8 39 EA 5A 5B C3 53 52 56 8B F0 26 8B 5C  // _..9.Z[.SRV..&.\
    4830: 26 8B 5F 01 E8 C2 EA 8B D0 66 C1 E8 10 92 26 89  // &._......f....&.
    4840: 44 1C 26 89 54 1E 5E 5A 5B C3 53 51 52 57 8B D8  // D.&.T.^Z[.SQRW..
    4850: 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 8B  // &.G.&.W..f......
    4860: C8 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3  // .&.G.&.W.....f..
    4870: 10 8B DA C1 E3 02 8B C1 E8 16 EA 5F 5A 59 5B C3  // ..........._ZY[.
    4880: 8B D0 66 C1 E8 10 92 C3 1E 06 66 50 66 51 66 52  // ..f.......fPfQfR
    4890: 66 53 66 55 66 56 66 57 0E 1F 0A C0 75 06 E8 07  // fSfUfVfW....u...
    48A0: 01 E9 A8 00 3C 01 75 06 E8 37 01 E9 9E 00 3C 02  // ....<.u..7....<.
    48B0: 75 06 E8 5F 02 E9 94 00 3C 03 75 0B E8 91 03 8B  // u.._....<.u.....
    48C0: EC 89 5E 0C E9 85 00 3C 04 75 02 EB 7D 3C 05 75  // ..^....<.u..}<.u
    48D0: 0A E8 0E 04 8B EC 89 56 10 EB 71 3C 06 75 10 E8  // .......V..q<.u..
    48E0: 8C 03 8B EC 89 5E 0C 89 4E 14 89 56 10 EB 5D 3C  // .....^..N..V..]<
    48F0: 07 75 02 EB 55 3C 08 75 0A E8 D0 03 8B EC 88 7E  // .u..U<.u.......~
    4900: 0D EB 49 3C 09 75 02 EB 41 3C 0A 75 10 E8 65 04  // ..I<.u..A<.u..e.
    4910: 8B EC 89 4E 14 89 7E 00 8C 46 1C EB 2F 3C 0B 75  // ...N..~..F../<.u
    4920: 02 EB 27 3C 10 75 0A E8 5A 04 8B EC 89 5E 0C EB  // ..'<.u..Z....^..
    4930: 1B 3C 11 75 02 EB 13 3C 15 75 0F E8 80 04 8B EC  // .<.u...<.u......
    4940: 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0 8B EC 89 46  // .^....O...2....F
    4950: 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    4960: 1F C3 50 1E 2E 8E 1E 12 03 8C D8 A3 CA 58 A3 DA  // ..P..........X..
    4970: 58 A3 EC 58 2E 8E 1E 0A 03 A3 AA 04 1F 58 CB 00  // X..X.........X..
    4980: 30 31 2E 30 30 00 56 45 53 41 00 03 C8 01 00 00  // 01.00.VESA......
    4990: 01 00 00 00 00 00 00 00 00 03 0A 11 EC 00 00 00  // ................
    49A0: 80 00 00 00 18 49 00 00 B9 3F 00 8B DF 83 C7 04  // .....I...?......
    49B0: FC 66 33 C0 F3 66 AB 8B FB BE 1E 49 B9 22 00 F3  // .f3..f.....I."..
    49C0: A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18 8C 4F 1C 8C  // ....O..G..O..O..
    49D0: 4F 20 83 C7 22 89 7F 0E 0E 1F E8 32 D1 B0 4F 32  // O .."......2..O2
    49E0: E4 C3 56 51 57 B9 10 00 66 33 C0 F3 66 AB 5F 59  // ..VQW...f3..f._Y
    49F0: 8C DB 06 1F C7 05 BB 00 C6 45 02 07 C7 45 04 40  // .........E...E.@
    4A00: 00 C7 45 06 40 00 C6 45 1B 06 C6 45 18 01 C6 45  // ..E.@..E...E...E
    4A10: 1A 01 C6 45 1E 01 66 C7 45 3E 00 84 D7 17 8E DB  // ...E..f.E>......
    4A20: E8 F9 C9 66 0B C0 0F 84 E1 00 06 1F 66 89 45 28  // ...f........f.E(
    4A30: 8C C8 66 C1 E0 10 B8 D7 4C 66 89 45 0C 81 F9 FF  // ..f.....Lf.E....
    4A40: 81 0F 84 C2 00 80 E5 03 B2 01 53 8E DB BE 80 1C  // ..........S.....
    4A50: E8 DE CE 5B 06 1F 0F 84 B1 00 53 E8 5A D1 66 89  // ...[......S.Z.f.
    4A60: 45 12 C7 45 16 08 10 8D 5C 0C E8 BA E8 66 89 45  // E..E....\....f.E
    4A70: 1F 66 89 45 36 8D 5C 10 E8 AC E8 66 89 45 23 66  // .f.E6.\....f.E#f
    4A80: 89 45 3A 8D 5C 08 E8 9E E8 0A C0 75 03 5B EB 7B  // .E:.\......u.[.{
    4A90: E8 25 D1 66 C1 E8 10 3D 58 02 74 0D 3D 5E 01 74  // .%.f...=X.t.=^.t
    4AA0: 08 77 0A C6 45 17 08 EB 04 C6 45 17 0E 2E A1 0C  // .w..E.....E.....
    4AB0: 03 89 45 08 8D 5C 04 E8 6D E8 66 8B C8 66 C1 E9  // ..E..\..m.f..f..
    4AC0: 10 D3 E0 89 45 10 89 45 32 B0 08 D2 E0 88 45 19  // ....E..E2.....E.
    4AD0: 8D 5C 14 E8 51 E8 5B 3D 00 03 77 2F 53 8B D8 B8  // .\..Q.[=..w/S...
    4AE0: 00 03 33 D2 F7 F3 5B FE C8 88 45 1D 88 45 35 88  // ..3...[...E..E5.
    4AF0: 45 34 8E DB 57 53 BE 80 1C E8 89 C9 5B 5F 0B C9  // E4..WS......[_..
    4B00: 75 05 06 1F 83 25 FE 32 E4 EB 02 B4 03 B0 4F 8E  // u....%.2......O.
    4B10: DB 5E C3 00 81 FB FF 81 74 68 0A FF 75 04 8B C3  // .^......th..u...
    4B20: EB 21 F6 C7 08 75 61 8B CB B2 01 BE 20 1C E8 00  // .!...ua..... ...
    4B30: CE 74 55 E8 61 D0 0A C0 75 0E 66 C1 E8 10 80 E7  // .tU.a...u.f.....
    4B40: 80 0A C7 E8 D5 02 EB 3A E8 D0 CB 74 06 E8 41 CA  // .......:...t..A.
    4B50: E8 8A C3 BE 20 1C E8 00 C9 74 2D E8 A5 00 E8 2C  // .... ....t-....,
    4B60: 00 66 BB 20 1C 00 1C E8 24 D0 BE 00 1C E8 27 D0  // .f. ....$.....'.
    4B70: 66 C1 E8 10 8B D8 32 C0 F6 C7 80 74 02 B0 40 E8  // f.....2....t..@.
    4B80: 30 C9 B0 4F 32 E4 EB 04 B0 4F B4 03 C3 56 06 33  // 0..O2....O...V.3
    4B90: C0 8E C0 BE 20 1C E8 1F D0 8B C8 66 C1 E8 10 8B  // .... ......f....
    4BA0: D0 C1 E9 03 26 89 0E 4A 04 C1 EA 04 FE CA 26 88  // ....&..J......&.
    4BB0: 16 84 04 26 C6 06 51 04 00 26 C6 06 50 04 00 26  // ...&..Q..&..P..&
    4BC0: C6 06 49 04 62 26 C7 06 4C 04 00 A0 26 C6 06 85  // ..I.b&..L...&...
    4BD0: 04 10 26 C7 06 0C 01 A3 62 8C C8 26 A3 0E 01 07  // ..&.....b..&....
    4BE0: 5E C3 01 0F 00 0A 00 00 00 00 00 40 05 0F FF 00  // ^..........@....
    4BF0: 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01  // ................
    4C00: 00 0F 00 FC BA C4 03 B8 00 01 EF B9 04 00 B4 01  // ................
    4C10: BE 7A 4B AC 86 E0 EF 8A E0 FE C4 E2 F6 B8 00 03  // .zK.............
    4C20: EF B9 09 00 BA CE 03 32 E4 BE 7E 4B 8A C4 EE AC  // .......2..~K....
    4C30: 42 EE 4A FE C4 E2 F5 BA DA 03 EC B9 14 00 BA C0  // B.J.............
    4C40: 03 32 E4 BE 87 4B 8A C4 EE AC EE FE C4 E2 F7 C3  // .2...K..........
    4C50: BE 00 1C E8 41 CF 66 C1 E8 10 8B D8 E8 11 CF 75  // ....A.f........u
    4C60: 05 E8 FD CE 75 04 B8 4F 00 C3 B8 4F 03 C3 E8 FF  // ....u..O...O....
    4C70: CE 74 53 BE 00 1C 80 FB 00 74 18 80 FB 01 75 05  // .tS......t....u.
    4C80: E8 3D CF EB 1D 80 FB 02 75 10 8B C1 E8 F0 CE D3  // .=......u.......
    4C90: E8 8B C8 E8 E0 C9 74 2E EB 08 80 FB 03 75 24 E8  // ......t......u$.
    4CA0: 94 CE E8 DA CE 8B D8 D3 E3 50 33 C0 BA 00 03 3B  // .........P3....;
    4CB0: DA 77 05 BA FF FF EB 04 F7 F3 8B D0 58 8B C8 B8  // .w..........X...
    4CC0: 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00 0A DB 75 07  // O..2...O......u.
    4CD0: 8A EF E8 AE CA EB 05 E8 93 CA 8A F8 B0 4F 32 E4  // .............O2.
    4CE0: C3 00 E8 8B CE 74 2C BE 00 1C E8 AA CE 66 C1 E8  // .....t,......f..
    4CF0: 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E 00 EB 0F 80  // ...@u...u.......
    4D00: FF 01 75 14 BB 13 00 E8 EB E5 D1 E8 8B D0 B0 4F  // ..u............O
    4D10: 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52 53 66 50 81  // 2...O...2..RSfP.
    4D20: E2 FF 02 D1 E2 8B C2 40 66 C1 E0 10 8B C2 BB 13  // .......@f.......
    4D30: 00 E8 1C E5 BB 12 00 E8 16 E5 66 58 5B 5A C3 9C  // ..........fX[Z..
    4D40: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
    4D50: 0E 1F E8 34 E6 E8 8A FF E8 53 E6 8B EC 89 56 10  // ...4.....S....V.
    4D60: 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66  // .F.f_f^f]f[fZfYf
    4D70: 58 07 1F 9D CB 0E 07 BF A6 90 2E 8B 0E A4 90 B8  // X...............
    4D80: 4F 00 C3 00 0A DB 75 06 B7 04 B3 10 EB 26 80 FB  // O.....u......&..
    4D90: 01 75 14 E8 85 C9 75 21 53 B1 01 0A FF 74 02 B1  // .u....u!S....t..
    4DA0: 00 E8 9A C8 5B EB 0D 80 FB 02 75 0D E8 B2 C9 8A  // ....[.....u.....
    4DB0: F8 C0 E7 02 B0 4F 32 E4 C3 B8 4F 03 C3 00 80 E3  // .....O2...O.....
    4DC0: 01 0A DB 75 05 BB 02 01 EB 0E E8 4E C9 75 0E 33  // ...u.......N.u.3
    4DD0: C0 53 E8 35 B8 5B 74 05 B0 4F 32 E4 C3 B0 4F B4  // .S.5.[t..O2...O.
    4DE0: 03 C3 80 FC 1D 72 03 CD 42 C3 1E 06 66 50 66 51  // .....r..B...fPfQ
    4DF0: 66 52 66 53 66 55 66 56 66 57 0E 1F 50 0F B6 C4  // fRfSfUfVfW..P...
    4E00: D1 E0 8B F0 58 2E FF 94 C4 4D 66 5F 66 5E 66 5D  // ....X....Mf_f^f]
    4E10: 66 5B 66 5A 66 59 66 58 07 1F C3 0E 1F 50 0F B6  // f[fZfYfX.....P..
    4E20: C4 D1 E0 8B F0 58 2E FF 94 C4 4D C3 FE 4D 0E 87  // .....X....M..M..
    4E30: 27 87 44 87 F1 4E 47 7E 79 7E EC 7E 6F 7F FD 80  // '.D..NG~y~.~o...
    4E40: 01 81 0A 84 DB 84 5E 85 C5 85 60 87 C2 87 6B 8A  // ......^...`...k.
    4E50: 0A 51 B2 8E B2 4D B2 4D B2 4D B2 4D B2 4D B2 4D  // .Q...M.M.M.M.M.M
    4E60: 82 8F 85 73 D9 74 2E 8E 1E 0A 03 80 26 87 04 F3  // ...s.t......&...
    4E70: 50 8A E0 80 E4 7F E8 C4 01 3B D3 75 02 58 C3 BA  // P........;.u.X..
    4E80: CC 03 EC B2 B4 B1 30 26 F6 47 09 01 74 0C B2 D4  // ......0&.G..t...
    4E90: B1 20 A8 01 75 49 B5 09 EB 06 A8 01 74 41 B5 0B  // . ..uI......tA..
    4EA0: 53 E8 6A 41 0A FF 5B 75 0B 80 26 88 04 F0 08 2E  // S.jA..[u..&.....
    4EB0: 88 04 EB 2B 58 80 0E 87 04 08 80 26 10 04 CF 08  // ...+X......&....
    4EC0: 0E 10 04 89 16 63 04 C7 06 85 04 08 00 C6 06 84  // .....c..........
    4ED0: 04 18 C7 06 0C 01 90 5A 8C 0E 0E 01 CD 42 C3 80  // .......Z.....B..
    4EE0: 26 10 04 CF 08 0E 10 04 58 53 50 0E 1F 33 C9 8A  // &.......XSP..3..
    4EF0: C8 E8 27 C8 74 06 E8 98 C6 E8 E1 BF B2 08 BE 40  // ..'.t..........@
    4F00: 1C E8 2D CA BE 40 1C E8 4F C5 58 5B 0F 84 6E FF  // ..-..@..O.X[..n.
    4F10: 2E 8E 1E 0A 03 0E 07 E8 13 29 0E 1F 53 66 BB 40  // .........)..Sf.@
    4F20: 1C 00 1C E8 68 CC BE 00 1C B0 20 E8 84 C5 5B 2E  // ....h..... ...[.
    4F30: 8E 1E 0A 03 0E 07 E8 1C 2E E8 24 00 E8 28 3D E8  // ..........$..(=.
    4F40: D1 01 E8 8E 01 E8 AE 3E 0E 1F BE 00 1C B0 10 E8  // .......>........
    4F50: 60 C5 E8 F7 2D E8 EF 2D C3 8B EC C6 46 1B 00 C3  // `...-..-....F...
    4F60: E8 2F 00 E8 0A 00 E8 BD 00 E8 52 00 E8 5C 0A C3  // ./........R..\..
    4F70: 53 83 C3 0A 8B 16 63 04 B9 19 00 B8 11 30 EF 32  // S.....c......0.2
    4F80: C0 26 8A 27 EF 43 FE C0 E2 F7 5B 80 C2 06 32 C0  // .&.'.C....[...2.
    4F90: EE C3 53 BA C4 03 83 C3 05 B9 04 00 B0 01 26 8A  // ..S...........&.
    4FA0: 27 3C 01 75 03 80 CC 20 EF 43 FE C0 E2 F0 5B 26  // '<.u... .C....[&
    4FB0: 8A 47 09 BA C2 03 EE B2 C4 B8 00 03 EF C3 8B F3  // .G..............
    4FC0: 83 C6 23 BA DA 03 26 F6 47 09 01 75 02 B2 BA F6  // ..#...&.G..u....
    4FD0: 06 89 04 08 74 1D 83 C6 10 EC B9 04 00 B4 10 B2  // ....t...........
    4FE0: C0 80 FC 11 74 07 8A C4 EE 26 8A 04 EE 46 FE C4  // ....t....&...F..
    4FF0: E2 EF C3 53 EC 8B DE B9 14 00 32 E4 B2 C0 8A C4  // ...S......2.....
    5000: EE FE C4 26 8A 07 EE 43 E2 F4 8A C4 EE 32 C0 EE  // ...&...C.....2..
    5010: 1E 06 E8 49 2D 0B ED 74 09 1F 1E B9 10 00 F3 A4  // ...I-..t........
    5020: 46 A4 07 1F 5B C3 53 83 C3 37 B9 09 00 32 C0 BA  // F...[.S..7...2..
    5030: CE 03 26 8A 27 EF 43 FE C0 E2 F7 5B C3 BB C8 52  // ..&.'.C....[...R
    5040: 0E 07 8B D3 0A E4 7D 01 C3 E8 01 00 C3 33 F6 80  // ......}......3..
    5050: FC 03 7F 3C 4A F6 06 89 04 10 75 20 A0 88 04 24  // ...<J.....u ...$
    5060: 0F 3C 02 7E 24 3C 08 74 20 3C 06 74 1C 3C 07 74  // .<.~$<.t <.t.<.t
    5070: 18 B0 40 F6 E4 03 D8 81 C3 00 04 C3 B0 40 D0 EC  // ..@..........@..
    5080: F6 E4 03 D8 81 C3 80 04 C3 B0 40 F6 E4 03 D8 C3  // ..........@.....
    5090: 80 FC 07 75 11 F6 06 89 04 10 75 05 81 C3 00 01  // ...u......u.....
    50A0: C3 81 C3 00 05 C3 BF 4A 50 BE 6B 50 33 C9 E8 4E  // .......JP.kP3..N
    50B0: 00 C3 04 80 00 05 80 00 06 C0 00 0D 80 02 0E C0  // ................
    50C0: 02 0F 80 03 10 C0 03 11 40 05 12 80 05 13 C0 05  // ........@.......
    50D0: 62 40 01 53 8A 1E 49 04 80 FB 07 7F 10 32 FF D1  // b@.S..I......2..
    50E0: E3 2E 8B 87 87 50 A2 65 04 88 26 66 04 5B C3 2C  // .....P.e..&f.[.,
    50F0: 30 28 30 2D 30 29 30 2A 30 2E 30 1E 3F 29 30 2E  // 0(0-0)0*0.0.?)0.
    5100: 38 25 75 07 2E 03 5D 01 33 F6 C3 83 C7 03 3B FE  // 8%u...].3.....;.
    5110: 75 ED C3 1E 06 2E 8E 1E 0A 03 F6 06 87 04 80 75  // u..............u
    5120: 49 83 3E 4C 04 00 74 42 A0 49 04 B9 00 20 2E 8B  // I.>L..tB.I... ..
    5130: 3E 10 03 26 F6 47 33 01 75 0E 26 F6 47 09 01 75  // >..&.G3.u.&.G..u
    5140: 1B 2E 8B 3E 0E 03 EB 14 3C 06 7E 0B 2E 8B 3E 0C  // ...>....<.~...>.
    5150: 03 26 8A 67 37 B5 40 66 33 C0 EB 06 66 B8 20 07  // .&.g7.@f3...f. .
    5160: 20 07 8E C7 66 33 FF F3 66 AB 80 26 87 04 7F 07  //  ...f3..f..&....
    5170: 1F C3 2E 8E 1E 0A 03 80 FB 10 75 03 E9 7A 01 80  // ..........u..z..
    5180: FB 20 75 03 E9 9B 01 80 FB 32 75 1F BA CC 03 0A  // . u......2u.....
    5190: C0 75 09 EC 0C 02 B2 C2 EE E9 F3 00 FE C8 0F 85  // .u..............
    51A0: F3 00 EC 24 FD B2 C2 EE E9 E4 00 80 FB 35 75 28  // ...$.........5u(
    51B0: 3C 80 75 08 80 0E 89 04 40 E9 D3 00 F6 06 89 04  // <.u.....@.......
    51C0: 40 0F 84 D0 00 0A C0 0F 84 CA 00 FE C8 75 06 E8  // @............u..
    51D0: 98 07 E9 BA 00 E9 BD 00 80 FB 30 74 03 E9 96 00  // ..........0t....
    51E0: 50 E8 2A 3E 8A EF BA CC 03 EC 8A C8 58 0A C0 75  // P.*>........X..u
    51F0: 30 B7 08 F6 C1 01 75 12 0A ED 75 0B A0 10 04 24  // 0.....u...u....$
    5200: 30 3C 30 75 10 B7 02 E9 8B 00 A0 10 04 24 30 3C  // 0<0u.........$0<
    5210: 30 75 02 B7 02 80 26 89 04 6F 80 0E 89 04 80 EB  // 0u....&..o......
    5220: 36 3C 01 75 41 80 26 89 04 6F B7 09 F6 C1 01 75  // 6<.uA.&..o.....u
    5230: 15 B7 0B A0 10 04 24 30 3C 30 74 1B B7 09 0A ED  // ......$0<0t.....
    5240: 74 15 B7 05 EB 11 A0 10 04 24 30 3C 30 75 08 B7  // t........$0<0u..
    5250: 0B 0A ED 74 02 B7 03 8A 1E 88 04 80 E3 F0 0A DF  // ...t............
    5260: 88 1E 88 04 EB 29 3C 02 75 2B 80 26 89 04 6F 80  // .....)<.u+.&..o.
    5270: 0E 89 04 10 EB B4 80 FB 31 75 1B 0A C0 74 0B 3C  // ........1u...t.<
    5280: 01 75 0C 80 0E 89 04 08 EB 05 80 26 89 04 F7 8B  // .u.........&....
    5290: EC C6 46 1A 12 C3 80 FB 33 75 16 3C 00 74 0B 3C  // ..F.....3u.<.t.<
    52A0: 01 75 EC 80 26 89 04 FD EB E5 80 0E 89 04 02 EB  // .u..&...........
    52B0: DE 80 FB 34 75 17 3C 00 75 07 80 26 87 04 FE EB  // ...4u.<.u..&....
    52C0: CE 3C 01 75 07 80 0E 87 04 01 EB C3 C3 80 FB 36  // .<.u...........6
    52D0: 75 26 BB 20 FF 3C 01 74 09 BB 00 DF 3C 00 74 02  // u&. .<.t....<.t.
    52E0: EB AD E8 02 00 EB A8 9C FA BA C4 03 B0 01 EE 42  // ...............B
    52F0: EC 22 C7 0A C3 EE 9D C3 C3 B3 03 B7 00 BA CC 03  // ."..............
    5300: EC A8 01 75 02 B7 01 A0 88 04 8A E0 B1 04 D2 EC  // ...u............
    5310: 25 0F 0F 8B C8 8B EC 89 5E 0E 89 4E 16 C6 46 1A  // %.......^..N..F.
    5320: 12 C3 9C FA C7 06 14 00 72 78 8C 0E 16 00 9D C3  // ........rx......
    5330: 28 18 08 00 08 09 03 00 02 63 2D 27 28 90 2B A0  // (........c-'(.+.
    5340: BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 14 1F 96  // ................
    5350: B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    5360: 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // ................
    5370: 50 18 08 00 10 01 03 00 02 63 5F 4F 50 82 55 81  // P........c_OP.U.
    5380: BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 28 1F 96  // .............(..
    5390: B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    53A0: 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // ................
    53B0: 28 18 08 00 40 09 03 00 02 63 2D 27 28 90 2B 80  // (...@....c-'(.+.
    53C0: BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 14 00 96  // ................
    53D0: B9 A2 FF 00 13 15 17 02 04 06 07 10 11 12 13 14  // ................
    53E0: 15 16 17 01 00 03 00 00 00 00 00 00 30 0F 00 FF  // ............0...
    53F0: 50 18 08 00 40 01 01 00 06 63 5F 4F 50 82 54 80  // P...@....c_OP.T.
    5400: BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 28 00 96  // .............(..
    5410: B9 C2 FF 00 17 17 17 17 17 17 17 17 17 17 17 17  // ................
    5420: 17 17 17 01 00 01 00 00 00 00 00 00 00 0D 00 FF  // ................
    5430: 50 18 0E 00 10 00 03 00 03 A6 5F 4F 50 82 55 81  // P........._OP.U.
    5440: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28 0D 63  // ...M........](.c
    5450: BA A3 FF 00 08 08 08 08 08 08 08 10 18 18 18 18  // ................
    5460: 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF  // ................
    5470: 50 1D 10 00 A0 01 0F 00 0A E3 5F 4F 50 82 54 80  // P........._OP.T.
    5480: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 50 00 E7  // .>.@.........P..
    5490: 04 E3 FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    54A0: 0D 0E 0F 01 00 0F 00 10 00 00 00 00 40 05 0F FF  // ............@...
    54B0: 00 05 11 1C 08 0B 14 28 0E 18 2D 32 20 24 38 3F  // .......(..-2 $8?
    54C0: 00 05 08 0B 0E 11 14 18 1C 20 24 28 2D 32 38 3F  // ......... $(-28?
    54D0: 07 0C 10 15 1A 18 16 15 13 1C 25 2F 38 33 2E 2A  // ..........%/83.*
    54E0: 25 27 29 2A 2C 23 19 10 23 25 27 2A 2C 2B 2A 29  // %')*,#..#%'*,+*)
    54F0: 29 2D 32 37 3B 39 37 34 32 33 34 35 35 31 2C 27  // )-27;974234551,'
    5500: 2F 30 32 33 34 34 33 33 32 35 38 3A 3D 3C 3A 39  // /0234433258:=<:9
    5510: 38 38 39 39 3A 37 34 31 03 05 07 09 0B 0B 0A 09  // 8899:741........
    5520: 08 0D 11 15 19 17 15 13 11 11 12 13 14 0F 0B 07  // ................
    5530: 10 10 12 13 14 13 13 13 12 14 16 18 1A 19 18 17  // ................
    5540: 16 17 17 17 18 15 14 11 15 15 16 17 17 17 17 17  // ................
    5550: 16 18 19 1A 1B 1B 1A 19 19 19 19 19 1A 18 17 16  // ................
    5560: 02 03 04 05 07 06 06 05 05 07 0A 0C 0E 0D 0C 0B  // ................
    5570: 09 0A 0A 0B 0B 09 06 04 09 09 0A 0B 0B 0B 0B 0B  // ................
    5580: 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D 0D 0D 0E 0C 0B 0A  // ................
    5590: 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D 0E 0F 0F 0F 0F 0E  // ................
    55A0: 0E 0E 0E 0E 0E 0E 0D 0C 00 00 00 00 00 00 00 00  // ................
    55B0: 28 18 08 00 20 09 0F 00 06 63 2D 27 28 90 2B 80  // (... ....c-'(.+.
    55C0: BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 14 00 96  // ................
    55D0: B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    55E0: 15 16 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // ................
    55F0: 50 18 08 00 40 01 0F 00 06 63 5F 4F 50 82 54 80  // P...@....c_OP.T.
    5600: BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 28 00 96  // .............(..
    5610: B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    5620: 15 16 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // ................
    5630: 00 05 11 1C 08 0B 25 28 02 07 1B 20 0F 14 28 2C  // ......%(... ..(,
    5640: 0C 11 25 2A 14 1E 32 36 0F 13 27 2C 1B 20 34 39  // ..%*..26..',. 49
    5650: 06 0B 1F 24 13 18 2C 30 09 0D 21 26 15 1A 2E 33  // ...$..,0..!&...3
    5660: 13 17 2B 30 1F 24 38 3D 0E 18 2D 32 20 24 38 3F  // ..+0.$8=..-2 $8?
    5670: 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18  // ................
    5680: 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F  // ..-2 $8?..-2 $8?
    5690: 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18  // ................
    56A0: 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F  // ..-2 $8?..-2 $8?
    56B0: 50 18 0E 00 80 01 0F 00 06 A2 5F 4F 50 82 54 80  // P........._OP.T.
    56C0: BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63  // ...@........](.c
    56D0: BA E3 FF 00 08 00 00 18 18 00 00 00 08 00 00 00  // ................
    56E0: 18 00 00 0B 00 05 00 00 00 00 00 00 00 05 05 FF  // ................
    56F0: 50 18 0E 00 80 01 0F 00 06 A3 5F 4F 50 82 54 80  // P........._OP.T.
    5700: BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63  // ...@........](.c
    5710: BA E3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    5720: 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // =>?.............
    5730: 28 18 0E 00 08 09 03 00 02 A3 2D 27 28 90 2B A0  // (.........-'(.+.
    5740: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 14 1F 63  // ...M........]..c
    5750: BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    5760: 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // =>?.............
    5770: 50 18 0E 00 10 01 03 00 02 A3 5F 4F 50 82 55 81  // P........._OP.U.
    5780: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28 1F 63  // ...M........](.c
    5790: BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    57A0: 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // =>?.............
    57B0: 28 18 10 00 08 08 03 00 02 67 2D 27 28 90 2B A0  // (........g-'(.+.
    57C0: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 14 1F 96  // ...O............
    57D0: B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    57E0: 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF  // =>?.............
    57F0: 50 18 10 00 10 00 03 00 02 67 5F 4F 50 82 55 81  // P........g_OP.U.
    5800: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 1F 96  // ...O.........(..
    5810: B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    5820: 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF  // =>?.............
    5830: 50 18 10 00 10 00 03 00 02 66 5F 4F 50 82 55 81  // P........f_OP.U.
    5840: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 0F 96  // ...O.........(..
    5850: B9 A3 FF 00 08 08 08 08 08 08 08 10 18 18 18 18  // ................
    5860: 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF  // ................
    5870: 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80  // P........._OP.T.
    5880: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7  // .>.@.........(..
    5890: 04 C3 FF 00 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F  // ....????????????
    58A0: 3F 3F 3F 01 00 0F 00 00 00 00 00 00 00 05 01 FF  // ???.............
    58B0: 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80  // P........._OP.T.
    58C0: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7  // .>.@.........(..
    58D0: 04 E3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    58E0: 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // =>?.............
    58F0: 28 18 08 00 20 01 0F 00 0E 63 5F 4F 50 82 54 80  // (... ....c_OP.T.
    5900: BF 1F 00 41 00 00 00 00 00 00 9C 8E 8F 28 40 96  // ...A.........(@.
    5910: B9 A3 FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    5920: 0D 0E 0F 41 00 0F 00 00 00 00 00 00 40 05 0F FF  // ...A........@...
    5930: C8 52 00 C0 00 00 00 00 00 00 00 00 00 00 00 00  // .R..............
    5940: E8 58 00 C0 00 00 00 00 00 00 00 00 00 00 00 00  // .X..............
    5950: 1A 00 80 90 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    5960: 00 00 00 00 00 00 00 00 00 00 1E E8 10 00 2E 8E  // ................
    5970: 1E 0A 03 E8 F8 36 E8 CF 36 E8 70 1A 1F C3 2E 8E  // .....6..6.p.....
    5980: 1E 0A 03 C7 06 87 04 60 F9 C6 06 8A 04 0B A0 89  // .......`........
    5990: 04 0C 11 24 17 A2 89 04 B4 01 E8 6D 1E A0 89 04  // ...$.......m....
    59A0: 80 26 10 04 CF 80 0E 10 04 20 C7 06 63 04 D4 03  // .&....... ..c...
    59B0: 0E 1F E8 97 B5 F7 C1 02 00 75 03 E8 1F B5 C3 1E  // .........u......
    59C0: 2E 8E 1E 0A 03 0E 07 EB 00 1F C3 F6 06 89 04 08  // ................
    59D0: 74 01 C3 53 BA C8 03 EC B0 FF B2 C6 EE B2 C8 80  // t..S............
    59E0: 3E 63 04 B4 75 2F BE 44 5A B9 40 00 33 DB 9C FA  // >c..u/.DZ.@.3...
    59F0: 8A C3 EE 8B FB C1 EF 03 83 E7 03 03 FE 2E 8A 05  // ................
    5A00: 42 EE 2E 8A 45 04 EE 2E 8A 45 08 EE FE C3 4A E2  // B...E....E....J.
    5A10: DF 9D E9 85 00 26 8A 47 2B F6 06 89 04 06 74 31  // .....&.G+.....t1
    5A20: B9 F8 00 BF 48 54 3C 08 74 11 B9 40 00 BF C8 55  // ....HT<.t..@...U
    5A30: 3C 38 74 07 3C 3F 74 03 BF 08 56 33 DB 9C FA 8A  // <8t.<?t...V3....
    5A40: C3 EE 2E 8A 01 42 EE EE EE FE C3 4A E2 F1 9D EB  // .....B.....J....
    5A50: 49 3C 08 74 25 3C 38 74 2E 3C 3F 74 2A B9 08 00  // I<.t%<8t.<?t*...
    5A60: 33 DB 51 E8 0B D3 B9 08 00 F7 C3 10 00 74 03 83  // 3.Q..........t..
    5A70: C7 18 E8 67 00 59 E2 EA EB 20 E8 F4 D2 B9 00 01  // ...g.Y... ......
    5A80: 33 DB E8 57 00 EB 13 B9 40 00 33 DB 51 E8 28 00  // 3..W....@.3.Q.(.
    5A90: 8A C3 E8 B7 2F FE C3 59 E2 F2 5B C3 00 2A 00 2A  // ..../..Y..[..*.*
    5AA0: 00 2A 00 2A 15 3F 15 3F 15 3F 15 3F 00 2A 00 3F  // .*.*.?.?.?.?.*.?
    5AB0: 00 2A 00 3F 00 2A 00 3F 8B FB C1 EF 02 83 E7 0F  // .*.?.*.?........
    5AC0: 2E 8A B5 34 5A 8B FB D1 EF 83 E7 0F 2E 8A AD 34  // ...4Z..........4
    5AD0: 5A 8B FB 83 E7 0F 2E 8A 8D 34 5A C3 9C 8A C3 FA  // Z........4Z.....
    5AE0: EE 2E 8A 05 42 EE 47 2E 8A 05 EE 47 2E 8A 05 EE  // ....B.G....G....
    5AF0: 47 FE C3 4A E2 E7 9D C3 00 00 00 00 00 00 00 00  // G..J............
    5B00: 7E 81 A5 81 BD 99 81 7E 7C FE D6 BA C6 FE 7C 00  // ~......~|.....|.
    5B10: C6 EE FE FE 7C 38 10 00 10 38 7C FE 7C 38 10 00  // ....|8...8|.|8..
    5B20: 10 38 10 EE EE 10 38 00 38 7C FE FE 6C 10 38 00  // .8....8.8|..l.8.
    5B30: 00 18 3C 7E 3C 18 00 00 FF E7 C3 81 C3 E7 FF FF  // ..<~<...........
    5B40: 00 18 3C 66 66 3C 18 00 FF E7 C3 99 99 C3 E7 FF  // ..<ff<..........
    5B50: 1E 0E 1E 36 78 CC CC 78 7E C3 C3 7E 18 7E 18 18  // ...6x..x~..~.~..
    5B60: 1E 1A 1E 18 18 70 F0 60 3E 3E 36 36 F6 66 1E 0C  // .....p.`>>66.f..
    5B70: DB 3C 66 E7 66 3C DB 00 80 C0 F0 F8 F0 C0 80 00  // .<f.f<..........
    5B80: 02 06 1E 3E 1E 06 02 00 18 3C 7E 18 7E 3C 18 00  // ...>.....<~.~<..
    5B90: 66 66 66 66 66 00 66 00 7F DB 7B 3B 1B 1B 1B 00  // fffff.f...{;....
    5BA0: 3C 66 38 6C 6C 38 CC 78 00 00 00 00 FE FE FE 00  // <f8ll8.x........
    5BB0: 18 3C 7E 18 7E 3C 18 7E 18 3C 7E 18 18 18 18 00  // .<~.~<.~.<~.....
    5BC0: 18 18 18 18 7E 3C 18 00 00 18 1C FE 1C 18 00 00  // ....~<..........
    5BD0: 00 30 70 FE 70 30 00 00 00 00 C0 C0 C0 FE 00 00  // .0p.p0..........
    5BE0: 00 24 66 FF 66 24 00 00 00 10 38 7C 7C FE 00 00  // .$f.f$....8||...
    5BF0: 00 FE 7C 7C 38 10 00 00 00 00 00 00 00 00 00 00  // ..||8...........
    5C00: 18 3C 3C 18 18 00 18 00 6C 6C 6C 00 00 00 00 00  // .<<.....lll.....
    5C10: 6C 6C FE 6C FE 6C 6C 00 18 7E C0 7C 06 FC 18 00  // ll.l.ll..~.|....
    5C20: 00 C6 0C 18 30 60 C6 00 38 6C 38 76 CC CC 76 00  // ....0`..8l8v..v.
    5C30: 18 18 30 00 00 00 00 00 18 30 60 60 60 30 18 00  // ..0......0```0..
    5C40: 60 30 18 18 18 30 60 00 00 EE 7C FE 7C EE 00 00  // `0...0`...|.|...
    5C50: 00 18 18 7E 18 18 00 00 00 00 00 00 18 18 30 00  // ...~..........0.
    5C60: 00 00 00 FE 00 00 00 00 00 00 00 00 00 38 38 00  // .............88.
    5C70: 06 0C 18 30 60 C0 80 00 7C C6 CE DE F6 E6 7C 00  // ...0`...|.....|.
    5C80: 18 78 18 18 18 18 7E 00 7C C6 0C 18 30 66 FE 00  // .x....~.|...0f..
    5C90: 7C C6 06 3C 06 C6 7C 00 0C 1C 3C 6C FE 0C 0C 00  // |..<..|...<l....
    5CA0: FE C0 FC 06 06 C6 7C 00 7C C6 C0 FC C6 C6 7C 00  // ......|.|.....|.
    5CB0: FE C6 06 0C 18 18 18 00 7C C6 C6 7C C6 C6 7C 00  // ........|..|..|.
    5CC0: 7C C6 C6 7E 06 C6 7C 00 00 1C 1C 00 00 1C 1C 00  // |..~..|.........
    5CD0: 00 18 18 00 00 18 18 30 0C 18 30 60 30 18 0C 00  // .......0..0`0...
    5CE0: 00 00 FE 00 00 FE 00 00 60 30 18 0C 18 30 60 00  // ........`0...0`.
    5CF0: 7C C6 06 0C 18 00 18 00 7C C6 C6 DE DC C0 7E 00  // |.......|.....~.
    5D00: 38 6C C6 C6 FE C6 C6 00 FC 66 66 7C 66 66 FC 00  // 8l.......ff|ff..
    5D10: 3C 66 C0 C0 C0 66 3C 00 F8 6C 66 66 66 6C F8 00  // <f...f<..lfffl..
    5D20: FE C2 C0 F8 C0 C2 FE 00 FE 62 60 7C 60 60 F0 00  // .........b`|``..
    5D30: 7C C6 C0 C0 DE C6 7C 00 C6 C6 C6 FE C6 C6 C6 00  // |.....|.........
    5D40: 3C 18 18 18 18 18 3C 00 3C 18 18 18 D8 D8 70 00  // <.....<.<.....p.
    5D50: C6 CC D8 F0 D8 CC C6 00 F0 60 60 60 60 62 FE 00  // .........````b..
    5D60: C6 EE FE D6 D6 C6 C6 00 C6 E6 E6 F6 DE CE C6 00  // ................
    5D70: 7C C6 C6 C6 C6 C6 7C 00 FC 66 66 7C 60 60 F0 00  // |.....|..ff|``..
    5D80: 7C C6 C6 C6 C6 D6 7C 06 FC C6 C6 FC D8 CC C6 00  // |.....|.........
    5D90: 7C C6 C0 7C 06 C6 7C 00 7E 5A 18 18 18 18 3C 00  // |..|..|.~Z....<.
    5DA0: C6 C6 C6 C6 C6 C6 7C 00 C6 C6 C6 C6 6C 38 10 00  // ......|.....l8..
    5DB0: C6 C6 D6 D6 FE EE C6 00 C6 6C 38 38 38 6C C6 00  // .........l888l..
    5DC0: 66 66 66 3C 18 18 3C 00 FE 86 0C 18 30 62 FE 00  // fff<..<.....0b..
    5DD0: 7C 60 60 60 60 60 7C 00 C0 60 30 18 0C 06 02 00  // |`````|..`0.....
    5DE0: 7C 0C 0C 0C 0C 0C 7C 00 10 38 6C C6 00 00 00 00  // |.....|..8l.....
    5DF0: 00 00 00 00 00 00 00 FF 30 30 18 00 00 00 00 00  // ........00......
    5E00: 00 00 78 0C 7C CC 7E 00 E0 60 7C 66 66 66 FC 00  // ..x.|.~..`|fff..
    5E10: 00 00 7C C6 C0 C6 7C 00 1C 0C 7C CC CC CC 7E 00  // ..|...|...|...~.
    5E20: 00 00 7C C6 FE C0 7C 00 1C 36 30 FC 30 30 78 00  // ..|...|..60.00x.
    5E30: 00 00 76 CE C6 7E 06 7C E0 60 7C 66 66 66 E6 00  // ..v..~.|.`|fff..
    5E40: 18 00 38 18 18 18 3C 00 0C 00 1C 0C 0C 0C CC 78  // ..8...<........x
    5E50: E0 60 66 6C 78 6C E6 00 18 18 18 18 18 18 1C 00  // .`flxl..........
    5E60: 00 00 6C FE D6 D6 C6 00 00 00 DC 66 66 66 66 00  // ..l........ffff.
    5E70: 00 00 7C C6 C6 C6 7C 00 00 00 DC 66 66 7C 60 F0  // ..|...|....ff|`.
    5E80: 00 00 76 CC CC 7C 0C 1E 00 00 DC 66 60 60 F0 00  // ..v..|.....f``..
    5E90: 00 00 7C C0 7C 06 7C 00 30 30 FC 30 30 36 1C 00  // ..|.|.|.00.006..
    5EA0: 00 00 CC CC CC CC 76 00 00 00 C6 C6 6C 38 10 00  // ......v.....l8..
    5EB0: 00 00 C6 C6 D6 FE 6C 00 00 00 C6 6C 38 6C C6 00  // ......l....l8l..
    5EC0: 00 00 C6 C6 CE 76 06 7C 00 00 FC 98 30 64 FC 00  // .....v.|....0d..
    5ED0: 0E 18 18 70 18 18 0E 00 18 18 18 00 18 18 18 00  // ...p............
    5EE0: 70 18 18 0E 18 18 70 00 76 DC 00 00 00 00 00 00  // p.....p.v.......
    5EF0: 00 10 38 38 6C 6C FE 00 3C 66 C0 66 3C 18 CC 78  // ..88ll..<f.f<..x
    5F00: 00 C6 00 C6 C6 CE 76 00 0E 00 7C C6 FE C0 7C 00  // ......v...|...|.
    5F10: 7C C6 78 0C 7C CC 7E 00 C6 00 78 0C 7C CC 7E 00  // |.x.|.~...x.|.~.
    5F20: E0 00 78 0C 7C CC 7E 00 38 38 78 0C 7C CC 7E 00  // ..x.|.~.88x.|.~.
    5F30: 00 00 7C C0 7C 18 6C 38 7C C6 7C C6 FE C0 7C 00  // ..|.|.l8|.|...|.
    5F40: C6 00 7C C6 FE C0 7C 00 E0 00 7C C6 FE C0 7C 00  // ..|...|...|...|.
    5F50: 66 00 38 18 18 18 3C 00 7C C6 38 18 18 18 3C 00  // f.8...<.|.8...<.
    5F60: 00 00 38 18 18 18 3C 00 C6 38 6C C6 FE C6 C6 00  // ..8...<..8l.....
    5F70: 38 38 00 7C C6 FE C6 00 0E 00 FE C0 F8 C0 FE 00  // 88.|............
    5F80: 00 00 6C 9A 7E D8 6E 00 7E D8 D8 FE D8 D8 DE 00  // ..l.~.n.~.......
    5F90: 7C C6 00 7C C6 C6 7C 00 00 C6 00 7C C6 C6 7C 00  // |..|..|....|..|.
    5FA0: 00 E0 00 7C C6 C6 7C 00 7C C6 00 C6 C6 CE 76 00  // ...|..|.|.....v.
    5FB0: 00 E0 00 C6 C6 CE 76 00 18 00 3C 18 18 18 3C 00  // ......v...<...<.
    5FC0: C6 38 6C C6 C6 6C 38 00 C6 00 C6 C6 C6 C6 7C 00  // .8l..l8.......|.
    5FD0: 00 18 7E D8 D8 7E 18 00 38 6C 60 F0 66 F6 6C 00  // ..~..~..8l`.f.l.
    5FE0: C3 66 3C 7E 18 3C 18 00 3E 63 38 0E 63 3E 00 1C  // .f<~.<..>c8.c>..
    5FF0: 00 3E 61 3C 86 7C 00 1C 0E 00 78 0C 7C CC 7E 00  // .>a<.|....x.|.~.
    6000: 1C 00 38 18 18 18 3C 00 00 0E 00 7C C6 C6 7C 00  // ..8...<....|..|.
    6010: 00 0E 00 CC CC DC 76 00 00 FC 00 BC 66 66 E6 00  // ......v.....ff..
    6020: FE 00 C6 E6 F6 CE C6 00 3E 00 3E 60 67 63 3D 00  // ........>.>`gc=.
    6030: 3E 00 76 CE C6 7E 06 7C 18 00 18 30 60 66 3C 00  // >.v..~.|...0`f<.
    6040: 00 00 00 7C 60 60 00 00 00 00 00 7C 0C 0C 00 00  // ...|``.....|....
    6050: C0 CC D8 30 7C 36 0C 3E C0 CC D8 30 6C 3C 7E 0C  // ...0|6.>...0l<~.
    6060: 18 00 18 18 3C 3C 18 00 00 36 6C D8 6C 36 00 00  // ....<<...6l.l6..
    6070: 00 D8 6C 36 6C D8 00 00 22 88 22 88 22 88 22 88  // ..l6l...".".".".
    6080: 55 AA 55 AA 55 AA 55 AA DD 77 DD 77 DD 77 DD 77  // U.U.U.U..w.w.w.w
    6090: 18 18 18 18 18 18 18 18 18 18 18 18 F8 18 18 18  // ................
    60A0: 18 18 F8 18 F8 18 18 18 36 36 36 36 F6 36 36 36  // ........6666.666
    60B0: 00 00 00 00 FE 36 36 36 00 00 F8 18 F8 18 18 18  // .....666........
    60C0: 36 36 F6 06 F6 36 36 36 36 36 36 36 36 36 36 36  // 66...66666666666
    60D0: 00 00 FE 06 F6 36 36 36 36 36 F6 06 FE 00 00 00  // .....66666......
    60E0: 36 36 36 36 FE 00 00 00 18 18 F8 18 F8 00 00 00  // 6666............
    60F0: 00 00 00 00 F8 18 18 18 18 18 18 18 1F 00 00 00  // ................
    6100: 18 18 18 18 FF 00 00 00 00 00 00 00 FF 18 18 18  // ................
    6110: 18 18 18 18 1F 18 18 18 00 00 00 00 FF 00 00 00  // ................
    6120: 18 18 18 18 FF 18 18 18 18 18 1F 18 1F 18 18 18  // ................
    6130: 36 36 36 36 37 36 36 36 36 36 37 30 3F 00 00 00  // 666676666670?...
    6140: 00 00 3F 30 37 36 36 36 36 36 F7 00 FF 00 00 00  // ..?0766666......
    6150: 00 00 FF 00 F7 36 36 36 36 36 37 30 37 36 36 36  // .....66666707666
    6160: 00 00 FF 00 FF 00 00 00 36 36 F7 00 F7 36 36 36  // ........66...666
    6170: 18 18 FF 00 FF 00 00 00 36 36 36 36 FF 00 00 00  // ........6666....
    6180: 00 00 FF 00 FF 18 18 18 00 00 00 00 FF 36 36 36  // .............666
    6190: 36 36 36 36 3F 00 00 00 18 18 1F 18 1F 00 00 00  // 6666?...........
    61A0: 00 00 1F 18 1F 18 18 18 00 00 00 00 3F 36 36 36  // ............?666
    61B0: 36 36 36 36 FF 36 36 36 18 18 FF 18 FF 18 18 18  // 6666.666........
    61C0: 18 18 18 18 F8 00 00 00 00 00 00 00 1F 18 18 18  // ................
    61D0: FF FF FF FF FF FF FF FF 00 00 00 00 FF FF FF FF  // ................
    61E0: F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    61F0: FF FF FF FF 00 00 00 00 00 00 66 DC D8 DC 66 00  // ..........f...f.
    6200: 00 78 CC F8 CC C6 CC 00 00 FE 62 60 60 60 E0 00  // .x........b```..
    6210: 00 FE 6C 6C 6C 6C 6C 00 FE C6 60 30 60 C6 FE 00  // ..lllll...`0`...
    6220: 00 7E D8 CC CC D8 70 00 00 66 66 66 66 7C C0 00  // .~....p..ffff|..
    6230: 00 76 DC 18 18 18 38 00 FE 38 6C C6 6C 38 FE 00  // .v....8..8l.l8..
    6240: 38 6C C6 FE C6 6C 38 00 38 6C C6 C6 6C 6C EE 00  // 8l...l8.8l..ll..
    6250: 3E 60 38 66 C6 CC 78 00 00 00 7E DB DB 7E 00 00  // >`8f..x...~..~..
    6260: 06 7C DE F6 E6 7C C0 00 38 60 C0 F8 C0 60 38 00  // .|...|..8`...`8.
    6270: 7C C6 C6 C6 C6 C6 C6 00 00 FE 00 FE 00 FE 00 00  // |...............
    6280: 18 18 7E 18 18 00 7E 00 30 18 0C 18 30 00 7E 00  // ..~...~.0...0.~.
    6290: 0C 18 30 18 0C 00 7E 00 0C 1E 18 18 18 18 18 18  // ..0...~.........
    62A0: 18 18 18 18 18 78 30 00 00 00 18 00 7E 00 18 00  // .....x0.....~...
    62B0: 00 76 DC 00 76 DC 00 00 7C C6 C6 7C 00 00 00 00  // .v..v...|..|....
    62C0: 00 00 00 18 18 00 00 00 00 00 00 00 18 00 00 00  // ................
    62D0: 1F 18 18 18 F8 38 18 00 D8 6C 6C 6C 00 00 00 00  // .....8...lll....
    62E0: 70 D8 30 F8 00 00 00 00 00 00 7C 7C 7C 7C 00 00  // p.0.......||||..
    62F0: 00 00 00 00 00 00 00 00 1D 00 00 00 00 24 66 FF  // .............$f.
    6300: 66 24 00 00 00 00 00 00 00 10 00 00 00 00 00 00  // f$..............
    6310: 00 00 00 00 00 00 00 00 00 00 00 00 00 7E 81 A5  // .............~..
    6320: 81 81 BD 99 81 81 7E 00 00 00 00 00 00 7C FE FE  // ......~......|..
    6330: D6 FE FE BA C6 FE 7C 00 00 00 00 00 00 00 6C EE  // ......|.......l.
    6340: FE FE FE FE 7C 38 10 00 00 00 00 00 00 00 10 38  // ....|8.........8
    6350: 7C FE 7C 38 10 00 00 00 00 00 00 00 00 00 10 38  // |.|8...........8
    6360: 38 10 6C EE 6C 10 38 00 00 00 00 00 00 10 38 7C  // 8.l.l.8.......8|
    6370: 7C FE FE FE 6C 10 38 00 00 00 00 00 00 00 00 00  // |...l.8.........
    6380: 18 3C 3C 3C 18 00 00 00 00 00 00 FF FF FF FF FF  // .<<<............
    6390: E7 C3 C3 C3 E7 FF FF FF FF FF FF 00 00 00 00 18  // ................
    63A0: 3C 66 66 66 3C 18 00 00 00 00 00 FF FF FF FF E7  // <fff<...........
    63B0: C3 99 99 99 C3 E7 FF FF FF FF FF 00 00 1E 0E 1E  // ................
    63C0: 36 78 CC CC CC CC 78 00 00 00 00 00 00 3C 66 66  // 6x....x......<ff
    63D0: 66 3C 18 7E 18 18 18 00 00 00 00 00 00 1E 1A 1E  // f<.~............
    63E0: 18 18 18 18 78 F8 70 00 00 00 00 00 00 3E 36 3E  // ....x.p......>6>
    63F0: 36 36 76 F6 66 0E 1E 0C 00 00 00 00 00 18 DB 7E  // 66v.f..........~
    6400: 3C 66 66 3C 7E DB 18 00 00 00 00 00 00 00 80 E0  // <ff<~...........
    6410: F0 FC FE FC F0 E0 80 00 00 00 00 00 00 00 02 0E  // ................
    6420: 3E 7E FE 7E 3E 0E 02 00 00 00 00 00 00 18 3C 7E  // >~.~>.........<~
    6430: 18 18 18 18 7E 3C 18 00 00 00 00 00 00 66 66 66  // ....~<.......fff
    6440: 66 66 66 66 00 66 66 00 00 00 00 00 00 7F DB DB  // ffff.ff.........
    6450: DB DB 7B 1B 1B 1B 1B 00 00 00 00 00 00 7C C6 C6  // ..{..........|..
    6460: 60 7C F6 DE 7C 0C C6 C6 7C 00 00 00 00 00 00 00  // `|..|...|.......
    6470: 00 00 00 FE FE FE FE 00 00 00 00 00 00 18 3C 7E  // ..............<~
    6480: 18 18 18 7E 3C 18 7E 00 00 00 00 00 00 18 3C 7E  // ...~<.~.......<~
    6490: 18 18 18 18 18 18 18 00 00 00 00 00 00 18 18 18  // ................
    64A0: 18 18 18 18 7E 3C 18 00 00 00 00 00 00 00 00 00  // ....~<..........
    64B0: 0C 0E FF 0E 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    64C0: 30 70 FE 70 30 00 00 00 00 00 00 00 00 00 00 00  // 0p.p0...........
    64D0: 00 C0 C0 C0 FE 00 00 00 00 00 00 00 00 00 00 00  // ................
    64E0: 24 66 FF 66 24 00 00 00 00 00 00 00 00 00 10 38  // $f.f$..........8
    64F0: 38 38 7C 7C FE FE 00 00 00 00 00 00 00 00 FE FE  // 88||............
    6500: 7C 7C 7C 38 38 10 00 00 00 00 00 00 00 00 00 00  // |||88...........
    6510: 00 00 00 00 00 00 00 00 00 00 00 00 00 18 3C 3C  // ..............<<
    6520: 3C 3C 18 18 00 18 18 00 00 00 00 00 36 36 36 36  // <<..........6666
    6530: 14 00 00 00 00 00 00 00 00 00 00 00 00 6C 6C 6C  // .............lll
    6540: FE 6C 6C FE 6C 6C 6C 00 00 00 00 00 00 18 18 7C  // .ll.lll........|
    6550: C6 C0 78 3C 06 C6 7C 18 18 00 00 00 00 00 00 00  // ..x<..|.........
    6560: 62 66 0C 18 30 66 C6 00 00 00 00 00 00 38 6C 38  // bf..0f.......8l8
    6570: 30 76 7E CC CC CC 76 00 00 00 00 00 0C 0C 0C 18  // 0v~...v.........
    6580: 00 00 00 00 00 00 00 00 00 00 00 00 00 0C 18 30  // ...............0
    6590: 30 30 30 30 30 18 0C 00 00 00 00 00 00 30 18 0C  // 00000........0..
    65A0: 0C 0C 0C 0C 0C 18 30 00 00 00 00 00 00 00 00 00  // ......0.........
    65B0: 6C 38 FE 38 6C 00 00 00 00 00 00 00 00 00 00 00  // l8.8l...........
    65C0: 18 18 7E 18 18 00 00 00 00 00 00 00 00 00 00 00  // ..~.............
    65D0: 00 00 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00  // ................
    65E0: 00 00 FE 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    65F0: 00 00 00 00 00 18 18 00 00 00 00 00 00 00 00 02  // ................
    6600: 06 0C 18 30 60 C0 80 00 00 00 00 00 00 7C C6 C6  // ...0`........|..
    6610: CE DE F6 E6 C6 C6 7C 00 00 00 00 00 00 18 78 18  // ......|.......x.
    6620: 18 18 18 18 18 18 7E 00 00 00 00 00 00 7C C6 C6  // ......~......|..
    6630: 06 0C 18 30 60 C6 FE 00 00 00 00 00 00 7C C6 06  // ...0`........|..
    6640: 06 3C 06 06 06 C6 7C 00 00 00 00 00 00 0C 1C 3C  // .<....|........<
    6650: 6C CC CC FE 0C 0C 1E 00 00 00 00 00 00 FE C0 C0  // l...............
    6660: C0 FC 06 06 06 C6 7C 00 00 00 00 00 00 7C C6 C0  // ......|......|..
    6670: C0 FC C6 C6 C6 C6 7C 00 00 00 00 00 00 FE C6 06  // ......|.........
    6680: 0C 18 30 30 30 30 30 00 00 00 00 00 00 7C C6 C6  // ..00000......|..
    6690: C6 7C C6 C6 C6 C6 7C 00 00 00 00 00 00 7C C6 C6  // .|....|......|..
    66A0: C6 C6 7E 06 06 C6 7C 00 00 00 00 00 00 00 00 00  // ..~...|.........
    66B0: 0C 0C 00 00 0C 0C 00 00 00 00 00 00 00 00 00 00  // ................
    66C0: 0C 0C 00 00 0C 0C 0C 18 00 00 00 00 00 00 0C 18  // ................
    66D0: 30 60 C0 60 30 18 0C 00 00 00 00 00 00 00 00 00  // 0`.`0...........
    66E0: 00 FE 00 FE 00 00 00 00 00 00 00 00 00 00 60 30  // ..............`0
    66F0: 18 0C 06 0C 18 30 60 00 00 00 00 00 00 7C C6 C6  // .....0`......|..
    6700: 0C 18 18 18 00 18 18 00 00 00 00 00 00 7C C6 C6  // .............|..
    6710: C6 DE DE DE DC C0 7E 00 00 00 00 00 00 38 6C C6  // ......~......8l.
    6720: C6 C6 FE C6 C6 C6 C6 00 00 00 00 00 00 FC 66 66  // ..............ff
    6730: 66 7C 66 66 66 66 FC 00 00 00 00 00 00 3C 66 C2  // f|ffff.......<f.
    6740: C0 C0 C0 C0 C2 66 3C 00 00 00 00 00 00 F8 6C 66  // .....f<.......lf
    6750: 66 66 66 66 66 6C F8 00 00 00 00 00 00 FE 66 60  // fffffl........f`
    6760: 64 7C 64 60 60 66 FE 00 00 00 00 00 00 FE 66 60  // d|d``f........f`
    6770: 64 7C 64 60 60 60 F0 00 00 00 00 00 00 7C C6 C6  // d|d```.......|..
    6780: C0 C0 C0 CE C6 C6 7C 00 00 00 00 00 00 C6 C6 C6  // ......|.........
    6790: C6 FE C6 C6 C6 C6 C6 00 00 00 00 00 00 3C 18 18  // .............<..
    67A0: 18 18 18 18 18 18 3C 00 00 00 00 00 00 3C 18 18  // ......<......<..
    67B0: 18 18 18 18 D8 D8 70 00 00 00 00 00 00 C6 C6 CC  // ......p.........
    67C0: D8 F0 F0 D8 CC C6 C6 00 00 00 00 00 00 F0 60 60  // ..............``
    67D0: 60 60 60 60 62 66 FE 00 00 00 00 00 00 C6 C6 EE  // ````bf..........
    67E0: EE FE D6 D6 D6 C6 C6 00 00 00 00 00 00 C6 C6 E6  // ................
    67F0: E6 F6 DE CE CE C6 C6 00 00 00 00 00 00 7C C6 C6  // .............|..
    6800: C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 FC 66 66  // ......|.......ff
    6810: 66 66 7C 60 60 60 F0 00 00 00 00 00 00 7C C6 C6  // ff|```.......|..
    6820: C6 C6 C6 C6 D6 D6 7C 06 00 00 00 00 00 FC 66 66  // ......|.......ff
    6830: 66 7C 78 6C 66 66 E6 00 00 00 00 00 00 7C C6 C0  // f|xlff.......|..
    6840: C0 70 1C 06 06 C6 7C 00 00 00 00 00 00 7E 5A 18  // .p....|......~Z.
    6850: 18 18 18 18 18 18 3C 00 00 00 00 00 00 C6 C6 C6  // ......<.........
    6860: C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 C6 C6 C6  // ......|.........
    6870: C6 C6 C6 C6 6C 38 10 00 00 00 00 00 00 C6 C6 C6  // ....l8..........
    6880: D6 D6 D6 FE EE C6 C6 00 00 00 00 00 00 C6 C6 C6  // ................
    6890: 6C 38 38 6C C6 C6 C6 00 00 00 00 00 00 66 66 66  // l88l.........fff
    68A0: 66 66 3C 18 18 18 3C 00 00 00 00 00 00 FE C6 86  // ff<...<.........
    68B0: 0C 18 30 60 C2 C6 FE 00 00 00 00 00 00 7C 60 60  // ..0`.........|``
    68C0: 60 60 60 60 60 60 7C 00 00 00 00 00 00 00 00 80  // ``````|.........
    68D0: C0 60 30 18 0C 06 02 00 00 00 00 00 00 7C 0C 0C  // .`0..........|..
    68E0: 0C 0C 0C 0C 0C 0C 7C 00 00 00 00 00 10 38 6C C6  // ......|......8l.
    68F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6900: 00 00 00 00 00 00 00 00 FF 00 00 00 18 18 18 0C  // ................
    6910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6920: 78 0C 7C CC CC DC 76 00 00 00 00 00 00 E0 60 60  // x.|...v.......``
    6930: 7C 66 66 66 66 66 FC 00 00 00 00 00 00 00 00 00  // |fffff..........
    6940: 7C C6 C0 C0 C0 C6 7C 00 00 00 00 00 00 1C 0C 0C  // |.....|.........
    6950: 7C CC CC CC CC CC 7E 00 00 00 00 00 00 00 00 00  // |.....~.........
    6960: 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 1C 36 30  // |.....|.......60
    6970: 30 FC 30 30 30 30 78 00 00 00 00 00 00 00 00 00  // 0.0000x.........
    6980: 76 CE C6 C6 CE 76 06 C6 7C 00 00 00 00 E0 60 60  // v....v..|.....``
    6990: 7C 66 66 66 66 66 E6 00 00 00 00 00 00 18 18 00  // |fffff..........
    69A0: 38 18 18 18 18 18 3C 00 00 00 00 00 00 0C 0C 00  // 8.....<.........
    69B0: 1C 0C 0C 0C 0C 0C CC CC 78 00 00 00 00 E0 60 60  // ........x.....``
    69C0: 66 66 6C 78 6C 66 E6 00 00 00 00 00 00 18 18 18  // fflxlf..........
    69D0: 18 18 18 18 18 18 1C 00 00 00 00 00 00 00 00 00  // ................
    69E0: 6C FE D6 D6 C6 C6 C6 00 00 00 00 00 00 00 00 00  // l...............
    69F0: DC 66 66 66 66 66 66 00 00 00 00 00 00 00 00 00  // .ffffff.........
    6A00: 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 00 00 00  // |.....|.........
    6A10: DC 66 66 66 66 7C 60 60 F0 00 00 00 00 00 00 00  // .ffff|``........
    6A20: 76 CC CC CC CC 7C 0C 0C 1E 00 00 00 00 00 00 00  // v....|..........
    6A30: DC 66 60 60 60 60 F0 00 00 00 00 00 00 00 00 00  // .f````..........
    6A40: 7C C6 C0 7C 06 C6 7C 00 00 00 00 00 00 30 30 30  // |..|..|......000
    6A50: FC 30 30 30 30 36 1C 00 00 00 00 00 00 00 00 00  // .00006..........
    6A60: CC CC CC CC CC CC 76 00 00 00 00 00 00 00 00 00  // ......v.........
    6A70: C6 C6 C6 C6 6C 38 10 00 00 00 00 00 00 00 00 00  // ....l8..........
    6A80: C6 C6 D6 D6 D6 FE 6C 00 00 00 00 00 00 00 00 00  // ......l.........
    6A90: C6 C6 6C 38 6C C6 C6 00 00 00 00 00 00 00 00 00  // ..l8l...........
    6AA0: C6 C6 C6 C6 CE 76 06 C6 7C 00 00 00 00 00 00 00  // .....v..|.......
    6AB0: FE 86 0C 18 30 62 FE 00 00 00 00 00 00 0E 18 18  // ....0b..........
    6AC0: 18 70 18 18 18 18 0E 00 00 00 00 00 00 18 18 18  // .p..............
    6AD0: 18 00 18 18 18 18 18 00 00 00 00 00 00 70 18 18  // .............p..
    6AE0: 18 0E 18 18 18 18 70 00 00 00 00 00 00 76 DC 00  // ......p......v..
    6AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6B00: 10 38 38 6C 6C FE 00 00 00 00 00 00 00 3C 66 C0  // .88ll........<f.
    6B10: C0 C0 C6 66 3C 18 0C CC 38 00 00 00 00 C6 00 00  // ...f<...8.......
    6B20: C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 0C 18 30 00  // ......v.......0.
    6B30: 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 30 78 CC 00  // |.....|.....0x..
    6B40: 78 0C 7C CC CC DC 76 00 00 00 00 00 00 CC 00 00  // x.|...v.........
    6B50: 78 0C 7C CC CC DC 76 00 00 00 00 00 60 30 18 00  // x.|...v.....`0..
    6B60: 78 0C 7C CC CC DC 76 00 00 00 00 00 38 6C 38 00  // x.|...v.....8l8.
    6B70: 78 0C 7C CC CC DC 76 00 00 00 00 00 00 00 00 7C  // x.|...v........|
    6B80: C6 C0 C0 C6 7C 18 0C 6C 38 00 00 00 30 78 CC 00  // ....|..l8...0x..
    6B90: 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 CC 00 00  // |.....|.........
    6BA0: 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 30 18 0C 00  // |.....|.....0...
    6BB0: 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 66 00 00  // |.....|......f..
    6BC0: 38 18 18 18 18 18 3C 00 00 00 00 00 18 3C 66 00  // 8.....<......<f.
    6BD0: 38 18 18 18 18 18 3C 00 00 00 00 00 00 00 00 00  // 8.....<.........
    6BE0: 38 18 18 18 18 18 3C 00 00 00 00 00 C6 00 38 6C  // 8.....<.......8l
    6BF0: C6 C6 C6 FE C6 C6 C6 00 00 00 00 38 6C 38 00 38  // ...........8l8.8
    6C00: 6C C6 C6 FE C6 C6 C6 00 00 00 00 0C 18 30 00 FE  // l............0..
    6C10: 60 60 7C 60 60 60 FE 00 00 00 00 00 00 00 00 66  // ``|```.........f
    6C20: DB 1B 7F D8 D8 DF 76 00 00 00 00 00 00 7E D8 D8  // ......v......~..
    6C30: D8 D8 FE D8 D8 D8 DE 00 00 00 00 00 30 78 CC 00  // ............0x..
    6C40: 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 C6 00 00  // |.....|.........
    6C50: 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 30 18 0C 00  // |.....|.....0...
    6C60: 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 30 78 CC 00  // |.....|.....0x..
    6C70: C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 60 30 18 00  // ......v.....`0..
    6C80: C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 18 00 3C 18  // ......v.......<.
    6C90: 18 18 18 18 18 18 3C 00 00 00 00 00 C6 00 7C C6  // ......<.......|.
    6CA0: C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 C6 00 C6 C6  // ......|.........
    6CB0: C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 18 18 7C  // ......|........|
    6CC0: C6 C0 C0 C6 7C 18 18 00 00 00 00 00 38 6C 60 60  // ....|.......8l``
    6CD0: F0 60 60 60 66 F6 6C 00 00 00 00 00 66 66 66 66  // .```f.l.....ffff
    6CE0: 3C 18 7E 18 3C 18 18 00 00 00 00 00 00 3E 63 63  // <.~.<........>cc
    6CF0: 30 1C 06 63 63 3E 00 1C 00 00 00 00 00 00 00 00  // 0..cc>..........
    6D00: 3E 63 38 0E 63 3E 00 1C 00 00 00 00 0C 18 30 00  // >c8.c>........0.
    6D10: 78 0C 7C CC CC DC 76 00 00 00 00 00 0C 18 30 00  // x.|...v.......0.
    6D20: 38 18 18 18 18 18 3C 00 00 00 00 00 0C 18 30 00  // 8.....<.......0.
    6D30: 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 18 30 60 00  // |.....|......0`.
    6D40: CC CC CC CC CC DC 76 00 00 00 00 00 00 76 DC 00  // ......v......v..
    6D50: BC 66 66 66 66 66 E6 00 00 00 00 00 76 DC 00 C6  // .fffff......v...
    6D60: C6 E6 F6 DE CE C6 C6 00 00 00 00 00 21 1E 00 1E  // ............!...
    6D70: 33 60 60 67 63 33 1D 00 00 00 00 00 42 3C 00 3B  // 3``gc3......B<.;
    6D80: 66 66 66 3E 06 66 3C 00 00 00 00 00 00 30 30 00  // fff>.f<......00.
    6D90: 30 30 30 60 C6 C6 7C 00 00 00 00 00 00 00 00 00  // 000`..|.........
    6DA0: 00 00 7E 60 60 60 00 00 00 00 00 00 00 00 00 00  // ..~```..........
    6DB0: 00 00 7E 06 06 06 00 00 00 00 00 00 60 60 62 66  // ..~.........``bf
    6DC0: 6C 18 30 60 DC 36 0C 18 3E 00 00 00 60 60 62 66  // l.0`.6..>...``bf
    6DD0: 6C 18 36 6E DE 36 7E 06 06 00 00 00 00 18 18 00  // l.6n.6~.........
    6DE0: 18 18 3C 3C 3C 3C 18 00 00 00 00 00 00 00 00 00  // ..<<<<..........
    6DF0: 36 6C D8 6C 36 00 00 00 00 00 00 00 00 00 00 00  // 6l.l6...........
    6E00: D8 6C 36 6C D8 00 00 00 00 00 00 11 44 11 44 11  // .l6l........D.D.
    6E10: 44 11 44 11 44 11 44 11 44 11 44 AA 55 AA 55 AA  // D.D.D.D.D.D.U.U.
    6E20: 55 AA 55 AA 55 AA 55 AA 55 AA 55 DD 77 DD 77 DD  // U.U.U.U.U.U.w.w.
    6E30: 77 DD 77 DD 77 DD 77 DD 77 DD 77 18 18 18 18 18  // w.w.w.w.w.w.....
    6E40: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6E50: 18 18 F8 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6E60: F8 18 F8 18 18 18 18 18 18 18 18 36 36 36 36 36  // ...........66666
    6E70: 36 36 F6 36 36 36 36 36 36 36 36 00 00 00 00 00  // 66.66666666.....
    6E80: 00 00 FE 36 36 36 36 36 36 36 36 00 00 00 00 00  // ...66666666.....
    6E90: F8 18 F8 18 18 18 18 18 18 18 18 36 36 36 36 36  // ...........66666
    6EA0: F6 06 F6 36 36 36 36 36 36 36 36 36 36 36 36 36  // ...6666666666666
    6EB0: 36 36 36 36 36 36 36 36 36 36 36 00 00 00 00 00  // 66666666666.....
    6EC0: FE 06 F6 36 36 36 36 36 36 36 36 36 36 36 36 36  // ...6666666666666
    6ED0: F6 06 FE 00 00 00 00 00 00 00 00 36 36 36 36 36  // ...........66666
    6EE0: 36 36 FE 00 00 00 00 00 00 00 00 18 18 18 18 18  // 66..............
    6EF0: F8 18 F8 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6F00: 00 00 F8 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6F10: 18 18 1F 00 00 00 00 00 00 00 00 18 18 18 18 18  // ................
    6F20: 18 18 FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6F30: 00 00 FF 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6F40: 18 18 1F 18 18 18 18 18 18 18 18 00 00 00 00 00  // ................
    6F50: 00 00 FF 00 00 00 00 00 00 00 00 18 18 18 18 18  // ................
    6F60: 18 18 FF 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6F70: 1F 18 1F 18 18 18 18 18 18 18 18 36 36 36 36 36  // ...........66666
    6F80: 36 36 37 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6676666666666666
    6F90: 37 30 3F 00 00 00 00 00 00 00 00 00 00 00 00 00  // 70?.............
    6FA0: 3F 30 37 36 36 36 36 36 36 36 36 36 36 36 36 36  // ?076666666666666
    6FB0: F7 00 FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6FC0: FF 00 F7 36 36 36 36 36 36 36 36 36 36 36 36 36  // ...6666666666666
    6FD0: 37 30 37 36 36 36 36 36 36 36 36 00 00 00 00 00  // 70766666666.....
    6FE0: FF 00 FF 00 00 00 00 00 00 00 00 36 36 36 36 36  // ...........66666
    6FF0: F7 00 F7 36 36 36 36 36 36 36 36 18 18 18 18 18  // ...66666666.....
    7000: FF 00 FF 00 00 00 00 00 00 00 00 36 36 36 36 36  // ...........66666
    7010: 36 36 FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // 66..............
    7020: FF 00 FF 18 18 18 18 18 18 18 18 00 00 00 00 00  // ................
    7030: 00 00 FF 36 36 36 36 36 36 36 36 36 36 36 36 36  // ...6666666666666
    7040: 36 36 3F 00 00 00 00 00 00 00 00 18 18 18 18 18  // 66?.............
    7050: 1F 18 1F 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7060: 1F 18 1F 18 18 18 18 18 18 18 18 00 00 00 00 00  // ................
    7070: 00 00 3F 36 36 36 36 36 36 36 36 36 36 36 36 36  // ..?6666666666666
    7080: 36 36 FF 36 36 36 36 36 36 36 36 18 18 18 18 18  // 66.66666666.....
    7090: FF 18 FF 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    70A0: 18 18 F8 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    70B0: 00 00 1F 18 18 18 18 18 18 18 18 FF FF FF FF FF  // ................
    70C0: FF FF FF FF FF FF FF FF FF FF FF 00 00 00 00 00  // ................
    70D0: 00 00 00 FF FF FF FF FF FF FF FF F0 F0 F0 F0 F0  // ................
    70E0: F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F  // ................
    70F0: 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF FF  // ................
    7100: FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 76  // ...............v
    7110: DC D8 D8 D8 D8 DC 76 00 00 00 00 00 00 78 CC CC  // ......v......x..
    7120: D8 FC C6 C6 C6 C6 CC 00 00 00 00 00 00 FE 66 62  // ..............fb
    7130: 60 60 60 60 60 60 60 00 00 00 00 00 00 00 00 00  // ```````.........
    7140: FE 6C 6C 6C 6C 6C 6C 00 00 00 00 00 00 FE C6 62  // .llllll........b
    7150: 30 18 18 30 62 C6 FE 00 00 00 00 00 00 00 00 00  // 0..0b...........
    7160: 7E D8 CC CC CC D8 70 00 00 00 00 00 00 00 00 66  // ~.....p........f
    7170: 66 66 66 66 7C 60 C0 80 00 00 00 00 00 00 00 00  // ffff|`..........
    7180: 76 DC 18 18 18 18 18 00 00 00 00 00 00 FE 38 38  // v.............88
    7190: 6C C6 C6 6C 38 38 FE 00 00 00 00 00 00 00 38 6C  // l..l88........8l
    71A0: C6 C6 FE C6 C6 6C 38 00 00 00 00 00 00 38 6C C6  // .....l8......8l.
    71B0: C6 C6 C6 6C 6C 6C EE 00 00 00 00 00 00 3E 60 60  // ...lll.......>``
    71C0: 3C 66 C6 C6 C6 CC 78 00 00 00 00 00 00 00 00 00  // <f....x.........
    71D0: 7E DB DB DB 7E 00 00 00 00 00 00 00 00 02 06 7C  // ~...~..........|
    71E0: CE DE F6 F6 7C 60 C0 00 00 00 00 00 00 00 1C 30  // ....|`.........0
    71F0: 60 60 7C 60 60 30 1C 00 00 00 00 00 00 7C C6 C6  // ``|``0.......|..
    7200: C6 C6 C6 C6 C6 C6 C6 00 00 00 00 00 00 00 00 FE  // ................
    7210: 00 00 FE 00 00 FE 00 00 00 00 00 00 00 00 00 18  // ................
    7220: 18 7E 18 18 00 00 7E 00 00 00 00 00 00 30 18 0C  // .~....~......0..
    7230: 06 0C 18 30 00 00 7E 00 00 00 00 00 00 0C 18 30  // ...0..~........0
    7240: 60 30 18 0C 00 00 7E 00 00 00 00 00 00 00 00 0C  // `0....~.........
    7250: 1E 1A 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    7260: 18 18 18 18 18 58 78 30 00 00 00 00 00 00 00 18  // .....Xx0........
    7270: 18 00 7E 00 18 18 00 00 00 00 00 00 00 00 00 00  // ..~.............
    7280: 00 76 DC 00 76 DC 00 00 00 00 00 00 00 78 CC CC  // .v..v........x..
    7290: 78 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // x...............
    72A0: 00 00 18 18 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    72B0: 00 00 00 18 00 00 00 00 00 00 00 00 00 1F 18 18  // ................
    72C0: 18 18 18 D8 D8 78 38 18 00 00 00 00 00 D8 6C 6C  // .....x8.......ll
    72D0: 6C 6C 6C 00 00 00 00 00 00 00 00 00 00 70 D8 18  // lll..........p..
    72E0: 30 60 F8 00 00 00 00 00 00 00 00 00 00 00 00 00  // 0`..............
    72F0: 7E 7E 7E 7E 7E 7E 00 00 00 00 00 00 00 00 00 00  // ~~~~~~..........
    7300: 00 00 00 00 00 00 00 00 00 00 00 1D 00 00 00 00  // ................
    7310: 00 24 66 FF 66 24 00 00 00 00 00 00 2F 00 00 00  // .$f.f$....../...
    7320: 01 03 06 0C 18 30 60 C0 80 00 00 00 00 30 00 00  // .....0`......0..
    7330: 7E C3 C3 C3 DB DB C3 C3 C3 7E 00 00 00 00 4D 00  // ~........~....M.
    7340: 00 C3 C3 E7 FF FF DB DB C3 C3 C3 00 00 00 00 54  // ...............T
    7350: 00 00 FF 99 18 18 18 18 18 18 18 3C 00 00 00 00  // ...........<....
    7360: 56 00 00 C3 C3 C3 C3 C3 C3 C3 66 3C 18 00 00 00  // V.........f<....
    7370: 00 57 00 00 C3 C3 C3 C3 DB DB DB DB FF 66 00 00  // .W...........f..
    7380: 00 00 58 00 00 C3 C3 C3 66 3C 3C 66 C3 C3 C3 00  // ..X.....f<<f....
    7390: 00 00 00 59 00 00 C3 C3 C3 C3 66 3C 18 18 18 3C  // ...Y......f<...<
    73A0: 00 00 00 00 5C 00 00 00 80 C0 60 30 18 0C 06 03  // ....\.....`0....
    73B0: 01 00 00 00 00 6D 00 00 00 00 00 66 FF DB DB DB  // .....m.....f....
    73C0: C3 C3 00 00 00 00 76 00 00 00 00 00 C3 C3 C3 C3  // ......v.........
    73D0: 66 3C 18 00 00 00 00 77 00 00 00 00 00 C3 C3 DB  // f<.....w........
    73E0: DB DB FF 66 00 00 00 00 00 00 A3 62 C3 0B DB 74  // ...f.......b...t
    73F0: 03 E9 46 01 57 32 C0 B9 40 00 F3 AA 5F BB 70 90  // ..F.W2..@..._.p.
    7400: 26 89 1D 26 8C 4D 02 2E 8E 1E 0A 03 57 BE 49 04  // &..&.M......W.I.
    7410: B9 1E 00 83 C7 04 FC 8A 04 26 88 05 46 47 E2 F7  // .........&..FG..
    7420: 5F A0 84 04 FE C0 26 88 45 22 A1 85 04 26 89 45  // _.....&.E"...&.E
    7430: 23 57 E8 D9 1B 5F 26 88 5D 25 26 88 7D 26 8A 1E  // #W..._&.]%&.}&..
    7440: 49 04 E8 FC 05 74 05 80 FB 13 7F 1D 32 FF D1 E3  // I....t......2...
    7450: 2E 8A 87 48 90 32 E4 0A C0 74 01 40 26 89 45 27  // ...H.2...t.@&.E'
    7460: 2E 8A 87 49 90 26 88 45 29 A1 85 04 8A 16 84 04  // ...I.&.E).......
    7470: FE C2 F6 E2 B2 00 3D C8 00 7E 15 B2 01 3D 5E 01  // ......=..~...=^.
    7480: 7E 0E B2 02 3D 90 01 7E 07 B2 03 3D E0 01 7E 00  // ~...=..~...=..~.
    7490: 26 88 55 2A 8A 26 87 04 8A C4 24 01 C0 E0 04 80  // &.U*.&....$.....
    74A0: E4 02 D0 E4 0A E0 80 F4 10 A0 89 04 24 0A 0A E0  // ............$...
    74B0: E8 94 08 B2 C0 B0 30 EE 42 EC 24 08 C0 E0 02 0A  // ......0.B.$.....
    74C0: C4 0C 01 26 88 45 2D B0 03 26 88 45 31 E8 77 08  // ...&.E-..&.E1.w.
    74D0: 1E 06 32 D2 C4 1E A8 04 8C C1 8C CE 3B CE 74 34  // ..2.........;.t4
    74E0: 26 C5 77 04 8C D9 0B F1 74 03 80 CA 10 26 C5 77  // &.w.....t....&.w
    74F0: 0C 8C D9 0B F1 74 03 80 CA 08 26 C5 77 08 8C D9  // .....t....&.w...
    7500: 0B F1 74 03 80 CA 04 26 C5 77 10 8C D9 0B F1 74  // ..t....&.w.....t
    7510: 03 80 CA 01 07 1F 26 88 55 32 B0 03 BA C4 03 E8  // ......&.U2......
    7520: E4 04 8A E0 C0 EC 02 8A D4 8A F2 D0 EE 81 E2 04  // ................
    7530: 04 25 03 03 0B C2 26 89 45 2B 8B EC C6 46 1A 1B  // .%....&.E+...F..
    7540: C3 0A C0 74 0F FE C8 74 36 FE C8 74 56 8B EC C6  // ...t...t6..tV...
    7550: 46 1A 00 C3 B8 20 00 F6 C1 01 74 03 83 C0 60 F6  // F.... ....t...`.
    7560: C1 02 74 03 83 C0 3A F6 C1 04 74 03 05 03 03 83  // ..t...:...t.....
    7570: C0 3F C1 E8 06 8B EC 89 46 0E C6 46 1A 1C C3 8B  // .?......F..F....
    7580: FB 83 C7 20 F6 C1 01 74 03 E8 85 00 F6 C1 02 74  // ... ...t.......t
    7590: 03 E8 EF 00 F6 C1 04 74 03 E8 F8 01 8B EC C6 46  // .......t.......F
    75A0: 1A 1C C3 F6 C1 01 74 06 E8 16 15 E8 25 01 F6 C1  // ......t.....%...
    75B0: 02 74 03 E8 85 01 F6 C1 04 74 03 E8 12 02 EB DC  // .t.......t......
    75C0: 8A C4 EE 42 EC AA FE C4 4A E2 F5 C3 E8 6B 04 BD  // ...B....J....k..
    75D0: C0 03 B9 15 00 32 E4 EC 87 EA 8A C4 EE 42 EC AA  // .....2.......B..
    75E0: FE C4 4A 87 EA E2 F0 EC 87 EA B0 20 EE C3 26 8A  // ..J........ ..&.
    75F0: 05 88 04 47 46 E2 F7 C3 26 8A 25 EF 47 FE C0 E2  // ...GF...&.%.G...
    7600: F7 C3 B2 C0 8A C4 EE 26 8A 05 47 FE C4 EE E2 F4  // .......&..G.....
    7610: C3 9C FA 51 57 8B C7 2B C3 26 89 07 8B F7 E8 0A  // ...QW..+.&......
    7620: 04 EC 26 88 44 01 26 89 54 41 B2 CE EC 26 88 44  // ..&.D.&.TA...&.D
    7630: 02 B2 CC EC 26 88 44 09 B2 CA EC 26 88 44 04 B2  // ....&.D....&.D..
    7640: C4 EC 26 88 04 83 C7 05 B9 04 00 B4 01 E8 70 FF  // ..&...........p.
    7650: 26 8A 04 EE 8B FE 83 C7 0A 26 8B 54 41 32 E4 B9  // &........&.TA2..
    7660: 19 00 E8 5B FF 26 8A 44 01 EE E8 5F FF B2 CE 32  // ...[.&.D..._...2
    7670: E4 B9 09 00 E8 49 FF 26 8A 44 02 EE 5F 59 83 C7  // .....I.&.D.._Y..
    7680: 60 9D C3 9C FA 8B C7 2B C3 26 89 47 02 51 57 2E  // `......+.&.G.QW.
    7690: 8E 1E 0A 03 A0 10 04 24 30 AA BE 49 04 B9 1E 00  // .......$0..I....
    76A0: F3 A4 BE 84 04 B1 07 F3 A4 BE A8 04 B1 04 F3 A4  // ................
    76B0: BE 14 00 B1 04 F3 A4 BE 74 00 B1 04 F3 A4 BE 7C  // ........t......|
    76C0: 00 B1 04 F3 A4 BE 0C 01 B1 04 F3 A4 5F 59 83 C7  // ............_Y..
    76D0: 3A 9D C3 9C FA 26 8B 3F 03 FB 8B F7 51 8B FE 83  // :....&.?....Q...
    76E0: C7 05 BA C4 03 B8 00 01 EF B0 01 B9 04 00 E8 07  // ................
    76F0: FF 47 B2 C2 26 8A 44 09 EE B2 C4 B8 00 03 EF 26  // .G..&.D........&
    7700: 8A 04 EE 26 8B 54 41 B8 11 00 EF B1 19 32 C0 E8  // ...&.TA......2..
    7710: E6 FE 26 8A 44 01 EE 80 C2 06 26 8A 44 04 EE EC  // ..&.D.....&.D...
    7720: B1 15 32 E4 E8 DB FE B0 20 EE B1 09 32 C0 B2 CE  // ..2..... ...2...
    7730: E8 C5 FE 26 8A 44 02 EE 59 9D C3 9C FA 26 8B 7F  // ...&.D..Y....&..
    7740: 02 03 FB 06 51 2E 8E 1E 0A 03 26 8A 05 80 26 10  // ....Q.....&...&.
    7750: 04 CF 08 06 10 04 47 BE 49 04 B9 1E 00 E8 8E FE  // ......G.I.......
    7760: BE 84 04 B1 07 E8 86 FE BE A8 04 B1 04 E8 7E FE  // ..............~.
    7770: BE 14 00 B1 04 E8 76 FE BE 74 00 B1 04 E8 6E FE  // ......v..t....n.
    7780: BE 7C 00 B1 04 E8 66 FE BE 0C 01 B1 04 E8 5E FE  // .|....f.......^.
    7790: 59 07 9D C3 9C FA 8B C7 2B C3 26 89 47 04 E8 A6  // Y.......+.&.G...
    77A0: 05 B2 C0 B0 34 EE 42 EC 26 88 05 BA C8 03 EC 26  // ....4.B.&......&
    77B0: 88 45 01 50 4A 4A EC 26 88 45 02 83 C7 03 B9 00  // .E.PJJ.&.E......
    77C0: 03 42 32 C0 EE 42 42 EC AA E2 FC 58 4A EE 9D C3  // .B2..BB....XJ...
    77D0: 9C FA 26 8B 77 04 03 F3 E8 6C 05 B2 C0 B0 34 EE  // ..&.w....l....4.
    77E0: 26 8A 04 EE BA C6 03 26 8A 44 02 EE 56 42 42 83  // &......&.D..VBB.
    77F0: C6 03 32 C0 EE 42 B9 00 03 26 8A 04 EE 46 E2 F9  // ..2..B...&...F..
    7800: 5E FE CA 26 8A 44 01 EE 9D C3 BA CC 03 EC 24 FE  // ^..&.D........$.
    7810: 0A C4 B2 C2 EE C3 E8 A8 12 B2 C0 86 C4 EE EB 00  // ................
    7820: EB 00 86 C4 EE EB 00 EB 00 B0 20 EE C3 50 8A E0  // .......... ..P..
    7830: 80 E4 80 80 26 87 04 7F 08 26 87 04 24 7F 8A E0  // ....&....&..$...
    7840: 3C 07 7E 1E 26 F6 47 33 01 75 17 3C 23 74 13 3C  // <.~.&.G3.u.<#t.<
    7850: 32 74 0F 3C 33 74 0B B4 03 26 F6 47 09 01 75 02  // 2t.<3t...&.G..u.
    7860: B4 07 88 26 49 04 BA B4 03 80 0E 87 04 02 26 F6  // ...&I.........&.
    7870: 47 09 01 74 07 B2 D4 80 26 87 04 FD 89 16 63 04  // G..t....&.....c.
    7880: C7 06 4E 04 00 00 C6 06 62 04 00 B9 08 00 BF 50  // ..N.....b......P
    7890: 04 FC 06 1E 07 33 C0 F3 AB 07 26 8A 07 32 E4 A3  // .....3....&..2..
    78A0: 4A 04 26 8A 47 01 A2 84 04 26 8A 47 02 A3 85 04  // J.&.G....&.G....
    78B0: 26 8B 47 03 A3 4C 04 26 8B 47 14 86 C4 A3 60 04  // &.G..L.&.G....`.
    78C0: 58 C3 52 32 E4 33 D2 B0 0D CD 17 F6 C4 29 75 08  // X.R2.3.......)u.
    78D0: 32 E4 33 D2 B0 0A CD 17 5A C3 06 1E 60 2E 8E 1E  // 2.3.....Z...`...
    78E0: 0A 03 2E 83 0E 14 03 00 75 6E 80 3E 00 05 01 74  // ........un.>...t
    78F0: 67 C6 06 00 05 01 8A 1E 62 04 32 FF D1 E3 8B FB  // g.......b.2.....
    7900: 8B 85 50 04 8A 3E 62 04 50 32 F6 8A 0E 84 04 32  // ..P..>b.P2.....2
    7910: ED 41 51 8B 0E 4A 04 32 D2 E8 A6 FF F6 C4 29 75  // .AQ..J.2......)u
    7920: 3D 51 52 89 95 50 04 B4 08 E8 B6 D4 0A C0 75 02  // =QR..P........u.
    7930: B0 20 33 D2 32 E4 CD 17 F6 C4 29 75 1F 5A FE C2  // . 3.2.....)u.Z..
    7940: 59 E2 DE FE C6 59 E2 CA E8 77 FF 32 C0 A2 00 05  // Y....Y...w.2....
    7950: 58 89 85 50 04 E8 AF 03 61 1F 07 CF 5A 59 59 B0  // X..P....a...ZYY.
    7960: FF EB EA 52 2A F5 38 C6 7D 02 32 C0 2E 8E 06 0C  // ...R*.8.}.2.....
    7970: 03 5A C3 A0 85 04 F6 E3 8A F7 8B D8 8B CA BA C4  // .Z..............
    7980: 03 B8 02 0F EF B4 02 E8 6D 00 8B D1 32 ED 8A E6  // ........m...2...
    7990: 8A C6 F3 AA 03 FD 8A CA 4B 75 F7 32 E4 E8 57 00  // ........Ku.2..W.
    79A0: C3 53 8A 1E 62 04 0B C0 75 04 0A DB 74 03 E8 35  // .S..b...u...t..5
    79B0: 03 5B 8B F8 2B D1 81 C2 01 01 8A C3 32 E4 C3 8A  // .[..+.......2...
    79C0: C6 32 F6 2B EA 0A DB 74 2A 2A C3 F6 26 85 04 8B  // .2.+...t**..&...
    79D0: C8 52 B4 01 E8 20 00 B2 C4 B8 02 0F EF 5A 1E 06  // .R... .......Z..
    79E0: 1F 8B C1 8B CA F3 A4 03 F5 03 FD 48 75 F5 1F E8  // ...........Hu...
    79F0: 81 FF C3 8A D8 EB F8 BA CE 03 B0 05 EE 42 EC 24  // .............B.$
    7A00: FC 0A C4 EE 4A C3 9C FA EE 42 EB 00 EC 4A 9D C3  // ....J....B...J..
    7A10: 1E 2E 8E 1E 0A 03 8B 16 63 04 80 C2 06 1F C3 1E  // ........c.......
    7A20: 2E 8E 1E 0A 03 8B 16 63 04 1F C3 50 BA CC 03 EC  // .......c...P....
    7A30: B2 D4 A8 01 75 02 B2 B4 58 C3 E8 EE FF 80 C2 06  // ....u...X.......
    7A40: C3 1E 2E 8E 1E 0A 03 80 3E 49 04 03 74 13 80 3E  // ........>I..t..>
    7A50: 49 04 02 74 0C 80 3E 49 04 01 74 05 80 3E 49 04  // I..t..>I..t..>I.
    7A60: 00 1F C3 50 2E 8E 06 0E 03 A0 10 04 24 30 3C 30  // ...P........$0<0
    7A70: 74 05 2E 8E 06 10 03 58 0B C0 74 03 E8 E1 01 03  // t......X..t.....
    7A80: 06 4E 04 81 C2 01 01 2B D1 32 ED 8B 2E 4A 04 8B  // .N.....+.2...J..
    7A90: F8 8B F0 8B C5 F6 E3 D1 E0 D1 E5 0A DB 75 02 8A  // .............u..
    7AA0: DE 38 F3 7E 02 8A DE C3 FC 8A D8 8B C1 E8 B3 FF  // .8.~............
    7AB0: 03 F0 3A 16 4A 04 74 06 06 1F E8 1B 00 C3 06 1F  // ..:.J.t.........
    7AC0: E8 40 00 C3 FC 8A D8 8A C1 8A E6 E8 95 FF F7 DD  // .@..............
    7AD0: 2B F0 06 1F E8 01 00 C3 53 8A CE 2A CB 32 ED 32  // +.......S..*.2.2
    7AE0: F6 2B EA 2B EA E3 0E 8A E1 8B CA F3 A5 03 F5 03  // .+.+............
    7AF0: FD FE CC 75 F4 58 B0 20 8A CA F3 AB 03 FD FE CB  // ...u.X. ........
    7B00: 75 F6 C3 53 8A C6 2A C3 74 06 F6 E2 8B C8 F3 A5  // u..S..*.t.......
    7B10: 58 8B C8 F6 E2 91 B0 20 F3 AB C3 8B D8 E8 2E 00  // X...... ........
    7B20: 2E 8E 1E 10 03 8A C3 22 DF D3 E3 A8 80 74 03 30  // .......".....t.0
    7B30: 1C C3 F6 D7 8A 34 22 F7 0A DE 88 1C C3 8A FC E8  // .....4".........
    7B40: 0C 00 2E 8E 1E 10 03 8A 04 D2 E8 22 C7 C3 B0 28  // ..........."...(
    7B50: F6 E2 F6 C2 01 74 03 05 D8 1F 8B F1 C1 EE 02 80  // .....t..........
    7B60: FF 05 7F 0C 03 F0 F6 D1 80 E1 03 D0 E1 B7 03 C3  // ................
    7B70: D1 EE 03 F0 F6 D1 80 E1 07 B7 01 C3 FC 8A D8 2E  // ................
    7B80: 8E 06 10 03 8B C1 E8 86 00 75 02 8A DE 03 F0 E8  // .........u......
    7B90: 24 00 C3 FC 8A D8 2E 8E 06 10 03 8A C1 8A E6 E8  // $...............
    7BA0: 6D 00 75 02 8A DE F7 DD 81 C6 F0 00 81 C7 F0 00  // m.u.............
    7BB0: 2B F0 E8 01 00 C3 8A CE 2A CB E3 2C 51 8A CA 56  // +.......*..,Q..V
    7BC0: 57 D1 E9 F3 A5 13 C9 F3 A4 8A CA 2B F1 2B F9 81  // W..........+.+..
    7BD0: C6 00 20 81 C7 00 20 D1 E9 F3 A5 13 C9 F3 A4 5F  // .. ... ........_
    7BE0: 5E 03 F5 03 FD 59 E2 D4 8A C7 8A E7 8A CA 57 D1  // ^....Y........W.
    7BF0: E9 F3 AB 13 C9 F3 AA 8A CA 2B F9 81 C7 00 20 D1  // .........+.... .
    7C00: E9 F3 AB 13 C9 F3 AA 5F 03 FD FE CB 75 DE C3 E8  // ......._....u...
    7C10: B0 00 81 C2 01 01 2B D1 38 F3 76 02 32 DB 51 B1  // ......+.8.v.2.Q.
    7C20: 02 D2 E6 D2 E3 59 32 ED BD 50 00 80 3E 49 04 06  // .....Y2..P..>I..
    7C30: 74 04 D0 E2 D1 E0 06 1F 8B F8 8B F0 B0 50 F6 E3  // t............P..
    7C40: 0A DB C3 52 53 8A DF 32 FF D1 E3 8B 87 50 04 E8  // ...RS..2.....P..
    7C50: 0E 00 50 D1 EB A1 4C 04 F7 E3 5B 03 C3 5B 5A C3  // ..P...L...[..[Z.
    7C60: 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 5A C3  // R...J...2.....Z.
    7C70: 8B E8 83 E5 0F 2E 8A A6 20 7C 8B E8 C1 ED 04 83  // ........ |......
    7C80: E5 0F 2E 8A 86 20 7C C3 00 03 0C 0F 30 33 3C 3F  // ..... |.....03<?
    7C90: C0 C3 CC CF F0 F3 FC FF 26 8B 04 86 E0 BA 00 80  // ........&.......
    7CA0: F6 C4 C0 74 02 0A D6 D0 EE C1 E0 02 75 F2 88 56  // ...t........u..V
    7CB0: 00 45 C3 8B 16 63 04 8A C5 86 E0 EF 8A E1 FE C0  // .E...c..........
    7CC0: EF C3 52 8B D0 8A C4 F6 26 4A 04 C1 E0 02 32 F6  // ..R.....&J....2.
    7CD0: 03 C2 5A C3 53 8A DF 32 FF D1 E3 8B 87 50 04 D1  // ..Z.S..2.....P..
    7CE0: EB E8 02 00 5B C3 52 8B D0 32 F6 52 8A C4 F6 26  // ....[.R..2.R...&
    7CF0: 85 04 F7 26 4A 04 5A 03 C2 0A DB 74 08 03 06 4C  // ...&J.Z....t...L
    7D00: 04 FE CB 75 F8 5A C3 52 8B D0 A0 4A 04 F6 E4 32  // ...u.Z.R...J...2
    7D10: F6 03 C2 D1 E0 03 06 4E 04 D1 F8 8B C8 B4 0E E8  // .......N........
    7D20: 91 FF 5A C3 8B C2 F7 26 4A 04 8B F9 C1 EF 03 03  // ..Z....&J.......
    7D30: F8 0A FF 74 0A 8A C7 32 E4 F7 26 4C 04 03 F8 80  // ...t...2..&L....
    7D40: E1 07 B4 80 D2 EC C3 E8 F0 FC EC C3 E8 F8 FF B2  // ................
    7D50: C0 B0 20 EE C3 E8 EF FF B2 C0 32 C0 EE C3 C4 3E  // .. .......2....>
    7D60: A8 04 26 C4 7D 04 8C C5 0B EF C3 53 B0 0E E8 95  // ..&.}......S....
    7D70: FC 8A E0 B0 0F E8 8E FC 8B D8 B8 0E AA EF B8 0F  // ................
    7D80: 55 EF B0 0E E8 7F FC 3C AA 74 0D B0 0F E8 76 FC  // U......<.t....v.
    7D90: 3C 55 74 04 32 C0 5B C3 B0 0E 8A E7 EF FE C0 8A  // <Ut.2.[.........
    7DA0: E3 EF B0 01 0A C0 5B C3 8A EE 8A 36 85 04 06 1F  // ......[....6....
    7DB0: 0A DB 74 25 8A C5 2A C3 F6 E6 8B C8 52 32 F6 C1  // ..t%..*.....R2..
    7DC0: E2 02 8B C2 D1 E2 2B D5 51 8B C8 F3 A5 2B FA 2B  // ......+.Q....+.+
    7DD0: F2 59 E2 F4 5A E8 05 00 C3 8A DD EB F8 8A C6 F6  // .Y..Z...........
    7DE0: E3 8B C8 8A C7 8A E0 32 F6 C1 E2 02 8B DA D1 E2  // .......2........
    7DF0: 8B F1 2B D5 8B CB F3 AB 2B FA 4E 75 F7 C3 2E 8E  // ..+.....+.Nu....
    7E00: 1E 0A 03 89 0E 60 04 8A C5 24 60 A8 20 74 06 B9  // .....`...$`. t..
    7E10: 00 1E E9 94 00 F6 06 87 04 01 0F 85 8B 00 80 3E  // ...............>
    7E20: 49 04 07 74 06 E8 19 FC 74 01 C3 F6 06 87 04 08  // I..t....t.......
    7E30: 74 03 CD 42 C3 8A 36 85 04 8A D6 FE CA 38 CD 7E  // t..B..6......8.~
    7E40: 1F 0A C9 74 64 8A E9 8A CE FE C9 EB 5C 38 D1 74  // ...td.......\8.t
    7E50: 58 8A CE 80 FD 03 7C 04 8A E9 D0 ED FE C9 EB 49  // X.....|........I
    7E60: 80 F9 03 7E 44 8A E1 2A E5 0A E4 75 0A 38 CA 74  // ...~D..*...u.8.t
    7E70: 38 FE CA 38 CA 74 32 8A C5 0A C1 38 F0 7E 0A 80  // 8..8.t2....8.~..
    7E80: FC 02 7E 12 80 FD 02 7F C8 80 FC 03 7D BF 8A D6  // ..~.........}...
    7E90: FE CA 38 D1 74 13 8A CE FE C9 FE C9 8A E9 2A EC  // ..8.t.........*.
    7EA0: 80 FE 08 7F 04 FE C1 FE C5 B4 0A E8 05 FE C3 2E  // ................
    7EB0: 8E 1E 0A 03 A2 62 04 32 E4 8B F0 F7 26 4C 04 A3  // .....b.2....&L..
    7EC0: 4E 04 8B C8 E8 7A FB 74 07 80 3E 49 04 07 77 02  // N....z.t..>I..w.
    7ED0: D1 F9 B4 0C E8 DC FD D1 E6 8B 84 50 04 E8 27 FE  // ...........P..'.
    7EE0: C3 2E 8E 1E 0A 03 8A 26 49 04 E8 74 9C 74 07 C7  // .......&I..t.t..
    7EF0: 06 50 04 00 00 C3 E8 48 FB 74 0B 80 FC 07 74 06  // .P.....H.t....t.
    7F00: 77 08 E8 77 FC C3 E8 9F FB C3 80 FC 13 7C 03 74  // w..w.........|.t
    7F10: 1F C3 E8 4E FA 8A D8 8B C1 E8 85 FA 8B 2E 4A 04  // ...N..........J.
    7F20: 52 F6 26 85 04 F7 E5 8B F7 03 F0 5A E8 90 FA C3  // R.&........Z....
    7F30: E8 30 FA 8A D8 8B C1 E8 67 FA C1 E7 03 52 8B 2E  // .0......g....R..
    7F40: 4A 04 C1 E5 03 F7 26 85 04 F7 E5 8B F7 03 F0 5A  // J.....&........Z
    7F50: E8 55 FE C3 2E 8E 1E 0A 03 8A 26 49 04 E8 E1 FA  // .U........&I....
    7F60: 74 0C 80 FC 07 74 07 77 40 80 FC 03 7F 04 E8 53  // t....t.w@......S
    7F70: FB C3 E8 1E FC C3 E8 EA F9 8A D8 8A C1 8A E6 FE  // ................
    7F80: C4 E8 1D FA 2B 3E 4A 04 C1 E7 03 52 F7 26 85 04  // ....+>J....R.&..
    7F90: F7 26 4A 04 C1 E0 03 8B F7 2B F0 5A 8B 2E 4A 04  // .&J......+.Z..J.
    7FA0: C1 E5 03 F7 DD E8 00 FE C3 80 FC 13 7C 03 74 C6  // ............|.t.
    7FB0: C3 E8 AF F9 8A D8 8A C1 8A E6 FE C4 E8 E2 F9 52  // ...............R
    7FC0: 8B 2E 4A 04 F7 26 85 04 F7 E5 2B FD 8B F7 2B F0  // ..J..&....+...+.
    7FD0: 5A F7 DD E8 E9 F9 C3 2E 8E 1E 0A 03 2E 8E 06 10  // Z...............
    7FE0: 03 E8 5D FA 74 11 80 3E 49 04 07 7C 18 2E 8E 06  // ..].t..>I..|....
    7FF0: 0E 03 74 03 E9 B1 00 E8 49 FC 8B D8 26 8B 07 8B  // ..t.....I...&...
    8000: EC 89 46 1A C3 A1 50 04 E8 B7 FC 8B F0 BB 08 00  // ..F...P.........
    8010: 2B E3 8B EC 80 3E 49 04 06 75 1F B9 04 00 26 8A  // +....>I..u....&.
    8020: 04 88 46 00 45 26 8A 84 00 20 88 46 00 45 83 C6  // ..F.E&... .F.E..
    8030: 50 E2 EB B8 00 02 B2 80 EB 17 D1 E6 B9 04 00 E8  // P...............
    8040: 56 FC 81 C6 00 20 E8 4F FC 81 EE B0 1F E2 F0 EB  // V.... .O........
    8050: E2 2B EB C4 3E 0C 01 32 F6 80 FB 0E 75 09 26 83  // .+..>..2....u.&.
    8060: 7D FE 10 75 02 B6 80 16 1F 8B F5 8B CB F6 C6 80  // }..u............
    8070: 74 01 47 56 57 F3 A6 5F 5E 74 23 FE C0 03 FB F6  // t.GVW.._^t#.....
    8080: C6 80 74 01 47 FE CA 75 E2 FE CC 74 0F 2E 8E 1E  // ..t.G..u...t....
    8090: 0A 03 C4 3E 7C 00 B0 80 B2 80 EB CB 32 C0 8B E5  // ...>|.......2...
    80A0: 03 E3 8B EC 89 46 1A C3 80 3E 49 04 13 7C 05 75  // .....F...>I..|.u
    80B0: 02 EB 5A C3 2E 8E 06 0C 03 E8 18 FC 8B F0 8B 1E  // ..Z.............
    80C0: 85 04 2B E3 8B EC B8 05 08 B9 05 00 BA CE 03 80  // ..+.............
    80D0: 3E 49 04 0F 72 1A F6 06 87 04 60 75 13 B4 0A F7  // >I..r.....`u....
    80E0: C6 01 00 75 02 B4 05 B0 07 EF B8 05 18 B9 05 01  // ...u............
    80F0: EF 51 8B CB 26 8A 04 F6 D0 88 46 00 45 03 36 4A  // .Q..&.....F.E.6J
    8100: 04 E2 F1 58 EF B8 00 01 32 D2 E9 44 FF 2E 8E 06  // ...X....2..D....
    8110: 0C 03 A1 50 04 8B D0 32 F6 52 8A C4 32 E4 F7 26  // ...P...2.R..2..&
    8120: 4A 04 F7 26 85 04 5A 03 C2 8B F0 8B 1E 85 04 2B  // J..&..Z........+
    8130: E3 8B EC 53 8B 3E 4A 04 4F C1 E7 03 C1 E6 03 B9  // ...S.>J.O.......
    8140: 08 00 32 E4 26 8A 04 D0 E4 0A C0 74 03 80 CC 01  // ..2.&......t....
    8150: 46 E2 F1 88 66 00 45 03 F7 4B 75 E3 5B B8 00 01  // F...f.E..Ku.[...
    8160: 32 D2 E9 EC FE 33 ED EB 03 BD 01 00 2E 8E 1E 0A  // 2....3..........
    8170: 03 2E 8E 06 10 03 8A 26 49 04 E8 C4 F8 74 0F 2E  // .......&I....t..
    8180: 8E 06 0E 03 80 FC 07 74 05 7C 3D E9 0B 02 8A E3  // .......t.|=.....
    8190: 8B F0 8A DF 32 FF D1 E3 8B 87 50 04 8B D0 A0 4A  // ....2.....P....J
    81A0: 04 F6 E4 32 F6 03 C2 8B F8 D1 E7 0A DB 74 0B D0  // ...2.........t..
    81B0: EB A1 4C 04 03 F8 FE CB 75 FA 8B C6 0B ED 75 03  // ..L.....u.....u.
    81C0: F3 AB C3 AA 47 E2 FC C3 50 2E 8E 06 10 03 A1 50  // ....G...P......P
    81D0: 04 E8 EE FA 8B F8 A0 50 04 8A 26 4A 04 8B E8 58  // .......P..&J...X
    81E0: A8 80 74 08 24 7F C5 36 7C 00 EB 04 C5 36 0C 01  // ..t.$..6|....6..
    81F0: 8A FC 32 E4 C1 E0 03 03 F0 80 FF 06 74 69 D1 E7  // ..2.........ti..
    8200: 8A F3 B0 55 80 E3 03 F6 E3 8A D8 8A F8 8B C5 50  // ...U...........P
    8210: B2 04 F6 C6 80 75 27 AC E8 55 FA 23 C3 AB AC E8  // .....u'..U.#....
    8220: 4E FA 23 C3 26 89 85 FE 1F 83 C7 4E FE CA 75 E7  // N.#.&......N..u.
    8230: 83 EE 08 81 EF 3E 01 58 E8 72 00 E2 D2 C3 AC E8  // .....>.X.r......
    8240: 2E FA 23 C3 26 31 05 AC E8 25 FA 23 C3 26 31 85  // ..#.&1...%.#.&1.
    8250: 00 20 83 C7 50 FE CA 75 E5 83 EE 08 81 EF 3E 01  // . ..P..u......>.
    8260: 58 E8 49 00 E2 A9 C3 8B C5 50 B2 04 F6 C3 80 74  // X.I......P.....t
    8270: 1F AC 26 30 05 AC 26 30 85 00 20 83 C7 50 FE CA  // ..&0..&0.. ..P..
    8280: 7F EF 83 EE 08 81 EF 3F 01 58 E8 20 00 E2 DA C3  // .......?.X. ....
    8290: AC AA AC 26 88 85 FF 1F 83 C7 4F FE CA 7F F1 83  // ...&......O.....
    82A0: EE 08 81 EF 3F 01 58 E8 03 00 E2 BD C3 FE C0 38  // ....?.X........8
    82B0: E0 72 06 32 C0 81 C7 F0 00 C3 8A 16 85 04 F6 E2  // .r.2............
    82C0: 8B F0 32 F6 8B EA 66 0F B6 06 51 04 F6 E2 66 0F  // ..2...f...Q...f.
    82D0: B7 16 4A 04 83 FA 64 75 03 BA 68 00 83 FA 5A 75  // ..J...du..h...Zu
    82E0: 03 BA 60 00 81 FA AF 00 75 03 BA B0 00 52 F7 E2  // ..`.....u....R..
    82F0: 66 0F B7 F8 66 0F B6 06 50 04 66 03 F8 66 C1 CF  // f...f...P.f..f..
    8300: 10 03 FA 66 C1 C7 03 81 CF 00 FF 66 C1 C7 10 5A  // ...f.......f...Z
    8310: 8A E2 4A C1 E2 03 A0 50 04 50 C5 06 0C 01 03 F0  // ..J....P.P......
    8320: 2E 8E 06 0C 03 58 57 51 50 9C FC 8B CD E8 3B 00  // .....XWQP.....;.
    8330: B5 08 AC 8A E0 8A C7 D0 E4 73 02 8A C3 26 88 05  // .........s...&..
    8340: 66 47 FE CD 75 EF 66 03 FA E2 E2 9D 58 59 5F 83  // fG..u.f.....XY_.
    8350: C7 08 FE C0 38 E0 72 0E 51 32 C0 8B CD 49 03 FA  // ....8.r.Q2...I..
    8360: 83 C7 08 E2 F9 59 2B F5 E2 BC C3 06 52 33 C0 8E  // .....Y+.....R3..
    8370: C0 66 C1 C7 10 8B C7 66 C1 C7 10 E8 E3 97 74 16  // .f.....f......t.
    8380: 38 E0 74 12 0F B6 D0 E8 91 C9 8A E0 66 C1 C7 10  // 8.t.........f...
    8390: 8B F8 66 C1 C7 10 5A 07 C3 80 FC 13 7C 0B 0F 84  // ..f...Z.....|...
    83A0: 18 FF 80 FC 62 0F 84 11 FF E8 01 00 C3 80 FC 11  // ....b...........
    83B0: 75 06 80 E3 80 80 CB 0F 50 53 8A DF 32 FF D1 E3  // u.......PS..2...
    83C0: 8B 97 50 04 5B 2E 8E 06 0C 03 E8 07 F9 8B F8 8B  // ..P.[...........
    83D0: 2E 85 04 58 32 F6 52 8B 36 4A 04 56 8A 26 85 04  // ...X2.R.6J.V.&..
    83E0: C5 36 0C 01 80 FC 0E 75 09 83 7C FE 10 75 03 B4  // .6.....u..|..u..
    83F0: 10 46 F6 E4 03 F0 B6 03 F6 C3 80 75 6D B2 C4 B8  // .F.........um...
    8400: 02 0F EF 5A 58 50 52 4A 8A E0 57 51 51 57 8B CD  // ...ZXPRJ..WQQW..
    8410: 32 C0 AA 03 FA E2 FB 5F 47 FE C4 38 D4 76 0A 32  // 2......_G..8.v.2
    8420: E4 8B CD 49 03 FA 47 E2 FB 59 E2 E0 59 5F BA C4  // ...I..G..Y..Y_..
    8430: 03 B0 02 8A E3 EF 5B 4B 5A 51 57 8B CD AC 26 8A  // ......[KZQW...&.
    8440: 25 AA 03 FB E2 F7 5F 47 2B F5 42 3B D3 76 0A 33  // %....._G+.B;.v.3
    8450: D2 8B CD 49 03 FB 47 E2 FB 59 E2 DD BA CE 03 B8  // ...I..G..Y......
    8460: 03 00 EF B2 C4 B8 02 0F EF C3 B2 CE B8 03 18 EF  // ................
    8470: EB BC 2E 8E 1E 0A 03 80 3E 63 04 B4 74 0B BA CC  // ........>c..t...
    8480: 03 EC A8 01 75 04 CD 42 C3 C3 E8 D1 F8 0A FF 75  // ....u..B.......u
    8490: 1C 8A E3 80 E4 1F 80 26 66 04 E0 08 26 66 04 E8  // .......&f...&f..
    84A0: 2D 00 8A 1E 66 04 80 E3 20 B1 05 D2 EB E8 91 F5  // -...f... .......
    84B0: 74 19 A0 66 04 24 DF 80 E3 01 74 02 0C 20 A2 66  // t..f.$....t.. .f
    84C0: 04 24 10 0C 02 0A D8 E8 53 00 C3 E8 7E F8 C3 53  // .$......S...~..S
    84D0: 50 80 E3 0F 8A FB D0 E3 81 E3 10 07 0A DF E8 60  // P..............`
    84E0: F5 74 0E B4 00 8A C3 E8 2C F3 0B ED 74 03 26 88  // .t......,...t.&.
    84F0: 1D 8A C3 E8 0B 00 0B ED 74 04 26 88 5D 10 58 5B  // ........t.&.].X[
    8500: C3 8A E0 1E 2E 8E 1E 0A 03 80 3E 49 04 33 1F 7F  // ..........>I.3..
    8510: 08 8A C4 B4 11 E8 FE F2 C3 E8 30 F8 C3 9C FA E8  // ..........0.....
    8520: 9F 05 B2 C0 B9 03 00 B4 01 8A C4 EE 8A C3 EE 0B  // ................
    8530: ED 74 04 47 26 88 1D FE C4 80 C3 02 E2 EB B0 20  // .t.G&.......... 
    8540: EE 9D C3 2E 8E 1E 0A 03 8A 26 49 04 E8 F2 F4 74  // .........&I....t
    8550: 0A 80 FC 07 77 06 74 03 E8 C0 F5 C3 80 FC 13 7C  // ....w.t........|
    8560: 03 74 4C C3 8A D8 E8 BB F7 BA CE 03 B0 08 EF 2E  // .tL.............
    8570: 8E 1E 0C 03 F6 C3 80 75 1C B2 C4 B8 02 FF EF 8A  // .......u........
    8580: 25 C6 05 00 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE  // %.......%...%...
    8590: B8 08 FF EF C3 B8 03 18 EF B2 C4 B0 02 8A E3 EF  // ................
    85A0: 8A 25 B4 FF 88 25 EF B2 CE B8 03 00 EF EB E1 50  // .%...%.........P
    85B0: 2E 8E 06 0C 03 A1 4A 04 C1 E0 03 F7 E2 03 C1 8B  // ......J.........
    85C0: F8 58 26 88 05 C3 2E 8E 1E 0A 03 8A 26 49 04 E8  // .X&.........&I..
    85D0: 6F F4 74 0F 80 FC 07 77 0B 74 08 E8 5F F5 8B EC  // o.t....w.t.._...
    85E0: 89 46 1A C3 80 FC 13 7C 03 74 29 C3 E8 35 F7 8A  // .F.....|.t)..5..
    85F0: CC 2E 8E 1E 0C 03 BA CE 03 32 FF B8 04 03 EF D0  // .........2......
    8600: E7 8A 1D 22 D9 74 03 80 CF 01 FE CC 7D F0 8B EC  // ...".t......}...
    8610: 88 7E 1A C3 A1 4A 04 C1 E0 03 F7 E2 03 C1 8B F8  // .~...J..........
    8620: 2E 8E 1E 0C 03 8A 05 8B EC 88 46 1A C3 2E 8E 1E  // ..........F.....
    8630: 0A 03 8A 3E 62 04 8A CF D0 E1 32 ED BE 50 04 03  // ...>b.....2..P..
    8640: F1 8B 14 8A 0E 49 04 3C 0D 76 4A 2E 8E 06 10 03  // .....I.<.vJ.....
    8650: E8 EE F3 75 33 8A 1E 4A 04 8A F8 8A C6 F6 E3 8A  // ...u3..J........
    8660: CA 03 C8 D1 E1 03 0E 4E 04 8B F9 8A C7 AA D1 E9  // .......N........
    8670: 41 FE C2 38 DA 73 59 89 14 8B 16 63 04 B0 0E 8A  // A..8.sY....c....
    8680: E5 EF 8A E1 FE C0 EF C3 2E 8E 06 0E 03 80 F9 07  // ................
    8690: 74 C3 E9 83 00 75 04 32 D2 EB 0F 3C 0A 75 1D 3A  // t....u.2...<.u.:
    86A0: 36 84 04 75 03 E9 93 00 FE C6 89 14 E8 92 F3 75  // 6..u...........u
    86B0: 05 80 F9 07 7F 05 8B C2 E8 4C F6 C3 3C 07 75 04  // .........L..<.u.
    86C0: E8 F1 7E C3 3C 08 75 83 0A D2 74 DE FE CA EB DA  // ..~.<.u...t.....
    86D0: 32 FF 32 D2 2B CB 3A 36 84 04 74 06 FE C6 03 CB  // 2.2.+.:6..t.....
    86E0: EB 95 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A E1 FE  // ......c.........
    86F0: C0 EF 2B FB 2B FB 26 8A 65 02 50 8B 3E 4E 04 8B  // ..+.+.&.e.P.>N..
    8700: F3 D1 E6 03 F7 A0 84 04 F6 E3 8B C8 06 1F F3 A5  // ................
    8710: 8B CB 58 B0 20 F3 AB C3 B9 01 00 B4 0A E8 C2 C6  // ..X. ...........
    8720: FE C2 3A 16 4A 04 74 03 89 14 C3 32 FF 32 D2 89  // ..:.J.t....2.2..
    8730: 14 3A 36 84 04 74 2E FE C6 EB ED 89 14 2E 8E 06  // .:6..t..........
    8740: 10 03 E8 FC F2 74 0E 2E 8E 06 0E 03 80 F9 07 74  // .....t.........t
    8750: 04 32 FF EB 10 8B C2 E8 AD F5 8B F9 D1 E7 4F 8B  // .2............O.
    8760: 1E 4A 04 EB 91 33 C9 8A 36 84 04 8A 16 4A 04 FE  // .J...3..6....J..
    8770: CA B0 01 E9 70 F7 2E 8E 1E 0A 03 F6 06 87 04 08  // ....p...........
    8780: 74 03 CD 42 C3 E8 76 F6 8B EC C6 46 1B 00 C3 2E  // t..B..v....F....
    8790: 8E 1E 0A 03 8A DF 32 FF D1 E3 89 97 50 04 D0 EB  // ......2.....P...
    87A0: 38 1E 62 04 75 05 8B C2 E8 5C F5 C3 2E 8E 1E 0A  // 8.b.u....\......
    87B0: 03 8A DF 32 FF D1 E3 8B 97 50 04 8B 0E 60 04 8B  // ...2.....P...`..
    87C0: EC 89 4E 16 89 56 12 C3 2E 8E 1E 0A 03 A0 87 04  // ..N..V..........
    87D0: 24 80 0A 06 49 04 8A 26 4A 04 F6 06 87 04 08 75  // $...I..&J......u
    87E0: 2D E8 5D F2 74 07 80 3E 49 04 07 7F 21 51 8A CC  // -.].t..>I...!Q..
    87F0: 8A 2E 84 04 BE B9 87 81 FE C2 87 74 10 2E 3B 0C  // ...........t..;.
    8800: 74 05 83 C6 03 EB F0 24 80 2E 0A 44 02 59 8A 3E  // t......$...D.Y.>
    8810: 62 04 8B EC 89 46 1A 89 5E 0E 89 4E 16 89 56 12  // b....F..^..N..V.
    8820: C3 84 18 23 84 2B 33 84 2A 32 2E 8E 1E 0A 03 3C  // ...#.+3.*2.....<
    8830: 04 7F 1B 50 52 BA CC 03 EC A8 01 5A 58 74 08 80  // ...PR......ZXt..
    8840: 3E 63 04 D4 74 08 C3 80 3E 63 04 B4 75 F8 3C 1C  // >c..t...>c..u.<.
    8850: 73 F4 32 E4 8B E8 D1 E5 2E FF A6 F5 87 2D 88 4D  // s.2..........-.M
    8860: 88 5F 88 94 88 DE 87 DE 87 DE 87 B9 88 D1 88 D5  // ._..............
    8870: 88 DE 87 DE 87 DE 87 DE 87 DE 87 DE 87 03 89 DE  // ................
    8880: 87 07 89 22 89 DE 87 61 89 DE 87 6F 89 8A 89 91  // ..."...a...o....
    8890: 89 9D 89 C1 89 80 3E 49 04 13 74 15 E8 BF F4 8B  // ......>I..t.....
    88A0: C3 86 E0 E8 70 EF 0B ED 74 07 8A C7 32 FF 26 88  // ....p...t...2.&.
    88B0: 01 E8 93 F4 C3 E8 A6 F4 8A C7 E8 44 FC 0B ED 74  // ...........D...t
    88C0: F0 26 88 7D 11 EB EA 80 3E 49 04 13 74 E3 06 E8  // .&.}....>I..t...
    88D0: 8C F4 1F 0B ED 74 07 8B F2 B9 11 00 F3 A4 8B F2  // .....t..........
    88E0: E8 DE 01 32 E4 B9 10 00 B2 C0 9C FA 8A C4 EE AC  // ...2............
    88F0: EE 9D FE C4 E2 F4 AC E8 07 FC EB B5 80 FB 01 77  // ...............w
    8900: B0 E8 43 F4 B2 C0 B0 30 E8 FB F0 24 F7 80 26 65  // ..C....0...$..&e
    8910: 04 DF 80 FB 00 74 07 0C 08 80 0E 65 04 20 EE EB  // .....t.....e. ..
    8920: 90 E8 9D 01 8A C3 B2 C0 E8 DB F0 8B C8 EE B0 20  // ............... 
    8930: EE 8B EC 88 4E 0F E9 78 FF B3 11 EB E4 8B FA E8  // ....N..x........
    8940: 05 F4 B9 10 00 32 E4 B2 C0 8A C4 9C FA EE 42 EC  // .....2........B.
    8950: 26 88 05 FE C4 4A EE 9D 47 E2 EE 9C FA B0 11 EE  // &....J..G.......
    8960: 42 EC 9D 26 88 05 E8 E3 F3 EB 5A E8 CE 00 C3 8B  // B..&......Z.....
    8970: FA 51 8B C3 26 8A 35 26 8A 6D 01 26 8A 4D 02 E8  // .Q..&.5&.m.&.M..
    8980: CA 00 83 C7 03 43 59 E2 E8 C3 0A DB 75 1A E8 B6  // .....CY.....u...
    8990: F3 B2 C0 B0 30 E8 6E F0 24 7F F6 C7 01 74 02 0C  // ....0.n.$....t..
    89A0: 80 B4 30 E8 70 EE EB 1D FE CB 75 1C E8 98 F3 B2  // ..0.p.....u.....
    89B0: C0 B0 30 E8 50 F0 EE A8 80 75 03 C0 E7 02 B4 34  // ..0.P....u.....4
    89C0: 8A C7 E8 51 EE E8 7F F3 C3 8A C3 E8 D1 00 8B EC  // ...Q............
    89D0: 89 4E 16 88 76 13 C3 8B FA 51 8B C3 E8 C3 00 26  // .N..v....Q.....&
    89E0: 88 35 26 88 6D 01 26 88 4D 02 83 C7 03 43 59 E2  // .5&.m.&.M....CY.
    89F0: E8 C3 BA C6 03 8A C3 EE C3 BA C6 03 EC 32 E4 8B  // .............2..
    8A00: EC 89 46 0E C3 E8 3F F3 B2 C0 B0 34 E8 F7 EF 8A  // ..F...?....4....
    8A10: F8 EE B0 30 E8 EF EF B3 01 A8 80 75 05 B3 00 C0  // ...0.......u....
    8A20: EF 02 8B EC 89 5E 0E EB 9C 51 8B C3 E8 73 00 E8  // .....^...Q...s..
    8A30: 2A 00 8A C3 E8 52 00 43 59 E2 EE C3 F6 06 89 04  // *....R.CY.......
    8A40: 02 74 03 E8 16 00 8A C3 E8 39 00 C3 F6 06 89 04  // .t.......9......
    8A50: 02 74 03 E8 06 00 8A C3 E8 2E 00 C3 50 B0 1E F6  // .t..........P...
    8A60: E6 50 B0 3B F6 E5 50 B0 0B F6 E1 59 03 C1 59 03  // .P.;..P....Y..Y.
    8A70: C1 B1 64 F6 F1 80 FC 32 7C 02 FE C0 8A F0 8A E8  // ..d....2|.......
    8A80: 8A C8 58 C3 52 E8 39 00 5A 53 8B DA BA C8 03 9C  // ..X.R.9.ZS......
    8A90: FA EE 42 8A C7 EE 8A C5 EE 8A C1 EE 9D 5B C3 E8  // ..B..........[..
    8AA0: 1F 00 53 9C FA BA C7 03 EE 42 42 EC 8A F8 EB 00  // ..S......BB.....
    8AB0: EB 00 EC 8A E8 EB 00 EB 00 EC 8A C8 8A F7 9D 5B  // ...............[
    8AC0: C3 50 51 E8 81 F2 B9 FF 7F EC A8 08 75 02 E2 F9  // .PQ.........u...
    8AD0: 59 58 C3 2E 8E 1E 0A 03 8B F8 24 0F 81 E7 F0 00  // YX........$.....
    8AE0: C1 EF 03 83 FF 06 7F 18 2E FF A5 85 8A 8D 8A A2  // ................
    8AF0: 8A 40 8B 9C 8B 3C 03 74 08 3C 04 7F 03 E8 CF 01  // .@...<.t.<......
    8B00: C3 BA C4 03 B0 03 8A E3 EF C3 3C 04 77 F2 50 53  // ..........<.w.PS
    8B10: 50 52 8B 16 63 04 B0 07 E8 EB EE 8A E0 D0 EC 80  // PR..c...........
    8B20: E4 01 A8 40 74 03 80 CC 02 B0 12 E8 D8 EE 40 A3  // ...@t.........@.
    8B30: 85 04 B0 09 E8 CF EE A8 80 74 04 D1 2E 85 04 A1  // .........t......
    8B40: 85 04 8B D0 3D F4 01 73 1B BA E0 01 3D C2 01 73  // ....=..s....=..s
    8B50: 13 BA 90 01 3D 7C 01 73 0B BA 5E 01 3D 4A 01 73  // ....=|.s..^.=J.s
    8B60: 03 BA C8 00 89 16 85 04 5A 58 C6 06 84 04 FF E8  // ........ZX......
    8B70: 5D 01 5B 58 8A DF 32 FF 0A C0 74 0E B3 0E 3C 01  // ].[X..2...t...<.
    8B80: 74 08 B3 08 3C 02 74 02 B3 10 8A CB 8A E9 81 E9  // t...<.t.........
    8B90: 01 02 80 F9 08 7E 04 81 E9 01 01 87 1E 85 04 53  // .....~.........S
    8BA0: E8 5B F2 5B E8 85 02 C3 0A C0 74 11 FE C8 74 1A  // .[.[......t...t.
    8BB0: FE C8 74 38 FE C8 74 3C FE C8 74 40 C3 89 2E 7C  // ..t8..t<..t@...|
    8BC0: 00 8C 06 7E 00 C3 8C C8 8E C0 FE CA 0A DB 74 07  // ...~..........t.
    8BD0: 32 FF 2E 8A 97 80 8B 89 0E 85 04 88 16 84 04 89  // 2...............
    8BE0: 2E 0C 01 8C 06 0E 01 C3 00 0D 18 2A E8 09 03 B9  // ...........*....
    8BF0: 0E 00 EB D6 BD 90 5A B9 08 00 EB CA BD A3 62 B9  // ......Z.......b.
    8C00: 10 00 EB C2 0A C0 75 BD 8B 0E 85 04 8A 16 84 04  // ......u.........
    8C10: 80 FF 07 77 35 80 FF 01 77 10 0A FF 75 06 C4 2E  // ...w5...w...u...
    8C20: 7C 00 EB 26 C4 2E 0C 01 EB 20 80 FF 02 75 0B 8C  // |..&..... ...u..
    8C30: CD 8E C5 2E 8B 2E 82 73 EB 10 0E 07 8A DF 32 FF  // .......s......2.
    8C40: 80 EB 02 D1 E3 2E 8B AF F3 8B 8B C5 8B EC 89 4E  // ...............N
    8C50: 16 89 56 12 89 46 0A 8C 46 1E C3 A3 62 90 5A 90  // ..V..F..F...b.Z.
    8C60: 5E 90 62 A3 62 A3 72 53 06 8A 26 49 04 E8 CD C3  // ^.b.b.rS..&I....
    8C70: 26 8A 47 02 26 8A 67 33 F6 C4 01 74 22 BD A3 62  // &.G.&.g3...t"..b
    8C80: 3C 10 7D 0E E8 71 02 8C 06 0E 01 3C 0E 7D 07 BD  // <.}..q.....<.}..
    8C90: 90 5A 8C 0E 0E 01 89 2E 0C 01 E8 10 01 EB 2D B4  // .Z............-.
    8CA0: 84 3C 10 7D 13 B4 81 3C 0E 74 0D 7F 15 B4 02 3C  // .<.}...<.t.....<
    8CB0: 08 74 05 80 CC 80 EB 0A 26 F6 47 05 01 74 03 80  // .t......&.G..t..
    8CC0: E4 7F 86 C4 32 DB E8 06 00 E8 C9 01 07 5B C3 8B  // ....2........[..
    8CD0: F8 8B F2 BA CE 03 EC B8 05 00 EF B8 06 04 EF B2  // ................
    8CE0: C4 EC B8 02 04 EF B8 04 07 EF 8B D6 8B C7 50 24  // ..............P$
    8CF0: 7F 0A C0 74 22 0E 07 33 D2 B9 00 01 3C 04 75 07  // ...t"..3....<.u.
    8D00: B7 10 BD A3 62 EB 10 FE C8 75 07 B7 0E E8 E8 01  // ....b....u......
    8D10: EB 05 B7 08 BD 90 5A E8 2D 00 58 A8 80 74 00 BA  // ......Z.-.X..t..
    8D20: C4 03 B8 02 03 EF B8 04 02 EF B2 CC EC A8 01 B8  // ................
    8D30: 06 0E 75 02 B4 0A B2 CE 50 EC 58 EF B0 04 EE 32  // ..u.....P.X....2
    8D40: C0 EE B8 05 10 EF C3 FC 0B C9 75 01 C3 80 FF 0E  // ..........u.....
    8D50: 75 0A 26 83 7E FE 10 75 03 80 CD 80 1E 06 1F 2E  // u.&.~..u........
    8D60: 8E 06 0C 03 8B FA C1 E7 05 B0 40 53 80 E3 03 F6  // ..........@S....
    8D70: E3 5B F6 C3 04 74 02 04 20 86 E0 8B D0 03 FA 8B  // .[...t.. .......
    8D80: F5 E3 28 32 C0 86 FB 32 FF 51 F6 C5 80 74 01 46  // ..(2...2.Q...t.F
    8D90: 8B CB F3 A4 83 FB 20 74 07 B9 20 00 2B CB F3 AA  // ...... t.. .+...
    8DA0: 59 F6 C5 80 74 01 46 FE C9 75 DE 1F C3 8A 26 49  // Y...t.F..u....&I
    8DB0: 04 50 06 57 C4 3E A8 04 26 C4 7D 0C 8C C5 0B EF  // .P.W.>..&.}.....
    8DC0: 74 30 8B EF 83 C7 07 26 8A 05 3C FF 74 24 38 E0  // t0.....&..<.t$8.
    8DD0: 74 03 47 EB F2 8B FD 26 8A 05 FE C8 A2 84 04 26  // t.G....&.......&
    8DE0: 8B 45 01 A3 85 04 26 C4 7D 03 89 3E 0C 01 8C 06  // .E....&.}..>....
    8DF0: 0E 01 5F 07 58 C3 26 F6 47 33 01 74 01 C3 C4 1E  // .._.X.&.G3.t....
    8E00: A8 04 26 C4 5F 08 8C C0 0B C3 74 1F BF 0B 00 26  // ..&._.....t....&
    8E10: 8A 01 3C FF 74 15 47 38 06 49 04 75 F2 26 8A 07  // ..<.t.G8.I.u.&..
    8E20: 32 E4 87 06 85 04 8B D8 E8 01 00 C3 8B 16 63 04  // 2.............c.
    8E30: 8A 26 85 04 FE CC 80 E4 1F 9C FA 80 FA D4 74 0B  // .&............t.
    8E40: B0 14 EE 42 EC 24 E0 0A C4 EE 4A B0 09 EE 42 EC  // ...B.$....J...B.
    8E50: 24 E0 0A C4 EE 9D 8A C8 8B C3 8A 16 85 04 F6 F2  // $...............
    8E60: 80 3E 84 04 FF 75 07 A2 84 04 FE 0E 84 04 F6 E2  // .>...u..........
    8E70: F6 C1 80 74 02 D1 E0 48 8A E0 B0 12 8B 16 63 04  // ...t...H......c.
    8E80: EF A0 4A 04 8A 26 84 04 FE C4 F6 E4 D1 E0 05 00  // ..J..&..........
    8E90: 01 A3 4C 04 C3 8A 26 49 04 50 06 57 C4 3E A8 04  // ..L...&I.P.W.>..
    8EA0: 26 C4 7D 08 8C C5 0B EF 74 4A 8B EF 83 C7 0B 26  // &.}.....tJ.....&
    8EB0: 8A 05 3C FF 74 3E 38 E0 74 03 47 EB F2 8B FD 26  // ..<.t>8.t.G....&
    8EC0: 8A 3D 26 8A 5D 01 26 8B 4D 02 26 8B 55 04 26 8A  // .=&.].&.M.&.U.&.
    8ED0: 45 0A 3C FF 74 02 FE C8 50 A0 84 04 FE C0 F6 26  // E.<.t...P......&
    8EE0: 85 04 A3 85 04 58 A2 84 04 26 C4 7D 06 8B EF 32  // .....X...&.}...2
    8EF0: C0 E8 DB FD 5F 07 58 C3 50 53 51 52 2E A1 14 03  // ...._.X.PSQR....
    8F00: 0B C0 74 09 2E 8B 2E 82 73 0E 07 EB 08 B8 30 11  // ..t.....s.....0.
    8F10: B7 02 E8 CD BE 5A 59 5B 58 C3 3C 04 7C 01 C3 E3  // .....ZY[X.<.|...
    8F20: FD 53 2E 8E 1E 0A 03 86 FB 32 FF D1 E3 8B FB 81  // .S.......2......
    8F30: C7 50 04 8B 35 5B 89 15 56 8B F0 51 53 26 8A 46  // .P..5[..V..QS&.F
    8F40: 00 45 3C 0D 7F 1F 75 04 32 D2 EB 40 3C 0A 74 32  // .E<...u.2..@<.t2
    8F50: 3C 07 75 05 E8 5D 76 EB 62 3C 08 75 08 0A D2 74  // <.u..]v.b<.u...t
    8F60: 5A FE CA EB 27 F7 C6 02 00 74 05 26 8A 5E 00 45  // Z...'....t.&.^.E
    8F70: B9 01 00 B4 09 E8 6A BE FE C2 3A 16 4A 04 72 0C  // ......j...:.J.r.
    8F80: 32 D2 89 15 3A 36 84 04 73 06 FE C6 89 15 EB 2B  // 2...:6..s......+
    8F90: 50 E8 AD EA 75 08 B8 00 08 E8 46 BE EB 09 80 3E  // P...u.....F....>
    8FA0: 49 04 07 74 F1 32 E4 86 3E 62 04 53 8A FC 55 E8  // I..t.2..>b.S..U.
    8FB0: 25 00 5D 5B 86 3E 62 04 58 8B 15 5B 59 E2 15 5A  // %.][.>b.X..[Y..Z
    8FC0: F7 C6 01 00 75 02 89 15 8B 05 3A 3E 62 04 75 03  // ....u.....:>b.u.
    8FD0: E8 34 ED C3 E9 64 FF 33 C9 8A 36 84 04 8A 16 4A  // .4...d.3..6....J
    8FE0: 04 FE CA B8 01 06 E8 F9 BD C3 2E 8E 1E 0A 03 0A  // ................
    8FF0: C0 75 0D E8 18 00 8B EC 89 5E 0E C6 46 1A 1A C3  // .u.......^..F...
    9000: 3C 01 75 09 E8 41 00 8B EC C6 46 1A 1A C3 A0 8A  // <.u..A....F.....
    9010: 04 BF 80 90 2E 3A 05 72 04 BB FF FF C3 32 E4 D1  // .....:.r.....2..
    9020: E0 03 F8 2E 8B 5D 04 0A DB 74 05 0A FF 75 04 C3  // .....]...t...u..
    9030: 86 FB C3 A0 10 04 24 30 3C 30 74 06 F6 C3 01 75  // ......$0<0t....u
    9040: EF C3 F6 C3 01 74 E9 C3 BF 80 90 2E 8A 0D 32 C0  // .....t........2.
    9050: 83 C7 04 2E 3B 1D 74 12 86 FB 2E 3B 1D 74 0B 83  // ....;.t....;.t..
    9060: C7 02 FE C0 38 C8 7E EB B0 FF A2 8A 04 C3 BB 08  // ....8.~.........
    9070: 00 F6 06 89 04 02 74 0E BB 07 00 BA CC 03 EC A8  // ......t.........
    9080: 01 74 18 BB 08 00 BA B4 03 E8 DF EC 74 21 B7 01  // .t..........t!..
    9090: E8 8C E9 80 FA D4 74 17 86 FB C3 BA D4 03 E8 CA  // ......t.........
    90A0: EC 74 0C B7 02 E8 77 E9 80 FA B4 74 02 86 FB C3  // .t....w....t....
    90B0: 0F 08 0F 08 0F 08 0F 08 03 01 03 01 01 01 00 08  // ................
    90C0: 01 01 01 01 01 01 01 01 0F 01 0F 08 0F 04 00 02  // ................
    90D0: 0F 02 01 01 0F 01 FF 01 FF E0 0F 00 00 00 00 07  // ................
    90E0: 02 08 FF 0E 00 00 3F 00 10 01 08 00 00 00 00 01  // ......?.........
    90F0: 00 02 02 01 00 04 04 01 00 05 02 05 00 06 01 06  // ................
    9100: 05 06 00 08 01 08 00 07 02 07 06 07 CA 00 34 00  // ..............4.
    9110: 90 00 96 00 00 00 00 00 00 00 5F 57 C3 90 50 66  // .........._W..Pf
    9120: 52 E8 F4 FF FF FF 81 EF 10 00 00 00 2E 8B 07 66  // R..............f
    9130: BA F8 0C EF 66 BA FC 0C ED 32 C0 66 8B F8 66 5A  // ....f....2.f..fZ
    9140: 58 C3 66 B8 4F 03 66 52 66 56 53 57 50 0A FF 75  // X.f.O.fRfVSWP..u
    9150: 44 E8 C8 FF FF FF 66 33 F6 66 BB 53 00 E8 48 00  // D.....f3.f.S..H.
    9160: 00 00 C1 E8 10 F6 C4 40 75 2B 66 81 E2 FF 02 66  // .......@u+f....f
    9170: D1 E2 66 8B C2 66 40 C1 E0 10 66 8B C2 66 BB 13  // ..f..f@...f..f..
    9180: 00 E8 30 00 00 00 66 BB 12 00 E8 27 00 00 00 66  // ..0...f....'...f
    9190: 58 32 E4 66 50 58 5F 5B 66 5E 66 5A C3 90 66 B8  // X2.fPX_[f^fZ..f.
    91A0: 4F 03 C3 90 66 B8 4F 03 C3 90 66 52 E8 11 00 00  // O...f.O...fR....
    91B0: 00 ED 66 5A C3 90 66 52 E8 05 00 00 00 EF 66 5A  // ..fZ..fR......fZ
    91C0: C3 90 66 8B D7 50 33 C0 66 8B C3 66 03 C6 C1 E0  // ..f..P3.f..f....
    91D0: 02 EF 66 83 C2 04 58 C3 8E 39 81 39 81 39 81 39  // ..f...X..9.9.9.9
    91E0: 6C 39 6C 39 6C 39 6C 39 AE 35 25 36 4F 36 90 37  // l9l9l9l9.5%6O6.7
    91F0: 8F 37 8F 37 D5 37 3A 38 6A 38 27 39 50 39 50 39  // .7.7.7:8j8'9P9P9
    9200: C7 37 BA 37 BA 37 BA 37 BA 37 BA 37 D5 37 3A 38  // .7.7.7.7.7.7.7:8
    9210: 6A 38 27 39 55 39 9B 39 50 39 50 39 FF FF FF FF  // j8'9U9.9P9P9....
    9220: FF FF 00 00 FF FF 00 00 FF FF 00 00 FF 00 00 00  // ................
    9230: FF 00 00 00 FF 00 00 00 FF 00 00 00 00 00 08 10  // ................
    9240: 00 08 10 18 00 08 10 18 B2 33 01 B2 33 02 C0 47  // .........3..3..G
    9250: 03 A0 47 03 D7 34 03 8B 34 03 B3 33 04 CC 33 04  // ..G..4..4..3..3.
    9260: DC 33 04 B2 33 03 00 00 00 00 5F 3B 00 02 5F 3B  // .3..3....._;.._;
    9270: 01 02 5F 3B 02 02 5F 3B 03 02 5F 3B 04 02 5F 3B  // .._;.._;.._;.._;
    9280: 05 02 59 3D 00 02 59 3D 01 02 59 3D 02 02 59 3D  // ..Y=..Y=..Y=..Y=
    9290: 03 02 59 3D 04 02 59 3D 05 02 8E 3D 00 02 8E 3D  // ..Y=..Y=...=...=
    92A0: 01 02 8E 3D 02 02 8E 3D 03 02 8E 3D 04 02 8E 3D  // ...=...=...=...=
    92B0: 05 02 C9 3F 00 02 C9 3F 01 02 C9 3F 02 02 C9 3F  // ...?...?...?...?
    92C0: 03 02 C9 3F 04 02 C9 3F 05 02 C9 3F 00 02 C9 3F  // ...?...?...?...?
    92D0: 01 02 C9 3F 02 02 C9 3F 03 02 C9 3F 04 02 C9 3F  // ...?...?...?...?
    92E0: 05 02 90 3E 00 02 90 3E 01 02 90 3E 02 02 90 3E  // ...>...>...>...>
    92F0: 03 02 90 3E 04 02 90 3E 05 02 CC 3E 00 02 CC 3E  // ...>...>...>...>
    9300: 01 02 CC 3E 02 02 CC 3E 03 02 CC 3E 04 02 CC 3E  // ...>...>...>...>
    9310: 05 02 3D 3E 00 02 3D 3E 01 02 3D 3E 02 02 3D 3E  // ..=>..=>..=>..=>
    9320: 03 02 3D 3E 04 02 3D 3E 05 02 71 3E 00 02 71 3E  // ..=>..=>..q>..q>
    9330: 01 02 71 3E 02 02 71 3E 03 02 71 3E 04 02 71 3E  // ..q>..q>..q>..q>
    9340: 05 02 21 42 00 00 54 42 01 00 54 42 02 00 41 42  // ..!B..TB..TB..AB
    9350: 00 00 2F 41 00 02 28 3F 00 02 28 3F 01 02 28 3F  // ../A..(?..(?..(?
    9360: 02 02 28 3F 03 02 28 3F 04 02 28 3F 05 02 47 41  // ..(?..(?..(?..GA
    9370: 00 02 9C 43 05 00 9C 43 01 00 9C 43 00 00 9C 43  // ...C...C...C...C
    9380: 02 00 DD 43 00 00 DD 43 02 00 22 44 00 00 B2 40  // ...C...C.."D...@
    9390: 00 02 B2 40 01 02 B2 40 02 02 B2 40 03 02 B2 40  // ...@...@...@...@
    93A0: 04 02 B2 40 05 02 6E 42 00 00 96 42 00 00 17 43  // ...@..nB...B...C
    93B0: 00 00 92 43 00 00 76 3F 00 02 76 3F 01 02 76 3F  // ...C..v?..v?..v?
    93C0: 02 02 76 3F 03 02 76 3F 04 02 76 3F 05 02 91 43  // ..v?..v?..v?...C
    93D0: 00 01 91 43 00 01 95 3C 00 02 95 3C 01 02 95 3C  // ...C...<...<...<
    93E0: 02 02 95 3C 03 02 95 3C 04 02 95 3C 05 02 B6 42  // ...<...<...<...B
    93F0: 00 00 92 43 00 00 92 43 00 00 92 43 00 00 C7 41  // ...C...C...C...A
    9400: 00 00 B9 3D 00 02 B9 3D 01 02 B9 3D 02 02 B9 3D  // ...=...=...=...=
    9410: 03 02 B9 3D 04 02 B9 3D 05 02 E8 3D 00 02 E8 3D  // ...=...=...=...=
    9420: 01 02 E8 3D 02 02 E8 3D 03 02 E8 3D 04 02 E8 3D  // ...=...=...=...=
    9430: 05 02 1E 3E 00 02 1E 3E 01 02 1E 3E 02 02 1E 3E  // ...>...>...>...>
    9440: 03 02 1E 3E 04 02 1E 3E 05 02 D9 42 00 00 FC 42  // ...>...>...B...B
    9450: 00 00 BA 3E 01 02 BA 3E 02 02 16 3F 01 02 16 3F  // ...>...>...?...?
    9460: 02 02 A6 00 02 01 EA 94 00 00 00 00 00 00 52 AE  // ..............R.
    9470: 00 00 B6 96 00 00 00 00 24 98 00 00 00 00 EE 98  // ........$.......
    9480: 06 9D 00 00 00 00 00 00 00 00 00 00 02 97 DC A1  // ................
    9490: 56 97 00 00 A8 97 00 00 00 00 00 00 00 00 00 00  // V...............
    94A0: 00 00 00 00 00 00 00 00 88 A2 FA A2 6E A3 00 00  // ............n...
    94B0: B2 A3 00 00 00 A7 00 00 82 A4 40 A6 CC A7 2A A9  // ..........@...*.
    94C0: 6C A9 DE C6 00 00 00 00 80 A9 46 AB DE C4 00 00  // l.........F.....
    94D0: 40 C6 50 AB 00 00 1C AD 00 00 00 00 00 00 62 AD  // @.P...........b.
    94E0: 4A AE 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // J...............
    94F0: 00 00 00 00 00 00 00 00 00 00 00 00 66 C8 66 B1  // ............f.f.
    9500: 72 B2 68 C2 84 C4 00 00 4A 00 02 01 00 00 00 00  // r.h.....J.......
    9510: 00 00 4C C9 A0 CA E8 CA EC CD 86 D4 8C D6 00 00  // ..L.............
    9520: 00 00 48 CE 54 D2 A8 D2 A8 D6 44 D3 00 00 48 D3  // ..H.T.....D...H.
    9530: 00 00 00 00 00 00 00 00 5C D3 48 D4 00 00 00 00  // ........\.H.....
    9540: 00 00 4E D4 00 00 00 00 54 CE 00 00 00 00 00 00  // ..N.....T.......
    9550: 00 00 CC 01 02 01 00 08 37 00 00 02 00 00 E3 0D  // ........7.......
    9560: 01 05 80 29 00 F4 00 00 01 05 53 39 00 F4 00 00  // ...)......S9....
    9570: 01 05 00 00 2C A8 01 00 01 05 01 00 00 F4 00 00  // ....,...........
    9580: 1A 05 00 04 2C 05 00 FF F3 00 00 01 01 81 29 00  // ....,.........).
    9590: 01 01 54 39 00 01 05 00 00 2D A8 01 00 01 01 01  // ..T9.....-......
    95A0: 00 00 01 05 85 29 00 00 3D 00 01 05 F7 3A 00 00  // .....)..=....:..
    95B0: 3D 00 01 05 00 00 31 A8 01 00 01 05 01 00 00 00  // =.....1.........
    95C0: 3D 00 14 05 00 06 0E 0D 00 3F 00 2C 05 00 01 00  // =........?.,....
    95D0: 00 00 01 01 86 29 00 01 01 F8 3A 00 01 05 00 00  // .....)....:.....
    95E0: 32 A8 01 00 01 01 01 00 00 01 05 50 28 EB 0F E4  // 2..........P(...
    95F0: 60 01 05 00 00 90 A6 01 00 01 05 01 00 EB 0F E4  // `...............
    9600: 60 01 05 6E 29 00 00 00 00 01 05 00 00 1A A8 01  // `..n)...........
    9610: 00 01 05 01 00 00 00 00 00 01 05 72 29 FF FF 0F  // ...........r)...
    9620: 00 01 05 00 00 1E A8 01 00 01 05 01 00 FF FF 0F  // ................
    9630: 00 01 05 00 00 10 A8 01 00 01 00 64 29 01 00 01  // ...........d)...
    9640: 05 00 00 11 A8 01 00 01 00 65 29 01 00 01 05 00  // .........e).....
    9650: 00 12 A8 01 00 01 00 66 29 01 00 01 05 00 00 13  // .......f).......
    9660: A8 01 00 01 00 67 29 01 00 01 05 00 00 14 A8 01  // .....g).........
    9670: 00 01 00 68 29 01 00 01 05 00 00 15 A8 01 00 01  // ...h)...........
    9680: 00 69 29 01 00 01 05 00 00 16 A8 01 00 01 00 6A  // .i)............j
    9690: 29 01 00 01 05 00 00 17 A8 01 00 01 00 6B 29 01  // )............k).
    96A0: 00 01 00 55 39 01 00 03 00 40 01 00 01 02 74 29  // ...U9....@....t)
    96B0: 40 01 02 59 39 40 01 05 00 00 20 A8 01 00 01 02  // @..Y9@.... .....
    96C0: 01 00 40 03 00 41 81 29 33 00 41 80 29 2D 02 40  // ..@..A.)3.A.)-.@
    96D0: 41 01 02 75 29 40 01 02 5A 39 40 01 05 00 00 21  // A..u)@..Z9@....!
    96E0: A8 01 00 01 02 01 00 40 01 05 00 00 1F A8 01 00  // .......@........
    96F0: 01 00 73 29 01 00 03 00 41 E3 0D 33 05 41 01 00  // ..s)....A..3.A..
    9700: 00 00 1B 05 41 0B 01 02 06 00 41 0D 25 1F 0E 03  // ....A.....A.%...
    9710: 0D 25 22 0C 02 0D 05 53 00 00 02 00 00 5B 4B 00  // .%"....S.....[K.
    9720: 01 01 00 00 37 00 00 42 21 00 63 00 1F 00 63 01  // ....7..B!.c...c.
    9730: 39 00 63 03 3F 00 63 02 45 00 5A 5A 5B 03 05 40  // 9.c.?.c.E.ZZ[..@
    9740: 00 00 05 04 2D 19 40 00 15 05 40 02 01 02 0C 00  // ....-.@...@.....
    9750: 40 02 00 00 0D 00 5B 02 00 00 E3 0D 5B 02 00 00  // @.....[.....[...
    9760: E7 0D 5B 02 00 00 E8 0D 5B 00 54 00 01 02 00 00  // ..[.....[.T.....
    9770: 37 00 00 01 05 00 00 9B 62 01 00 54 00 01 00 01  // 7.......b..T....
    9780: 05 00 00 93 62 01 00 01 01 01 00 01 56 00 41 03  // ....b.......V.A.
    9790: 09 41 00 01 05 00 00 83 62 01 00 01 02 01 00 41  // .A......b......A
    97A0: 01 05 00 00 9B 62 01 00 3C 25 01 00 00 44 36 00  // .....b..<%...D6.
    97B0: 01 05 00 00 93 62 01 00 02 00 01 01 00 5B 52 00  // .....b.......[R.
    97C0: 02 01 08 08 37 00 00 3D 25 00 00 44 14 00 55 38  // ....7..=%..D..U8
    97D0: 00 5B 01 05 00 00 61 60 01 00 3C E5 01 00 FF 44  // .[....a`..<....D
    97E0: 10 00 4A E5 01 00 80 44 24 00 01 05 00 00 62 60  // ..J....D$.....b`
    97F0: 01 00 01 01 01 00 01 56 00 40 03 A9 40 00 01 05  // .......V.@..@...
    9800: 00 00 61 60 01 00 01 02 01 00 40 02 E5 00 01 5B  // ..a`......@....[
    9810: 7B 00 02 01 00 00 37 00 00 3D 65 00 01 44 7A 00  // {.....7..=e..Dz.
    9820: 56 00 40 03 21 40 00 21 25 40 DC 03 0A 48 40 01  // V.@.!@.!%@...H@.
    9830: 05 B6 3A 00 01 00 00 5C 05 2D 3B CF FF CF FF 20  // ..:....\.-;.... 
    9840: 00 10 00 5C 05 40 3B CF FF FF FF 20 00 00 00 01  // ...\.@;.... ....
    9850: 05 B7 3A 00 00 00 04 56 00 40 03 21 40 00 21 25  // ..:....V.@.!@.!%
    9860: 40 80 03 0A 48 40 5C 05 01 50 FF FC FF FF 00 03  // @...H@\..P......
    9870: 00 00 56 00 40 03 21 40 00 15 05 40 19 5C 02 50  // ..V.@.!@...@.\.P
    9880: 50 FF FF FF F1 40 3A 00 00 5B 5B 00 CA 00 02 01  // P....@:..[[.....
    9890: 04 04 37 00 00 66 0C 03 0C 41 00 00 2D 0A 41 42  // ..7..f...A..-.AB
    98A0: 2D 0D 42 04 00 3D 24 00 06 00 44 31 00 2D 0D 42  // -.B..=$...D1.-.B
    98B0: 08 00 3E 0A 42 41 45 19 00 55 20 00 5B 56 00 43  // ..>.BAE..U .[V.C
    98C0: 03 24 43 05 00 03 04 46 00 00 33 05 46 01 00 00  // .$C....F..3.F...
    98D0: 00 01 02 00 00 46 03 00 00 01 00 0D 02 01 00 44  // .....F.........D
    98E0: 2D 05 46 02 00 00 00 01 02 00 00 46 03 24 43 04  // -.F........F.$C.
    98F0: 00 4B E5 00 01 49 AA 00 07 02 01 00 45 2D 05 46  // .K...I......E-.F
    9900: 01 00 00 00 01 02 00 00 46 4A 02 01 00 44 44 90  // ........FJ...DD.
    9910: 00 03 29 43 00 0E A2 00 44 43 98 00 03 29 43 00  // ..)C....DC...)C.
    9920: 08 A2 00 45 33 05 46 03 00 00 00 01 02 00 00 46  // ...E3.F........F
    9930: 01 02 01 00 00 5B 0D 02 01 00 44 01 04 00 00 00  // .....[....D.....
    9940: 00 3D A5 00 01 44 C4 00 07 02 01 00 45 43 C9 00  // .=...D......EC..
    9950: 0D 02 01 00 44 5B 17 04 01 07 10 08 37 00 00 4A  // ....D[......7..J
    9960: 25 48 00 01 44 12 00 5B 3D 25 01 FF 44 F9 03 3D  // %H..D..[=%..D..=
    9970: 25 01 18 46 F5 03 3D 25 01 02 47 F5 03 3D 25 01  // %..F..=%..G..=%.
    9980: 14 45 F9 03 3D 05 00 00 00 00 00 44 06 02 66 1B  // .E..=......D..f.
    9990: 56 00 02 3D A5 01 02 49 4A 00 56 08 40 43 5C 00  // V..=...IJ.V.@C\.
    99A0: 3D A5 01 03 49 57 00 56 08 40 43 5C 00 03 0C 40  // =...IW.V.@C\...@
    99B0: 18 00 3E 0D 40 00 00 44 6B 00 03 0A 02 40 43 6F  // ..>.@..Dk....@Co
    99C0: 00 0E E5 01 80 4B E5 01 02 49 7D 00 02 A9 02 02  // .....K...I}.....
    99D0: 55 28 02 03 01 00 00 03 05 46 C0 5D 00 00 3D A5  // U(.......F.]..=.
    99E0: 01 00 44 96 00 03 05 46 80 BB 00 00 5C A5 0F 5E  // ..D....F....\..^
    99F0: F3 08 55 28 01 3E 05 00 40 4B 4C 00 47 B0 00 1B  // ..U(.>..@KL.G...
    9A00: 05 00 01 43 C5 00 2C 65 01 01 3E 05 00 A0 25 26  // ...C..,e..>...%&
    9A10: 00 48 C5 00 15 05 00 01 43 B0 00 14 2D 01 04 4B  // .H......C...-..K
    9A20: E5 01 80 49 F4 00 21 05 02 80 00 00 00 7C 02 40  // ...I..!......|.@
    9A30: 00 7E 02 40 46 7C 05 40 10 00 00 00 7E 05 40 35  // .~.@F|.@....~.@5
    9A40: 0C 00 00 03 02 02 40 43 F7 00 56 00 02 27 02 00  // ......@C..V..'..
    9A50: 46 21 05 41 00 00 01 00 27 02 40 46 03 0A 42 40  // F!.A....'.@F..B@
    9A60: 3E 05 41 00 00 00 00 49 1F 01 03 0D 40 01 00 56  // >.A....I....@..V
    9A70: 08 01 43 49 01 03 02 40 46 03 02 01 41 03 02 03  // ..CI...@F...A...
    9A80: 41 27 02 40 41 03 02 40 03 3E 05 41 00 00 00 00  // A'.@A..@.>.A....
    9A90: 49 27 01 27 02 01 03 03 0A 01 40 27 02 46 03 03  // I'.'......@'.F..
    9AA0: 0A 03 01 03 0A 01 40 03 8A 01 42 27 02 00 46 33  // ......@...B'..F3
    9AB0: 05 40 10 00 00 00 15 05 40 05 03 8A 03 40 66 FF  // .@......@....@f.
    9AC0: 2D 0D 42 03 04 56 00 40 03 21 40 01 33 25 40 14  // -.B..V.@.!@.3%@.
    9AD0: 15 25 40 01 2D 0A 42 40 03 0C 48 00 00 4A 25 06  // .%@.-.B@..H..J%.
    9AE0: 5E 04 44 2C 02 56 00 40 4B E5 01 30 44 A4 01 4A  // ^.D,.V.@K..0D..J
    9AF0: 25 F1 5D 01 44 E5 01 43 AC 01 4A 25 F1 5D 01 49  // %.].D..C..J%.].I
    9B00: E5 01 03 00 40 0B 5E 09 0D 40 F0 FF 3E 1A 40 03  // ....@.^..@..>.@.
    9B10: 49 E5 01 3C 02 07 5E 01 49 E5 01 3C 0A 0A 5E 03  // I..<..^.I..<..^.
    9B20: 49 E5 01 03 00 40 0C 5E 09 25 40 70 3E 29 40 01  // I....@.^.%@p>)@.
    9B30: 49 E5 01 3C 02 08 5E 02 44 E9 01 0E E5 01 01 3A  // I..<..^.D......:
    9B40: 00 00 4B E5 01 01 44 CD 03 4B E5 01 02 49 06 02  // ..K...D..K...I..
    9B50: 3D 25 02 03 46 06 02 55 28 02 52 23 3A 00 00 02  // =%..F..U(.R#:...
    9B60: 01 03 02 02 05 02 00 00 03 04 02 21 02 01 32 25  // ...........!..2%
    9B70: 02 14 52 4D 02 01 02 03 3D 05 00 00 00 00 00 44  // ..RM....=......D
    9B80: F5 03 3D A5 01 00 44 57 02 02 01 03 02 02 05 02  // ..=...DW........
    9B90: 00 0F 03 00 02 21 02 01 32 25 02 14 4B E5 01 30  // .....!..2%..K..0
    9BA0: 44 51 02 0E E5 02 01 52 4D 02 01 02 03 66 FF 2D  // DQ.....RM....f.-
    9BB0: 0D 42 03 04 56 00 40 03 21 40 01 33 25 40 14 15  // .B..V.@.!@.3%@..
    9BC0: 25 40 01 2D 0A 42 40 03 0C 48 00 00 03 05 40 00  // %@.-.B@..H....@.
    9BD0: 00 38 00 3E 05 00 C0 C6 2D 00 47 A9 02 5E A5 40  // .8.>....-.G..^.@
    9BE0: CF 20 3E 05 00 E0 67 35 00 47 A9 02 5E A5 40 CF  // . >...g5.G..^.@.
    9BF0: 10 3E 05 00 00 09 3D 00 47 A9 02 09 A5 40 CF 5C  // .>....=.G....@.\
    9C00: B2 0F 5E C3 40 3D A5 01 00 49 D1 02 5C 05 0F 5E  // ..^.@=...I..\..^
    9C10: FF FF 3F E0 00 00 40 10 5C 05 11 5E FF FF 7F C0  // ..?...@.\..^....
    9C20: 00 00 80 3F 43 E9 02 5C 05 0F 5E 3F E0 FF FF 00  // ...?C..\..^?....
    9C30: 00 00 10 5C 05 11 5E 7F C0 FF FF 00 00 00 3E 03  // ...\..^.......>.
    9C40: 05 40 00 00 14 1E 3D A5 01 00 49 0C 03 03 05 40  // .@....=...I....@
    9C50: 10 00 1C 24 3D 25 01 17 45 0C 03 03 05 40 00 00  // ...$=%..E....@..
    9C60: 1C 24 3D A5 01 00 44 1A 03 5C 9A 10 5E 03 00 40  // .$=...D..\..^..@
    9C70: 5C 1A 0B 5E 0F 00 03 5C A2 0B 5E 8F 40 56 00 40  // \..^...\..^.@V.@
    9C80: 03 29 40 01 0F 25 40 01 4B E5 01 80 49 3D 03 0F  // .)@..%@.K...I=..
    9C90: 65 40 01 5C 0A 0C 5E 8B FE 40 07 8D 0D 5E 0F E0  // e@.\..^..@...^..
    9CA0: 3E 8D 01 00 00 49 62 03 3E 0D 03 00 00 49 62 03  // >....Ib.>....Ib.
    9CB0: 07 E5 0E 5E FE 43 67 03 0D E5 0E 5E 01 4A E5 0E  // ...^.Cg....^.J..
    9CC0: 5E 01 49 7F 03 4A 65 0C 5E 01 49 7F 03 07 E5 0E  // ^.I..Je.^.I.....
    9CD0: 5E EF 43 84 03 0D E5 0E 5E 10 01 02 07 5E 01 01  // ^.C.....^....^..
    9CE0: 02 08 5E 02 7C 05 02 00 EC 04 00 7E 02 40 46 27  // ..^.|......~.@F'
    9CF0: 05 40 0A 00 00 00 01 02 09 5E 40 01 0A 0A 5E 03  // .@.......^@...^.
    9D00: 3A 00 00 3D A5 01 00 44 F5 03 03 01 00 02 02 05  // :..=...D........
    9D10: 02 00 01 03 04 02 21 02 01 32 25 02 14 52 4D 02  // ......!..2%..RM.
    9D20: 02 02 00 3A 00 00 3D 25 02 03 46 F5 03 02 25 03  // ...:..=%..F...%.
    9D30: 02 02 E1 03 02 02 61 03 01 02 B9 03 01 08 A5 03  // ......a.........
    9D40: 04 0E B1 03 02 02 01 02 00 52 2E 3A 00 00 5B 02  // .........R.:..[.
    9D50: 25 01 0B 43 CD 03 7A 14 00 00 00 D8 00 B0 01 88  // %..C..z.........
    9D60: 02 60 03 00 00 00 01 00 02 00 03 00 04 00 D6 04  // .`..............
    9D70: 02 01 04 04 37 00 00 42 29 00 63 07 1D 00 63 08  // ....7..B).c...c.
    9D80: 17 00 5A 5A 5B 0D 25 C8 39 02 5B 01 05 1F 35 FF  // ..ZZ[.%.9.[...5.
    9D90: FF FF FF 01 05 20 35 3F 00 00 00 01 05 3B 01 30  // ..... 5?.....;.0
    9DA0: 02 12 00 01 05 30 01 80 BB 10 00 01 05 31 01 3C  // .....0.......1.<
    9DB0: 00 01 08 01 05 34 01 00 00 00 00 01 05 3C 01 00  // .....4.......<..
    9DC0: 00 00 00 01 8D 83 38 30 00 01 25 82 38 01 01 25  // ......80..%.8..%
    9DD0: 32 01 00 01 05 42 35 00 00 00 00 01 05 40 35 00  // 2....B5......@5.
    9DE0: 00 00 00 01 05 46 35 00 00 00 00 01 05 44 35 00  // .....F5......D5.
    9DF0: 00 00 00 01 05 4A 35 00 00 00 00 01 05 48 35 00  // .....J5......H5.
    9E00: 00 00 00 01 05 4E 35 00 00 00 00 01 05 4C 35 00  // .....N5......L5.
    9E10: 00 00 00 01 05 61 35 00 00 00 00 01 05 63 35 00  // .....a5......c5.
    9E20: 00 00 00 01 05 65 35 00 00 00 00 01 05 72 35 01  // .....e5......r5.
    9E30: 00 00 00 01 05 DF 39 01 10 00 00 01 05 F4 39 01  // ......9.......9.
    9E40: 00 02 00 07 05 F0 39 FF FF FF 7F 07 05 EF 39 9F  // ......9.......9.
    9E50: FF FF FF 54 20 6D 91 01 05 B3 3A 01 00 00 00 01  // ...T m....:.....
    9E60: 05 8F 3B 11 00 00 00 01 05 6B 3C 21 00 00 00 01  // ..;......k<!....
    9E70: 05 47 3D 31 00 00 00 55 00 01 20 0D 01 DC 00 03  // .G=1...U.. .....
    9E80: 0A 48 40 01 05 B1 3A 00 1B 5D 05 01 05 06 3B 35  // .H@...:..]....;5
    9E90: 00 13 00 01 05 07 3B 36 11 00 00 01 05 08 3B 41  // ......;6......;A
    9EA0: E6 01 00 01 05 09 3B 00 00 00 00 01 05 0A 3B 00  // ......;.......;.
    9EB0: 00 08 2C 01 05 0C 3B 02 04 00 00 01 05 1F 3B 5E  // ..,...;.......;^
    9EC0: 4E 01 00 01 05 0A 3B 00 00 08 2C 01 05 0D 3B A4  // N.....;...,...;.
    9ED0: 01 00 00 01 05 0F 3B A4 01 00 00 01 05 14 3B 00  // ......;.......;.
    9EE0: 02 00 00 01 05 15 3B 49 D2 00 00 01 05 18 3B 20  // ......;I......; 
    9EF0: 00 00 00 01 05 19 3B 24 0D 00 00 01 05 1C 3B 00  // ......;$......;.
    9F00: 00 00 00 01 05 1D 3B 00 00 00 00 01 05 ED 3A 00  // ......;.......:.
    9F10: 00 92 06 01 05 EE 3A AA 08 00 E0 2C 05 01 01 00  // ......:....,....
    9F20: 00 00 3D 0D 01 04 00 45 0C 01 56 08 48 01 05 C9  // ..=....E..V.H...
    9F30: 39 FE 01 00 00 01 05 CB 39 BA 04 00 00 01 05 CC  // 9.......9.......
    9F40: 39 24 04 00 00 01 05 CD 39 A2 08 00 00 01 05 CE  // 9$......9.......
    9F50: 39 FE 01 00 00 01 05 D0 39 BA 04 00 00 01 05 D1  // 9.......9.......
    9F60: 39 24 04 00 00 01 05 D2 39 A2 08 00 00 01 05 D3  // 9$......9.......
    9F70: 39 FE 01 00 00 01 05 D5 39 BA 04 00 00 01 05 D6  // 9.......9.......
    9F80: 39 24 04 00 00 01 05 D7 39 A2 08 00 00 01 05 D8  // 9$......9.......
    9F90: 39 FE 01 00 00 01 05 DA 39 BA 04 00 00 01 05 DB  // 9.......9.......
    9FA0: 39 24 04 00 00 01 05 DC 39 A2 08 00 00 0D 25 C8  // 9$......9.....%.
    9FB0: 39 02 55 00 01 66 FF 2D 0D 42 CE 04 03 0C 48 00  // 9.U..f.-.B....H.
    9FC0: 00 0D 25 DA 41 01 20 0D 01 1B 00 03 0A 48 40 01  // ..%.A. ......H@.
    9FD0: 21 33 47 01 01 21 31 47 01 01 21 32 47 01 20 0D  // !3G..!1G..!2G. .
    9FE0: 01 04 00 03 0A 48 40 01 21 45 48 01 20 0D 01 10  // .....H@.!EH. ...
    9FF0: 00 03 0A 48 40 03 0D 40 00 F0 0F 61 40 01 01 6A  // ...H@..@...a@..j
    A000: 8B 4F 40 2C 0D 01 01 00 2D 0D 42 02 00 3D 25 01  // .O@,....-.B..=%.
    A010: 04 45 4E 02 56 08 48 55 00 01 52 17 2C 25 01 01  // .EN.V.HU..R.,%..
    A020: 3D 25 01 04 45 AC 02 02 05 01 01 02 00 00 52 29  // =%..E.........R)
    A030: 56 00 46 66 08 03 0C 46 0C 00 26 05 01 40 0D 03  // V.Ff...F..&..@..
    A040: 00 21 02 40 46 32 02 01 40 01 01 42 01 01 01 01  // .!.@F2..@..B....
    A050: 46 01 01 01 01 4A 01 01 01 01 4E 01 01 55 00 01  // F....J....N..U..
    A060: 52 4E 5C 05 63 53 FF FF FF 00 00 00 00 30 5C 05  // RN\.cS.......0\.
    A070: 65 53 FF FF FF 00 00 00 00 30 5C 05 67 53 FF FF  // eS.......0\.gS..
    A080: FF 00 00 00 00 30 5C 05 69 53 FF FF FF 00 00 00  // .....0\.iS......
    A090: 00 30 5C 05 6B 53 FF FF FF 00 00 00 00 30 01 05  // .0\.kS.......0..
    A0A0: DC 5D 22 22 02 00 01 05 DD 5D AA F2 01 00 01 05  // .]"".....]......
    A0B0: 31 55 11 00 01 00 01 05 31 56 11 00 01 00 01 05  // 1U......1V......
    A0C0: 31 57 11 00 01 00 01 05 31 58 11 00 01 00 01 05  // 1W......1X......
    A0D0: 31 59 11 00 01 00 01 05 9A 55 01 00 00 00 01 05  // 1Y.......U......
    A0E0: 9A 56 01 00 00 00 01 05 9A 57 01 00 00 00 01 05  // .V.......W......
    A0F0: 9A 58 01 00 00 00 01 05 9A 59 01 00 00 00 02 25  // .X.......Y.....%
    A100: 01 07 52 33 02 05 01 00 07 00 00 55 00 02 52 4D  // ..R3.......U..RM
    A110: 2C 25 01 01 3D 25 01 05 45 A0 03 66 16 03 A4 00  // ,%..=%..E..f....
    A120: 06 00 2D 0D 42 08 00 03 0A 00 42 3E A5 00 00 44  // ..-.B.....B>...D
    A130: 33 04 03 0A 42 00 03 0C 40 04 00 3E 0D 40 20 22  // 3...B...@..>.@ "
    A140: 44 DD 03 3E 0D 40 21 21 49 27 04 03 0C 40 08 00  // D..>.@!!I'...@..
    A150: 66 16 2D 0A 42 40 03 24 40 00 00 3E 25 40 FF 44  // f.-.B@.$@..>%@.D
    A160: 27 04 3E 25 40 14 49 1F 04 03 04 40 02 00 4C 05  // '.>%@.I....@..L.
    A170: 40 00 01 00 00 44 27 04 4A 25 48 00 01 49 33 04  // @....D'.J%H..I3.
    A180: 01 A5 7F 60 01 01 A5 57 61 01 43 33 04 2D 0C 42  // ...`...Wa.C3.-.B
    A190: 01 00 43 E8 03 2D 0D 00 10 00 33 A5 00 01 43 BD  // ..C..-....3...C.
    A1A0: 03 66 16 03 0C 41 04 00 4C 0D 41 02 00 44 47 04  // .f...A..L.A..DG.
    A1B0: 0D A5 4C 00 02 01 05 00 00 2C A8 01 00 01 00 53  // ..L......,.....S
    A1C0: 39 01 00 01 05 00 00 2D A8 01 00 01 00 54 39 01  // 9......-.....T9.
    A1D0: 00 01 05 00 00 17 A8 01 00 01 00 55 39 01 00 01  // ...........U9...
    A1E0: 05 00 00 31 A8 01 00 01 00 F7 3A 01 00 01 05 00  // ...1......:.....
    A1F0: 00 32 A8 01 00 01 00 F8 3A 01 00 01 05 00 00 20  // .2......:...... 
    A200: A8 01 00 01 00 59 39 01 00 01 05 00 00 21 A8 01  // .....Y9......!..
    A210: 00 01 00 5A 39 01 00 02 00 01 53 39 03 01 41 01  // ...Z9.....S9..A.
    A220: 15 05 41 18 01 02 C4 00 41 03 01 41 01 1B 05 41  // ..A.....A..A...A
    A230: 08 01 02 C9 00 41 52 4B 5B 7A 08 00 00 00 6B 01  // .....ARK[z....k.
    A240: D6 02 41 04 AC 00 02 01 00 04 66 FF 56 08 47 2D  // ..A.......f.V.G-
    A250: 0D 42 74 00 03 21 47 00 09 25 47 F0 42 22 47 63  // .Bt..!G..%G.B"Gc
    A260: 00 5B 00 63 60 56 00 63 20 36 00 63 90 4E 00 63  // .[.c`V.c 6.c.N.c
    A270: A0 3E 00 63 B0 46 00 5A 5A 5B 2D 0D 42 26 00 43  // .>.c.F.ZZ[-.B&.C
    A280: 5B 00 2D 0D 42 1E 00 43 5B 00 2D 0D 42 30 00 43  // [.-.B..C[.-.B0.C
    A290: 5B 00 2D 0D 42 16 00 43 5B 00 2D 0D 42 0C 00 03  // [.-.B..C[.-.B...
    A2A0: 21 47 00 09 25 47 07 2D 0A 42 47 2D 0A 42 47 03  // !G..%G.-.BG-.BG.
    A2B0: 0C 48 00 00 5B 7A AC 00 00 00 80 00 00 01 80 01  // .H..[z..........
    A2C0: 00 02 80 02 00 00 00 01 00 02 00 03 00 04 00 00  // ................
    A2D0: DC 00 B8 01 94 02 00 00 6B 01 D6 02 41 04 00 00  // ........k...A...
    A2E0: D8 00 B0 01 88 02 60 03 00 00 5A 00 B4 00 0E 01  // ......`...Z.....
    A2F0: 72 00 01 01 00 00 37 00 00 56 00 40 03 21 40 00  // r.....7..V.@.!@.
    A300: 21 0D 40 6B 01 03 02 48 40 01 25 AC 41 01 3D 65  // !.@k...H@.%.A.=e
    A310: 00 02 49 4C 00 01 0D BD 41 01 00 54 00 BB 41 0D  // ..IL....A..T..A.
    A320: 25 AE 41 01 01 05 AD 41 11 00 00 00 07 A5 AC 41  // %.A....A.......A
    A330: FE 01 05 AF 41 11 01 11 01 43 6E 00 01 05 B1 41  // ....A....Cn....A
    A340: 00 00 00 01 01 05 B5 41 00 00 00 01 01 05 AF 41  // .......A.......A
    A350: 11 01 11 01 54 00 AD 41 01 0D BD 41 00 01 3A 00  // ....T..A...A..:.
    A360: 00 5B 73 00 01 01 00 00 37 00 00 52 14 03 00 41  // .[s.....7..R...A
    A370: C0 41 33 1A 41 41 03 8A 40 41 03 00 41 C1 41 33  // .A3.AA..@A..A.A3
    A380: 1A 41 41 03 0A 40 41 3E 05 40 00 00 00 00 49 36  // .AA..@A>.@....I6
    A390: 00 03 05 40 70 08 00 0F 0E 25 00 B0 52 14 3D 65  // ...@p....%..R.=e
    A3A0: 00 00 44 6D 00 01 02 16 4D 40 01 05 17 4D 00 00  // ..Dm....M@...M..
    A3B0: 00 00 01 05 18 4D 00 00 00 00 01 05 19 4D 00 00  // .....M.......M..
    A3C0: 00 00 5C 05 14 4D 8F FF 0F FF 31 00 00 00 5B 07  // ..\..M....1...[.
    A3D0: 25 14 4D FE 5B 00 43 00 01 01 00 00 37 00 00 52  // %.M.[.C.....7..R
    A3E0: 14 3D 65 00 01 44 3A 00 0D 65 01 50 03 54 20 01  // .=e..D:..e.P.T .
    A3F0: 50 4A A5 01 50 01 49 1B 00 54 20 0F 50 56 00 40  // PJ..P.I..T .PV.@
    A400: 20 25 00 01 03 0A 48 40 07 E5 E8 39 7F 43 3F 00  //  %....H@...9.C?.
    A410: 0D 25 01 50 01 3A 00 00 5B 00 CF 00 02 01 00 00  // .%.P.:..[.......
    A420: 37 00 00 42 29 00 63 00 1B 00 63 01 1B 00 63 02  // 7..B).c...c...c.
    A430: AA 00 5A 5A 5B 66 FF 56 08 40 2D 0D 42 C3 00 03  // ..ZZ[f.V.@-.B...
    A440: 21 40 00 15 25 40 01 2D 0A 42 40 03 0C 48 00 00  // !@..%@.-.B@..H..
    A450: 3D 65 00 00 44 72 00 0D 25 CC 00 01 3A 00 00 01  // =e..Dr..%...:...
    A460: 8D C0 00 00 02 51 02 01 05 C6 00 00 00 10 00 01  // .....Q..........
    A470: 05 C8 00 00 00 50 00 01 0D C3 00 02 00 54 20 CA  // .....P.......T .
    A480: 00 01 05 C2 00 00 01 00 00 43 1A 00 07 25 CC 00  // .........C...%..
    A490: FE 3A 00 00 0D 25 CA 00 01 01 25 C2 00 01 07 A5  // .:...%....%.....
    A4A0: C1 00 FE 0D 25 D5 00 01 0D 65 D5 00 01 4A 65 D5  // ....%....e...Je.
    A4B0: 00 01 44 93 00 54 08 D5 00 54 00 C6 00 54 00 C8  // ..D..T...T...T..
    A4C0: 00 43 1A 00 5C 65 D4 00 FC 02 01 A1 C0 00 00 2B  // .C..\e.........+
    A4D0: A5 C0 00 01 0D A5 C1 00 01 5B 7A 0C 00 00 00 02  // .........[z.....
    A4E0: 00 2C 00 2D 00 2E 00 2F 00 00 BD 01 03 01 04 00  // .,.-.../........
    A4F0: 37 00 00 66 08 03 05 46 C0 12 00 00 3D A5 00 02  // 7..f...F....=...
    A500: 49 1E 00 02 02 00 46 5B 03 05 40 0C 00 00 00 21  // I.....F[..@....!
    A510: 21 40 00 66 FF 2D 0D 42 81 01 2D 0A 42 40 03 04  // !@.f.-.B..-.B@..
    A520: 40 00 00 03 04 41 04 00 03 04 00 08 00 01 02 00  // @....A..........
    A530: 00 40 03 88 40 01 00 03 18 40 01 00 09 8D 40 FF  // .@..@....@....@.
    A540: 01 3E 8D 40 00 00 49 99 00 01 02 00 00 41 03 00  // .>.@..I......A..
    A550: 40 01 00 09 05 40 FF 01 00 00 3E 0D 40 00 00 49  // @....@....>.@..I
    A560: 82 00 03 05 46 00 71 02 00 43 BC 00 21 02 40 46  // ....F.q..C..!.@F
    A570: 03 00 41 01 00 09 05 41 00 1E 00 00 1B 05 41 09  // ..A....A......A.
    A580: 43 B4 00 7C 02 40 46 7E 05 40 00 00 01 00 03 00  // C..|.@F~.@......
    A590: 41 01 00 09 05 41 00 F0 00 00 1B 05 41 0C 75 02  // A....A......A.u.
    A5A0: 40 41 03 02 46 40 3D A5 00 01 49 C8 00 02 02 00  // @A..F@=...I.....
    A5B0: 46 5B 3D E5 00 00 49 0B 01 56 00 40 03 29 40 00  // F[=...I..V.@.)@.
    A5C0: 21 0D 40 0A 00 03 02 41 00 2D 02 40 41 01 02 00  // !.@....A.-.@A...
    A5D0: 00 40 03 00 41 01 00 09 05 41 00 00 F0 07 1B 05  // .@..A....A......
    A5E0: 41 14 02 E2 00 41 3D E5 00 00 49 0B 01 02 05 00  // A....A=...I.....
    A5F0: 00 46 C3 23 5B 56 00 40 03 39 40 00 55 38 00 66  // .F.#[V.@.9@.U8.f
    A600: FF 2D 0D 42 59 01 3E 0C 40 02 00 47 2C 01 2D 0D  // .-.BY.>.@..G,.-.
    A610: 42 08 00 43 1C 01 33 0C 40 04 00 21 0C 40 06 00  // B..C..3.@..!.@..
    A620: 2D 0C 40 00 00 03 09 42 00 55 00 00 02 0A 00 40  // -.@....B.U.....@
    A630: 7C 05 46 40 42 0F 00 7E 01 40 00 02 02 00 40 5B  // |.F@B..~.@....@[
    A640: 7A 64 00 FF FF 07 00 00 00 00 00 C8 00 3F 00 08  // zd...........?..
    A650: 00 19 00 40 06 5F 00 40 00 32 00 80 0C 7E 00 60  // ...@._.@.2...~.`
    A660: 00 64 00 00 32 7F 00 7F 00 64 00 16 6C 01 00 00  // .d..2....d..l...
    A670: 6C 01 00 51 6C 01 00 0F 6E 01 00 00 6E 01 00 4A  // l..Ql...n...n..J
    A680: 6E 01 00 0C 7E 01 00 00 7E 01 00 47 7E 01 00 0C  // n...~...~..G~...
    A690: 70 01 00 00 70 01 00 47 70 01 00 0C 72 01 00 00  // p...p..Gp...r...
    A6A0: 72 01 00 47 72 01 00 00 BF 00 02 03 04 00 37 00  // r..Gr.........7.
    A6B0: 00 56 00 46 56 00 00 03 21 00 00 55 20 00 3D 65  // .V.FV...!..U .=e
    A6C0: 00 03 44 2C 00 3D 65 00 0B 46 B4 00 02 29 00 00  // ..D,.=e..F...)..
    A6D0: 32 25 00 08 0E 25 00 60 52 14 5C 22 28 55 F8 00  // 2%...%.`R.\"(U..
    A6E0: 02 22 00 00 03 0D 41 01 00 66 FF 2D 0D 42 BB 00  // ."....A..f.-.B..
    A6F0: 2D 0A 42 41 03 24 00 00 00 3D E2 00 00 48 A0 00  // -.BA.$...=...H..
    A700: 3E 25 00 04 44 6F 00 03 22 46 00 33 25 46 01 15  // >%..Do.."F.3%F..
    A710: 25 46 04 0F 25 46 01 33 39 00 00 3E 25 00 01 44  // %F..%F.39..>%..D
    A720: 8C 00 3E 25 00 02 44 85 00 03 25 46 21 03 65 00  // ..>%..D...%F!.e.
    A730: 2F 43 90 00 03 65 00 13 03 79 46 00 33 65 46 01  // /C...e...yF.3eF.
    A740: 15 2D 46 03 0F 65 46 01 52 14 01 02 01 4D 46 01  // .-F..eF.R....MF.
    A750: 52 00 4D 00 54 00 05 4D 54 00 FF 4C 3A 00 00 5B  // R.M.T..MT..L:..[
    A760: 7A 04 00 03 02 01 04 00 CB 00 01 01 00 00 37 00  // z.............7.
    A770: 00 3D 65 00 01 44 61 00 56 00 40 20 25 00 10 03  // .=e..Da.V.@ %...
    A780: 0A 48 40 07 25 8F 4F FD 4A 25 8F 4F 04 49 20 00  // .H@.%.O.J%.O.I .
    A790: 52 14 07 25 46 50 FE 4A 65 46 50 01 49 2F 00 03  // R..%FP.JeFP.I/..
    A7A0: 21 40 00 21 0D 40 DC 00 03 0A 48 40 07 25 B4 3A  // !@.!.@....H@.%.:
    A7B0: FE 56 00 40 03 21 40 00 21 0D 40 6B 01 03 0A 48  // .V.@.!@.!.@k...H
    A7C0: 40 07 25 85 41 EF 43 C7 00 56 00 40 20 25 00 10  // @.%.A.C..V.@ %..
    A7D0: 03 0A 48 40 0D 25 8F 4F 02 4A 25 8F 4F 04 44 71  // ..H@.%.O.J%.O.Dq
    A7E0: 00 52 14 0D 25 46 50 01 4A 65 46 50 01 44 80 00  // .R..%FP.JeFP.D..
    A7F0: 56 00 40 03 21 40 00 21 0D 40 DC 00 03 0A 48 40  // V.@.!@.!.@....H@
    A800: 0D 25 B4 3A 01 56 00 40 03 21 40 00 21 0D 40 6B  // .%.:.V.@.!@.!.@k
    A810: 01 03 0A 48 40 0D 25 85 41 10 56 00 40 03 21 40  // ...H@.%.A.V.@.!@
    A820: 00 21 0D 40 5A 00 03 0A 48 40 0D 25 4C 4D 01 3A  // .!.@Z...H@.%LM.:
    A830: 00 00 5B 00 5E 01 01 04 04 08 37 00 00 3D 65 02  // ..[.^.....7..=e.
    A840: 01 49 27 01 4B A5 02 03 49 2A 00 52 25 02 05 00  // .I'.K...I*.R%...
    A850: 00 00 00 00 02 05 01 00 05 02 00 43 2F 00 55 28  // ...........C/.U(
    A860: 02 52 25 03 38 00 C4 00 03 48 00 C9 00 0E 25 02  // .R%.8....H....%.
    A870: 90 52 14 08 25 02 07 0D 05 B4 3A 11 11 01 00 5C  // .R..%.....:....\
    A880: 25 B3 3A 0B 01 03 21 41 02 15 25 41 04 0D 22 B3  // %.:...!A..%A..".
    A890: 3A 41 0D 65 B6 3A 01 5C 25 DB 3A FD 01 03 02 41  // :A.e.:.\%.:....A
    A8A0: 00 1B 05 41 08 01 0A CB 3A 41 01 0A CF 3A 41 15  // ...A....:A...:A.
    A8B0: 05 00 18 01 02 CA 3A 00 01 02 CE 3A 00 4B A5 02  // ......:....:.K..
    A8C0: 03 49 A0 00 2B 05 CA 3A 00 00 10 00 2B 05 CE 3A  // .I..+..:....+..:
    A8D0: 00 00 50 00 01 0D A7 3A 80 00 01 0D B1 3A 00 03  // ..P....:.....:..
    A8E0: 01 0D 0C 3B 01 03 01 05 0A 3B 00 00 08 28 01 05  // ...;.....;...(..
    A8F0: 0B 3B 00 00 08 00 01 E5 EF 3A 08 01 E5 EE 3A E0  // .;.......:....:.
    A900: 54 00 A9 3A 01 19 AA 3A 00 01 89 AA 3A 00 01 19  // T..:...:....:...
    A910: AE 3A 00 01 89 AE 3A 00 07 0D A5 3A FF F8 66 FF  // .:....:....:..f.
    A920: 2D 0D 42 4F 01 03 0C 40 00 00 3E 0D 40 FF FF 44  // -.BO...@..>.@..D
    A930: 0E 01 3D 8C 01 00 00 44 0E 01 2D 0D 42 03 00 43  // ..=....D..-.B..C
    A940: F1 00 01 24 A5 3A 02 00 01 09 C7 3A 01 07 25 B3  // ...$.:.....:..%.
    A950: 3A FE 07 25 DB 3A FE 3A 00 00 5B 0E 25 02 90 52  // :..%.:.:..[.%..R
    A960: 14 3D 65 02 00 49 3C 01 0D 25 B3 3A 01 43 48 01  // .=e..I<..%.:.CH.
    A970: 3D 65 02 10 44 48 01 01 09 C7 3A 01 3A 00 00 5B  // =e..DH....:.:..[
    A980: 7A 0F 00 01 00 01 01 01 03 01 05 02 02 00 08 FF  // z...............
    A990: FF 08 42 00 01 01 00 00 37 00 00 52 14 3D 65 00  // ..B.....7..R.=e.
    A9A0: 01 44 21 00 54 20 4B 50 4A 65 4B 50 01 49 16 00  // .D!.T KPJeKP.I..
    A9B0: 43 3E 00 5C 4D 1B 50 FE FF 00 01 4A A5 01 50 01  // C>.\M.P....J..P.
    A9C0: 44 3E 00 0D 25 4B 50 01 4A 65 4B 50 01 44 36 00  // D>..%KP.JeKP.D6.
    A9D0: 3A 00 00 5B 13 00 01 03 00 00 37 00 00 0E 25 00  // :..[......7...%.
    A9E0: A0 52 14 3A 00 00 5B 00 C6 01 01 01 00 18 56 00  // .R.:..[.......V.
    A9F0: 40 03 21 40 05 21 0D 40 80 00 03 0A 48 40 37 00  // @.!@.!.@....H@7.
    AA00: 00 01 0D 47 50 0D 00 3D 8D 01 0D 00 46 2C 00 01  // ...GP..=....F,..
    AA10: 19 47 50 01 01 8D 48 50 40 01 01 0D 49 50 2C 01  // .GP...HP@...IP,.
    AA20: 03 09 41 00 2D 19 41 00 03 8A 41 41 2D 8D 41 01  // ..A.-.A...AA-.A.
    AA30: 00 1B 1D 41 02 01 1A 48 50 41 33 0D 41 01 00 01  // ...A...HPA3.A...
    AA40: 0A EA 4F 41 54 08 EC 4F 01 99 EC 4F 02 03 19 41  // ..OAT..O...O...A
    AA50: 00 33 09 41 02 56 18 41 03 B1 41 04 33 1A 41 41  // .3.A.V.A..A.3.AA
    AA60: 01 8A EB 4F 41 03 19 41 00 33 09 41 02 2D 1A 41  // ...OA..A.3.A.-.A
    AA70: 41 2D 09 41 00 4B 25 04 10 44 98 00 2D 09 41 00  // A-.A.K%..D..-.A.
    AA80: 01 0A EB 4F 41 03 21 41 04 09 25 41 02 1B 25 41  // ...OA.!A..%A..%A
    AA90: 01 01 22 ED 4F 41 03 09 41 01 2D 19 41 01 33 0D  // ..".OA..A.-.A.3.
    AAA0: 41 01 00 01 0A EF 4F 41 54 08 F7 4F 01 99 F7 4F  // A.....OAT..O...O
    AAB0: 03 03 19 41 01 33 09 41 03 56 18 41 03 B9 41 04  // ...A.3.A.V.A..A.
    AAC0: 33 1A 41 41 01 8A F6 4F 41 03 19 41 01 33 09 41  // 3.AA...OA..A.3.A
    AAD0: 03 2D 1A 41 41 2D 09 41 01 4B 25 04 20 44 FC 00  // .-.AA-.A.K%. D..
    AAE0: 2D 09 41 01 01 0A F6 4F 41 03 21 41 04 09 25 41  // -.A....OA.!A..%A
    AAF0: 04 1B 25 41 02 01 22 F8 4F 41 3D 65 05 00 44 21  // ..%A..".OA=e..D!
    AB00: 01 07 65 01 50 EF 43 26 01 0D 65 01 50 10 03 00  // ..e.P.C&..e.P...
    AB10: 46 EB 4F 02 00 02 F6 4F 56 00 40 03 21 40 05 21  // F.O....OV.@.!@.!
    AB20: 0D 40 01 00 03 0A 48 40 56 00 40 03 09 40 02 3D  // .@....H@V.@..@.=
    AB30: 65 05 00 49 53 01 33 0D 40 02 00 15 05 40 10 56  // e..IS.3.@....@.V
    AB40: 00 41 3D 8D 02 0D 00 48 6B 01 03 0D 41 0D 00 33  // .A=....Hk...A..3
    AB50: 19 41 02 0F 02 40 41 0F E5 40 80 01 02 E8 39 40  // .A...@A..@....9@
    AB60: 56 00 40 03 21 40 05 21 0D 40 6B 01 03 0A 48 40  // V.@.!@.!.@k...H@
    AB70: 01 09 C3 41 00 01 89 C3 41 01 01 09 C4 41 00 01  // ...A....A....A..
    AB80: 89 C4 41 01 01 02 C0 41 46 01 01 C1 41 02 54 00  // ..A....AF...A.T.
    AB90: BE 41 01 31 BE 41 04 01 B1 BE 41 04 54 00 BF 41  // .A.1.A....A.T..A
    ABA0: 01 39 BF 41 04 01 B9 BF 41 04 3A 00 00 5B 0A 00  // .9.A....A.:..[..
    ABB0: 02 03 08 00 37 00 00 5B CC 01 01 01 00 00 37 00  // ....7..[......7.
    ABC0: 00 56 00 41 03 39 41 01 09 25 41 0F 56 00 40 03  // .V.A.9A..%A.V.@.
    ABD0: 62 40 41 01 02 58 53 40 03 0A 46 42 66 FF 2D 0D  // b@A..XS@..FBf.-.
    ABE0: 42 B8 01 15 25 41 02 2D 0A 42 41 03 0C 48 00 00  // B...%A.-.BA..H..
    ABF0: 07 05 90 5D 00 00 01 00 03 0C 48 02 00 03 05 40  // ...]......H....@
    AC00: C0 5D 00 00 56 00 41 03 21 41 00 27 02 40 41 15  // .]..V.A.!A.'.@A.
    AC10: 05 40 10 03 25 40 02 01 02 62 53 40 01 05 63 53  // .@..%@...bS@..cS
    AC20: 40 00 00 30 03 0A 42 46 56 08 48 0D 25 5A 53 01  // @..0..BFV.H.%ZS.
    AC30: 54 00 59 53 56 00 41 03 71 41 01 0F E5 41 80 01  // T.YSV.A.qA...A..
    AC40: 02 72 53 41 03 69 41 00 03 A5 41 01 01 02 72 53  // .rSA.iA...A...rS
    AC50: 41 4B 25 01 01 44 CD 00 03 71 41 00 03 A5 41 02  // AK%..D...qA...A.
    AC60: 01 02 72 53 41 03 79 41 00 03 A5 41 03 01 02 72  // ..rSA.yA...A...r
    AC70: 53 41 03 05 40 00 31 01 00 2D A9 40 01 01 02 6E  // SA..@.1..-.@...n
    AC80: 53 40 43 00 01 03 71 41 01 0F 65 41 01 03 A5 41  // S@C...qA..eA...A
    AC90: 02 01 02 72 53 41 03 05 40 00 11 01 00 01 02 6E  // ...rSA..@......n
    ACA0: 53 40 03 05 40 01 30 00 00 03 A9 40 01 01 02 6F  // S@..@.0....@...o
    ACB0: 53 40 5C A5 58 53 CF 10 0D 25 58 53 01 02 65 00  // S@\.XS...%XS..e.
    ACC0: 02 56 00 40 03 29 40 01 2D 25 40 04 21 05 40 C8  // .V.@.)@.-%@.!.@.
    ACD0: 00 00 00 56 00 41 03 21 41 00 27 02 40 41 03 0A  // ...V.A.!A.'.@A..
    ACE0: 41 40 33 0D 41 01 00 3E 0D 41 00 00 44 A4 01 51  // A@3.A..>.A..D..Q
    ACF0: 64 4A 25 5B 53 04 44 2A 01 4A 65 5B 53 31 49 A4  // dJ%[S.D*.Je[S1I.
    AD00: 01 02 65 00 01 4B 25 01 01 49 A4 01 01 05 72 53  // ..e..K%..I....rS
    AD10: 01 00 03 80 3D 65 01 01 49 6B 01 02 A8 00 72 53  // ....=e..Ik....rS
    AD20: 43 A4 01 56 00 41 03 19 41 00 56 00 40 03 0A 40  // C..V.A..A.V.@..@
    AD30: 41 3B 02 40 03 28 40 72 53 03 68 40 72 53 03 A8  // A;.@.(@rS.h@rS..
    AD40: 40 72 53 03 E8 40 72 53 04 02 00 40 2D A5 41 04  // @rS..@rS...@-.A.
    AD50: 2D 0D 41 04 00 3E A9 41 01 45 72 01 0D 25 5A 53  // -.A..>.A.Er..%ZS
    AD60: 02 01 25 58 53 02 51 01 54 00 58 53 5B 7A 14 00  // ..%XS.Q.T.XS[z..
    AD70: 00 00 00 00 04 00 02 00 08 00 04 00 0C 00 06 00  // ................
    AD80: 10 00 08 00 46 00 02 02 00 04 37 00 00 55 30 00  // ....F.....7..U0.
    AD90: 32 25 00 01 20 25 00 08 56 08 48 03 22 48 40 0D  // 2%.. %..V.H."H@.
    ADA0: A5 D5 53 01 02 A0 00 D4 53 08 A5 00 03 4A 25 D4  // ..S.....S....J%.
    ADB0: 53 02 44 3C 00 5C 0D D5 53 FF FE 01 00 43 42 00  // S.D<.\..S....CB.
    ADC0: 0D 0D D5 53 01 01 3A 00 00 5B E7 00 01 08 08 00  // ...S..:..[......
    ADD0: 03 01 00 00 02 05 00 01 00 01 00 52 29 20 05 00  // ...........R) ..
    ADE0: 64 00 00 00 03 02 46 40 02 02 00 00 03 01 00 00  // d.....F@........
    ADF0: 55 38 00 03 05 40 00 32 00 00 3D 05 00 00 00 00  // U8...@.2..=.....
    AE00: 00 44 64 00 03 02 40 46 27 01 40 00 3E 05 40 9C  // .Dd...@F'.@.>.@.
    AE10: 18 00 00 47 53 00 03 05 40 00 32 00 00 3E 05 40  // ...GS...@.2..>.@
    AE20: C8 00 00 00 46 64 00 03 05 40 C8 00 00 00 66 FF  // ....Fd...@....f.
    AE30: 2D 0D 42 C7 00 3E 0C 40 02 00 47 7B 00 2D 0D 42  // -.B..>.@..G{.-.B
    AE40: 08 00 43 6B 00 33 0C 40 00 00 03 0C 01 06 00 3E  // ..Ck.3.@.......>
    AE50: 0D 01 19 00 49 9A 00 27 0D 40 32 00 21 0D 40 02  // ....I..'.@2.!.@.
    AE60: 00 43 9F 00 27 0C 40 06 00 2D 0C 40 04 00 02 E2  // .C..'.@..-.@....
    AE70: 00 40 33 0C 40 04 00 21 0C 40 06 00 2D 0C 40 00  // .@3.@..!.@..-.@.
    AE80: 00 27 02 46 40 02 0A 00 40 02 B2 00 40 5B 7A 20  // .'.F@...@...@[z 
    AE90: 00 C8 00 40 06 08 00 19 00 40 06 80 0C 40 00 32  // ...@.....@...@.2
    AEA0: 00 80 0C 38 18 60 00 64 00 00 32 00 32 7F 00 64  // ...8.`.d..2.2..d
    AEB0: 00 00 07 00 02 01 00 00 5B 00 14 03 01 05 00 00  // ........[.......
    AEC0: 37 00 00 0E 25 00 60 52 14 08 25 00 0F 42 29 00  // 7...%.`R..%..B).
    AED0: 63 0F 53 00 63 11 09 02 63 12 66 02 63 01 CC 02  // c.S.c...c.f.c...
    AEE0: 63 00 F5 02 63 08 D8 01 63 09 B9 01 63 0A C0 01  // c...c...c...c...
    AEF0: 63 13 C8 01 63 14 D0 01 63 0B E0 01 63 0C BC 02  // c...c...c...c...
    AF00: 63 0D E8 01 63 10 01 02 5A 5A 43 B5 01 54 00 9A  // c...c...ZZC..T..
    AF10: 55 01 0D 2B 55 1F 00 3D A5 00 00 44 72 00 3D A5  // U..+U..=...Dr.=.
    AF20: 00 02 44 A2 01 3D A5 00 05 49 A2 01 54 00 C9 55  // ..D..=...I..T..U
    AF30: 3D 25 02 00 49 81 00 02 25 02 02 32 25 02 01 01  // =%..I...%..2%...
    AF40: E1 C9 55 02 4A 25 CC 55 01 49 B5 01 7B 05 01 00  // ..U.J%.U.I..{...
    AF50: 80 00 00 7E 05 40 8C 0A 00 00 56 00 46 03 29 46  // ...~.@....V.F.)F
    AF60: 02 27 02 40 46 07 65 D0 55 FE 01 05 D1 55 00 80  // .'.@F.e.U....U..
    AF70: 00 00 01 02 D2 55 40 0D E5 D3 55 10 0D 65 28 55  // .....U@...U..e(U
    AF80: 04 51 01 07 65 28 55 FB 51 01 03 21 40 02 15 25  // .Q..e(U.Q..!@..%
    AF90: 40 05 01 E2 CA 55 40 54 20 CE 55 02 A0 02 28 55  // @....U@T .U...(U
    AFA0: 03 0A 46 48 08 A5 02 07 56 00 40 03 31 40 02 21  // ..FH....V.@.1@.!
    AFB0: 0D 40 80 00 03 8A 46 40 03 0A 48 40 03 88 40 EA  // .@....F@..H@..@.
    AFC0: 4F 03 08 40 EF 4F 2D 05 40 01 00 01 00 03 98 41  // O..@.O-.@......A
    AFD0: EB 4F 03 18 41 F6 4F 03 0A 48 46 01 02 0C 56 40  // .O..A.O..HF...V@
    AFE0: 01 02 0D 56 41 03 1A 48 46 03 00 40 EB 4F 33 1A  // ...VA..HF..@.O3.
    AFF0: 40 40 33 08 40 BE 41 33 08 40 BE 41 03 00 41 F6  // @@3.@.A3.@.A..A.
    B000: 4F 33 1A 41 41 33 08 41 BF 41 33 08 41 BF 41 03  // O3.AA3.A.A3.A.A.
    B010: 0A 48 46 01 0A 0F 56 41 01 8A 0F 56 40 03 1A 48  // .HF...VA...V@..H
    B020: 46 03 00 40 EC 4F 33 8A 40 40 03 00 41 F7 4F 33  // F..@.O3.@@..A.O3
    B030: 8A 41 41 4A 25 ED 4F 01 44 85 01 0F E5 40 80 4A  // .AAJ%.O.D....@.J
    B040: 25 F8 4F 01 44 91 01 0F E5 41 80 03 0A 48 46 01  // %.O.D....A...HF.
    B050: 1A 0E 56 41 01 9A 0E 56 40 43 B5 01 07 E5 28 55  // ..VA...V@C....(U
    B060: 2F 0D 65 28 55 04 51 01 07 65 28 55 FB 51 01 3A  // /.e(U.Q..e(U.Q.:
    B070: 00 00 5B 54 20 D8 55 43 B5 01 01 25 D8 55 01 43  // ..[T .UC...%.U.C
    B080: B5 01 01 25 D8 55 02 43 B5 01 01 25 D8 55 03 43  // ...%.U.C...%.U.C
    B090: B5 01 07 25 C8 55 EF 43 B5 01 0D 25 C8 55 10 43  // ...%.U.C...%.U.C
    B0A0: B5 01 0D 65 D0 55 01 51 0A 07 25 CD 55 FE 51 0A  // ...e.U.Q..%.U.Q.
    B0B0: 01 0D CC 55 01 02 51 C8 43 B5 01 0D 25 DE 55 10  // ...U..Q.C...%.U.
    B0C0: 43 B5 01 01 69 6F 55 02 3D A5 00 03 49 25 02 4A  // C...ioU.=...I%.J
    B0D0: 25 35 55 10 49 25 02 01 A5 6F 55 02 43 2A 02 01  // %5U.I%...oU.C*..
    B0E0: B1 6F 55 00 3D 25 02 00 44 3F 02 32 25 02 01 14  // .oU.=%..D?.2%...
    B0F0: 25 02 04 5C E1 6F 55 8F 02 3D A5 00 05 44 4D 02  // %..\.oU..=...DM.
    B100: 3D A5 00 00 49 5E 02 02 A5 00 00 03 39 40 00 33  // =...I^......9@.3
    B110: 25 40 01 01 22 CB 55 40 02 E0 02 70 55 43 B5 01  // %@..".U@...pUC..
    B120: 02 E0 02 70 55 4B E5 02 01 44 B5 01 02 B0 00 6F  // ...pUK...D.....o
    B130: 55 3D A5 00 00 44 8C 02 3D A5 00 05 44 8C 02 02  // U=...D..=...D...
    B140: E5 00 04 43 95 02 02 E0 00 CB 55 2C E5 00 01 3D  // ...C......U,...=
    B150: A5 00 02 44 A3 02 3D A5 00 03 49 AC 02 54 00 70  // ...D..=...I..T.p
    B160: 55 50 02 43 B5 01 02 A5 00 00 03 31 43 00 4A 62  // UP.C.......1C.Jb
    B170: 6F 55 44 44 B5 01 54 08 CC 55 51 C8 0D 25 CD 55  // oUDD..T..UQ..%.U
    B180: 01 51 32 43 B5 01 0D 25 70 55 01 3D A5 00 00 44  // .Q2C...%pU.=...D
    B190: E1 02 01 0D A1 55 0F 01 43 B5 01 03 39 43 00 03  // .....U..C...9C..
    B1A0: 02 40 44 33 25 40 01 01 0A A1 55 40 43 B5 01 54  // .@D3%@....U@C..T
    B1B0: 00 A1 55 07 25 70 55 FE 07 0D 6F 55 FF 80 07 25  // ..U.%pU...oU...%
    B1C0: 35 55 EF 54 20 C8 55 54 20 D8 55 43 B5 01 0C 01  // 5U.T .UT .UC....
    B1D0: 01 06 04 00 37 00 00 42 29 00 63 07 EA 00 63 01  // ....7..B).c...c.
    B1E0: 25 00 63 00 C0 00 63 0B ED 00 63 04 F2 00 5A 5A  // %.c...c...c...ZZ
    B1F0: 43 05 01 02 65 00 10 52 4D 3D 65 00 00 44 E6 00  // C...e..RM=e..D..
    B200: 02 65 00 11 52 04 4B E5 02 01 49 E6 00 3D A5 00  // .e..R.K...I..=..
    B210: 00 49 57 00 03 01 00 00 02 65 00 0F 55 38 00 52  // .IW......e..U8.R
    B220: 4D 02 02 00 00 02 65 00 0A 55 08 02 52 4D 3D A5  // M.....e..U..RM=.
    B230: 00 00 49 70 00 02 65 00 0B 52 4D 43 79 00 02 65  // ..Ip..e..RMCy..e
    B240: 00 0E 52 4D 43 AD 00 20 05 01 64 00 00 00 02 05  // ..RMC.. ..d.....
    B250: 01 14 1E 00 02 2C 21 01 00 03 01 00 00 02 02 00  // .....,!.........
    B260: 40 52 0C 26 05 00 64 00 00 00 02 02 01 40 02 02  // @R.&..d......@..
    B270: 00 00 02 65 00 01 55 08 02 52 4D 51 05 02 65 00  // ...e..U..RMQ..e.
    B280: 01 52 04 51 0A 02 65 00 09 52 4D 43 E6 00 02 65  // .R.Q..e..RMC...e
    B290: 00 12 52 04 4B E5 02 01 44 E6 00 02 65 00 08 52  // ..R.K...D...e..R
    B2A0: 4D 02 65 00 00 52 04 3D A5 00 00 49 E6 00 02 65  // M.e..R.=...I...e
    B2B0: 00 00 52 4D 3A 00 00 5B 43 E6 00 52 4D 43 E6 00  // ..RM:..[C..RMC..
    B2C0: 66 06 02 29 00 00 02 68 00 4E 00 02 8C 00 20 00  // f..)...h.N.... .
    B2D0: 52 33 5B 02 29 00 00 52 33 5B F6 0F 02 02 08 00  // R3[.)..R3[......
    B2E0: 37 00 00 4A 25 48 00 01 44 12 00 5B 66 FF 2D 0D  // 7..J%H..D..[f.-.
    B2F0: 42 A1 0F 56 00 40 03 21 40 00 15 25 40 01 2D 0A  // B..V.@.!@..%@.-.
    B300: 42 40 03 0C 48 00 00 3D 65 00 10 49 76 00 02 65  // B@..H..=e..Iv..e
    B310: 00 01 3D 25 00 03 45 9A 0F 4A A5 F7 5D 01 44 9A  // ..=%..E..J..].D.
    B320: 0F 02 65 00 00 4A A5 15 5E 02 49 9A 0F 0D 25 16  // ..e..J..^.I...%.
    B330: 5E 01 07 05 15 5E FF FF FB FF 3D E5 00 04 45 6F  // ^....^....=...Eo
    B340: 00 4A A5 15 5E 01 44 9A 0F 02 65 00 01 43 9A 0F  // .J..^.D...e..C..
    B350: 3D 25 00 03 48 87 00 03 05 00 01 01 01 01 43 C7  // =%..H.........C.
    B360: 00 4A A5 F7 5D 01 44 7D 00 4A A5 15 5E 02 49 9A  // .J..].D}.J..^.I.
    B370: 0F 0D 25 16 5E 01 07 05 15 5E FF FF FB FF 03 05  // ..%.^....^......
    B380: 00 01 00 00 00 3D E5 00 01 44 C7 00 03 05 00 01  // .....=...D......
    B390: 01 00 00 3D E5 00 02 44 C7 00 03 05 00 01 01 01  // ...=...D........
    B3A0: 01 42 29 00 63 07 F1 00 63 0A 51 06 63 01 5E 07  // .B).c...c.Q.c.^.
    B3B0: 63 00 EB 08 63 09 94 0A 63 08 04 0C 63 0B 51 0E  // c...c...c...c.Q.
    B3C0: 63 0E 6D 0D 63 0F 59 01 5A 5A 5B 01 05 FD 5D 00  // c.m.c.Y.ZZ[...].
    B3D0: 00 00 00 01 05 EE 5D 00 40 00 00 5C 05 F0 5D FF  // ......].@..\..].
    B3E0: FF 0F FE 00 00 D0 00 56 00 40 3D 25 00 03 45 56  // .......V.@=%..EV
    B3F0: 01 0D A5 00 5E 20 01 05 F4 5D 5A 00 00 00 01 05  // ....^ ...]Z.....
    B400: F5 5D 05 00 00 00 03 05 40 EB 10 00 00 01 02 F4  // .]......@.......
    B410: 5D 40 01 05 F5 5D 07 00 00 00 2D 05 40 00 01 00  // ]@...]....-.@...
    B420: 00 3E 05 40 EB 13 00 00 47 33 01 07 A5 00 5E DF  // .>.@....G3....^.
    B430: 43 9A 0F 4A A5 F7 5D 01 49 9A 0F 4A 25 00 5E 01  // C..J..].I..J%.^.
    B440: 49 8D 01 3C 25 F7 5D 00 49 8D 01 3C 71 F7 5D 00  // I..<%.].I..<q.].
    B450: 49 8D 01 08 E5 00 01 03 00 40 F1 5D 09 25 40 01  // I........@.].%@.
    B460: 3E 39 40 00 44 9A 0F 54 20 F7 5D 07 4D F1 5D DF  // >9@.D..T .].M.].
    B470: FE 4A 65 F1 5D 40 49 97 01 0D 05 03 5E 01 01 01  // .Je.]@I.....^...
    B480: 01 0D 25 00 5E 01 0D A5 00 5E 20 0D 25 00 5E 01  // ..%.^....^ .%.^.
    B490: 0D 05 03 5E 01 01 01 01 03 39 40 00 09 25 40 01  // ...^.....9@..%@.
    B4A0: 5C 22 F1 5D FE 40 5C 65 00 5E C1 02 0D 25 02 5E  // \".].@\e.^...%.^
    B4B0: 08 3D 65 00 07 49 E6 01 07 E5 00 5E 5F 43 EB 01  // .=e..I.....^_C..
    B4C0: 0D E5 00 5E A0 5C 05 06 5E BB BB FF FF 33 33 00  // ...^.\..^....33.
    B4D0: 00 5C 05 03 5E F7 F7 F7 F7 02 02 02 02 66 1E 2D  // .\..^........f.-
    B4E0: 0D 42 0C 03 03 21 43 00 03 A2 46 44 4C A4 46 00  // .B...!C...FDL.F.
    B4F0: 00 44 3A 02 56 00 40 2D 0D 42 01 00 03 21 40 00  // .D:.V.@-.B...!@.
    B500: 2D 0A 42 40 03 24 40 00 00 03 62 40 40 03 8A 40  // -.B@.$@...b@@..@
    B510: 40 43 59 02 66 07 2D 0C 42 0A 00 56 00 40 20 25  // @CY.f.-.B..V.@ %
    B520: 00 0C 2D 0A 42 40 03 24 40 09 00 03 62 40 40 03  // ..-.B@.$@...b@@.
    B530: 8A 40 40 5C 02 04 5E F8 F8 F8 F8 40 03 21 43 00  // .@@\..^....@.!C.
    B540: 03 A2 46 44 3D A5 00 00 44 FD 02 03 05 40 04 00  // ..FD=...D....@..
    B550: 00 00 66 1E 2D 0D 42 C4 00 3D A5 00 02 44 AC 02  // ..f.-.B..=...D..
    B560: 2D 0D 42 0C 00 3D 05 01 30 75 00 00 47 AC 02 3D  // -.B..=..0u..G..=
    B570: 05 01 40 9C 00 00 46 A7 02 2D 0D 42 28 02 43 AC  // ..@...F..-.B(.C.
    B580: 02 2D 0D 42 0C 00 4C A4 46 05 00 44 CF 02 03 04  // .-.B..L.F..D....
    B590: 40 00 00 3E 05 40 00 00 00 00 44 CF 02 03 24 40  // @..>.@....D...$@
    B5A0: 0A 00 09 25 40 1C 43 BE 03 66 07 2D 0C 42 04 00  // ...%@.C..f.-.B..
    B5B0: 03 04 41 00 00 3E 05 41 00 00 00 00 44 BE 03 4C  // ..A..>.A....D..L
    B5C0: A4 46 06 00 49 F5 02 2D 0D 42 0C 00 43 D6 02 03  // .F..I..-.B..C...
    B5D0: 24 40 07 00 43 BE 03 03 05 40 05 00 00 00 66 1E  // $@..C....@....f.
    B5E0: 2D 0D 42 C0 02 03 0C 46 02 00 4C A4 46 00 00 49  // -.B....F..L.F..I
    B5F0: 5F 03 66 1E 2D 0D 42 E8 00 3D 05 01 48 3F 00 00  // _.f.-.B..=..H?..
    B600: 47 52 03 66 1E 2D 0D 42 50 02 3D 05 01 78 69 00  // GR.f.-.BP.=..xi.
    B610: 00 47 52 03 66 1E 2D 0D 42 88 02 3D 05 01 F0 D2  // .GR.f.-.B..=....
    B620: 00 00 47 52 03 66 1E 2D 0D 42 20 01 03 0C 46 02  // ..GR.f.-.B ...F.
    B630: 00 4C A4 46 00 00 44 8E 03 2D 0D 42 06 00 56 20  // .L.F..D..-.B..V 
    B640: 41 3D A4 00 00 00 44 82 03 2D 25 41 01 3E 25 41  // A=....D..-%A.>%A
    B650: 0A 44 8E 03 2D 0D 42 05 00 43 67 03 03 24 40 04  // .D..-.B..Cg..$@.
    B660: 00 09 25 40 1C 43 BE 03 66 07 2D 0C 42 08 00 03  // ..%@.C..f.-.B...
    B670: 04 41 00 00 3E 05 41 00 00 00 00 44 BE 03 4C A4  // .A..>.A....D..L.
    B680: 46 04 00 49 B4 03 2D 0D 42 44 00 43 95 03 2D 0D  // F..I..-.BD.C..-.
    B690: 42 08 00 03 24 40 05 00 15 05 40 1A 5C 02 12 5E  // B...$@....@.\..^
    B6A0: FF FF FF E3 40 07 65 00 5E FE 3D A5 00 00 49 76  // ....@.e.^.=...Iv
    B6B0: 04 5C 05 0B 5E FF FF 8F FF 00 00 10 00 0D 05 0C  // .\..^...........
    B6C0: 5E 01 01 00 00 5C 05 0B 5E 0F 00 FF FF 40 17 00  // ^....\..^....@..
    B6D0: 00 0D 05 0E 5E 00 00 00 01 01 05 07 5E 01 00 00  // ....^.......^...
    B6E0: 80 01 05 0A 5E 00 00 00 00 01 05 09 5E 87 39 01  // ....^.......^.9.
    B6F0: 00 01 05 08 5E 48 E9 00 00 01 05 0D 5E 00 00 00  // ....^H......^...
    B700: 00 5C 05 0B 5E FF FF F8 FF 00 00 00 00 5C 05 0C  // .\..^........\..
    B710: 5E 8F FF FF FF 20 00 00 00 0D 05 0E 5E 00 00 00  // ^.... ......^...
    B720: 10 07 05 0C 5E FB FF FF FF 01 05 0F 5E 3E 00 48  // ....^.......^>.H
    B730: B0 01 05 10 5E 3E 00 18 26 01 05 11 5E 3E 00 80  // ....^>..&...^>..
    B740: 3F 5C 05 12 5E 00 00 00 1C 3E 00 44 00 43 0A 05  // ?\..^....>.D.C..
    B750: 5C 05 0B 5E FF FF 8F FF 00 00 00 00 0D 05 0C 5E  // \..^...........^
    B760: 01 01 00 00 5C 05 0B 5E 0F 00 FF FF 00 0B 00 00  // ....\..^........
    B770: 0D 05 0E 5E 00 00 00 01 01 05 07 5E 03 00 AA 22  // ...^.......^..."
    B780: 54 00 0A 5E 01 05 09 5E C1 0A 00 00 01 05 08 5E  // T..^...^.......^
    B790: 00 10 00 00 01 05 0D 5E 00 00 00 00 5C 05 0B 5E  // .......^....\..^
    B7A0: FF FF F8 FF 00 00 04 00 07 05 0C 5E 8F FF FF FF  // ...........^....
    B7B0: 0D 05 0E 5E 00 00 00 10 0D 05 0C 5E 04 00 00 00  // ...^.......^....
    B7C0: 01 05 0F 5E 3E 00 08 B0 01 05 10 5E 3E 00 1C 12  // ...^>......^>...
    B7D0: 01 05 11 5E 3E 00 00 3E 5C 05 12 5E 00 00 00 1C  // ...^>..>\..^....
    B7E0: 3E 00 44 00 0D A5 06 5E 08 0D 25 F3 5D 01 0D 65  // >.D....^..%.]..e
    B7F0: F1 5D 20 4A 65 F1 5D 40 49 19 05 0D A5 F1 5D 01  // .] Je.]@I.....].
    B800: 07 25 00 5E FE 07 05 03 5E FE FE FE FE 4A E5 00  // .%.^....^....J..
    B810: 5E 10 44 33 05 66 07 2D 0C 42 0C 00 03 04 40 00  // ^.D3.f.-.B....@.
    B820: 00 3E 05 40 FF FF FF FF 44 65 05 01 04 F4 5D 00  // .>.@....De....].
    B830: 00 01 04 F5 5D 04 00 2D 0D 42 08 00 43 42 05 01  // ....]..-.B..CB..
    B840: 05 F4 5D 38 20 00 00 01 05 F5 5D 0C 00 00 00 56  // ..]8 .....]....V
    B850: 00 01 4A 05 03 5E 20 20 20 20 44 9E 05 51 02 2D  // ..J..^    D..Q.-
    B860: 05 01 01 00 00 00 3E 05 01 A0 86 01 00 49 78 05  // ......>......Ix.
    B870: 01 25 F7 5D 03 43 9A 0F 03 00 40 04 5E 09 05 40  // .%.].C....@.^..@
    B880: 07 00 00 00 21 05 40 03 00 00 00 03 05 41 21 20  // ....!.@......A! 
    B890: 00 00 2D 02 41 40 01 02 F4 5D 41 03 00 41 F5 5D  // ..-.A@...]A..A.]
    B8A0: 01 05 F4 5D 84 00 00 00 01 02 F5 5D 41 03 05 41  // ...].......]A..A
    B8B0: 22 20 00 00 2D 02 41 40 01 02 F4 5D 41 03 00 41  // " ..-.A@...]A..A
    B8C0: F5 5D 01 05 F4 5D 85 00 00 00 01 02 F5 5D 41 03  // .]...].......]A.
    B8D0: 00 40 12 5E 09 05 40 00 00 00 1C 1B 05 40 16 01  // .@.^..@......@..
    B8E0: 05 F4 5D 22 00 00 00 03 00 41 F5 5D 09 25 41 0F  // ..]".....A.].%A.
    B8F0: 0F 22 41 40 0F 25 41 80 01 05 F4 5D 22 00 00 00  // ."A@.%A....]"...
    B900: 01 02 F5 5D 41 56 00 41 3D A5 00 00 49 43 06 5C  // ...]AV.A=...IC.\
    B910: A5 0B 5E F8 00 07 65 00 5E FE 43 9A 0F 5C A5 0B  // ..^...e.^.C..\..
    B920: 5E F8 01 0D 65 00 5E 01 43 9A 0F 03 0A 46 48 66  // ^...e.^.C....FHf
    B930: 07 2D 0C 42 0A 00 56 00 40 20 25 00 0C 2D 0A 42  // .-.B..V.@ %..-.B
    B940: 40 20 25 00 02 03 0A 48 40 01 04 2E 5D 00 00 07  // @ %....H@...]...
    B950: E5 2D 5D FC 03 0A 48 46 66 1E 2D 0D 42 04 03 03  // .-]...HFf.-.B...
    B960: 21 43 00 03 A2 46 44 4C A4 46 00 00 44 E7 06 56  // !C...FDL.F..D..V
    B970: 00 40 56 00 41 2D 0D 42 01 00 03 21 40 00 2D 0A  // .@V.A-.B...!@.-.
    B980: 42 40 3D 25 00 03 45 B4 06 0D A5 00 5E 20 03 24  // B@=%..E.....^ .$
    B990: 41 00 00 03 05 40 EB 10 00 00 01 02 F4 5D 40 01  // A....@.......]@.
    B9A0: 02 F5 5D 41 2D 05 40 00 01 00 00 3E 05 40 EB 13  // ..]A-.@....>.@..
    B9B0: 00 00 47 C0 06 3D 25 00 03 45 E7 06 07 A5 00 5E  // ..G..=%..E.....^
    B9C0: DF 3D A5 00 00 49 22 07 66 FF 2D 0D 42 AE 0F 03  // .=...I".f.-.B...
    B9D0: 04 40 04 00 3D 04 01 00 00 44 1B 07 2D 0D 42 08  // .@..=....D..-.B.
    B9E0: 00 03 04 40 00 00 3E 05 40 00 00 00 00 49 F5 06  // ...@..>.@....I..
    B9F0: 03 04 40 04 00 5C 9A 10 5E 03 00 40 03 05 40 01  // ..@..\..^..@..@.
    BA00: 01 01 01 4A A5 F7 5D 01 44 40 07 4A A5 06 5E 01  // ...J..].D@.J..^.
    BA10: 49 40 07 09 05 40 FF FF FE FE 0D 02 03 5E 40 51  // I@...@.......^@Q
    BA20: 05 03 02 40 00 69 05 40 FF FF FF FF 07 02 03 5E  // ...@.i.@.......^
    BA30: 40 51 C8 51 C8 43 9A 0F 4A 25 FC 5D 01 49 9A 0F  // @Q.Q.C..J%.].I..
    BA40: 3C 25 F7 5D 00 49 9A 0F 4C 25 00 01 44 7D 07 0D  // <%.].I..L%..D}..
    BA50: 05 06 5E 04 00 00 00 4C 65 00 01 44 8C 07 0D 05  // ..^....Le..D....
    BA60: 06 5E 40 00 00 00 4C A5 00 01 44 9B 07 0D 05 06  // .^@...L...D.....
    BA70: 5E 00 04 00 00 4C E5 00 01 44 AA 07 0D 05 06 5E  // ^....L...D.....^
    BA80: 00 40 00 00 03 02 40 00 15 05 40 04 0D 02 03 5E  // .@....@...@....^
    BA90: 40 56 00 01 4A 25 FC 5D 01 49 9A 0F 03 02 40 00  // @V..J%.].I....@.
    BAA0: 15 05 40 05 03 00 41 03 5E 09 02 41 40 09 05 40  // ..@...A.^..A@..@
    BAB0: 20 20 20 20 3E 02 41 40 44 FC 07 51 02 2D 05 01  //     >.A@D..Q.-..
    BAC0: 01 00 00 00 3E 05 01 A0 86 01 00 49 BA 07 01 25  // ....>......I...%
    BAD0: F7 5D 04 43 9A 0F 03 02 40 00 15 05 40 04 69 05  // .].C....@...@.i.
    BAE0: 40 FF FF FF FF 07 02 03 5E 40 56 00 01 4A 25 FC  // @.......^@V..J%.
    BAF0: 5D 01 49 9A 0F 03 02 40 00 15 05 40 05 03 00 41  // ].I....@...@...A
    BB00: 03 5E 09 02 41 40 3E 05 41 00 00 00 00 44 51 08  // .^..A@>.A....DQ.
    BB10: 51 02 2D 05 01 01 00 00 00 3E 05 01 A0 86 01 00  // Q.-......>......
    BB20: 49 13 08 01 25 F7 5D 05 43 9A 0F 56 00 01 4A 25  // I...%.].C..V..J%
    BB30: FC 5D 01 49 9A 0F 4A 25 0C 5E 80 49 7F 08 51 02  // .].I..J%.^.I..Q.
    BB40: 2D 05 01 01 00 00 00 3E 05 01 A0 86 01 00 49 54  // -......>......IT
    BB50: 08 01 25 F7 5D 06 43 9A 0F 03 0A 41 48 56 00 40  // ..%.].C....AHV.@
    BB60: 03 21 40 00 03 0A 48 40 0D 25 60 01 01 51 0A 03  // .!@...H@.%`..Q..
    BB70: 0A 48 41 0D 25 E8 5D 03 4A 25 E8 5D 04 44 9E 08  // .HA.%.].J%.].D..
    BB80: 0D 65 F1 5D 12 4A 65 F1 5D 04 44 AB 08 4C 25 00  // .e.].Je.].D..L%.
    BB90: 01 44 BF 08 0D 65 F0 5D 10 4C 65 00 01 44 CB 08  // .D...e.].Le..D..
    BBA0: 0D 65 F0 5D 20 4C A5 00 01 44 D7 08 0D 65 F0 5D  // .e.] L...D...e.]
    BBB0: 40 4C E5 00 01 44 E3 08 0D 65 F0 5D 80 01 71 F7  // @L...D...e.]..q.
    BBC0: 5D 00 43 9A 0F 4A 05 06 5E 44 44 00 00 44 9A 0F  // ].C..J..^DD..D..
    BBD0: 07 65 F1 5D FD 07 25 E8 5D FD 03 0A 41 48 56 00  // .e.]..%.]...AHV.
    BBE0: 40 03 21 40 00 03 0A 48 40 07 25 60 01 FE 03 0A  // @.!@...H@.%`....
    BBF0: 48 41 4C 25 00 01 44 27 09 07 05 06 5E FB FF FF  // HAL%..D'....^...
    BC00: FF 4C 65 00 01 44 36 09 07 05 06 5E BF FF FF FF  // .Le..D6....^....
    BC10: 4C A5 00 01 44 45 09 07 05 06 5E FF FB FF FF 4C  // L...DE....^....L
    BC20: E5 00 01 44 54 09 07 05 06 5E FF BF FF FF 07 65  // ...DT....^.....e
    BC30: 0C 5E FE 54 00 08 5E 54 00 09 5E 3D 25 00 03 45  // .^.T..^T..^=%..E
    BC40: C2 09 03 00 40 06 5E 4C 25 00 01 44 7F 09 5E 05  // ....@.^L%..D..^.
    BC50: 40 FC FF FF FF 03 00 00 00 4C 65 00 01 44 91 09  // @........Le..D..
    BC60: 5E 05 40 CF FF FF FF 30 00 00 00 4C A5 00 01 44  // ^.@....0...L...D
    BC70: A3 09 5E 05 40 FF FC FF FF 00 03 00 00 4C E5 00  // ..^.@........L..
    BC80: 01 44 B5 09 5E 05 40 FF CF FF FF 00 30 00 00 3C  // .D..^.@.....0..<
    BC90: 02 06 5E 40 44 69 0A 01 02 06 5E 40 03 02 40 00  // ..^@Di....^@..@.
    BCA0: 15 05 40 04 0D 02 03 5E 40 56 00 01 4A 25 FC 5D  // ..@....^@V..J%.]
    BCB0: 01 49 14 0A 03 02 40 00 15 05 40 05 03 00 41 03  // .I....@...@...A.
    BCC0: 5E 09 02 41 40 09 05 40 20 20 20 20 3E 02 41 40  // ^..A@..@    >.A@
    BCD0: 44 14 0A 51 02 2D 05 01 01 00 00 00 3E 05 01 A0  // D..Q.-......>...
    BCE0: 86 01 00 49 D2 09 01 25 F7 5D 07 43 9A 0F 03 02  // ...I...%.].C....
    BCF0: 40 00 15 05 40 04 69 05 40 FF FF FF FF 07 02 03  // @...@.i.@.......
    BD00: 5E 40 56 00 01 4A 25 FC 5D 01 49 69 0A 03 02 40  // ^@V..J%.].Ii...@
    BD10: 00 15 05 40 05 03 00 41 03 5E 09 02 41 40 3E 05  // ...@...A.^..A@>.
    BD20: 41 00 00 00 00 44 69 0A 51 02 2D 05 01 01 00 00  // A....Di.Q.-.....
    BD30: 00 3E 05 01 A0 86 01 00 49 2B 0A 01 25 F7 5D 08  // .>......I+..%.].
    BD40: 43 9A 0F 03 02 40 00 15 05 40 02 69 05 40 FF FF  // C....@...@.i.@..
    BD50: FF FF 07 02 03 5E 40 03 02 40 00 15 05 40 01 09  // .....^@..@...@..
    BD60: 05 40 02 02 02 02 0D 02 03 5E 40 43 9A 0F 4A 25  // .@.......^@C..J%
    BD70: FC 5D 01 49 9A 0F 56 00 40 20 25 00 02 03 0A 41  // .].I..V.@ %....A
    BD80: 48 03 02 48 40 0D E5 2E 5D 10 03 0A 48 41 3D A5  // H..H@...]...HA=.
    BD90: 00 00 44 C0 0A 0D 65 F0 5D F0 0D A5 F0 5D 01 0D  // ..D...e.]....]..
    BDA0: A5 E9 5D 01 3D A5 00 00 44 DC 0A 4A 05 06 5E 33  // ..].=...D..J..^3
    BDB0: 33 00 00 44 ED 0B 03 02 40 00 15 05 40 01 69 05  // 3..D....@...@.i.
    BDC0: 40 FF FF FF FF 07 02 03 5E 40 03 02 40 00 15 05  // @.......^@..@...
    BDD0: 40 02 09 05 40 04 04 04 04 0D 02 03 5E 40 03 00  // @...@.......^@..
    BDE0: 40 06 5E 4C 25 00 01 44 17 0B 09 05 40 FC FF FF  // @.^L%..D....@...
    BDF0: FF 4C 65 00 01 44 25 0B 09 05 40 CF FF FF FF 4C  // .Le..D%...@....L
    BE00: A5 00 01 44 33 0B 09 05 40 FF FC FF FF 4C E5 00  // ...D3...@....L..
    BE10: 01 44 41 0B 09 05 40 FF CF FF FF 01 02 06 5E 40  // .DA...@.......^@
    BE20: 03 02 40 00 15 05 40 04 0D 02 03 5E 40 56 00 01  // ..@...@....^@V..
    BE30: 4A 25 FC 5D 01 49 9A 0F 03 02 40 00 15 05 40 05  // J%.].I....@...@.
    BE40: 03 00 41 03 5E 09 02 41 40 09 05 40 20 20 20 20  // ..A.^..A@..@    
    BE50: 3E 02 41 40 44 98 0B 51 02 2D 05 01 01 00 00 00  // >.A@D..Q.-......
    BE60: 3E 05 01 A0 86 01 00 49 56 0B 01 25 F7 5D 09 43  // >......IV..%.].C
    BE70: 9A 0F 03 02 40 00 15 05 40 04 69 05 40 FF FF FF  // ....@...@.i.@...
    BE80: FF 07 02 03 5E 40 56 00 01 4A 25 FC 5D 01 49 9A  // ....^@V..J%.].I.
    BE90: 0F 03 02 40 00 15 05 40 05 03 00 41 03 5E 09 02  // ...@...@...A.^..
    BEA0: 41 40 3E 05 41 00 00 00 00 44 ED 0B 51 02 2D 05  // A@>.A....D..Q.-.
    BEB0: 01 01 00 00 00 3E 05 01 A0 86 01 00 49 AF 0B 01  // .....>......I...
    BEC0: 25 F7 5D 0A 43 9A 0F 03 02 40 00 15 05 40 03 09  // %.].C....@...@..
    BED0: 05 40 08 08 08 08 0D 02 03 5E 40 43 9A 0F 03 02  // .@.......^@C....
    BEE0: 40 00 15 05 40 03 69 05 40 FF FF FF FF 07 02 03  // @...@.i.@.......
    BEF0: 5E 40 3D 25 00 03 48 20 0D 03 00 40 06 5E 4C 25  // ^@=%..H ...@.^L%
    BF00: 00 01 44 36 0C 5E 05 40 FC FF FF FF 03 00 00 00  // ..D6.^.@........
    BF10: 4C 65 00 01 44 48 0C 5E 05 40 CF FF FF FF 30 00  // Le..DH.^.@....0.
    BF20: 00 00 4C A5 00 01 44 5A 0C 5E 05 40 FF FC FF FF  // ..L...DZ.^.@....
    BF30: 00 03 00 00 4C E5 00 01 44 6C 0C 5E 05 40 FF CF  // ....L...Dl.^.@..
    BF40: FF FF 00 30 00 00 3C 02 06 5E 40 44 20 0D 01 02  // ...0..<..^@D ...
    BF50: 06 5E 40 03 02 40 00 15 05 40 04 0D 02 03 5E 40  // .^@..@...@....^@
    BF60: 56 00 01 4A 25 FC 5D 01 49 CB 0C 03 02 40 00 15  // V..J%.].I....@..
    BF70: 05 40 05 03 00 41 03 5E 09 02 41 40 09 05 40 20  // .@...A.^..A@..@ 
    BF80: 20 20 20 3E 02 41 40 44 CB 0C 51 02 2D 05 01 01  //    >.A@D..Q.-...
    BF90: 00 00 00 3E 05 01 A0 86 01 00 49 89 0C 01 25 F7  // ...>......I...%.
    BFA0: 5D 07 43 9A 0F 03 02 40 00 15 05 40 04 69 05 40  // ].C....@...@.i.@
    BFB0: FF FF FF FF 07 02 03 5E 40 56 00 01 4A 25 FC 5D  // .......^@V..J%.]
    BFC0: 01 49 20 0D 03 02 40 00 15 05 40 05 03 00 41 03  // .I ...@...@...A.
    BFD0: 5E 09 02 41 40 3E 05 41 00 00 00 00 44 20 0D 51  // ^..A@>.A....D .Q
    BFE0: 02 2D 05 01 01 00 00 00 3E 05 01 A0 86 01 00 49  // .-......>......I
    BFF0: E2 0C 01 25 F7 5D 08 43 9A 0F 07 A5 F0 5D FE 4C  // ...%.].C.....].L
    C000: 25 00 01 44 31 0D 07 65 F0 5D EF 4C 65 00 01 44  // %..D1..e.].Le..D
    C010: 3D 0D 07 65 F0 5D DF 4C A5 00 01 44 49 0D 07 65  // =..e.].L...DI..e
    C020: F0 5D BF 4C E5 00 01 44 55 0D 07 65 F0 5D 7F 07  // .].L...DU..e.]..
    C030: A5 E9 5D FE 56 00 40 20 25 00 02 03 0A 48 40 07  // ..].V.@ %....H@.
    C040: E5 2E 5D EF 43 9A 0F 66 1E 2D 0D 42 C4 00 3D A5  // ..].C..f.-.B..=.
    C050: 00 02 44 A8 0D 2D 0D 42 0C 00 3D A5 00 03 49 9A  // ..D..-.B..=...I.
    C060: 0F 3D 05 01 30 75 00 00 47 A8 0D 3D 05 01 40 9C  // .=..0u..G..=..@.
    C070: 00 00 46 A3 0D 2D 0D 42 28 02 43 A8 0D 2D 0D 42  // ..F..-.B(.C..-.B
    C080: 0C 00 03 21 43 00 03 A2 46 44 4C A4 46 05 00 44  // ...!C...FDL.F..D
    C090: FF 0D 03 04 40 00 00 3E 05 40 00 00 00 00 44 FF  // ....@..>.@....D.
    C0A0: 0D 56 00 41 56 00 40 03 24 40 06 00 09 25 40 3F  // .V.AV.@.$@...%@?
    C0B0: 03 22 41 40 03 24 40 07 00 09 25 40 3F 15 0D 40  // ."A@.$@...%@?..@
    C0C0: 06 0F 0A 41 40 03 64 40 08 00 09 65 40 3F 15 15  // ...A@.d@...e@?..
    C0D0: 40 04 0F 52 41 40 43 76 0F 03 21 43 00 03 A2 46  // @..RA@Cv..!C...F
    C0E0: 44 66 07 2D 0C 42 04 00 3D A5 00 03 44 23 0E 66  // Df.-.B..=...D#.f
    C0F0: 07 2D 0C 42 06 00 3D A5 00 02 49 9A 0F 03 04 41  // .-.B..=...I....A
    C100: 00 00 3E 05 41 00 00 00 00 44 9A 0F 3D 02 01 41  // ..>.A....D..=..A
    C110: 46 41 0E 4C A4 46 06 00 49 49 0E 2D 0D 42 0C 00  // FA.L.F..II.-.B..
    C120: 43 23 0E 03 04 41 08 00 43 76 0F 08 A5 00 1B 66  // C#...A..Cv.....f
    C130: 1E 2D 0D 42 C0 02 03 21 43 00 03 A2 46 44 03 0C  // .-.B...!C...FD..
    C140: 46 02 00 4C A4 46 00 00 49 C0 0E 66 1E 2D 0D 42  // F..L.F..I..f.-.B
    C150: E8 00 3D 05 01 48 3F 00 00 47 AB 0E 66 1E 2D 0D  // ..=..H?..G..f.-.
    C160: 42 50 02 3D 05 01 78 69 00 00 47 AB 0E 66 1E 2D  // BP.=..xi..G..f.-
    C170: 0D 42 88 02 3D 05 01 F0 D2 00 00 47 AB 0E 66 1E  // .B..=......G..f.
    C180: 2D 0D 42 20 01 03 21 43 00 03 A2 46 44 03 0C 46  // -.B ..!C...FD..F
    C190: 02 00 4C A4 46 00 00 44 1B 0F 2D 0D 42 06 00 56  // ..L.F..D..-.B..V
    C1A0: 20 41 3D A4 00 00 00 44 E3 0E 2D 25 41 01 3E 25  //  A=....D..-%A.>%
    C1B0: 41 0A 44 1B 0F 2D 0D 42 05 00 43 C8 0E 56 00 41  // A.D..-.B..C..V.A
    C1C0: 56 00 40 03 24 40 01 00 09 25 40 3F 03 22 41 40  // V.@.$@...%@?."A@
    C1D0: 03 24 40 02 00 09 25 40 3F 15 0D 40 06 0F 0A 41  // .$@...%@?..@...A
    C1E0: 40 03 64 40 03 00 09 65 40 3F 15 15 40 04 0F 52  // @.d@...e@?..@..R
    C1F0: 41 40 43 76 0F 66 07 2D 0C 42 08 00 03 21 43 00  // A@Cv.f.-.B...!C.
    C200: 03 A2 46 44 03 04 41 00 00 3E 05 41 00 00 00 00  // ..FD..A..>.A....
    C210: 44 9A 0F 3D 02 01 41 46 48 0F 4C A4 46 04 00 49  // D..=..AFH.L.F..I
    C220: 50 0F 2D 0D 42 44 00 43 2A 0F 2D 0D 42 08 00 3D  // P.-.BD.C*.-.B..=
    C230: A4 00 00 00 44 71 0F 03 24 41 00 00 3E 25 41 18  // ....Dq..$A..>%A.
    C240: 44 71 0F 2D 0D 42 06 00 43 55 0F 03 04 41 01 00  // Dq.-.B..CU...A..
    C250: 5C 02 0F 5E 00 00 FC FF 41 5C 02 10 5E 00 00 FC  // \..^....A\..^...
    C260: FF 41 5C 02 11 5E 00 00 FC FF 41 5C 02 12 5E 00  // .A\..^....A\..^.
    C270: 00 FC FF 41 3A 00 00 5B 7A 0A 00 00 00 D8 00 B0  // ...A:..[z.......
    C280: 01 88 02 60 03 7A 48 00 48 3F 00 00 00 00 10 28  // ...`.zH.H?.....(
    C290: 78 69 00 00 00 00 10 28 F0 D2 00 00 00 00 10 26  // xi.....(.......&
    C2A0: 68 3C 01 00 00 00 10 26 60 54 00 00 00 00 10 26  // h<.....&`T.....&
    C2B0: EC 5E 00 00 00 00 10 2A 90 7E 00 00 00 00 10 28  // .^.....*.~.....(
    C2C0: C0 A8 00 00 00 00 10 26 00 00 00 00 00 00 10 28  // .......&.......(
    C2D0: 1B 02 01 02 00 00 37 00 00 3D 0D 00 00 00 44 CE  // ......7..=....D.
    C2E0: 01 56 00 41 03 21 41 01 09 25 41 0F 15 0D 41 02  // .V.A.!A..%A...A.
    C2F0: 03 0A 40 42 66 FF 2D 0D 42 07 02 2D 0A 42 41 03  // ..@Bf.-.B..-.BA.
    C300: 0C 48 02 00 0D A5 90 5D 01 54 08 90 5D 03 0C 48  // .H.....].T..]..H
    C310: 00 00 03 F9 41 01 15 3D 41 04 5C BA 10 54 8F 41  // ....A..=A.\..T.A
    C320: 03 0A 42 40 4A 25 10 54 01 49 81 00 0D 0D 10 54  // ..B@J%.T.I.....T
    C330: 01 01 0D 25 10 54 10 4A 25 10 54 20 44 67 00 07  // ...%.T.J%.T Dg..
    C340: 25 10 54 EF 4A 25 10 54 20 49 74 00 0D 25 13 54  // %.T.J%.T It..%.T
    C350: 40 56 00 41 03 09 41 00 3B 02 41 03 3B 41 00 1B  // @V.A..A.;.A.;A..
    C360: 25 41 04 01 A2 11 54 41 03 69 41 01 15 2D 41 04  // %A....TA.iA..-A.
    C370: 01 2A 11 54 41 56 00 40 0F E5 40 80 03 73 40 00  // .*.TAV.@..@..s@.
    C380: 01 02 16 54 40 56 00 40 03 6B 40 00 01 02 16 54  // ...T@V.@.k@....T
    C390: 40 03 63 40 00 01 02 16 54 40 03 7B 40 00 09 65  // @.c@....T@.{@..e
    C3A0: 40 0F 01 02 16 54 40 3E 25 41 04 47 10 01 33 25  // @....T@>%A.G..3%
    C3B0: 41 04 2D 05 46 04 00 00 00 03 63 40 00 01 02 16  // A.-.F.....c@....
    C3C0: 54 40 03 6B 40 00 01 02 16 54 40 03 73 40 00 01  // T@.k@....T@.s@..
    C3D0: 02 16 54 40 03 7B 40 00 01 02 16 54 40 43 D7 00  // ..T@.{@....T@C..
    C3E0: 0D 25 13 54 02 0D 25 11 54 01 03 29 40 01 21 25  // .%.T..%.T..)@.!%
    C3F0: 40 0A 2D 25 40 96 4A 25 14 54 01 49 42 01 51 14  // @.-%@.J%.T.IB.Q.
    C400: 33 25 40 01 3E 25 40 00 49 26 01 02 65 01 01 43  // 3%@.>%@.I&..e..C
    C410: CA 01 4A 05 14 54 F0 8F FF 00 44 54 01 02 65 01  // ..J..T....DT..e.
    C420: 02 43 CA 01 01 05 16 54 01 00 00 80 03 00 40 16  // .C.....T......@.
    C430: 54 02 6A 01 40 02 B8 01 14 54 08 A5 01 1F 3D A5  // T.j.@....T....=.
    C440: 01 00 46 7C 01 02 65 01 03 43 CA 01 32 A5 01 01  // ..F|..e..C..2...
    C450: 3D 8D 00 00 00 44 CA 01 3D A5 01 00 44 CA 01 03  // =....D..=...D...
    C460: 31 41 01 03 19 40 00 56 18 40 3B 02 40 03 28 40  // 1A...@.V.@;.@.(@
    C470: 16 54 03 68 40 16 54 03 A8 40 16 54 03 E8 40 16  // .T.h@.T..@.T..@.
    C480: 54 04 02 00 40 3E 25 41 04 47 CA 01 33 25 41 04  // T...@>%A.G..3%A.
    C490: 2D 05 46 04 00 00 00 43 9D 01 3A 00 00 5B 66 FF  // -.F....C..:..[f.
    C4A0: 2D 0D 42 07 02 03 0C 48 00 00 01 8D 18 54 18 00  // -.B....H.....T..
    C4B0: 01 05 19 54 4D 1C 02 00 01 05 1A 54 10 11 3D 10  // ...TM......T..=.
    C4C0: 2D 0D 42 04 00 2C 25 00 01 3D 25 00 05 49 D5 01  // -.B..,%..=%..I..
    C4D0: 56 08 48 5B 7A 14 00 00 00 00 00 1C 00 04 00 38  // V.H[z..........8
    C4E0: 00 08 00 54 00 0C 00 70 00 10 00 00 5A 00 01 02  // ...T...p....Z...
    C4F0: 00 04 02 25 01 04 03 31 41 00 09 0D 41 0F 00 15  // ...%...1A...A...
    C500: 0D 41 01 66 FF 2D 0D 42 50 00 2D 0A 42 41 03 0C  // .A.f.-.BP.-.BA..
    C510: 48 00 00 07 A5 90 5D FE 01 0D 90 5D 11 11 50 02  // H.....]....]..P.
    C520: 4A 0D 93 5D 01 00 49 41 00 02 25 01 13 54 08 90  // J..]..IA..%..T..
    C530: 5D 54 00 92 5D 3A 00 00 5B 7A 0A 00 00 00 04 00  // ]T..]:..[z......
    C540: 08 00 0C 00 10 00 62 01 02 01 04 04 37 00 00 42  // ......b.....7..B
    C550: 21 00 63 07 29 00 63 03 4E 00 63 02 60 00 63 04  // !.c.).c.N.c.`.c.
    C560: 84 00 63 0C 19 01 63 0D 22 01 5A 5A 43 61 01 01  // ..c...c.".ZZCa..
    C570: 0D 45 5D 9F 0F 66 06 01 24 47 5D 30 00 01 4C 47  // .E]..f..$G]0..LG
    C580: 5D 31 00 03 24 46 3B 00 3E 25 46 00 44 61 01 54  // ]1..$F;.>%F.Da.T
    C590: 20 47 5D 5B 0D E5 47 5D 01 5C 05 43 5D FF FF FF  //  G][..G].\.C]...
    C5A0: FD 11 00 03 00 5B 0D E5 47 5D 01 4A 25 44 5D 02  // .....[..G].J%D].
    C5B0: 44 72 00 0D A5 43 5D 01 0D A5 43 5D 02 5C 05 43  // Dr...C]...C].\.C
    C5C0: 5D EF FF FF FD 01 00 00 00 5B 4A 05 53 00 00 02  // ]........[J.S...
    C5D0: 00 00 44 94 00 0D 25 4B 5D 01 3D 8D 00 00 00 44  // ..D...%K].=....D
    C5E0: 18 01 03 05 46 00 36 6E 01 56 00 41 03 19 41 00  // ....F.6n.V.A..A.
    C5F0: 21 05 41 FF 0F 00 00 27 02 46 40 3E 05 41 00 00  // !.A....'.F@>.A..
    C600: 00 00 44 C4 00 2D 0D 40 01 00 01 8A 45 5D 40 56  // ..D..-.@....E]@V
    C610: 00 41 03 19 41 00 21 02 40 41 27 02 46 40 01 A5  // .A..A.!.@A'.F@..
    C620: 4A 5D 0C 01 0A 4A 5D 40 15 05 40 04 56 00 41 03  // J]...J]@..@.V.A.
    C630: 29 41 00 3E 25 41 FF 49 F9 00 2D 0D 41 01 00 21  // )A.>%A.I..-.A..!
    C640: 02 40 41 1B 05 40 08 01 0A 48 5D 40 0D E5 48 5D  // .@A..@...H]@..H]
    C650: C0 07 25 4B 5D FE 4A 65 4B 5D 01 49 10 01 5B 01  // ..%K].JeK].I..[.
    C660: 05 43 5D 00 00 03 00 5B 0D E5 47 5D 01 4A 05 43  // .C]....[..G].J.C
    C670: 5D 01 00 00 00 44 48 01 4A 05 43 5D 10 00 00 00  // ]....DH.J.C]....
    C680: 49 55 01 4A 05 44 5D 01 00 00 00 49 3D 01 5C 05  // IU.J.D]....I=.\.
    C690: 43 5D FF FF FE FF 00 00 02 00 5B 5C 05 43 5D EF  // C]........[\.C].
    C6A0: FF FD FD 01 00 00 00 5B 9E 00 03 02 00 10 37 00  // .......[......7.
    C6B0: 00 01 05 00 00 2C A8 01 00 03 00 46 01 00 1B 05  // .....,.....F....
    C6C0: 46 08 3D 65 02 00 49 25 00 2C 22 02 46 3D E5 02  // F.=e..I%.,".F=..
    C6D0: 00 49 30 00 2C A2 02 46 3D 65 02 02 49 37 00 03  // .I0.,..F=e..I7..
    C6E0: 01 40 03 09 05 40 00 00 00 FC 3E 05 40 00 00 00  // .@...@....>.@...
    C6F0: D0 49 5D 00 01 05 63 C0 00 00 00 40 55 00 00 55  // .I]...c....@U..U
    C700: 20 02 43 61 00 54 00 63 C0 01 01 64 C0 00 56 00  //  .Ca.T.c...d..V.
    C710: 40 03 21 40 02 01 02 65 C0 40 01 01 66 C0 01 03  // @.!@...e.@..f...
    C720: 31 40 02 01 02 67 C0 40 01 01 E8 C0 03 3D 65 02  // 1@...g.@.....=e.
    C730: 01 44 95 00 3D E5 02 01 44 95 00 51 02 4A E5 A0  // .D..=...D..Q.J..
    C740: 21 80 49 95 00 5B 88 01 02 02 00 00 37 00 00 3D  // !.I..[......7..=
    C750: 25 01 01 44 77 00 3D 25 01 02 44 78 00 3D 25 01  // %..Dw.=%..Dx.=%.
    C760: 03 44 33 00 3D 25 01 00 49 71 01 3D 05 00 00 00  // .D3.=%..Iq.=....
    C770: 00 00 49 53 00 3A 00 00 5B 26 05 00 64 00 00 00  // ..IS.:..[&..d...
    C780: 02 02 01 40 02 05 00 07 00 00 00 52 13 20 05 01  // ...@.......R. ..
    C790: 64 00 00 00 02 02 00 40 5B 54 20 A4 53 26 05 00  // d......@[T .S&..
    C7A0: 64 00 00 00 02 02 01 40 02 05 00 04 00 00 00 52  // d......@.......R
    C7B0: 13 20 05 01 64 00 00 00 02 02 00 40 5B 5B 66 FF  // . ..d......@[[f.
    C7C0: 2D 0D 42 78 01 56 00 41 03 39 41 01 15 25 41 02  // -.Bx.V.A.9A..%A.
    C7D0: 2D 0A 42 41 3D 65 01 0B 49 EB 00 20 05 00 64 00  // -.BA=e..I.. ..d.
    C7E0: 00 00 03 0C 48 02 00 03 00 41 40 01 0F 25 41 10  // ....H....A@..%A.
    C7F0: 09 0D 41 DF FF 03 0C 48 00 00 4A 05 01 50 01 00  // ..A....H..J..P..
    C800: 00 00 44 D4 00 03 0C 48 02 00 3C 02 41 01 40 49  // ..D....H..<.A.@I
    C810: D4 00 3C 02 40 01 41 44 71 01 03 0C 48 02 00 07  // ..<.@.ADq...H...
    C820: 25 40 01 EF 01 02 41 01 40 01 0A 40 01 41 43 71  // %@....A.@..@.ACq
    C830: 01 56 00 40 03 8D 40 0C 00 3D 65 01 18 44 02 01  // .V.@..@..=e..D..
    C840: 03 A9 40 01 33 A5 40 14 03 31 40 01 09 25 40 03  // ..@.3.@..1@..%@.
    C850: 15 25 40 04 0F 0D 40 01 01 56 00 41 03 29 41 01  // .%@...@..V.A.)A.
    C860: 33 25 41 14 03 0C 48 00 00 4A 05 01 50 01 00 00  // 3%A...H..J..P...
    C870: 00 44 4F 01 03 0C 48 02 00 4A 25 40 01 10 49 4F  // .DO...H..J%@..IO
    C880: 01 3C 22 43 01 41 49 4F 01 03 1A 48 40 3C 0A 00  // .<"C.AIO...H@<..
    C890: 01 40 44 71 01 03 1A 48 40 07 25 00 01 FE 03 0C  // .@Dq...H@.%.....
    C8A0: 48 02 00 01 22 43 01 41 07 0D 40 01 EF FF 03 1A  // H..."C.A..@.....
    C8B0: 48 40 01 0A 00 01 40 3A 00 00 5B 7A 10 00 00 00  // H@....@:..[z....
    C8C0: 00 00 80 00 04 00 00 01 08 00 80 01 0C 00 E6 00  // ................
    C8D0: 01 01 04 00 37 00 00 56 00 00 66 1E 2D 0D 42 4C  // ....7..V..f.-.BL
    C8E0: 00 56 00 40 21 25 00 10 2D 0A 42 40 03 24 41 0C  // .V.@!%..-.B@.$A.
    C8F0: 00 4C 25 41 08 44 DA 00 02 25 00 64 02 0D 01 01  // .L%A.D...%.d....
    C900: 01 02 E4 01 06 00 0E E5 01 90 66 1E 43 58 00 2D  // ..........f.CX.-
    C910: 0D 42 35 02 02 A4 01 00 00 03 64 00 01 00 2D 0D  // .B5.......d...-.
    C920: 42 03 00 43 C0 00 3E 0D 00 00 00 44 7B 00 3E 0D  // B..C..>....D{.>.
    C930: 00 01 00 44 92 00 3E 0D 00 02 00 44 A9 00 3E 0D  // ...D..>....D..>.
    C940: 00 03 00 44 41 00 43 DA 00 2D 0D 42 E4 01 02 A4  // ...DA.C..-.B....
    C950: 01 00 00 03 64 00 01 00 2D 0D 42 03 00 43 C0 00  // ....d...-.B..C..
    C960: 2D 0D 42 FF 01 02 A4 01 00 00 03 64 00 01 00 2D  // -.B........d...-
    C970: 0D 42 03 00 43 C0 00 2D 0D 42 1A 02 02 A4 01 00  // .B..C..-.B......
    C980: 00 03 64 00 01 00 2D 0D 42 03 00 43 C0 00 3E 65  // ..d...-.B..C..>e
    C990: 00 00 44 DA 00 33 65 00 01 02 4C 00 00 00 52 36  // ..D..3e...L...R6
    C9A0: 2D 0D 42 02 00 43 C0 00 2D 25 00 01 3E 25 00 04  // -.B..C..-%..>%..
    C9B0: 45 0C 00 5B 54 01 02 01 D6 09 80 02 A0 00 E0 01  // E..[T...........
    C9C0: 2D 00 10 00 60 00 0A 00 02 00 00 00 00 00 08 08  // -...`...........
    C9D0: 06 00 12 3C A0 0F 20 03 00 01 58 02 1C 00 28 00  // ...<.. ...X...(.
    C9E0: 80 00 01 00 04 00 00 00 00 00 00 00 00 00 6A 3C  // ..............j<
    C9F0: 64 19 00 04 40 01 00 03 26 00 18 00 88 00 03 00  // d...@...&.......
    CA00: 06 00 00 00 00 00 00 00 06 00 55 3C 01 1D 00 05  // ..........U<....
    CA10: 72 01 D0 02 1E 00 6E 00 28 00 05 00 05 00 00 00  // r.....n.(.......
    CA20: 00 00 00 00 00 00 E8 3C 30 2A 00 05 08 02 C0 03  // .......<0*......
    CA30: 28 00 60 00 70 00 01 00 03 00 00 00 00 00 00 00  // (.`.p...........
    CA40: 00 00 E9 3C 30 2A 00 05 98 01 00 04 2A 00 30 00  // ...<0*......*.0.
    CA50: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 EA 3C  // p..............<
    CA60: 66 21 56 05 AA 01 00 03 1E 00 46 00 8F 00 03 00  // f!V.......F.....
    CA70: 03 00 00 00 00 00 00 00 02 00 ED 3C 8F 2F 78 05  // ...........<./x.
    CA80: D0 01 1A 04 27 00 58 00 90 00 03 00 04 00 00 00  // ....'.X.........
    CA90: 00 00 00 00 02 00 EB 3C 48 3F 40 06 30 02 B0 04  // .......<H?@.0...
    CAA0: 32 00 40 00 C0 00 01 00 03 00 00 00 00 00 00 00  // 2.@.............
    CAB0: 00 00 EC 3C 02 3A 80 07 18 01 38 04 2D 00 58 00  // ...<.:....8.-.X.
    CAC0: 2C 00 04 00 05 00 00 00 00 00 00 00 02 00 F3 3C  // ,..............<
    CAD0: 7D 4B 80 07 A0 02 B0 04 2D 00 88 00 C8 00 03 00  // }K......-.......
    CAE0: 06 00 00 00 00 00 00 00 02 00 F0 3C 68 5B 80 07  // ...........<h[..
    CAF0: A8 02 A0 05 3C 00 80 00 D0 00 01 00 03 00 00 00  // ....<...........
    CB00: 00 00 00 00 02 00 F1 3C 48 00 03 02 1C 00 0A 11  // .......<H.......
    CB10: 20 4E 00 00 20 4E 00 00 01 00 00 00 58 2D 00 00  //  N.. N......X-..
    CB20: 4C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // L...............
    CB30: F4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CB40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CB50: 04 03 02 01 00 00 00 00 00 2A 00 2A 00 00 2A 2A  // .........*.*..**
    CB60: 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A 15 15 15 15  // *..*.**..***....
    CB70: 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F  // .?.?..???..?.???
    CB80: 15 3F 3F 3F 00 00 00 05 05 05 08 08 08 0B 0B 0B  // .???............
    CB90: 0E 0E 0E 11 11 11 14 14 14 18 18 18 1C 1C 1C 20  // ............... 
    CBA0: 20 20 24 24 24 28 28 28 2D 2D 2D 32 32 32 38 38  //   $$$(((---22288
    CBB0: 38 3F 3F 3F 00 00 3F 10 00 3F 1F 00 3F 2F 00 3F  // 8???..?..?..?/.?
    CBC0: 3F 00 3F 3F 00 2F 3F 00 1F 3F 00 10 3F 00 00 3F  // ?.??./?..?..?..?
    CBD0: 10 00 3F 1F 00 3F 2F 00 3F 3F 00 2F 3F 00 1F 3F  // ..?..?/.??./?..?
    CBE0: 00 10 3F 00 00 3F 00 00 3F 10 00 3F 1F 00 3F 2F  // ..?..?..?..?..?/
    CBF0: 00 3F 3F 00 2F 3F 00 1F 3F 00 10 3F 1F 1F 3F 27  // .??./?..?..?..?'
    CC00: 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 3F 3F 1F 37 3F 1F  // .?/.?7.??.??.7?.
    CC10: 2F 3F 1F 27 3F 1F 1F 3F 27 1F 3F 2F 1F 3F 37 1F  // /?.'?..?'.?/.?7.
    CC20: 3F 3F 1F 37 3F 1F 2F 3F 1F 27 3F 1F 1F 3F 1F 1F  // ??.7?./?.'?..?..
    CC30: 3F 27 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 37 3F 1F 2F  // ?'.?/.?7.??.7?./
    CC40: 3F 1F 27 3F 2D 2D 3F 31 2D 3F 36 2D 3F 3A 2D 3F  // ?.'?--?1-?6-?:-?
    CC50: 3F 2D 3F 3F 2D 3A 3F 2D 36 3F 2D 31 3F 2D 2D 3F  // ?-??-:?-6?-1?--?
    CC60: 31 2D 3F 36 2D 3F 3A 2D 3F 3F 2D 3A 3F 2D 36 3F  // 1-?6-?:-??-:?-6?
    CC70: 2D 31 3F 2D 2D 3F 2D 2D 3F 31 2D 3F 36 2D 3F 3A  // -1?--?--?1-?6-?:
    CC80: 2D 3F 3F 2D 3A 3F 2D 36 3F 2D 31 3F 00 00 1C 07  // -??-:?-6?-1?....
    CC90: 00 1C 0E 00 1C 15 00 1C 1C 00 1C 1C 00 15 1C 00  // ................
    CCA0: 0E 1C 00 07 1C 00 00 1C 07 00 1C 0E 00 1C 15 00  // ................
    CCB0: 1C 1C 00 15 1C 00 0E 1C 00 07 1C 00 00 1C 00 00  // ................
    CCC0: 1C 07 00 1C 0E 00 1C 15 00 1C 1C 00 15 1C 00 0E  // ................
    CCD0: 1C 00 07 1C 0E 0E 1C 11 0E 1C 15 0E 1C 18 0E 1C  // ................
    CCE0: 1C 0E 1C 1C 0E 18 1C 0E 15 1C 0E 11 1C 0E 0E 1C  // ................
    CCF0: 11 0E 1C 15 0E 1C 18 0E 1C 1C 0E 18 1C 0E 15 1C  // ................
    CD00: 0E 11 1C 0E 0E 1C 0E 0E 1C 11 0E 1C 15 0E 1C 18  // ................
    CD10: 0E 1C 1C 0E 18 1C 0E 15 1C 0E 11 1C 14 14 1C 16  // ................
    CD20: 14 1C 18 14 1C 1A 14 1C 1C 14 1C 1C 14 1A 1C 14  // ................
    CD30: 18 1C 14 16 1C 14 14 1C 16 14 1C 18 14 1C 1A 14  // ................
    CD40: 1C 1C 14 1A 1C 14 18 1C 14 16 1C 14 14 1C 14 14  // ................
    CD50: 1C 16 14 1C 18 14 1C 1A 14 1C 1C 14 1A 1C 14 18  // ................
    CD60: 1C 14 16 1C 00 00 10 04 00 10 08 00 10 0C 00 10  // ................
    CD70: 10 00 10 10 00 0C 10 00 08 10 00 04 10 00 00 10  // ................
    CD80: 04 00 10 08 00 10 0C 00 10 10 00 0C 10 00 08 10  // ................
    CD90: 00 04 10 00 00 10 00 00 10 04 00 10 08 00 10 0C  // ................
    CDA0: 00 10 10 00 0C 10 00 08 10 00 04 10 08 08 10 0A  // ................
    CDB0: 08 10 0C 08 10 0E 08 10 10 08 10 10 08 0E 10 08  // ................
    CDC0: 0C 10 08 0A 10 08 08 10 0A 08 10 0C 08 10 0E 08  // ................
    CDD0: 10 10 08 0E 10 08 0C 10 08 0A 10 08 08 10 08 08  // ................
    CDE0: 10 0A 08 10 0C 08 10 0E 08 10 10 08 0E 10 08 0C  // ................
    CDF0: 10 08 0A 10 0B 0B 10 0C 0B 10 0D 0B 10 0F 0B 10  // ................
    CE00: 10 0B 10 10 0B 0F 10 0B 0D 10 0B 0C 10 0B 0B 10  // ................
    CE10: 0C 0B 10 0D 0B 10 0F 0B 10 10 0B 0F 10 0B 0D 10  // ................
    CE20: 0B 0C 10 0B 0B 10 0B 0B 10 0C 0B 10 0D 0B 10 0F  // ................
    CE30: 0B 10 10 0B 0F 10 0B 0D 10 0B 0C 10 00 00 00 00  // ................
    CE40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE50: 00 00 00 00 5C 00 02 01 63 63 00 0A A0 00 A0 05  // ....\...cc......
    CE60: 77 00 30 00 20 00 03 00 05 00 58 01 C1 00 00 00  // w.0. .....X.....
    CE70: 06 00 00 3C D0 07 00 00 02 00 34 21 00 00 B8 0B  // ...<......4!....
    CE80: 00 00 00 00 7D 00 03 02 0B 14 44 41 00 FF FF 00  // ....}.....DA....
    CE90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CEA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CEB0: 0C 00 02 01 00 00 00 00 00 00 00 00 00 04 01 0C  // ................
    CEC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CED0: 77 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // w...............
    CEE0: 00 00 00 00 D0 07 1A 02 00 00 00 00 00 00 03 00  // ................
    CEF0: 00 00 00 00 8C 00 01 01 00 00 00 00 00 00 00 00  // ................
    CF00: 00 00 00 00 00 00 00 00 02 00 10 01 14 31 00 00  // .............1..
    CF10: 00 00 E4 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF30: 00 00 00 00 00 00 00 00 08 00 10 02 13 31 02 02  // .............1..
    CF40: 00 00 E4 00 00 01 00 00 80 00 20 02 13 32 03 03  // .......... ..2..
    CF50: 00 00 E4 00 00 01 00 00 00 00 00 00 00 00 00 00  // ................
    CF60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CFA0: 00 00 00 00 00 00 00 00 00 00 FF FF FF FF FF FF  // ................
    CFB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CFC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CFD0: FF FF FF FF FF FF FF FF FF FF FF FF 00 00 00 00  // ................
    CFE0: 00 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CFF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D000: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D010: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D110: 00 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D120: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D130: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D140: FF FF FF FF 00 00 00 00 00 00 FF FF FF FF FF FF  // ................
    D150: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D160: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D170: FF FF FF FF FF FF FF FF FF FF FF FF 00 00 00 00  // ................
    D180: 00 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D190: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D1A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D1B0: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D2A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D2B0: 00 00 00 00 00 00 00 00 00 00 00 00 54 00 02 01  // ............T...
    D2C0: B5 5D 00 00 00 00 01 00 B5 5D 00 00 08 08 02 00  // .].......]......
    D2D0: B5 5D 00 00 10 10 03 00 B5 5D 00 00 18 14 04 00  // .].......]......
    D2E0: B5 5D 00 00 1A 18 05 00 91 5D 00 00 08 08 90 00  // .].......]......
    D2F0: 95 5D 00 00 08 08 91 00 99 5D 00 00 08 08 92 00  // .].......]......
    D300: 9D 5D 00 00 08 08 93 00 A1 5D 00 00 08 08 94 00  // .].......]......
    D310: 9C 00 01 01 10 01 06 12 11 01 16 12 21 01 0A 12  // ............!...
    D320: 13 01 06 6A 14 01 16 6A 22 01 0A 6A 16 01 06 55  // ...j...j"..j...U
    D330: 17 01 16 55 23 01 0A 55 63 01 16 E8 64 01 0A E8  // ...U#..Uc...d...
    D340: 65 01 16 E9 66 01 0A E9 19 01 06 EA 1A 01 16 EA  // e...f...........
    D350: 24 01 0A EA 47 01 16 ED 48 01 0A ED 45 01 16 EB  // $...G...H...E...
    D360: 46 01 0A EB 75 01 16 EC 76 01 0A EC A5 01 16 F3  // F...u...v.......
    D370: A6 01 0A F3 A0 01 16 F0 A1 01 0A F0 A2 01 16 F1  // ................
    D380: A3 01 0A F1 D2 01 16 70 D4 01 0A 70 D8 01 16 71  // .......p...p...q
    D390: D9 01 0A 71 E2 01 16 72 E4 01 0A 72 E8 01 16 73  // ...q...r...r...s
    D3A0: E9 01 0A 73 F5 01 16 74 F6 01 0A 74 00 04 09 01  // ...s...t...t....
    D3B0: 14 00 02 01 02 00 08 00 80 00 00 02 00 04 00 08  // ................
    D3C0: 40 00 FF FF EB 00 01 04 8A 00 06 00 14 31 68 00  // @............1h.
    D3D0: 1E 21 00 00 B3 00 00 00 02 00 00 00 00 00 77 00  // .!............w.
    D3E0: 1E 22 00 00 BA 00 00 00 00 00 00 00 00 00 86 00  // ."..............
    D3F0: 20 21 00 00 C1 00 00 00 00 00 00 00 13 31 95 00  //  !...........1..
    D400: 20 22 00 00 C8 00 00 00 08 00 00 00 13 32 A4 00  //  "...........2..
    D410: 21 21 00 00 CF 00 00 00 80 00 00 00 03 71 D6 00  // !!...........q..
    D420: 00 00 00 00 00 00 00 00 00 00 00 00 01 04 90 00  // ................
    D430: 02 04 01 00 17 06 00 00 00 00 FF 01 04 90 00 02  // ................
    D440: 04 00 00 17 06 00 00 00 00 FF 01 04 90 00 02 04  // ................
    D450: 00 00 17 06 00 00 00 00 FF 01 04 92 00 02 04 03  // ................
    D460: 00 17 06 00 00 00 00 FF 01 04 93 00 02 04 04 00  // ................
    D470: 17 06 00 00 00 00 FF 14 06 0F 00 00 00 FF 14 06  // ................
    D480: 0F 00 00 00 FF 14 06 0F 00 00 00 FF 14 06 0F 01  // ................
    D490: 00 00 FF 14 06 0F 01 00 00 FF 10 0A 01 02 03 04  // ................
    D4A0: 05 00 00 00 11 0A 90 91 92 93 94 00 00 00 FF 00  // ................
    D4B0: 05 00 01 01 00 00 38 00 04 03 04 00 00 00 70 11  // ......8.......p.
    D4C0: 01 00 C0 12 60 09 00 00 00 00 00 00 00 00 7C 01  // ....`.........|.
    D4D0: 4E 0C 01 01 00 00 55 00 00 00 C0 12 00 00 01 02  // N.....U.........
    D4E0: 04 01 00 05 05 00 00 00 00 00 00 00 00 00 06 02  // ................
    D4F0: 05 03 0E 00 36 00 46 00 5A 01 96 01 30 75 00 00  // ....6.F.Z...0u..
    D500: 0C 00 3F 05 3A 40 00 00 40 9C 00 00 0C 00 3F 05  // ..?.:@..@.....?.
    D510: 3E 00 00 00 FF FF FF 00 0C 00 3F 05 77 21 00 00  // >.........?.w!..
    D520: 00 00 00 00 FF FF FF 00 0C 00 3F 05 34 A0 00 00  // ..........?.4...
    D530: 00 00 00 00 48 3F 00 00 3F 00 44 00 00 16 00 00  // ....H?..?.D.....
    D540: 00 05 01 1F 00 00 00 05 02 2C 00 00 00 05 03 3E  // .........,.....>
    D550: 00 00 00 05 08 1B 50 00 00 05 09 25 60 00 00 05  // ......P....%`...
    D560: 0A 35 90 00 00 05 10 21 B0 00 00 05 11 2F F0 00  // .5.....!...../..
    D570: 00 05 18 2A 40 01 00 05 78 69 00 00 3F 00 44 00  // ...*@...xi..?.D.
    D580: 00 16 00 00 00 05 01 1F 00 00 00 05 02 2C 00 00  // .............,..
    D590: 00 05 03 3E 00 00 00 05 08 1B 50 00 00 05 09 25  // ...>......P....%
    D5A0: 60 00 00 05 0A 35 90 00 00 05 10 21 B0 00 00 05  // `....5.....!....
    D5B0: 11 2F F0 00 00 05 18 2A 40 01 00 05 F0 D2 00 00  // ./.....*@.......
    D5C0: 3F 00 44 00 00 1E 00 00 00 05 01 26 00 00 00 05  // ?.D........&....
    D5D0: 02 30 00 00 00 05 03 3E 00 00 00 05 08 22 40 00  // .0.....>....."@.
    D5E0: 00 05 09 2C 60 00 00 05 0A 37 70 00 00 05 10 27  // ...,`....7p....'
    D5F0: 90 00 00 05 11 32 C0 00 00 05 18 2E 00 01 00 05  // .....2..........
    D600: 68 3C 01 00 3F 00 44 00 00 1E 00 00 00 05 01 26  // h<..?.D........&
    D610: 00 00 00 05 02 30 00 00 00 05 03 3E 00 00 00 05  // .....0.....>....
    D620: 08 22 40 00 00 05 09 2C 60 00 00 05 0A 37 70 00  // ."@....,`....7p.
    D630: 00 05 10 27 90 00 00 05 11 32 C0 00 00 05 18 2E  // ...'.....2......
    D640: 00 01 00 05 00 00 00 00 02 03 00 01 00 01 02 03  // ................
    D650: 00 07 03 00 02 03 00 01 00 01 02 03 00 07 03 00  // ................
    D660: 02 03 00 01 00 01 02 03 00 07 03 00 00 01 02 03  // ................
    D670: 00 01 02 03 00 07 03 00 00 01 02 03 00 01 02 03  // ................
    D680: 00 07 03 00 08 30 00 00 8D 00 00 00 07 30 00 00  // .....0.......0..
    D690: 4A 25 00 00 08 31 00 00 8D 00 00 00 07 31 00 00  // J%...1.......1..
    D6A0: 4A 25 00 00 08 32 00 00 8D 00 00 00 07 32 00 00  // J%...2.......2..
    D6B0: 4A 25 00 00 08 33 00 00 8D 00 00 00 07 33 00 00  // J%...3.......3..
    D6C0: 4A 25 00 00 5A 00 00 00 05 00 00 00 EB 10 00 00  // J%..Z...........
    D6D0: 07 00 00 00 EB 11 00 00 07 00 00 00 EB 12 00 00  // ................
    D6E0: 07 00 00 00 EB 13 00 00 07 00 00 00 FF FF FF FF  // ................
    D6F0: 00 00 00 00 1C 00 03 01 00 0C 00 00 00 00 00 00  // ................
    D700: 77 01 35 0C C0 12 00 00 FF 00 FF 00 FF 00 00 00  // w.5.............
    D710: 34 00 02 03 00 09 01 02 08 01 02 02 64 C0 00 00  // 4...........d...
    D720: 65 C0 00 00 66 C0 00 00 67 C0 00 00 E8 C0 00 00  // e...f...g.......
    D730: A0 21 00 00 42 EC 00 00 C0 12 00 00 08 02 00 00  // .!..B...........
    D740: 25 00 00 00 FF FF FF FF FF FF FF FF FF FF FF FF  // %...............
    D750: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D760: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D770: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D780: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D790: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D800: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D810: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D820: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D830: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D840: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D850: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D860: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    D870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D880: 00 00 00 00                                      // ....


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 11
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]             Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 11 4C 45 4E 4F 56 4F  // WSMT(.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 00 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 07 00 00 00                          // ........


