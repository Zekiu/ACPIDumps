
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200925
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  MCFG  0x0000003C  0x01  "PTLTD "  "  MCFG  "  0x06040000  " LTP"   0x00000000
 02)  APIC  0x00000068  0x01  "PTLTD "  "  APIC  "  0x06040000  " LTP"   0x00000000
 03)  SLIC  0x00000176  0x01  "LENOVO"  "TP-6W   "  0x06040000  " LTP"   0x00000000
 04)  SSDT  0x000000A6  0x01  "PmRef "  "Cpu1Tst "  0x00003000  "INTL"   0x20050624
 05)  BOOT  0x00000028  0x01  "PTLTD "  "$SBFTBL$"  0x06040000  " LTP"   0x00000001
 06)  DSDT  0x00009012  0x01  "INTEL "  "BEARG31A"  0x06040000  "MSFT"   0x03000000
 07)  FACP  0x000000F4  0x03  "INTEL "  "        "  0x06040000  "PTL "   0x00000002
 08)  SSDT  0x000004DC  0x02  "PmRef "  "CpuPm   "  0x00003000  "INTL"   0x20050624
 09)  SSDT  0x0000025F  0x01  "PmRef "  "Cpu0Tst "  0x00003000  "INTL"   0x20050624
 10)  TCPA  0x00000032  0x01  "Phoeni"  "x       "  0x06040000  "TL  "   0x00000000
 11)  HPET  0x00000038  0x01  "PTLTD "  "HPETTBL "  0x06040000  " LTP"   0x00000001
 12)  FACS  0x00000040  0x01
 13)  SSDT  0x000000D4  0x02  "PmRef "  "Cpu1Ist "  0x00003000  "INTL"   0x20050624
 14)  SSDT  0x00000203  0x02  "PmRef "  "Cpu0Ist "  0x00003000  "INTL"   0x20050624
 15)  SSDT  0x00000085  0x02  "PmRef "  "Cpu1Cst "  0x00003000  "INTL"   0x20050624
 16)  SSDT  0x000005E5  0x02  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20050624

Found 16 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000068
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 13
[00Ah 0010   6]                       Oem ID : "PTLTD "
[010h 0016   8]                 Oem Table ID : "  APIC  "
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 01 [I/O APIC]
[03Dh 0061   1]                       Length : 0C
[03Eh 0062   1]                  I/O Apic ID : 02
[03Fh 0063   1]                     Reserved : 00
[040h 0064   4]                      Address : FEC00000
[044h 0068   4]                    Interrupt : 00000000

[048h 0072   1]                Subtable Type : 04 [Local APIC NMI]
[049h 0073   1]                       Length : 06
[04Ah 0074   1]                 Processor ID : 00
[04Bh 0075   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[04Dh 0077   1]         Interrupt Input LINT : 01

[04Eh 0078   1]                Subtable Type : 04 [Local APIC NMI]
[04Fh 0079   1]                       Length : 06
[050h 0080   1]                 Processor ID : 01
[051h 0081   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[053h 0083   1]         Interrupt Input LINT : 01

[054h 0084   1]                Subtable Type : 02 [Interrupt Source Override]
[055h 0085   1]                       Length : 0A
[056h 0086   1]                          Bus : 00
[057h 0087   1]                       Source : 00
[058h 0088   4]                    Interrupt : 00000002
[05Ch 0092   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1

[05Eh 0094   1]                Subtable Type : 02 [Interrupt Source Override]
[05Fh 0095   1]                       Length : 0A
[060h 0096   1]                          Bus : 00
[061h 0097   1]                       Source : 09
[062h 0098   4]                    Interrupt : 00000009
[066h 0102   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 104 (0x68)

    0000: 41 50 49 43 68 00 00 00 01 13 50 54 4C 54 44 20  // APICh.....PTLTD 
    0010: 09 20 41 50 49 43 20 20 00 00 04 06 20 4C 54 50  // . APIC  .... LTP
    0020: 00 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 01 0C 02 00  // ................
    0040: 00 00 C0 FE 00 00 00 00 04 06 00 05 00 01 04 06  // ................
    0050: 01 05 00 01 02 0A 00 00 02 00 00 00 05 00 02 0A  // ................
    0060: 00 09 09 00 00 00 0D 00                          // ........


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : A5
[00Ah 0010   6]                       Oem ID : "PTLTD "
[010h 0016   8]                 Oem Table ID : "$SBFTBL$"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   1]          Boot Register Index : 36
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 A5 50 54 4C 54 44 20  // BOOT(.....PTLTD 
    0010: 24 53 42 46 54 42 4C 24 00 00 04 06 20 4C 54 50  // $SBFTBL$.... LTP
    0020: 01 00 00 00 36 00 00 00                          // ....6...


DSDT
----
DefinitionBlock ("", "DSDT", 1, "INTEL", "BEARG31A", 0x06040000)
{
    External (LNKA, UnknownObj)
    External (LNKB, UnknownObj)
    External (LNKC, UnknownObj)
    External (LNKD, UnknownObj)
    External (LNKE, UnknownObj)
    External (LNKF, UnknownObj)
    External (LNKG, UnknownObj)
    External (LNKH, UnknownObj)

    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    OperationRegion (IO_T, SystemIO, 0x0800, 0x10)
    Field (IO_T, ByteAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        TRP0,   8
    }

    Name (SMIP, 0xB2)
    Name (GPBS, 0x1180)
    OperationRegion (GNVS, SystemMemory, 0x7F5E0A7C, 0x0400)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        LIDS,   8, 
        PWRS,   8, 
        DBGS,   8, 
        LINX,   8, 
        Offset (0x14), 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        Offset (0x1E), 
        BNUM,   8, 
        B0SC,   8, 
        B1SC,   8, 
        B2SC,   8, 
        B0SS,   8, 
        B1SS,   8, 
        B2SS,   8, 
        Offset (0x28), 
        APIC,   8, 
        MPEN,   8, 
        Offset (0x2B), 
        PPCM,   8, 
        PCP0,   8, 
        PCP1,   8, 
        Offset (0x32), 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        Offset (0x3C), 
        IGDS,   8, 
        TLST,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        SSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        Offset (0x67), 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        Offset (0x6E), 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        Offset (0x74), 
        MEFE,   8, 
        Offset (0x78), 
        TPMP,   8, 
        TPME,   8, 
        Offset (0x82), 
        GTF0,   56, 
        GTF2,   56, 
        IDEM,   8, 
        Offset (0xAA), 
        ASLB,   32, 
        IBTT,   8, 
        IPAT,   8, 
        ITVF,   8, 
        ITVM,   8, 
        IPSC,   8, 
        IBLC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        I409,   8, 
        I509,   8, 
        I609,   8, 
        I709,   8, 
        IDMM,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        GSMI,   8, 
        PAVP,   8, 
        Offset (0xEB), 
        DSEN,   8, 
        ECON,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        Offset (0x100), 
        CMD,    8, 
        ERR,    32, 
        PAR0,   32, 
        PAR1,   32, 
        PAR2,   32, 
        PAR3,   32, 
        Offset (0x120), 
        DCKI,   32, 
        DCKS,   32, 
        VCDL,   1, 
        VCDC,   1, 
        VCDT,   1, 
        VCDD,   1, 
        VIGD,   1, 
        VCSS,   1, 
        VCDB,   1, 
        VCIN,   1, 
        VPDF,   1, 
        Offset (0x12A), 
        VLID,   4, 
        VVPO,   4, 
        Offset (0x12C), 
        CDFL,   8, 
        CDAH,   8, 
        PMOD,   2, 
        PDIR,   1, 
        PDMA,   1, 
        Offset (0x12F), 
        LFDC,   1, 
        Offset (0x130), 
        C2NA,   1, 
        C3NA,   1, 
        C4NA,   1, 
        Offset (0x131), 
        SPEN,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x132), 
        OSPX,   1, 
        OSC4,   1, 
        OSSS,   1, 
        NHPS,   1, 
        NPME,   1, 
        Offset (0x133), 
        UOPT,   8, 
        BTID,   32, 
        LWST,   8, 
        LPST,   8, 
        TCRT,   16, 
        TPSV,   16, 
        TTC1,   16, 
        TTC2,   16, 
        TTSP,   16, 
        SRAH,   8, 
        SRHE,   8, 
        SRE0,   8, 
        SRE1,   8, 
        SRE2,   8, 
        SRE3,   8, 
        SRE4,   8, 
        SRE5,   8, 
        SRU0,   8, 
        SRU1,   8, 
        SRU2,   8, 
        SRU3,   8, 
        SRU7,   8, 
        SRPB,   8, 
        SRLP,   8, 
        SRSA,   8, 
        SRSM,   8, 
        CWAC,   1, 
        CWAS,   1, 
        Offset (0x156), 
        CWAP,   16, 
        CWAT,   16, 
        FS1L,   16, 
        FS1M,   16, 
        FS1H,   16, 
        FS2L,   16, 
        FS2M,   16, 
        FS2H,   16, 
        FS3L,   16, 
        FS3M,   16, 
        FS3H,   16, 
        TATC,   1, 
            ,   6, 
        TATL,   1, 
        TATW,   8, 
        TNFT,   4, 
        TNTT,   4, 
        TDFA,   4, 
        TDTA,   4, 
        TDFD,   4, 
        TDTD,   4, 
        TCFA,   4, 
        TCTA,   4, 
        TCFD,   4, 
        TCTD,   4, 
        TSFT,   4, 
        TSTT,   4, 
        TIT0,   8, 
        TCR0,   16, 
        TPS0,   16, 
        TIT1,   8, 
        TCR1,   16, 
        TPS1,   16, 
        TIT2,   8, 
        TCR2,   16, 
        TPS2,   16, 
        TIF0,   8, 
        TIF1,   8, 
        TIF2,   8, 
        Offset (0x18A), 
        TCZ1,   8, 
        TCZ2,   8, 
        TCZ3,   8, 
        BTHI,   1, 
        Offset (0x18E), 
        HDIR,   1, 
        HDEH,   1, 
        Offset (0x18F), 
        IPMS,   8, 
        BIDE,   8, 
        BPRI,   1, 
        Offset (0x192), 
        CBSE,   1, 
        ENFG,   1, 
        MWFG,   1, 
        IRFG,   1, 
        Offset (0x193), 
        DT00,   1, 
        DT01,   1, 
        DT02,   1, 
        DT03,   1, 
        Offset (0x194), 
        BMWF,   1, 
        MERM,   1, 
        Offset (0x195), 
        PH01,   8, 
        PH02,   8, 
        PH03,   8, 
        PH04,   8, 
        PH05,   8, 
        PH06,   8, 
        PH07,   8, 
        PH08,   8, 
        PH09,   8, 
        PH0A,   8, 
        PH0B,   8, 
        LIDB,   1, 
        Offset (0x1A1), 
        TCG0,   1, 
        Offset (0x1A2), 
        CHKC,   32, 
        CHKE,   32, 
        DKLG,   1, 
        Offset (0x1AB), 
        Offset (0x1B0), 
        WOLN,   8, 
        BRNS,   8, 
        ACST,   1, 
        BTLA,   1, 
        WLLA,   1, 
        WALA,   1, 
        BTHG,   1, 
        TMCM,   1, 
        LIDF,   1, 
        Offset (0x1B3), 
        USBP,   8, 
        USG0,   1, 
        USG3,   1, 
        USG4,   1, 
        ESG0,   1, 
        ESG1,   1, 
        DSMM,   1, 
        Offset (0x1B5), 
        LANO,   1, 
        Offset (0x1B6), 
        TPID,   8, 
        S3FL,   1, 
        Offset (0x1B8), 
        BTMD,   1, 
        WLNP,   1, 
        WANP,   1, 
        MCMU,   1, 
        CBCI,   1, 
        CWAI,   1, 
        CBTP,   1, 
        WWAP,   1, 
        D3EC,   8, 
        Offset (0x1BB), 
        WOFF,   1, 
        CMAB,   1, 
        CMAT,   1, 
        WANA,   1, 
        WWNA,   1, 
        BTHA,   1, 
        SM05,   1, 
        FNF7,   1, 
        OSFG,   1, 
        BATB,   1, 
        Offset (0x1BD), 
        SXFG,   8, 
        Offset (0x1BF), 
        GCDE,   4, 
        DADD,   4, 
        ERME,   16, 
        F0DA,   8, 
        F0DB,   8, 
        F0DC,   8, 
        F0DD,   8, 
        F0DE,   8, 
        F0DF,   8, 
        F0E0,   8, 
        F0E1,   8, 
        BFWB,   296, 
        Offset (0x200), 
        FW00,   100
    }

    OperationRegion (RCRB, SystemMemory, 0xFED1C000, 0x00004000)
    Field (RCRB, DWordAcc, Lock, Preserve)
    {
        Offset (0x1000), 
        Offset (0x3000), 
        Offset (0x3404), 
        HPAS,   2, 
            ,   5, 
        HPAE,   1, 
        Offset (0x3418), 
            ,   1, 
        PATD,   1, 
        SATD,   1, 
        SMBD,   1
    }

    Scope (_GPE)
    {
        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_TZ.TZ00, 0x80) // Thermal Status Change
        }

        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
        }

        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (\_SB.PCI0.IGD0.GSSE)
            {
                \_SB.PCI0.IGD0.GSCI ()
            }
            Else
            {
                \_SB.PCI0.LPC0.SCIS = 0x01
            }
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (\_SB.PCI0.EXP1.PSP1)
            {
                \_SB.PCI0.EXP1.PSP1 = 0x01
                \_SB.PCI0.EXP1.PMCS = 0x01
                Notify (\_SB.PCI0.EXP1, 0x02) // Device Wake
            }

            If (\_SB.PCI0.EXP2.PSP2)
            {
                \_SB.PCI0.EXP2.PSP2 = 0x01
                \_SB.PCI0.EXP2.PMCS = 0x01
                Notify (\_SB.PCI0.EXP2, 0x02) // Device Wake
            }

            If (\_SB.PCI0.EXP3.PSP3)
            {
                \_SB.PCI0.EXP3.PSP3 = 0x01
                \_SB.PCI0.EXP3.PMCS = 0x01
                Notify (\_SB.PCI0.EXP3, 0x02) // Device Wake
            }

            If (\_SB.PCI0.EXP4.PSP4)
            {
                \_SB.PCI0.EXP4.PSP4 = 0x01
                \_SB.PCI0.EXP4.PMCS = 0x01
                Notify (\_SB.PCI0.EXP4, 0x02) // Device Wake
            }
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.PCIB, 0x02) // Device Wake
        }

        Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.EUSB, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
        }
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x00, 0x00001010, 0x06) {}
        Processor (CPU1, 0x01, 0x00001010, 0x06) {}
        Processor (CPU2, 0x02, 0x00001010, 0x06) {}
        Processor (CPU3, 0x03, 0x00001010, 0x06) {}
        Processor (CPU4, 0x04, 0x00001010, 0x06) {}
        Processor (CPU5, 0x05, 0x00001010, 0x06) {}
        Processor (CPU6, 0x06, 0x00001010, 0x06) {}
        Processor (CPU7, 0x07, 0x00001010, 0x06) {}
    }

    OperationRegion (SMI2, SystemIO, 0xB2, 0x01)
    Field (SMI2, ByteAcc, NoLock, Preserve)
    {
        APMC,   8
    }

    Mutex (MSMI, 0x07)
    Method (SMI, 5, NotSerialized)
    {
        Acquire (MSMI, 0xFFFF)
        CMD = Arg0
        PAR0 = Arg1
        PAR1 = Arg2
        PAR2 = Arg3
        PAR3 = Arg4
        APMC = 0xF5
        While ((ERR == 0x01))
        {
            Sleep (0x64)
            APMC = 0xF5
        }

        Local0 = PAR0 /* \PAR0 */
        Release (MSMI)
        Return (Local0)
    }

    Method (RPCI, 1, NotSerialized)
    {
        Return (SMI (0x00, 0x00, Arg0, 0x00, 0x00))
    }

    Method (WPCI, 2, NotSerialized)
    {
        SMI (0x00, 0x01, Arg0, Arg1, 0x00)
    }

    Method (MPCI, 3, NotSerialized)
    {
        SMI (0x00, 0x02, Arg0, Arg1, Arg2)
    }

    Method (RBEC, 1, NotSerialized)
    {
        Return (SMI (0x00, 0x03, Arg0, 0x00, 0x00))
    }

    Method (WBEC, 2, NotSerialized)
    {
        SMI (0x00, 0x04, Arg0, Arg1, 0x00)
    }

    Method (MBEC, 3, NotSerialized)
    {
        SMI (0x00, 0x05, Arg0, Arg1, Arg2)
    }

    Method (RISA, 1, NotSerialized)
    {
        Return (SMI (0x00, 0x06, Arg0, 0x00, 0x00))
    }

    Method (WISA, 2, NotSerialized)
    {
        SMI (0x00, 0x07, Arg0, Arg1, 0x00)
    }

    Method (MISA, 3, NotSerialized)
    {
        SMI (0x00, 0x08, Arg0, Arg1, Arg2)
    }

    Method (VEXP, 0, NotSerialized)
    {
        SMI (0x01, 0x00, 0x00, 0x00, 0x00)
    }

    Method (VUPS, 1, NotSerialized)
    {
        SMI (0x01, 0x01, Arg0, 0x00, 0x00)
    }

    Method (VSDS, 2, NotSerialized)
    {
        SMI (0x01, 0x02, Arg0, Arg1, 0x00)
    }

    Method (VDDC, 0, NotSerialized)
    {
        SMI (0x01, 0x03, 0x00, 0x00, 0x00)
    }

    Method (VVPD, 1, NotSerialized)
    {
        SMI (0x01, 0x04, Arg0, 0x00, 0x00)
    }

    Method (VNRS, 1, NotSerialized)
    {
        SMI (0x01, 0x05, Arg0, 0x00, 0x00)
    }

    Method (GLPW, 0, NotSerialized)
    {
        Return (SMI (0x01, 0x06, 0x00, 0x00, 0x00))
    }

    Method (VSLD, 1, NotSerialized)
    {
        SMI (0x01, 0x07, Arg0, 0x00, 0x00)
    }

    Method (VEVT, 1, NotSerialized)
    {
        Return (SMI (0x01, 0x08, Arg0, 0x00, 0x00))
    }

    Method (VTHR, 0, NotSerialized)
    {
        Return (SMI (0x01, 0x09, 0x00, 0x00, 0x00))
    }

    Method (VBRC, 1, NotSerialized)
    {
        SMI (0x01, 0x0A, Arg0, 0x00, 0x00)
    }

    Method (VBRG, 0, NotSerialized)
    {
        Return (SMI (0x01, 0x0E, 0x00, 0x00, 0x00))
    }

    Method (UCMS, 1, NotSerialized)
    {
        Return (SMI (0x02, Arg0, 0x00, 0x00, 0x00))
    }

    Method (BHDP, 2, NotSerialized)
    {
        Return (SMI (0x03, 0x00, Arg0, Arg1, 0x00))
    }

    Method (DHDP, 1, NotSerialized)
    {
        Return (SMI (0x03, 0x01, Arg0, 0x00, 0x00))
    }

    Method (STEP, 1, NotSerialized)
    {
        SMI (0x04, Arg0, 0x00, 0x00, 0x00)
    }

    Method (CBRI, 0, NotSerialized)
    {
        SMI (0x05, 0x01, 0x00, 0x00, 0x00)
    }

    Method (BLTH, 1, NotSerialized)
    {
        Return (SMI (0x06, Arg0, 0x00, 0x00, 0x00))
    }

    Method (FISP, 0, NotSerialized)
    {
        SMI (0x07, 0x00, 0x00, 0x00, 0x00)
    }

    Method (ATCC, 1, NotSerialized)
    {
        SMI (0x08, Arg0, 0x00, 0x00, 0x00)
    }

    Method (WGSV, 1, NotSerialized)
    {
        Return (SMI (0x09, Arg0, 0x00, 0x00, 0x00))
        P80H = 0x09
    }

    Method (THRM, 1, NotSerialized)
    {
        Return (SMI (0x0A, Arg0, 0x00, 0x00, 0x00))
    }

    Method (PPMS, 1, NotSerialized)
    {
        Return (SMI (0x0B, Arg0, 0x00, 0x00, 0x00))
    }

    Method (TPHY, 1, NotSerialized)
    {
        SMI (0x0C, Arg0, 0x00, 0x00, 0x00)
    }

    Method (TMOR, 1, NotSerialized)
    {
        SMI (0x0D, Arg0, 0x00, 0x00, 0x00)
    }

    Method (THRO, 1, NotSerialized)
    {
        Return (SMI (0x0E, Arg0, 0x00, 0x00, 0x00))
    }

    Method (CSUM, 1, NotSerialized)
    {
        Return (SMI (0x0F, Arg0, 0x00, 0x00, 0x00))
    }

    Method (UAWS, 1, NotSerialized)
    {
        Return (SMI (0x10, Arg0, 0x00, 0x00, 0x00))
    }

    Method (BDMC, 1, NotSerialized)
    {
        SMI (0x14, 0x04, Arg0, 0x00, 0x00)
    }

    Method (BFWC, 1, NotSerialized)
    {
        Return (SMI (0x14, 0x00, Arg0, 0x00, 0x00))
    }

    Method (BFWP, 0, NotSerialized)
    {
        Return (SMI (0x14, 0x01, 0x00, 0x00, 0x00))
    }

    Method (BFWG, 1, NotSerialized)
    {
        SMI (0x14, 0x03, Arg0, 0x00, 0x00)
    }

    Name (SPS, 0x00)
    Name (OSIF, 0x00)
    Name (W98F, 0x00)
    Name (WNTF, 0x00)
    Name (WMEF, 0x00)
    Name (WXPF, 0x00)
    Name (WVIS, 0x00)
    Name (WSPV, 0x00)
    Name (LNUX, 0x00)
    Name (H8DR, 0x00)
    Name (MEMX, 0x00)
    Name (FNID, 0x00)
    Name (RRBF, 0x00)
    Name (NBCF, 0x00)
    Scope (\_SB)
    {
        OperationRegion (EXCO, SystemIO, 0x72, 0x02)
        Field (EXCO, ByteAcc, NoLock, Preserve)
        {
            INDX,   8, 
            DATA,   8
        }

        IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x80), 
            Offset (0x87), 
            Offset (0x8E), 
                ,   7, 
            USBO,   1, 
            Offset (0xCB), 
                ,   7, 
            WLPR,   1, 
            Offset (0xE4), 
                ,   4, 
            BTPR,   1, 
            Offset (0xF5), 
            SWGS,   1, 
            Offset (0xF6), 
                ,   1, 
            UBCM,   1, 
            UBBT,   1, 
            Offset (0xFE), 
            DBU2,   8, 
            DBU1,   8
        }
    }

    Scope (_SB)
    {
        OperationRegion (TCG1, SystemMemory, 0x7F5E0A75, 0x0007)
        Field (TCG1, AnyAcc, NoLock, Preserve)
        {
            PPRQ,   8, 
            PPLO,   8, 
            PPRP,   8, 
            PPOR,   8, 
            TPRS,   8, 
            TPMV,   8, 
            MOR,    8
        }

        Method (PHSR, 1, Serialized)
        {
            BCMD = Arg0
            DID = Zero
            SMIC = Zero
            If ((BCMD == Arg0)) {}
            BCMD = Zero
            DID = Zero
            Return (0x00)
        }

        OperationRegion (SMI0, SystemIO, 0x0000FE00, 0x00000002)
        Field (SMI0, AnyAcc, NoLock, Preserve)
        {
            SMIC,   8
        }

        OperationRegion (SMI1, SystemMemory, 0x7F5E2EBD, 0x00000090)
        Field (SMI1, AnyAcc, NoLock, Preserve)
        {
            BCMD,   8, 
            DID,    32, 
            INFO,   1024
        }

        Field (SMI1, AnyAcc, NoLock, Preserve)
        {
            AccessAs (ByteAcc, 0x00), 
            Offset (0x05), 
            INF,    8
        }

        Name (PR00, Package (0x0B)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                LNKH, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                LNKG, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }
        })
        Name (AR00, Package (0x0B)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                0x00, 
                0x17
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x10
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PR01, Package (0x05)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKF, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKG, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x00, 
                LNKE, 
                0x00
            }
        })
        Name (AR01, Package (0x05)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x15
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x17
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x14
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x00, 
                0x00, 
                0x14
            }
        })
        Device (PCI0)
        {
            OperationRegion (MPCE, PCI_Config, 0x48, 0x04)
            Field (MPCE, DWordAcc, NoLock, Preserve)
            {
                PEXE,   1, 
                LENG,   2, 
                    ,   25, 
                EXBA,   4
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (DTSE)
                {
                    TRAP (0x47)
                }

                PEXE = 0x00
                \_SB.OSHT ()
                If (CondRefOf (_OSI, Local0))
                {
                    OSYS = 0x07D1
                }
                ElseIf ((SizeOf (_OS) == 0x14))
                {
                    OSYS = 0x07D0
                }
                ElseIf ((SizeOf (_OS) == 0x27))
                {
                    OSYS = 0x07CF
                }
                Else
                {
                    OSYS = 0x07CE
                }

                P8XH (0x00, 0x0806)
            }

            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg2
                Local1 = (Local0 * 0x04)
                Name (BUF1, Buffer (Local1) {})
                BUF1 = Arg3
                Local1 = 0x00
                Local2 = 0x00
                While (Local0)
                {
                    Local2 = (Local1 * 0x04)
                    CreateDWordField (BUF1, Local2, CAPB)
                    If (Arg2)
                    {
                        (CAPB & 0xFFFFFFFC)
                        (CAPB | 0x00)
                    }
                    Else
                    {
                    }

                    Local1++
                    Local0--
                }

                Return (BUF1) /* \_SB_.PCI0._OSC.BUF1 */
            }

            OperationRegion (REGS, PCI_Config, 0x40, 0xC0)
            Field (REGS, ByteAcc, NoLock, Preserve)
            {
                Offset (0x50), 
                PAM0,   8, 
                PAM1,   8, 
                PAM2,   8, 
                PAM3,   8, 
                PAM4,   8, 
                PAM5,   8, 
                PAM6,   8, 
                    ,   7, 
                HEN,    1, 
                Offset (0x60), 
                TASM,   10, 
                Offset (0x62), 
                Offset (0x70), 
                Z000,   16
            }

            Name (RSRC, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x003F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0040,             // Length
                    0x00,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    0x00,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    0x00,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FDFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F100,         // Length
                    0x00,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED40000,         // Range Minimum
                    0xFED44FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local1 = Zero
                CreateDWordField (RSRC, \_SB.PCI0._Y00._MIN, BTMN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y00._MAX, BTMX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y00._LEN, BTLN)  // _LEN: Length
                BTMN = ((Z000 & 0xFFF0) << 0x10)
                BTLN = (0xF8000000 - BTMN) /* \_SB_.PCI0._CRS.BTMN */
                BTMX = ((BTMN + BTLN) - 0x01)
                CreateBitField (RSRC, \_SB.PCI0._Y01._RW, C0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y01._MIN, C0MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y01._MAX, C0MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y01._LEN, C0LN)  // _LEN: Length
                C0RW = One
                If (((PAM1 & 0x03) == 0x01))
                {
                    C0RW = Zero
                }

                C0LN = Zero
                If (!(PAM1 & 0x03))
                {
                    C0LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y02._MIN, C4MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y02._MAX, C4MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                C4RW = One
                If (((PAM1 & 0x30) == 0x10))
                {
                    C4RW = Zero
                }

                C4LN = Zero
                If (!(PAM1 & 0x30))
                {
                    C4LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y03._RW, C8RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y03._MIN, C8MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y03._MAX, C8MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y03._LEN, C8LN)  // _LEN: Length
                C8RW = One
                If (((PAM2 & 0x03) == 0x01))
                {
                    C8RW = Zero
                }

                C8LN = Zero
                If (!(PAM2 & 0x03))
                {
                    C8LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y04._RW, CCRW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y04._MIN, CCMN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y04._MAX, CCMX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y04._LEN, CCLN)  // _LEN: Length
                CCRW = One
                If (((PAM2 & 0x30) == 0x10))
                {
                    CCRW = Zero
                }

                CCLN = Zero
                If (!(PAM2 & 0x30))
                {
                    CCLN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y05._RW, D0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y05._MIN, D0MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y05._MAX, D0MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y05._LEN, D0LN)  // _LEN: Length
                D0RW = One
                If (((PAM3 & 0x03) == 0x01))
                {
                    D0RW = Zero
                }

                D0LN = Zero
                If (!(PAM3 & 0x03))
                {
                    D0LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y06._RW, D4RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y06._MIN, D4MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y06._MAX, D4MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y06._LEN, D4LN)  // _LEN: Length
                D4RW = One
                If (((PAM3 & 0x30) == 0x10))
                {
                    D4RW = Zero
                }

                D4LN = Zero
                If (!(PAM3 & 0x30))
                {
                    D4LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y07._RW, D8RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y07._MIN, D8MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y07._MAX, D8MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y07._LEN, D8LN)  // _LEN: Length
                D8RW = One
                If (((PAM4 & 0x03) == 0x01))
                {
                    D8RW = Zero
                }

                D8LN = Zero
                If (!(PAM4 & 0x03))
                {
                    D8LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y08._RW, DCRW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y08._MIN, DCMN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y08._MAX, DCMX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y08._LEN, DCLN)  // _LEN: Length
                DCRW = One
                If (((PAM4 & 0x30) == 0x10))
                {
                    DCRW = Zero
                }

                DCLN = Zero
                If (!(PAM4 & 0x30))
                {
                    DCLN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y09._RW, E0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y09._MIN, E0MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y09._MAX, E0MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y09._LEN, E0LN)  // _LEN: Length
                E0RW = One
                If (((PAM5 & 0x03) == 0x01))
                {
                    E0RW = Zero
                }

                E0LN = Zero
                If (!(PAM5 & 0x03))
                {
                    E0LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0A._MIN, E4MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0A._MAX, E4MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0A._LEN, E4LN)  // _LEN: Length
                E4RW = One
                If (((PAM5 & 0x30) == 0x10))
                {
                    E4RW = Zero
                }

                E4LN = Zero
                If (!(PAM5 & 0x30))
                {
                    E4LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0B._MIN, E8MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0B._MAX, E8MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0B._LEN, E8LN)  // _LEN: Length
                E8RW = One
                If (((PAM6 & 0x03) == 0x01))
                {
                    E8RW = Zero
                }

                E8LN = Zero
                If (!(PAM6 & 0x03))
                {
                    E8LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0C._MIN, ECMN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0C._MAX, ECMX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0C._LEN, ECLN)  // _LEN: Length
                ECRW = One
                If (((PAM6 & 0x30) == 0x10))
                {
                    ECRW = Zero
                }

                ECLN = Zero
                If (!(PAM6 & 0x30))
                {
                    ECLN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0D._MIN, F0MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0D._MAX, F0MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0D._LEN, F0LN)  // _LEN: Length
                F0RW = One
                If (((PAM0 & 0x30) == 0x10))
                {
                    F0RW = Zero
                }

                F0LN = Zero
                If (!(PAM0 & 0x30))
                {
                    F0LN = 0x00010000
                }

                If (TPMP)
                {
                    CreateDWordField (RSRC, \_SB.PCI0._Y0E._LEN, TPML)  // _LEN: Length
                    TPML = 0x5000
                }

                Return (RSRC) /* \_SB_.PCI0.RSRC */
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x02)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x02)
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICF)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Device (IGD0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
                Field (IGDP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x12), 
                        ,   1, 
                    GIVD,   1, 
                        ,   2, 
                    GUMA,   3, 
                    Offset (0x14), 
                        ,   4, 
                    GMFN,   1, 
                    Offset (0x18), 
                    SSRW,   32, 
                    Offset (0xA4), 
                    ASLE,   8, 
                    Offset (0xA8), 
                    GSSE,   1, 
                    GSSB,   14, 
                    GSES,   1, 
                    Offset (0xB0), 
                    Offset (0xB1), 
                    CDVL,   5, 
                    Offset (0xB2), 
                    Offset (0xB4), 
                    PWMC,   8, 
                    LBPC,   8, 
                    Offset (0xBC), 
                    ASLS,   32
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((ASLS == 0xFEF00000))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
                Field (IGDM, AnyAcc, NoLock, Preserve)
                {
                    SIGN,   128, 
                    SIZE,   32, 
                    OVER,   32, 
                    SVER,   256, 
                    VVER,   128, 
                    GVER,   128, 
                    MBOX,   32, 
                    DMOD,   32, 
                    Offset (0x100), 
                    DRDY,   32, 
                    CSTS,   32, 
                    CEVT,   32, 
                    Offset (0x120), 
                    DIDL,   256, 
                    CPDL,   256, 
                    CAD1,   32, 
                    CAD2,   32, 
                    CAD3,   32, 
                    CAD4,   32, 
                    CAD5,   32, 
                    CAD6,   32, 
                    CAD7,   32, 
                    CAD8,   32, 
                    NAD1,   32, 
                    NAD2,   32, 
                    NAD3,   32, 
                    NAD4,   32, 
                    NAD5,   32, 
                    NAD6,   32, 
                    NAD7,   32, 
                    NAD8,   32, 
                    ASLP,   32, 
                    TIDX,   32, 
                    CHPD,   32, 
                    CLID,   32, 
                    CDCK,   32, 
                    SXSW,   32, 
                    EVTS,   32, 
                    CNOT,   32, 
                    NRDY,   32, 
                    Offset (0x200), 
                    SCIE,   1, 
                    GEFC,   4, 
                    GXFC,   3, 
                    GESF,   8, 
                    Offset (0x204), 
                    PARM,   32, 
                    DSLP,   32, 
                    Offset (0x300), 
                    ARDY,   32, 
                    ASLC,   32, 
                    TCHE,   32, 
                    ALSI,   32, 
                    BCLP,   32, 
                    PFIT,   32, 
                    CBLV,   32, 
                    BCLM,   320, 
                    CPFM,   32, 
                    EPFM,   32, 
                    PLUT,   592, 
                    PFMB,   32, 
                    CCDV,   32, 
                    PCFT,   32, 
                    Offset (0x400), 
                    GVD1,   49152, 
                    PHED,   32, 
                    BDDC,   2048
                }

                Name (DBTB, Package (0x15)
                {
                    0x00, 
                    0x07, 
                    0x38, 
                    0x01C0, 
                    0x0E00, 
                    0x3F, 
                    0x01C7, 
                    0x0E07, 
                    0x01F8, 
                    0x0E38, 
                    0x0FC0, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x7000, 
                    0x7007, 
                    0x7038, 
                    0x71C0, 
                    0x7E00
                })
                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    If ((NDID == 0x01))
                    {
                        Name (TMP1, Package (0x01)
                        {
                            0xFFFFFFFF
                        })
                        TMP1 [0x00] = (0x00010000 | DID1)
                        Return (TMP1) /* \_SB_.PCI0.IGD0._DOD.TMP1 */
                    }

                    If ((NDID == 0x02))
                    {
                        Name (TMP2, Package (0x02)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP2 [0x00] = (0x00010000 | DID1)
                        TMP2 [0x01] = (0x00010000 | DID2)
                        Return (TMP2) /* \_SB_.PCI0.IGD0._DOD.TMP2 */
                    }

                    If ((NDID == 0x03))
                    {
                        Name (TMP3, Package (0x03)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP3 [0x00] = (0x00010000 | DID1)
                        TMP3 [0x01] = (0x00010000 | DID2)
                        TMP3 [0x02] = (0x00010000 | DID3)
                        Return (TMP3) /* \_SB_.PCI0.IGD0._DOD.TMP3 */
                    }

                    If ((NDID == 0x04))
                    {
                        Name (TMP4, Package (0x04)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP4 [0x00] = (0x00010000 | DID1)
                        TMP4 [0x01] = (0x00010000 | DID2)
                        TMP4 [0x02] = (0x00010000 | DID3)
                        TMP4 [0x03] = (0x00010000 | DID4)
                        Return (TMP4) /* \_SB_.PCI0.IGD0._DOD.TMP4 */
                    }

                    If ((NDID > 0x04))
                    {
                        Name (TMP5, Package (0x05)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP5 [0x00] = (0x00010000 | DID1)
                        TMP5 [0x01] = (0x00010000 | DID2)
                        TMP5 [0x02] = (0x00010000 | DID3)
                        TMP5 [0x03] = (0x00010000 | DID4)
                        TMP5 [0x04] = (0x00010000 | DID5)
                        Return (TMP5) /* \_SB_.PCI0.IGD0._DOD.TMP5 */
                    }

                    Return (Package (0x01)
                    {
                        0x0400
                    })
                }

                Name (SUCC, 0x01)
                Name (NVLD, 0x02)
                Name (CRIT, 0x04)
                Name (NCRT, 0x06)
                Method (GBDA, 0, Serialized)
                {
                    If ((GESF == 0x00))
                    {
                        PARM = 0x00
                        PARM |= (0x01 << 0x00)
                        PARM |= (0x01 << 0x03)
                        PARM |= (0x01 << 0x04)
                        PARM |= (0x01 << 0x06)
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x01))
                    {
                        PARM = 0x00
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x04))
                    {
                        PARM &= 0xEFFF0000
                        PARM &= (DerefOf (DBTB [IBTT]) << 0x10)
                        PARM |= IBTT /* \_SB_.PCI0.IGD0.PARM */
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x05)) {}
                    If ((GESF == 0x07))
                    {
                        PARM = GIVD /* \_SB_.PCI0.IGD0.GIVD */
                        PARM ^= 0x01
                        PARM |= (GMFN << 0x01)
                        PARM |= (0x02 << 0x0B)
                        If ((IDMM == 0x00))
                        {
                            PARM |= (IDMS << 0x0D)
                        }

                        If (((IDMM == 0x01) || (IDMM == 0x03)))
                        {
                            PARM |= (IDMS << 0x11)
                        }

                        PARM |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                            0x15) /* \_SB_.PCI0.IGD0.PARM */
                        GESF = 0x01
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x0A)) {}
                    GESF = Zero
                    Return (CRIT) /* \_SB_.PCI0.IGD0.CRIT */
                }

                Method (PDRD, 0, NotSerialized)
                {
                    If (!DRDY)
                    {
                        Sleep (ASLP)
                    }

                    Return (!DRDY)
                }

                Method (PSTS, 0, NotSerialized)
                {
                    If ((CSTS > 0x02))
                    {
                        Sleep (ASLP)
                    }

                    Return ((CSTS == 0x03))
                }

                Method (GNOT, 2, NotSerialized)
                {
                    If (PDRD ())
                    {
                        Return (0x01)
                    }

                    CEVT = Arg0
                    CSTS = 0x03
                    If (((CHPD == 0x00) && (Arg1 == 0x00)))
                    {
                        If (!(\_OSI ("Windows 2006") || \_OSI ("Windows 2009")))
                        {
                            Notify (\_SB.PCI0, Arg1)
                        }
                        Else
                        {
                            Notify (\_SB.PCI0.IGD0, Arg1)
                        }
                    }

                    Notify (\_SB.PCI0.IGD0, 0x80) // Status Change
                    Return (0x00)
                }

                Method (GHDS, 1, NotSerialized)
                {
                    TIDX = Arg0
                    Return (GNOT (0x01, 0x00))
                }

                Method (GLID, 1, NotSerialized)
                {
                    CLID = Arg0
                    Return (GNOT (0x02, 0x00))
                }

                Method (GDCK, 1, NotSerialized)
                {
                    CDCK = Arg0
                    Return (GNOT (0x04, 0x00))
                }

                Method (SBCB, 0, Serialized)
                {
                    If ((GESF == 0x00))
                    {
                        PARM = 0x00
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x01))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x03))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x04))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x05))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x07))
                    {
                        If ((PARM == 0x00))
                        {
                            Local0 = CLID /* \_SB_.PCI0.IGD0.CLID */
                            If ((0x80000000 & Local0))
                            {
                                CLID &= 0x0F
                                GLID (CLID)
                            }
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x08))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x09))
                    {
                        IBTT = (PARM & 0xFF)
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x10))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x13))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x14))
                    {
                        PAVP = (PARM & 0x0F)
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                }

                Device (DD01)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        Return ((0xFFFF & DID1))
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (GDCS (DID1, 0x0100))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (GDNS (DID1))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                    }
                }

                Device (DD02)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        Return ((0xFFFF & DID2))
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (GDCS (DID2, 0x0200))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (GDNS (DID2))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                    }
                }

                Device (DD03)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        Return ((0xFFFF & DID3))
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (GDCS (DID3, 0x0400))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (GDNS (DID3))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                    }
                }

                Device (DD04)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        Return ((0xFFFF & DID4))
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (GDCS (DID4, 0x0800))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (GDNS (DID4))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                    }

                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        Return (\_SB.PCI0.IBCL)
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        \_SB.PCI0.IBCM (Arg0)
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        Return (\_SB.PCI0.EBRL)
                    }
                }

                Device (DD05)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        Return ((0xFFFF & DID5))
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (GDCS (DID5, 0x8000))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (GDNS (DID5))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                    }
                }

                Method (BRTN, 1, Serialized)
                {
                    If (((DID1 & 0x0F00) == 0x0400))
                    {
                        Notify (\_SB.PCI0.IGD0.DD01, Arg0)
                    }

                    If (((DID2 & 0x0F00) == 0x0400))
                    {
                        Notify (\_SB.PCI0.IGD0.DD02, Arg0)
                    }

                    If (((DID3 & 0x0F00) == 0x0400))
                    {
                        Notify (\_SB.PCI0.IGD0.DD03, Arg0)
                    }

                    If (((DID4 & 0x0F00) == 0x0400))
                    {
                        Notify (\_SB.PCI0.IGD0.DD04, Arg0)
                    }

                    If (((DID5 & 0x0F00) == 0x0400))
                    {
                        Notify (\_SB.PCI0.IGD0.DD05, Arg0)
                    }
                }

                Name (CDCT, Package (0x05)
                {
                    Package (0x02)
                    {
                        0xE4, 
                        0x0140
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }, 

                    Package (0x02)
                    {
                        0x00, 
                        0x00
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }
                })
                Method (GSCI, 0, Serialized)
                {
                    If ((GEFC == 0x04))
                    {
                        GXFC = GBDA ()
                    }

                    If ((GEFC == 0x06))
                    {
                        GXFC = SBCB ()
                    }

                    GEFC = 0x00
                    \_SB.PCI0.LPC0.SCIS = 0x01
                    GSSE = 0x00
                    SCIE = 0x00
                    Return (Zero)
                }

                Method (GDCS, 2, NotSerialized)
                {
                    If (CAD1)
                    {
                        If ((CAD1 == (Arg0 & 0xFFFF)))
                        {
                            Return (0x1F)
                        }

                        If ((CAD2 == (Arg0 & 0xFFFF)))
                        {
                            Return (0x1F)
                        }

                        If ((CAD3 == (Arg0 & 0xFFFF)))
                        {
                            Return (0x1F)
                        }

                        If ((CAD4 == (Arg0 & 0xFFFF)))
                        {
                            Return (0x1F)
                        }

                        If ((CAD5 == (Arg0 & 0xFFFF)))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }
                    Else
                    {
                        If ((CSTE & Arg1))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }
                }

                Method (GDNS, 1, NotSerialized)
                {
                    If ((NAD1 == (Arg0 & 0xFFFF)))
                    {
                        Return (0x01)
                    }

                    If ((NAD2 == (Arg0 & 0xFFFF)))
                    {
                        Return (0x01)
                    }

                    If ((NAD3 == (Arg0 & 0xFFFF)))
                    {
                        Return (0x01)
                    }

                    If ((NAD4 == (Arg0 & 0xFFFF)))
                    {
                        Return (0x01)
                    }

                    If ((NAD5 == (Arg0 & 0xFFFF)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }
            }

            Name (EBRL, 0x64)
            Name (EBRV, 0x00)
            Name (IBCL, Package (0x12)
            {
                0x64, 
                0x23, 
                0x14, 
                0x19, 
                0x1E, 
                0x23, 
                0x28, 
                0x2D, 
                0x32, 
                0x37, 
                0x3C, 
                0x41, 
                0x46, 
                0x4B, 
                0x50, 
                0x55, 
                0x5A, 
                0x64
            })
            Method (IBCM, 1, NotSerialized)
            {
                EBRL = Arg0
                If ((EBRL < (DerefOf (IBCL [0x02]) + 0x01)))
                {
                    BRNS = 0x00
                }
                ElseIf ((EBRL < (DerefOf (IBCL [0x03]) + 0x01)))
                {
                    BRNS = 0x01
                }
                ElseIf ((EBRL < (DerefOf (IBCL [0x04]) + 0x01)))
                {
                    BRNS = 0x02
                }
                ElseIf ((EBRL < (DerefOf (IBCL [0x05]) + 0x01)))
                {
                    BRNS = 0x03
                }
                ElseIf ((EBRL < (DerefOf (IBCL [0x06]) + 0x01)))
                {
                    BRNS = 0x04
                }
                ElseIf ((EBRL < (DerefOf (IBCL [0x07]) + 0x01)))
                {
                    BRNS = 0x05
                }
                ElseIf ((EBRL < (DerefOf (IBCL [0x08]) + 0x01)))
                {
                    BRNS = 0x06
                }
                ElseIf ((EBRL < (DerefOf (IBCL [0x09]) + 0x01)))
                {
                    BRNS = 0x07
                }
                ElseIf ((EBRL < (DerefOf (IBCL [0x0A]) + 0x01)))
                {
                    BRNS = 0x08
                }
                ElseIf ((EBRL < (DerefOf (IBCL [0x0B]) + 0x01)))
                {
                    BRNS = 0x09
                }
                ElseIf ((EBRL < (DerefOf (IBCL [0x0C]) + 0x01)))
                {
                    BRNS = 0x0A
                }
                ElseIf ((EBRL < (DerefOf (IBCL [0x0D]) + 0x01)))
                {
                    BRNS = 0x0B
                }
                ElseIf ((EBRL < (DerefOf (IBCL [0x0E]) + 0x01)))
                {
                    BRNS = 0x0C
                }
                ElseIf ((EBRL < (DerefOf (IBCL [0x0F]) + 0x01)))
                {
                    BRNS = 0x0D
                }
                ElseIf ((EBRL < (DerefOf (IBCL [0x10]) + 0x01)))
                {
                    BRNS = 0x0E
                }
                ElseIf ((EBRL < (DerefOf (IBCL [0x11]) + 0x01)))
                {
                    BRNS = 0x0F
                }

                If ((\_OSI ("Windows 2006") || \_OSI ("Windows 2009")))
                {
                    \UCMS (0x14)
                }

                \_SB.PCI0.IGD0.PWMC = DerefOf (PNLS [BRNS])
                ISBC (DerefOf (PNLS [BRNS]))
                EBRV = BRNS /* \BRNS */
            }

            Name (ISCT, 0x00)
            Method (ISBC, 1, NotSerialized)
            {
                \_SB.PCI0.IGD0.BCLP = Arg0
                \_SB.PCI0.IGD0.BCLP |= 0x80000000
                \_SB.PCI0.IGD0.ASLC = 0x02
                ISCT = 0x05
                While ((\_SB.PCI0.IGD0.ASLC && ISCT))
                {
                    \_SB.PCI0.IGD0.LBPC = 0x00
                    ISCT--
                }
            }

            Name (PNLS, Buffer (0x10)
            {
                /* 0000 */  0x04, 0x09, 0x0D, 0x12, 0x17, 0x1E, 0x25, 0x2D,  // ......%-
                /* 0008 */  0x36, 0x40, 0x50, 0x65, 0x81, 0xA3, 0xCC, 0xFF   // 6@Pe....
            })
            Device (EXP1)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (P1CS, PCI_Config, 0x40, 0x0100)
                Field (P1CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x1A), 
                    ABP1,   1, 
                        ,   2, 
                    PDC1,   1, 
                        ,   2, 
                    PDS1,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSP1,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Device (PXS1)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (X1CS, PCI_Config, 0x00, 0x0100)
                    Field (X1CS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        X1DV,   32
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICF)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PR04) /* \_SB_.PR04 */
                }
            }

            Device (EXP2)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (P2CS, PCI_Config, 0x40, 0x0100)
                Field (P2CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x1A), 
                    ABP2,   1, 
                        ,   2, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSP2,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Device (PXS2)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (X2CS, PCI_Config, 0x00, 0x0100)
                    Field (X2CS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        X2DV,   32
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICF)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PR05) /* \_SB_.PR05 */
                }
            }

            Device (EXP3)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (P3CS, PCI_Config, 0x40, 0x0100)
                Field (P3CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x1A), 
                    ABP3,   1, 
                        ,   2, 
                    PDC3,   1, 
                        ,   2, 
                    PDS3,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSP3,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Device (PXS3)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (X3CS, PCI_Config, 0x00, 0x0100)
                    Field (X3CS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        X3DV,   32
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICF)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PR06) /* \_SB_.PR06 */
                }
            }

            Device (EXP4)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (P4CS, PCI_Config, 0x40, 0x0100)
                Field (P4CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x1A), 
                    ABP4,   1, 
                        ,   2, 
                    PDC4,   1, 
                        ,   2, 
                    PDS4,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSP4,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Device (PXS4)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (X4CS, PCI_Config, 0x00, 0x0100)
                    Field (X4CS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        X4DV,   32
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x00)
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x05
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        \LANO = 0x01
                    }
                    Else
                    {
                        \LANO = 0x00
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICF)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PR07) /* \_SB_.PR07 */
                }
            }

            Device (PCIB)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x03
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICF)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PR01) /* \_SB_.PR01 */
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Name (DVEN, 0x00)
                Method (DECD, 4, Serialized)
                {
                    Debug = Arg0
                }

                Device (MBRD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x1F)  // _UID: Unique ID
                    Name (RSRC, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x06,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x06,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x1000,             // Range Minimum
                            0x1000,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            _Y0F)
                        IO (Decode16,
                            0x1180,             // Range Minimum
                            0x1180,             // Range Maximum
                            0x01,               // Alignment
                            0x40,               // Length
                            _Y10)
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0xFE00,             // Range Minimum
                            0xFE00,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0068,             // Range Minimum
                            0x0068,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x006C,             // Range Minimum
                            0x006C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0700,             // Range Minimum
                            0x0700,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xE0000000,         // Address Base
                            0x10000000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED14000,         // Address Base
                            0x00004000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xF8000000,         // Address Base
                            0x04000000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFEF00000,         // Address Base
                            0x00100000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.MBRD._Y0F._MIN, PMMN)  // _MIN: Minimum Base Address
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.MBRD._Y0F._MAX, PMMX)  // _MAX: Maximum Base Address
                        PMMN = (^^PMBA & 0xFF80)
                        PMMX = PMMN /* \_SB_.PCI0.LPC0.MBRD._CRS.PMMN */
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.MBRD._Y10._MIN, GPMN)  // _MIN: Minimum Base Address
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.MBRD._Y10._MAX, GPMX)  // _MAX: Maximum Base Address
                        GPMN = (^^GPBA & 0xFF80)
                        GPMX = GPMN /* \_SB_.PCI0.LPC0.MBRD._CRS.GPMN */
                        Return (RSRC) /* \_SB_.PCI0.LPC0.MBRD.RSRC */
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer16, )
                            {4}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {2}
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y11)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (HPAE)
                        {
                            Local1 = 0x0F
                        }
                        Else
                        {
                            Local1 = 0x00
                        }

                        Return (Local1)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPC0.HPET._Y11._BAS, HPT0)  // _BAS: Base Address
                            If ((HPAS == 0x01))
                            {
                                HPT0 = 0xFED01000
                            }

                            If ((HPAS == 0x02))
                            {
                                HPT0 = 0xFED02000
                            }

                            If ((HPAS == 0x03))
                            {
                                HPT0 = 0xFED03000
                            }
                        }

                        Return (BUF0) /* \_SB_.PCI0.LPC0.HPET.BUF0 */
                    }
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.RTC_.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.TIMR.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.TIMR.BUF1 */
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            FixedIO (
                                0x0060,             // Address
                                0x01,               // Length
                                )
                            FixedIO (
                                0x0064,             // Address
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("LEN0017"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {12}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                }

                Device (LNKA)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y12)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRA |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKA._Y12._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRA & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Debug = RSRC /* \_SB_.PCI0.LPC0.LNKA.RSRC */
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKA.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        Debug = Arg0
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRA = (Local0 | (PIRA & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRA & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKB)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y13)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRB |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKB._Y13._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRB & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKB.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRB = (Local0 | (PIRB & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRB & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKC)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y14)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRC |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKC._Y14._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRC & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKC.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRC = (Local0 | (PIRC & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRC & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKD)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y15)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRD |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKD._Y15._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRD & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKD.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRD = (Local0 | (PIRD & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRD & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKE)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y16)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRE |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKE._Y16._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRE & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Debug = RSRC /* \_SB_.PCI0.LPC0.LNKE.RSRC */
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKE.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        Debug = Arg0
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRE = (Local0 | (PIRE & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRE & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKF)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y17)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRF |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKF._Y17._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRF & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Debug = RSRC /* \_SB_.PCI0.LPC0.LNKF.RSRC */
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKF.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        Debug = Arg0
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRF = (Local0 | (PIRF & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRF & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKG)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y18)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRG |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKG._Y18._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRG & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Debug = RSRC /* \_SB_.PCI0.LPC0.LNKG.RSRC */
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKG.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        Debug = Arg0
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRG = (Local0 | (PIRG & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRG & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKH)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x08)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y19)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRH |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKH._Y19._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRH & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Debug = RSRC /* \_SB_.PCI0.LPC0.LNKH.RSRC */
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKH.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        Debug = Arg0
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRH = (Local0 | (PIRH & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRH & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                OperationRegion (TCOI, SystemIO, 0x1060, 0x08)
                Field (TCOI, WordAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                        ,   9, 
                    SCIS,   1, 
                    Offset (0x06)
                }

                OperationRegion (GPOX, SystemIO, 0x1180, 0x30)
                Field (GPOX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                        ,   3, 
                    IO27,   1, 
                    Offset (0x0F), 
                        ,   3, 
                    LV27,   1, 
                    Offset (0x1B), 
                        ,   3, 
                    BL27,   1
                }

                OperationRegion (PIRX, PCI_Config, 0x60, 0x04)
                Field (PIRX, DWordAcc, Lock, Preserve)
                {
                    AccessAs (ByteAcc, 0x00), 
                    PIRA,   8, 
                    PIRB,   8, 
                    PIRC,   8, 
                    PIRD,   8
                }

                OperationRegion (PIRY, PCI_Config, 0x68, 0x04)
                Field (PIRY, DWordAcc, Lock, Preserve)
                {
                    AccessAs (ByteAcc, 0x00), 
                    PIRE,   8, 
                    PIRF,   8, 
                    PIRG,   8, 
                    PIRH,   8
                }

                OperationRegion (ROUT, SystemIO, 0xB8, 0x04)
                Field (ROUT, DWordAcc, Lock, Preserve)
                {
                    AccessAs (ByteAcc, 0x00), 
                    GPI0,   2, 
                    GPI1,   2, 
                    GPI2,   2, 
                    GPI3,   2, 
                    GPI4,   2, 
                    GPI5,   2, 
                    GPI6,   2, 
                    GPI7,   2, 
                    GPI8,   2, 
                    GPI9,   2, 
                    GP10,   2, 
                    GP11,   2, 
                    GP12,   2, 
                    GP13,   2, 
                    GP14,   2, 
                    GP15,   2
                }

                OperationRegion (PMIO, SystemIO, 0x1000, 0x30)
                Field (PMIO, WordAcc, NoLock, Preserve)
                {
                    AccessAs (DWordAcc, 0x00), 
                    Offset (0x2D), 
                        ,   4, 
                    GPES,   1, 
                    Offset (0x2F), 
                        ,   4, 
                    GPEE,   1
                }

                OperationRegion (GPIO, SystemIO, \GPBS, 0x80)
                Field (GPIO, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x0C), 
                    GO00,   1, 
                    GI01,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                    GO06,   1, 
                    GO07,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                    Offset (0x0E), 
                        ,   1, 
                    GO17,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                    WWON,   1, 
                    Offset (0x0F), 
                        ,   1, 
                        ,   1, 
                    WLON,   1, 
                    CRON,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                    Offset (0x10), 
                    Offset (0x38), 
                        ,   1, 
                    GI33,   1, 
                    GI34,   1, 
                        ,   1, 
                    BTOF,   1, 
                        ,   1, 
                    GI38,   1, 
                    GI39,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                    Offset (0x3A), 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                    Offset (0x3B), 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1
                }

                OperationRegion (REGS, PCI_Config, 0x40, 0x10)
                Field (REGS, DWordAcc, Lock, Preserve)
                {
                    PMBA,   16, 
                    Offset (0x08), 
                    GPBA,   16
                }

                Device (FWH)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadWrite,
                            0xFF800000,         // Address Base
                            0x00800000,         // Address Length
                            )
                    })
                }
            }

            Name (NATA, Package (0x01)
            {
                0x001F0002
            })
            Method (GETP, 1, NotSerialized)
            {
                Noop
                If (((Arg0 & 0x09) == 0x00))
                {
                    Return (0xFFFFFFFF)
                }

                If (((Arg0 & 0x09) == 0x08))
                {
                    Return (0x0384)
                }

                Local0 = ((Arg0 & 0x0300) >> 0x08)
                Local1 = ((Arg0 & 0x3000) >> 0x0C)
                Return ((0x1E * (0x09 - (Local0 + Local1))))
            }

            Method (GETD, 4, NotSerialized)
            {
                Noop
                If (Arg0)
                {
                    If (Arg1)
                    {
                        Return (0x14)
                    }

                    If (Arg2)
                    {
                        Return (((0x04 - Arg3) * 0x0F))
                    }

                    Return (((0x04 - Arg3) * 0x1E))
                }

                Return (0xFFFFFFFF)
            }

            Method (GETT, 1, NotSerialized)
            {
                Noop
                Return ((0x1E * (0x09 - (((Arg0 >> 0x02) & 0x03
                    ) + (Arg0 & 0x03)))))
            }

            Method (GETF, 3, NotSerialized)
            {
                Noop
                Name (TMPF, 0x00)
                If (Arg0)
                {
                    TMPF |= 0x01
                }

                If ((Arg2 & 0x02))
                {
                    TMPF |= 0x02
                }

                If (Arg1)
                {
                    TMPF |= 0x04
                }

                If ((Arg2 & 0x20))
                {
                    TMPF |= 0x08
                }

                If ((Arg2 & 0x4000))
                {
                    TMPF |= 0x10
                }

                Return (TMPF) /* \_SB_.PCI0.GETF.TMPF */
            }

            Method (SETP, 3, NotSerialized)
            {
                Noop
                If ((Arg0 >= 0xF0))
                {
                    Return (0x08)
                }
                Else
                {
                    If ((Arg1 & 0x02))
                    {
                        If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                        {
                            Return (0x2301)
                        }

                        If (((Arg0 <= 0xB4) && (Arg2 & 0x01)))
                        {
                            Return (0x2101)
                        }
                    }

                    Return (0x1001)
                }
            }

            Method (SETD, 1, NotSerialized)
            {
                Noop
                If ((Arg0 <= 0x14))
                {
                    Return (0x01)
                }

                If ((Arg0 <= 0x1E))
                {
                    Return (0x02)
                }

                If ((Arg0 <= 0x2D))
                {
                    Return (0x01)
                }

                If ((Arg0 <= 0x3C))
                {
                    Return (0x02)
                }

                If ((Arg0 <= 0x5A))
                {
                    Return (0x01)
                }

                Return (0x00)
            }

            Method (SETT, 3, NotSerialized)
            {
                Noop
                If ((Arg1 & 0x02))
                {
                    If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                    {
                        Return (0x0B)
                    }

                    If (((Arg0 <= 0xB4) && (Arg2 & 0x01)))
                    {
                        Return (0x09)
                    }
                }

                Return (0x04)
            }

            Device (IDE1)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                OperationRegion (IDEP, PCI_Config, 0x10, 0x02)
                Field (IDEP, DWordAcc, NoLock, Preserve)
                {
                    PCMD,   16
                }

                OperationRegion (IDES, PCI_Config, 0x18, 0x02)
                Field (IDES, DWordAcc, NoLock, Preserve)
                {
                    SCMD,   16
                }

                OperationRegion (IDEC, PCI_Config, 0x40, 0x18)
                Field (IDEC, DWordAcc, NoLock, Preserve)
                {
                    PRIT,   16, 
                    SECT,   16, 
                    PSIT,   4, 
                    SSIT,   4, 
                    Offset (0x08), 
                    SDMA,   4, 
                    Offset (0x0A), 
                    SDT0,   2, 
                        ,   2, 
                    SDT1,   2, 
                    Offset (0x0B), 
                    SDT2,   2, 
                        ,   2, 
                    SDT3,   2, 
                    Offset (0x14), 
                    ICR0,   4, 
                    ICR1,   4, 
                    ICR2,   4, 
                    ICR3,   4, 
                    ICR4,   4, 
                    ICR5,   4
                }

                OperationRegion (IDE1, PCI_Config, 0x90, 0x03)
                Field (IDE1, DWordAcc, NoLock, Preserve)
                {
                    MAP,    8, 
                    Offset (0x02), 
                    PCS,    8
                }

                OperationRegion (PBIO, SystemIO, 0x000018E7, 0x00000008)
                Field (PBIO, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                        ,   7, 
                    PBSY,   1
                }

                OperationRegion (SBIO, SystemIO, 0x000018E7, 0x00000008)
                Field (SBIO, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                        ,   7, 
                    SBSY,   1
                }

                Method (BSSP, 1, NotSerialized)
                {
                    If ((0x01 == \SPNF))
                    {
                        Local0 = (0x50 & PCS)
                        Local1 = (0xA0 & PCS)
                        Local2 = 0x00
                        Local3 = 0x00
                        If (Arg0)
                        {
                            If ((0x80 == Local1))
                            {
                                While ((SBSY && (0x4B > Local3)))
                                {
                                    Sleep (0x64)
                                    Local3++
                                }
                            }
                        }
                        ElseIf ((0x40 == Local0))
                        {
                            While ((PBSY && (0x4B > Local2)))
                            {
                                Sleep (0x64)
                                Local2++
                            }
                        }

                        \SPNF = 0x00
                    }
                }

                Method (CTYP, 1, NotSerialized)
                {
                    Local0 = Zero
                    If (Arg0)
                    {
                        If (((MAP > 0x01) && (MAP < 0x06)))
                        {
                            Local0 = 0x01
                        }
                        Else
                        {
                            If ((MAP == Zero))
                            {
                                Local0 = 0x03
                            }

                            If ((MAP == One))
                            {
                                Local0 = 0x04
                            }
                        }
                    }
                    ElseIf ((MAP > 0x05))
                    {
                        Local0 = 0x02
                    }
                    Else
                    {
                        If ((MAP == Zero))
                        {
                            Local0 = 0x05
                        }

                        If ((MAP == One))
                        {
                            Local0 = 0x06
                        }
                    }

                    Return (Local0)
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Noop
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GETP (PRIT)
                        DMA0 = GETD ((SDMA & 0x01), (ICR3 & 0x01), (
                            ICR0 & 0x01), SDT0)
                        If ((DMA0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.IDE1.PRID._GTM.PIO0 */
                        }

                        If ((PRIT & 0x4000))
                        {
                            If (((PRIT & 0x90) == 0x80))
                            {
                                PIO1 = 0x0384
                            }
                            Else
                            {
                                PIO1 = GETT (PSIT)
                            }
                        }
                        Else
                        {
                            PIO1 = 0xFFFFFFFF
                        }

                        DMA1 = GETD ((SDMA & 0x02), (ICR3 & 0x02), (
                            ICR0 & 0x02), SDT1)
                        If ((DMA1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.IDE1.PRID._GTM.PIO1 */
                        }

                        FLAG = GETF ((SDMA & 0x01), (SDMA & 0x02), PRIT)
                        Return (PBUF) /* \_SB_.PCI0.IDE1.PRID._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Noop
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        ICR2 = 0x04
                        If ((SizeOf (Arg1) == 0x0200))
                        {
                            PRIT &= 0x4CF0
                            SDMA &= 0x0E
                            SDT0 = 0x00
                            ICR0 &= 0x0E
                            ICR1 &= 0x0E
                            ICR3 &= 0x0E
                            ICR5 &= 0x0E
                            CreateWordField (Arg1, 0x62, W490)
                            CreateWordField (Arg1, 0x6A, W530)
                            CreateWordField (Arg1, 0x7E, W630)
                            CreateWordField (Arg1, 0x80, W640)
                            CreateWordField (Arg1, 0xB0, W880)
                            PRIT |= 0x8004
                            If (((FLAG & 0x02) && (W490 & 0x0800)))
                            {
                                PRIT |= 0x02
                            }

                            PRIT |= SETP (PIO0, W530, W640)
                            If ((FLAG & 0x01))
                            {
                                SDMA |= 0x01
                                SDT0 = SETD (DMA0)
                                If ((W880 & 0x20))
                                {
                                    ICR1 |= 0x01
                                    ICR5 |= 0x01
                                }

                                If ((W880 & 0x10))
                                {
                                    ICR1 |= 0x01
                                }

                                If ((DMA0 < 0x1E))
                                {
                                    ICR3 |= 0x01
                                }

                                If ((DMA0 < 0x3C))
                                {
                                    ICR0 |= 0x01
                                }
                            }
                        }

                        If ((SizeOf (Arg2) == 0x0200))
                        {
                            PRIT &= 0x3F0F
                            PSIT = 0x00
                            SDMA &= 0x0D
                            SDT1 = 0x00
                            ICR0 &= 0x0D
                            ICR1 &= 0x0D
                            ICR3 &= 0x0D
                            ICR5 &= 0x0D
                            CreateWordField (Arg2, 0x62, W491)
                            CreateWordField (Arg2, 0x6A, W531)
                            CreateWordField (Arg2, 0x7E, W631)
                            CreateWordField (Arg2, 0x80, W641)
                            CreateWordField (Arg2, 0xB0, W881)
                            PRIT |= 0x8040
                            If (((FLAG & 0x08) && (W491 & 0x0800)))
                            {
                                PRIT |= 0x20
                            }

                            If ((FLAG & 0x10))
                            {
                                PRIT |= 0x4000
                                If ((PIO1 > 0xF0))
                                {
                                    PRIT |= 0x80
                                }
                                Else
                                {
                                    PRIT |= 0x10
                                    PSIT = SETT (PIO1, W531, W641)
                                }
                            }

                            If ((FLAG & 0x04))
                            {
                                SDMA |= 0x02
                                SDT1 = SETD (DMA1)
                                If ((W881 & 0x20))
                                {
                                    ICR1 |= 0x02
                                    ICR5 |= 0x02
                                }

                                If ((W881 & 0x10))
                                {
                                    ICR1 |= 0x02
                                }

                                If ((DMA0 < 0x1E))
                                {
                                    ICR3 |= 0x02
                                }

                                If ((DMA0 < 0x3C))
                                {
                                    ICR0 |= 0x02
                                }
                            }
                        }
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        BSSP (0x00)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Noop
                            Name (PIB0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (PIB0, 0x01, PMD0)
                            CreateByteField (PIB0, 0x08, DMD0)
                            If ((PRIT & 0x02))
                            {
                                If (((PRIT & 0x09) == 0x08))
                                {
                                    PMD0 = 0x08
                                }
                                Else
                                {
                                    PMD0 = 0x0A
                                    Local0 = ((PRIT & 0x0300) >> 0x08)
                                    Local1 = ((PRIT & 0x3000) >> 0x0C)
                                    Local2 = (Local0 + Local1)
                                    If ((0x03 == Local2))
                                    {
                                        PMD0 = 0x0B
                                    }

                                    If ((0x05 == Local2))
                                    {
                                        PMD0 = 0x0C
                                    }
                                }
                            }
                            Else
                            {
                                PMD0 = 0x01
                            }

                            If ((SDMA & 0x01))
                            {
                                DMD0 = (SDT0 | 0x40)
                                If ((ICR0 & 0x01))
                                {
                                    DMD0 += 0x02
                                }

                                If ((ICR3 & 0x01))
                                {
                                    DMD0 = 0x45
                                }
                            }
                            Else
                            {
                                DMD0 = (((PMD0 & 0x07) - 0x02) | 0x20)
                            }

                            Return (PIB0) /* \_SB_.PCI0.IDE1.PRID.P_D0._GTF.PIB0 */
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Noop
                            Name (PIB1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (PIB1, 0x01, PMD1)
                            CreateByteField (PIB1, 0x08, DMD1)
                            If ((PRIT & 0x20))
                            {
                                If (((PRIT & 0x90) == 0x80))
                                {
                                    PMD1 = 0x08
                                }
                                Else
                                {
                                    Local0 = ((PSIT & 0x03) + ((PSIT & 0x0C) >> 0x02
                                        ))
                                    If ((0x05 == Local0))
                                    {
                                        PMD1 = 0x0C
                                    }
                                    ElseIf ((0x03 == Local0))
                                    {
                                        PMD1 = 0x0B
                                    }
                                    Else
                                    {
                                        PMD1 = 0x0A
                                    }
                                }
                            }
                            Else
                            {
                                PMD1 = 0x01
                            }

                            If ((SDMA & 0x02))
                            {
                                DMD1 = (SDT1 | 0x40)
                                If ((ICR0 & 0x02))
                                {
                                    DMD1 += 0x02
                                }

                                If ((ICR3 & 0x02))
                                {
                                    DMD1 = 0x45
                                }
                            }
                            Else
                            {
                                DMD1 = (((PMD1 & 0x07) - 0x02) | 0x20)
                            }

                            Return (PIB1) /* \_SB_.PCI0.IDE1.PRID.P_D1._GTF.PIB1 */
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Noop
                        Name (SBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (SBUF, 0x00, PIO0)
                        CreateDWordField (SBUF, 0x04, DMA0)
                        CreateDWordField (SBUF, 0x08, PIO1)
                        CreateDWordField (SBUF, 0x0C, DMA1)
                        CreateDWordField (SBUF, 0x10, FLAG)
                        PIO0 = GETP (SECT)
                        DMA0 = GETD ((SDMA & 0x04), (ICR3 & 0x04), (
                            ICR0 & 0x04), SDT2)
                        If ((DMA0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.IDE1.SECD._GTM.PIO0 */
                        }

                        If ((SECT & 0x4000))
                        {
                            If (((SECT & 0x90) == 0x80))
                            {
                                PIO1 = 0x0384
                            }
                            Else
                            {
                                PIO1 = GETT (SSIT)
                            }
                        }
                        Else
                        {
                            PIO1 = 0xFFFFFFFF
                        }

                        DMA1 = GETD ((SDMA & 0x08), (ICR3 & 0x08), (
                            ICR0 & 0x08), SDT3)
                        If ((DMA1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.IDE1.SECD._GTM.PIO1 */
                        }

                        FLAG = GETF ((SDMA & 0x04), (SDMA & 0x08), SECT)
                        Return (SBUF) /* \_SB_.PCI0.IDE1.SECD._GTM.SBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Noop
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        ICR2 = 0x04
                        If ((SizeOf (Arg1) == 0x0200))
                        {
                            SECT &= 0x4CF0
                            SDMA &= 0x0B
                            SDT2 = 0x00
                            ICR0 &= 0x0B
                            ICR1 &= 0x0B
                            ICR3 &= 0x0B
                            ICR5 &= 0x0B
                            CreateWordField (Arg1, 0x62, W490)
                            CreateWordField (Arg1, 0x6A, W530)
                            CreateWordField (Arg1, 0x7E, W630)
                            CreateWordField (Arg1, 0x80, W640)
                            CreateWordField (Arg1, 0xB0, W880)
                            SECT |= 0x8004
                            If (((FLAG & 0x02) && (W490 & 0x0800)))
                            {
                                SECT |= 0x02
                            }

                            SECT |= SETP (PIO0, W530, W640)
                            If ((FLAG & 0x01))
                            {
                                SDMA |= 0x04
                                SDT2 = SETD (DMA0)
                                If ((W880 & 0x20))
                                {
                                    ICR1 |= 0x04
                                    ICR5 |= 0x04
                                }

                                If ((W880 & 0x10))
                                {
                                    ICR1 |= 0x04
                                }

                                If ((DMA0 < 0x1E))
                                {
                                    ICR3 |= 0x04
                                }

                                If ((DMA0 < 0x3C))
                                {
                                    ICR0 |= 0x04
                                }
                            }
                        }

                        If ((SizeOf (Arg2) == 0x0200))
                        {
                            SECT &= 0x3F0F
                            SSIT = 0x00
                            SDMA &= 0x07
                            SDT3 = 0x00
                            ICR0 &= 0x07
                            ICR1 &= 0x07
                            ICR3 &= 0x07
                            ICR5 &= 0x07
                            CreateWordField (Arg2, 0x62, W491)
                            CreateWordField (Arg2, 0x6A, W531)
                            CreateWordField (Arg2, 0x7E, W631)
                            CreateWordField (Arg2, 0x80, W641)
                            CreateWordField (Arg2, 0xB0, W881)
                            SECT |= 0x8040
                            If (((FLAG & 0x08) && (W491 & 0x0800)))
                            {
                                SECT |= 0x20
                            }

                            If ((FLAG & 0x10))
                            {
                                SECT |= 0x4000
                                If ((PIO1 > 0xF0))
                                {
                                    SECT |= 0x80
                                }
                                Else
                                {
                                    SECT |= 0x10
                                    SSIT = SETT (PIO1, W531, W641)
                                }
                            }

                            If ((FLAG & 0x04))
                            {
                                SDMA |= 0x08
                                SDT3 = SETD (DMA1)
                                If ((W881 & 0x20))
                                {
                                    ICR1 |= 0x08
                                    ICR5 |= 0x08
                                }

                                If ((W881 & 0x10))
                                {
                                    ICR1 |= 0x08
                                }

                                If ((DMA0 < 0x1E))
                                {
                                    ICR3 |= 0x08
                                }

                                If ((DMA0 < 0x3C))
                                {
                                    ICR0 |= 0x08
                                }
                            }
                        }
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        BSSP (0x01)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Noop
                            Name (SIB0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (SIB0, 0x01, PMD0)
                            CreateByteField (SIB0, 0x08, DMD0)
                            If ((SECT & 0x02))
                            {
                                If (((SECT & 0x09) == 0x08))
                                {
                                    PMD0 = 0x08
                                }
                                Else
                                {
                                    PMD0 = 0x0A
                                    Local0 = ((SECT & 0x0300) >> 0x08)
                                    Local1 = ((SECT & 0x3000) >> 0x0C)
                                    Local2 = (Local0 + Local1)
                                    If ((0x03 == Local2))
                                    {
                                        PMD0 = 0x0B
                                    }

                                    If ((0x05 == Local2))
                                    {
                                        PMD0 = 0x0C
                                    }
                                }
                            }
                            Else
                            {
                                PMD0 = 0x01
                            }

                            If ((SDMA & 0x04))
                            {
                                DMD0 = (SDT2 | 0x40)
                                If ((ICR0 & 0x04))
                                {
                                    DMD0 += 0x02
                                }

                                If ((ICR3 & 0x04))
                                {
                                    DMD0 = 0x45
                                }
                            }
                            Else
                            {
                                DMD0 = (((PMD0 & 0x07) - 0x02) | 0x20)
                            }

                            Return (SIB0) /* \_SB_.PCI0.IDE1.SECD.S_D0._GTF.SIB0 */
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Noop
                            Name (SIB1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (SIB1, 0x01, PMD1)
                            CreateByteField (SIB1, 0x08, DMD1)
                            If ((SECT & 0x20))
                            {
                                If (((SECT & 0x90) == 0x80))
                                {
                                    PMD1 = 0x08
                                }
                                Else
                                {
                                    Local0 = ((SSIT & 0x03) + ((SSIT & 0x0C) >> 0x02
                                        ))
                                    If ((0x05 == Local0))
                                    {
                                        PMD1 = 0x0C
                                    }
                                    ElseIf ((0x03 == Local0))
                                    {
                                        PMD1 = 0x0B
                                    }
                                    Else
                                    {
                                        PMD1 = 0x0A
                                    }
                                }
                            }
                            Else
                            {
                                PMD1 = 0x01
                            }

                            If ((SDMA & 0x02))
                            {
                                DMD1 = (SDT3 | 0x40)
                                If ((ICR0 & 0x08))
                                {
                                    DMD1 += 0x02
                                }

                                If ((ICR3 & 0x08))
                                {
                                    DMD1 = 0x45
                                }
                            }
                            Else
                            {
                                DMD1 = (((PMD1 & 0x07) - 0x02) | 0x20)
                            }

                            Return (SIB1) /* \_SB_.PCI0.IDE1.SECD.S_D1._GTF.SIB1 */
                        }
                    }
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
            }

            Device (USB1)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                OperationRegion (USBO, PCI_Config, 0xC4, 0x04)
                Field (USBO, DWordAcc, Lock, Preserve)
                {
                    RSEN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x03, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        If (\_SB.USBO)
                        {
                            RSEN = 0x02
                            \_SB.PCI0.LPC0.EC.USP0 = 0x01
                        }
                        Else
                        {
                            RSEN = 0x03
                            \_SB.PCI0.LPC0.EC.USP0 = 0x01
                        }
                    }
                    Else
                    {
                        RSEN = 0x00
                        \_SB.PCI0.LPC0.EC.USP0 = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                OperationRegion (USBO, PCI_Config, 0xC4, 0x04)
                Field (USBO, DWordAcc, Lock, Preserve)
                {
                    RSEN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x04, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        RSEN = 0x01
                        \_SB.PCI0.LPC0.EC.USP0 = 0x01
                    }
                    Else
                    {
                        RSEN = 0x00
                        \_SB.PCI0.LPC0.EC.USP0 = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUB0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (UBTH)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0x00, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                    }
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                OperationRegion (USBO, PCI_Config, 0xC4, 0x04)
                Field (USBO, DWordAcc, Lock, Preserve)
                {
                    RSEN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0C, 
                    0x03
                })
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (USB4)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                OperationRegion (USBO, PCI_Config, 0xC4, 0x04)
                Field (USBO, DWordAcc, Lock, Preserve)
                {
                    RSEN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0E, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        RSEN = 0x03
                    }
                    Else
                    {
                        RSEN = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (EUSB)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x03
                })
                Device (HUB0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (ULAN)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0x00, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                    }

                    Device (UWAN)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0x00, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                    }

                    Device (UCAM)
                    {
                        Name (_ADR, 0x08)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0x00, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                    }
                }
            }
        }
    }

    Scope (_SI)
    {
        Method (_SST, 1, NotSerialized)  // _SST: System Status
        {
            If ((Arg0 == 0x01))
            {
                \SPS = 0x00
            }

            If ((Arg0 == 0x03))
            {
                If ((OSYS == 0x07CE))
                {
                    \_SB.BCMD = (Arg0 | 0x80)
                    \_SB.SMIC = Zero
                }

                If ((OSYS == 0x07CF))
                {
                    \_SB.BCMD = (Arg0 | 0x80)
                    \_SB.SMIC = Zero
                }
                Else
                {
                }
            }
        }
    }

    Method (P8XH, 2, Serialized)
    {
        If ((Arg0 == 0x00))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }

        If ((Arg0 == 0x01))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }

        If ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }

        If ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        P80H = P80D /* \P80D */
    }

    Method (TRAP, 1, Serialized)
    {
        SMIF = Arg0
        TRP0 = 0x00
        Return (SMIF) /* \SMIF */
    }

    Scope (\_TZ)
    {
        Name (TPAS, 0x50)
        Name (TPC, 0x5A)
        Name (TPNS, 0x5F)
        Name (TPNC, 0x69)
        Name (T90S, 0x55)
        Name (T90C, 0x5A)
        Name (TPSP, 0x56)
        ThermalZone (TZ00)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return ((0x0AAC + (TPC * 0x0A)))
            }

            Method (_SCP, 1, Serialized)  // _SCP: Set Cooling Policy
            {
                CTYP = Arg0
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (ECON)
                {
                    Local0 = \_SB.PCI0.LPC0.EC.TMP1
                    If (((Local0 < 0x23) | (Local0 > 0x73)))
                    {
                        Local0 = 0x23
                    }

                    If ((Local0 > TPSP))
                    {
                        If (\_SB.PCI0.LPC0.EC.HKEY.DHKC)
                        {
                            \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x6022)
                        }
                    }

                    Return ((0x0AAC + (Local0 * 0x0A)))
                }
                Else
                {
                    Return (0x0BB8)
                }
            }

            Method (_PSL, 0, Serialized)  // _PSL: Passive List
            {
                Return (Package (0x01)
                {
                    \_PR.CPU0
                })
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return ((0x0AAC + (TPAS * 0x0A)))
            }

            Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
            {
                Return (0x02)
            }

            Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
            {
                Return (0x03)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (0x64)
            }
        }
    }

    Name (_S0, Package (0x02)  // _S0_: S0 System State
    {
        0x00, 
        0x00
    })
    Name (_S3, Package (0x02)  // _S3_: S3 System State
    {
        0x05, 
        0x05
    })
    Name (_S4, Package (0x02)  // _S4_: S4 System State
    {
        0x06, 
        0x06
    })
    Name (_S5, Package (0x02)  // _S5_: S5 System State
    {
        0x07, 
        0x07
    })
    Name (PICF, 0x00)
    Name (SPNF, 0x00)
    Name (TXFG, 0x00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        \PICF = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        P80H = Arg0
        \SPS = Arg0
        If ((Arg0 == 0x03))
        {
            \_SB.PCI0.LPC0.EC.S3FG = 0x01
            TXFG = Arg0
        }

        If ((Arg0 == 0x04))
        {
            \_SB.PCI0.LPC0.EC.S3FG = 0x01
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04))) {}
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        \_SB.PCI0.PEXE = 0x00
        If ((Arg0 == 0x03))
        {
            \SPNF = 0x01
            TRAP (0x46)
            If (((\_SB.PCI0.LPC0.EC.RSCS == 0x01) || (\_SB.PCI0.LPC0.EC.RSCS == 0x02)))
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            P8XH (0x00, 0x13)
        }

        If ((Arg0 == 0x04))
        {
            \_SB.OSHT ()
            If (DTSE)
            {
                TRAP (0x47)
            }

            Notify (\_TZ.TZ00, 0x80) // Thermal Status Change
            P8XH (0x00, 0x14)
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            \_SB.PCI0.LPC0.EC.HKEY.HKS4 ()
            \_SB.PCI0.LPC0.EC.S3FG = 0x00
            \_SB.PHSR (0x82)
            \_SB.PCI0.LPC0.EC.BEEP (0x0F)
        }

        If ((Arg0 < 0x04))
        {
            If ((\_SB.PCI0.LPC0.EC.RSCS == 0x03))
            {
                Local0 = (Arg0 << 0x08)
                Local0 = (0x2013 | Local0)
                \_SB.PCI0.LPC0.EC.HKEY.MHKQ (Local0)
            }
        }

        If ((OSYS == 0x07CE))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (\_SB)
    {
        Name (OSTB, Ones)
        OperationRegion (OSTY, SystemMemory, 0x7F5E2EBC, 0x00000001)
        Field (OSTY, AnyAcc, NoLock, Preserve)
        {
            TPOS,   8
        }

        Method (OSTP, 0, NotSerialized)
        {
            If ((^OSTB == Ones))
            {
                If (CondRefOf (\_OSI, Local0))
                {
                    If (\_OSI ("Windows 2001.1"))
                    {
                        ^OSTB = 0x20
                        ^TPOS = 0x20
                    }
                    ElseIf (\_OSI ("Windows 2001 SP1"))
                    {
                        ^OSTB = 0x10
                        ^TPOS = 0x10
                    }
                    ElseIf (\_OSI ("Windows 2001"))
                    {
                        ^OSTB = 0x08
                        ^TPOS = 0x08
                    }
                    Else
                    {
                        ^OSTB = 0x00
                        ^TPOS = 0x00
                    }
                }
                ElseIf (CondRefOf (\_OS, Local0))
                {
                    If (^SEQL (\_OS, "Microsoft Windows"))
                    {
                        ^OSTB = 0x01
                        ^TPOS = 0x01
                    }
                    ElseIf (^SEQL (\_OS, "Microsoft WindowsME: Millennium Edition"))
                    {
                        ^OSTB = 0x02
                        ^TPOS = 0x02
                    }
                    ElseIf (^SEQL (\_OS, "Microsoft Windows NT"))
                    {
                        ^OSTB = 0x04
                        ^TPOS = 0x04
                    }
                    Else
                    {
                        ^OSTB = 0x00
                        ^TPOS = 0x00
                    }
                }
                Else
                {
                    ^OSTB = 0x00
                    ^TPOS = 0x00
                }
            }

            Return (^OSTB) /* \_SB_.OSTB */
        }

        Method (OSHT, 0, NotSerialized)
        {
            \_SB.OSTP ()
        }

        Method (SEQL, 2, Serialized)
        {
            Local0 = SizeOf (Arg0)
            Local1 = SizeOf (Arg1)
            If ((Local0 != Local1))
            {
                Return (Zero)
            }

            Name (BUF0, Buffer (Local0) {})
            BUF0 = Arg0
            Name (BUF1, Buffer (Local0) {})
            BUF1 = Arg1
            Local2 = Zero
            While ((Local2 < Local0))
            {
                Local3 = DerefOf (BUF0 [Local2])
                Local4 = DerefOf (BUF1 [Local2])
                If ((Local3 != Local4))
                {
                    Return (Zero)
                }

                Local2++
            }

            Return (One)
        }
    }

    Name (FWSO, "FWSO")
    Name (_PSC, 0x00)  // _PSC: Power State Current
    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
    {
        Local0 = _PSC /* \_PSC */
        _PSC = 0x00
        If ((Local0 == 0x03))
        {
            \_SB.INF = 0x01
            While (\_SB.INF)
            {
                If (((\_SB.INF == 0x01) && (\_SB.OSTB >= 0x04)))
                {
                    Sleep (0x01F4)
                }
            }
        }
    }

    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
    {
        _PSC = 0x03
    }

    Scope (\_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
        }
    }

    Scope (\_SB.PCI0.LPC0)
    {
        Device (EC)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_GPE, 0x19)  // _GPE: General Purpose Events
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BFFR, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0062,             // Range Minimum
                        0x0062,             // Range Maximum
                        0x00,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0066,             // Range Minimum
                        0x0066,             // Range Maximum
                        0x00,               // Alignment
                        0x01,               // Length
                        )
                })
                Return (BFFR) /* \_SB_.PCI0.LPC0.EC__._CRS.BFFR */
            }

            OperationRegion (ERAM, EmbeddedControl, 0x00, 0xFF)
            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                DSBY,   1, 
                ENGA,   1, 
                ENHY,   1, 
                HFNE,   1, 
                DSEM,   1, 
                EN3R,   1, 
                REBY,   1, 
                ENTM,   1, 
                ENBK,   1, 
                ENFP,   1, 
                RTCW,   1, 
                IDMI,   1, 
                WPSW,   1, 
                BYON,   1, 
                ENBT,   1, 
                NTKY,   1, 
                DKON,   1, 
                DSSK,   1, 
                MTES,   1, 
                USBO,   1, 
                DSMC,   1, 
                SNLC,   1, 
                NLSF,   1, 
                TNKB,   1, 
                DSHP,   1, 
                IGPK,   1, 
                CHGR,   1, 
                    ,   1, 
                CBAT,   1, 
                ADO0,   1, 
                ADO1,   1, 
                Offset (0x04), 
                    ,   1, 
                CLBA,   1, 
                LWBA,   1, 
                SUBE,   1, 
                PUBE,   1, 
                RSBE,   1, 
                DCBE,   1, 
                PFBE,   1, 
                HSPA,   1, 
                NHDD,   1, 
                DEAD,   1, 
                B440,   1, 
                B315,   1, 
                T315,   1, 
                R315,   1, 
                BYAM,   1, 
                HSUN,   8, 
                HSRP,   8, 
                Offset (0x09), 
                Offset (0x0A), 
                Offset (0x0B), 
                TPSE,   2, 
                Offset (0x0C), 
                HLCL,   4, 
                    ,   2, 
                BLIK,   1, 
                TONF,   1, 
                    ,   4, 
                ECBK,   4, 
                HFNS,   2, 
                GSER,   1, 
                PSCS,   1, 
                PSDS,   1, 
                GSUD,   1, 
                GSID,   2, 
                MBCG,   1, 
                SBCG,   1, 
                MBRF,   1, 
                SBRF,   1, 
                HDSU,   1, 
                BYSU,   1, 
                    ,   1, 
                TMOD,   1, 
                HAM0,   8, 
                HAM1,   8, 
                HAM2,   8, 
                HAM3,   8, 
                HAM4,   8, 
                HAM5,   8, 
                HAM6,   8, 
                HAM7,   8, 
                HAM8,   8, 
                HAM9,   8, 
                HAMA,   8, 
                HAMB,   8, 
                HAMC,   8, 
                HAMD,   8, 
                HAME,   8, 
                HAMF,   8, 
                HT00,   1, 
                HT01,   1, 
                HT02,   1, 
                HT03,   1, 
                HT10,   1, 
                HT11,   1, 
                HT12,   1, 
                HT13,   1, 
                Offset (0x23), 
                EXCM,   8, 
                Offset (0x25), 
                Offset (0x26), 
                USP0,   1, 
                USP3,   1, 
                USP4,   1, 
                EHP0,   1, 
                EHP1,   1, 
                Offset (0x27), 
                Offset (0x28), 
                ID00,   1, 
                ID01,   1, 
                ID02,   1, 
                ID03,   1, 
                    ,   2, 
                SEBT,   1, 
                CMDS,   1, 
                Offset (0x2A), 
                HATR,   8, 
                HT0H,   8, 
                HT0L,   8, 
                HT1H,   8, 
                HT1L,   8, 
                HFSP,   8, 
                    ,   5, 
                SMUT,   1, 
                Offset (0x31), 
                FANS,   2, 
                HUWB,   1, 
                ENS4,   1, 
                DSEX,   1, 
                AYID,   1, 
                MMUT,   1, 
                Offset (0x32), 
                HWPM,   1, 
                HWLB,   1, 
                HWLO,   1, 
                HWDK,   1, 
                HWFN,   1, 
                HWBT,   1, 
                HWRI,   1, 
                HWBU,   1, 
                Offset (0x34), 
                    ,   7, 
                HPLO,   1, 
                Offset (0x36), 
                Offset (0x37), 
                Offset (0x38), 
                HB0S,   7, 
                MBTS,   1, 
                Offset (0x3A), 
                MUTE,   1, 
                I2CS,   1, 
                PWRF,   1, 
                WANO,   1, 
                DCBD,   1, 
                DCWL,   1, 
                DCWW,   1, 
                Offset (0x3B), 
                SPKM,   1, 
                KBLH,   1, 
                    ,   1, 
                BTDH,   1, 
                USBN,   1, 
                    ,   2, 
                S3FG,   1, 
                RSCS,   8, 
                Offset (0x3E), 
                Offset (0x41), 
                    ,   7, 
                PFLG,   1, 
                Offset (0x46), 
                FNKY,   1, 
                    ,   1, 
                HPLD,   1, 
                PROF,   1, 
                ACPW,   1, 
                    ,   2, 
                CALR,   1, 
                HPBU,   1, 
                DKEV,   1, 
                BYNO,   1, 
                HDIB,   1, 
                Offset (0x48), 
                HPHI,   1, 
                GSTS,   1, 
                    ,   2, 
                EXGC,   1, 
                DOKI,   1, 
                HDDT,   1, 
                Offset (0x49), 
                    ,   1, 
                NUMK,   1, 
                Offset (0x4A), 
                Offset (0x4B), 
                Offset (0x4C), 
                ETHB,   8, 
                ETLB,   8, 
                    ,   1, 
                ACOV,   1, 
                RMCS,   1, 
                    ,   1, 
                T4E4,   1, 
                T4E5,   1, 
                Offset (0x4F), 
                Offset (0x50), 
                SMPR,   8, 
                SMST,   8, 
                SMAD,   8, 
                SMCM,   8, 
                SMD0,   100, 
                Offset (0x74), 
                BCNT,   8, 
                SMAA,   8, 
                BATD,   16, 
                TMP0,   8, 
                TMP1,   8, 
                TMP2,   8, 
                TMP3,   8, 
                TMP4,   8, 
                TMP5,   8, 
                TMP6,   8, 
                TMP7,   8, 
                Offset (0x81), 
                HIID,   8, 
                Offset (0x83), 
                HFNI,   8, 
                Offset (0x86), 
                Offset (0x87), 
                Offset (0x88), 
                HDEC,   8, 
                HDEO,   8, 
                Offset (0x8B), 
                LOMD,   1, 
                CBDE,   1, 
                Offset (0x8C), 
                Offset (0x8D), 
                HDAA,   3, 
                HDAB,   3, 
                HDAC,   2, 
                Offset (0x8F), 
                Offset (0x90), 
                ERMC,   8, 
                Offset (0x92), 
                AMSB,   8, 
                ALSB,   8, 
                DMSB,   8, 
                DLSB,   8, 
                Offset (0xA0), 
                Offset (0xB0), 
                HDEN,   32, 
                HDEP,   32, 
                HDEM,   8, 
                HDES,   8, 
                Offset (0xC0), 
                Offset (0xC1), 
                MCUR,   16, 
                MBRM,   16, 
                MBVG,   16, 
                Offset (0xC8), 
                ATMX,   8, 
                AC65,   8, 
                Offset (0xCB), 
                BFUD,   1, 
                Offset (0xCC), 
                Offset (0xCD), 
                ECWA,   8, 
                Offset (0xE0), 
                B1FC,   16, 
                Offset (0xE8), 
                Offset (0xE9), 
                Offset (0xEA), 
                Offset (0xEB), 
                Offset (0xEC), 
                Offset (0xED), 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                Offset (0xEE), 
                MBTH,   4, 
                SBTH,   4, 
                Offset (0xF0), 
                Offset (0xF8), 
                    ,   4, 
                Offset (0xF9), 
                Offset (0xFA), 
                Offset (0xFC)
            }

            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                Offset (0xA0), 
                SBRC,   16, 
                SBFC,   16, 
                SBAE,   16, 
                SBRS,   16, 
                SBAC,   16, 
                SBVO,   16, 
                SBAF,   16, 
                SBBS,   16
            }

            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                Offset (0xA0), 
                    ,   15, 
                SBCM,   1, 
                SBMD,   16, 
                SBCC,   16
            }

            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                Offset (0xA0), 
                SBDC,   16, 
                SBDV,   16, 
                SBOM,   16, 
                SBSI,   16, 
                SBDT,   16, 
                SBSN,   16
            }

            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                Offset (0xA0), 
                SBCH,   32
            }

            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                Offset (0xA0), 
                SBMN,   128
            }

            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                Offset (0xA0), 
                SBDN,   128
            }

            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x0E), 
                EC0E,   16
            }

            Name (BATO, 0x00)
            Name (BATN, 0x00)
            Name (BATF, 0xC0)
            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If (((Arg0 == 0x03) && (Arg1 == 0x01)))
                {
                    ECON = 0x01
                    SXFG = 0xFF
                    If (((OSYS > 0x07D0) || (OSYS < 0x07D6)))
                    {
                        OSFG = 0x01
                    }
                    Else
                    {
                        OSFG = 0x00
                    }

                    \UCMS (0x19)
                    \_SB.PCI0.LPC0.EC.GSTS = \_SB.SWGS
                    If (!\_SB.PCI0.LPC0.EC.GSTS)
                    {
                        BTOF = 0x00
                        WLON = 0x00
                        DCWL = 0x00
                        DCBD = 0x00
                    }
                    Else
                    {
                        If (WLNP)
                        {
                            If (\_SB.WLPR)
                            {
                                If (WOFF)
                                {
                                    WLON = 0x00
                                }
                                Else
                                {
                                    WLON = 0x01
                                }
                            }
                            Else
                            {
                                WLON = 0x00
                            }
                        }
                        Else
                        {
                            WLON = 0x00
                        }

                        DCWL = WLON /* \_SB_.PCI0.LPC0.WLON */
                        If (BTMD)
                        {
                            If (\_SB.BTPR)
                            {
                                BTOF = 0x01
                            }
                            Else
                            {
                                BTOF = 0x00
                            }
                        }
                        Else
                        {
                            BTOF = 0x00
                        }

                        DCBD = BTOF /* \_SB_.PCI0.LPC0.BTOF */
                    }

                    \_SB.PCI0.IGD0.CLID = 0x01
                }

                DSMM = 0x00
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (((OSYS > 0x07D0) || (OSYS < 0x07D6)))
                {
                    If (IGDS)
                    {
                        \_SB.PCI0.LPC0.EC._Q15 ()
                        \_SB.PCI0.LPC0.EC._Q14 ()
                    }
                }
            }

            Method (LED, 2, NotSerialized)
            {
                Local0 = (Arg0 | Arg1)
                If (ECON)
                {
                    HLCL = Local0
                }
                Else
                {
                    \WBEC (0x0C, Local0)
                }
            }

            Name (BAON, 0x00)
            Name (WBON, 0x00)
            Method (BEEP, 1, NotSerialized)
            {
                If ((Arg0 == 0x0F))
                {
                    WBON = 0x00
                }

                Local2 = WBON /* \_SB_.PCI0.LPC0.EC__.WBON */
                Local0 = Arg0
                Local1 = 0xFF
                If ((Arg0 == 0x11))
                {
                    Local0 = 0x00
                    Local1 = 0x00
                    WBON = 0x00
                }

                If ((Arg0 == 0x10))
                {
                    Local0 = 0x03
                    Local1 = 0x08
                    WBON = 0x01
                }

                If ((Arg0 == 0x03))
                {
                    WBON = 0x00
                    If (Local2)
                    {
                        Local0 = 0x07
                        If (((\SPS == 0x03) || (\SPS == 0x04)))
                        {
                            Local2 = 0x00
                            Local0 = 0xFF
                            Local1 = 0xFF
                        }
                    }
                }

                If ((Arg0 == 0x07))
                {
                    If (Local2)
                    {
                        Local2 = 0x00
                        Local0 = 0xFF
                        Local1 = 0xFF
                    }
                }

                If (ECON)
                {
                    If ((Local2 && !WBON))
                    {
                        HSRP = 0x00
                        HSUN = 0x00
                        Sleep (0x64)
                    }

                    If ((Local1 != 0xFF))
                    {
                        HSRP = Local1
                    }

                    If ((Local0 != 0xFF))
                    {
                        HSUN = Local0
                    }
                }

                If ((Arg0 == 0x03)) {}
                If ((Arg0 == 0x07))
                {
                    Sleep (0x01F4)
                }
            }

            Method (BPOL, 1, NotSerialized)
            {
                \_SB.PCI0.LPC0.EC.WECB (0x03, 0xD6, Arg0)
                Local0 = \_SB.PCI0.LPC0.EC.RECB (0x03, 0xD0)
                \_SB.PCI0.LPC0.EC.WECB (0x03, 0xD0, Local0 |= 0x01)
            }

            Method (FNST, 0, NotSerialized)
            {
                If (ECON)
                {
                    Local0 = HFNS /* \_SB_.PCI0.LPC0.EC__.HFNS */
                    Local1 = HFNE /* \_SB_.PCI0.LPC0.EC__.HFNE */
                }
                Else
                {
                    Local0 = (\RBEC (0x0E) & 0x03)
                    Local1 = (\RBEC (0x00) & 0x08)
                }

                If (Local1)
                {
                    If ((Local0 == 0x00))
                    {
                        \UCMS (0x11)
                    }

                    If ((Local0 == 0x01))
                    {
                        \UCMS (0x0F)
                    }

                    If ((Local0 == 0x02))
                    {
                        \UCMS (0x10)
                    }
                }
            }

            Method (SELE, 0, NotSerialized)
            {
                BATN = BATD /* \_SB_.PCI0.LPC0.EC__.BATD */
                BATF = 0x00
                If ((0xC0 & BATN))
                {
                    BATF |= 0x01
                }

                If ((0x0300 & BATN))
                {
                    BATF |= 0x04
                }

                Local0 = (BATN & 0x01)
                Local1 = (BATO & 0x01)
                If (Local0)
                {
                    BATF |= 0x0100
                }
                Else
                {
                    BATF &= 0xFEFF
                }

                If (~(Local0 == Local1))
                {
                    BATF |= 0x40
                }

                Local0 = (BATN & 0xC0)
                Local1 = (BATO & 0xC0)
                If (~(Local0 == Local1))
                {
                    BATF |= 0x02
                }

                If ((0x01 & BATF))
                {
                    If ((0x04 & BATF))
                    {
                        If ((BATN & 0x10))
                        {
                            BATF |= 0x10
                        }
                    }
                }
            }

            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x54), 
                SMW0,   16
            }

            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x54), 
                SMB0,   8
            }

            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x54), 
                FLD0,   64
            }

            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x54), 
                FLD1,   128
            }

            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x54), 
                FLD2,   192
            }

            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x54), 
                FLD3,   256
            }

            Mutex (MUT0, 0x00)
            Method (SMRD, 4, NotSerialized)
            {
                If (!ECON)
                {
                    Return (0xFF)
                }

                If ((Arg0 != 0x07))
                {
                    If ((Arg0 != 0x09))
                    {
                        If ((Arg0 != 0x0B))
                        {
                            Return (0x19)
                        }
                    }
                }

                Acquire (MUT0, 0xFFFF)
                Local0 = 0x04
                While ((Local0 > 0x01))
                {
                    SMST &= 0x40
                    SMCM = Arg2
                    SMAD = Arg1
                    SMPR = Arg0
                    Local3 = 0x00
                    While (!Local1 = (SMST & 0xBF))
                    {
                        Sleep (0x02)
                        Local3++
                        If ((Local3 == 0x32))
                        {
                            SMST &= 0x40
                            SMCM = Arg2
                            SMAD = Arg1
                            SMPR = Arg0
                            Local3 = 0x00
                        }
                    }

                    If ((Local1 == 0x80))
                    {
                        Local0 = 0x00
                    }
                    Else
                    {
                        Local0--
                    }
                }

                If (Local0)
                {
                    Local0 = (Local1 & 0x1F)
                }
                Else
                {
                    If ((Arg0 == 0x07))
                    {
                        Arg3 = SMB0 /* \_SB_.PCI0.LPC0.EC__.SMB0 */
                    }

                    If ((Arg0 == 0x09))
                    {
                        Arg3 = SMW0 /* \_SB_.PCI0.LPC0.EC__.SMW0 */
                    }

                    If ((Arg0 == 0x0B))
                    {
                        Local3 = BCNT /* \_SB_.PCI0.LPC0.EC__.BCNT */
                        Local2 = (0x0100 >> 0x03)
                        If ((Local3 > Local2))
                        {
                            Local3 = Local2
                        }

                        If ((Local3 < 0x11))
                        {
                            Local2 = FLD1 /* \_SB_.PCI0.LPC0.EC__.FLD1 */
                        }
                        ElseIf ((Local3 < 0x19))
                        {
                            Local2 = FLD2 /* \_SB_.PCI0.LPC0.EC__.FLD2 */
                        }
                        Else
                        {
                            Local2 = FLD3 /* \_SB_.PCI0.LPC0.EC__.FLD3 */
                        }

                        Local3++
                        Local4 = Buffer (Local3) {}
                        Local3--
                        Local5 = Zero
                        While ((Local3 > Local5))
                        {
                            GBFE (Local2, Local5, RefOf (Local6))
                            PBFE (Local4, Local5, Local6)
                            Local5++
                        }

                        PBFE (Local4, Local5, 0x00)
                        Arg3 = Local4
                    }
                }

                Release (MUT0)
                Return (Local0)
            }

            Method (SMWR, 4, NotSerialized)
            {
                If (!ECON)
                {
                    Return (0xFF)
                }

                If ((Arg0 != 0x06))
                {
                    If ((Arg0 != 0x08))
                    {
                        If ((Arg0 != 0x0A))
                        {
                            Return (0x19)
                        }
                    }
                }

                Acquire (MUT0, 0xFFFF)
                Local0 = 0x04
                While ((Local0 > 0x01))
                {
                    If ((Arg0 == 0x06))
                    {
                        SMB0 = Arg3
                    }

                    If ((Arg0 == 0x08))
                    {
                        SMW0 = Arg3
                    }

                    If ((Arg0 == 0x0A))
                    {
                        SMD0 = Arg3
                    }

                    SMST &= 0x40
                    SMCM = Arg2
                    SMAD = Arg1
                    SMPR = Arg0
                    Local3 = 0x00
                    While (!Local1 = (SMST & 0xBF))
                    {
                        Sleep (0x02)
                        Local3++
                        If ((Local3 == 0x32))
                        {
                            SMST &= 0x40
                            SMCM = Arg2
                            SMAD = Arg1
                            SMPR = Arg0
                            Local3 = 0x00
                        }
                    }

                    If ((Local1 == 0x80))
                    {
                        Local0 = 0x00
                    }
                    Else
                    {
                        Local0--
                    }
                }

                If (Local0)
                {
                    Local0 = (Local1 & 0x1F)
                }

                Release (MUT0)
                Return (Local0)
            }

            Method (RECB, 2, NotSerialized)
            {
                ALSB = Arg1
                AMSB = Arg0
                Local7 = 0x00
                While ((Local7 < 0xC8))
                {
                    If (((Local0 = (ERMC & 0x80)) == 0x80))
                    {
                        Local1 = 0x00
                        Local7++
                    }
                    Else
                    {
                        ERMC = 0x81
                        Sleep (0x14)
                        Local6 = 0x00
                        While ((Local6 < 0xC8))
                        {
                            If (((Local0 = (ERMC & 0x80)) == 0x80))
                            {
                                Local1 = 0x00
                                Local6++
                            }
                            Else
                            {
                                Local1 = DMSB /* \_SB_.PCI0.LPC0.EC__.DMSB */
                                Local6 = 0xC8
                            }
                        }

                        Local7 = 0xC8
                    }
                }

                Return (Local1)
            }

            Method (WECB, 3, NotSerialized)
            {
                AMSB = Arg0
                ALSB = Arg1
                Local7 = 0x00
                While ((Local7 < 0xC8))
                {
                    If (((Local0 = (ERMC & 0x80)) == 0x80))
                    {
                        Local1 = 0x00
                        Local7++
                    }
                    Else
                    {
                        DMSB = Arg2
                        ERMC = 0x83
                        Sleep (0x14)
                        Local6 = 0x00
                        While ((Local6 < 0xC8))
                        {
                            If (((Local0 = (ERMC & 0x80)) == 0x80))
                            {
                                Local1 = 0x00
                                Local6++
                            }
                            Else
                            {
                                Local1 = 0x01
                                Local6 = 0xC8
                            }
                        }

                        Local7 = 0xC8
                    }
                }

                Return (Local1)
            }

            Method (RECW, 2, NotSerialized)
            {
                ALSB = Arg1
                AMSB = Arg0
                Local0 = ERMC /* \_SB_.PCI0.LPC0.EC__.ERMC */
                Local7 = 0x00
                While ((Local7 < 0xC8))
                {
                    If (((Local0 = (ERMC & 0x80)) == 0x80))
                    {
                        Local1 = 0x00
                        Local7++
                    }
                    Else
                    {
                        ERMC = 0x82
                        Sleep (0x14)
                        Local6 = 0x00
                        While ((Local6 < 0xC8))
                        {
                            If (((Local0 = (ERMC & 0x80)) == 0x80))
                            {
                                Local1 = 0x00
                                Local6++
                            }
                            Else
                            {
                                Local1 = DMSB /* \_SB_.PCI0.LPC0.EC__.DMSB */
                                Local2 = DLSB /* \_SB_.PCI0.LPC0.EC__.DLSB */
                                Local6 = 0xC8
                            }
                        }

                        Local7 = 0xC8
                    }
                }

                Local4 = (0x0100 * Local2)
                Local4 += Local1
                Return (Local4)
            }

            Method (CHKS, 0, NotSerialized)
            {
                Local0 = 0x03E8
                While (SMPR)
                {
                    Sleep (0x01)
                    Local0--
                    If (!Local0)
                    {
                        Return (0x8080)
                    }
                }

                Local0 = (SMST & 0x80)
                If (Local0)
                {
                    Return (Zero)
                }

                Return (0x8081)
            }

            Method (BFWL, 0, NotSerialized)
            {
                FW00 = SMD0 /* \_SB_.PCI0.LPC0.EC__.SMD0 */
                SMI (0x14, 0x02, 0x00, 0x00, 0x00)
            }

            Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x01
            }

            Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x02
            }

            Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x03
            }

            Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x04
            }

            Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x05
            }

            Method (_Q06, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x06
            }

            Method (_Q07, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x07
            }

            Method (_Q08, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x08
            }

            Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x09
            }

            Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x0A
            }

            Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x0B
            }

            Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x0C
            }

            Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x0D
            }

            Method (_Q0E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x0E
            }

            Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x0F
            }

            Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x10
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x01))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1001)
                }
            }

            Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x11
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x02))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1002)
                }
                Else
                {
                    Noop
                }
            }

            Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x12
                \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1003)
            }

            Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x13
                If (\_SB.PCI0.LPC0.EC.HKEY.DHKC)
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1004)
                }
                Else
                {
                    Notify (\_SB.SLPB, 0x80) // Status Change
                }
            }

            Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x14
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x8000))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1010)
                }

                If ((\_OSI ("Windows 2006") || \_OSI ("Windows 2009")))
                {
                    If (~\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x8000))
                    {
                        Notify (\_SB.PCI0.IGD0.DD04, 0x86) // Device-Specific
                    }

                    Sleep (0x64)
                    \_SB.PCI0.ISBC (\_SB.PCI0.IGD0.PWMC)
                    \UCMS (0x18)
                }
                Else
                {
                    \UCMS (0x04)
                    \_SB.PCI0.ISBC (\_SB.PCI0.IGD0.PWMC)
                }
            }

            Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x15
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x00010000))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1011)
                }

                If ((\_OSI ("Windows 2006") || \_OSI ("Windows 2009")))
                {
                    If (~\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x8000))
                    {
                        Notify (\_SB.PCI0.IGD0.DD04, 0x87) // Device-Specific
                    }

                    Sleep (0x64)
                    \_SB.PCI0.ISBC (\_SB.PCI0.IGD0.PWMC)
                    \UCMS (0x18)
                }
                Else
                {
                    \UCMS (0x05)
                    \_SB.PCI0.ISBC (\_SB.PCI0.IGD0.PWMC)
                }
            }

            Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x16
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x40))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1007)
                    FNF7 = 0x01
                    CLCN = 0x00
                }
                Else
                {
                    \_SB.PCI0.IGD0.GHDS (0x00)
                }
            }

            Method (_Q17, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x17
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x80))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1008)
                }
                ElseIf (!\WNTF)
                {
                    VEXP ()
                }
            }

            Method (_Q18, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x18
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x0100))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1009)
                }

                Noop
            }

            Method (_Q19, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x19
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x00800000))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1018)
                }

                \UCMS (0x03)
            }

            Method (_Q1A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x1A
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x0400))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x100B)
                }
            }

            Method (_Q1B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x1B
                \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x100C)
            }

            Method (_Q1C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x1C
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x00200000))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1016)
                }
                Else
                {
                    \_SB.PHSR (0x8B)
                }

                \UCMS (0x00)
            }

            Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x1D
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x00100000))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1015)
                }
                Else
                {
                    \_SB.PHSR (0x8B)
                }

                \UCMS (0x01)
            }

            Method (_Q1E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x1E
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x00400000))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1017)
                }
                Else
                {
                    \_SB.PHSR (0x8A)
                }

                \UCMS (0x02)
            }

            Method (_Q1F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x1F
            }

            Method (_Q22, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x22
                If (MBTS)
                {
                    Notify (\_SB.BAT1, 0x80) // Status Change
                    Notify (\_SB.BAT1, 0x00) // Bus Check
                }
            }

            Method (_Q24, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x24
                Notify (\_SB.BAT1, 0x80) // Status Change
            }

            Method (_Q26, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x26
                PWRS = \_SB.PCI0.LPC0.EC.ACPW
                Sleep (0x01F4)
                Notify (\_SB.ACAD, 0x80) // Status Change
                Notify (\_TZ.TZ00, 0x80) // Thermal Status Change
            }

            Method (_Q27, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x27
                PWRS = \_SB.PCI0.LPC0.EC.ACPW
                Sleep (0x01F4)
                Notify (\_SB.ACAD, 0x00) // Bus Check
                Notify (\_TZ.TZ00, 0x80) // Thermal Status Change
            }

            Method (_Q28, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x28
            }

            Method (_Q29, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x29
            }

            Method (_Q2A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x5002)
                Notify (\_SB.LID, 0x80) // Status Change
            }

            Method (_Q2B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x2B
                \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x5001)
                Notify (\_SB.LID, 0x80) // Status Change
            }

            Method (_Q3F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
            }

            Method (_Q40, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x40
                Notify (\_TZ.TZ00, 0x80) // Thermal Status Change
            }

            Method (_Q41, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x41
            }

            Method (_Q43, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x43
            }

            Method (_Q4A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x4A
                Sleep (0x03E8)
                Notify (\_SB.BAT1, 0x00) // Bus Check
            }

            Method (_Q4B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x4B
                Notify (\_SB.BAT1, 0x80) // Status Change
            }

            Method (_Q4E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x4E
                \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x6011)
            }

            Method (_Q4F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x4F
                \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x6012)
            }

            Method (_Q60, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x60
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x2000))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x100E)
                }
            }

            Method (_Q61, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
            }

            Method (_Q62, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
            }

            Method (_Q63, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x63
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x00080000))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1014)
                }

                \UCMS (0x0B)
            }

            Method (_Q64, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x64
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x10))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1005)
                }
                ElseIf (\_SB.PCI0.LPC0.EC.GSTS) {}
                Else
                {
                }
            }

            Method (_Q65, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x65
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x20))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1006)
                }
                ElseIf (CMAB)
                {
                    If (!CMAT)
                    {
                        CMAT = 0x01
                        \UCMS (0x17)
                    }
                    Else
                    {
                        CMAT = 0x00
                        \UCMS (0x16)
                    }
                }
                Else
                {
                    CMAT = 0x01
                    \UCMS (0x17)
                }
            }

            Method (_Q66, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x66
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x0200))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x100A)
                }
            }

            Method (_Q67, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x67
                If (\_SB.PCI0.LPC0.EC.HKEY.MHKK (0x00040000))
                {
                    \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x1013)
                }
            }

            Method (_Q68, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x68
            }

            Method (_Q69, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x69
            }

            Method (_Q6A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x6A
                \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x101B)
            }

            Method (_Q6B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x6B
            }

            Method (_Q6C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x6C
            }

            Method (_Q6D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x6D
            }

            Method (_Q6E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x6E
            }

            Method (_Q6F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x6F
            }

            Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x70
                FNST ()
            }

            Method (_Q72, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x72
                FNST ()
            }

            Method (_Q73, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x73
                FNST ()
            }

            Method (_Q76, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x76
            }

            Method (_Q77, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x77
            }

            Method (_QEA, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0xEA
                If ((\_SB.PCI0.LPC0.EC.T4E4 == 0x00))
                {
                    \_SB.PCI0.LPC0.EC.T4E4 = 0x01
                    \_SB.PCI0.LPC0.EC.T4E5 = 0x00
                    \THRO (0x91)
                    \THRO (0x95)
                }
                Else
                {
                    \_SB.PCI0.LPC0.EC.T4E5 = 0x01
                    \THRO (0x92)
                    \THRO (0x95)
                }
            }

            Method (_QEC, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0xEC
                \_SB.PCI0.LPC0.EC.T4E4 = 0x01
                \_SB.PCI0.LPC0.EC.T4E5 = 0x00
                \THRO (0x91)
                \THRO (0x95)
            }

            Method (_QEB, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0xEB
                \_SB.PCI0.LPC0.EC.ACOV = 0x01
                If ((\THRO (0x93) == 0x12))
                {
                    \_SB.PCI0.LPC0.EC.RMCS = 0x01
                }

                \THRO (0x95)
            }

            Method (_QED, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0xED
                \_SB.PCI0.LPC0.EC.ACOV = 0x00
                \_SB.PCI0.LPC0.EC.RMCS = 0x00
                \_SB.PCI0.LPC0.EC.T4E4 = 0x00
                \_SB.PCI0.LPC0.EC.T4E5 = 0x00
                \THRO (0x94)
                \THRO (0x95)
            }

            Method (_Q34, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x34
                If (DSMM)
                {
                    DSMM = 0x00
                }

                Notify (\_TZ.TZ00, 0x80) // Thermal Status Change
            }

            Name (CLCN, 0x00)
            Name (CC01, 0x00)
            Name (CC02, 0x00)
            Method (_Q95, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x95
                Notify (\_TZ.TZ00, 0x80) // Thermal Status Change
                If (SM05)
                {
                    SM05 = 0x00
                }

                If ((FNF7 == 0x01))
                {
                    If ((CLCN > 0x05))
                    {
                        \UCMS (0x1A)
                        CLCN = 0x00
                        FNF7 = 0x00
                    }
                    ElseIf ((CLCN < 0x05))
                    {
                        CLCN++
                    }
                    Else
                    {
                        CLCN = 0x00
                    }
                }

                If (!CC02)
                {
                    If ((CC01 == 0x06))
                    {
                        PWRS = \_SB.PCI0.LPC0.EC.ACPW
                        CC02 = 0x01
                    }
                    Else
                    {
                        CC01++
                    }
                }
            }

            Device (HKEY)
            {
                Name (_HID, EisaId ("IBM0068"))  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (MHKV, 0, NotSerialized)
                {
                    Return (0x0100)
                }

                Name (DHKC, 0x00)
                Name (DHKB, 0x01)
                Mutex (XDHK, 0x07)
                Name (DHKH, 0x00)
                Name (DHKW, 0x00)
                Name (DHKS, 0x00)
                Name (DHKD, 0x00)
                Name (DHKN, 0x080C)
                Name (DHKT, 0x00)
                Name (DHWW, 0x00)
                Method (MHKA, 0, NotSerialized)
                {
                    Return (0x040988FC)
                }

                Method (MHKN, 0, NotSerialized)
                {
                    Return (DHKN) /* \_SB_.PCI0.LPC0.EC__.HKEY.DHKN */
                }

                Method (MHKK, 1, NotSerialized)
                {
                    If (DHKC)
                    {
                        Return ((DHKN & Arg0))
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (MHKM, 2, NotSerialized)
                {
                    Acquire (XDHK, 0xFFFF)
                    If ((Arg0 > 0x20))
                    {
                        Noop
                    }
                    Else
                    {
                        Local0 = (One << Arg0--)
                        If ((Local0 & 0x00FFFFFF))
                        {
                            If (Arg1)
                            {
                                DHKN |= Local0 /* \_SB_.PCI0.LPC0.EC__.HKEY.DHKN */
                            }
                            Else
                            {
                                DHKN &= (Local0 ^ 0xFFFFFFFF)
                            }
                        }
                        Else
                        {
                            Noop
                        }
                    }

                    Release (XDHK)
                }

                Method (MHKS, 0, NotSerialized)
                {
                    Notify (\_SB.SLPB, 0x80) // Status Change
                }

                Method (MHKC, 1, NotSerialized)
                {
                    DHKC = Arg0
                }

                Method (MHKP, 0, NotSerialized)
                {
                    Acquire (XDHK, 0xFFFF)
                    If (DHWW)
                    {
                        Local1 = DHWW /* \_SB_.PCI0.LPC0.EC__.HKEY.DHWW */
                        DHWW = Zero
                    }
                    ElseIf (DHKW)
                    {
                        Local1 = DHKW /* \_SB_.PCI0.LPC0.EC__.HKEY.DHKW */
                        DHKW = Zero
                    }
                    ElseIf (DHKD)
                    {
                        Local1 = DHKD /* \_SB_.PCI0.LPC0.EC__.HKEY.DHKD */
                        DHKD = Zero
                    }
                    ElseIf (DHKS)
                    {
                        Local1 = DHKS /* \_SB_.PCI0.LPC0.EC__.HKEY.DHKS */
                        DHKS = Zero
                    }
                    ElseIf (DHKT)
                    {
                        Local1 = DHKT /* \_SB_.PCI0.LPC0.EC__.HKEY.DHKT */
                        DHKT = Zero
                    }
                    Else
                    {
                        Local1 = DHKH /* \_SB_.PCI0.LPC0.EC__.HKEY.DHKH */
                        DHKH = Zero
                    }

                    Release (XDHK)
                    Return (Local1)
                }

                Method (MHKE, 1, NotSerialized)
                {
                    DHKB = Arg0
                    Acquire (XDHK, 0xFFFF)
                    DHKH = Zero
                    DHKW = Zero
                    DHKS = Zero
                    DHKD = Zero
                    DHKT = Zero
                    DHWW = Zero
                    Release (XDHK)
                }

                Method (MHKQ, 1, NotSerialized)
                {
                    If (DHKB)
                    {
                        If (DHKC)
                        {
                            Acquire (XDHK, 0xFFFF)
                            If ((Arg0 < 0x1000)) {}
                            ElseIf ((Arg0 < 0x2000))
                            {
                                DHKH = Arg0
                                P80H = 0xEA
                            }
                            ElseIf ((Arg0 < 0x3000))
                            {
                                DHKW = Arg0
                            }
                            ElseIf ((Arg0 < 0x4000))
                            {
                                DHKS = Arg0
                            }
                            ElseIf ((Arg0 < 0x5000))
                            {
                                DHKD = Arg0
                            }
                            ElseIf ((Arg0 < 0x6000))
                            {
                                DHKH = Arg0
                            }
                            ElseIf ((Arg0 < 0x7000))
                            {
                                DHKT = Arg0
                            }
                            ElseIf ((Arg0 < 0x8000))
                            {
                                DHWW = Arg0
                            }
                            Else
                            {
                            }

                            Release (XDHK)
                            Notify (HKEY, 0x80) // Status Change
                        }
                        ElseIf ((Arg0 == 0x1004))
                        {
                            Notify (\_SB.SLPB, 0x80) // Status Change
                        }
                    }
                }

                Method (MHKB, 1, NotSerialized)
                {
                }

                Method (MHKD, 0, NotSerialized)
                {
                }

                Method (MHKG, 0, NotSerialized)
                {
                    Return (0x00)
                }

                Method (MMTG, 0, NotSerialized)
                {
                    P80H = 0x29
                    Local0 = 0x00
                    Local0 |= 0x01
                    If (!MCMU)
                    {
                        Local0 |= 0x00010000
                        Local0 &= 0xFFFFFFFE
                    }

                    Return (Local0)
                }

                Method (MMTS, 1, NotSerialized)
                {
                    P80H = 0x19
                    If ((Arg0 == 0x02))
                    {
                        \_SB.PCI0.LPC0.EC.MMUT = 0x01
                    }
                    Else
                    {
                        \_SB.PCI0.LPC0.EC.MMUT = 0x00
                    }
                }

                Name (INDV, 0x00)
                Method (MHQI, 0, NotSerialized)
                {
                    If ((\IPMS & 0x01))
                    {
                        INDV |= 0x01
                    }

                    If ((\IPMS & 0x02))
                    {
                        INDV |= 0x02
                    }

                    If ((\IPMS & 0x04)) {}
                    If ((\IPMS & 0x08))
                    {
                        INDV |= 0x0200
                    }

                    If ((\IPMS & 0x10)) {}
                    INDV = 0x0203
                    Return (INDV) /* \_SB_.PCI0.LPC0.EC__.HKEY.INDV */
                }

                Method (MHGI, 1, NotSerialized)
                {
                    Name (RETB, Buffer (0x10) {})
                    CreateByteField (RETB, 0x00, MHGS)
                    Name (IPMB, Buffer (0x0F)
                    {
                        /* 0000 */  0x03, 0x03, 0x03, 0x04, 0x05, 0x04, 0x05, 0x06,  // ........
                        /* 0008 */  0x06, 0x0D, 0x0E, 0x11, 0x17, 0x1C, 0x24         // ......$
                    })
                    Name (IPMR, Buffer (0x03)
                    {
                         0x00, 0x00, 0x00                                 // ...
                    })
                    Name (IPMA, 0x19)
                    Local0 = (0x01 << Arg0)
                    If ((INDV & Local0))
                    {
                        If ((Arg0 == 0x00))
                        {
                            CreateField (RETB, 0x08, 0x78, BRBU)
                            BRBU = IPMB /* \_SB_.PCI0.LPC0.EC__.HKEY.MHGI.IPMB */
                            MHGS = 0x10
                        }
                        ElseIf ((Arg0 == 0x01))
                        {
                            CreateField (RETB, 0x08, 0x18, RRBU)
                            RRBU = IPMR /* \_SB_.PCI0.LPC0.EC__.HKEY.MHGI.IPMR */
                            MHGS = 0x04
                        }
                        ElseIf ((Arg0 == 0x09))
                        {
                            CreateField (RETB, 0x10, 0x08, AUBU)
                            AUBU = IPMA /* \_SB_.PCI0.LPC0.EC__.HKEY.MHGI.IPMA */
                            RETB [0x01] = 0x01
                            MHGS = 0x03
                        }
                    }

                    Return (RETB) /* \_SB_.PCI0.LPC0.EC__.HKEY.MHGI.RETB */
                }

                Method (MHSI, 2, NotSerialized)
                {
                }

                Method (MHDM, 1, NotSerialized)
                {
                    \BDMC (Arg0)
                }

                Method (UAWO, 1, NotSerialized)
                {
                    Return (\UAWS (Arg0))
                }

                Name (WGFL, 0x00)
                Method (GWLS, 0, NotSerialized)
                {
                    Return (\_SB.PCI0.LPC0.EC.GSTS)
                }

                Method (SWLS, 1, NotSerialized)
                {
                    If ((Arg0 & 0x01))
                    {
                        \_SB.PCI0.LPC0.EC.GSTS = 0x01
                        \WGSV (0x07)
                        If (\_SB.WLPR)
                        {
                            WLPC (0x01)
                        }
                        Else
                        {
                            WLPC (0x00)
                        }

                        If (\_SB.BTPR)
                        {
                            BPWC (0x01)
                        }
                        Else
                        {
                            BPWC (0x00)
                        }
                    }
                    Else
                    {
                        \_SB.PCI0.LPC0.EC.GSTS = 0x00
                        \WGSV (0x08)
                        WLPC (0x00)
                        BPWC (0x00)
                    }
                }

                Method (WLPS, 0, NotSerialized)
                {
                    Local0 = WLON /* \_SB_.PCI0.LPC0.WLON */
                    Return (Local0)
                }

                Method (WLPC, 1, NotSerialized)
                {
                    If (WLNP)
                    {
                        If ((Arg0 == 0x00))
                        {
                            If (ECON)
                            {
                                DCWL = Zero
                            }
                            Else
                            {
                                \MBEC (0x3A, 0xDF, 0x00)
                            }

                            WLON = Zero
                        }
                        ElseIf ((Arg0 == 0x01))
                        {
                            If (ECON)
                            {
                                DCWL = One
                            }
                            Else
                            {
                                \MBEC (0x3A, 0xFF, 0x20)
                            }

                            WLON = One
                        }
                        ElseIf ((Arg0 == 0x02))
                        {
                            WLON = Zero
                        }
                        ElseIf ((Arg0 == 0x03))
                        {
                            If (ECON)
                            {
                                WLON = DCWL /* \_SB_.PCI0.LPC0.EC__.DCWL */
                            }
                            Else
                            {
                                WLON = One
                            }
                        }
                    }
                }

                Method (GWLN, 0, NotSerialized)
                {
                    Local0 = 0x00
                    If (WLNP)
                    {
                        Local0 |= 0x01
                    }

                    If (WLPS ())
                    {
                        Local0 |= 0x02
                    }

                    Return (Local0)
                }

                Method (SWLN, 1, NotSerialized)
                {
                    P80H = 0xFA
                    If (\_SB.PCI0.LPC0.EC.GSTS)
                    {
                        If (((Arg0 & 0x02) && WLNP))
                        {
                            \WGSV (0x05)
                            WOFF = 0x00
                            WLPC (0x01)
                        }
                        Else
                        {
                            \WGSV (0x06)
                            WOFF = 0x01
                            WLPC (0x00)
                        }
                    }
                }

                Method (GBDC, 0, NotSerialized)
                {
                    Local0 = 0x00
                    If (BTMD)
                    {
                        Local0 = 0x01
                        WGFL = (Local0 | 0x10)
                    }
                    Else
                    {
                        WGFL &= ~0x10
                    }

                    If ((WGFL & 0x10))
                    {
                        Local0 |= 0x01
                    }

                    If (CBCI)
                    {
                        WGFL = 0x80
                    }

                    If ((WGFL & 0x80))
                    {
                        Return (Local0)
                    }

                    If (BPWS ())
                    {
                        Local0 |= 0x02
                    }

                    If ((WGFL & 0x40))
                    {
                        Local0 |= 0x04
                    }

                    Return (Local0)
                }

                Method (SBDC, 1, NotSerialized)
                {
                    If ((Arg0 & 0x02))
                    {
                        BPWC (0x01)
                        \BLTH (0x02)
                        CBTP = One
                    }
                    Else
                    {
                        BPWC (0x00)
                        \BLTH (0x03)
                        CBTP = Zero
                    }
                }

                Method (BPWS, 0, NotSerialized)
                {
                    Local0 = BTOF /* \_SB_.PCI0.LPC0.BTOF */
                    Return (Local0)
                }

                Method (BTGL, 0, NotSerialized)
                {
                    If ((WGFL & 0x10))
                    {
                        BPWC (BPWS ())
                    }
                }

                Method (BPWC, 1, NotSerialized)
                {
                    BTHA = 0x01
                    If ((Arg0 && ((WGFL & 0x10) && !(WGFL & 0x80
                        ))))
                    {
                        If (ECON)
                        {
                            \_SB.PCI0.LPC0.EC.DCBD = One
                            BTOF = 0x01
                        }
                        Else
                        {
                            \MBEC (0x3A, 0xFF, 0x10)
                        }

                        WGFL |= 0x20
                    }
                    Else
                    {
                        If (ECON)
                        {
                            \_SB.PCI0.LPC0.EC.DCBD = Zero
                            BTOF = 0x00
                        }
                        Else
                        {
                            \MBEC (0x3A, 0xEF, 0x00)
                        }

                        WGFL &= ~0x20
                    }
                }

                Method (WGIN, 0, NotSerialized)
                {
                    WGFL = 0x00
                    If (BTMD)
                    {
                        WGFL |= 0x10
                    }

                    If (WANP)
                    {
                        WGFL |= 0x01
                    }

                    If (WWAP)
                    {
                        WGFL |= 0x04
                    }

                    If (CBTP)
                    {
                        WGFL |= 0x40
                    }

                    If (CWAI)
                    {
                        WGFL |= 0x08
                    }

                    If (CBCI)
                    {
                        WGFL |= 0x80
                    }

                    If (BPWS ())
                    {
                        WGFL |= 0x20
                    }
                }

                Method (WGPS, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x04))
                    {
                        \BLTH (0x05)
                    }

                    If (!(WGFL & 0x40))
                    {
                        BPWC (0x00)
                    }
                }

                Method (WGWK, 1, NotSerialized)
                {
                    If ((WGFL & 0x20))
                    {
                        BPWC (0x01)
                    }
                }

                Method (GUWB, 0, NotSerialized)
                {
                    Local0 = 0x00
                    If ((WGFL & 0x0100))
                    {
                        Local0 |= 0x01
                    }

                    If (UPWS ())
                    {
                        Local0 |= 0x02
                    }

                    Return (Local0)
                }

                Method (SUWB, 1, NotSerialized)
                {
                    If ((Arg0 & 0x02))
                    {
                        UPWC (0x01)
                    }
                    Else
                    {
                        UPWC (0x00)
                    }
                }

                Method (UPWS, 0, NotSerialized)
                {
                    If (ECON)
                    {
                        Local0 = \_SB.PCI0.LPC0.EC.HUWB
                    }
                    Else
                    {
                        Local0 = ((\RBEC (0x31) & 0x04) >> 0x02)
                    }

                    Return (Local0)
                }

                Method (UPWC, 1, NotSerialized)
                {
                    If ((Arg0 && (WGFL & 0x0100)))
                    {
                        If (ECON)
                        {
                            \_SB.PCI0.LPC0.EC.HUWB = One
                        }
                        Else
                        {
                            \MBEC (0x31, 0xFF, 0x04)
                        }

                        WGFL |= 0x0200
                    }
                    Else
                    {
                        If (ECON)
                        {
                            \_SB.PCI0.LPC0.EC.HUWB = Zero
                        }
                        Else
                        {
                            \MBEC (0x31, 0xFB, 0x00)
                        }

                        WGFL &= ~0x0200
                    }

                    \UCMS (0x1B)
                }

                Method (GLSI, 0, NotSerialized)
                {
                }

                Method (NUMG, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Return (Local0)
                }

                Method (HKS4, 0, NotSerialized)
                {
                    If (\_SB.PCI0.LPC0.EC.GSTS)
                    {
                        If (WLNP)
                        {
                            If (\_SB.WLPR)
                            {
                                If (WOFF)
                                {
                                    WLON = 0x00
                                }
                                Else
                                {
                                    WLON = 0x01
                                }
                            }
                            Else
                            {
                                WLON = 0x00
                            }
                        }
                        Else
                        {
                            WLON = 0x00
                        }

                        DCWL = WLON /* \_SB_.PCI0.LPC0.WLON */
                        If (BTMD)
                        {
                            If (\_SB.BTPR)
                            {
                                BTOF = 0x01
                            }
                            Else
                            {
                                BTOF = 0x00
                            }
                        }
                        Else
                        {
                            BTOF = 0x00
                        }

                        DCBD = BTOF /* \_SB_.PCI0.LPC0.BTOF */
                    }
                    Else
                    {
                        BTOF = 0x00
                        WLON = 0x00
                        DCWL = 0x00
                        DCBD = 0x00
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (ACAD)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                \_SB
            })
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                If (ECON)
                {
                    ACST = \_SB.PCI0.LPC0.EC.ACPW
                    Sleep (0x64)
                    \UCMS (0x13)
                    PWRS = \_SB.PCI0.LPC0.EC.ACPW
                }

                Return (PWRS) /* \PWRS */
            }
        }
    }

    Scope (\_SB)
    {
        Method (VTOB, 1, NotSerialized)
        {
            Local0 = 0x01
            Local0 <<= Arg0
            Return (Local0)
        }

        Method (BTOV, 1, NotSerialized)
        {
            Local0 = (Arg0 >> 0x01)
            Local1 = 0x00
            While (Local0)
            {
                Local1++
                Local0 >>= 0x01
            }

            Return (Local1)
        }

        Method (MKWD, 2, NotSerialized)
        {
            If ((Arg1 & 0x80))
            {
                Local0 = 0xFFFF0000
            }
            Else
            {
                Local0 = Zero
            }

            Local0 |= Arg0
            Local0 |= (Arg1 << 0x08)
            Return (Local0)
        }

        Method (POSW, 1, NotSerialized)
        {
            If ((Arg0 & 0x8000))
            {
                If ((Arg0 == 0xFFFF))
                {
                    Return (0xFFFFFFFF)
                }
                Else
                {
                    Local0 = ~Arg0
                    Local0++
                    Local0 &= 0xFFFF
                    Return (Local0)
                }
            }
            Else
            {
                Return (Arg0)
            }
        }

        Method (GBFE, 3, NotSerialized)
        {
            CreateByteField (Arg0, Arg1, TIDX)
            Arg2 = TIDX /* \_SB_.GBFE.TIDX */
        }

        Method (PBFE, 3, NotSerialized)
        {
            CreateByteField (Arg0, Arg1, TIDX)
            TIDX = Arg2
        }

        Method (ITOS, 1, NotSerialized)
        {
            Local0 = Buffer (0x09)
                {
                    /* 0000 */  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                    /* 0008 */  0x00                                             // .
                }
            Local7 = Buffer (0x11)
                {
                    "0123456789ABCDEF"
                }
            Local1 = 0x08
            Local2 = 0x00
            Local3 = 0x00
            While (Local1)
            {
                Local1--
                Local4 = ((Arg0 >> (Local1 << 0x02)) & 0x0F)
                If (Local4)
                {
                    Local3 = Ones
                }

                If (Local3)
                {
                    GBFE (Local7, Local4, RefOf (Local5))
                    PBFE (Local0, Local2, Local5)
                    Local2++
                }
            }

            Return (Local0)
        }

        Method (WAEC, 0, NotSerialized)
        {
            Name (CUNT, 0x14)
            While ((\_SB.PCI0.LPC0.EC.ECWA == 0x00))
            {
                Sleep (0x05)
                CUNT--
                If ((CUNT == 0x00))
                {
                    Break
                }
            }
        }

        Mutex (BATM, 0x07)
        Method (GBIF, 3, NotSerialized)
        {
            Acquire (BATM, 0xFFFF)
            If (Arg2)
            {
                \_SB.PCI0.LPC0.EC.HIID = (Arg0 | 0x01)
                WAEC ()
                Local7 = \_SB.PCI0.LPC0.EC.SBCM
                Arg1 [0x00] = (Local7 ^ 0x01)
                \_SB.PCI0.LPC0.EC.HIID = Arg0
                WAEC ()
                If (Local7)
                {
                    Arg1 [0x02] = (\_SB.PCI0.LPC0.EC.SBFC * 0x0A)
                }
                Else
                {
                    Arg1 [0x02] = \_SB.PCI0.LPC0.EC.SBFC
                }

                \_SB.PCI0.LPC0.EC.HIID = (Arg0 | 0x02)
                WAEC ()
                If (Local7)
                {
                    Local0 = (\_SB.PCI0.LPC0.EC.SBDC * 0x0A)
                }
                Else
                {
                    Local0 = \_SB.PCI0.LPC0.EC.SBDC
                }

                Arg1 [0x01] = Local0
                Divide (Local0, 0x14, Local1, Arg1 [0x05])
                Divide (Local0, 0x64, Local1, Arg1 [0x06])
                Arg1 [0x04] = \_SB.PCI0.LPC0.EC.SBDV
                Local0 = \_SB.PCI0.LPC0.EC.SBSN
                Name (SERN, Buffer (0x06)
                {
                    "     "
                })
                Local2 = 0x04
                While (Local0)
                {
                    Divide (Local0, 0x0A, Local1, Local0)
                    SERN [Local2] = (Local1 + 0x30)
                    Local2--
                }

                Arg1 [0x0A] = SERN /* \_SB_.GBIF.SERN */
                \_SB.PCI0.LPC0.EC.HIID = (Arg0 | 0x06)
                WAEC ()
                Arg1 [0x09] = \_SB.PCI0.LPC0.EC.SBDN
                \_SB.PCI0.LPC0.EC.HIID = (Arg0 | 0x04)
                WAEC ()
                Name (BTYP, Buffer (0x05)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                })
                BTYP = \_SB.PCI0.LPC0.EC.SBCH
                Arg1 [0x0B] = BTYP /* \_SB_.GBIF.BTYP */
                \_SB.PCI0.LPC0.EC.HIID = (Arg0 | 0x05)
                WAEC ()
                Arg1 [0x0C] = \_SB.PCI0.LPC0.EC.SBMN
            }
            Else
            {
                Arg1 [0x01] = 0xFFFFFFFF
                Arg1 [0x05] = 0x00
                Arg1 [0x06] = 0x00
                Arg1 [0x02] = 0xFFFFFFFF
            }

            BATB = 0x00
            Release (BATM)
            Return (Arg1)
        }

        Method (GBST, 4, NotSerialized)
        {
            BATB = 0x01
            If (\_SB.PCI0.LPC0.EC.BFUD)
            {
                \UCMS (0x1A)
            }

            Acquire (BATM, 0xFFFF)
            ERME = \_SB.PCI0.LPC0.EC.EC0E
            If ((Arg1 & 0x20))
            {
                Local0 = 0x02
            }
            ElseIf ((Arg1 & 0x40))
            {
                Local0 = 0x01
            }
            Else
            {
                Local0 = 0x00
            }

            If ((Arg1 & 0x0F)) {}
            Else
            {
                Local0 |= 0x04
            }

            If (((Arg1 & 0x0F) == 0x0F))
            {
                Local0 = 0x04
                Local1 = 0x00
                Local2 = 0x00
                Local3 = 0x00
            }
            Else
            {
                \_SB.PCI0.LPC0.EC.HIID = Arg0
                WAEC ()
                Local3 = \_SB.PCI0.LPC0.EC.SBVO
                If (Arg2)
                {
                    Local2 = (\_SB.PCI0.LPC0.EC.SBRC * 0x0A)
                }
                Else
                {
                    Local2 = \_SB.PCI0.LPC0.EC.SBRC
                }

                Local1 = \_SB.PCI0.LPC0.EC.SBAC
                If ((Local1 >= 0x8000))
                {
                    If ((Local0 & 0x01))
                    {
                        Local1 = (0x00010000 - Local1)
                    }
                    Else
                    {
                        Local1 = 0x00
                    }
                }
                ElseIf (!(Local0 & 0x02))
                {
                    Local1 = 0x00
                }

                If (Arg2)
                {
                    Local1 *= Local3
                    Divide (Local1, 0x03E8, Local7, Local1)
                }
            }

            Arg3 [0x00] = Local0
            Arg3 [0x01] = Local1
            Arg3 [0x02] = Local2
            Arg3 [0x03] = Local3
            BATB = 0x00
            Release (BATM)
            Return (Arg3)
        }

        Device (BAT1)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                \_SB
            })
            Name (B0ST, 0x00)
            Name (BT0I, Package (0x0D)
            {
                0x00, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0x01, 
                0x2A30, 
                0x00, 
                0x00, 
                0x01, 
                0x01, 
                "", 
                "", 
                "", 
                ""
            })
            Name (BT0P, Package (0x04) {})
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (ECON)
                {
                    B0ST = \_SB.PCI0.LPC0.EC.MBTS
                }
                ElseIf ((\RBEC (0x38) & 0x80))
                {
                    B0ST = 0x01
                }
                Else
                {
                    B0ST = 0x00
                }

                If (B0ST)
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                BATB = 0x01
                Local7 = 0x00
                Local6 = 0x01F4
                While ((!Local7 && Local6))
                {
                    If (\_SB.PCI0.LPC0.EC.MBTS)
                    {
                        If (((\_SB.PCI0.LPC0.EC.HB0S & 0x0F) == 0x0F))
                        {
                            Sleep (0x14)
                            Local6--
                        }
                        Else
                        {
                            Local7 = 0x01
                        }
                    }
                    Else
                    {
                        Local6 = 0x00
                    }
                }

                Return (GBIF (0x00, BT0I, Local7))
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Local0 = (DerefOf (BT0I [0x00]) ^ 0x01)
                Return (GBST (0x00, \_SB.PCI0.LPC0.EC.HB0S, Local0, BT0P))
            }

            Method (_BTP, 1, NotSerialized)  // _BTP: Battery Trip Point
            {
                \_SB.PCI0.LPC0.EC.HAM4 &= 0xEF
                If (Arg0)
                {
                    Local1 = Arg0
                    If (!DerefOf (BT0I [0x00]))
                    {
                        Divide (Local1, 0x0A, Local0, Local1)
                    }

                    \_SB.PCI0.LPC0.EC.HT0L = (Local1 & 0xFF)
                    \_SB.PCI0.LPC0.EC.HT0H = ((Local1 >> 0x08) & 0xFF)
                    \_SB.PCI0.LPC0.EC.HAM4 |= 0x10
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x18, 
                0x03
            })
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                If (ECON)
                {
                    Local0 = \_SB.PCI0.LPC0.EC.HPLD
                    If (((OSYS > 0x07D0) && (OSYS < 0x07D6)))
                    {
                        \_SB.PCI0.IGD0.GLID (Local0)
                    }
                    Else
                    {
                        \_SB.PCI0.IGD0.CLID = Local0
                    }

                    Return (Local0)
                }
                ElseIf ((\RBEC (0x46) & 0x04))
                {
                    Return (0x01)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (ECON)
                {
                    If (Arg0)
                    {
                        \_SB.PCI0.LPC0.EC.HWLO = 0x01
                        \_SB.PCI0.LPC0.EC.WECB (0x03, 0xDB, (\_SB.PCI0.LPC0.EC.RECB (0x03, 0xDB) || 0x10))
                    }
                    Else
                    {
                        \_SB.PCI0.LPC0.EC.HWLO = 0x00
                    }
                }
                ElseIf (Arg0)
                {
                    \MBEC (0x32, 0xFF, 0x04)
                }
                Else
                {
                    \MBEC (0x32, 0xFB, 0x00)
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (WMI2)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Name (CMBF, Buffer (0x03)
            {
                 0x00, 0x00, 0x00                                 // ...
            })
            Name (BUF1, Buffer (0x40)
            {
                /* 0000 */  0x01, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF,  // ........
                /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,  // ........
                /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
            })
            Name (BUF2, Buffer (0x40)
            {
                /* 0000 */  0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
            })
            Name (INBF, Buffer (0x80)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            CreateByteField (CMBF, 0x00, EVID)
            CreateByteField (CMBF, 0x01, ACID)
            CreateByteField (CMBF, 0x02, DA01)
            CreateByteField (BUF1, 0x01, EID1)
            CreateByteField (BUF1, 0x02, ERQ0)
            CreateByteField (BUF1, 0x03, BRIL)
            CreateByteField (BUF1, 0x04, SKEY)
            CreateBitField (BUF1, 0x10, AP00)
            CreateBitField (BUF1, 0x11, AP01)
            CreateBitField (BUF1, 0x12, AP02)
            CreateBitField (BUF1, 0x13, AP03)
            CreateBitField (BUF1, 0x14, AP04)
            CreateBitField (BUF1, 0x15, AP05)
            CreateBitField (BUF1, 0x16, AP06)
            CreateBitField (BUF1, 0x17, AP07)
            CreateByteField (BUF1, 0x20, PD00)
            CreateByteField (BUF1, 0x21, PD01)
            CreateByteField (BUF1, 0x22, PD02)
            CreateByteField (BUF1, 0x23, PD03)
            CreateByteField (BUF1, 0x24, PD04)
            CreateByteField (BUF1, 0x25, PD05)
            CreateByteField (BUF1, 0x26, PD06)
            CreateByteField (BUF1, 0x27, PD07)
            CreateByteField (BUF2, 0x01, EID2)
            CreateByteField (BUF2, 0x08, BIV0)
            CreateByteField (BUF2, 0x09, BIV1)
            CreateByteField (BUF2, 0x0A, BIV2)
            CreateByteField (BUF2, 0x0B, BIV3)
            CreateByteField (BUF2, 0x0C, BIV4)
            CreateByteField (BUF2, 0x0D, BIV5)
            CreateByteField (BUF2, 0x0E, BIV6)
            CreateByteField (BUF2, 0x0F, BIV7)
            CreateByteField (BUF2, 0x10, WMIV)
            CreateByteField (BUF2, 0x18, BRMX)
            CreateByteField (BUF2, 0x20, BAT1)
            CreateByteField (BUF2, 0x21, BAT2)
            CreateByteField (BUF2, 0x22, ACDC)
            CreateByteField (BUF2, 0x23, CPUT)
            CreateByteField (BUF2, 0x24, VGAT)
            CreateByteField (BUF2, 0x25, CDT1)
            CreateByteField (BUF2, 0x26, CDT2)
            CreateByteField (BUF2, 0x27, FSP1)
            CreateByteField (BUF2, 0x28, FSP2)
            CreateByteField (INBF, 0x00, BY00)
            CreateByteField (INBF, 0x01, BY01)
            CreateByteField (INBF, 0x02, BY02)
            CreateByteField (INBF, 0x03, BY03)
            CreateByteField (INBF, 0x04, BY04)
            CreateByteField (INBF, 0x05, BY05)
            CreateByteField (INBF, 0x06, BY06)
            CreateByteField (INBF, 0x07, BY07)
            CreateByteField (INBF, 0x08, BY08)
            CreateByteField (INBF, 0x09, BY09)
            CreateByteField (INBF, 0x0A, BY10)
            CreateByteField (INBF, 0x0B, BY11)
            CreateByteField (INBF, 0x0C, BY12)
            CreateByteField (INBF, 0x0D, BY13)
            CreateByteField (INBF, 0x0E, BY14)
            CreateByteField (INBF, 0x0F, BY15)
            CreateByteField (INBF, 0x10, BY16)
            CreateByteField (INBF, 0x11, BY17)
            CreateByteField (INBF, 0x12, BY18)
            CreateByteField (INBF, 0x13, BY19)
            CreateByteField (INBF, 0x14, BY20)
            CreateByteField (INBF, 0x15, BY21)
            CreateByteField (INBF, 0x16, BY22)
            CreateByteField (INBF, 0x17, BY23)
            CreateByteField (INBF, 0x18, BY24)
            CreateByteField (INBF, 0x19, BY25)
            CreateByteField (INBF, 0x1A, BY26)
            CreateByteField (INBF, 0x1B, BY27)
            CreateByteField (INBF, 0x1C, BY28)
            CreateByteField (INBF, 0x1D, BY29)
            CreateByteField (INBF, 0x1E, BY30)
            CreateByteField (INBF, 0x1F, BY31)
            Name (GSTH, Buffer (0x06)
            {
                 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF               // ......
            })
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                BIV0 = F0DA /* \F0DA */
                BIV1 = F0DB /* \F0DB */
                BIV2 = F0DC /* \F0DC */
                BIV3 = F0DD /* \F0DD */
                BIV4 = F0DE /* \F0DE */
                BIV5 = F0DF /* \F0DF */
                BIV6 = F0E0 /* \F0E0 */
                BIV7 = F0E1 /* \F0E1 */
                WMIV = 0x12
            }

            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0x20, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  //  .......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x80, 0x00, 0x01, 0x08, 0x40, 0x0F, 0xBC, 0xAB,  // ....@...
                /* 0018 */  0xA1, 0x8E, 0xD1, 0x11, 0x00, 0xA0, 0xC9, 0x06,  // ........
                /* 0020 */  0x29, 0x10, 0x00, 0x00, 0x49, 0x4F, 0x01, 0x01,  // )...IO..
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x41, 0x45, 0x01, 0x00                           // AE..
            })
            Method (WQIO, 1, NotSerialized)
            {
                Debug = "======== WMI WQIO ========"
                CMD1 (0x01, 0x02)
                CMD1 (0x02, 0x02)
                Concatenate (BUF2, BUF1, Local0)
                Return (Local0)
            }

            Mutex (MSIO, 0x00)
            Method (WSIO, 2, Serialized)
            {
                Debug = "======== WMI WSIO ========"
                Acquire (MSIO, 0xFFFF)
                CPSR (Arg1)
                Release (MSIO)
            }

            Method (CPSR, 1, NotSerialized)
            {
                INBF = Arg0
                While (One)
                {
                    Name (_T_0, 0x00)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                    _T_0 = BY00 /* \_SB_.WMI2.BY00 */
                    If ((_T_0 == 0x01))
                    {
                        If ((BY01 != 0x10))
                        {
                            Return (0x00)
                        }
                    }
                    Else
                    {
                        Return (0x00)
                    }

                    Break
                }

                CMD0 (BY08, BY09, BY10, BY11, BY16)
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                Return (UWED (EVID, ACID, DA01))
            }

            Method (CMD1, 2, NotSerialized)
            {
                CMD0 (Arg0, Arg1, 0x00, 0x00, 0x00)
            }

            Method (CMD2, 3, NotSerialized)
            {
                CMD0 (Arg0, Arg1, Arg2, 0x00, 0x00)
            }

            Method (CMD3, 1, NotSerialized)
            {
                CMD0 (0x19, 0x01, 0x01, 0x01, Arg0)
            }

            Mutex (MCD0, 0x00)
            Method (CMD0, 5, Serialized)
            {
                If ((ERQ0 && (Arg2 == 0x01)))
                {
                    EVID = Arg0
                    ACID = Arg1
                    DA01 = Arg4
                    Notify (\_SB.WMI2, 0x80) // Status Change
                }
                Else
                {
                    Acquire (MCD0, 0xFFFF)
                    Release (MCD0)
                }
            }

            Method (UWED, 3, NotSerialized)
            {
            }

            Name (WQAE, Buffer (0x02CB)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xBB, 0x02, 0x00, 0x00, 0x3C, 0x09, 0x00, 0x00,  // ....<...
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0x5E, 0x84, 0x00, 0x01, 0x06, 0x18, 0x42,  // .^.....B
                /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x23, 0x81, 0x42, 0x04,  // ....#.B.
                /* 0028 */  0x8A, 0x40, 0xA4, 0x00, 0x30, 0x28, 0x0D, 0x20,  // .@..0(. 
                /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x00, 0xB7,  // ..!.LL..
                /* 0038 */  0x04, 0x78, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  // .x.`S.I.
                /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,  // ...Q..J.
                /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,  // .$.0/@..
                /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,  // ..l.0-.1
                /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,  // $..N.,.B
                /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,  // B.(..[.v
                /* 0068 */  0x44, 0x49, 0x16, 0x60, 0x19, 0x46, 0x04, 0x1E,  // DI.`.F..
                /* 0070 */  0x05, 0x43, 0xE3, 0xD0, 0xD8, 0x61, 0x58, 0x26,  // .C...aX&
                /* 0078 */  0x98, 0x06, 0x71, 0x18, 0x65, 0x23, 0x8B, 0xC0,  // ..q.e#..
                /* 0080 */  0xB8, 0x9D, 0x0A, 0x90, 0x2B, 0x40, 0x98, 0x00,  // ....+@..
                /* 0088 */  0xF1, 0xA8, 0xC2, 0x68, 0x0E, 0x8A, 0x88, 0x86,  // ...h....
                /* 0090 */  0x46, 0x89, 0x19, 0x13, 0x81, 0xED, 0x1C, 0x5B,  // F......[
                /* 0098 */  0xA3, 0x38, 0x95, 0xC2, 0x05, 0x48, 0xC7, 0xD0,  // .8...H..
                /* 00A0 */  0x08, 0x8E, 0xEB, 0x58, 0xB8, 0x2D, 0x01, 0x06,  // ...X.-..
                /* 00A8 */  0x05, 0x38, 0x9C, 0x8C, 0x50, 0x0A, 0x02, 0xD5,  // .8..P...
                /* 00B0 */  0x68, 0x42, 0x84, 0x0B, 0x19, 0x26, 0x44, 0xCC,  // hB...&D.
                /* 00B8 */  0x18, 0xC6, 0x3E, 0x97, 0x48, 0x07, 0x50, 0xF3,  // ..>.H.P.
                /* 00C0 */  0xC8, 0x08, 0xD2, 0xB1, 0x05, 0x8A, 0x15, 0x22,  // ......."
                /* 00C8 */  0xC1, 0x11, 0x1D, 0x0A, 0x46, 0x06, 0x84, 0x3C,  // ....F..<
                /* 00D0 */  0x0B, 0xB0, 0x3E, 0x46, 0x42, 0x60, 0xF7, 0xB3,  // ..>FB`..
                /* 00D8 */  0x90, 0x42, 0x04, 0x4D, 0xE3, 0xAC, 0x6A, 0x14,  // .B.M..j.
                /* 00E0 */  0xA0, 0x0C, 0x43, 0x43, 0x29, 0x4E, 0x80, 0x45,  // ..CC)N.E
                /* 00E8 */  0x2C, 0x19, 0x43, 0x11, 0x44, 0x84, 0xB3, 0x8A,  // ,.C.D...
                /* 00F0 */  0x62, 0xB0, 0x08, 0xA1, 0xE2, 0x19, 0xF5, 0xFC,  // b.......
                /* 00F8 */  0x82, 0xD4, 0x06, 0x2B, 0x90, 0x68, 0xC1, 0x8C,  // ...+.h..
                /* 0100 */  0xC0, 0xEC, 0x0F, 0x82, 0xC4, 0x7F, 0x17, 0xE8,  // ........
                /* 0108 */  0x44, 0xE0, 0x48, 0xA3, 0x41, 0x9D, 0x02, 0x12,  // D.H.A...
                /* 0110 */  0x3C, 0x15, 0x78, 0x7A, 0x07, 0xE6, 0x51, 0x19,  // <.xz..Q.
                /* 0118 */  0xE4, 0x4C, 0xCF, 0xAC, 0xCE, 0xE3, 0x00, 0x19,  // .L......
                /* 0120 */  0x38, 0xC3, 0x4A, 0xD0, 0xC1, 0xF9, 0x00, 0x8A,  // 8.J.....
                /* 0128 */  0x6B, 0x40, 0xFD, 0xFF, 0x2F, 0x06, 0x8F, 0x05,  // k@../...
                /* 0130 */  0x6C, 0x94, 0xE1, 0x30, 0x43, 0xF4, 0x4C, 0xC3,  // l..0C.L.
                /* 0138 */  0x9D, 0xC0, 0x21, 0x32, 0x40, 0x8F, 0xE8, 0x89,  // ..!2@...
                /* 0140 */  0x00, 0x3B, 0xB5, 0x93, 0x39, 0xFD, 0x52, 0x05,  // .;..9.R.
                /* 0148 */  0x98, 0x9D, 0xBD, 0x26, 0x99, 0xE0, 0x78, 0x7C,  // ...&..x|
                /* 0150 */  0x0E, 0xF0, 0x7C, 0x4E, 0x38, 0x81, 0xE5, 0x0F,  // ..|N8...
                /* 0158 */  0x02, 0x35, 0x32, 0x43, 0x7B, 0xA4, 0xA7, 0xF5,  // .52C{...
                /* 0160 */  0x3A, 0xE0, 0x83, 0x80, 0x09, 0x2C, 0xF6, 0x30,  // :....,.0
                /* 0168 */  0x41, 0xC7, 0x03, 0x7E, 0xC5, 0x37, 0x03, 0x21,  // A..~.7.!
                /* 0170 */  0xBC, 0x33, 0x78, 0xBE, 0x86, 0xD5, 0xD9, 0x42,  // .3x....B
                /* 0178 */  0x46, 0x56, 0xE1, 0xF1, 0xD0, 0xA3, 0x84, 0x41,  // FV.....A
                /* 0180 */  0xCF, 0xE6, 0x78, 0x9E, 0x09, 0x0E, 0x36, 0xC6,  // ..x...6.
                /* 0188 */  0x2B, 0x83, 0x09, 0x1C, 0x18, 0x42, 0x16, 0x20,  // +....B. 
                /* 0190 */  0x24, 0x6A, 0xE0, 0xF4, 0x54, 0xC1, 0x4F, 0x0D,  // $j..T.O.
                /* 0198 */  0x2F, 0x17, 0x3E, 0x17, 0x3C, 0x29, 0xB0, 0xB1,  // /.>.<)..
                /* 01A0 */  0x9C, 0x92, 0xCF, 0x1D, 0x1E, 0x1A, 0x7C, 0x91,  // ......|.
                /* 01A8 */  0xA7, 0x09, 0xD0, 0x9C, 0x25, 0x30, 0xB3, 0xF2,  // ....%0..
                /* 01B0 */  0x59, 0x82, 0x0F, 0x86, 0x1F, 0x0D, 0xD8, 0xA0,  // Y.......
                /* 01B8 */  0xF8, 0x20, 0x3C, 0xD6, 0xC8, 0xC7, 0x6E, 0x81,  // . <...n.
                /* 01C0 */  0x10, 0x92, 0x35, 0x66, 0xE8, 0xF7, 0x09, 0x0F,  // ..5f....
                /* 01C8 */  0xC2, 0x47, 0x89, 0xC0, 0x0C, 0x16, 0x37, 0x66,  // .G....7f
                /* 01D0 */  0xFB, 0x15, 0x80, 0x10, 0xFA, 0x05, 0xE4, 0x24,  // .......$
                /* 01D8 */  0x9E, 0x3E, 0x22, 0x24, 0xF8, 0xFF, 0x3F, 0x70,  // .>"$..?p
                /* 01E0 */  0xB0, 0x49, 0xF1, 0x41, 0x61, 0x08, 0x3C, 0x48,  // .I.Aa.<H
                /* 01E8 */  0xFC, 0x00, 0xF8, 0x39, 0x22, 0x70, 0xEC, 0xB0,  // ...9"p..
                /* 01F0 */  0x07, 0x10, 0x3A, 0xBA, 0x87, 0xE3, 0x03, 0x49,  // ..:....I
                /* 01F8 */  0x84, 0xBA, 0x20, 0x74, 0x3A, 0x31, 0xC2, 0x01,  // .. t:1..
                /* 0200 */  0x44, 0xE9, 0xFD, 0x06, 0x40, 0x08, 0x3C, 0xCD,  // D...@.<.
                /* 0208 */  0x43, 0xC0, 0x8C, 0xD3, 0x43, 0xE0, 0x03, 0x68,  // C...C..h
                /* 0210 */  0x75, 0x76, 0x44, 0xE9, 0xA4, 0x90, 0xA3, 0xE2,  // uvD.....
                /* 0218 */  0x63, 0xC2, 0x0E, 0x80, 0x8B, 0x3C, 0xD4, 0x50,  // c....<.P
                /* 0220 */  0xD1, 0x8F, 0x02, 0xC9, 0x82, 0x41, 0x9D, 0x6B,  // .....A.k
                /* 0228 */  0x00, 0x57, 0x90, 0x8F, 0x0E, 0x60, 0xB9, 0x34,  // .W...`.4
                /* 0230 */  0xF0, 0x73, 0x43, 0xB8, 0x83, 0x08, 0x12, 0x32,  // .sC....2
                /* 0238 */  0x42, 0x98, 0x27, 0x9A, 0x78, 0x4F, 0x34, 0x9E,  // B.'.xO4.
                /* 0240 */  0x51, 0x9F, 0x07, 0x1A, 0x90, 0x0D, 0xC8, 0x07,  // Q.......
                /* 0248 */  0x1A, 0x18, 0xFF, 0xFF, 0x03, 0x0D, 0xB8, 0x22,  // ......."
                /* 0250 */  0xBE, 0x4D, 0x74, 0xF8, 0xF0, 0x81, 0x06, 0xE0,  // .Mt.....
                /* 0258 */  0x87, 0x98, 0x03, 0x0D, 0x1A, 0xDA, 0x77, 0x03,  // ......w.
                /* 0260 */  0xDF, 0x67, 0x70, 0xD1, 0x21, 0x74, 0xBA, 0xF0,  // .gp.!t..
                /* 0268 */  0x79, 0x06, 0x78, 0x00, 0xE2, 0xEF, 0x23, 0xE7,  // y.x...#.
                /* 0270 */  0xEC, 0xB9, 0x18, 0x90, 0xC9, 0x3B, 0x4D, 0x40,  // .....;M@
                /* 0278 */  0xFB, 0xFF, 0x9F, 0x26, 0xF0, 0x43, 0xF3, 0x18,  // ...&.C..
                /* 0280 */  0x4E, 0x3D, 0xD8, 0xD3, 0x96, 0xEF, 0x05, 0x3E,  // N=.....>
                /* 0288 */  0xD4, 0xC0, 0x0C, 0x70, 0xA8, 0x01, 0xDD, 0x88,  // ...p....
                /* 0290 */  0x70, 0x87, 0x1A, 0xB0, 0xC0, 0xBD, 0x69, 0xB0,  // p.....i.
                /* 0298 */  0x33, 0x0D, 0x30, 0x19, 0x01, 0x57, 0x68, 0xD3,  // 3.0..Wh.
                /* 02A0 */  0xA7, 0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28,  // .F.V...(
                /* 02A8 */  0xD3, 0xA0, 0x56, 0x9F, 0x4A, 0x8D, 0x19, 0x3B,  // ..V.J..;
                /* 02B0 */  0x13, 0x90, 0x37, 0x83, 0x86, 0xEA, 0x48, 0x20,  // ..7...H 
                /* 02B8 */  0x34, 0x18, 0x85, 0x40, 0x1C, 0x8A, 0x4E, 0x20,  // 4..@..N 
                /* 02C0 */  0x96, 0xE4, 0x01, 0x84, 0x09, 0x5C, 0x81, 0x40,  // .....\.@
                /* 02C8 */  0xFC, 0xFF, 0x07                                 // ...
            })
        }
    }

    Scope (\_SB.PCI0.LPC0.EC.HKEY)
    {
        Mutex (BFWM, 0x07)
        Method (MHCF, 1, NotSerialized)
        {
            Local0 = \BFWC (Arg0)
            Return (Local0)
        }

        Method (MHPF, 1, NotSerialized)
        {
            Name (RETB, Buffer (0x25) {})
            Acquire (BFWM, 0xFFFF)
            If ((SizeOf (Arg0) <= 0x25))
            {
                \BFWB = Arg0
                If (\BFWP ())
                {
                    \_SB.PCI0.LPC0.EC.CHKS ()
                    \_SB.PCI0.LPC0.EC.BFWL ()
                }

                RETB = \BFWB
            }

            Release (BFWM)
            Return (RETB) /* \_SB_.PCI0.LPC0.EC__.HKEY.MHPF.RETB */
        }

        Method (MHIF, 1, NotSerialized)
        {
            Name (RETB, Buffer (0x0A) {})
            Acquire (BFWM, 0xFFFF)
            \BFWG (Arg0)
            RETB = \BFWB
            Release (BFWM)
            Return (RETB) /* \_SB_.PCI0.LPC0.EC__.HKEY.MHIF.RETB */
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : B6
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "        "
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "PTL "
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]                 FACS Address : 7F5E2FC0
[028h 0040   4]                 DSDT Address : 7F5D6BDA
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 00 [Unspecified]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : F0
[035h 0053   1]           ACPI Disable Value : F1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 80
[038h 0056   4]     PM1A Event Block Address : 00001000
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00001004
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00001020
[04Ch 0076   4]       PM Timer Block Address : 00001008
[050h 0080   4]           GPE0 Block Address : 00001028
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 85
[060h 0096   2]                   C2 Latency : 0001
[062h 0098   2]                   C3 Latency : 0023
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000002A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 1
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 00
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000000

[080h 0128   1]         Value to cause reset : 00
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 000000007F5E2FC0
[08Ch 0140   8]                 DSDT Address : 000000007F5D6BDA
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000001000

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000001004

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000001020

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000001008

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000001028

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 03 B6 49 4E 54 45 4C 20  // FACP......INTEL 
    0010: 20 20 20 20 20 20 20 20 00 00 04 06 50 54 4C 20  //         ....PTL 
    0020: 02 00 00 00 C0 2F 5E 7F DA 6B 5D 7F 00 00 09 00  // ...../^..k].....
    0030: B2 00 00 00 F0 F1 00 80 00 10 00 00 00 00 00 00  // ................
    0040: 04 10 00 00 00 00 00 00 20 10 00 00 08 10 00 00  // ........ .......
    0050: 28 10 00 00 00 00 00 00 04 02 01 04 08 00 00 85  // (...............
    0060: 01 00 23 00 00 00 00 00 01 03 0D 00 32 00 00 00  // ..#.........2...
    0070: A5 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 C0 2F 5E 7F 00 00 00 00 DA 6B 5D 7F  // ...../^......k].
    0090: 00 00 00 00 01 20 00 00 00 10 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // ................
    00B0: 04 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 00 20 10 00 00 00 00 00 00  // ........ .......
    00D0: 01 20 00 00 08 10 00 00 00 00 00 00 01 40 00 00  // . ...........@..
    00E0: 28 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // (...............
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D6
[00Ah 0010   6]                       Oem ID : "PTLTD "
[010h 0016   8]                 Oem Table ID : "HPETTBL "
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]            Hardware Block ID : FFFFFFFF

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0000
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 D6 50 54 4C 54 44 20  // HPET8.....PTLTD 
    0010: 48 50 45 54 54 42 4C 20 00 00 04 06 20 4C 54 50  // HPETTBL .... LTP
    0020: 01 00 00 00 FF FF FF FF 00 00 00 00 00 00 D0 FE  // ................
    0030: 00 00 00 00 00 00 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 57
[00Ah 0010   6]                       Oem ID : "PTLTD "
[010h 0016   8]                 Oem Table ID : "  MCFG  "
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 10
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 57 50 54 4C 54 44 20  // MCFG<....WPTLTD 
    0010: 20 20 4D 43 46 47 20 20 00 00 04 06 20 4C 54 50  //   MCFG  .... LTP
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 10 00 00 00 00              // ............


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 9E
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-6W   "
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 9C 00 00 00 06 02 00 00 00 24 00 00 \
    52 53 41 31 00 04 00 00 01 00 01 00 69 16 4A 9F \
    B1 4B 3A FB 80 20 AA AF C4 F9 3E C1 80 49 EE 6A \
    65 26 72 1E CD BF 5F 2F 96 D6 C0 0A 92 F5 06 B5 \
    00 B2 3B 29 02 E2 4C 8D C2 F2 BC 41 77 9C 70 F0 \
    F3 1B 09 D2 63 5A DC A8 83 F8 5E C9 15 95 F9 FA \
    FD DC 05 B7 4D 67 7F 2D B3 84 33 20 E1 D1 79 2A \
    A7 6A 77 D1 B6 20 2A 76 42 C5 D5 E9 B6 43 40 55 \
    44 C3 C9 37 99 5F 41 97 70 F3 D1 F6 07 EC 7B 1A \
    29 A1 C1 F1 91 FD 48 86 6E 3E CE CB 01 00 00 00 \
    B6 00 00 00 00 00 02 00 4C 45 4E 4F 56 4F 54 50 \
    2D 36 57 20 20 20 57 49 4E 44 4F 57 53 20 01 00 \
    02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 34 C5 C3 49 D9 D2 D3 09 4D 1F 9E 47 A5 F5 \
    58 9A A0 C9 B8 6E DA 47 79 58 AB 1C 08 CE AD C6 \
    5D B3 8F 5A DB DF BD FA 1E 2A 68 FC 61 F5 55 82 \
    AB AC 8F D5 E7 76 BD C0 F6 62 D6 C9 37 3B E6 B2 \
    C7 5B 6A 1C 8C B4 B2 07 DE 38 A9 14 CC 0E DD 86 \
    41 4C 4A 9F 3E 0B 0A 21 6F 07 92 D9 05 99 CC BA \
    34 FF 82 BE 53 A2 2C B5 88 F5 2A B4 E8 DF 46 F4 \
    24 34 59 19 5E 3E 17 0D BA EE 78 6E B7 7A 01 7B \
    D3 CF 

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 9E 4C 45 4E 4F 56 4F  // SLICv.....LENOVO
    0010: 54 50 2D 36 57 20 20 20 00 00 04 06 20 4C 54 50  // TP-6W   .... LTP
    0020: 00 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 69 16 4A 9F B1 4B 3A FB 80 20 AA AF C4 F9 3E C1  // i.J..K:.. ....>.
    0050: 80 49 EE 6A 65 26 72 1E CD BF 5F 2F 96 D6 C0 0A  // .I.je&r..._/....
    0060: 92 F5 06 B5 00 B2 3B 29 02 E2 4C 8D C2 F2 BC 41  // ......;)..L....A
    0070: 77 9C 70 F0 F3 1B 09 D2 63 5A DC A8 83 F8 5E C9  // w.p.....cZ....^.
    0080: 15 95 F9 FA FD DC 05 B7 4D 67 7F 2D B3 84 33 20  // ........Mg.-..3 
    0090: E1 D1 79 2A A7 6A 77 D1 B6 20 2A 76 42 C5 D5 E9  // ..y*.jw.. *vB...
    00A0: B6 43 40 55 44 C3 C9 37 99 5F 41 97 70 F3 D1 F6  // .C@UD..7._A.p...
    00B0: 07 EC 7B 1A 29 A1 C1 F1 91 FD 48 86 6E 3E CE CB  // ..{.).....H.n>..
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 4C 45 4E 4F  // ............LENO
    00D0: 56 4F 54 50 2D 36 57 20 20 20 57 49 4E 44 4F 57  // VOTP-6W   WINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 34 C5 C3 49 D9 D2 D3 09 4D 1F  // ......4..I....M.
    0100: 9E 47 A5 F5 58 9A A0 C9 B8 6E DA 47 79 58 AB 1C  // .G..X....n.GyX..
    0110: 08 CE AD C6 5D B3 8F 5A DB DF BD FA 1E 2A 68 FC  // ....]..Z.....*h.
    0120: 61 F5 55 82 AB AC 8F D5 E7 76 BD C0 F6 62 D6 C9  // a.U......v...b..
    0130: 37 3B E6 B2 C7 5B 6A 1C 8C B4 B2 07 DE 38 A9 14  // 7;...[j......8..
    0140: CC 0E DD 86 41 4C 4A 9F 3E 0B 0A 21 6F 07 92 D9  // ....ALJ.>..!o...
    0150: 05 99 CC BA 34 FF 82 BE 53 A2 2C B5 88 F5 2A B4  // ....4...S.,...*.
    0160: E8 DF 46 F4 24 34 59 19 5E 3E 17 0D BA EE 78 6E  // ..F.$4Y.^>....xn
    0170: B7 7A 01 7B D3 CF                                // .z.{..


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu1Tst", 0x00003000)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC1 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "PmRef", "CpuPm", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0x7F5D6903, 
            0x00000203, 
            "CPU1IST ", 
            0x7F5D6B06, 
            0x000000D4, 
            "CPU0CST ", 
            0x7F5D6299, 
            0x000005E5, 
            "CPU1CST ", 
            0x7F5D687E, 
            0x00000085
        })
        Name (CFGD, 0x137B6CB1)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\SDTL, 0x00)
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, 0x00)
        Name (HC0, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0._OSC.CAP0 */
            If ((CFGD & 0x01))
            {
                If ((((CFGD & 0x01000000) && ((PDC0 & 0x09) == 
                    0x09)) && !(SDTL & 0x01)))
                {
                    SDTL |= 0x01
                    OperationRegion (IST0, SystemMemory, DerefOf (SSDT [0x01]), DerefOf (SSDT [0x02]))
                    Load (IST0, HI0) /* \_PR_.CPU0.HI0_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, 0x00)
        Name (HC1, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS1, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS1, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS1)
            CreateDWordField (Arg3, 0x04, CAP1)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS1 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS1 [0x00] = 0x0A
                Return (Arg3)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1._OSC.CAP1 */
            If ((CFGD & 0x01))
            {
                If ((((CFGD & 0x01000000) && ((PDC1 & 0x09) == 
                    0x09)) && !(SDTL & 0x10)))
                {
                    SDTL |= 0x10
                    OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                    Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC1 & 0x18)) && !
                    (SDTL & 0x20)))
                {
                    SDTL |= 0x20
                    OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                    Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
                }
            }

            Return (Arg3)
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Tst", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PSS, IntObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((PDC0 & 0x04))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x04,               // Bit Width
                        0x01,               // Bit Offset
                        0x0000000000001010, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x04,               // Bit Width
                        0x01,               // Bit Offset
                        0x0000000000001010, // Address
                        ,)
                }
            })
        }

        Name (TSSI, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                0x00, 
                0x00, 
                0x00
            }, 

            Package (0x05)
            {
                0x58, 
                0x036B, 
                0x00, 
                0x0F, 
                0x00
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02EE, 
                0x00, 
                0x0E, 
                0x00
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0271, 
                0x00, 
                0x0D, 
                0x00
            }, 

            Package (0x05)
            {
                0x32, 
                0x01F4, 
                0x00, 
                0x0C, 
                0x00
            }, 

            Package (0x05)
            {
                0x26, 
                0x0177, 
                0x00, 
                0x0B, 
                0x00
            }, 

            Package (0x05)
            {
                0x19, 
                0xFA, 
                0x00, 
                0x0A, 
                0x00
            }, 

            Package (0x05)
            {
                0x0D, 
                0x7D, 
                0x00, 
                0x09, 
                0x00
            }
        })
        Name (TSSM, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                0x00, 
                0x00, 
                0x00
            }, 

            Package (0x05)
            {
                0x58, 
                0x036B, 
                0x00, 
                0x1E, 
                0x00
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02EE, 
                0x00, 
                0x1C, 
                0x00
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0271, 
                0x00, 
                0x1A, 
                0x00
            }, 

            Package (0x05)
            {
                0x32, 
                0x01F4, 
                0x00, 
                0x18, 
                0x00
            }, 

            Package (0x05)
            {
                0x26, 
                0x0177, 
                0x00, 
                0x16, 
                0x00
            }, 

            Package (0x05)
            {
                0x19, 
                0xFA, 
                0x00, 
                0x14, 
                0x00
            }, 

            Package (0x05)
            {
                0x0D, 
                0x7D, 
                0x00, 
                0x12, 
                0x00
            }
        })
        Name (TSSF, 0x00)
        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((!TSSF && CondRefOf (_PSS)))
            {
                Local0 = _PSS /* External reference */
                Local1 = SizeOf (Local0)
                Local1--
                Local2 = DerefOf (DerefOf (Local0 [Local1]) [0x01])
                Local3 = 0x00
                While ((Local3 < SizeOf (TSSI)))
                {
                    Local4 = ((Local2 * (0x08 - Local3)) / 0x08)
                    DerefOf (TSSI [Local3]) [0x01] = Local4
                    DerefOf (TSSM [Local3]) [0x01] = Local4
                    Local3++
                }

                TSSF = Ones
            }

            If ((PDC0 & 0x04))
            {
                Return (TSSM) /* \_PR_.CPU0.TSSM */
            }

            Return (TSSI) /* \_PR_.CPU0.TSSI */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC0 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu1Ist", 0x00003000)
{
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (((PDC1 & 0x0800) || (CFGD & 0x02000000)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFE, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFC, 
                    0x02
                }
            })
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Ist", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (NPSS, IntObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (((CFGD & 0x01) && (PDC0 & 0x01)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B2, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (XPSS, 0, NotSerialized)
        {
            If ((PDC0 & 0x01))
            {
                Return (NPSS) /* External reference */
            }

            Return (SPSS) /* \_PR_.CPU0.SPSS */
        }

        Name (SPSS, Package (0x03)
        {
            Package (0x06)
            {
                0x00000683, 
                0x000007D0, 
                0x0000006E, 
                0x0000000A, 
                0x00000083, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000535, 
                0x00000514, 
                0x0000006E, 
                0x0000000A, 
                0x00000183, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00000258, 
                0x0000006E, 
                0x0000000A, 
                0x00000283, 
                0x00000002
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000683, 
                0x000007D0, 
                0x0000000A, 
                0x0000000A, 
                0x00000A24, 
                0x00000A24
            }, 

            Package (0x06)
            {
                0x00000535, 
                0x00000514, 
                0x0000000A, 
                0x0000000A, 
                0x0000081C, 
                0x0000081C
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00000258, 
                0x0000000A, 
                0x0000000A, 
                0x00000613, 
                0x00000613
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((CFGD & 0x01000000))
            {
                If (((PDC0 & 0x0800) || (CFGD & 0x02000000)))
                {
                    Return (Package (0x01)
                    {
                        Package (0x05)
                        {
                            0x05, 
                            0x00, 
                            0x00, 
                            0xFE, 
                            0x02
                        }
                    })
                }

                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFC, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu1Cst", 0x00003000)
{
    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x01000000) && !(PDC1 & 0x10)))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x9D, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x01000000) && !(PDC0 & 0x10)))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x9D, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0200)))
            {
                If ((CFGD & 0x0200))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000052, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x8C, 
                            0x0A
                        }
                    })
                }

                If ((CFGD & 0x80))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000030, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x64, 
                            0x64
                        }
                    })
                }

                If ((CFGD & 0x40))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x3C, 
                            0xFA
                        }
                    })
                }

                If ((CFGD & 0x20))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0100)))
            {
                If ((CFGD & 0x0200))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001014, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001018, // Address
                                    ,)
                            }, 

                            0x03, 
                            0x8C, 
                            0x0A
                        }
                    })
                }

                If ((CFGD & 0x80))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001014, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001016, // Address
                                    ,)
                            }, 

                            0x03, 
                            0x64, 
                            0x64
                        }
                    })
                }

                If ((CFGD & 0x40))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001014, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001015, // Address
                                    ,)
                            }, 

                            0x03, 
                            0x3C, 
                            0xFA
                        }
                    })
                }

                If ((CFGD & 0x20))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001014, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }
                })
            }

            If ((CFGD & 0x0200))
            {
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001014, // Address
                                ,)
                        }, 

                        0x02, 
                        0x14, 
                        0x01F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001018, // Address
                                ,)
                        }, 

                        0x03, 
                        0x8C, 
                        0x0A
                    }
                })
            }

            If ((CFGD & 0x80))
            {
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001014, // Address
                                ,)
                        }, 

                        0x02, 
                        0x14, 
                        0x01F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001016, // Address
                                ,)
                        }, 

                        0x03, 
                        0x64, 
                        0x64
                    }
                })
            }

            If ((CFGD & 0x40))
            {
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001014, // Address
                                ,)
                        }, 

                        0x02, 
                        0x14, 
                        0x01F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001015, // Address
                                ,)
                        }, 

                        0x03, 
                        0x3C, 
                        0xFA
                    }
                })
            }

            If ((CFGD & 0x20))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001014, // Address
                                ,)
                        }, 

                        0x02, 
                        0x14, 
                        0x01F4
                    }
                })
            }

            Return (Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03E8
                }
            })
        }
    }
}



TCPA
----
[000h 0000   4]                    Signature : "TCPA"    [Trusted Computing Platform Alliance table]
[004h 0004   4]                 Table Length : 00000032
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 3F
[00Ah 0010   6]                       Oem ID : "Phoeni"
[010h 0016   8]                 Oem Table ID : "x      "
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "TL "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   2]               Platform Class : 0000
[026h 0038   4]         Min Event Log Length : 00000100
[02Ah 0042   8]            Event Log Address : 0000000000000000

Raw Table Data: Length 50 (0x32)

    0000: 54 43 50 41 32 00 00 00 01 3F 50 68 6F 65 6E 69  // TCPA2....?Phoeni
    0010: 78 20 20 20 20 20 20 00 00 00 04 06 54 4C 20 00  // x      .....TL .
    0020: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00  // ................
    0030: 00 00                                            // ..


