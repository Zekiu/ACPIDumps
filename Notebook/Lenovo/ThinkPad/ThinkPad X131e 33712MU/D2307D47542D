
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20221020
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  MCFG  0x0000003C  0x01  "LENOVO"  "TP-G9   "  0x00001050  "PTL "   0x00000002
 02)  APIC  0x0000007A  0x02  "LENOVO"  "TP-G9   "  0x00001050  "PTL "   0x00000002
 03)  SLIC  0x00000176  0x01  "LENOVO"  "TP-G9   "  0x00001050  "PTL "   0x00000001
 04)  SSDT  0x000016E4  0x02  "AMD   "  "ALIB    "  0x00000001  "MSFT"   0x04000000
 05)  DSDT  0x0000F9FF  0x01  "LENOVO"  "AMD     "  0x00001000  "INTL"   0x20061109
 06)  UEFI  0x00000292  0x01  "LENOVO"  "TP-G9   "  0x00001050  "PTL "   0x00000002
 07)  SBST  0x00000030  0x01  "LENOVO"  "TP-G9   "  0x00001050  "PTL "   0x00000002
 08)  UEFI  0x0000003E  0x01  "LENOVO"  "TP-G9   "  0x00001050  "PTL "   0x00000002
 09)  POAT  0x00000055  0x03  "LENOVO"  "TP-G9   "  0x00001050  "PTL "   0x00000002
 10)  FACP  0x000000F4  0x04  "LENOVO"  "TP-G9   "  0x00001050  "PTL "   0x00000002
 11)  FPDT  0x00000054  0x01  "LENOVO"  "TP-G9   "  0x00001050  "PTL "   0x00000002
 12)  SSDT  0x000003DE  0x01  "AMD   "  "POWERNOW"  0x00000001  "AMD "   0x00000001
 13)  HPET  0x00000038  0x01  "LENOVO"  "TP-G9   "  0x00001050  "PTL "   0x00000002
 14)  UEFI  0x00000042  0x01  "PTL   "  "COMBUF  "  0x00000001  "PTL "   0x00000001
 15)  FACS  0x00000040  0x01

Found 15 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 0000007A
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : 43
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-G9   "
[018h 0024 004h]                Oem Revision : 00001050
[01Ch 0028 004h]             Asl Compiler ID : "PTL "
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 00
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 01
[037h 0055 001h]               Local Apic ID : 01
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 02
[03Fh 0063 001h]               Local Apic ID : 02
[040h 0064 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 03
[047h 0071 001h]               Local Apic ID : 03
[048h 0072 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 01 [I/O APIC]
[04Dh 0077 001h]                      Length : 0C
[04Eh 0078 001h]                 I/O Apic ID : 02
[04Fh 0079 001h]                    Reserved : 00
[050h 0080 004h]                     Address : FEC00000
[054h 0084 004h]                   Interrupt : 00000000

[058h 0088 001h]               Subtable Type : 02 [Interrupt Source Override]
[059h 0089 001h]                      Length : 0A
[05Ah 0090 001h]                         Bus : 00
[05Bh 0091 001h]                      Source : 00
[05Ch 0092 004h]                   Interrupt : 00000002
[060h 0096 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098 001h]               Subtable Type : 04 [Local APIC NMI]
[063h 0099 001h]                      Length : 06
[064h 0100 001h]                Processor ID : 00
[065h 0101 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[067h 0103 001h]        Interrupt Input LINT : 01

[068h 0104 001h]               Subtable Type : 04 [Local APIC NMI]
[069h 0105 001h]                      Length : 06
[06Ah 0106 001h]                Processor ID : 01
[06Bh 0107 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[06Dh 0109 001h]        Interrupt Input LINT : 01

[06Eh 0110 001h]               Subtable Type : 04 [Local APIC NMI]
[06Fh 0111 001h]                      Length : 06
[070h 0112 001h]                Processor ID : 02
[071h 0113 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[073h 0115 001h]        Interrupt Input LINT : 01

[074h 0116 001h]               Subtable Type : 04 [Local APIC NMI]
[075h 0117 001h]                      Length : 06
[076h 0118 001h]                Processor ID : 03
[077h 0119 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[079h 0121 001h]        Interrupt Input LINT : 01

Raw Table Data: Length 122 (0x7A)

    0000: 41 50 49 43 7A 00 00 00 02 43 4C 45 4E 4F 56 4F  // APICz....CLENOVO
    0010: 54 50 2D 47 39 20 20 20 50 10 00 00 50 54 4C 20  // TP-G9   P...PTL 
    0020: 02 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 02  // ................
    0040: 00 00 00 00 00 08 03 03 00 00 00 00 01 0C 02 00  // ................
    0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0060: 00 00 04 06 00 05 00 01 04 06 01 05 00 01 04 06  // ................
    0070: 02 05 00 01 04 06 03 05 00 01                    // ..........


DSDT
----
DefinitionBlock ("", "DSDT", 1, "LENOVO", "AMD", 0x00001000)
{
    External (_PR_.C000._PPC, UnknownObj)
    External (_PR_.C001._PPC, UnknownObj)
    External (ALIB, IntObj)

    Scope (_PR)
    {
        Processor (C000, 0x00, 0x00000810, 0x06){}
        Processor (C001, 0x01, 0x00000810, 0x06){}
        Processor (C002, 0x02, 0x00000810, 0x06){}
        Processor (C003, 0x03, 0x00000810, 0x06){}
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        0x03, 
        0x00, 
        0x00
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        0x00, 
        0x00
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        0x00, 
        0x00
    })
    Name (TZFG, 0x00)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
    Field (PMIO, ByteAcc, NoLock, Preserve)
    {
        PIDX,   8, 
        PDAT,   8
    }

    OperationRegion (P01, SystemIO, 0x0801, 0x01)
    Field (P01, ByteAcc, NoLock, Preserve)
    {
        PST1,   8
    }

    Scope (_SB)
    {
        Name (LINX, 0x00)
        Name (OSSP, 0x00)
        Name (OSTB, Ones)
        OperationRegion (OSTY, SystemMemory, 0xDEE2CF18, 0x00000001)
        Field (OSTY, AnyAcc, NoLock, Preserve)
        {
            TPOS,   8
        }

        Method (OSTP, 0, NotSerialized)
        {
            If ((OSTB == Ones))
            {
                If (CondRefOf (_OSI, Local0))
                {
                    OSTB = 0x00
                    TPOS = 0x00
                    If (_OSI ("Windows 2001"))
                    {
                        OSTB = 0x08
                        TPOS = 0x08
                    }

                    If (_OSI ("Windows 2001.1"))
                    {
                        OSTB = 0x20
                        TPOS = 0x20
                    }

                    If (_OSI ("Windows 2001 SP1"))
                    {
                        OSTB = 0x10
                        TPOS = 0x10
                    }

                    If (_OSI ("Windows 2001 SP2"))
                    {
                        OSTB = 0x11
                        TPOS = 0x11
                    }

                    If (_OSI ("Windows 2001 SP3"))
                    {
                        OSTB = 0x12
                        TPOS = 0x12
                    }

                    If (_OSI ("Windows 2006"))
                    {
                        OSTB = 0x40
                        TPOS = 0x40
                    }

                    If (_OSI ("Windows 2006 SP1"))
                    {
                        OSSP = 0x01
                        OSTB = 0x40
                        TPOS = 0x40
                    }

                    If (_OSI ("Windows 2009"))
                    {
                        OSSP = 0x01
                        OSTB = 0x50
                        TPOS = 0x50
                    }

                    If (_OSI ("Linux"))
                    {
                        LINX = 0x01
                        OSTB = 0x80
                        TPOS = 0x80
                    }
                }
                ElseIf (CondRefOf (_OS, Local0))
                {
                    If (SEQL (_OS, "Microsoft Windows"))
                    {
                        OSTB = 0x01
                        TPOS = 0x01
                    }
                    ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                    {
                        OSTB = 0x02
                        TPOS = 0x02
                    }
                    ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                    {
                        OSTB = 0x04
                        TPOS = 0x04
                    }
                    Else
                    {
                        OSTB = 0x00
                        TPOS = 0x00
                    }
                }
                Else
                {
                    OSTB = 0x00
                    TPOS = 0x00
                }

                ^PCI0.LPC0.PHS1 (0xB0)
                If ((TPOS == 0x80)){}
            }

            Return (OSTB) /* \_SB_.OSTB */
        }

        Method (SEQL, 2, Serialized)
        {
            Local0 = SizeOf (Arg0)
            Local1 = SizeOf (Arg1)
            If ((Local0 != Local1))
            {
                Return (Zero)
            }

            Name (BUF0, Buffer (Local0){})
            BUF0 = Arg0
            Name (BUF1, Buffer (Local0){})
            BUF1 = Arg1
            Local2 = Zero
            While ((Local2 < Local0))
            {
                Local3 = DerefOf (BUF0 [Local2])
                Local4 = DerefOf (BUF1 [Local2])
                If ((Local3 != Local4))
                {
                    Return (Zero)
                }

                Local2++
            }

            Return (One)
        }
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        \_SB.PCI0.LPC0.EC.HKEY.MHKE (0x00)
        If (((\_SB.TPOS < 0x40) && ((Arg0 == 0x03) || (Arg0 == 0x04))))
        {
            Sleep (0x0A)
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            \_SB.PCI0.LPC0.EC.BEEP (0x03)
            If (((\_SB.TPOS < 0x40) && ((Arg0 == 0x03) || (Arg0 == 0x04))))
            {
                Sleep (0x64)
            }

            \_SB.PCI0.LPC0.EC.S3FG = 0x01
        }

        If ((Arg0 == 0x05)){}
        If ((Arg0 == 0x04))
        {
            If ((\_SB.TPOS < 0x40))
            {
                Sleep (0x0A)
            }

            \_SB.PCI0.SMB.PHYD = Zero
        }

        If ((Arg0 == 0x03))
        {
            If ((\_SB.TPOS < 0x40))
            {
                Sleep (0x0A)
            }

            \_SB.PCI0.SMB.RSTU = Zero
            \_SB.PCI0.SMB.BLNK = 0x01
        }

        If (((\_SB.TPOS < 0x40) && ((Arg0 == 0x03) || (Arg0 == 0x04))))
        {
            Sleep (0x0A)
        }
    }

    Name (WAKI, Package (0x02)
    {
        0x00, 
        0x00
    })
    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        If (((\_SB.TPOS < 0x40) && ((Arg0 == 0x03) || (Arg0 == 0x04))))
        {
            Sleep (0x0A)
        }

        If (((Arg0 == 0x00) || (Arg0 >= 0x05)))
        {
            Return (WAKI) /* \WAKI */
        }

        If ((\_SB.TPOS >= 0x40)){}
        If ((\_SB.TPOS == 0x80)){}
        If (((\_SB.TPOS < 0x40) && ((Arg0 == 0x03) || (Arg0 == 0x04))))
        {
            Sleep (0x0A)
        }

        \_SB.PCI0.LPC0.EC.HKEY.MHKE (0x01)
        \_SB.PCI0.LPC0.EC.FNST ()
        \_SB.PCI0.OHC1.P0FR = 0x00
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            \_SB.PCI0.LPC0.EC.DELY = 0x01
            \_SB.PCI0.LPC0.EC.BEEP (0x03)
            \_SB.WGSV (0x00)
        }

        If (((\_SB.TPOS < 0x40) && ((Arg0 == 0x03) || (Arg0 == 0x04))))
        {
            Sleep (0x0A)
        }

        \_SB.BASC = 0x01
        If ((Arg0 == 0x03))
        {
            \_GPE.TRIG ()
            \_SB.PCI0.LPC0.ILID = \_SB.PCI0.LPC0.EC.HPLD
            If ((\_SB.TPOS >= 0x40))
            {
                Notify (\_SB.LID, 0x80) // Status Change
            }

            \_SB.PCI0.LPC0.EC.HKEY.HKS3 ()
            \_SB.PCI0.SMB.RSTU = One
            \_SB.PCI0.SMB.SRBT = 0x00
        }

        If ((Arg0 == 0x04))
        {
            If (GPIC)
            {
                \_SB.PCI0.LPC0.DSPI ()
            }

            \_GPE.TRIG ()
            \_SB.PCI0.SMB.PHYD = One
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Notify (\_SB.PCI0, 0x00) // Bus Check
        If ((Arg0 < 0x04))
        {
            If ((((Local1 = (\_SB.PCI0.LPC0.EC.HB0S & 0x0F)) == 0x00) && !\_SB.PCI0.LPC0.EC.ACPW))
            {
                \_SB.PCI0.LPC0.EC.ETHB = 0x0A
            }
        }

        If (((\_SB.TPOS < 0x40) && ((Arg0 == 0x03) || (Arg0 == 0x04))))
        {
            Sleep (0x0A)
        }

        Return (WAKI) /* \WAKI */
    }

    Scope (_SI)
    {
        Method (_SST, 1, NotSerialized)  // _SST: System Status
        {
            If ((Arg0 == 0x01)){}
            If ((Arg0 == 0x02)){}
            If ((Arg0 == 0x03)){}
            If ((Arg0 == 0x04)){}
        }
    }

    Name (GPIC, 0x00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        If (Arg0)
        {
            \_SB.PCI0.LPC0.DSPI ()
        }
    }

    Scope (_SB)
    {
        OperationRegion (TCG1, SystemMemory, 0xDEE1BD98, 0x0140)
        Field (TCG1, AnyAcc, NoLock, Preserve)
        {
            PPRQ,   8, 
            PPL1,   8, 
            PPRP,   8, 
            TPRS,   8, 
            PPOR,   8, 
            TPMV,   8, 
            MOR,    8, 
            TVEN,   8
        }

        Name (TCGP, Buffer (0x08)
        {
             0x1F, 0xE0, 0x1F, 0x01, 0x02, 0x04, 0x08, 0xF0   // ........
        })
        OperationRegion (TCGC, SystemIO, 0x72, 0x02)
        Field (TCGC, ByteAcc, Lock, Preserve)
        {
            TIDX,   8, 
            TPDA,   8
        }

        IndexField (TIDX, TPDA, ByteAcc, Lock, Preserve)
        {
            Offset (0x40), 
            TPP1,   8, 
            PPLO,   8, 
            TPP3,   8
        }

        OperationRegion (SMIP, SystemIO, 0xB0, 0x02)
        Field (SMIP, WordAcc, NoLock, Preserve)
        {
            SMIT,   8, 
            SMID,   8
        }

        OperationRegion (SMI0, SystemIO, 0xB0, 0x01)
        Field (SMI0, ByteAcc, NoLock, Preserve)
        {
            APMC,   8
        }

        Mutex (MSMI, 0x07)
        Method (QSMI, 5, NotSerialized)
        {
            Acquire (MSMI, 0xFFFF)
            ^PCI0.LPC0.CMD = Arg0
            ^PCI0.LPC0.PAR0 = Arg1
            ^PCI0.LPC0.PAR1 = Arg2
            ^PCI0.LPC0.PAR2 = Arg3
            ^PCI0.LPC0.PAR3 = Arg4
            ^PCI0.LPC0.SMIC = 0xF5
            While ((^PCI0.LPC0.ERR == 0x01))
            {
                Sleep (0x64)
                ^PCI0.LPC0.SMIC = 0xF5
            }

            Local0 = ^PCI0.LPC0.PAR0 /* \_SB_.PCI0.LPC0.PAR0 */
            Release (MSMI)
            Return (Local0)
        }

        Method (RBEC, 1, NotSerialized)
        {
            Return (QSMI (0x00, 0x03, Arg0, 0x00, 0x00))
        }

        Method (WBEC, 2, NotSerialized)
        {
            QSMI (0x00, 0x04, Arg0, Arg1, 0x00)
        }

        Method (MBEC, 3, NotSerialized)
        {
            QSMI (0x00, 0x05, Arg0, Arg1, Arg2)
        }

        Method (VUPS, 0, NotSerialized)
        {
            QSMI (0x01, 0x01, 0x00, 0x00, 0x00)
        }

        Method (VEVT, 1, NotSerialized)
        {
            Return (QSMI (0x01, 0x08, Arg0, 0x00, 0x00))
        }

        Method (VBRC, 1, NotSerialized)
        {
            QSMI (0x01, 0x0A, Arg0, 0x00, 0x00)
        }

        Method (VBRD, 0, NotSerialized)
        {
            QSMI (0x01, 0x0B, 0x00, 0x00, 0x00)
        }

        Method (VBRU, 0, NotSerialized)
        {
            QSMI (0x01, 0x0C, 0x00, 0x00, 0x00)
        }

        Method (VBRS, 1, NotSerialized)
        {
            QSMI (0x01, 0x0D, Arg0, 0x00, 0x00)
        }

        Method (VBRG, 0, NotSerialized)
        {
            Return (QSMI (0x01, 0x0E, 0x00, 0x00, 0x00))
        }

        Method (VDYN, 2, NotSerialized)
        {
            Return (QSMI (0x01, 0x11, Arg0, Arg1, 0x00))
        }

        Method (UCMS, 1, NotSerialized)
        {
            Return (QSMI (0x02, Arg0, 0x00, 0x00, 0x00))
        }

        Method (BLSC, 1, NotSerialized)
        {
            Return (QSMI (0x02, 0x14, Arg0, 0x00, 0x00))
        }

        Method (BLTH, 1, NotSerialized)
        {
            Return (QSMI (0x06, Arg0, 0x00, 0x00, 0x00))
        }

        Method (PRSM, 2, NotSerialized)
        {
            Return (QSMI (0x07, 0x00, Arg0, Arg1, 0x00))
        }

        Method (WGSV, 1, NotSerialized)
        {
            Return (QSMI (0x09, Arg0, 0x00, 0x00, 0x00))
        }

        Method (TSDL, 0, NotSerialized)
        {
            Return (QSMI (0x0A, 0x03, 0x00, 0x00, 0x00))
        }

        Method (CHFN, 2, NotSerialized)
        {
            Return (QSMI (0x0F, Arg0, Arg1, 0x00, 0x00))
        }

        Method (WMIS, 2, NotSerialized)
        {
            Return (QSMI (0x10, Arg0, Arg1, 0x00, 0x00))
        }

        Method (UAWS, 1, NotSerialized)
        {
            Return (QSMI (0x13, Arg0, 0x00, 0x00, 0x00))
        }

        Method (BFWC, 1, NotSerialized)
        {
            Return (QSMI (0x14, 0x00, Arg0, 0x00, 0x00))
        }

        Method (BFWP, 0, NotSerialized)
        {
            Return (QSMI (0x14, 0x01, 0x00, 0x00, 0x00))
        }

        Method (BFWG, 1, NotSerialized)
        {
            QSMI (0x14, 0x03, Arg0, 0x00, 0x00)
        }

        Method (BDMC, 1, NotSerialized)
        {
            QSMI (0x14, 0x04, Arg0, 0x00, 0x00)
        }

        Method (PSIF, 2, NotSerialized)
        {
            Return (QSMI (0x14, 0x05, Arg0, Arg1, 0x00))
        }

        Method (FNSC, 2, NotSerialized)
        {
            Return (QSMI (0x14, 0x06, Arg0, Arg1, 0x00))
        }

        Method (AUDC, 2, NotSerialized)
        {
            Return (QSMI (0x14, 0x07, Arg0, Arg1, 0x00))
        }

        Method (SYBC, 2, NotSerialized)
        {
            Return (QSMI (0x14, 0x08, Arg0, Arg1, 0x00))
        }

        Method (CBIF, 2, NotSerialized)
        {
            Return (QSMI (0x14, 0x0F, Arg0, Arg1, 0x00))
        }

        Method (BFUD, 0, NotSerialized)
        {
            Return (QSMI (0x14, 0x10, 0x00, 0x00, 0x00))
        }

        Method (HBCK, 0, NotSerialized)
        {
            Return (QSMI (0x16, 0x00, 0x00, 0x00, 0x00))
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x18, 
                0x03
            })
        }

        Device (PCI0)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_BBN, 0x00)  // _BBN: BIOS Bus Number
            Name (AMHP, 0x00)
            Name (VGPU, 0x00010000)
            Scope (\_SB.PCI0)
            {
                Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
                Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
                {
                    CreateDWordField (Arg3, 0x00, CDW1)
                    CreateDWordField (Arg3, 0x04, CDW2)
                    CreateDWordField (Arg3, 0x08, CDW3)
                    If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                    {
                        SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                        CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                        If ((((SUPP & 0x16) != 0x16) || (AMHP == 0x80000000)))
                        {
                            CTRL &= 0x1E
                        }

                        CTRL &= 0x1D
                        If (~(CDW1 & 0x01))
                        {
                            If (OSSP)
                            {
                                If ((CTRL & 0x01)){}
                                If ((CTRL & 0x04))
                                {
                                    ^SMB.EPNM = One
                                    ^SMB.DPPF = Zero
                                    ^SMB.PWDE = One
                                }
                                Else
                                {
                                    ^SMB.EPNM = Zero
                                    ^SMB.DPPF = One
                                    ^SMB.PWDE = Zero
                                }
                            }
                        }

                        If ((Arg1 != One))
                        {
                            CDW1 |= 0x08
                        }

                        If ((CDW3 != CTRL))
                        {
                            CDW1 |= 0x10
                        }

                        CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                        CDW3 &= 0xFB
                        Return (Arg3)
                    }
                    Else
                    {
                        CDW1 |= 0x04
                        Return (Arg3)
                    }
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                OSTP ()
                \_GPE.TRIG ()
                If (((TPOS == 0x40) && (OSSP == 0x00)))
                {
                    AMHP = 0x80000000
                }
            }

            OperationRegion (NBMS, PCI_Config, 0x60, 0x08)
            Field (NBMS, DWordAcc, NoLock, Preserve)
            {
                MIDX,   32, 
                MIDR,   32
            }

            OperationRegion (NBXP, PCI_Config, 0xE0, 0x08)
            Field (NBXP, DWordAcc, NoLock, Preserve)
            {
                NBXI,   32, 
                NBXD,   32
            }

            Mutex (NBMM, 0x00)
            Mutex (NBXM, 0x00)
            Method (NBMR, 1, NotSerialized)
            {
                Acquire (NBMM, 0xFFFF)
                Local0 = (Arg0 & 0x7F)
                MIDX = Local0
                Local0 = MIDR /* \_SB_.PCI0.MIDR */
                MIDX = 0x7F
                Release (NBMM)
                Return (Local0)
            }

            Method (NBMW, 2, NotSerialized)
            {
                Acquire (NBMM, 0xFFFF)
                Local0 = (Arg0 & 0x7F)
                Local0 |= 0x80
                MIDX = Local0
                MIDR = Arg1
                MIDX = Local0 &= 0x7F
                Release (NBMM)
            }

            Method (NBXR, 1, NotSerialized)
            {
                Acquire (NBXM, 0xFFFF)
                NBXI = Arg0
                Local0 = NBXD /* \_SB_.PCI0.NBXD */
                NBXI = 0x00
                Release (NBXM)
                Return (Local0)
            }

            Method (NBXW, 2, NotSerialized)
            {
                Acquire (NBXM, 0xFFFF)
                NBXI = Arg0
                NBXD = Arg1
                NBXI = 0x00
                Release (NBXM)
            }

            Method (GFXM, 0, NotSerialized)
            {
                Local0 = NBMR (0x08)
                Local0 >>= 0x08
                Local0 &= 0x0F
                Return (Local0)
            }

            Method (GPPM, 0, NotSerialized)
            {
                Local0 = NBMR (0x67)
                Local0 &= 0x0F
                Return (Local0)
            }

            Method (GPPX, 0, NotSerialized)
            {
                Local0 = NBMR (0x2D)
                Local0 >>= 0x07
                Local0 &= 0x0F
                Return (Local0)
            }

            Method (XPTR, 2, NotSerialized)
            {
                If ((Arg0 < 0x02))
                {
                    Return (0x00)
                }

                If (((Arg0 > 0x0A) || (Arg0 == 0x08)))
                {
                    Return (0x00)
                }
                Else
                {
                    Local0 = GPPM ()
                    Local1 = GPPX ()
                    If ((Arg0 == 0x0A))
                    {
                        If (((Local0 == 0x03) && (Local1 == 0x03)))
                        {
                            Local0 = 0x20
                            Local2 = NBMR (0x2D)
                            If (Arg1)
                            {
                                Local2 &= ~Local0
                            }
                            Else
                            {
                                Local2 |= Local0
                            }

                            NBMW (0x2D, Local2)
                            Return (Ones)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    If ((Arg0 == 0x09))
                    {
                        If (((Local0 >= 0x02) && (Local1 >= 0x02)))
                        {
                            Local0 = 0x10
                            Local2 = NBMR (0x2D)
                            If (Arg1)
                            {
                                Local2 &= ~Local0
                            }
                            Else
                            {
                                Local2 |= Local0
                            }

                            NBMW (0x2D, Local2)
                            Return (Ones)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Local0 = 0x01
                    If ((Arg0 < 0x04))
                    {
                        Local1 = (Arg0 + 0x02)
                    }
                    Else
                    {
                        Local1 = (Arg0 + 0x11)
                    }

                    Local0 <<= Local1
                    Local2 = NBMR (0x08)
                    If (Arg1)
                    {
                        Local2 &= ~Local0
                    }
                    Else
                    {
                        Local2 |= Local0
                    }

                    NBMW (0x08, Local2)
                    Return (Ones)
                }
            }

            OperationRegion (K8ST, SystemMemory, 0xDEE2CE18, 0x00000048)
            Field (K8ST, AnyAcc, NoLock, Preserve)
            {
                C0_0,   16, 
                C2_0,   16, 
                C4_0,   16, 
                C6_0,   16, 
                C8_0,   16, 
                CA_0,   16, 
                CC_0,   16, 
                CE_0,   16, 
                D0_0,   16, 
                D2_0,   16, 
                D4_0,   16, 
                D6_0,   16, 
                D8_0,   16, 
                DA_0,   16, 
                DC_0,   16, 
                DE_0,   16, 
                E0_0,   16, 
                E2_0,   16, 
                E4_0,   16, 
                E6_0,   16, 
                E8_0,   16, 
                EA_0,   16, 
                EC_0,   16, 
                EE_0,   16, 
                F0_0,   16, 
                F2_0,   16, 
                F4_0,   16, 
                F6_0,   16, 
                F8_0,   16, 
                FA_0,   16, 
                FC_0,   16, 
                FE_0,   16, 
                TOML,   32, 
                TOMH,   32
            }

            Name (RSRC, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C1FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C2000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C5FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C6000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000C9FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CA000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CDFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CE000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D1FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D2000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D5FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D6000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000D9FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DA000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DDFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y0E, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DE000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y0F, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E1FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y10, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E2000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y11, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E5FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y12, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E6000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y13, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000E9FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y14, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EA000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y15, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EDFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y16, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EE000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y17, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    0x00,, _Y18, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFC000000,         // Range Minimum
                    0xFDFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x02000000,         // Length
                    0x00,, _Y19, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED40000,         // Range Minimum
                    0xFED44FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00005000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateBitField (RSRC, \_SB.PCI0._Y00._RW, C0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y00._LEN, C0LN)  // _LEN: Length
                C0RW = One
                C0LN = 0x2000
                If ((C0_0 & 0x1818))
                {
                    C0LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y01._RW, C2RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y01._LEN, C2LN)  // _LEN: Length
                C2RW = One
                C2LN = 0x2000
                If ((C2_0 & 0x1818))
                {
                    C2LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                C4RW = One
                C4LN = 0x2000
                If ((C4_0 & 0x1818))
                {
                    C4LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y03._RW, C6RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y03._LEN, C6LN)  // _LEN: Length
                C6RW = One
                C6LN = 0x2000
                If ((C6_0 & 0x1818))
                {
                    C6LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y04._RW, C8RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y04._LEN, C8LN)  // _LEN: Length
                C8RW = One
                C8LN = 0x2000
                If ((C8_0 & 0x1818))
                {
                    C8LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y05._RW, CARW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y05._LEN, CALN)  // _LEN: Length
                CARW = One
                CALN = 0x2000
                If ((CA_0 & 0x1818))
                {
                    CALN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y06._RW, CCRW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y06._LEN, CCLN)  // _LEN: Length
                CCRW = One
                CCLN = 0x2000
                If ((CC_0 & 0x1818))
                {
                    CCLN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y07._RW, CERW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y07._LEN, CELN)  // _LEN: Length
                CERW = One
                CELN = 0x2000
                If ((CE_0 & 0x1818))
                {
                    CELN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y08._RW, D0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y08._LEN, D0LN)  // _LEN: Length
                D0RW = One
                D0LN = 0x2000
                If ((D0_0 & 0x1818))
                {
                    D0LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y09._RW, D2RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y09._LEN, D2LN)  // _LEN: Length
                D2RW = One
                D2LN = 0x2000
                If ((D2_0 & 0x1818))
                {
                    D2LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0A._RW, D4RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0A._LEN, D4LN)  // _LEN: Length
                D4RW = One
                D4LN = 0x2000
                If ((D4_0 & 0x1818))
                {
                    D4LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0B._RW, D6RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0B._LEN, D6LN)  // _LEN: Length
                D6RW = One
                D6LN = 0x2000
                If ((D6_0 & 0x1818))
                {
                    D6LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0C._RW, D8RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0C._LEN, D8LN)  // _LEN: Length
                D8RW = One
                D8LN = 0x2000
                If ((D8_0 & 0x1818))
                {
                    D8LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0D._RW, DARW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0D._LEN, DALN)  // _LEN: Length
                DARW = One
                DALN = 0x2000
                If ((DA_0 & 0x1818))
                {
                    DALN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0E._RW, DCRW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0E._LEN, DCLN)  // _LEN: Length
                DCRW = One
                DCLN = 0x2000
                If ((DC_0 & 0x1818))
                {
                    DCLN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0F._RW, DERW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0F._LEN, DELN)  // _LEN: Length
                DERW = One
                DELN = 0x2000
                If ((DE_0 & 0x1818))
                {
                    DELN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y10._RW, E0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y10._LEN, E0LN)  // _LEN: Length
                E0RW = One
                E0LN = 0x2000
                If ((E0_0 & 0x1818))
                {
                    E0LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y11._RW, E2RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y11._LEN, E2LN)  // _LEN: Length
                E2RW = One
                E2LN = 0x2000
                If ((E2_0 & 0x1818))
                {
                    E2LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y12._RW, E4RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y12._LEN, E4LN)  // _LEN: Length
                E4RW = One
                E4LN = 0x2000
                If ((E4_0 & 0x1818))
                {
                    E4LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y13._RW, E6RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y13._LEN, E6LN)  // _LEN: Length
                E6RW = One
                E6LN = 0x2000
                If ((E6_0 & 0x1818))
                {
                    E6LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y14._RW, E8RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y14._LEN, E8LN)  // _LEN: Length
                E8RW = One
                E8LN = 0x2000
                If ((E8_0 & 0x1818))
                {
                    E8LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y15._RW, EARW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y15._LEN, EALN)  // _LEN: Length
                EARW = One
                EALN = 0x2000
                If ((EA_0 & 0x1818))
                {
                    EALN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y16._RW, ECRW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y16._LEN, ECLN)  // _LEN: Length
                ECRW = One
                ECLN = 0x2000
                If ((EC_0 & 0x1818))
                {
                    ECLN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y17._RW, EERW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y17._LEN, EELN)  // _LEN: Length
                EERW = One
                EELN = 0x2000
                If ((EE_0 & 0x1818))
                {
                    EELN = 0x00
                }

                CreateDWordField (RSRC, \_SB.PCI0._Y18._MIN, BT1S)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y18._MAX, BT1M)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y18._LEN, BT1L)  // _LEN: Length
                CreateDWordField (RSRC, \_SB.PCI0._Y19._MIN, BT2S)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y19._MAX, BT2M)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y19._LEN, BT2L)  // _LEN: Length
                Local0 = 0xF8000000
                BT1S = TOML /* \_SB_.PCI0.TOML */
                BT1M = (Local0 - 0x01)
                BT1L = (Local0 - TOML) /* \_SB_.PCI0.TOML */
                Return (RSRC) /* \_SB_.PCI0.RSRC */
            }

            Device (MEMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (MEM1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0F50,             // Range Minimum
                        0x0F50,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y1A)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y1B)
                    Memory32Fixed (ReadWrite,
                        0xF8000000,         // Address Base
                        0x04000000,         // Address Length
                        )
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y1A._BAS, MB01)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y1A._LEN, ML01)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y1B._BAS, MB02)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y1B._LEN, ML02)  // _LEN: Length
                    If (GPIC)
                    {
                        MB01 = 0xFEC00000
                        MB02 = 0xFEE00000
                        ML01 = 0x1000
                        ML02 = 0x1000
                    }

                    Return (MEM1) /* \_SB_.PCI0.MEMR.MEM1 */
                }
            }

            Scope (\_SB.PCI0)
            {
                Method (AFN0, 0, Serialized)
                {
                    If ((VGPU == ^VGA._ADR))
                    {
                        ^VGA.AFN0 ()
                    }

                    If ((VGPU == ^PB4._ADR))
                    {
                        ^PB4.VGA.AFN0 ()
                    }
                }

                Method (AFN1, 1, Serialized)
                {
                }

                Method (AFN2, 2, Serialized)
                {
                }

                Method (AFN3, 2, Serialized)
                {
                    If ((VGPU == ^VGA._ADR))
                    {
                        ^VGA.AFN3 (Arg0, Arg1)
                    }

                    If ((VGPU == ^PB4._ADR))
                    {
                        ^PB4.VGA.AFN3 (Arg0, Arg1)
                    }
                }

                Method (AFN4, 1, Serialized)
                {
                    If ((VGPU == ^VGA._ADR))
                    {
                        ^VGA.AFN4 (Arg0)
                    }

                    If ((VGPU == ^PB4._ADR))
                    {
                        ^PB4.VGA.AFN4 (Arg0)
                    }
                }

                Method (AFN5, 0, Serialized)
                {
                    If ((VGPU == ^VGA._ADR))
                    {
                        ^VGA.AFN5 ()
                    }

                    If ((VGPU == ^PB4._ADR))
                    {
                        ^PB4.VGA.AFN5 ()
                    }
                }

                Method (AFN6, 0, Serialized)
                {
                    If ((VGPU == ^VGA._ADR))
                    {
                        ^VGA.AFN6 ()
                    }

                    If ((VGPU == ^PB4._ADR))
                    {
                        ^PB4.VGA.AFN6 ()
                    }
                }

                Method (AFN7, 1, Serialized)
                {
                    If ((VGPU == ^VGA._ADR))
                    {
                        ^VGA.AFN7 (Arg0)
                    }

                    If ((VGPU == ^PB4._ADR))
                    {
                        ^PB4.VGA.AFN7 (Arg0)
                    }
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (GPIC)
                {
                    Return (Package (0x22)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x01, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0005FFFF, 
                            0x00, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0005FFFF, 
                            0x01, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0005FFFF, 
                            0x02, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0005FFFF, 
                            0x03, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x00, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x01, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x02, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x03, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x00, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x01, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x02, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x03, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            0x00, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0012FFFF, 
                            0x00, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0012FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0013FFFF, 
                            0x00, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0013FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            0x00, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0010FFFF, 
                            0x00, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }
                    })
                }
                Else
                {
                    Return (Package (0x22)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x01, 
                            ^LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x00, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x02, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x03, 
                            ^LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0005FFFF, 
                            0x00, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0005FFFF, 
                            0x01, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0005FFFF, 
                            0x02, 
                            ^LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0005FFFF, 
                            0x03, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x00, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x01, 
                            ^LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x02, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x03, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x00, 
                            ^LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x01, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x02, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            0x03, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            0x00, 
                            ^LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0012FFFF, 
                            0x00, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0012FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0013FFFF, 
                            0x00, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0013FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            0x00, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0010FFFF, 
                            0x00, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x00, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x02, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x03, 
                            ^LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x00, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x02, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x03, 
                            ^LPC0.LNKD, 
                            0x00
                        }
                    })
                }
            }

            OperationRegion (BAR1, PCI_Config, 0x14, 0x04)
            Field (BAR1, ByteAcc, NoLock, Preserve)
            {
                NBBA,   32
            }

            Method (XCMP, 2, NotSerialized)
            {
                If ((0x10 != SizeOf (Arg0)))
                {
                    Return (0x00)
                }

                If ((0x10 != SizeOf (Arg1)))
                {
                    Return (0x00)
                }

                Local0 = 0x00
                While ((Local0 < 0x10))
                {
                    If ((DerefOf (Arg0 [Local0]) != DerefOf (Arg1 [Local0]
                        )))
                    {
                        Return (0x00)
                    }

                    Local0++
                }

                Return (0x01)
            }

            Device (PB4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                }

                OperationRegion (XPEX, SystemMemory, 0xF8020100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (PCFG, PCI_Config, 0x00, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PSDC,   1, 
                        ,   2, 
                    PSDS,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    Local0 = Zero
                    If ((VC0S & 0x00020000))
                    {
                        Local0 = Ones
                    }

                    Return (Local0)
                }

                Method (XPRD, 1, NotSerialized)
                {
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB4_.XPID */
                    XPIR = 0x00
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = 0x00
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB4_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPCN, 0, NotSerialized)
                {
                    Local1 = 0x00
                    Local0 = XPPB ()
                    If ((0x04 > Local0))
                    {
                        Local1 = 0x00
                    }

                    If ((0x08 > Local0))
                    {
                        Local1 = 0x00010000
                    }

                    If ((0x0B > Local0))
                    {
                        Local1 = 0x00020000
                    }

                    Return (Local1)
                }

                Method (XPPD, 0, NotSerialized)
                {
                    Local0 = XPPB ()
                    Local2 = GPPX ()
                    Local3 = GFXM ()
                    Local1 = 0x00
                    If ((0x10 == Local0))
                    {
                        Local1 = 0xFFFF
                        If (Local3)
                        {
                            Local1 = 0x0F0F
                        }
                    }

                    If ((0x18 == Local0))
                    {
                        Local1 = 0xF0F0
                    }

                    If ((0x20 == Local0))
                    {
                        Local1 = 0x1010
                    }

                    If ((0x28 == Local0))
                    {
                        Local1 = 0x2020
                    }

                    If ((0x30 == Local0))
                    {
                        Local1 = 0x4040
                    }

                    If ((0x38 == Local0))
                    {
                        Local1 = 0x8080
                    }

                    If ((0x48 == Local0))
                    {
                        Local1 = 0x00
                        If ((0x02 == Local2))
                        {
                            Local1 = 0x0303
                        }

                        If ((0x03 == Local2))
                        {
                            Local1 = 0x0101
                        }
                    }

                    If ((0x50 == Local0))
                    {
                        Local1 = 0x00
                        If ((0x03 == Local2))
                        {
                            Local1 = 0x0202
                        }
                    }

                    Return (Local1)
                }

                Method (XPLP, 1, NotSerialized)
                {
                    Local1 = XPPD ()
                    If ((0x00 != Local1))
                    {
                        Local2 = NBXR ((0x65 + XPCN ()))
                        If (Arg0)
                        {
                            Local2 &= ~Local1
                        }
                        Else
                        {
                            Local2 |= Local1
                        }

                        NBXW ((0x65 + XPCN ()), Local2)
                    }
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB4_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = 0x01
                    While ((Local1 && Local2))
                    {
                        Sleep (0x01)
                        Local3 = LKST /* \_SB_.PCI0.PB4_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = 0x00
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPLL, 1, NotSerialized)
                {
                    Local0 = GFXM ()
                    Local1 = XPPB ()
                    Local2 = 0x00
                    If ((0x10 == Local1))
                    {
                        Local2 = 0x01
                        Local3 = 0x00770070
                        If (Local0)
                        {
                            Local3 = 0x00330030
                        }
                    }

                    If (((0x18 == Local1) && Local0))
                    {
                        Local2 = 0x01
                        Local3 = 0x00440040
                    }

                    Local0 = NBMR (0x07)
                    Local1 = NBXR (0x65)
                    If ((Local0 && 0x0201F000))
                    {
                        Local4 = 0x00440040
                        Local5 = Local4
                        If ((~Local1 && 0xF0F0))
                        {
                            Local5 = 0x00
                        }
                    }
                    Else
                    {
                        Local4 = 0x00110010
                        Local5 = Local4
                        If ((~Local1 && 0x0F0F))
                        {
                            Local5 = 0x00
                        }
                    }

                    If (Local2)
                    {
                        Local6 = (Local3 | Local4)
                        Local0 = (Local5 & Local4)
                        Local7 = (Local3 | Local0)
                        Local0 = NBMR (0x2E)
                        If (Arg0)
                        {
                            Local0 &= ~Local6
                        }
                        Else
                        {
                            Local0 |= Local7
                        }

                        NBMW (0x2E, Local0)
                    }
                }

                Method (XPPR, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        XPLL (0x01)
                        XPLP (0x01)
                        Sleep (0xC8)
                        XPTR ((XPPB () << 0x03), 0x01)
                        Sleep (0x14)
                    }
                    Else
                    {
                        XPTR ((XPPB () << 0x03), 0x00)
                        XPLP (0x00)
                        XPLL (0x00)
                    }

                    Return (Ones)
                }

                Device (VGA)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, 0x00, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Name (DOSP, 0x00)
                    Name (BLVL, Buffer (0x10)
                    {
                        /* 0000 */  0x00, 0x20, 0x30, 0x40, 0x50, 0x58, 0x60, 0x70,  // . 0@PX`p
                        /* 0008 */  0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xFF   // ........
                    })
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSP = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Device (LCD)
                    {
                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            Return (0x0110)
                        }

                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            If ((^^^^VGA.AF7E == 0x80000001))
                            {
                                Return (Package (0x11)
                                {
                                    0x52, 
                                    0x22, 
                                    0x02, 
                                    0x08, 
                                    0x0E, 
                                    0x16, 
                                    0x1C, 
                                    0x22, 
                                    0x2A, 
                                    0x30, 
                                    0x36, 
                                    0x3E, 
                                    0x44, 
                                    0x4B, 
                                    0x52, 
                                    0x58, 
                                    0x64
                                })
                            }
                            Else
                            {
                                Return (Package (0x35)
                                {
                                    0x5A, 
                                    0x3C, 
                                    0x00, 
                                    0x02, 
                                    0x04, 
                                    0x06, 
                                    0x08, 
                                    0x0A, 
                                    0x0C, 
                                    0x0E, 
                                    0x10, 
                                    0x12, 
                                    0x14, 
                                    0x16, 
                                    0x18, 
                                    0x1A, 
                                    0x1C, 
                                    0x1E, 
                                    0x20, 
                                    0x22, 
                                    0x24, 
                                    0x26, 
                                    0x28, 
                                    0x2A, 
                                    0x2C, 
                                    0x2E, 
                                    0x30, 
                                    0x32, 
                                    0x34, 
                                    0x36, 
                                    0x38, 
                                    0x3A, 
                                    0x3C, 
                                    0x3E, 
                                    0x40, 
                                    0x42, 
                                    0x44, 
                                    0x46, 
                                    0x48, 
                                    0x4A, 
                                    0x4C, 
                                    0x4E, 
                                    0x50, 
                                    0x52, 
                                    0x54, 
                                    0x56, 
                                    0x58, 
                                    0x5A, 
                                    0x5C, 
                                    0x5E, 
                                    0x60, 
                                    0x62, 
                                    0x64
                                })
                            }
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((^^^^VGA.AF7E == 0x80000001))
                            {
                                Divide (((Arg0 * 0x03) + 0x13), 0x14, Local1, Local0)
                                Local3 = DerefOf (BLVL [Local0])
                                ^^^^AFN7 (Local3)
                            }
                            Else
                            {
                                Acquire (^^^^LPC0.PSMX, 0xFFFF)
                                ^^^^LPC0.INF0 = 0x01
                                ^^^^LPC0.INF1 = Arg0
                                ^^^^LPC0.PHS1 (0x8A)
                                Release (^^^^LPC0.PSMX)
                            }
                        }
                    }

                    Name (ATIB, Buffer (0x0100){})
                    Method (ATIF, 2, Serialized)
                    {
                        If ((Arg0 == 0x00))
                        {
                            Return (AF00 ())
                        }

                        If ((Arg0 == 0x01))
                        {
                            Return (AF01 ())
                        }

                        If ((Arg0 == 0x02))
                        {
                            Return (AF02 ())
                        }

                        If ((Arg0 == 0x03))
                        {
                            Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
                        }

                        If ((Arg0 == 0x04))
                        {
                            Return (AF04 ())
                        }

                        If ((Arg0 == 0x0F))
                        {
                            Return (AF15 ())
                        }
                        Else
                        {
                            CreateWordField (ATIB, 0x00, SSZE)
                            CreateWordField (ATIB, 0x02, VERN)
                            CreateDWordField (ATIB, 0x04, NMSK)
                            CreateDWordField (ATIB, 0x08, SFUN)
                            SSZE = 0x00
                            VERN = 0x00
                            NMSK = 0x00
                            SFUN = 0x00
                            Return (ATIB) /* \_SB_.PCI0.PB4_.VGA_.ATIB */
                        }
                    }

                    Method (AF00, 0, NotSerialized)
                    {
                        P80H = 0xF0
                        CreateWordField (ATIB, 0x00, SSZE)
                        CreateWordField (ATIB, 0x02, VERN)
                        CreateDWordField (ATIB, 0x04, NMSK)
                        CreateDWordField (ATIB, 0x08, SFUN)
                        SSZE = 0x0C
                        VERN = 0x01
                        If ((^^^VGA.PXEN == 0x80000000))
                        {
                            NMSK = 0x11
                        }
                        Else
                        {
                            NMSK = 0x51
                        }

                        If ((^^^VGA.AF7E == 0x80000001))
                        {
                            NMSK |= 0x80
                        }

                        MSKN = NMSK /* \_SB_.PCI0.PB4_.VGA_.AF00.NMSK */
                        SFUN = 0x400F
                        Return (ATIB) /* \_SB_.PCI0.PB4_.VGA_.ATIB */
                    }

                    Name (NCOD, 0xD0)
                    Method (AF01, 0, NotSerialized)
                    {
                        P80H = 0xF1
                        CreateWordField (ATIB, 0x00, SSZE)
                        CreateDWordField (ATIB, 0x02, VMSK)
                        CreateDWordField (ATIB, 0x06, FLGS)
                        CreateByteField (ATIB, 0x0A, NCOD)
                        VMSK = 0x0B
                        SSZE = 0x0B
                        VMSK = 0x03
                        FLGS = 0x02
                        NCOD = 0xD0
                        Return (ATIB) /* \_SB_.PCI0.PB4_.VGA_.ATIB */
                    }

                    Name (PSBR, Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (MSKN, 0x00)
                    Name (SEXM, 0x00)
                    Name (STHG, 0x00)
                    Name (STHI, 0x00)
                    Name (SFPG, 0x00)
                    Name (SFPI, 0x00)
                    Name (SSPS, 0x00)
                    Name (SSDM, 0x0A)
                    Name (SCDY, 0x00)
                    Name (SACT, Buffer (0x05)
                    {
                         0x01, 0x02, 0x03, 0x08, 0x09                     // .....
                    })
                    Method (AF02, 0, NotSerialized)
                    {
                        P80H = 0xF2
                        CreateBitField (PSBR, 0x00, PDSW)
                        CreateBitField (PSBR, 0x01, PEXM)
                        CreateBitField (PSBR, 0x02, PTHR)
                        CreateBitField (PSBR, 0x03, PFPS)
                        CreateBitField (PSBR, 0x04, PSPS)
                        CreateBitField (PSBR, 0x05, PDCC)
                        CreateBitField (PSBR, 0x06, PXPS)
                        CreateBitField (PSBR, 0x07, PBRT)
                        CreateWordField (ATIB, 0x00, SSZE)
                        CreateDWordField (ATIB, 0x02, PSBI)
                        CreateByteField (ATIB, 0x06, EXPM)
                        CreateByteField (ATIB, 0x07, THRM)
                        CreateByteField (ATIB, 0x08, THID)
                        CreateByteField (ATIB, 0x09, FPWR)
                        CreateByteField (ATIB, 0x0A, FPID)
                        CreateByteField (ATIB, 0x0B, SPWR)
                        CreateByteField (ATIB, 0x0C, BRTL)
                        SSZE = 0x0D
                        PSBI = PSBR /* \_SB_.PCI0.PB4_.VGA_.PSBR */
                        If (PDSW)
                        {
                            P80H = 0x82
                            PDSW = Zero
                        }

                        If (PEXM)
                        {
                            EXPM = SEXM /* \_SB_.PCI0.PB4_.VGA_.SEXM */
                            SEXM = Zero
                            PEXM = Zero
                        }

                        If (PTHR)
                        {
                            THRM = STHG /* \_SB_.PCI0.PB4_.VGA_.STHG */
                            THID = STHI /* \_SB_.PCI0.PB4_.VGA_.STHI */
                            STHG = Zero
                            STHI = Zero
                            PTHR = Zero
                        }

                        If (PFPS)
                        {
                            FPWR = SFPG /* \_SB_.PCI0.PB4_.VGA_.SFPG */
                            FPWR = SFPI /* \_SB_.PCI0.PB4_.VGA_.SFPI */
                            SFPG = Zero
                            SFPI = Zero
                            PFPS = Zero
                        }

                        If (PSPS)
                        {
                            SPWR = SSPS /* \_SB_.PCI0.PB4_.VGA_.SSPS */
                            PSPS = Zero
                        }

                        If (PXPS)
                        {
                            P80H = 0xA2
                            PXPS = Zero
                        }

                        If (PBRT)
                        {
                            P80H = 0xF7
                            PBRT = Zero
                        }

                        Return (ATIB) /* \_SB_.PCI0.PB4_.VGA_.ATIB */
                    }

                    Method (AF03, 2, NotSerialized)
                    {
                        P80H = 0xF3
                        CreateWordField (ATIB, 0x00, SSZE)
                        CreateWordField (ATIB, 0x02, SSDP)
                        CreateWordField (ATIB, 0x04, SCDP)
                        SSDP = Arg0
                        SCDP = Arg1
                        Name (NXTD, 0x06)
                        Name (CIDX, 0x06)
                        Local1 = SSDP /* \_SB_.PCI0.PB4_.VGA_.AF03.SSDP */
                        Local1 &= 0x8B
                        Local2 = SCDP /* \_SB_.PCI0.PB4_.VGA_.AF03.SCDP */
                        Local2 |= 0x01
                        P80H = Local2
                        Local0 = Zero
                        While ((Local0 < SizeOf (SACT)))
                        {
                            Local3 = DerefOf (SACT [Local0])
                            If ((Local3 == Local1))
                            {
                                CIDX = Local0
                                Local0 = SizeOf (SACT)
                            }
                            Else
                            {
                                Local0++
                            }
                        }

                        Local0 = CIDX /* \_SB_.PCI0.PB4_.VGA_.AF03.CIDX */
                        While ((Local0 < SizeOf (SACT)))
                        {
                            Local0++
                            If ((Local0 == SizeOf (SACT)))
                            {
                                Local0 = 0x00
                            }

                            Local3 = DerefOf (SACT [Local0])
                            If (((Local3 & Local2) == Local3))
                            {
                                NXTD = Local0
                                Local0 = SizeOf (SACT)
                            }
                        }

                        If ((NXTD == SizeOf (SACT)))
                        {
                            SSDP = Zero
                        }
                        Else
                        {
                            Local0 = NXTD /* \_SB_.PCI0.PB4_.VGA_.AF03.NXTD */
                            Local3 = DerefOf (SACT [Local0])
                            SSDP &= 0xFFFFFF74
                            SSDP |= Local3
                        }

                        SSZE = 0x04
                        P80H = SSDP /* \_SB_.PCI0.PB4_.VGA_.AF03.SSDP */
                        Return (ATIB) /* \_SB_.PCI0.PB4_.VGA_.ATIB */
                    }

                    Method (AF04, 0, NotSerialized)
                    {
                        P80H = 0xF4
                        CreateWordField (ATIB, 0x00, SSZE)
                        CreateByteField (ATIB, 0x02, LIDS)
                        SSZE = 0x03
                        If (^^^LPC0.ILID)
                        {
                            LIDS = 0x00
                        }
                        Else
                        {
                            LIDS = 0x01
                        }

                        Return (ATIB) /* \_SB_.PCI0.PB4_.VGA_.ATIB */
                    }

                    Method (AFN0, 0, Serialized)
                    {
                        If ((MSKN & 0x01))
                        {
                            CreateBitField (PSBR, 0x00, PDSW)
                            PDSW = One
                            Notify (VGA, NCOD)
                        }
                    }

                    Method (AFN3, 2, Serialized)
                    {
                        If ((MSKN & 0x08))
                        {
                            Local0 = Arg0
                            SFPI = Local0
                            Local0 = Arg1
                            SFPG = Local0 &= 0x03
                            CreateBitField (PSBR, 0x03, PFPS)
                            PFPS = One
                            Notify (VGA, NCOD)
                        }
                    }

                    Method (AFN4, 1, Serialized)
                    {
                        If ((MSKN & 0x10))
                        {
                            Local0 = Arg0
                            Local1 = SSPS /* \_SB_.PCI0.PB4_.VGA_.SSPS */
                            SSPS = Local0
                            If ((Local0 == Local1)){}
                            Else
                            {
                                CreateBitField (PSBR, 0x04, PSPS)
                                PSPS = One
                                Notify (VGA, NCOD)
                            }
                        }
                    }

                    Method (AFN5, 0, Serialized)
                    {
                        If ((MSKN & 0x20))
                        {
                            CreateBitField (PSBR, 0x05, PDCC)
                            PDCC = One
                            Notify (VGA, NCOD)
                        }
                    }

                    Method (AFN6, 0, Serialized)
                    {
                        If ((MSKN & 0x40))
                        {
                            CreateBitField (PSBR, 0x06, PXPS)
                            PXPS = One
                            Notify (VGA, NCOD)
                        }
                    }

                    Method (AFN7, 1, Serialized)
                    {
                        If ((MSKN & 0x80))
                        {
                            CreateBitField (PSBR, 0x07, PBRT)
                            PBRT = One
                            CreateByteField (ATIB, 0x0C, BRTL)
                            BRTL = Arg0
                            Notify (VGA, NCOD)
                        }
                    }

                    Method (AF15, 0, NotSerialized)
                    {
                        P80H = 0xFF
                        CreateWordField (ATIB, 0x00, DNUM)
                        CreateWordField (ATIB, 0x02, DSZE)
                        DSZE = 0x08
                        ^^^LPC0.PHS3 (0x8D, 0x0F, ATIB)
                        ATIB = ^^^LPC0.INFO /* \_SB_.PCI0.LPC0.INFO */
                        Return (ATIB) /* \_SB_.PCI0.PB4_.VGA_.ATIB */
                    }

                    Name (AT00, Buffer (0xFF){})
                    Name (AT01, Buffer (0x03){})
                    Method (ATCS, 2, Serialized)
                    {
                        If ((Arg0 == 0x00))
                        {
                            ATC0 ()
                        }

                        If ((Arg0 == 0x01))
                        {
                            ATC1 ()
                        }

                        If ((Arg0 == 0x02))
                        {
                            ATC2 (Arg1)
                        }

                        If ((Arg0 == 0x03))
                        {
                            ATC3 ()
                        }

                        If ((Arg0 == 0x04))
                        {
                            ATC4 (Arg1)
                        }

                        Return (AT00) /* \_SB_.PCI0.PB4_.VGA_.AT00 */
                    }

                    Method (ATC0, 0, NotSerialized)
                    {
                        CreateWordField (AT00, 0x00, SZZE)
                        CreateWordField (AT00, 0x02, INTF)
                        CreateDWordField (AT00, 0x04, SUPP)
                        SZZE = 0x08
                        INTF = 0x01
                        SUPP = 0x0F
                    }

                    Method (ATC1, 0, Serialized)
                    {
                        CreateWordField (AT00, 0x00, SZZE)
                        CreateDWordField (AT00, 0x02, VFMK)
                        CreateDWordField (AT00, 0x06, FLAG)
                        CreateField (AT00, 0x30, 0x01, DOCK)
                        SZZE = 0x0A
                        VFMK = 0x01
                        FLAG = 0x00
                        DOCK = 0x01
                    }

                    Method (ATC2, 1, Serialized)
                    {
                        CreateField (Arg0, 0x10, 0x03, FUCC)
                        CreateField (Arg0, 0x13, 0x06, DEVV)
                        CreateByteField (Arg0, 0x03, BUSS)
                        CreateDWordField (Arg0, 0x04, VFMK)
                        CreateDWordField (Arg0, 0x06, FLAG)
                        CreateField (Arg0, 0x30, 0x01, ADVC)
                        CreateField (Arg0, 0x31, 0x01, WFCM)
                        CreateByteField (Arg0, 0x08, RQST)
                        CreateByteField (Arg0, 0x09, PFRQ)
                        CreateWordField (AT00, 0x00, SZZE)
                        CreateByteField (AT00, 0x02, RETV)
                        SZZE = 0x03
                        RETV = 0x01
                        0x02 = ALIB /* External reference */
                        Arg0
                        AT00
                    }

                    Method (ATC3, 0, Serialized)
                    {
                        CreateWordField (AT00, 0x00, SZZE)
                        CreateByteField (AT00, 0x02, RETV)
                        CreateWordField (AT01, 0x00, SZZB)
                        CreateByteField (AT01, 0x02, PSPP)
                        SZZE = 0x03
                        RETV = 0x01
                        SZZB = 0x03
                        PSPP = 0x01
                        0x03 = ALIB /* External reference */
                        AT01
                        AT00
                    }

                    Method (ATC4, 1, Serialized)
                    {
                        CreateField (Arg0, 0x10, 0x03, FUCC)
                        CreateField (Arg0, 0x13, 0x06, DEVV)
                        CreateByteField (Arg0, 0x03, BUSS)
                        CreateByteField (Arg0, 0x04, NULN)
                        CreateWordField (AT00, 0x00, SZZE)
                        CreateByteField (AT00, 0x02, NULM)
                        SZZE = 0x03
                        NULM = 0x01
                        0x04 = ALIB /* External reference */
                        Arg0
                        AT00
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        If ((^^^VGA.PXMX != 0x80000000))
                        {
                            Return (0x00)
                        }
                        ElseIf ((0x18 == XPPB ()))
                        {
                            If ((^^^VGA.PXEN != 0x80000000))
                            {
                                Return (0x00)
                            }
                            Else
                            {
                                Return (0x01)
                            }
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, 0x00, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }
                }

                Method (XPDT, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        Local0 = 0x00
                        Local2 = 0x00
                        While ((Local2 < 0x0F))
                        {
                            PSDC = One
                            Local4 = 0x01
                            Local5 = 0xC8
                            While ((Local4 && Local5))
                            {
                                Local6 = XPRD (0xA5)
                                Local6 &= 0x7F
                                If (((Local6 >= 0x10) && (Local6 != 0x7F)))
                                {
                                    Local4 = 0x00
                                }
                                Else
                                {
                                    Sleep (0x05)
                                    Local5--
                                }
                            }

                            If (!Local4)
                            {
                                Local5 = XPDL ()
                                If (Local5)
                                {
                                    XPRT ()
                                    Sleep (0x05)
                                    Local2++
                                }
                                Else
                                {
                                    ^^LPC0.INFO = (XPPB () << 0x03)
                                    ^^LPC0.PHS1 (0x87)
                                    If ((XPR2 () == Ones))
                                    {
                                        Local0 = 0x01
                                        Local2 = 0x10
                                    }
                                    Else
                                    {
                                        Local0 = 0x00
                                        Local2 = 0x10
                                    }
                                }
                            }
                            Else
                            {
                                Local2 = 0x10
                            }
                        }

                        If (!Local0)
                        {
                            XPDT (0x00)
                            XPPR (0x00)
                            Return (Zero)
                        }

                        Return (Ones)
                    }
                    Else
                    {
                        PSDC = One
                        Local7 = ^VGA.DVID /* \_SB_.PCI0.PB4_.VGA_.DVID */
                        Sleep (0x0A)
                        Local4 = 0x01
                        Local5 = 0x05
                        While ((Local4 && Local5))
                        {
                            Local6 = XPRD (0xA5)
                            Local6 &= 0x7F
                            If ((Local6 <= 0x04))
                            {
                                Local4 = 0x00
                            }
                            Else
                            {
                                Local7 = ^VGA.DVID /* \_SB_.PCI0.PB4_.VGA_.DVID */
                                Sleep (0x05)
                                Local5--
                            }
                        }

                        Return (Ones)
                    }
                }
            }

            Device (PB5)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x10
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKA, 
                                0x00
                            }
                        })
                    }
                }

                OperationRegion (XPEX, SystemMemory, 0xF8028100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (PCFG, PCI_Config, 0x00, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PSDC,   1, 
                        ,   2, 
                    PSDS,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    Local0 = Zero
                    If ((VC0S & 0x00020000))
                    {
                        Local0 = Ones
                    }

                    Return (Local0)
                }

                Method (XPRD, 1, NotSerialized)
                {
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB5_.XPID */
                    XPIR = 0x00
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = 0x00
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB5_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPCN, 0, NotSerialized)
                {
                    Local1 = 0x00
                    Local0 = XPPB ()
                    If ((0x04 > Local0))
                    {
                        Local1 = 0x00
                    }

                    If ((0x08 > Local0))
                    {
                        Local1 = 0x00010000
                    }

                    If ((0x0B > Local0))
                    {
                        Local1 = 0x00020000
                    }

                    Return (Local1)
                }

                Method (XPPD, 0, NotSerialized)
                {
                    Local0 = XPPB ()
                    Local2 = GPPX ()
                    Local3 = GFXM ()
                    Local1 = 0x00
                    If ((0x10 == Local0))
                    {
                        Local1 = 0xFFFF
                        If (Local3)
                        {
                            Local1 = 0x0F0F
                        }
                    }

                    If ((0x18 == Local0))
                    {
                        Local1 = 0xF0F0
                    }

                    If ((0x20 == Local0))
                    {
                        Local1 = 0x1010
                    }

                    If ((0x28 == Local0))
                    {
                        Local1 = 0x2020
                    }

                    If ((0x30 == Local0))
                    {
                        Local1 = 0x4040
                    }

                    If ((0x38 == Local0))
                    {
                        Local1 = 0x8080
                    }

                    If ((0x48 == Local0))
                    {
                        Local1 = 0x00
                        If ((0x02 == Local2))
                        {
                            Local1 = 0x0303
                        }

                        If ((0x03 == Local2))
                        {
                            Local1 = 0x0101
                        }
                    }

                    If ((0x50 == Local0))
                    {
                        Local1 = 0x00
                        If ((0x03 == Local2))
                        {
                            Local1 = 0x0202
                        }
                    }

                    Return (Local1)
                }

                Method (XPLP, 1, NotSerialized)
                {
                    Local1 = XPPD ()
                    If ((0x00 != Local1))
                    {
                        Local2 = NBXR ((0x65 + XPCN ()))
                        If (Arg0)
                        {
                            Local2 &= ~Local1
                        }
                        Else
                        {
                            Local2 |= Local1
                        }

                        NBXW ((0x65 + XPCN ()), Local2)
                    }
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB5_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = 0x01
                    While ((Local1 && Local2))
                    {
                        Sleep (0x01)
                        Local3 = LKST /* \_SB_.PCI0.PB5_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = 0x00
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPLL, 1, NotSerialized)
                {
                    Local0 = GFXM ()
                    Local1 = XPPB ()
                    Local2 = 0x00
                    If ((0x10 == Local1))
                    {
                        Local2 = 0x01
                        Local3 = 0x00770070
                        If (Local0)
                        {
                            Local3 = 0x00330030
                        }
                    }

                    If (((0x18 == Local1) && Local0))
                    {
                        Local2 = 0x01
                        Local3 = 0x00440040
                    }

                    Local0 = NBMR (0x07)
                    Local1 = NBXR (0x65)
                    If ((Local0 && 0x0201F000))
                    {
                        Local4 = 0x00440040
                        Local5 = Local4
                        If ((~Local1 && 0xF0F0))
                        {
                            Local5 = 0x00
                        }
                    }
                    Else
                    {
                        Local4 = 0x00110010
                        Local5 = Local4
                        If ((~Local1 && 0x0F0F))
                        {
                            Local5 = 0x00
                        }
                    }

                    If (Local2)
                    {
                        Local6 = (Local3 | Local4)
                        Local0 = (Local5 & Local4)
                        Local7 = (Local3 | Local0)
                        Local0 = NBMR (0x2E)
                        If (Arg0)
                        {
                            Local0 &= ~Local6
                        }
                        Else
                        {
                            Local0 |= Local7
                        }

                        NBMW (0x2E, Local0)
                    }
                }

                Method (XPPR, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        XPLL (0x01)
                        XPLP (0x01)
                        Sleep (0xC8)
                        XPTR ((XPPB () << 0x03), 0x01)
                        Sleep (0x14)
                    }
                    Else
                    {
                        XPTR ((XPPB () << 0x03), 0x00)
                        XPLP (0x00)
                        XPLL (0x00)
                    }

                    Return (Ones)
                }

                Device (XPDV)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, 0x00, 0xFF)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32, 
                        Offset (0xDC), 
                        DISF,   32
                    }
                }

                Method (XPDT, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        Local0 = 0x00
                        Local2 = 0x00
                        While ((Local2 < 0x0F))
                        {
                            PSDC = One
                            Local4 = 0x01
                            Local5 = 0xC8
                            While ((Local4 && Local5))
                            {
                                Local6 = XPRD (0xA5)
                                Local6 &= 0x7F
                                If (((Local6 >= 0x10) && (Local6 != 0x7F)))
                                {
                                    Local4 = 0x00
                                }
                                Else
                                {
                                    Sleep (0x05)
                                    Local5--
                                }
                            }

                            If (!Local4)
                            {
                                Local5 = XPDL ()
                                If (Local5)
                                {
                                    XPRT ()
                                    Sleep (0x05)
                                    Local2++
                                }
                                Else
                                {
                                    ^^LPC0.INFO = (XPPB () << 0x03)
                                    ^^LPC0.PHS1 (0x87)
                                    If ((XPR2 () == Ones))
                                    {
                                        Local0 = 0x01
                                        Local2 = 0x10
                                    }
                                    Else
                                    {
                                        Local0 = 0x00
                                        Local2 = 0x10
                                    }
                                }
                            }
                            Else
                            {
                                Local2 = 0x10
                            }
                        }

                        If (!Local0)
                        {
                            XPDT (0x00)
                            XPPR (0x00)
                            Return (Zero)
                        }

                        Return (Ones)
                    }
                    Else
                    {
                        PSDC = One
                        Local7 = ^XPDV.DVID /* \_SB_.PCI0.PB5_.XPDV.DVID */
                        Sleep (0x0A)
                        Local4 = 0x01
                        Local5 = 0x05
                        While ((Local4 && Local5))
                        {
                            Local6 = XPRD (0xA5)
                            Local6 &= 0x7F
                            If ((Local6 <= 0x04))
                            {
                                Local4 = 0x00
                            }
                            Else
                            {
                                Local7 = ^XPDV.DVID /* \_SB_.PCI0.PB5_.XPDV.DVID */
                                Sleep (0x05)
                                Local5--
                            }
                        }

                        Return (Ones)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x00)
                    }
                }
            }

            Device (PB6)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x11
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKB, 
                                0x00
                            }
                        })
                    }
                }

                OperationRegion (XPEX, SystemMemory, 0xF8030100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (PCFG, PCI_Config, 0x00, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PSDC,   1, 
                        ,   2, 
                    PSDS,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    Local0 = Zero
                    If ((VC0S & 0x00020000))
                    {
                        Local0 = Ones
                    }

                    Return (Local0)
                }

                Method (XPRD, 1, NotSerialized)
                {
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB6_.XPID */
                    XPIR = 0x00
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = 0x00
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB6_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPCN, 0, NotSerialized)
                {
                    Local1 = 0x00
                    Local0 = XPPB ()
                    If ((0x04 > Local0))
                    {
                        Local1 = 0x00
                    }

                    If ((0x08 > Local0))
                    {
                        Local1 = 0x00010000
                    }

                    If ((0x0B > Local0))
                    {
                        Local1 = 0x00020000
                    }

                    Return (Local1)
                }

                Method (XPPD, 0, NotSerialized)
                {
                    Local0 = XPPB ()
                    Local2 = GPPX ()
                    Local3 = GFXM ()
                    Local1 = 0x00
                    If ((0x10 == Local0))
                    {
                        Local1 = 0xFFFF
                        If (Local3)
                        {
                            Local1 = 0x0F0F
                        }
                    }

                    If ((0x18 == Local0))
                    {
                        Local1 = 0xF0F0
                    }

                    If ((0x20 == Local0))
                    {
                        Local1 = 0x1010
                    }

                    If ((0x28 == Local0))
                    {
                        Local1 = 0x2020
                    }

                    If ((0x30 == Local0))
                    {
                        Local1 = 0x4040
                    }

                    If ((0x38 == Local0))
                    {
                        Local1 = 0x8080
                    }

                    If ((0x48 == Local0))
                    {
                        Local1 = 0x00
                        If ((0x02 == Local2))
                        {
                            Local1 = 0x0303
                        }

                        If ((0x03 == Local2))
                        {
                            Local1 = 0x0101
                        }
                    }

                    If ((0x50 == Local0))
                    {
                        Local1 = 0x00
                        If ((0x03 == Local2))
                        {
                            Local1 = 0x0202
                        }
                    }

                    Return (Local1)
                }

                Method (XPLP, 1, NotSerialized)
                {
                    Local1 = XPPD ()
                    If ((0x00 != Local1))
                    {
                        Local2 = NBXR ((0x65 + XPCN ()))
                        If (Arg0)
                        {
                            Local2 &= ~Local1
                        }
                        Else
                        {
                            Local2 |= Local1
                        }

                        NBXW ((0x65 + XPCN ()), Local2)
                    }
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB6_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = 0x01
                    While ((Local1 && Local2))
                    {
                        Sleep (0x01)
                        Local3 = LKST /* \_SB_.PCI0.PB6_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = 0x00
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPLL, 1, NotSerialized)
                {
                    Local0 = GFXM ()
                    Local1 = XPPB ()
                    Local2 = 0x00
                    If ((0x10 == Local1))
                    {
                        Local2 = 0x01
                        Local3 = 0x00770070
                        If (Local0)
                        {
                            Local3 = 0x00330030
                        }
                    }

                    If (((0x18 == Local1) && Local0))
                    {
                        Local2 = 0x01
                        Local3 = 0x00440040
                    }

                    Local0 = NBMR (0x07)
                    Local1 = NBXR (0x65)
                    If ((Local0 && 0x0201F000))
                    {
                        Local4 = 0x00440040
                        Local5 = Local4
                        If ((~Local1 && 0xF0F0))
                        {
                            Local5 = 0x00
                        }
                    }
                    Else
                    {
                        Local4 = 0x00110010
                        Local5 = Local4
                        If ((~Local1 && 0x0F0F))
                        {
                            Local5 = 0x00
                        }
                    }

                    If (Local2)
                    {
                        Local6 = (Local3 | Local4)
                        Local0 = (Local5 & Local4)
                        Local7 = (Local3 | Local0)
                        Local0 = NBMR (0x2E)
                        If (Arg0)
                        {
                            Local0 &= ~Local6
                        }
                        Else
                        {
                            Local0 |= Local7
                        }

                        NBMW (0x2E, Local0)
                    }
                }

                Method (XPPR, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        XPLL (0x01)
                        XPLP (0x01)
                        Sleep (0xC8)
                        XPTR ((XPPB () << 0x03), 0x01)
                        Sleep (0x14)
                    }
                    Else
                    {
                        XPTR ((XPPB () << 0x03), 0x00)
                        XPLP (0x00)
                        XPLL (0x00)
                    }

                    Return (Ones)
                }

                Device (XPDV)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, 0x00, 0xFF)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32, 
                        Offset (0xDC), 
                        DISF,   32
                    }
                }

                Method (XPDT, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        Local0 = 0x00
                        Local2 = 0x00
                        While ((Local2 < 0x0F))
                        {
                            PSDC = One
                            Local4 = 0x01
                            Local5 = 0xC8
                            While ((Local4 && Local5))
                            {
                                Local6 = XPRD (0xA5)
                                Local6 &= 0x7F
                                If (((Local6 >= 0x10) && (Local6 != 0x7F)))
                                {
                                    Local4 = 0x00
                                }
                                Else
                                {
                                    Sleep (0x05)
                                    Local5--
                                }
                            }

                            If (!Local4)
                            {
                                Local5 = XPDL ()
                                If (Local5)
                                {
                                    XPRT ()
                                    Sleep (0x05)
                                    Local2++
                                }
                                Else
                                {
                                    ^^LPC0.INFO = (XPPB () << 0x03)
                                    ^^LPC0.PHS1 (0x87)
                                    If ((XPR2 () == Ones))
                                    {
                                        Local0 = 0x01
                                        Local2 = 0x10
                                    }
                                    Else
                                    {
                                        Local0 = 0x00
                                        Local2 = 0x10
                                    }
                                }
                            }
                            Else
                            {
                                Local2 = 0x10
                            }
                        }

                        If (!Local0)
                        {
                            XPDT (0x00)
                            XPPR (0x00)
                            Return (Zero)
                        }

                        Return (Ones)
                    }
                    Else
                    {
                        PSDC = One
                        Local7 = ^XPDV.DVID /* \_SB_.PCI0.PB6_.XPDV.DVID */
                        Sleep (0x0A)
                        Local4 = 0x01
                        Local5 = 0x05
                        While ((Local4 && Local5))
                        {
                            Local6 = XPRD (0xA5)
                            Local6 &= 0x7F
                            If ((Local6 <= 0x04))
                            {
                                Local4 = 0x00
                            }
                            Else
                            {
                                Local7 = ^XPDV.DVID /* \_SB_.PCI0.PB6_.XPDV.DVID */
                                Sleep (0x05)
                                Local5--
                            }
                        }

                        Return (Ones)
                    }
                }
            }

            Device (PB7)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x12
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKC, 
                                0x00
                            }
                        })
                    }
                }

                OperationRegion (XPEX, SystemMemory, 0xF8038100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (PCFG, PCI_Config, 0x00, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PSDC,   1, 
                        ,   2, 
                    PSDS,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    Local0 = Zero
                    If ((VC0S & 0x00020000))
                    {
                        Local0 = Ones
                    }

                    Return (Local0)
                }

                Method (XPRD, 1, NotSerialized)
                {
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB7_.XPID */
                    XPIR = 0x00
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = 0x00
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB7_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPCN, 0, NotSerialized)
                {
                    Local1 = 0x00
                    Local0 = XPPB ()
                    If ((0x04 > Local0))
                    {
                        Local1 = 0x00
                    }

                    If ((0x08 > Local0))
                    {
                        Local1 = 0x00010000
                    }

                    If ((0x0B > Local0))
                    {
                        Local1 = 0x00020000
                    }

                    Return (Local1)
                }

                Method (XPPD, 0, NotSerialized)
                {
                    Local0 = XPPB ()
                    Local2 = GPPX ()
                    Local3 = GFXM ()
                    Local1 = 0x00
                    If ((0x10 == Local0))
                    {
                        Local1 = 0xFFFF
                        If (Local3)
                        {
                            Local1 = 0x0F0F
                        }
                    }

                    If ((0x18 == Local0))
                    {
                        Local1 = 0xF0F0
                    }

                    If ((0x20 == Local0))
                    {
                        Local1 = 0x1010
                    }

                    If ((0x28 == Local0))
                    {
                        Local1 = 0x2020
                    }

                    If ((0x30 == Local0))
                    {
                        Local1 = 0x4040
                    }

                    If ((0x38 == Local0))
                    {
                        Local1 = 0x8080
                    }

                    If ((0x48 == Local0))
                    {
                        Local1 = 0x00
                        If ((0x02 == Local2))
                        {
                            Local1 = 0x0303
                        }

                        If ((0x03 == Local2))
                        {
                            Local1 = 0x0101
                        }
                    }

                    If ((0x50 == Local0))
                    {
                        Local1 = 0x00
                        If ((0x03 == Local2))
                        {
                            Local1 = 0x0202
                        }
                    }

                    Return (Local1)
                }

                Method (XPLP, 1, NotSerialized)
                {
                    Local1 = XPPD ()
                    If ((0x00 != Local1))
                    {
                        Local2 = NBXR ((0x65 + XPCN ()))
                        If (Arg0)
                        {
                            Local2 &= ~Local1
                        }
                        Else
                        {
                            Local2 |= Local1
                        }

                        NBXW ((0x65 + XPCN ()), Local2)
                    }
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB7_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = 0x01
                    While ((Local1 && Local2))
                    {
                        Sleep (0x01)
                        Local3 = LKST /* \_SB_.PCI0.PB7_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = 0x00
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPLL, 1, NotSerialized)
                {
                    Local0 = GFXM ()
                    Local1 = XPPB ()
                    Local2 = 0x00
                    If ((0x10 == Local1))
                    {
                        Local2 = 0x01
                        Local3 = 0x00770070
                        If (Local0)
                        {
                            Local3 = 0x00330030
                        }
                    }

                    If (((0x18 == Local1) && Local0))
                    {
                        Local2 = 0x01
                        Local3 = 0x00440040
                    }

                    Local0 = NBMR (0x07)
                    Local1 = NBXR (0x65)
                    If ((Local0 && 0x0201F000))
                    {
                        Local4 = 0x00440040
                        Local5 = Local4
                        If ((~Local1 && 0xF0F0))
                        {
                            Local5 = 0x00
                        }
                    }
                    Else
                    {
                        Local4 = 0x00110010
                        Local5 = Local4
                        If ((~Local1 && 0x0F0F))
                        {
                            Local5 = 0x00
                        }
                    }

                    If (Local2)
                    {
                        Local6 = (Local3 | Local4)
                        Local0 = (Local5 & Local4)
                        Local7 = (Local3 | Local0)
                        Local0 = NBMR (0x2E)
                        If (Arg0)
                        {
                            Local0 &= ~Local6
                        }
                        Else
                        {
                            Local0 |= Local7
                        }

                        NBMW (0x2E, Local0)
                    }
                }

                Method (XPPR, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        XPLL (0x01)
                        XPLP (0x01)
                        Sleep (0xC8)
                        XPTR ((XPPB () << 0x03), 0x01)
                        Sleep (0x14)
                    }
                    Else
                    {
                        XPTR ((XPPB () << 0x03), 0x00)
                        XPLP (0x00)
                        XPLL (0x00)
                    }

                    Return (Ones)
                }

                Device (XPDV)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, 0x00, 0xFF)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32, 
                        Offset (0xDC), 
                        DISF,   32
                    }
                }

                Method (XPDT, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        Local0 = 0x00
                        Local2 = 0x00
                        While ((Local2 < 0x0F))
                        {
                            PSDC = One
                            Local4 = 0x01
                            Local5 = 0xC8
                            While ((Local4 && Local5))
                            {
                                Local6 = XPRD (0xA5)
                                Local6 &= 0x7F
                                If (((Local6 >= 0x10) && (Local6 != 0x7F)))
                                {
                                    Local4 = 0x00
                                }
                                Else
                                {
                                    Sleep (0x05)
                                    Local5--
                                }
                            }

                            If (!Local4)
                            {
                                Local5 = XPDL ()
                                If (Local5)
                                {
                                    XPRT ()
                                    Sleep (0x05)
                                    Local2++
                                }
                                Else
                                {
                                    ^^LPC0.INFO = (XPPB () << 0x03)
                                    ^^LPC0.PHS1 (0x87)
                                    If ((XPR2 () == Ones))
                                    {
                                        Local0 = 0x01
                                        Local2 = 0x10
                                    }
                                    Else
                                    {
                                        Local0 = 0x00
                                        Local2 = 0x10
                                    }
                                }
                            }
                            Else
                            {
                                Local2 = 0x10
                            }
                        }

                        If (!Local0)
                        {
                            XPDT (0x00)
                            XPPR (0x00)
                            Return (Zero)
                        }

                        Return (Ones)
                    }
                    Else
                    {
                        PSDC = One
                        Local7 = ^XPDV.DVID /* \_SB_.PCI0.PB7_.XPDV.DVID */
                        Sleep (0x0A)
                        Local4 = 0x01
                        Local5 = 0x05
                        While ((Local4 && Local5))
                        {
                            Local6 = XPRD (0xA5)
                            Local6 &= 0x7F
                            If ((Local6 <= 0x04))
                            {
                                Local4 = 0x00
                            }
                            Else
                            {
                                Local7 = ^XPDV.DVID /* \_SB_.PCI0.PB7_.XPDV.DVID */
                                Sleep (0x05)
                                Local5--
                            }
                        }

                        Return (Ones)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x00)
                    }
                }
            }

            Device (XHC0)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x18, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    ^^LPC0.XSG0 = Arg0
                }
            }

            Device (OHC1)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                OperationRegion (SOH1, PCI_Config, 0x48, 0x02)
                Field (SOH1, AnyAcc, NoLock, Preserve)
                {
                    P0FR,   2, 
                    P1FR,   2, 
                    P2FR,   2, 
                    P3FR,   2, 
                    P4FR,   2, 
                    Offset (0x02)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x18, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    ^^LPC0.USG0 = Arg0
                }
            }

            Device (EHC1)
            {
                Name (_ADR, 0x00120002)  // _ADR: Address
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    ^^LPC0.ESG0 = Arg0
                }
            }

            Device (OHC2)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x18, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    ^^LPC0.USG1 = Arg0
                }

                Device (HUB0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (RPT1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0x00, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                    }

                    Device (RPT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0x00, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                    }

                    Device (RPT3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0x00, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                    }
                }
            }

            Device (EHC2)
            {
                Name (_ADR, 0x00130002)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x18, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    ^^LPC0.ESG1 = Arg0
                }

                Device (HUB0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (RPT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0x00, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                    }

                    Device (RPT3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0x00, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                    }

                    Device (RPT4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0x00, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                    }
                }
            }

            Device (OHC3)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x18, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    ^^LPC0.USG2 = Arg0
                }
            }

            Device (EHC3)
            {
                Name (_ADR, 0x00160002)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x18, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    ^^LPC0.ESG2 = Arg0
                }
            }

            Device (OHC4)
            {
                Name (_ADR, 0x00140005)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x18, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    ^^LPC0.USG3 = Arg0
                }
            }

            Device (SBAZ)
            {
                Name (_ADR, 0x00140002)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x19, 
                    0x04
                })
            }

            Device (GEC)
            {
                Name (_ADR, 0x00140006)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x1A, 
                    0x04
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        ^^SMB.E26C = 0x01
                    }
                }
            }

            Scope (\_SB.PCI0)
            {
                OperationRegion (SATC, SystemMemory, 0xF8088000, 0x0100)
                Field (SATC, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x0A), 
                    STCL,   16, 
                    Offset (0xFC), 
                    RMBA,   32
                }

                OperationRegion (RMEM, SystemMemory, RMBA, 0x0200)
                Field (RMEM, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    RMLN,   32
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                Name (B5EN, 0x00)
                Name (BA_5, 0x00)
                Name (SBAR, 0xF024C000)
                OperationRegion (SATX, PCI_Config, 0x00, 0x44)
                Field (SATX, AnyAcc, NoLock, Preserve)
                {
                    VIDI,   32, 
                    Offset (0x24), 
                    BA05,   32, 
                    Offset (0x40), 
                    WREN,   1, 
                    Offset (0x42), 
                    DISP,   6
                }

                Field (SATX, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DIS0,   1, 
                    DIS1,   1, 
                    DIS2,   1, 
                    DIS3,   1, 
                    DIS4,   1, 
                    DIS5,   1
                }

                Method (GBAA, 0, Serialized)
                {
                    BA_5 = BA05 /* \_SB_.PCI0.SATA.BA05 */
                    If (((BA_5 == 0xFFFFFFFF) || (STCL != 0x0101)))
                    {
                        B5EN = 0x00
                        Return (SBAR) /* \_SB_.PCI0.SATA.SBAR */
                    }
                    Else
                    {
                        B5EN = 0x01
                        Return (BA_5) /* \_SB_.PCI0.SATA.BA_5 */
                    }
                }

                OperationRegion (BAR5, SystemMemory, GBAA (), 0x1000)
                Field (BAR5, AnyAcc, NoLock, Preserve)
                {
                    NPOT,   5, 
                    Offset (0x0C), 
                    PI,     6, 
                    Offset (0x120), 
                        ,   7, 
                    BSY0,   1, 
                    Offset (0x128), 
                    DET0,   4, 
                    Offset (0x129), 
                    IPM0,   4, 
                    Offset (0x1A0), 
                        ,   7, 
                    BSY1,   1, 
                    Offset (0x1A8), 
                    DET1,   4, 
                    Offset (0x1A9), 
                    IPM1,   4, 
                    Offset (0x220), 
                        ,   7, 
                    BSY2,   1, 
                    Offset (0x228), 
                    DET2,   4, 
                    Offset (0x229), 
                    IPM2,   4, 
                    Offset (0x2A0), 
                        ,   7, 
                    BSY3,   1, 
                    Offset (0x2A8), 
                    DET3,   4, 
                    Offset (0x2A9), 
                    IPM3,   4, 
                    Offset (0x320), 
                        ,   7, 
                    BSY4,   1, 
                    Offset (0x328), 
                    DET4,   4, 
                    Offset (0x329), 
                    IPM4,   4, 
                    Offset (0x3A0), 
                        ,   7, 
                    BSY5,   1, 
                    Offset (0x3A8), 
                    DET5,   4, 
                    Offset (0x3A9), 
                    IPM5,   4
                }

                Field (BAR5, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x0C), 
                    PI0,    1, 
                    PI1,    1, 
                    PI2,    1, 
                    PI3,    1, 
                    PI4,    1, 
                    PI5,    1
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    GBAA ()
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SATA.PRID.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SPTM = Arg0
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        GBAA ()
                        If ((((TPOS >= 0x40) || (TPOS == 0x04)) && B5EN))
                        {
                            If (IPM0)
                            {
                                Local0 = 0x32
                                While (((BSY0 == 0x01) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }

                            If (IPM2)
                            {
                                Local0 = 0x32
                                While (((BSY2 == 0x01) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == 0x00))
                            {
                                Return (0x00)
                            }

                            If ((DET0 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Name (S12P, 0x00)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((TPOS < 0x40) && (TPOS != 0x04)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY0 == 0x01) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == 0x00))
                            {
                                Return (0x00)
                            }

                            If ((DET2 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Name (S12P, 0x00)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((TPOS < 0x40) && (TPOS != 0x04)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY2 == 0x01) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SATA.SECD.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SPTM = Arg0
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        GBAA ()
                        If ((((TPOS >= 0x40) || (TPOS == 0x04)) && B5EN))
                        {
                            If (IPM1)
                            {
                                Local0 = 0x32
                                While (((BSY1 == 0x01) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }

                            If (IPM3)
                            {
                                Local0 = 0x32
                                While (((BSY3 == 0x01) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == 0x00))
                            {
                                Return (0x00)
                            }

                            If ((DET1 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((TPOS < 0x40) && (TPOS != 0x04)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY1 == 0x01) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == 0x00))
                            {
                                Return (0x00)
                            }

                            If ((DET3 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((TPOS < 0x40) && (TPOS != 0x04)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY3 == 0x01) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }
                }

                Method (ENP, 2, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        DIS0 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x01))
                    {
                        DIS1 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        DIS2 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        DIS3 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x04))
                    {
                        DIS4 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x05))
                    {
                        DIS5 = ~Arg1
                    }

                    WREN = 0x01
                    If ((Arg0 == 0x00))
                    {
                        PI0 = Arg1
                    }
                    ElseIf ((Arg0 == 0x01))
                    {
                        PI1 = Arg1
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        PI2 = Arg1
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        PI3 = Arg1
                    }
                    ElseIf ((Arg0 == 0x04))
                    {
                        PI4 = Arg1
                    }
                    ElseIf ((Arg0 == 0x05))
                    {
                        PI5 = Arg1
                    }

                    If ((DISP == 0x3F))
                    {
                        PI0 = 0x01
                    }
                    ElseIf ((DIS0 && ((DISP & 0x3E) ^ 0x3E)))
                    {
                        PI0 = 0x00
                    }

                    Local0 = PI /* \_SB_.PCI0.SATA.PI__ */
                    Local1 = 0x00
                    While (Local0)
                    {
                        If ((Local0 & 0x01))
                        {
                            Local1++
                        }

                        Local0 >>= 0x01
                    }

                    NPOT = Local1--
                    WREN = 0x00
                }

                Device (PRT1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (DIS, 0, NotSerialized)
                    {
                        ENP (0x01, 0x00)
                    }

                    Method (ENA, 0, NotSerialized)
                    {
                        ENP (0x01, 0x01)
                    }

                    Device (ODD)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                    }
                }

                Device (PRT2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Device (ESAT)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                    }
                }

                Device (PRT3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Device (ESAT)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                    }
                }

                Device (PRT4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Device (ESAT)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                    }
                }

                Device (PRT5)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Device (ESAT)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                    }
                }
            }

            Device (SMB)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (SBRV, PCI_Config, 0x08, 0x0100)
                Field (SBRV, AnyAcc, NoLock, Preserve)
                {
                    RVID,   8, 
                    Offset (0x0C), 
                    HPBS,   32, 
                    Offset (0x3B), 
                        ,   3, 
                    HIHP,   1, 
                    Offset (0x5A), 
                    I1F,    1, 
                    I12F,   1, 
                    Offset (0x5C), 
                        ,   10, 
                    HPET,   1, 
                    Offset (0x7A), 
                        ,   2, 
                    G31O,   1, 
                    Offset (0xD9), 
                        ,   6, 
                    ACIR,   1
                }

                OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
                Field (PMIO, ByteAcc, NoLock, Preserve)
                {
                    INPM,   8, 
                    DAPM,   8
                }

                IndexField (INPM, DAPM, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x24), 
                    MMSO,   32, 
                    Offset (0x60), 
                    P1EB,   16
                }

                OperationRegion (ERMM, SystemMemory, MMSO, 0x1000)
                Field (ERMM, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x100), 
                        ,   5, 
                    P01E,   1, 
                    P01O,   1, 
                    P01I,   1, 
                    Offset (0x105), 
                        ,   5, 
                    P06E,   1, 
                    P06O,   1, 
                    P06I,   1, 
                        ,   5, 
                    P07E,   1, 
                    P07O,   1, 
                    P07I,   1, 
                    Offset (0x10A), 
                        ,   5, 
                    P0BE,   1, 
                    P0BO,   1, 
                    P0BI,   1, 
                        ,   5, 
                    P0CE,   1, 
                    P0CO,   1, 
                    P0CI,   1, 
                        ,   5, 
                    P0DE,   1, 
                    P0DO,   1, 
                    P0DI,   1, 
                        ,   5, 
                    P0EE,   1, 
                    P0EO,   1, 
                    P0EI,   1, 
                        ,   5, 
                    P0FE,   1, 
                    P0FO,   1, 
                    P0FI,   1, 
                        ,   5, 
                    P10E,   1, 
                    P10O,   1, 
                    P10I,   1, 
                    Offset (0x113), 
                        ,   5, 
                    P14E,   1, 
                    P14O,   1, 
                    P14I,   1, 
                        ,   5, 
                    P15E,   1, 
                    P15O,   1, 
                    P15I,   1, 
                        ,   5, 
                    P16E,   1, 
                    P16O,   1, 
                    P16I,   1, 
                        ,   5, 
                    P17E,   1, 
                    P17O,   1, 
                    P17I,   1, 
                    Offset (0x11A), 
                        ,   5, 
                    P1BE,   1, 
                    P1BO,   1, 
                    P1BI,   1, 
                        ,   5, 
                    P1CE,   1, 
                    P1CO,   1, 
                    P1CI,   1, 
                    Offset (0x11F), 
                        ,   5, 
                    P20E,   1, 
                    P20O,   1, 
                    P20I,   1, 
                        ,   5, 
                    P21E,   1, 
                    P21O,   1, 
                    P21I,   1, 
                        ,   5, 
                    P22E,   1, 
                    P22O,   1, 
                    P22I,   1, 
                        ,   5, 
                    P23E,   1, 
                    P23O,   1, 
                    P23I,   1, 
                    Offset (0x128), 
                        ,   1, 
                    P29H,   1, 
                    P29S,   1, 
                    P29U,   1, 
                    P29D,   1, 
                    P29E,   1, 
                    P29O,   1, 
                    P29I,   1, 
                    Offset (0x12B), 
                        ,   5, 
                    P2CE,   1, 
                    P2CO,   1, 
                    P2CI,   1, 
                        ,   5, 
                    P2DE,   1, 
                    P2DO,   1, 
                    P2DI,   1, 
                        ,   1, 
                    P2EH,   1, 
                    P2ES,   1, 
                    P2EU,   1, 
                    P2ED,   1, 
                    P2EE,   1, 
                    P2EO,   1, 
                    P2EI,   1, 
                    Offset (0x131), 
                        ,   5, 
                    P32E,   1, 
                    P32O,   1, 
                    P32I,   1, 
                        ,   5, 
                    P33E,   1, 
                    P33O,   1, 
                    P33I,   1, 
                        ,   5, 
                    P34E,   1, 
                    WLON,   1, 
                    P34I,   1, 
                        ,   5, 
                    P35E,   1, 
                    DBTN,   1, 
                    P35I,   1, 
                    Offset (0x136), 
                        ,   5, 
                    P37E,   1, 
                    BTON,   1, 
                    P37I,   1, 
                    Offset (0x138), 
                        ,   5, 
                    P39E,   1, 
                    P39O,   1, 
                    P39I,   1, 
                    Offset (0x13A), 
                        ,   5, 
                    P3BE,   1, 
                    P3BO,   1, 
                    P3BI,   1, 
                        ,   5, 
                    P3CE,   1, 
                    CDON,   1, 
                    P3CI,   1, 
                    PO3D,   8, 
                        ,   5, 
                    P3EE,   1, 
                    WWLO,   1, 
                    P3EI,   1, 
                        ,   1, 
                    P3FH,   1, 
                    P3FS,   1, 
                    P3FU,   1, 
                    P3FD,   1, 
                    P3FE,   1, 
                    P3FO,   1, 
                    P3FI,   1, 
                        ,   1, 
                    P40H,   1, 
                    P40S,   1, 
                    P40U,   1, 
                    P40D,   1, 
                    P40E,   1, 
                    P40O,   1, 
                    P40I,   1, 
                        ,   5, 
                    P41E,   1, 
                    P41O,   1, 
                    P41I,   1, 
                        ,   5, 
                    P42E,   1, 
                    P42O,   1, 
                    P42I,   1, 
                    Offset (0x164), 
                        ,   7, 
                    GE05,   1, 
                        ,   5, 
                    P66E,   1, 
                    P66O,   1, 
                    P66I,   1, 
                    Offset (0x16A), 
                    GE11,   8, 
                        ,   5, 
                    P6CE,   1, 
                    P6CO,   1, 
                    P6CI,   1, 
                    Offset (0x16E), 
                        ,   7, 
                    GE15,   1, 
                        ,   7, 
                    GE16,   1, 
                    Offset (0x173), 
                        ,   7, 
                    GE20,   1, 
                    GE21,   8, 
                        ,   7, 
                    GE22,   1, 
                    Offset (0x1A5), 
                    POA6,   8, 
                    Offset (0x1A9), 
                        ,   5, 
                    PAAE,   1, 
                    PAAO,   1, 
                    PAAI,   1, 
                    Offset (0x1AE), 
                        ,   5, 
                    PAFE,   1, 
                    PAFO,   1, 
                    PAFI,   1, 
                        ,   5, 
                    PB0E,   1, 
                    PB0O,   1, 
                    PB0I,   1, 
                        ,   5, 
                    PB1E,   1, 
                    PB1O,   1, 
                    PB1I,   1, 
                        ,   5, 
                    PB2E,   1, 
                    PB2O,   1, 
                    PB2I,   1, 
                        ,   5, 
                    PB3E,   1, 
                    PB3O,   1, 
                    PB3I,   1, 
                        ,   5, 
                    PB4E,   1, 
                    PB4O,   1, 
                    PB4I,   1, 
                        ,   5, 
                    PB5E,   1, 
                    PB5O,   1, 
                    PB5I,   1, 
                        ,   5, 
                    PB6E,   1, 
                    PB6O,   1, 
                    PB6I,   1, 
                        ,   5, 
                    PB7E,   1, 
                    WWON,   1, 
                    PB7I,   1, 
                        ,   5, 
                    PB8E,   1, 
                    WLLO,   1, 
                    PB8I,   1, 
                    Offset (0x1BE), 
                        ,   5, 
                    PBFE,   1, 
                    PBFO,   1, 
                    PBFI,   1, 
                        ,   5, 
                    PC0E,   1, 
                    PC0O,   1, 
                    PC0I,   1, 
                    Offset (0x1C4), 
                        ,   5, 
                    PC5E,   1, 
                    PC5O,   1, 
                    PC5I,   1, 
                    Offset (0x1C6), 
                        ,   5, 
                    PC7E,   1, 
                    PC7O,   1, 
                    PC7I,   1, 
                        ,   5, 
                    PC8E,   1, 
                    PC8O,   1, 
                    PC8I,   1, 
                    Offset (0x1FF), 
                        ,   1, 
                    E01S,   1, 
                        ,   3, 
                    E05S,   1, 
                        ,   9, 
                    E15S,   1, 
                    E16S,   1, 
                        ,   5, 
                    E22S,   1, 
                    Offset (0x203), 
                        ,   1, 
                    E01E,   1, 
                        ,   3, 
                    E05E,   1, 
                        ,   9, 
                    E15E,   1, 
                    E16E,   1, 
                        ,   5, 
                    E22E,   1, 
                    Offset (0x207), 
                        ,   1, 
                    E01C,   1, 
                        ,   3, 
                    E05C,   1, 
                        ,   9, 
                    E15C,   1, 
                    E16C,   1, 
                        ,   3, 
                    E20C,   1, 
                    E21C,   1, 
                    E22C,   1, 
                        ,   3, 
                    E26C,   1, 
                    Offset (0x20B), 
                        ,   1, 
                    E01L,   1, 
                        ,   3, 
                    E05L,   1, 
                        ,   9, 
                    E15L,   1, 
                    E16L,   1, 
                        ,   5, 
                    E22L,   1, 
                    Offset (0x287), 
                        ,   1, 
                    CLPS,   1, 
                    Offset (0x298), 
                        ,   7, 
                    G15A,   1, 
                    Offset (0x2AB), 
                        ,   6, 
                    SRBT,   2, 
                    Offset (0x2AF), 
                        ,   2, 
                    SLPS,   2, 
                    Offset (0x2B1), 
                        ,   4, 
                    SPBT,   2, 
                    Offset (0x361), 
                        ,   6, 
                    MT3A,   1, 
                    Offset (0x376), 
                    EPNM,   1, 
                    DPPF,   1, 
                    Offset (0x3BA), 
                        ,   6, 
                    PWDE,   1, 
                    Offset (0x3BD), 
                        ,   5, 
                    ALLS,   1, 
                    Offset (0x3C7), 
                        ,   2, 
                    TFTE,   1, 
                    Offset (0x3DE), 
                    BLNK,   2, 
                    Offset (0x3EF), 
                    PHYD,   1, 
                        ,   1, 
                    RSTU,   1, 
                    US5R,   1, 
                    Offset (0x3FF), 
                    F0CT,   8, 
                    F0MS,   8, 
                    F0FQ,   8, 
                    F0LD,   8, 
                    F0MD,   8, 
                    F0MP,   8, 
                    LT0L,   8, 
                    LT0H,   8, 
                    MT0L,   8, 
                    MT0H,   8, 
                    HT0L,   8, 
                    HT0H,   8, 
                    LRG0,   8, 
                    LHC0,   8, 
                    Offset (0x40F), 
                    F1CT,   8, 
                    F1MS,   8, 
                    F1FQ,   8, 
                    F1LD,   8, 
                    F1MD,   8, 
                    F1MP,   8, 
                    LT1L,   8, 
                    LT1H,   8, 
                    MT1L,   8, 
                    MT1H,   8, 
                    HT1L,   8, 
                    HT1H,   8, 
                    LRG1,   8, 
                    LHC1,   8, 
                    Offset (0x41F), 
                    F2CT,   8, 
                    F2MS,   8, 
                    F2FQ,   8, 
                    F2LD,   8, 
                    F2MD,   8, 
                    F2MP,   8, 
                    LT2L,   8, 
                    LT2H,   8, 
                    MT2L,   8, 
                    MT2H,   8, 
                    HT2L,   8, 
                    HT2H,   8, 
                    LRG2,   8, 
                    LHC2,   8, 
                    Offset (0x42F), 
                    F3CT,   8, 
                    F3MS,   8, 
                    F3FQ,   8, 
                    F3LD,   8, 
                    F3MD,   8, 
                    F3MP,   8, 
                    LT3L,   8, 
                    LT3H,   8, 
                    MT3L,   8, 
                    MT3H,   8, 
                    HT3L,   8, 
                    HT3H,   8, 
                    LRG3,   8, 
                    LHC3,   8, 
                    Offset (0x6FF), 
                    SEC,    8, 
                    Offset (0x701), 
                    MIN,    8, 
                    Offset (0xD00), 
                    MX01,   8, 
                    Offset (0xD06), 
                    MX07,   8, 
                    Offset (0xD0D), 
                    MX14,   8, 
                    MX15,   8, 
                    MX16,   8, 
                    Offset (0xD14), 
                    MX21,   8, 
                    MX22,   8, 
                    MX23,   8, 
                    Offset (0xD1A), 
                    MX27,   8, 
                    MX28,   8, 
                    Offset (0xD1F), 
                    MX32,   8, 
                    MX33,   8, 
                    MX34,   8, 
                    Offset (0xD28), 
                    MX41,   8, 
                    Offset (0xD2B), 
                    MX44,   8, 
                    Offset (0xD32), 
                    MX51,   8, 
                    Offset (0xD34), 
                    MX53,   8, 
                    Offset (0xD38), 
                    MX57,   8, 
                    MX58,   8, 
                    MX59,   8, 
                    Offset (0xD41), 
                    MX66,   8, 
                    Offset (0xD65), 
                    M102,   8, 
                    Offset (0xD6B), 
                    M108,   8, 
                    Offset (0xDA9), 
                    M170,   8, 
                    Offset (0xDAE), 
                    M175,   8, 
                    M176,   8, 
                    Offset (0xDB3), 
                    M180,   8, 
                    M181,   8, 
                    M182,   8, 
                    Offset (0xDC4), 
                    M197,   8, 
                    Offset (0xDC6), 
                    M199,   8, 
                    M200,   8, 
                    Offset (0xDFF), 
                    MS00,   8, 
                    MS01,   8, 
                    MS02,   8, 
                    MS03,   8, 
                    MS04,   8, 
                    Offset (0xE3F), 
                    MS40,   8, 
                    Offset (0xE80), 
                        ,   2, 
                    ECES,   1
                }

                OperationRegion (P1E0, SystemIO, P1EB, 0x04)
                Field (P1E0, ByteAcc, NoLock, Preserve)
                {
                        ,   14, 
                    PEWS,   1, 
                    WSTA,   1, 
                        ,   14, 
                    PEWD,   1
                }

                Method (TRMD, 0, NotSerialized)
                {
                    TFTE = Zero
                }

                Method (HTCD, 0, NotSerialized)
                {
                }

                OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
                Field (ABIO, DWordAcc, NoLock, Preserve)
                {
                    INAB,   32, 
                    DAAB,   32
                }

                Method (RDAB, 1, NotSerialized)
                {
                    INAB = Arg0
                    Return (DAAB) /* \_SB_.PCI0.SMB_.DAAB */
                }

                Method (WTAB, 2, NotSerialized)
                {
                    INAB = Arg0
                    DAAB = Arg1
                }

                Method (RWAB, 3, NotSerialized)
                {
                    Local0 = (RDAB (Arg0) & Arg1)
                    Local1 = (Local0 | Arg2)
                    WTAB (Arg0, Local1)
                }

                Method (CABR, 3, NotSerialized)
                {
                    Local0 = (Arg0 << 0x05)
                    Local1 = (Local0 + Arg1)
                    Local2 = (Local1 << 0x18)
                    Local3 = (Local2 + Arg2)
                    Return (Local3)
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
                Field (PIRQ, ByteAcc, NoLock, Preserve)
                {
                    PIID,   8, 
                    PIDA,   8
                }

                IndexField (PIID, PIDA, ByteAcc, NoLock, Preserve)
                {
                    PIRA,   8, 
                    PIRB,   8, 
                    PIRC,   8, 
                    PIRD,   8, 
                    PIRE,   8, 
                    PIRF,   8, 
                    PIRG,   8, 
                    PIRH,   8, 
                    Offset (0x10), 
                    PIRS,   8, 
                    Offset (0x13), 
                    HDAD,   8, 
                    Offset (0x15), 
                    GEC,    8, 
                    Offset (0x30), 
                    USB1,   8, 
                    USB2,   8, 
                    USB3,   8, 
                    USB4,   8, 
                    USB5,   8, 
                    USB6,   8, 
                    USB7,   8, 
                    Offset (0x40), 
                    IDE,    8, 
                    SATA,   8, 
                    Offset (0x50), 
                    GPP0,   8, 
                    GPP1,   8, 
                    GPP2,   8, 
                    GPP3,   8
                }

                Name (IPRS, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {10,11}
                })
                Name (UPRS, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Exclusive, )
                        {3,4,5,7}
                })
                Method (DSPI, 0, NotSerialized)
                {
                    INTA (0x1F)
                    INTB (0x1F)
                    INTC (0x1F)
                    INTD (0x1F)
                    PIRE = 0x1F
                    PIRF = 0x1F
                    PIRG = 0x1F
                    PIRH = 0x1F
                }

                Method (INTA, 1, NotSerialized)
                {
                    PIRA = Arg0
                    HDAD = Arg0
                    GEC = Arg0
                    GPP0 = Arg0
                }

                Method (INTB, 1, NotSerialized)
                {
                    PIRB = Arg0
                    USB2 = Arg0
                    USB4 = Arg0
                    USB6 = Arg0
                    GPP1 = Arg0
                    IDE = Arg0
                }

                Method (INTC, 1, NotSerialized)
                {
                    PIRC = Arg0
                    USB1 = Arg0
                    USB3 = Arg0
                    USB5 = Arg0
                    USB7 = Arg0
                    GPP2 = Arg0
                }

                Method (INTD, 1, NotSerialized)
                {
                    PIRD = Arg0
                    SATA = Arg0
                    GPP3 = Arg0
                }

                Device (LNKA)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRA)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTA (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRA) /* \_SB_.PCI0.LPC0.PIRA */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTA (Local0)
                    }
                }

                Device (LNKB)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRB)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTB (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRB) /* \_SB_.PCI0.LPC0.PIRB */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTB (Local0)
                    }
                }

                Device (LNKC)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRC)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTC (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRC) /* \_SB_.PCI0.LPC0.PIRC */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTC (Local0)
                    }
                }

                Device (LNKD)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRD)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTD (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRD) /* \_SB_.PCI0.LPC0.PIRD */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTD (Local0)
                    }
                }

                Device (LNKE)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRE)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRE = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRE) /* \_SB_.PCI0.LPC0.PIRE */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRE = Local0
                    }
                }

                Device (LNKF)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRF)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRF = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRF) /* \_SB_.PCI0.LPC0.PIRF */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRF = Local0
                    }
                }

                Device (LNKG)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRG)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRG = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRG) /* \_SB_.PCI0.LPC0.PIRG */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRG = Local0
                    }
                }

                Device (LNKH)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x08)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRH)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRH = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRH) /* \_SB_.PCI0.LPC0.PIRH */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRH = Local0
                    }
                }

                OperationRegion (LPCR, PCI_Config, 0x04, 0x42)
                Field (LPCR, ByteAcc, NoLock, Preserve)
                {
                    PCMD,   2, 
                    Offset (0x40), 
                    CMA0,   1, 
                    CMA1,   1, 
                    CMA2,   1, 
                    CMA3,   1, 
                    CMA4,   1, 
                    CMA5,   1, 
                    CMA6,   1, 
                    CMA7,   1, 
                    CMB0,   1, 
                    CMB1,   1, 
                    CMB2,   1, 
                    CMB3,   1, 
                    CMB4,   1, 
                    CMB5,   1, 
                    CMB6,   1, 
                    CMB7,   1
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x1F,               // Length
                            )
                        IO (Decode16,
                            0x040B,             // Range Minimum
                            0x040B,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {8}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TIME)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {0}
                    })
                }

                Device (KBC0)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {1}
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                    }
                }

                Device (MSE0)
                {
                    Name (_HID, EisaId ("LEN0026"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {12}
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                    }

                    Name (MSP0, 0x0F)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (MSP0) /* \_SB_.PCI0.LPC0.MSE0.MSP0 */
                    }
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0530,             // Range Minimum
                            0x0530,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x28,               // Length
                            )
                        IO (Decode16,
                            0x0830,             // Range Minimum
                            0x0830,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0840,             // Range Minimum
                            0x0840,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0B00,             // Range Minimum
                            0x0B00,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0B20,             // Range Minimum
                            0x0B20,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD2,             // Range Minimum
                            0x0CD2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD4,             // Range Minimum
                            0x0CD4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD6,             // Range Minimum
                            0x0CD6,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD8,             // Range Minimum
                            0x0CD8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0CF9,             // Range Minimum
                            0x0CF9,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                            0x0000,             // Granularity
                            0x8100,             // Range Minimum
                            0x81FF,             // Range Maximum
                            0x0000,             // Translation Offset
                            0x0100,             // Length
                            ,, , TypeStatic, DenseTranslation)
                        WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                            0x0000,             // Granularity
                            0x8200,             // Range Minimum
                            0x82FF,             // Range Maximum
                            0x0000,             // Translation Offset
                            0x0100,             // Length
                            ,, , TypeStatic, DenseTranslation)
                    })
                }

                OperationRegion (LPCS, PCI_Config, 0xA0, 0x04)
                Field (LPCS, DWordAcc, NoLock, Preserve)
                {
                    SPBA,   32
                }

                Device (MEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (MSRC, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFFE00000,         // Address Base
                            0x00200000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y1C)
                        Memory32Fixed (ReadWrite,
                            0xFEC10000,         // Address Base
                            0x00000020,         // Address Length
                            _Y1D)
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED61000,         // Address Base
                            0x00000400,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED80000,         // Address Base
                            0x00001000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y1C._BAS, BARX)  // _BAS: Base Address
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y1C._LEN, GALN)  // _LEN: Length
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y1D._BAS, MB01)  // _BAS: Base Address
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y1D._LEN, ML01)  // _LEN: Length
                        Local0 = SPBA /* \_SB_.PCI0.LPC0.SPBA */
                        MB01 = (Local0 & 0xFFFFFFE0)
                        Local0 = NBBA /* \_SB_.PCI0.NBBA */
                        If (Local0)
                        {
                            GALN = 0x1000
                            BARX = (Local0 & 0xFFFFFFF0)
                        }

                        Return (MSRC) /* \_SB_.PCI0.LPC0.MEM_.MSRC */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Mutex (PSMX, 0x00)
                OperationRegion (SMI0, SystemIO, 0xB0, 0x01)
                Field (SMI0, AnyAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                OperationRegion (SMI1, SystemMemory, 0xDD980018, 0x00001000)
                Field (SMI1, AnyAcc, NoLock, Preserve)
                {
                    BCMD,   16, 
                    DID,    32, 
                    INFO,   1024
                }

                Field (SMI1, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    INF0,   8, 
                    INF1,   8, 
                    INF2,   8, 
                    INF3,   8, 
                    INF4,   8, 
                    INF5,   8, 
                    INF6,   8, 
                    INF7,   8
                }

                Field (SMI1, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x06), 
                    INFD,   32
                }

                Method (PHS1, 1, NotSerialized)
                {
                    BCMD = Arg0
                    SMIC = 0xAB
                }

                Method (PHS2, 2, NotSerialized)
                {
                    Acquire (PSMX, 0xFFFF)
                    DID = 0x00
                    INFO = Arg1
                    BCMD = Arg0
                    SMIC = 0xAB
                    Local0 = INFO /* \_SB_.PCI0.LPC0.INFO */
                    Release (PSMX)
                    BCMD = 0x00
                    Return (Local0)
                }

                Method (PHS3, 3, NotSerialized)
                {
                    Acquire (PSMX, 0xFFFF)
                    BCMD = Arg0
                    DID = Arg1
                    INFO = Arg2
                    SMIC = 0xAB
                    Release (PSMX)
                }

                OperationRegion (QNVS, SystemMemory, 0xDEE31018, 0x1000)
                Field (QNVS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x300), 
                    WOLN,   8, 
                    BRNS,   8, 
                    ACST,   1, 
                    BTLA,   1, 
                    WLLA,   1, 
                        ,   1, 
                        ,   1, 
                    TMCM,   1, 
                    LIDF,   1, 
                    Offset (0x303), 
                    USBP,   8, 
                    USG0,   1, 
                    USG1,   1, 
                    USG2,   1, 
                    USG3,   1, 
                    ESG0,   1, 
                    ESG1,   1, 
                    ESG2,   1, 
                    ESG3,   1, 
                    LANO,   1, 
                    VCDB,   1, 
                    C4WR,   1, 
                    C4AC,   1, 
                    OSC4,   1, 
                    SPEN,   1, 
                    SCRM,   1, 
                    ODDS,   1, 
                    BTMD,   1, 
                    WLNP,   1, 
                    WANP,   1, 
                    MCMU,   1, 
                    CMAB,   1, 
                    WOFF,   1, 
                    CMAT,   1, 
                    BTHA,   1, 
                    CBCI,   1, 
                    CWAI,   1, 
                    CBTP,   1, 
                    WWAP,   1, 
                    WANA,   1, 
                    WWNA,   1, 
                    WALA,   1, 
                    BTHG,   1, 
                    OSFG,   1, 
                    BATB,   1, 
                    SWDT,   1, 
                    Offset (0x309), 
                    Offset (0x30A), 
                    TJ90,   8, 
                    SXFG,   8, 
                    FTPS,   8, 
                    CWAC,   1, 
                    CWAS,   1, 
                    CWUE,   1, 
                    CWUS,   1, 
                    C4NA,   1, 
                    Offset (0x30E), 
                    BFAD,   1, 
                    Offset (0x30F), 
                    ILID,   8, 
                    XSG0,   1, 
                    XSG1,   1, 
                    Offset (0x311), 
                    Offset (0x312), 
                    Offset (0x313), 
                    Offset (0x314), 
                    GCDE,   4, 
                    DADD,   4, 
                    IPMS,   8, 
                    IPMB,   120, 
                    IPMR,   24, 
                    IPMO,   24, 
                    IPMA,   8, 
                    LIDX,   1, 
                    Offset (0x32D), 
                    Offset (0x32E), 
                    DPP0,   1, 
                    DPP1,   1, 
                    DPP2,   1, 
                    DPP3,   1, 
                    DPP4,   1, 
                    DPP5,   1, 
                    Offset (0x32F), 
                    PPCP,   8, 
                    BFWB,   296, 
                    Offset (0x360), 
                    FW00,   128, 
                    CWAP,   16, 
                    CWAT,   16, 
                    Offset (0x380), 
                    TPME,   8, 
                    TCG0,   1, 
                    TCG1,   1, 
                    Offset (0x382), 
                    ISSP,   1, 
                    ISWK,   2, 
                    Offset (0x383), 
                    FFDT,   1, 
                    Offset (0x384), 
                    ISCG,   32, 
                    Offset (0x38C), 
                    TMCP,   16, 
                    CRCP,   16, 
                    Offset (0x394), 
                    Offset (0x398), 
                    Offset (0x39C), 
                    Offset (0x3A0), 
                    Offset (0x3E0), 
                    MH01,   128, 
                    MH08,   128, 
                    CMD,    8, 
                    ERR,    32, 
                    PAR0,   32, 
                    PAR1,   32, 
                    PAR2,   32, 
                    PAR3,   32, 
                    Offset (0x500), 
                    IF00,   128, 
                    IF01,   128, 
                    IF02,   128, 
                    IF03,   128, 
                    IF04,   128, 
                    IF05,   128, 
                    IF06,   128, 
                    IF07,   128, 
                    IF08,   128, 
                    IF09,   128, 
                    IF0A,   128, 
                    IF0B,   128, 
                    IF0C,   128, 
                    IF0D,   128, 
                    IF0E,   128, 
                    IF0F,   128, 
                    WITM,   8, 
                    WSEL,   8, 
                    WLS0,   8, 
                    WLS1,   8, 
                    WLS2,   8, 
                    WLS3,   8, 
                    WLS4,   8, 
                    WLS5,   8, 
                    WLS6,   8, 
                    WLS7,   8, 
                    WLS8,   8, 
                    WLS9,   8, 
                    WLSA,   8, 
                    WLSB,   8, 
                    WLSC,   8, 
                    WLSD,   8, 
                    WENC,   8, 
                    WKBD,   8, 
                    WPTY,   8, 
                    WPAS,   1032, 
                    WPNW,   1032, 
                    WSPM,   8, 
                    WSPS,   8, 
                    WSMN,   8, 
                    WSMX,   8, 
                    WSEN,   8, 
                    WSKB,   8, 
                    Offset (0xC00), 
                    VEDI,   1024
                }

                Device (EC)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_GPE, 0x03)  // _GPE: General Purpose Events
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                    OperationRegion (ERAM, EmbeddedControl, 0x00, 0xFF)
                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        DSBY,   1, 
                        ENGA,   1, 
                        ENHY,   1, 
                        HFNE,   1, 
                        DSEM,   1, 
                        EN3R,   1, 
                        REBY,   1, 
                        ENTM,   1, 
                        ENBK,   1, 
                        ENFP,   1, 
                            ,   1, 
                        IDMI,   1, 
                        WPSW,   1, 
                        BYON,   1, 
                        ENBT,   1, 
                        NTKY,   1, 
                        DKON,   1, 
                        DSSK,   1, 
                        MTES,   1, 
                        USBO,   1, 
                        DSMC,   1, 
                        SNLC,   1, 
                        NLSF,   1, 
                        TNKB,   1, 
                        DSHP,   1, 
                        IGPK,   1, 
                        CHGR,   1, 
                            ,   1, 
                        CBAT,   1, 
                        HAUM,   2, 
                        Offset (0x04), 
                            ,   1, 
                        CLBA,   1, 
                        LWBA,   1, 
                        SUBE,   1, 
                        PUBE,   1, 
                        RSBE,   1, 
                        DCBE,   1, 
                        PFBE,   1, 
                        HSPA,   1, 
                        NHDD,   1, 
                        DEAD,   1, 
                        B440,   1, 
                        B315,   1, 
                        T315,   1, 
                        R315,   1, 
                        BYAM,   1, 
                        HSUN,   8, 
                        HSRP,   8, 
                            ,   1, 
                        DELY,   1, 
                        Offset (0x09), 
                        Offset (0x0A), 
                        Offset (0x0B), 
                        TPSE,   2, 
                        Offset (0x0C), 
                        HLCL,   4, 
                            ,   2, 
                        BLIK,   1, 
                        TONF,   1, 
                        UONE,   1, 
                            ,   1, 
                        UONM,   2, 
                        ECBK,   4, 
                        HFNS,   2, 
                        GSER,   1, 
                        PSCS,   1, 
                        PSDS,   1, 
                        GSUD,   1, 
                        GSID,   2, 
                        MBCG,   1, 
                        SBCG,   1, 
                        MBRF,   1, 
                        SBRF,   1, 
                        HDSU,   1, 
                        BYSU,   1, 
                            ,   1, 
                        TMOD,   1, 
                        HAM0,   8, 
                        HAM1,   8, 
                        HAM2,   8, 
                        HAM3,   8, 
                        HAM4,   8, 
                        HAM5,   8, 
                        HAM6,   8, 
                        HAM7,   8, 
                        HAM8,   8, 
                        HAM9,   8, 
                        HAMA,   8, 
                        HAMB,   8, 
                        HAMC,   8, 
                        HAMD,   8, 
                        HAME,   8, 
                        HAMF,   8, 
                        HT00,   1, 
                        HT01,   1, 
                        HT02,   1, 
                        HT03,   1, 
                        HT10,   1, 
                        HT11,   1, 
                        HT12,   1, 
                        HT13,   1, 
                        Offset (0x23), 
                        EXCM,   8, 
                        Offset (0x25), 
                        Offset (0x26), 
                        USP0,   1, 
                        USP3,   1, 
                        USP4,   1, 
                        EHP0,   1, 
                        EHP1,   1, 
                        Offset (0x27), 
                        Offset (0x28), 
                        ID00,   1, 
                        ID01,   1, 
                        ID02,   1, 
                        ID03,   1, 
                            ,   2, 
                        SEBT,   1, 
                        CMDS,   1, 
                        Offset (0x2A), 
                        HATR,   8, 
                        HT0H,   8, 
                        HT0L,   8, 
                        HT1H,   8, 
                        HT1L,   8, 
                        HFSP,   8, 
                            ,   6, 
                        SMUT,   1, 
                        Offset (0x31), 
                        FANS,   2, 
                        HUWB,   1, 
                        ENS4,   1, 
                        DSEX,   1, 
                        AYID,   1, 
                        MMUT,   1, 
                        ODDP,   1, 
                        HWPM,   1, 
                        HWLB,   1, 
                        HWLO,   1, 
                        HWDK,   1, 
                        HWFN,   1, 
                        HWBT,   1, 
                        HWRI,   1, 
                        HWBU,   1, 
                        Offset (0x34), 
                            ,   7, 
                        HPLO,   1, 
                        Offset (0x36), 
                        Offset (0x37), 
                        Offset (0x38), 
                        HB0S,   7, 
                        MBTS,   1, 
                        Offset (0x3A), 
                        MUTE,   1, 
                        I2CS,   1, 
                        PWRF,   1, 
                        WANO,   1, 
                        DCBD,   1, 
                        DCWL,   1, 
                        DCWW,   1, 
                        Offset (0x3B), 
                        SPKM,   1, 
                        KBLH,   1, 
                            ,   1, 
                        BTDH,   1, 
                        USBN,   1, 
                            ,   2, 
                        S3FG,   1, 
                        Offset (0x3D), 
                        Offset (0x3E), 
                        Offset (0x41), 
                            ,   7, 
                        PFLG,   1, 
                        Offset (0x46), 
                        FNKY,   1, 
                            ,   1, 
                        HPLD,   1, 
                        PROF,   1, 
                        ACPW,   1, 
                            ,   2, 
                        CALR,   1, 
                        HPBU,   1, 
                        DKEV,   1, 
                        BYNO,   1, 
                        HDIB,   1, 
                        Offset (0x48), 
                        HPHI,   1, 
                        GSTS,   1, 
                            ,   2, 
                        EXGC,   1, 
                        DOKI,   1, 
                        HDDT,   1, 
                        Offset (0x49), 
                            ,   1, 
                        NUMK,   1, 
                        Offset (0x4A), 
                        Offset (0x4B), 
                        Offset (0x4C), 
                        ETHB,   8, 
                        ETLB,   8, 
                            ,   1, 
                        ACOV,   1, 
                        RMCS,   1, 
                            ,   1, 
                        T4E4,   1, 
                        T4E5,   1, 
                        Offset (0x4F), 
                        Offset (0x50), 
                        SMPR,   8, 
                        SMST,   8, 
                        SMAD,   8, 
                        SMCM,   8, 
                        SMD0,   100, 
                        Offset (0x74), 
                        BCNT,   8, 
                        SMAA,   8, 
                        BATD,   16, 
                        TMP0,   8, 
                        TMP1,   8, 
                        TMP2,   8, 
                        TMP3,   8, 
                        TMP4,   8, 
                        TMP5,   8, 
                        TMP6,   8, 
                        TMP7,   8, 
                        Offset (0x81), 
                        HIID,   8, 
                        Offset (0x83), 
                        HFNI,   8, 
                        Offset (0x86), 
                        Offset (0x87), 
                        Offset (0x88), 
                        SCRS,   1, 
                            ,   2, 
                        CPUT,   1, 
                        Offset (0x89), 
                        HDEO,   8, 
                        Offset (0x8B), 
                        LOMD,   1, 
                        CBDE,   1, 
                        Offset (0x8C), 
                        NVPR,   1, 
                        TLLE,   1, 
                        Offset (0x8D), 
                        HDAA,   3, 
                        HDAB,   3, 
                        HDAC,   2, 
                        Offset (0x8F), 
                        Offset (0x90), 
                        ERMC,   8, 
                        Offset (0x92), 
                        AMSB,   8, 
                        ALSB,   8, 
                        DMSB,   8, 
                        DLSB,   8, 
                        Offset (0xA0), 
                        BAIF,   128, 
                        HDEN,   32, 
                        DBTS,   8, 
                        Offset (0xB8), 
                        HDEM,   8, 
                        HDES,   8, 
                        Offset (0xC0), 
                        Offset (0xC1), 
                        MCUR,   16, 
                        MBRM,   16, 
                        MBVG,   16, 
                        Offset (0xC8), 
                        ATMX,   8, 
                        AC65,   8, 
                        Offset (0xCB), 
                        BFUD,   1, 
                        Offset (0xCC), 
                        PWMH,   8, 
                        PWML,   8, 
                        SHSC,   8, 
                        HSID,   8, 
                        Offset (0xE0), 
                        ECRC,   16, 
                        ECAC,   16, 
                        ECVO,   16, 
                        Offset (0xE8), 
                        Offset (0xE9), 
                        Offset (0xEA), 
                        Offset (0xEB), 
                        Offset (0xEC), 
                        Offset (0xED), 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        Offset (0xEE), 
                        MBTH,   4, 
                        SBTH,   4, 
                        Offset (0xF0), 
                        Offset (0xF8), 
                            ,   4, 
                        Offset (0xF9), 
                        Offset (0xFA), 
                        Offset (0xFC)
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0xA0), 
                        SBRC,   16, 
                        SBFC,   16, 
                        SBAE,   16, 
                        SBRS,   16, 
                        SBAC,   16, 
                        SBVO,   16, 
                        SBAF,   16, 
                        SBBS,   16
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0xA0), 
                            ,   15, 
                        SBCM,   1, 
                        SBMD,   16, 
                        SBCC,   16
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0xA0), 
                        SBDC,   16, 
                        SBDV,   16, 
                        SBOM,   16, 
                        SBSI,   16, 
                        SBDT,   16, 
                        SBSN,   16
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0xA0), 
                        SBCH,   32
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0xA0), 
                        SBMN,   128
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0xA0), 
                        SBDN,   128
                    }

                    Name (BATO, 0x00)
                    Name (BATN, 0x00)
                    Name (BATF, 0xC0)
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        ^HKEY.WGIN ()
                    }

                    Name (ECOK, 0x00)
                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x03) && (Arg1 == 0x01)))
                        {
                            ECOK = 0x01
                            SXFG = 0xFF
                            USP0 = 0x00
                            ILID = HPLD /* \_SB_.PCI0.LPC0.EC__.HPLD */
                            WGSV (0x00)
                        }

                        Notify (BAT1, 0x00) // Bus Check
                    }

                    Method (LED, 2, NotSerialized)
                    {
                        Local0 = (Arg0 | Arg1)
                        If (ECOK)
                        {
                            HLCL = Local0
                        }
                        Else
                        {
                            WBEC (0x0C, Local0)
                        }
                    }

                    Name (WBON, 0x00)
                    Method (BEEP, 1, NotSerialized)
                    {
                        If ((Arg0 == 0x0F))
                        {
                            WBON = 0x00
                        }

                        Local2 = WBON /* \_SB_.PCI0.LPC0.EC__.WBON */
                        Local0 = Arg0
                        Local1 = 0xFF
                        If ((Arg0 == 0x11))
                        {
                            Local0 = 0x00
                            Local1 = 0x00
                            WBON = 0x00
                        }

                        If ((Arg0 == 0x10))
                        {
                            Local0 = 0x03
                            Local1 = 0x08
                            WBON = 0x01
                        }

                        If ((Arg0 == 0x03))
                        {
                            WBON = 0x00
                            If (Local2)
                            {
                                Local0 = 0x07
                                Local2 = 0x00
                                Local0 = 0xFF
                                Local1 = 0xFF
                            }
                        }

                        If ((Arg0 == 0x07))
                        {
                            If (Local2)
                            {
                                Local2 = 0x00
                                Local0 = 0xFF
                                Local1 = 0xFF
                            }
                        }

                        If (ECOK)
                        {
                            If ((Local2 && !WBON))
                            {
                                HSRP = 0x00
                                HSUN = 0x00
                                Sleep (0x64)
                            }

                            If ((Local1 != 0xFF))
                            {
                                HSRP = Local1
                            }

                            If ((Local0 != 0xFF))
                            {
                                HSUN = Local0
                            }
                        }

                        If ((Arg0 == 0x03)){}
                        If ((Arg0 == 0x07))
                        {
                            Sleep (0x01F4)
                        }
                    }

                    Method (FNST, 0, NotSerialized)
                    {
                        If (ECOK)
                        {
                            Local0 = HFNS /* \_SB_.PCI0.LPC0.EC__.HFNS */
                            Local1 = HFNE /* \_SB_.PCI0.LPC0.EC__.HFNE */
                        }
                        Else
                        {
                            Local0 = (RBEC (0x0E) & 0x03)
                            Local1 = (RBEC (0x00) & 0x08)
                        }

                        If (Local1)
                        {
                            If ((Local0 == 0x00))
                            {
                                UCMS (0x11)
                            }

                            If ((Local0 == 0x01))
                            {
                                UCMS (0x0F)
                            }

                            If ((Local0 == 0x02))
                            {
                                UCMS (0x10)
                            }

                            ^HKEY.MHKQ (0x6005)
                        }
                    }

                    Method (SAUM, 1, NotSerialized)
                    {
                        If ((Arg0 > 0x03))
                        {
                            Noop
                        }
                        ElseIf (ECOK)
                        {
                            HAUM = Arg0
                        }
                        Else
                        {
                            MBEC (0x03, 0x9F, (Arg0 << 0x05))
                        }
                    }

                    Method (CHKS, 0, NotSerialized)
                    {
                        Local0 = 0x03E8
                        While (SMPR)
                        {
                            Sleep (0x01)
                            Local0--
                            If (!Local0)
                            {
                                Return (0x8080)
                            }
                        }

                        Local1 = (SMST & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Return (Zero)
                        }

                        Return (0x8081)
                    }

                    Method (BFWL, 0, NotSerialized)
                    {
                        FW00 = SMD0 /* \_SB_.PCI0.LPC0.EC__.SMD0 */
                        QSMI (0x14, 0x02, 0x00, 0x00, 0x00)
                    }

                    Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x01
                    }

                    Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x02
                    }

                    Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x03
                    }

                    Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x04
                    }

                    Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x05
                    }

                    Method (_Q06, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x06
                    }

                    Method (_Q07, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x07
                    }

                    Method (_Q08, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x08
                    }

                    Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x09
                    }

                    Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x0A
                    }

                    Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x0B
                    }

                    Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x0C
                    }

                    Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x0D
                    }

                    Method (_Q0E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x0E
                    }

                    Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x0F
                    }

                    Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x10
                        If (^HKEY.MHKK (0x01))
                        {
                            ^HKEY.MHKQ (0x1001)
                        }
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x11
                        If (^HKEY.MHKK (0x02))
                        {
                            ^HKEY.MHKQ (0x1002)
                        }
                        Else
                        {
                            Noop
                        }
                    }

                    Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x12
                        ^HKEY.MHKQ (0x1003)
                    }

                    Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x13
                        If (^HKEY.DHKC)
                        {
                            ^HKEY.MHKQ (0x1004)
                        }
                        Else
                        {
                            Notify (SLPB, 0x80) // Status Change
                        }
                    }

                    Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x14
                    }

                    Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x15
                    }

                    Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x16
                        If (^HKEY.MHKK (0x40))
                        {
                            ^HKEY.MHKQ (0x1007)
                        }
                        ElseIf ((^^^VGA.AVGA == 0x01))
                        {
                            ^^^VGA.AFN0 ()
                        }
                        Else
                        {
                            UCMS (0x15)
                        }
                    }

                    Method (_Q17, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x17
                        If (^HKEY.MHKK (0x00010000))
                        {
                            ^HKEY.MHKQ (0x1011)
                        }

                        If ((TPOS >= 0x40))
                        {
                            If ((^^^VGA.AVGA == 0x01))
                            {
                                Notify (^^^VGA.LCD, 0x87) // Device-Specific
                            }
                            Else
                            {
                                VBRG ()
                                VBRD ()
                            }
                        }
                        Else
                        {
                            VBRD ()
                            ^HKEY.MHKQ (0x6050)
                        }
                    }

                    Method (_Q18, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x18
                        If (^HKEY.MHKK (0x8000))
                        {
                            ^HKEY.MHKQ (0x1010)
                        }

                        If ((TPOS >= 0x40))
                        {
                            If ((^^^VGA.AVGA == 0x01))
                            {
                                Notify (^^^VGA.LCD, 0x86) // Device-Specific
                            }
                            Else
                            {
                                VBRG ()
                                VBRU ()
                            }
                        }
                        Else
                        {
                            VBRU ()
                            ^HKEY.MHKQ (0x6050)
                        }
                    }

                    Method (_Q19, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x19
                        If (^HKEY.MHKK (0x00800000))
                        {
                            ^HKEY.MHKQ (0x1018)
                        }

                        UCMS (0x03)
                    }

                    Method (_Q1A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x1A
                        If (^HKEY.MHKK (0x0400))
                        {
                            ^HKEY.MHKQ (0x100B)
                        }
                    }

                    Method (_Q1B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x1B
                        ^HKEY.MHKQ (0x100C)
                    }

                    Method (_Q1C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x1C
                        If (^HKEY.MHKK (0x00200000))
                        {
                            ^HKEY.MHKQ (0x1016)
                        }

                        UCMS (0x00)
                    }

                    Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x1D
                        If (^HKEY.MHKK (0x00100000))
                        {
                            ^HKEY.MHKQ (0x1015)
                        }

                        UCMS (0x01)
                    }

                    Method (_Q1E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x1E
                        HAUM = 0x03
                    }

                    Method (_Q1F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x1F
                    }

                    Method (_Q22, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x22
                        If (MBTS)
                        {
                            Notify (BAT1, 0x80) // Status Change
                        }
                    }

                    Method (_Q24, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x24
                        Notify (BAT1, 0x80) // Status Change
                    }

                    Method (_Q26, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x26
                        Sleep (0x01F4)
                        Notify (ACAD, 0x80) // Status Change
                        Notify (BAT1, 0x80) // Status Change
                        Notify (\_TZ.THZ0, 0x80) // Thermal Status Change
                        ^HKEY.MHKQ (0x6040)
                    }

                    Method (_Q27, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x27
                        Sleep (0x01F4)
                        Notify (ACAD, 0x80) // Status Change
                        Notify (\_TZ.THZ0, 0x80) // Thermal Status Change
                        ^HKEY.MHKQ (0x6040)
                    }

                    Method (_Q28, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x28
                    }

                    Method (_Q29, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x29
                    }

                    Method (_Q2A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x2A
                        ILID = HPLD /* \_SB_.PCI0.LPC0.EC__.HPLD */
                        ^HKEY.MHKQ (0x5002)
                        Notify (LID, 0x80) // Status Change
                    }

                    Method (_Q2B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x2B
                        ILID = HPLD /* \_SB_.PCI0.LPC0.EC__.HPLD */
                        ^HKEY.MHKQ (0x5001)
                        Notify (LID, 0x80) // Status Change
                    }

                    Method (_Q34, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((((Local1 = (HB0S & 0x0F)) == 0x00) && !ACPW))
                        {
                            P80H = 0x34
                            ^HKEY.MHKQ (0x2313)
                        }

                        FNST ()
                    }

                    Method (_Q37, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x37
                        Sleep (0x01F4)
                        If (DOKI)
                        {
                            ^HKEY.MHKQ (0x4010)
                        }
                        Else
                        {
                            ^HKEY.MHKQ (0x4011)
                        }
                    }

                    Method (_Q3F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x3F
                        Sleep (0x01F4)
                        ^HKEY.MHKQ (0x6000)
                    }

                    Method (_Q40, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x40
                        Notify (\_TZ.THZ0, 0x80) // Thermal Status Change
                    }

                    Method (_Q41, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x41
                        Sleep (0x01F4)
                        ^HKEY.MHKQ (0x7000)
                        If (!GSTS)
                        {
                            ^^^SMB.WLON = 0x00
                            ^^^SMB.WLLO = 0x00
                            ^^^SMB.BTON = 0x00
                            ^^^SMB.DBTN = 0x01
                            ^^^SMB.WWON = 0x00
                            ^^^SMB.WWLO = 0x00
                        }
                        Else
                        {
                            If (WLNP)
                            {
                                ^^^SMB.WLON = DCWL /* \_SB_.PCI0.LPC0.EC__.DCWL */
                                ^^^SMB.WLLO = DCWL /* \_SB_.PCI0.LPC0.EC__.DCWL */
                            }

                            If (BTMD)
                            {
                                ^^^SMB.BTON = DCBD /* \_SB_.PCI0.LPC0.EC__.DCBD */
                                ^^^SMB.DBTN = !DCBD
                            }

                            If (WANP)
                            {
                                ^^^SMB.WWON = DCWW /* \_SB_.PCI0.LPC0.EC__.DCWW */
                                ^^^SMB.WWLO = DCWW /* \_SB_.PCI0.LPC0.EC__.DCWW */
                            }
                        }
                    }

                    Method (_Q43, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x43
                        UCMS (0x18)
                    }

                    Method (_Q44, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x44
                    }

                    Method (_Q45, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x45
                        ^HKEY.MHKQ (0x3006)
                        Notify (^^^SATA.PRT1, 0x01) // Device Check
                    }

                    Method (_Q4A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x4A
                        HBCK ()
                        BFAD = 0x01
                        Sleep (0xC8)
                        Notify (BAT1, 0x81) // Information Change
                    }

                    Method (_Q4B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x4B
                        Notify (BAT1, 0x80) // Status Change
                    }

                    Method (_Q4E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x4E
                        ^HKEY.MHKQ (0x6011)
                    }

                    Method (_Q4F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x4F
                        ^HKEY.MHKQ (0x6012)
                    }

                    Method (_Q60, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x60
                        If (^HKEY.MHKK (0x2000))
                        {
                            ^HKEY.MHKQ (0x100E)
                        }
                    }

                    Method (_Q61, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x61
                    }

                    Method (_Q62, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x62
                    }

                    Method (_Q63, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x63
                        If (^HKEY.MHKK (0x00020000))
                        {
                            ^HKEY.MHKQ (0x1012)
                        }

                        UCMS (0x0B)
                    }

                    Method (_Q64, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x64
                        If (^HKEY.MHKK (0x10))
                        {
                            ^HKEY.MHKQ (0x1005)
                        }

                        If (WWNA)
                        {
                            ^^^SMB.WWON = DCWW /* \_SB_.PCI0.LPC0.EC__.DCWW */
                            ^^^SMB.WWLO = DCWW /* \_SB_.PCI0.LPC0.EC__.DCWW */
                            WWNA = 0x00
                        }
                        ElseIf (WANA)
                        {
                            ^^^SMB.WLON = DCWL /* \_SB_.PCI0.LPC0.EC__.DCWL */
                            ^^^SMB.WLLO = DCWL /* \_SB_.PCI0.LPC0.EC__.DCWL */
                            WANA = 0x00
                        }
                        ElseIf (BTHA)
                        {
                            ^^^SMB.BTON = DCBD /* \_SB_.PCI0.LPC0.EC__.DCBD */
                            ^^^SMB.DBTN = !DCBD
                            BTHA = 0x00
                        }
                    }

                    Method (_Q65, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x65
                        If (^HKEY.MHKK (0x20))
                        {
                            ^HKEY.MHKQ (0x1006)
                        }
                    }

                    Method (_Q66, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x66
                        If (^HKEY.MHKK (0x0200))
                        {
                            ^HKEY.MHKQ (0x100A)
                        }

                        UCMS (0x02)
                    }

                    Method (_Q67, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x67
                        If (^HKEY.MHKK (0x00040000))
                        {
                            ^HKEY.MHKQ (0x1013)
                        }
                    }

                    Method (_Q68, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x68
                    }

                    Method (_Q69, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x69
                    }

                    Method (_Q6A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x6A
                        ^HKEY.MHKQ (0x101B)
                    }

                    Method (_Q6B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x6B
                    }

                    Method (_Q6C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x6C
                    }

                    Method (_Q6D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x6D
                    }

                    Method (_Q6E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x6E
                    }

                    Method (_Q6F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x6F
                    }

                    Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x70
                        FNST ()
                    }

                    Method (_Q72, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x72
                        FNST ()
                    }

                    Method (_Q73, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x73
                        FNST ()
                    }

                    Method (_Q74, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x74
                        If (^HKEY.MHKK (0x08000000))
                        {
                            ^HKEY.MHKQ (0x6060)
                        }
                    }

                    Method (_Q76, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x76
                    }

                    Method (_Q77, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x77
                    }

                    Method (_Q95, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (\_TZ.THZ0, 0x80) // Thermal Status Change
                    }

                    Method (_QEA, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xEA
                        T4E4 = 0x01
                        T4E5 = 0x00
                        \_PR.C000._PPC = 0x01
                        Notify (\_PR.C000, 0x80) // Performance Capability Change
                        Sleep (0x0A)
                        \_PR.C001._PPC = 0x01
                        Notify (\_PR.C001, 0x80) // Performance Capability Change
                        Sleep (0x0A)
                    }

                    Method (_QEC, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xEC
                        T4E4 = 0x01
                        T4E5 = 0x00
                        \_PR.C000._PPC = 0x00
                        Notify (\_PR.C000, 0x80) // Performance Capability Change
                        Sleep (0x0A)
                        \_PR.C001._PPC = 0x00
                        Notify (\_PR.C001, 0x80) // Performance Capability Change
                        Sleep (0x0A)
                    }

                    Method (_QEB, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xEB
                        ACOV = 0x01
                        \_PR.C000._PPC = 0x01
                        Notify (\_PR.C000, 0x80) // Performance Capability Change
                        Sleep (0x0A)
                        \_PR.C001._PPC = 0x01
                        Notify (\_PR.C001, 0x80) // Performance Capability Change
                        Sleep (0x0A)
                    }

                    Method (_QED, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xED
                        ACOV = 0x00
                        RMCS = 0x00
                        T4E4 = 0x00
                        T4E5 = 0x00
                        \_PR.C000._PPC = 0x00
                        Notify (\_PR.C000, 0x80) // Performance Capability Change
                        Sleep (0x0A)
                        \_PR.C001._PPC = 0x00
                        Notify (\_PR.C001, 0x80) // Performance Capability Change
                        Sleep (0x0A)
                    }

                    Method (_QF0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xF0
                    }

                    Method (_QF1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xF1
                    }

                    Method (_QF2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xF2
                    }

                    Device (HKEY)
                    {
                        Name (_HID, EisaId ("LEN0068"))  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (MHKV, 0, NotSerialized)
                        {
                            Return (0x0100)
                        }

                        Name (DHKC, 0x00)
                        Name (DHKB, 0x01)
                        Mutex (XDHK, 0x07)
                        Name (DHKH, 0x00)
                        Name (DHKW, 0x00)
                        Name (DHKS, 0x00)
                        Name (DHKD, 0x00)
                        Name (DHKN, 0x0808)
                        Name (DHKT, 0x00)
                        Name (DHWW, 0x00)
                        Method (MHKA, 0, NotSerialized)
                        {
                            Return (0x040988F8)
                        }

                        Method (MHKN, 0, NotSerialized)
                        {
                            Return (DHKN) /* \_SB_.PCI0.LPC0.EC__.HKEY.DHKN */
                        }

                        Method (MHKK, 1, NotSerialized)
                        {
                            If (DHKC)
                            {
                                Return ((DHKN & Arg0))
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (MHKM, 2, NotSerialized)
                        {
                            Acquire (XDHK, 0xFFFF)
                            If ((Arg0 > 0x20))
                            {
                                Noop
                            }
                            Else
                            {
                                Local0 = (One << Arg0--)
                                If ((Local0 & 0x040988F8))
                                {
                                    If (Arg1)
                                    {
                                        DHKN |= Local0 /* \_SB_.PCI0.LPC0.EC__.HKEY.DHKN */
                                    }
                                    Else
                                    {
                                        DHKN &= (Local0 ^ 0xFFFFFFFF)
                                    }
                                }
                                Else
                                {
                                    Noop
                                }
                            }

                            Release (XDHK)
                        }

                        Method (MHKS, 0, NotSerialized)
                        {
                            Notify (SLPB, 0x80) // Status Change
                        }

                        Method (MHKC, 1, NotSerialized)
                        {
                            DHKC = Arg0
                        }

                        Method (MHKP, 0, NotSerialized)
                        {
                            Acquire (XDHK, 0xFFFF)
                            If (DHWW)
                            {
                                Local1 = DHWW /* \_SB_.PCI0.LPC0.EC__.HKEY.DHWW */
                                DHWW = Zero
                            }
                            ElseIf (DHKW)
                            {
                                Local1 = DHKW /* \_SB_.PCI0.LPC0.EC__.HKEY.DHKW */
                                DHKW = Zero
                            }
                            ElseIf (DHKD)
                            {
                                Local1 = DHKD /* \_SB_.PCI0.LPC0.EC__.HKEY.DHKD */
                                DHKD = Zero
                            }
                            ElseIf (DHKS)
                            {
                                Local1 = DHKS /* \_SB_.PCI0.LPC0.EC__.HKEY.DHKS */
                                DHKS = Zero
                            }
                            ElseIf (DHKT)
                            {
                                Local1 = DHKT /* \_SB_.PCI0.LPC0.EC__.HKEY.DHKT */
                                DHKT = Zero
                            }
                            Else
                            {
                                Local1 = DHKH /* \_SB_.PCI0.LPC0.EC__.HKEY.DHKH */
                                DHKH = Zero
                            }

                            Release (XDHK)
                            Return (Local1)
                        }

                        Method (KLCG, 1, NotSerialized)
                        {
                            Local0 = 0x00
                            Return (Local0)
                        }

                        Method (MHKE, 1, NotSerialized)
                        {
                            DHKB = Arg0
                            Acquire (XDHK, 0xFFFF)
                            DHKH = Zero
                            DHKW = Zero
                            DHKS = Zero
                            DHKD = Zero
                            DHKT = Zero
                            DHWW = Zero
                            Release (XDHK)
                        }

                        Method (MHKQ, 1, NotSerialized)
                        {
                            If (DHKB)
                            {
                                If (DHKC)
                                {
                                    Acquire (XDHK, 0xFFFF)
                                    If ((Arg0 < 0x1000)){}
                                    ElseIf ((Arg0 < 0x2000))
                                    {
                                        DHKH = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x3000))
                                    {
                                        DHKW = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x4000))
                                    {
                                        DHKS = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x5000))
                                    {
                                        DHKD = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x6000))
                                    {
                                        DHKH = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x7000))
                                    {
                                        DHKT = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x8000))
                                    {
                                        DHWW = Arg0
                                    }
                                    Else
                                    {
                                    }

                                    Release (XDHK)
                                    Notify (HKEY, 0x80) // Status Change
                                }
                                ElseIf ((Arg0 == 0x1004))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                        }

                        Method (MHKD, 0, NotSerialized)
                        {
                        }

                        Method (MHQC, 1, NotSerialized)
                        {
                            Return (0x00)
                        }

                        Method (MHGC, 0, NotSerialized)
                        {
                            Return (0x00)
                        }

                        Method (MHSC, 1, NotSerialized)
                        {
                        }

                        Method (ISSG, 1, NotSerialized)
                        {
                            Return (0x00)
                        }

                        Method (ISSS, 1, NotSerialized)
                        {
                            Return (0x00)
                        }

                        Method (FFSG, 1, NotSerialized)
                        {
                            Return (0x00)
                        }

                        Method (FFSS, 1, NotSerialized)
                        {
                            Return (0x00)
                        }

                        Method (MHKG, 0, NotSerialized)
                        {
                            Return (0x00)
                        }

                        Method (MHST, 0, NotSerialized)
                        {
                        }

                        Method (MHTT, 0, NotSerialized)
                        {
                        }

                        Method (MHBT, 0, NotSerialized)
                        {
                        }

                        Method (MHFT, 1, NotSerialized)
                        {
                        }

                        Method (MHCT, 1, NotSerialized)
                        {
                        }

                        Method (MMTG, 0, NotSerialized)
                        {
                            Local0 = 0x00
                            Local0 |= 0x01
                            If (!MCMU)
                            {
                                Local0 |= 0x00010000
                            }

                            Return (Local0)
                        }

                        Method (MMTS, 1, NotSerialized)
                        {
                        }

                        Name (INDV, 0x00)
                        Method (MHQI, 0, NotSerialized)
                        {
                            If ((IPMS & 0x01))
                            {
                                INDV |= 0x01
                            }

                            If ((IPMS & 0x02))
                            {
                                INDV |= 0x02
                            }

                            If ((IPMS & 0x04))
                            {
                                INDV |= 0x0100
                            }

                            If ((IPMS & 0x08))
                            {
                                INDV |= 0x0200
                            }

                            If ((IPMS & 0x10))
                            {
                                INDV |= 0x04
                            }

                            INDV |= 0x0303
                            Return (INDV) /* \_SB_.PCI0.LPC0.EC__.HKEY.INDV */
                        }

                        Method (MHGI, 1, NotSerialized)
                        {
                            Name (RETB, Buffer (0x10){})
                            CreateByteField (RETB, 0x00, MHGS)
                            Local0 = (0x01 << Arg0)
                            If ((INDV & Local0))
                            {
                                If ((Arg0 == 0x00))
                                {
                                    CreateField (RETB, 0x08, 0x78, BRBU)
                                    BRBU = IPMB /* \_SB_.PCI0.LPC0.IPMB */
                                    MHGS = 0x10
                                }
                                ElseIf ((Arg0 == 0x01))
                                {
                                    CreateField (RETB, 0x08, 0x18, RRBU)
                                    RRBU = IPMR /* \_SB_.PCI0.LPC0.IPMR */
                                    MHGS = 0x04
                                }
                                ElseIf ((Arg0 == 0x08))
                                {
                                    CreateField (RETB, 0x10, 0x18, ODBU)
                                    CreateByteField (RETB, 0x01, MHGZ)
                                    ODBU = IPMO /* \_SB_.PCI0.LPC0.IPMO */
                                    MHGZ |= 0x04 /* \_SB_.PCI0.LPC0.EC__.HKEY.MHGI.MHGZ */
                                    If ((ODDS == 0x00))
                                    {
                                        MHGZ |= 0x03 /* \_SB_.PCI0.LPC0.EC__.HKEY.MHGI.MHGZ */
                                    }

                                    MHGS = 0x05
                                }
                                ElseIf ((Arg0 == 0x09))
                                {
                                    CreateField (RETB, 0x10, 0x08, AUBU)
                                    AUBU = IPMA /* \_SB_.PCI0.LPC0.IPMA */
                                    RETB [0x01] = 0x01
                                    MHGS = 0x03
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    Local1 = VDYN (0x00, 0x00)
                                    RETB [0x02] = (Local1 & 0x0F)
                                    Local1 >>= 0x04
                                    RETB [0x01] = (Local1 & 0x0F)
                                    MHGS = 0x03
                                }
                            }

                            Return (RETB) /* \_SB_.PCI0.LPC0.EC__.HKEY.MHGI.RETB */
                        }

                        Method (MHSI, 2, NotSerialized)
                        {
                            Local0 = (0x01 << Arg0)
                            If ((INDV & Local0))
                            {
                                If ((Arg0 == 0x02))
                                {
                                    VDYN (0x01, Arg1)
                                }
                            }
                        }

                        Method (IRDY, 0, NotSerialized)
                        {
                        }

                        Mutex (BFWM, 0x07)
                        Method (MHCF, 1, NotSerialized)
                        {
                            Local0 = BFWC (Arg0)
                            Return (Local0)
                        }

                        Method (MHPF, 1, NotSerialized)
                        {
                            Name (RETB, Buffer (0x25){})
                            Acquire (BFWM, 0xFFFF)
                            If ((SizeOf (Arg0) <= 0x25))
                            {
                                BFWB = Arg0
                                If (BFWP ())
                                {
                                    CHKS ()
                                    BFWL ()
                                }

                                RETB = BFWB /* \_SB_.PCI0.LPC0.BFWB */
                            }

                            Release (BFWM)
                            Return (RETB) /* \_SB_.PCI0.LPC0.EC__.HKEY.MHPF.RETB */
                        }

                        Method (BAIO, 1, NotSerialized)
                        {
                            HIID = Arg0
                            WAEC ()
                            Return (BAIF) /* \_SB_.PCI0.LPC0.EC__.BAIF */
                        }

                        Method (MHIF, 1, NotSerialized)
                        {
                            If ((Arg0 == 0x00))
                            {
                                Name (RETB, Buffer (0x0A)
                                {
                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00                                       // ..
                                })
                                Acquire (BFWM, 0xFFFF)
                                If (Arg0)
                                {
                                    MH01 = BAIO (0x11)
                                }
                                Else
                                {
                                    MH01 = BAIO (0x01)
                                }

                                If (Arg0)
                                {
                                    MH08 = BAIO (0x18)
                                }
                                Else
                                {
                                    MH08 = BAIO (0x08)
                                }

                                BFWG (Arg0)
                                RETB = BFWB /* \_SB_.PCI0.LPC0.BFWB */
                                Release (BFWM)
                                Return (RETB) /* \_SB_.PCI0.LPC0.EC__.HKEY.MHIF.RETB */
                            }
                        }

                        Method (MHDM, 1, NotSerialized)
                        {
                            BDMC (Arg0)
                        }

                        Method (CKC4, 1, NotSerialized)
                        {
                        }

                        Method (MHQE, 0, NotSerialized)
                        {
                        }

                        Method (MHGE, 0, NotSerialized)
                        {
                        }

                        Method (MHSE, 1, NotSerialized)
                        {
                        }

                        Method (PWMC, 0, NotSerialized)
                        {
                            Return (0x01)
                        }

                        Method (PWMG, 0, NotSerialized)
                        {
                            Local0 = PWMH /* \_SB_.PCI0.LPC0.EC__.PWMH */
                            Local0 <<= 0x08
                            Local0 |= PWML /* \_SB_.PCI0.LPC0.EC__.PWML */
                            Return (Local0)
                        }

                        Method (UAWO, 1, NotSerialized)
                        {
                            Return (UAWS (Arg0))
                        }

                        Method (MHAT, 1, NotSerialized)
                        {
                        }

                        Method (MHGT, 1, NotSerialized)
                        {
                        }

                        Method (PSSG, 1, NotSerialized)
                        {
                            Return (PSIF (0x00, 0x00))
                        }

                        Method (PSSS, 1, NotSerialized)
                        {
                            Return (PSIF (0x01, Arg0))
                        }

                        Method (PSBS, 1, NotSerialized)
                        {
                            Return (PSIF (0x02, Arg0))
                        }

                        Method (BICG, 1, NotSerialized)
                        {
                            Return (PSIF (0x03, Arg0))
                        }

                        Method (BICS, 1, NotSerialized)
                        {
                            Return (PSIF (0x04, Arg0))
                        }

                        Method (BCTG, 1, NotSerialized)
                        {
                            Return (PSIF (0x05, Arg0))
                        }

                        Method (BCCS, 1, NotSerialized)
                        {
                            Return (PSIF (0x06, Arg0))
                        }

                        Method (BCSG, 1, NotSerialized)
                        {
                            Return (PSIF (0x07, Arg0))
                        }

                        Method (BCSS, 1, NotSerialized)
                        {
                            Return (PSIF (0x08, Arg0))
                        }

                        Method (BDSG, 1, NotSerialized)
                        {
                            Return (PSIF (0x09, Arg0))
                        }

                        Method (BDSS, 1, NotSerialized)
                        {
                            Return (PSIF (0x0A, Arg0))
                        }

                        Method (GHSL, 1, NotSerialized)
                        {
                            Return (FNSC (0x00, 0x00))
                        }

                        Method (SHSL, 1, NotSerialized)
                        {
                            Return (FNSC (0x01, (Arg0 & 0x01)))
                        }

                        Method (GSMS, 1, NotSerialized)
                        {
                            Return (AUDC (0x00, 0x00))
                        }

                        Method (SSMS, 1, NotSerialized)
                        {
                            Return (AUDC (0x01, (Arg0 & 0x01)))
                        }

                        Method (SHDA, 1, NotSerialized)
                        {
                            Return (AUDC (0x02, 0x00))
                        }

                        Method (SBSG, 1, NotSerialized)
                        {
                            Return (SYBC (0x00, 0x00))
                        }

                        Method (SBSS, 1, NotSerialized)
                        {
                            Return (SYBC (0x01, Arg0))
                        }

                        Mutex (GSBM, 0x07)
                        Name (BATI, Buffer (0x0100){})
                        Method (SBIG, 1, NotSerialized)
                        {
                            If ((Arg0 == 0x00))
                            {
                                CreateField (BATI, 0x00, 0x80, BA00)
                                CreateField (BATI, 0x80, 0x80, BA01)
                                CreateField (BATI, 0x0100, 0x80, BA02)
                                CreateField (BATI, 0x0180, 0x80, BA03)
                                CreateField (BATI, 0x0200, 0x80, BA04)
                                CreateField (BATI, 0x0280, 0x80, BA05)
                                CreateField (BATI, 0x0300, 0x80, BA06)
                                CreateField (BATI, 0x0380, 0x80, BA07)
                                CreateField (BATI, 0x0400, 0x80, BA08)
                                CreateField (BATI, 0x0480, 0x80, BA09)
                                CreateField (BATI, 0x0500, 0x80, BA0A)
                                CreateField (BATI, 0x0580, 0x80, BA0B)
                                CreateField (BATI, 0x0600, 0x80, BA0C)
                                CreateField (BATI, 0x0680, 0x80, BA0D)
                                CreateField (BATI, 0x0700, 0x80, BA0E)
                                CreateField (BATI, 0x0780, 0x80, BA0F)
                                If (BFAD)
                                {
                                    Sleep (0x03E8)
                                }

                                CBIF (Arg0, 0x00)
                                BA00 = IF00 /* \_SB_.PCI0.LPC0.IF00 */
                                CBIF (Arg0, 0x03)
                                BA03 = IF03 /* \_SB_.PCI0.LPC0.IF03 */
                                CBIF (Arg0, 0x04)
                                BA04 = IF04 /* \_SB_.PCI0.LPC0.IF04 */
                                CBIF (Arg0, 0x05)
                                BA05 = IF05 /* \_SB_.PCI0.LPC0.IF05 */
                                CBIF (Arg0, 0x06)
                                BA06 = IF06 /* \_SB_.PCI0.LPC0.IF06 */
                                CBIF (Arg0, 0x07)
                                BA07 = IF07 /* \_SB_.PCI0.LPC0.IF07 */
                                CBIF (Arg0, 0x08)
                                BA08 = IF08 /* \_SB_.PCI0.LPC0.IF08 */
                                CBIF (Arg0, 0x09)
                                BA09 = IF09 /* \_SB_.PCI0.LPC0.IF09 */
                                If (BFAD)
                                {
                                    BFAD = 0x00
                                    Sleep (0x07D0)
                                }

                                CBIF (Arg0, 0x01)
                                BA01 = IF01 /* \_SB_.PCI0.LPC0.IF01 */
                                CBIF (Arg0, 0x02)
                                BA02 = IF02 /* \_SB_.PCI0.LPC0.IF02 */
                                CBIF (Arg0, 0x0A)
                                BA0A = IF0A /* \_SB_.PCI0.LPC0.IF0A */
                                CBIF (Arg0, 0x0B)
                                BA0B = IF0B /* \_SB_.PCI0.LPC0.IF0B */
                                CBIF (Arg0, 0x0C)
                                BA0C = IF0C /* \_SB_.PCI0.LPC0.IF0C */
                                BA0D = IF0D /* \_SB_.PCI0.LPC0.IF0D */
                                BA0E = IF0E /* \_SB_.PCI0.LPC0.IF0E */
                                BA0F = IF0F /* \_SB_.PCI0.LPC0.IF0F */
                                Return (BATI) /* \_SB_.PCI0.LPC0.EC__.HKEY.BATI */
                            }
                        }

                        Method (PBLG, 1, NotSerialized)
                        {
                            Local0 = BRNS /* \_SB_.PCI0.LPC0.BRNS */
                            Local1 = (Local0 | 0x0F00)
                            Return (Local1)
                        }

                        Method (PBLS, 1, NotSerialized)
                        {
                            If (((Arg0 >= 0x00) && (Arg0 <= 0x0F)))
                            {
                                BRNS = Arg0
                                VBRS (Arg0)
                                If ((TPOS < 0x40))
                                {
                                    MHKQ (0x6050)
                                }

                                Return (0x00)
                            }

                            Return (0x80000000)
                        }

                        Method (PMSG, 1, NotSerialized)
                        {
                            Return (PRSM (0x00, 0x00))
                        }

                        Method (PMSS, 1, NotSerialized)
                        {
                            PRSM (0x01, Arg0)
                            Return (0x00)
                        }

                        Name (WGFL, 0x00)
                        Method (WGIN, 0, NotSerialized)
                        {
                            WGFL = 0x00
                            WGFL = WGSV (0x00)
                            If (WPWS ())
                            {
                                WGFL |= 0x02
                            }

                            If (BPWS ())
                            {
                                WGFL |= 0x20
                            }

                            If (WLPS ())
                            {
                                WGFL |= 0x0200
                            }
                        }

                        Method (WLSW, 0, NotSerialized)
                        {
                            Return (GSTS) /* \_SB_.PCI0.LPC0.EC__.GSTS */
                        }

                        Method (GWLS, 0, NotSerialized)
                        {
                            If ((WGSV (0x09) & 0x01))
                            {
                                GSTS = One
                                WGSV (0x07)
                            }
                            Else
                            {
                                GSTS = Zero
                                WGSV (0x08)
                            }

                            Return (GSTS) /* \_SB_.PCI0.LPC0.EC__.GSTS */
                        }

                        Method (SWLS, 1, NotSerialized)
                        {
                            If ((Arg0 & 0x01))
                            {
                                GSTS = One
                                WGSV (0x07)
                                WLPC (0x01)
                                WPWC (0x01)
                                BPWC (0x01)
                            }
                            Else
                            {
                                GSTS = Zero
                                WGSV (0x08)
                                WLPC (0x00)
                                WPWC (0x00)
                                BPWC (0x00)
                            }
                        }

                        Method (GWLN, 0, NotSerialized)
                        {
                            Local0 = 0x00
                            If (WLNP)
                            {
                                Local0 |= 0x01
                                WGFL |= 0x0100
                            }
                            Else
                            {
                                Local0 &= 0xFFFFFFFE
                                WGFL &= 0xFFFFFEFF
                            }

                            If ((WLPS () && !WOFF))
                            {
                                Local0 |= 0x02
                            }
                            Else
                            {
                                Local0 &= 0xFFFFFFFD
                            }

                            Return (Local0)
                        }

                        Method (SWLN, 1, NotSerialized)
                        {
                            If (((Arg0 & 0x02) && (WGFL & 0x0100)))
                            {
                                WGFL |= 0x0400
                                WGSV (0x05)
                                WOFF = 0x00
                                WLPC (0x01)
                            }
                            Else
                            {
                                WGFL &= 0xFFFFFBFF
                                WGSV (0x06)
                                WOFF = 0x01
                                WLPC (0x00)
                            }
                        }

                        Method (GWAN, 0, NotSerialized)
                        {
                            Local0 = 0x00
                            If (WANP)
                            {
                                Local0 = 0x01
                                WGFL |= 0x01
                            }
                            Else
                            {
                                WGFL &= 0xFFFFFFFE
                            }

                            If (CWAI)
                            {
                                WGFL |= 0x08
                                Return (Local0)
                            }

                            If (WPWS ())
                            {
                                Local0 |= 0x02
                            }
                            Else
                            {
                                Local0 &= 0xFFFFFFFD
                            }

                            Local0 |= 0x04
                            Return (Local0)
                        }

                        Method (SWAN, 1, NotSerialized)
                        {
                            If (((Arg0 & 0x02) && ((WGFL & 0x01) && !
                                (WGFL & 0x08))))
                            {
                                WGFL |= 0x04
                                WGSV (0x02)
                                WPWC (0x01)
                            }
                            Else
                            {
                                WGFL &= 0xFFFFFFFB
                                WGSV (0x03)
                                WPWC (0x00)
                            }
                        }

                        Method (GBDC, 0, NotSerialized)
                        {
                            Local0 = 0x00
                            If (BTMD)
                            {
                                Local0 = 0x01
                                WGFL |= 0x10
                            }
                            Else
                            {
                                WGFL &= 0xFFFFFFEF
                            }

                            If (CBCI)
                            {
                                WGFL |= 0x80
                                Return (Local0)
                            }

                            If (BPWS ())
                            {
                                Local0 |= 0x02
                            }
                            Else
                            {
                                Local0 &= 0xFFFFFFFD
                            }

                            Local0 |= 0x04
                            Return (Local0)
                        }

                        Method (SBDC, 1, NotSerialized)
                        {
                            If (((Arg0 & 0x02) && ((WGFL & 0x10) && !
                                (WGFL & 0x80))))
                            {
                                WGFL |= 0x40
                                BLTH (0x02)
                                BPWC (0x01)
                            }
                            Else
                            {
                                WGFL &= 0xFFFFFFBF
                                BLTH (0x03)
                                BPWC (0x00)
                            }

                            If ((Arg0 & 0x04))
                            {
                                WGFL |= 0x40
                            }
                            Else
                            {
                                WGFL &= 0xFFFFFFBF
                            }
                        }

                        Method (WLPS, 0, NotSerialized)
                        {
                            If (ECOK)
                            {
                                Local0 = DCWL /* \_SB_.PCI0.LPC0.EC__.DCWL */
                            }
                            Else
                            {
                                Local0 = ((RBEC (0x3A) & 0x20) >> 0x05)
                            }

                            Return (Local0)
                        }

                        Method (WLPC, 1, NotSerialized)
                        {
                            WANA = 0x01
                            If ((Arg0 && (GSTS && (WGSV (0x01) & 0x0400))))
                            {
                                If (ECOK)
                                {
                                    DCWL = One
                                }
                                Else
                                {
                                    MBEC (0x3A, 0xFF, 0x20)
                                }

                                If (WLNP)
                                {
                                    ^^^^SMB.WLON = One
                                    ^^^^SMB.WLLO = One
                                }

                                WGFL |= 0x0200
                            }
                            Else
                            {
                                If (ECOK)
                                {
                                    DCWL = Zero
                                }
                                Else
                                {
                                    MBEC (0x3A, 0xDF, 0x00)
                                }

                                ^^^^SMB.WLON = Zero
                                ^^^^SMB.WLLO = Zero
                                WGFL &= 0xFFFFFDFF
                            }
                        }

                        Method (WPWS, 0, NotSerialized)
                        {
                            If (ECOK)
                            {
                                Local0 = DCWW /* \_SB_.PCI0.LPC0.EC__.DCWW */
                            }
                            Else
                            {
                                Local0 = ((RBEC (0x3A) & 0x40) >> 0x06)
                            }

                            Return (Local0)
                        }

                        Method (WPWC, 1, NotSerialized)
                        {
                            WWNA = 0x01
                            If ((Arg0 && (GSTS && (WGSV (0x01) & 0x04))))
                            {
                                If (ECOK)
                                {
                                    DCWW = One
                                }
                                Else
                                {
                                    MBEC (0x3A, 0xFF, 0x40)
                                }

                                If (WANP)
                                {
                                    ^^^^SMB.WWON = One
                                    ^^^^SMB.WWLO = One
                                }

                                WGFL |= 0x02
                            }
                            Else
                            {
                                If (ECOK)
                                {
                                    DCWW = Zero
                                }
                                Else
                                {
                                    MBEC (0x3A, 0xBF, 0x00)
                                }

                                ^^^^SMB.WWON = Zero
                                ^^^^SMB.WWLO = Zero
                                WGFL &= 0xFFFFFFFD
                            }

                            WALA = DCWW /* \_SB_.PCI0.LPC0.EC__.DCWW */
                        }

                        Method (BPWS, 0, NotSerialized)
                        {
                            If (ECOK)
                            {
                                Local0 = DCBD /* \_SB_.PCI0.LPC0.EC__.DCBD */
                            }
                            Else
                            {
                                Local0 = ((RBEC (0x3A) & 0x10) >> 0x04)
                            }

                            Return (Local0)
                        }

                        Method (BPWC, 1, NotSerialized)
                        {
                            BTHA = 0x01
                            If ((Arg0 && (GSTS && (WGSV (0x01) & 0x40))))
                            {
                                If (ECOK)
                                {
                                    DCBD = One
                                    If (BTMD)
                                    {
                                        ^^^^SMB.BTON = DCBD /* \_SB_.PCI0.LPC0.EC__.DCBD */
                                        ^^^^SMB.DBTN = !DCBD
                                    }
                                }
                                Else
                                {
                                    MBEC (0x3A, 0xFF, 0x10)
                                }

                                WGFL |= 0x20
                            }
                            Else
                            {
                                If (ECOK)
                                {
                                    DCBD = Zero
                                    ^^^^SMB.BTON = DCBD /* \_SB_.PCI0.LPC0.EC__.DCBD */
                                    ^^^^SMB.DBTN = !DCBD
                                }
                                Else
                                {
                                    MBEC (0x3A, 0xEF, 0x00)
                                }

                                WGFL &= 0xFFFFFFDF
                            }
                        }

                        Method (WGPS, 1, NotSerialized)
                        {
                            If ((Arg0 >= 0x04))
                            {
                                BLTH (0x05)
                            }

                            If (!(WGFL & 0x04))
                            {
                                WPWC (0x00)
                            }

                            If (!(WGFL & 0x40))
                            {
                                BPWC (0x00)
                            }
                        }

                        Method (WGWK, 1, NotSerialized)
                        {
                            If ((WGFL & 0x20))
                            {
                                BPWC (0x01)
                            }

                            If ((WGFL & 0x02))
                            {
                                WPWC (0x01)
                            }
                        }

                        Method (TVLG, 0, NotSerialized)
                        {
                            Local0 = 0x00
                            Return (Local0)
                        }

                        Method (TVLS, 1, NotSerialized)
                        {
                            Local0 = Zero
                            Local0 = Arg0
                            Local0 &= 0x02
                            If (Local0)
                            {
                                Local0 = Arg0
                                Local0 &= One
                                If (Local0)
                                {
                                    Local0 = Arg0
                                    Local0 &= 0xFF00
                                    Local0 >>= 0x08
                                    If ((Local0 == Zero)){}
                                    If ((Local0 == One)){}
                                    If ((Local0 == 0x02)){}
                                }
                                Else
                                {
                                }
                            }
                            Else
                            {
                            }
                        }

                        Method (GLSI, 0, NotSerialized)
                        {
                            If (ECOK)
                            {
                                Return ((0x02 + HPLD))
                            }
                            ElseIf ((RBEC (0x46) & 0x04))
                            {
                                Return (0x03)
                            }
                            Else
                            {
                                Return (0x02)
                            }
                        }

                        Method (NUMG, 0, NotSerialized)
                        {
                            Local0 = 0x00
                            Return (Local0)
                        }

                        Method (HKS3, 0, NotSerialized)
                        {
                            If (GSTS)
                            {
                                If (BTMD)
                                {
                                    If (DCBD)
                                    {
                                        ^^^^SMB.BTON = One
                                        ^^^^SMB.DBTN = Zero
                                    }
                                    Else
                                    {
                                        ^^^^SMB.BTON = Zero
                                        ^^^^SMB.DBTN = One
                                    }
                                }
                                Else
                                {
                                    ^^^^SMB.BTON = Zero
                                    ^^^^SMB.DBTN = One
                                    DCBD = Zero
                                }

                                If (WANP)
                                {
                                    If (DCWW)
                                    {
                                        ^^^^SMB.WWON = One
                                        ^^^^SMB.WWLO = One
                                    }
                                    Else
                                    {
                                        ^^^^SMB.WWON = Zero
                                        ^^^^SMB.WWLO = Zero
                                    }
                                }
                                Else
                                {
                                    ^^^^SMB.WWON = Zero
                                    ^^^^SMB.WWLO = Zero
                                    DCWW = Zero
                                }

                                If (WLNP)
                                {
                                    If (WOFF)
                                    {
                                        ^^^^SMB.WLON = Zero
                                        ^^^^SMB.WLLO = Zero
                                        DCWL = Zero
                                    }
                                    ElseIf (DCWL)
                                    {
                                        ^^^^SMB.WLON = One
                                        ^^^^SMB.WLLO = One
                                    }
                                    Else
                                    {
                                        ^^^^SMB.WLON = Zero
                                        ^^^^SMB.WLLO = Zero
                                    }
                                }
                                Else
                                {
                                    ^^^^SMB.WLON = Zero
                                    ^^^^SMB.WLLO = Zero
                                    DCWL = Zero
                                }
                            }
                            Else
                            {
                                ^^^^SMB.BTON = Zero
                                ^^^^SMB.DBTN = One
                                ^^^^SMB.WWON = Zero
                                ^^^^SMB.WWLO = Zero
                                ^^^^SMB.WLON = Zero
                                ^^^^SMB.WLLO = Zero
                            }
                        }
                    }
                }
            }

            Device (P2P)
            {
                Name (_ADR, 0x00140004)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x04, 
                    0x05
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x08)
                        {
                            Package (0x04)
                            {
                                0x0004FFFF, 
                                0x00, 
                                0x00, 
                                0x15
                            }, 

                            Package (0x04)
                            {
                                0x0004FFFF, 
                                0x01, 
                                0x00, 
                                0x16
                            }, 

                            Package (0x04)
                            {
                                0x0004FFFF, 
                                0x02, 
                                0x00, 
                                0x17
                            }, 

                            Package (0x04)
                            {
                                0x0004FFFF, 
                                0x03, 
                                0x00, 
                                0x14
                            }, 

                            Package (0x04)
                            {
                                0x0005FFFF, 
                                0x00, 
                                0x00, 
                                0x14
                            }, 

                            Package (0x04)
                            {
                                0x0005FFFF, 
                                0x01, 
                                0x00, 
                                0x15
                            }, 

                            Package (0x04)
                            {
                                0x0005FFFF, 
                                0x02, 
                                0x00, 
                                0x16
                            }, 

                            Package (0x04)
                            {
                                0x0005FFFF, 
                                0x03, 
                                0x00, 
                                0x17
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x08)
                        {
                            Package (0x04)
                            {
                                0x0004FFFF, 
                                0x00, 
                                ^^LPC0.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0004FFFF, 
                                0x01, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0004FFFF, 
                                0x02, 
                                ^^LPC0.LNKH, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0004FFFF, 
                                0x03, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0005FFFF, 
                                0x00, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0005FFFF, 
                                0x01, 
                                ^^LPC0.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0005FFFF, 
                                0x02, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0005FFFF, 
                                0x03, 
                                ^^LPC0.LNKH, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (SPB0)
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                }

                OperationRegion (PCFG, PCI_Config, 0x00, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x40)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PSDC,   1, 
                        ,   2, 
                    PSDS,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x22), 
                    PMES,   1, 
                    Offset (0x30), 
                    TGLS,   4
                }

                Method (GPPB, 0, NotSerialized)
                {
                    Return ((_ADR & 0x07))
                }

                Method (GHPS, 2, NotSerialized)
                {
                    Local0 = GPPB ()
                    If ((Arg0 == 0x00))
                    {
                        If ((Local0 == 0x00))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x00)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x00)
                        }

                        If ((Local0 == 0x01))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFDFFF, 0x00)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFDFD, 0x00)
                        }

                        If ((Local0 == 0x02))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x00)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x00)
                        }

                        If ((Local0 == 0x03))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFF7FFF, 0x00)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFF7F7, 0x00)
                        }

                        Stall (0xC8)
                    }

                    If ((Arg0 == 0x01))
                    {
                        If ((Local0 == 0x00))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x1000)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x0101)
                        }

                        If ((Local0 == 0x01))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFDFFF, 0x2000)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFDFD, 0x0202)
                        }

                        If ((Local0 == 0x02))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x4000)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x0404)
                        }

                        If ((Local0 == 0x03))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFF7FFF, 0x8000)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFF7F7, 0x0808)
                        }

                        Stall (0xC8)
                    }

                    If ((Arg0 == 0x00))
                    {
                        GEN2 ()
                        Local1 = ^^SMB.RDAB (^^SMB.CABR (0x03, Local0, 0xA5))
                        Local1 &= 0xFF
                        Local2 = 0x01F4
                        While (((Local1 != 0x10) && (Local2 > 0x00)))
                        {
                            Local2--
                            Stall (0xC8)
                            Stall (0xC8)
                            Local1 = ^^SMB.RDAB (^^SMB.CABR (0x03, Local0, 0xA5))
                            Local1 &= 0xFF
                        }

                        If ((Local1 != 0x10))
                        {
                            GEN1 ()
                        }
                    }
                }

                Method (GEN2, 0, NotSerialized)
                {
                    TGLS = 0x02
                    Local0 = GPPB ()
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA4), 0xFFFFFFFE, 0x01)
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA2), 0xFFFFDFFF, 0x2000)
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xC0), 0xFFFF7FFF, 0x8000)
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA4), 0xDFFFFFFF, 0x20000000)
                    Stall (0xC8)
                    Stall (0xC8)
                }

                Method (GEN1, 0, NotSerialized)
                {
                    TGLS = 0x01
                    Local0 = GPPB ()
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA4), 0xFFFFFFFE, 0x00)
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA2), 0xFFFFDFFF, 0x2000)
                    Stall (0xC8)
                    Stall (0xC8)
                }

                Device (XPDV)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, 0x00, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (SPB1)
            {
                Name (_ADR, 0x00150001)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x10
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKA, 
                                0x00
                            }
                        })
                    }
                }

                OperationRegion (PCFG, PCI_Config, 0x00, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x40)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PSDC,   1, 
                        ,   2, 
                    PSDS,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x22), 
                    PMES,   1, 
                    Offset (0x30), 
                    TGLS,   4
                }

                Method (GPPB, 0, NotSerialized)
                {
                    Return ((_ADR & 0x07))
                }

                Method (GHPS, 2, NotSerialized)
                {
                    Local0 = GPPB ()
                    If ((Arg0 == 0x00))
                    {
                        If ((Local0 == 0x00))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x00)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x00)
                        }

                        If ((Local0 == 0x01))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFDFFF, 0x00)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFDFD, 0x00)
                        }

                        If ((Local0 == 0x02))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x00)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x00)
                        }

                        If ((Local0 == 0x03))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFF7FFF, 0x00)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFF7F7, 0x00)
                        }

                        Stall (0xC8)
                    }

                    If ((Arg0 == 0x01))
                    {
                        If ((Local0 == 0x00))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x1000)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x0101)
                        }

                        If ((Local0 == 0x01))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFDFFF, 0x2000)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFDFD, 0x0202)
                        }

                        If ((Local0 == 0x02))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x4000)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x0404)
                        }

                        If ((Local0 == 0x03))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFF7FFF, 0x8000)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFF7F7, 0x0808)
                        }

                        Stall (0xC8)
                    }

                    If ((Arg0 == 0x00))
                    {
                        GEN2 ()
                        Local1 = ^^SMB.RDAB (^^SMB.CABR (0x03, Local0, 0xA5))
                        Local1 &= 0xFF
                        Local2 = 0x01F4
                        While (((Local1 != 0x10) && (Local2 > 0x00)))
                        {
                            Local2--
                            Stall (0xC8)
                            Stall (0xC8)
                            Local1 = ^^SMB.RDAB (^^SMB.CABR (0x03, Local0, 0xA5))
                            Local1 &= 0xFF
                        }

                        If ((Local1 != 0x10))
                        {
                            GEN1 ()
                        }
                    }
                }

                Method (GEN2, 0, NotSerialized)
                {
                    TGLS = 0x02
                    Local0 = GPPB ()
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA4), 0xFFFFFFFE, 0x01)
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA2), 0xFFFFDFFF, 0x2000)
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xC0), 0xFFFF7FFF, 0x8000)
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA4), 0xDFFFFFFF, 0x20000000)
                    Stall (0xC8)
                    Stall (0xC8)
                }

                Method (GEN1, 0, NotSerialized)
                {
                    TGLS = 0x01
                    Local0 = GPPB ()
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA4), 0xFFFFFFFE, 0x00)
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA2), 0xFFFFDFFF, 0x2000)
                    Stall (0xC8)
                    Stall (0xC8)
                }

                Device (XPDV)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, 0x00, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (SPB2)
            {
                Name (_ADR, 0x00150002)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x11
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKB, 
                                0x00
                            }
                        })
                    }
                }

                OperationRegion (PCFG, PCI_Config, 0x00, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x40)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PSDC,   1, 
                        ,   2, 
                    PSDS,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x22), 
                    PMES,   1, 
                    Offset (0x30), 
                    TGLS,   4
                }

                Method (GPPB, 0, NotSerialized)
                {
                    Return ((_ADR & 0x07))
                }

                Method (GHPS, 2, NotSerialized)
                {
                    Local0 = GPPB ()
                    If ((Arg0 == 0x00))
                    {
                        If ((Local0 == 0x00))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x00)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x00)
                        }

                        If ((Local0 == 0x01))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFDFFF, 0x00)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFDFD, 0x00)
                        }

                        If ((Local0 == 0x02))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x00)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x00)
                        }

                        If ((Local0 == 0x03))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFF7FFF, 0x00)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFF7F7, 0x00)
                        }

                        Stall (0xC8)
                    }

                    If ((Arg0 == 0x01))
                    {
                        If ((Local0 == 0x00))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x1000)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x0101)
                        }

                        If ((Local0 == 0x01))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFDFFF, 0x2000)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFDFD, 0x0202)
                        }

                        If ((Local0 == 0x02))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x4000)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x0404)
                        }

                        If ((Local0 == 0x03))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFF7FFF, 0x8000)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFF7F7, 0x0808)
                        }

                        Stall (0xC8)
                    }

                    If ((Arg0 == 0x00))
                    {
                        GEN2 ()
                        Local1 = ^^SMB.RDAB (^^SMB.CABR (0x03, Local0, 0xA5))
                        Local1 &= 0xFF
                        Local2 = 0x01F4
                        While (((Local1 != 0x10) && (Local2 > 0x00)))
                        {
                            Local2--
                            Stall (0xC8)
                            Stall (0xC8)
                            Local1 = ^^SMB.RDAB (^^SMB.CABR (0x03, Local0, 0xA5))
                            Local1 &= 0xFF
                        }

                        If ((Local1 != 0x10))
                        {
                            GEN1 ()
                        }
                    }
                }

                Method (GEN2, 0, NotSerialized)
                {
                    TGLS = 0x02
                    Local0 = GPPB ()
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA4), 0xFFFFFFFE, 0x01)
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA2), 0xFFFFDFFF, 0x2000)
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xC0), 0xFFFF7FFF, 0x8000)
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA4), 0xDFFFFFFF, 0x20000000)
                    Stall (0xC8)
                    Stall (0xC8)
                }

                Method (GEN1, 0, NotSerialized)
                {
                    TGLS = 0x01
                    Local0 = GPPB ()
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA4), 0xFFFFFFFE, 0x00)
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA2), 0xFFFFDFFF, 0x2000)
                    Stall (0xC8)
                    Stall (0xC8)
                }

                Device (XPDV)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, 0x00, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (SPB3)
            {
                Name (_ADR, 0x00150003)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x12
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKC, 
                                0x00
                            }
                        })
                    }
                }

                OperationRegion (PCFG, PCI_Config, 0x00, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x40)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PSDC,   1, 
                        ,   2, 
                    PSDS,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x22), 
                    PMES,   1, 
                    Offset (0x30), 
                    TGLS,   4
                }

                Method (GPPB, 0, NotSerialized)
                {
                    Return ((_ADR & 0x07))
                }

                Method (GHPS, 2, NotSerialized)
                {
                    Local0 = GPPB ()
                    If ((Arg0 == 0x00))
                    {
                        If ((Local0 == 0x00))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x00)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x00)
                        }

                        If ((Local0 == 0x01))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFDFFF, 0x00)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFDFD, 0x00)
                        }

                        If ((Local0 == 0x02))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x00)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x00)
                        }

                        If ((Local0 == 0x03))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFF7FFF, 0x00)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFF7F7, 0x00)
                        }

                        Stall (0xC8)
                    }

                    If ((Arg0 == 0x01))
                    {
                        If ((Local0 == 0x00))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x1000)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x0101)
                        }

                        If ((Local0 == 0x01))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFDFFF, 0x2000)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFDFD, 0x0202)
                        }

                        If ((Local0 == 0x02))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x4000)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x0404)
                        }

                        If ((Local0 == 0x03))
                        {
                            ^^SMB.RWAB (^^SMB.CABR (0x06, 0x00, 0xC0), 0xFFFF7FFF, 0x8000)
                            ^^SMB.RWAB (^^SMB.CABR (0x01, 0x00, 0x65), 0xFFFFF7F7, 0x0808)
                        }

                        Stall (0xC8)
                    }

                    If ((Arg0 == 0x00))
                    {
                        GEN2 ()
                        Local1 = ^^SMB.RDAB (^^SMB.CABR (0x03, Local0, 0xA5))
                        Local1 &= 0xFF
                        Local2 = 0x01F4
                        While (((Local1 != 0x10) && (Local2 > 0x00)))
                        {
                            Local2--
                            Stall (0xC8)
                            Stall (0xC8)
                            Local1 = ^^SMB.RDAB (^^SMB.CABR (0x03, Local0, 0xA5))
                            Local1 &= 0xFF
                        }

                        If ((Local1 != 0x10))
                        {
                            GEN1 ()
                        }
                    }
                }

                Method (GEN2, 0, NotSerialized)
                {
                    TGLS = 0x02
                    Local0 = GPPB ()
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA4), 0xFFFFFFFE, 0x01)
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA2), 0xFFFFDFFF, 0x2000)
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xC0), 0xFFFF7FFF, 0x8000)
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA4), 0xDFFFFFFF, 0x20000000)
                    Stall (0xC8)
                    Stall (0xC8)
                }

                Method (GEN1, 0, NotSerialized)
                {
                    TGLS = 0x01
                    Local0 = GPPB ()
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA4), 0xFFFFFFFE, 0x00)
                    ^^SMB.RWAB (^^SMB.CABR (0x03, Local0, 0xA2), 0xFFFFDFFF, 0x2000)
                    Stall (0xC8)
                    Stall (0xC8)
                }

                Device (XPDV)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, 0x00, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (VGA)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Name (PXEN, 0x80000000)
                Name (PXID, 0x00020000)
                Name (PXMX, 0x80000000)
                Name (LCDT, 0x80000000)
                Name (DSCT, 0x80000000)
                Name (PXFX, 0x80000001)
                Name (PXDY, 0x80000000)
                Name (AF7E, 0x80000001)
                Name (AVGA, 0x00)
                Name (BLVL, Buffer (0x10)
                {
                    /* 0000 */  0x06, 0x07, 0x09, 0x0C, 0x10, 0x15, 0x1C, 0x25,  // .......%
                    /* 0008 */  0x32, 0x40, 0x50, 0x64, 0x82, 0xA5, 0xCD, 0xFF   // 2@Pd....
                })
                Name (SWIT, 0x01)
                Name (CRT0, 0x01)
                Name (LCD0, 0x01)
                Name (HDM0, 0x01)
                Name (DOSP, 0x00)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DOSP = Arg0
                    SWIT = (Arg0 & 0x03)
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    Return (Package (0x05)
                    {
                        0x00010100, 
                        0x00010110, 
                        0x0200, 
                        0x00010210, 
                        0x00010220
                    })
                }

                Device (LCD)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x0110)
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (LCD0)
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return (0x1D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (LCD0)
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                    }

                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        AVGA = 0x01
                        If ((AF7E == 0x80000001))
                        {
                            Return (Package (0x12)
                            {
                                0x64, 
                                0x23, 
                                0x14, 
                                0x19, 
                                0x1E, 
                                0x23, 
                                0x28, 
                                0x2D, 
                                0x32, 
                                0x37, 
                                0x3C, 
                                0x41, 
                                0x46, 
                                0x4B, 
                                0x50, 
                                0x55, 
                                0x5A, 
                                0x64
                            })
                        }
                        Else
                        {
                            Return (Package (0x12)
                            {
                                0x64, 
                                0x23, 
                                0x14, 
                                0x19, 
                                0x1E, 
                                0x23, 
                                0x28, 
                                0x2D, 
                                0x32, 
                                0x37, 
                                0x3C, 
                                0x41, 
                                0x46, 
                                0x4B, 
                                0x50, 
                                0x55, 
                                0x5A, 
                                0x64
                            })
                        }
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        If ((AF7E == 0x80000001))
                        {
                            Divide ((Arg0 - 0x14), 0x05, Local1, Local0)
                            If ((Local0 == 0x10))
                            {
                                Local0 = 0x0F
                            }

                            Acquire (^^^LPC0.PSMX, 0xFFFF)
                            BLSC (Local0)
                            Release (^^^LPC0.PSMX)
                            Local3 = DerefOf (BLVL [Local0])
                            ^^^AFN7 (Local3)
                        }
                        ElseIf ((TPOS >= 0x40))
                        {
                            Divide ((Arg0 - 0x14), 0x05, Local1, Local0)
                            If ((Local0 == 0x10))
                            {
                                Local0 = 0x0F
                            }

                            ^^^LPC0.BRNS = Local0
                            Acquire (^^^LPC0.PSMX, 0xFFFF)
                            VBRS (Local0)
                            Release (^^^LPC0.PSMX)
                        }
                        Else
                        {
                            VBRG ()
                            VBRS (^^^LPC0.BRNS)
                        }
                    }
                }

                Device (CRT)
                {
                    Name (_ADR, 0x0100)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CRT0)
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return (0x1D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CRT0)
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                    }
                }

                Device (HDMI)
                {
                    Name (_ADR, 0x0210)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (HDM0)
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return (0x1D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (HDM0)
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                    }
                }

                Name (TGLP, 0x00)
                Name (TGLT, Package (0x04)
                {
                    Package (0x0A)
                    {
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01
                    }, 

                    Package (0x0A)
                    {
                        0x01, 
                        0x02, 
                        0x03, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01
                    }, 

                    Package (0x0A)
                    {
                        0x01, 
                        0x08, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x09, 
                        0x01
                    }, 

                    Package (0x0A)
                    {
                        0x01, 
                        0x02, 
                        0x03, 
                        0x08, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x01, 
                        0x09, 
                        0x01
                    }
                })
                Method (SWIH, 0, NotSerialized)
                {
                    VUPS ()
                    Local0 = ^^LPC0.GCDE /* \_SB_.PCI0.LPC0.GCDE */
                    Local1 = ^^LPC0.DADD /* \_SB_.PCI0.LPC0.DADD */
                    If ((Local1 == 0x01))
                    {
                        TGLP = 0x00
                    }
                    ElseIf ((Local1 == 0x03))
                    {
                        TGLP = 0x01
                    }
                    ElseIf ((Local1 == 0x09))
                    {
                        TGLP = 0x02
                    }
                    ElseIf ((Local1 == 0x0B))
                    {
                        TGLP = 0x03
                    }

                    Local2 = DerefOf (DerefOf (TGLT [TGLP]) [Local0])
                    LCD0 = ((Local2 & 0x01) >> 0x00)
                    CRT0 = ((Local2 & 0x02) >> 0x01)
                    HDM0 = ((Local2 & 0x08) >> 0x03)
                    Notify (VGA, 0x80) // Status Change
                }

                Name (ATIB, Buffer (0x0100){})
                Method (ATIF, 2, Serialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Return (AF00 ())
                    }

                    If ((Arg0 == 0x01))
                    {
                        Return (AF01 ())
                    }

                    If ((Arg0 == 0x02))
                    {
                        Return (AF02 ())
                    }

                    If ((Arg0 == 0x03))
                    {
                        Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
                    }

                    If ((Arg0 == 0x04))
                    {
                        Return (AF04 ())
                    }

                    If ((Arg0 == 0x0F))
                    {
                        Return (AF15 ())
                    }
                    Else
                    {
                        CreateWordField (ATIB, 0x00, SSZE)
                        CreateWordField (ATIB, 0x02, VERN)
                        CreateDWordField (ATIB, 0x04, NMSK)
                        CreateDWordField (ATIB, 0x08, SFUN)
                        SSZE = 0x00
                        VERN = 0x00
                        NMSK = 0x00
                        SFUN = 0x00
                        Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                    }
                }

                Method (AF00, 0, NotSerialized)
                {
                    P80H = 0xF0
                    CreateWordField (ATIB, 0x00, SSZE)
                    CreateWordField (ATIB, 0x02, VERN)
                    CreateDWordField (ATIB, 0x04, NMSK)
                    CreateDWordField (ATIB, 0x08, SFUN)
                    SSZE = 0x0C
                    VERN = 0x01
                    If ((PXEN == 0x80000000))
                    {
                        NMSK = 0x11
                    }
                    Else
                    {
                        NMSK = 0x51
                    }

                    If ((AF7E == 0x80000001))
                    {
                        NMSK |= 0x80
                    }

                    MSKN = NMSK /* \_SB_.PCI0.VGA_.AF00.NMSK */
                    SFUN = 0x400F
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Name (NCOD, 0xD0)
                Method (AF01, 0, NotSerialized)
                {
                    P80H = 0xF1
                    CreateWordField (ATIB, 0x00, SSZE)
                    CreateDWordField (ATIB, 0x02, VMSK)
                    CreateDWordField (ATIB, 0x06, FLGS)
                    CreateByteField (ATIB, 0x0A, NCOD)
                    VMSK = 0x0B
                    SSZE = 0x0B
                    VMSK = 0x03
                    FLGS = 0x02
                    NCOD = 0xD0
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Name (PSBR, Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                })
                Name (MSKN, 0x00)
                Name (SEXM, 0x00)
                Name (STHG, 0x00)
                Name (STHI, 0x00)
                Name (SFPG, 0x00)
                Name (SFPI, 0x00)
                Name (SSPS, 0x00)
                Name (SSDM, 0x0A)
                Name (SCDY, 0x00)
                Name (SACT, Buffer (0x05)
                {
                     0x01, 0x02, 0x03, 0x08, 0x09                     // .....
                })
                Method (AF02, 0, NotSerialized)
                {
                    P80H = 0xF2
                    CreateBitField (PSBR, 0x00, PDSW)
                    CreateBitField (PSBR, 0x01, PEXM)
                    CreateBitField (PSBR, 0x02, PTHR)
                    CreateBitField (PSBR, 0x03, PFPS)
                    CreateBitField (PSBR, 0x04, PSPS)
                    CreateBitField (PSBR, 0x05, PDCC)
                    CreateBitField (PSBR, 0x06, PXPS)
                    CreateBitField (PSBR, 0x07, PBRT)
                    CreateWordField (ATIB, 0x00, SSZE)
                    CreateDWordField (ATIB, 0x02, PSBI)
                    CreateByteField (ATIB, 0x06, EXPM)
                    CreateByteField (ATIB, 0x07, THRM)
                    CreateByteField (ATIB, 0x08, THID)
                    CreateByteField (ATIB, 0x09, FPWR)
                    CreateByteField (ATIB, 0x0A, FPID)
                    CreateByteField (ATIB, 0x0B, SPWR)
                    CreateByteField (ATIB, 0x0C, BRTL)
                    SSZE = 0x0D
                    PSBI = PSBR /* \_SB_.PCI0.VGA_.PSBR */
                    If (PDSW)
                    {
                        P80H = 0x82
                        PDSW = Zero
                    }

                    If (PEXM)
                    {
                        EXPM = SEXM /* \_SB_.PCI0.VGA_.SEXM */
                        SEXM = Zero
                        PEXM = Zero
                    }

                    If (PTHR)
                    {
                        THRM = STHG /* \_SB_.PCI0.VGA_.STHG */
                        THID = STHI /* \_SB_.PCI0.VGA_.STHI */
                        STHG = Zero
                        STHI = Zero
                        PTHR = Zero
                    }

                    If (PFPS)
                    {
                        FPWR = SFPG /* \_SB_.PCI0.VGA_.SFPG */
                        FPWR = SFPI /* \_SB_.PCI0.VGA_.SFPI */
                        SFPG = Zero
                        SFPI = Zero
                        PFPS = Zero
                    }

                    If (PSPS)
                    {
                        SPWR = SSPS /* \_SB_.PCI0.VGA_.SSPS */
                        PSPS = Zero
                    }

                    If (PXPS)
                    {
                        P80H = 0xA2
                        PXPS = Zero
                    }

                    If (PBRT)
                    {
                        P80H = 0xF7
                        PBRT = Zero
                    }

                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Method (AF03, 2, NotSerialized)
                {
                    P80H = 0xF3
                    CreateWordField (ATIB, 0x00, SSZE)
                    CreateWordField (ATIB, 0x02, SSDP)
                    CreateWordField (ATIB, 0x04, SCDP)
                    SSDP = Arg0
                    SCDP = Arg1
                    Name (NXTD, 0x06)
                    Name (CIDX, 0x06)
                    Local1 = SSDP /* \_SB_.PCI0.VGA_.AF03.SSDP */
                    Local1 &= 0x8B
                    Local2 = SCDP /* \_SB_.PCI0.VGA_.AF03.SCDP */
                    Local2 |= 0x01
                    P80H = Local2
                    Local0 = Zero
                    While ((Local0 < SizeOf (SACT)))
                    {
                        Local3 = DerefOf (SACT [Local0])
                        If ((Local3 == Local1))
                        {
                            CIDX = Local0
                            Local0 = SizeOf (SACT)
                        }
                        Else
                        {
                            Local0++
                        }
                    }

                    Local0 = CIDX /* \_SB_.PCI0.VGA_.AF03.CIDX */
                    While ((Local0 < SizeOf (SACT)))
                    {
                        Local0++
                        If ((Local0 == SizeOf (SACT)))
                        {
                            Local0 = 0x00
                        }

                        Local3 = DerefOf (SACT [Local0])
                        If (((Local3 & Local2) == Local3))
                        {
                            NXTD = Local0
                            Local0 = SizeOf (SACT)
                        }
                    }

                    If ((NXTD == SizeOf (SACT)))
                    {
                        SSDP = Zero
                    }
                    Else
                    {
                        Local0 = NXTD /* \_SB_.PCI0.VGA_.AF03.NXTD */
                        Local3 = DerefOf (SACT [Local0])
                        SSDP &= 0xFFFFFF74
                        SSDP |= Local3
                    }

                    SSZE = 0x04
                    P80H = SSDP /* \_SB_.PCI0.VGA_.AF03.SSDP */
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Method (AF04, 0, NotSerialized)
                {
                    P80H = 0xF4
                    CreateWordField (ATIB, 0x00, SSZE)
                    CreateByteField (ATIB, 0x02, LIDS)
                    SSZE = 0x03
                    If (^^LPC0.ILID)
                    {
                        LIDS = 0x00
                    }
                    Else
                    {
                        LIDS = 0x01
                    }

                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Method (AFN0, 0, Serialized)
                {
                    If ((MSKN & 0x01))
                    {
                        CreateBitField (PSBR, 0x00, PDSW)
                        PDSW = One
                        Notify (VGA, NCOD)
                    }
                }

                Method (AFN3, 2, Serialized)
                {
                    If ((MSKN & 0x08))
                    {
                        Local0 = Arg0
                        SFPI = Local0
                        Local0 = Arg1
                        SFPG = Local0 &= 0x03
                        CreateBitField (PSBR, 0x03, PFPS)
                        PFPS = One
                        Notify (VGA, NCOD)
                    }
                }

                Method (AFN4, 1, Serialized)
                {
                    If ((MSKN & 0x10))
                    {
                        Local0 = Arg0
                        Local1 = SSPS /* \_SB_.PCI0.VGA_.SSPS */
                        SSPS = Local0
                        If ((Local0 == Local1)){}
                        Else
                        {
                            CreateBitField (PSBR, 0x04, PSPS)
                            PSPS = One
                            Notify (VGA, NCOD)
                        }
                    }
                }

                Method (AFN5, 0, Serialized)
                {
                    If ((MSKN & 0x20))
                    {
                        CreateBitField (PSBR, 0x05, PDCC)
                        PDCC = One
                        Notify (VGA, NCOD)
                    }
                }

                Method (AFN6, 0, Serialized)
                {
                    If ((MSKN & 0x40))
                    {
                        CreateBitField (PSBR, 0x06, PXPS)
                        PXPS = One
                        Notify (VGA, NCOD)
                    }
                }

                Method (AFN7, 1, Serialized)
                {
                    If ((MSKN & 0x80))
                    {
                        CreateBitField (PSBR, 0x07, PBRT)
                        PBRT = One
                        CreateByteField (ATIB, 0x0C, BRTL)
                        BRTL = Arg0
                        Notify (VGA, NCOD)
                    }
                }

                Method (AF15, 0, NotSerialized)
                {
                    P80H = 0xFF
                    CreateWordField (ATIB, 0x00, DNUM)
                    CreateWordField (ATIB, 0x02, DSZE)
                    DSZE = 0x08
                    ^^LPC0.PHS3 (0x8D, 0x0F, ATIB)
                    ATIB = ^^LPC0.INFO /* \_SB_.PCI0.LPC0.INFO */
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Name (AT00, Buffer (0xFF){})
                Name (AT01, Buffer (0x03){})
                Method (ATCS, 2, Serialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        ATC0 ()
                    }

                    If ((Arg0 == 0x01))
                    {
                        ATC1 ()
                    }

                    If ((Arg0 == 0x02))
                    {
                        ATC2 (Arg1)
                    }

                    If ((Arg0 == 0x03))
                    {
                        ATC3 ()
                    }

                    If ((Arg0 == 0x04))
                    {
                        ATC4 (Arg1)
                    }

                    Return (AT00) /* \_SB_.PCI0.VGA_.AT00 */
                }

                Method (ATC0, 0, NotSerialized)
                {
                    CreateWordField (AT00, 0x00, SZZE)
                    CreateWordField (AT00, 0x02, INTF)
                    CreateDWordField (AT00, 0x04, SUPP)
                    SZZE = 0x08
                    INTF = 0x01
                    SUPP = 0x0F
                }

                Method (ATC1, 0, Serialized)
                {
                    CreateWordField (AT00, 0x00, SZZE)
                    CreateDWordField (AT00, 0x02, VFMK)
                    CreateDWordField (AT00, 0x06, FLAG)
                    CreateField (AT00, 0x30, 0x01, DOCK)
                    SZZE = 0x0A
                    VFMK = 0x01
                    FLAG = 0x00
                    DOCK = 0x01
                }

                Method (ATC2, 1, Serialized)
                {
                    CreateField (Arg0, 0x10, 0x03, FUCC)
                    CreateField (Arg0, 0x13, 0x06, DEVV)
                    CreateByteField (Arg0, 0x03, BUSS)
                    CreateDWordField (Arg0, 0x04, VFMK)
                    CreateDWordField (Arg0, 0x06, FLAG)
                    CreateField (Arg0, 0x30, 0x01, ADVC)
                    CreateField (Arg0, 0x31, 0x01, WFCM)
                    CreateByteField (Arg0, 0x08, RQST)
                    CreateByteField (Arg0, 0x09, PFRQ)
                    CreateWordField (AT00, 0x00, SZZE)
                    CreateByteField (AT00, 0x02, RETV)
                    SZZE = 0x03
                    RETV = 0x01
                    0x02 = ALIB /* External reference */
                    Arg0
                    AT00
                }

                Method (ATC3, 0, Serialized)
                {
                    CreateWordField (AT00, 0x00, SZZE)
                    CreateByteField (AT00, 0x02, RETV)
                    CreateWordField (AT01, 0x00, SZZB)
                    CreateByteField (AT01, 0x02, PSPP)
                    SZZE = 0x03
                    RETV = 0x01
                    SZZB = 0x03
                    PSPP = 0x01
                    0x03 = ALIB /* External reference */
                    AT01
                    AT00
                }

                Method (ATC4, 1, Serialized)
                {
                    CreateField (Arg0, 0x10, 0x03, FUCC)
                    CreateField (Arg0, 0x13, 0x06, DEVV)
                    CreateByteField (Arg0, 0x03, BUSS)
                    CreateByteField (Arg0, 0x04, NULN)
                    CreateWordField (AT00, 0x00, SZZE)
                    CreateByteField (AT00, 0x02, NULM)
                    SZZE = 0x03
                    NULM = 0x01
                    0x04 = ALIB /* External reference */
                    Arg0
                    AT00
                }
            }

            Scope (VGA)
            {
                Name (ATPB, Buffer (0x0100){})
                Name (DSID, 0xFFFFFFFF)
                Name (GPFA, 0xFFFFFFFF)
                Name (HSID, 0xFFFFFFFF)
                Name (CNT0, Buffer (0x05)
                {
                     0x05, 0x00, 0x00, 0x10, 0x01                     // .....
                })
                Name (CNT1, Buffer (0x05)
                {
                     0x05, 0x01, 0x00, 0x00, 0x01                     // .....
                })
                Name (CNT2, Buffer (0x05)
                {
                     0x07, 0x03, 0x00, 0x10, 0x02                     // .....
                })
                Name (CNT3, Buffer (0x05)
                {
                     0x07, 0x07, 0x00, 0x20, 0x02                     // ... .
                })
                Name (CNT4, Buffer (0x05)
                {
                     0x00, 0x09, 0x00, 0x30, 0x02                     // ...0.
                })
                Name (CNT5, Buffer (0x05)
                {
                     0x01, 0x00, 0x01, 0x10, 0x01                     // .....
                })
                Name (CNT6, Buffer (0x05)
                {
                     0x01, 0x01, 0x01, 0x00, 0x01                     // .....
                })
                Name (CNT7, Buffer (0x05)
                {
                     0x03, 0x03, 0x01, 0x10, 0x02                     // .....
                })
                Name (CNT8, Buffer (0x05)
                {
                     0x03, 0x07, 0x01, 0x20, 0x02                     // ... .
                })
                Name (CNT9, Buffer (0x05)
                {
                     0x00, 0x09, 0x01, 0x30, 0x02                     // ...0.
                })
                Method (ATPX, 2, Serialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Return (PX00 ())
                    }

                    If ((Arg0 == 0x01))
                    {
                        Return (PX01 ())
                    }

                    If ((Arg0 == 0x02))
                    {
                        PX02 (DerefOf (Arg1 [0x02]))
                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }

                    If ((Arg0 == 0x03))
                    {
                        PX03 (DerefOf (Arg1 [0x02]))
                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }

                    If ((Arg0 == 0x04))
                    {
                        PX04 (DerefOf (Arg1 [0x02]))
                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }

                    If ((Arg0 == 0x08))
                    {
                        Return (PX08 ())
                    }

                    If ((Arg0 == 0x09))
                    {
                        Return (PX09 ())
                    }

                    CreateWordField (ATPB, 0x00, SSZE)
                    CreateWordField (ATPB, 0x02, VERN)
                    CreateDWordField (ATPB, 0x04, SFUN)
                    SSZE = 0x00
                    VERN = 0x00
                    SFUN = 0x00
                    Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                }

                Method (PX00, 0, NotSerialized)
                {
                    P80H = 0xE0
                    CreateWordField (ATPB, 0x00, SSZE)
                    CreateWordField (ATPB, 0x02, VERN)
                    CreateDWordField (ATPB, 0x04, SFUN)
                    SSZE = 0x08
                    VERN = 0x01
                    If ((PXEN == 0x80000000))
                    {
                        SFUN = 0x00
                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }

                    If ((PXMX == 0x80000000))
                    {
                        SFUN = 0x018F
                    }
                    Else
                    {
                        SFUN = 0x0183
                    }

                    If ((PXDY == 0x80000001))
                    {
                        SFUN &= 0xFFFFFFFD
                    }

                    If (((PXDY == 0x80000001) && (PXFX == 0x80000001)))
                    {
                        SFUN |= 0x02
                    }

                    Local0 = ^^PB4.VGA.SVID /* \_SB_.PCI0.PB4_.VGA_.SVID */
                    Local1 = ^^PB4.HDAU.SVID /* \_SB_.PCI0.PB4_.HDAU.SVID */
                    If ((Local0 != 0xFFFFFFFF))
                    {
                        DSID = Local0
                    }

                    If ((Local1 != 0xFFFFFFFF))
                    {
                        HSID = Local1
                    }

                    Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                }

                Method (PX01, 0, NotSerialized)
                {
                    P80H = 0xE1
                    CreateWordField (ATPB, 0x00, SSZE)
                    CreateDWordField (ATPB, 0x02, VMSK)
                    CreateDWordField (ATPB, 0x06, FLGS)
                    SSZE = 0x0A
                    VMSK = 0xFF
                    If ((PXMX == 0x80000000))
                    {
                        FLGS = 0x4B
                    }
                    Else
                    {
                        FLGS = 0x00
                        If ((PXDY == 0x80000001))
                        {
                            FLGS |= 0x80
                        }
                    }

                    Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                }

                Method (PX02, 1, NotSerialized)
                {
                }

                Method (PX03, 1, NotSerialized)
                {
                    CreateWordField (ATPB, 0x00, SSZE)
                    CreateWordField (ATPB, 0x02, DPSW)
                    SSZE = 0x04
                    DPSW = (Arg0 & 0x01)
                    If (DPSW)
                    {
                        P80H = 0x02E3
                        ^^SMB.P06O = 0x01
                        ^^SMB.P06E = 0x00
                    }
                    Else
                    {
                        P80H = 0x01E3
                        ^^SMB.P06O = 0x00
                        ^^SMB.P06E = 0x00
                    }
                }

                Method (PX04, 1, NotSerialized)
                {
                    P80H = 0xE4
                    CreateWordField (ATPB, 0x00, SSZE)
                    CreateWordField (ATPB, 0x02, ICSW)
                    SSZE = 0x04
                    ICSW = (Arg0 & 0x01)
                    If (ICSW)
                    {
                        P80H = 0x02E4
                        ^^SMB.P14O = 0x01
                        ^^SMB.P14E = 0x00
                    }
                    Else
                    {
                        P80H = 0x01E4
                        ^^SMB.P14O = 0x00
                        ^^SMB.P14E = 0x00
                    }
                }

                Method (PX08, 0, NotSerialized)
                {
                    P80H = 0xE8
                    CreateWordField (ATPB, 0x00, CNUM)
                    CreateWordField (ATPB, 0x02, CSSZ)
                    CNUM = 0x0A
                    CSSZ = 0x05
                    CreateField (ATPB, 0x20, 0x28, CTI0)
                    CTI0 = CNT0 /* \_SB_.PCI0.VGA_.CNT0 */
                    CreateField (ATPB, 0x48, 0x28, CTI1)
                    CTI1 = CNT1 /* \_SB_.PCI0.VGA_.CNT1 */
                    CreateField (ATPB, 0x70, 0x28, CTI2)
                    CreateByteField (CNT2, 0x00, FLG2)
                    If ((LCDT == 0x80000001))
                    {
                        If ((DSCT == 0x80000001))
                        {
                            FLG2 = 0x00
                        }

                        If ((DSCT == 0x80000002))
                        {
                            FLG2 = 0x07
                        }
                    }

                    CTI2 = CNT2 /* \_SB_.PCI0.VGA_.CNT2 */
                    CreateField (ATPB, 0x98, 0x28, CTI3)
                    CreateByteField (CNT3, 0x00, FLG3)
                    If ((LCDT == 0x80000000))
                    {
                        FLG3 = 0x07
                    }

                    If ((LCDT == 0x80000001))
                    {
                        FLG3 = 0x00
                        If ((DSCT == 0x80000002))
                        {
                            FLG3 = 0x00
                        }
                    }

                    If ((LCDT == 0x80000002))
                    {
                        FLG3 = 0x00
                        If ((DSCT == 0x80000002))
                        {
                            FLG3 = 0x07
                        }
                    }

                    CTI3 = CNT3 /* \_SB_.PCI0.VGA_.CNT3 */
                    CreateField (ATPB, 0xC0, 0x28, CTI4)
                    CTI4 = CNT4 /* \_SB_.PCI0.VGA_.CNT4 */
                    CreateField (ATPB, 0xE8, 0x28, CTI5)
                    CTI5 = CNT5 /* \_SB_.PCI0.VGA_.CNT5 */
                    CreateField (ATPB, 0x0110, 0x28, CTI6)
                    CTI6 = CNT6 /* \_SB_.PCI0.VGA_.CNT6 */
                    CreateField (ATPB, 0x0138, 0x28, CTI7)
                    CreateByteField (CNT7, 0x00, FLG7)
                    If ((LCDT == 0x80000001))
                    {
                        If ((DSCT == 0x80000001))
                        {
                            FLG7 = 0x00
                        }

                        If ((DSCT == 0x80000002))
                        {
                            FLG7 = 0x07
                        }
                    }

                    CTI7 = CNT7 /* \_SB_.PCI0.VGA_.CNT7 */
                    CreateField (ATPB, 0x0160, 0x28, CTI8)
                    CreateByteField (CNT8, 0x00, FLG8)
                    If ((LCDT == 0x80000000))
                    {
                        FLG8 = 0x07
                    }

                    If ((LCDT == 0x80000001))
                    {
                        FLG8 = 0x00
                    }

                    If ((LCDT == 0x80000002))
                    {
                        FLG8 = 0x00
                    }

                    If ((DSCT == 0x80000002))
                    {
                        FLG8 = 0x07
                    }

                    CTI8 = CNT8 /* \_SB_.PCI0.VGA_.CNT8 */
                    CreateField (ATPB, 0x0188, 0x28, CTI9)
                    CreateByteField (CNT9, 0x00, FLG9)
                    If ((DSCT == 0x80000002))
                    {
                        FLG9 = 0x07
                    }

                    CTI9 = CNT9 /* \_SB_.PCI0.VGA_.CNT9 */
                    Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                }

                Method (PX09, 0, NotSerialized)
                {
                    P80H = 0xE9
                    CreateWordField (ATPB, 0x00, CNUM)
                    CreateWordField (ATPB, 0x02, CSSZ)
                    CNUM = 0x00
                    CSSZ = 0x00
                    CreateByteField (ATPB, 0x04, ATI0)
                    CreateByteField (ATPB, 0x05, HPD0)
                    CreateByteField (ATPB, 0x06, DDC0)
                    ATI0 = 0x00
                    HPD0 = 0x00
                    DDC0 = 0x00
                    CreateByteField (ATPB, 0x07, ATI1)
                    CreateByteField (ATPB, 0x08, HPD1)
                    CreateByteField (ATPB, 0x09, DDC1)
                    ATI1 = 0x00
                    HPD1 = 0x00
                    DDC1 = 0x00
                    Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                }
            }

            Scope (VGA)
            {
                OperationRegion (REVD, SystemMemory, 0xDEE2CD18, 0x00000008)
                Field (REVD, AnyAcc, NoLock, Preserve)
                {
                    SROM,   32, 
                    VROM,   32
                }

                Name (TVGA, Buffer (0x0004)
                {
                     0x00                                             // .
                })
                Method (XTRM, 2, Serialized)
                {
                    Local0 = (Arg0 + Arg1)
                    If ((Local0 <= SROM))
                    {
                        Local1 = (Arg1 * 0x08)
                        Local2 = (Arg0 * 0x08)
                        TVGA = VROM /* \_SB_.PCI0.VGA_.VROM */
                        CreateField (TVGA, Local2, Local1, TEMP)
                        Name (RETB, Buffer (Arg1){})
                        RETB = TEMP /* \_SB_.PCI0.VGA_.XTRM.TEMP */
                        Return (RETB) /* \_SB_.PCI0.VGA_.XTRM.RETB */
                    }
                    ElseIf ((Arg0 < SROM))
                    {
                        Local3 = (SROM - Arg0)
                        Local1 = (Local3 * 0x08)
                        Local2 = (Arg0 * 0x08)
                        TVGA = VROM /* \_SB_.PCI0.VGA_.VROM */
                        CreateField (TVGA, Local2, Local1, TEM)
                        Name (RETC, Buffer (Local3){})
                        RETC = TEM /* \_SB_.PCI0.VGA_.XTRM.TEM_ */
                        Return (RETC) /* \_SB_.PCI0.VGA_.XTRM.RETC */
                    }
                    Else
                    {
                        Name (RETD, Buffer (0x01){})
                        Return (RETD) /* \_SB_.PCI0.VGA_.XTRM.RETD */
                    }
                }
            }
        }

        Device (ACAD)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Local0 = 0x01
                If (^^PCI0.LPC0.EC.ECOK)
                {
                    Local0 = ^^PCI0.LPC0.EC.ACPW /* \_SB_.PCI0.LPC0.EC__.ACPW */
                }

                Return (Local0)
            }
        }

        Mutex (BATM, 0x00)
        Name (BASC, 0x01)
        Name (SBCM, Buffer (0x01)
        {
             0x00                                             // .
        })
        Name (SBFC, Buffer (0x02)
        {
             0x00, 0x00                                       // ..
        })
        Name (SBDC, Buffer (0x02)
        {
             0x00, 0x00                                       // ..
        })
        Name (SBDV, Buffer (0x02)
        {
             0x00, 0x00                                       // ..
        })
        Name (SBSN, Buffer (0x02)
        {
             0x00, 0x00                                       // ..
        })
        Name (SBDN, Buffer (0x10)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (SBCH, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (SBMN, Buffer (0x10)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (GBFE, 3, NotSerialized)
        {
            CreateByteField (Arg0, Arg1, TIDX)
            Arg2 = TIDX /* \_SB_.GBFE.TIDX */
        }

        Method (PBFE, 3, NotSerialized)
        {
            CreateByteField (Arg0, Arg1, TIDX)
            TIDX = Arg2
        }

        Method (ITOS, 1, NotSerialized)
        {
            Local0 = Buffer (0x09)
                {
                    /* 0000 */  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                    /* 0008 */  0x00                                             // .
                }
            Local7 = Buffer (0x11)
                {
                    "0123456789ABCDEF"
                }
            Local1 = 0x08
            Local2 = 0x00
            Local3 = 0x00
            While (Local1)
            {
                Local1--
                Local4 = ((Arg0 >> (Local1 << 0x02)) & 0x0F)
                If (Local4)
                {
                    Local3 = Ones
                }

                If (Local3)
                {
                    GBFE (Local7, Local4, RefOf (Local5))
                    PBFE (Local0, Local2, Local5)
                    Local2++
                }
            }

            Return (Local0)
        }

        Method (WAEC, 0, NotSerialized)
        {
            Name (CUNT, 0x14)
            While ((^PCI0.LPC0.EC.HSID == 0x00))
            {
                Sleep (0x05)
                CUNT--
                If ((CUNT == 0x00))
                {
                    Break
                }
            }
        }

        Method (GBIF, 3, NotSerialized)
        {
            If (Arg2)
            {
                If ((BASC != 0x00))
                {
                    Acquire (BATM, 0xFFFF)
                    ^PCI0.LPC0.EC.HIID = (Arg0 | 0x01)
                    WAEC ()
                    Local7 = ^PCI0.LPC0.EC.SBCM /* \_SB_.PCI0.LPC0.EC__.SBCM */
                    SBCM = ^PCI0.LPC0.EC.SBCM /* \_SB_.PCI0.LPC0.EC__.SBCM */
                    Arg1 [0x00] = (Local7 ^ 0x01)
                    ^PCI0.LPC0.EC.HIID = Arg0
                    WAEC ()
                    If (Local7)
                    {
                        Arg1 [0x02] = (^PCI0.LPC0.EC.SBFC * 0x0A)
                    }
                    Else
                    {
                        Arg1 [0x02] = ^PCI0.LPC0.EC.SBFC /* \_SB_.PCI0.LPC0.EC__.SBFC */
                    }

                    SBFC = ^PCI0.LPC0.EC.SBFC /* \_SB_.PCI0.LPC0.EC__.SBFC */
                    ^PCI0.LPC0.EC.HIID = (Arg0 | 0x02)
                    WAEC ()
                    If (Local7)
                    {
                        Local0 = (^PCI0.LPC0.EC.SBDC * 0x0A)
                    }
                    Else
                    {
                        Local0 = ^PCI0.LPC0.EC.SBDC /* \_SB_.PCI0.LPC0.EC__.SBDC */
                    }

                    SBDC = ^PCI0.LPC0.EC.SBDC /* \_SB_.PCI0.LPC0.EC__.SBDC */
                    Arg1 [0x01] = Local0
                    Divide (Local0, 0x14, Local1, Arg1 [0x05])
                    Divide (Local0, 0x64, Local1, Arg1 [0x06])
                    Arg1 [0x04] = ^PCI0.LPC0.EC.SBDV /* \_SB_.PCI0.LPC0.EC__.SBDV */
                    SBDV = ^PCI0.LPC0.EC.SBDV /* \_SB_.PCI0.LPC0.EC__.SBDV */
                    Local0 = ^PCI0.LPC0.EC.SBSN /* \_SB_.PCI0.LPC0.EC__.SBSN */
                    SBSN = ^PCI0.LPC0.EC.SBSN /* \_SB_.PCI0.LPC0.EC__.SBSN */
                    Name (SERN, Buffer (0x06)
                    {
                        "     "
                    })
                    Local2 = 0x04
                    While (Local0)
                    {
                        Divide (Local0, 0x0A, Local1, Local0)
                        SERN [Local2] = (Local1 + 0x30)
                        Local2--
                    }

                    Arg1 [0x0A] = SERN /* \_SB_.GBIF.SERN */
                    ^PCI0.LPC0.EC.HIID = (Arg0 | 0x06)
                    WAEC ()
                    Arg1 [0x09] = ^PCI0.LPC0.EC.SBDN /* \_SB_.PCI0.LPC0.EC__.SBDN */
                    SBDN = ^PCI0.LPC0.EC.SBDN /* \_SB_.PCI0.LPC0.EC__.SBDN */
                    ^PCI0.LPC0.EC.HIID = (Arg0 | 0x04)
                    WAEC ()
                    Name (BTYP, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    BTYP = ^PCI0.LPC0.EC.SBCH /* \_SB_.PCI0.LPC0.EC__.SBCH */
                    SBCH = ^PCI0.LPC0.EC.SBCH /* \_SB_.PCI0.LPC0.EC__.SBCH */
                    Arg1 [0x0B] = BTYP /* \_SB_.GBIF.BTYP */
                    ^PCI0.LPC0.EC.HIID = (Arg0 | 0x05)
                    WAEC ()
                    Arg1 [0x0C] = ^PCI0.LPC0.EC.SBMN /* \_SB_.PCI0.LPC0.EC__.SBMN */
                    SBMN = ^PCI0.LPC0.EC.SBMN /* \_SB_.PCI0.LPC0.EC__.SBMN */
                    BASC = 0x00
                    Release (BATM)
                }
                Else
                {
                    Local7 = ToInteger (SBCM)
                    Arg1 [0x00] = (Local7 ^ 0x01)
                    If (Local7)
                    {
                        Arg1 [0x02] = (ToInteger (SBFC) * 0x0A)
                    }
                    Else
                    {
                        Arg1 [0x02] = ToInteger (SBFC)
                    }

                    If (Local7)
                    {
                        Local0 = (ToInteger (SBDC) * 0x0A)
                    }
                    Else
                    {
                        Local0 = ToInteger (SBDC)
                    }

                    Arg1 [0x01] = Local0
                    Divide (Local0, 0x14, Local1, Arg1 [0x05])
                    Divide (Local0, 0x64, Local1, Arg1 [0x06])
                    Arg1 [0x04] = ToInteger (SBDV)
                    Local0 = ToInteger (SBSN)
                    Name (SRNB, Buffer (0x06)
                    {
                        "     "
                    })
                    Local2 = 0x04
                    While (Local0)
                    {
                        Divide (Local0, 0x0A, Local1, Local0)
                        SRNB [Local2] = (Local1 + 0x30)
                        Local2--
                    }

                    Arg1 [0x0A] = SRNB /* \_SB_.GBIF.SRNB */
                    Arg1 [0x09] = ToString (SBDN, Ones)
                    Name (BTTP, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    BTTP = ToBuffer (SBCH)
                    Arg1 [0x0B] = BTTP /* \_SB_.GBIF.BTTP */
                    Arg1 [0x0C] = ToString (SBMN, Ones)
                }
            }
            Else
            {
                Arg1 [0x01] = 0xFFFFFFFF
                Arg1 [0x05] = 0x00
                Arg1 [0x06] = 0x00
                Arg1 [0x02] = 0xFFFFFFFF
            }

            Return (Arg1)
        }

        Method (GBST, 4, NotSerialized)
        {
            If (^PCI0.LPC0.EC.BFUD)
            {
                BFUD ()
            }

            Acquire (BATM, 0xFFFF)
            If ((Arg1 & 0x20))
            {
                Local0 = 0x02
            }
            ElseIf ((Arg1 & 0x40))
            {
                Local0 = 0x01
            }
            Else
            {
                Local0 = 0x00
            }

            If ((Arg1 & 0x0F)){}
            Else
            {
                Local0 |= 0x04
            }

            If (((Arg1 & 0x0F) == 0x0F))
            {
                Local0 = 0x04
                Local1 = 0x00
                Local2 = 0x00
                Local3 = 0x00
            }
            Else
            {
                Local3 = ^PCI0.LPC0.EC.ECVO /* \_SB_.PCI0.LPC0.EC__.ECVO */
                If (Arg2)
                {
                    Local2 = (^PCI0.LPC0.EC.ECRC * 0x0A)
                }
                Else
                {
                    Local2 = ^PCI0.LPC0.EC.ECRC /* \_SB_.PCI0.LPC0.EC__.ECRC */
                }

                Local1 = ^PCI0.LPC0.EC.ECAC /* \_SB_.PCI0.LPC0.EC__.ECAC */
                If ((Local1 >= 0x8000))
                {
                    If ((Local0 & 0x01))
                    {
                        Local1 = (0x00010000 - Local1)
                    }
                    Else
                    {
                        Local1 = 0x00
                    }
                }
                ElseIf (!(Local0 & 0x02))
                {
                    Local1 = 0x00
                }

                If (Arg2)
                {
                    Local1 *= Local3
                    Divide (Local1, 0x03E8, Local7, Local1)
                }
            }

            Arg3 [0x00] = Local0
            Arg3 [0x01] = Local1
            Arg3 [0x02] = Local2
            Arg3 [0x03] = Local3
            Release (BATM)
            Return (Arg3)
        }

        Device (BAT1)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (B0ST, 0x00)
            Name (BT0I, Package (0x0D)
            {
                0x00, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0x01, 
                0x2A30, 
                0x00, 
                0x00, 
                0x01, 
                0x01, 
                "", 
                "", 
                "", 
                ""
            })
            Name (BT0P, Package (0x04){})
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (^^PCI0.LPC0.EC.ECOK)
                {
                    If ((^^PCI0.LPC0.EC.MBTS != B0ST))
                    {
                        BASC = 0x01
                    }

                    B0ST = ^^PCI0.LPC0.EC.MBTS /* \_SB_.PCI0.LPC0.EC__.MBTS */
                }
                ElseIf ((RBEC (0x38) & 0x80))
                {
                    B0ST = 0x01
                }
                Else
                {
                    B0ST = 0x00
                }

                If (B0ST)
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                Local7 = 0x00
                Local6 = 0x01F4
                While ((!Local7 && Local6))
                {
                    If (^^PCI0.LPC0.EC.MBTS)
                    {
                        If (((^^PCI0.LPC0.EC.HB0S & 0x0F) == 0x0F))
                        {
                            Sleep (0x14)
                            Local6--
                        }
                        Else
                        {
                            Local7 = 0x01
                        }
                    }
                    Else
                    {
                        Local6 = 0x00
                    }
                }

                Return (GBIF (0x00, BT0I, Local7))
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Local0 = (DerefOf (BT0I [0x00]) ^ 0x01)
                Return (GBST (0x00, ^^PCI0.LPC0.EC.HB0S, Local0, BT0P))
            }

            Method (_BTP, 1, NotSerialized)  // _BTP: Battery Trip Point
            {
                ^^PCI0.LPC0.EC.HAM4 &= 0xEF
                If (Arg0)
                {
                    Local1 = Arg0
                    If (!DerefOf (BT0I [0x00]))
                    {
                        Divide (Local1, 0x0A, Local0, Local1)
                    }

                    ^^PCI0.LPC0.EC.HT0L = (Local1 & 0xFF)
                    ^^PCI0.LPC0.EC.HT0H = ((Local1 >> 0x08) & 0xFF)
                    ^^PCI0.LPC0.EC.HAM4 |= 0x10
                }
            }
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                If (^^PCI0.LPC0.EC.ECOK)
                {
                    ^^PCI0.LPC0.ILID = ^^PCI0.LPC0.EC.HPLD /* \_SB_.PCI0.LPC0.EC__.HPLD */
                    Return (^^PCI0.LPC0.ILID) /* \_SB_.PCI0.LPC0.ILID */
                }
                ElseIf ((RBEC (0x46) & 0x04))
                {
                    Return (0x01)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x16, 
                0x04
            })
            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (^^PCI0.LPC0.EC.ECOK)
                {
                    If (Arg0)
                    {
                        ^^PCI0.LPC0.EC.HWLO = 0x01
                        ^^PCI0.LPC0.LIDX = 0x01
                    }
                    Else
                    {
                        ^^PCI0.LPC0.EC.HWLO = 0x00
                        ^^PCI0.LPC0.LIDX = 0x00
                    }
                }
                ElseIf (Arg0)
                {
                    MBEC (0x32, 0xFF, 0x04)
                }
                Else
                {
                    MBEC (0x32, 0xFB, 0x00)
                }

                If (Arg0)
                {
                    ^^PCI0.LPC0.LIDX = 0x01
                }
                Else
                {
                    ^^PCI0.LPC0.LIDX = 0x00
                }
            }
        }

        Device (WMI1)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_WDG, Buffer (0xB4)
            {
                /* 0000 */  0x0E, 0x23, 0xF5, 0x51, 0x77, 0x96, 0xCD, 0x46,  // .#.Qw..F
                /* 0008 */  0xA1, 0xCF, 0xC0, 0xB2, 0x3E, 0xE3, 0x4D, 0xB7,  // ....>.M.
                /* 0010 */  0x41, 0x30, 0x50, 0x05, 0x64, 0x9A, 0x47, 0x98,  // A0P.d.G.
                /* 0018 */  0xF5, 0x33, 0x33, 0x4E, 0xA7, 0x07, 0x8E, 0x25,  // .33N...%
                /* 0020 */  0x1E, 0xBB, 0xC3, 0xA1, 0x41, 0x31, 0x01, 0x06,  // ....A1..
                /* 0028 */  0xEF, 0x54, 0x4B, 0x6A, 0xED, 0xA5, 0x33, 0x4D,  // .TKj..3M
                /* 0030 */  0x94, 0x55, 0xB0, 0xD9, 0xB4, 0x8D, 0xF4, 0xB3,  // .U......
                /* 0038 */  0x41, 0x32, 0x01, 0x06, 0xB6, 0xEB, 0xF1, 0x74,  // A2.....t
                /* 0040 */  0x7A, 0x92, 0x7D, 0x4C, 0x95, 0xDF, 0x69, 0x8E,  // z.}L..i.
                /* 0048 */  0x21, 0xE8, 0x0E, 0xB5, 0x41, 0x33, 0x01, 0x06,  // !...A3..
                /* 0050 */  0xFF, 0x04, 0xEF, 0x7E, 0x28, 0x43, 0x7C, 0x44,  // ...~(C|D
                /* 0058 */  0xB5, 0xBB, 0xD4, 0x49, 0x92, 0x5D, 0x53, 0x8D,  // ...I.]S.
                /* 0060 */  0x41, 0x34, 0x01, 0x06, 0x9E, 0x15, 0xDB, 0x8A,  // A4......
                /* 0068 */  0x32, 0x1E, 0x5C, 0x45, 0xBC, 0x93, 0x30, 0x8A,  // 2.\E..0.
                /* 0070 */  0x7E, 0xD9, 0x82, 0x46, 0x41, 0x35, 0x01, 0x01,  // ~..FA5..
                /* 0078 */  0xFD, 0xD9, 0x51, 0x26, 0x1C, 0x91, 0x69, 0x4B,  // ..Q&..iK
                /* 0080 */  0xB9, 0x4E, 0xD0, 0xDE, 0xD5, 0x96, 0x3B, 0xD7,  // .N....;.
                /* 0088 */  0x41, 0x36, 0x01, 0x06, 0x1A, 0x65, 0x64, 0x73,  // A6...eds
                /* 0090 */  0x2F, 0x13, 0xE7, 0x4F, 0xAD, 0xAA, 0x40, 0xC6,  // /..O..@.
                /* 0098 */  0xC7, 0xEE, 0x2E, 0x3B, 0x41, 0x37, 0x01, 0x06,  // ...;A7..
                /* 00A0 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 00A8 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 00B0 */  0x42, 0x41, 0x01, 0x00                           // BA..
            })
            Name (RETN, Package (0x05)
            {
                "Success", 
                "Not Supported", 
                "Invalid Parameter", 
                "Access Denied", 
                "System Busy"
            })
            Name (ITEM, Package (0x53)
            {
                Package (0x02)
                {
                    0x0E, 
                    "WakeOnLAN"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "EthernetLANOptionROM"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "USBBIOSSupport"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "AlwaysOnUSB"
                }, 

                Package (0x02)
                {
                    0x01, 
                    "TrackPoint"
                }, 

                Package (0x02)
                {
                    0x01, 
                    "TouchPad"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "FnKeyLock"
                }, 

                Package (0x02)
                {
                    0x04, 
                    "ThinkPadNumLock"
                }, 

                Package (0x02)
                {
                    0x0C, 
                    "PowerOnNumLock"
                }, 

                Package (0x02)
                {
                    0x05, 
                    "BootDisplayDevice"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "SpeedStep"
                }, 

                Package (0x02)
                {
                    0x09, 
                    "AdaptiveThermalManagementAC"
                }, 

                Package (0x02)
                {
                    0x09, 
                    "AdaptiveThermalManagementBattery"
                }, 

                Package (0x02)
                {
                    0x06, 
                    "CDROMSpeed"
                }, 

                Package (0x02)
                {
                    0x01, 
                    "CPUPowerManagement"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PowerControlBeep"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "LowBatteryAlarm"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PasswordBeep"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "KeyboardBeep"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ExtendedMemoryTest"
                }, 

                Package (0x02)
                {
                    0x07, 
                    "SATAControllerMode"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "CoreMultiProcessing"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "VirtualizationTechnology"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "LockBIOSSetting"
                }, 

                Package (0x02)
                {
                    0x0B, 
                    "MinimumPasswordLength"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BIOSPasswordAtUnattendedBoot"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "FingerprintPredesktopAuthentication"
                }, 

                Package (0x02)
                {
                    0x08, 
                    "FingerprintReaderPriority"
                }, 

                Package (0x02)
                {
                    0x03, 
                    "FingerprintSecurityMode"
                }, 

                Package (0x02)
                {
                    0x02, 
                    "SecurityChip"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BIOSUpdateByEndUsers"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "DataExecutionPrevention"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "EthernetLANAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WirelessLANAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WirelessWANAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BluetoothAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WirelessUSBAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ModemAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "USBPortAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "IEEE1394Access"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ExpressCardAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PCIExpressSlotAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "UltrabayAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "MemoryCardSlotAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "SmartCardSlotAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "IntegratedCameraAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "MicrophoneAccess"
                }, 

                Package (0x02)
                {
                    0x0A, 
                    "BootMode"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "StartupOptionKeys"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BootDeviceListF12Option"
                }, 

                Package (0x02)
                {
                    0x64, 
                    "BootOrder"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WiMAXAccess"
                }, 

                Package (0x02)
                {
                    0x0D, 
                    "GraphicsDevice"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "TXTFeature"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "VTdFeature"
                }, 

                Package (0x02)
                {
                    0x0F, 
                    "AMTControl"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "FingerprintPasswordAuthentication"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "FingerprintReaderAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "OsDetectionForSwitchableGraphics"
                }, 

                Package (0x02)
                {
                    0x0F, 
                    "ComputraceModuleActivation"
                }, 

                Package (0x02)
                {
                    0x01, 
                    "PCIExpressPowerManagement"
                }, 

                Package (0x02)
                {
                    0x0F, 
                    "ATpModuleActivation"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "eSATAPortAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "HardwarePasswordManager"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "HyperThreadingTechnology"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "FnCtrlKeySwap"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BIOSPasswordAtReboot"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "OnByAcAttach"
                }, 

                Package (0x02)
                {
                    0x64, 
                    "NetworkBoot"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BootOrderLock"
                }, 

                Package (0x02)
                {
                    0x10, 
                    "USB30Mode"
                }, 

                Package (0x02)
                {
                    0x11, 
                    "ExpressCardSpeed"
                }, 

                Package (0x02)
                {
                    0x12, 
                    "KeyboardIllumination"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "IPv4NetworkStack"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "IPv6NetworkStack"
                }, 

                Package (0x02)
                {
                    0x13, 
                    "UefiPxeBootPriority"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PhysicalPresenceForTpmProvision"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PhysicalPresenceForTpmClear"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "SecureRollBackPrevention"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ReEntryBootManager"
                }, 

                Package (0x02)
                {
                    0x14, 
                    "WirelessLANandWiMAXRadios"
                }, 

                Package (0x02)
                {
                    0x15, 
                    "ChangeToF1F12Keys"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "SecureBoot"
                }
            })
            Name (VSEL, Package (0x16)
            {
                Package (0x02)
                {
                    "Disable", 
                    "Enable"
                }, 

                Package (0x02)
                {
                    "Disable", 
                    "Automatic"
                }, 

                Package (0x03)
                {
                    "Active", 
                    "Inactive", 
                    "Disable"
                }, 

                Package (0x02)
                {
                    "Normal", 
                    "High"
                }, 

                Package (0x02)
                {
                    "Independent", 
                    "Synchronized"
                }, 

                Package (0x05)
                {
                    "LCD", 
                    "VGA", 
                    "Digital", 
                    "Digital1onDock", 
                    "Digital2onDock"
                }, 

                Package (0x03)
                {
                    "High", 
                    "Normal", 
                    "Silent"
                }, 

                Package (0x02)
                {
                    "Compatibility", 
                    "AHCI"
                }, 

                Package (0x02)
                {
                    "External", 
                    "InternalOnly"
                }, 

                Package (0x02)
                {
                    "MaximizePerformance", 
                    "Balanced"
                }, 

                Package (0x02)
                {
                    "Quick", 
                    "Diagnostics"
                }, 

                Package (0x0A)
                {
                    "Disable", 
                    "4", 
                    "5", 
                    "6", 
                    "7", 
                    "8", 
                    "9", 
                    "10", 
                    "11", 
                    "12"
                }, 

                Package (0x03)
                {
                    "Auto", 
                    "On", 
                    "Off"
                }, 

                Package (0x03)
                {
                    "IntegratedGfx", 
                    "DiscreteGfx", 
                    "SwitchableGfx"
                }, 

                Package (0x04)
                {
                    "Disable", 
                    "ACOnly", 
                    "ACandBattery", 
                    "Enable"
                }, 

                Package (0x03)
                {
                    "Disable", 
                    "Enable", 
                    "Disable"
                }, 

                Package (0x02)
                {
                    "Disable", 
                    "Enable"
                }, 

                Package (0x02)
                {
                    "Generation1", 
                    "Automatic"
                }, 

                Package (0x03)
                {
                    "ThinkLightOnly", 
                    "BacklightOnly", 
                    "Both"
                }, 

                Package (0x02)
                {
                    "IPv4First", 
                    "IPv6First"
                }, 

                Package (0x02)
                {
                    "Off", 
                    "On"
                }, 

                Package (0x02)
                {
                    "Default", 
                    "Legacy"
                }
            })
            Name (VLST, Package (0x0F)
            {
                "HDD0", 
                "HDD1", 
                "HDD2", 
                "HDD3", 
                "HDD4", 
                "PCILAN", 
                "ATAPICD0", 
                "ATAPICD1", 
                "ATAPICD2", 
                "USBFDD", 
                "USBCD", 
                "USBHDD", 
                "OtherHDD", 
                "OtherCD", 
                "NODEV"
            })
            Name (PENC, Package (0x02)
            {
                "ascii", 
                "scancode"
            })
            Name (PKBD, Package (0x03)
            {
                "us", 
                "fr", 
                "gr"
            })
            Name (PTYP, Package (0x08)
            {
                "pap", 
                "pop", 
                "uhdp1", 
                "mhdp1", 
                "uhdp2", 
                "mhdp2", 
                "uhdp3", 
                "mhdp3"
            })
            Mutex (MWMI, 0x07)
            Name (PCFG, Buffer (0x18){})
            Name (IBUF, Buffer (0x0100){})
            Name (ILEN, 0x00)
            Name (PSTR, Buffer (0x81){})
            Method (WQA0, 1, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((WMIS (0x00, Arg0) != 0x00))
                {
                    Release (MWMI)
                    Return ("")
                }

                Local0 = DerefOf (ITEM [^^PCI0.LPC0.WITM])
                Local1 = DerefOf (Local0 [0x00])
                Local2 = DerefOf (Local0 [0x01])
                If ((Local1 < 0x64))
                {
                    Concatenate (Local2, ",", Local6)
                    Local3 = DerefOf (VSEL [Local1])
                    Concatenate (Local6, DerefOf (Local3 [^^PCI0.LPC0.WSEL]), Local7)
                }
                Else
                {
                    Local3 = SizeOf (VLST)
                    If ((^^PCI0.LPC0.WLS0 <= Local3))
                    {
                        Concatenate (Local2, ",", Local7)
                        Concatenate (Local7, DerefOf (VLST [^^PCI0.LPC0.WLS0]), Local2)
                    }

                    If ((^^PCI0.LPC0.WLS1 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [^^PCI0.LPC0.WLS1]), Local2)
                    }

                    If ((^^PCI0.LPC0.WLS2 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [^^PCI0.LPC0.WLS2]), Local2)
                    }

                    If ((^^PCI0.LPC0.WLS3 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [^^PCI0.LPC0.WLS3]), Local2)
                    }

                    If ((^^PCI0.LPC0.WLS4 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [^^PCI0.LPC0.WLS4]), Local2)
                    }

                    If ((^^PCI0.LPC0.WLS5 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [^^PCI0.LPC0.WLS5]), Local2)
                    }

                    If ((^^PCI0.LPC0.WLS6 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [^^PCI0.LPC0.WLS6]), Local2)
                    }

                    If ((^^PCI0.LPC0.WLS7 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [^^PCI0.LPC0.WLS7]), Local2)
                    }

                    If ((^^PCI0.LPC0.WLS8 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [^^PCI0.LPC0.WLS8]), Local2)
                    }

                    If ((^^PCI0.LPC0.WLS9 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [^^PCI0.LPC0.WLS9]), Local2)
                    }

                    If ((^^PCI0.LPC0.WLSA <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [^^PCI0.LPC0.WLSA]), Local2)
                    }

                    If ((^^PCI0.LPC0.WLSB <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [^^PCI0.LPC0.WLSB]), Local2)
                    }

                    If ((^^PCI0.LPC0.WLSC <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [^^PCI0.LPC0.WLSC]), Local2)
                    }

                    If ((^^PCI0.LPC0.WLSD <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [^^PCI0.LPC0.WLSD]), Local2)
                    }

                    Local7 = Local2
                }

                Release (MWMI)
                Return (Local7)
            }

            Method (WMA1, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == 0x00))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = CARG (Arg2)
                    If ((Local0 == 0x00))
                    {
                        Local0 = WSET (ITEM, VSEL)
                        If ((Local0 == 0x00))
                        {
                            Local0 = WMIS (0x01, 0x00)
                        }
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMA2, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local0 = CARG (Arg2)
                If ((Local0 == 0x00))
                {
                    If ((ILEN != 0x00))
                    {
                        Local0 = CPAS (IBUF, 0x00)
                    }

                    If ((Local0 == 0x00))
                    {
                        Local0 = WMIS (0x02, 0x00)
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMA3, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local0 = CARG (Arg2)
                If ((Local0 == 0x00))
                {
                    If ((ILEN != 0x00))
                    {
                        Local0 = CPAS (IBUF, 0x00)
                    }

                    If ((Local0 == 0x00))
                    {
                        Local0 = WMIS (0x03, 0x00)
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMA4, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local0 = CARG (Arg2)
                If ((Local0 == 0x00))
                {
                    If ((ILEN != 0x00))
                    {
                        Local0 = CPAS (IBUF, 0x00)
                    }

                    If ((Local0 == 0x00))
                    {
                        Local0 = WMIS (0x04, 0x00)
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WQA5, 1, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local0 = WMIS (0x05, 0x00)
                PCFG [0x00] = ^^PCI0.LPC0.WSPM /* \_SB_.PCI0.LPC0.WSPM */
                PCFG [0x04] = ^^PCI0.LPC0.WSPS /* \_SB_.PCI0.LPC0.WSPS */
                PCFG [0x08] = ^^PCI0.LPC0.WSMN /* \_SB_.PCI0.LPC0.WSMN */
                PCFG [0x0C] = ^^PCI0.LPC0.WSMX /* \_SB_.PCI0.LPC0.WSMX */
                PCFG [0x10] = ^^PCI0.LPC0.WSEN /* \_SB_.PCI0.LPC0.WSEN */
                PCFG [0x14] = ^^PCI0.LPC0.WSKB /* \_SB_.PCI0.LPC0.WSKB */
                Release (MWMI)
                Return (PCFG) /* \_SB_.WMI1.PCFG */
            }

            Method (WMA6, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == 0x00))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = CARG (Arg2)
                    If ((Local0 == 0x00))
                    {
                        If ((ILEN != 0x00))
                        {
                            Local0 = SPAS (IBUF)
                        }

                        If ((Local0 == 0x00))
                        {
                            Local0 = WMIS (0x06, 0x00)
                        }
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMA7, 3, NotSerialized)
            {
                If ((SizeOf (Arg2) == 0x00))
                {
                    Return ("")
                }

                Local0 = CARG (Arg2)
                If ((Local0 == 0x00))
                {
                    Local1 = GITM (IBUF, ITEM)
                    If ((Local1 == Ones))
                    {
                        Return ("")
                    }

                    Local0 = DerefOf (ITEM [Local1])
                    Local1 = DerefOf (Local0 [0x00])
                    If ((Local1 < 0x64))
                    {
                        Local3 = DerefOf (VSEL [Local1])
                        Local2 = DerefOf (Local3 [0x00])
                        Local4 = SizeOf (Local3)
                        Local5 = 0x01
                        While ((Local5 < Local4))
                        {
                            Local6 = DerefOf (Local3 [Local5])
                            If ((SizeOf (Local6) != 0x00))
                            {
                                Concatenate (Local2, ",", Local7)
                                Concatenate (Local7, Local6, Local2)
                            }

                            Local5++
                        }
                    }
                    Else
                    {
                        Local2 = DerefOf (VLST [0x00])
                        Local4 = SizeOf (VLST)
                        Local5 = 0x01
                        While ((Local5 < Local4))
                        {
                            Local6 = DerefOf (VLST [Local5])
                            Concatenate (Local2, ",", Local7)
                            Concatenate (Local7, Local6, Local2)
                            Local5++
                        }
                    }
                }

                Return (Local2)
            }

            Method (CARG, 1, NotSerialized)
            {
                Local0 = SizeOf (Arg0)
                If ((Local0 == 0x00))
                {
                    IBUF = 0x00
                    ILEN = 0x00
                    Return (0x00)
                }

                If ((ObjectType (Arg0) != 0x02))
                {
                    Return (0x02)
                }

                If ((Local0 >= 0xFF))
                {
                    Return (0x02)
                }

                IBUF = Arg0
                Local0--
                Local1 = DerefOf (IBUF [Local0])
                If (((Local1 == 0x3B) || (Local1 == 0x2A)))
                {
                    IBUF [Local0] = 0x00
                    ILEN = Local0
                }
                Else
                {
                    ILEN = SizeOf (Arg0)
                }

                Return (0x00)
            }

            Method (SCMP, 3, NotSerialized)
            {
                Local0 = SizeOf (Arg0)
                If ((Local0 == 0x00))
                {
                    Return (0x00)
                }

                Local0++
                Name (STR1, Buffer (Local0){})
                STR1 = Arg0
                Local0--
                Local1 = 0x00
                Local2 = Arg2
                While ((Local1 < Local0))
                {
                    Local3 = DerefOf (STR1 [Local1])
                    Local4 = DerefOf (Arg1 [Local2])
                    If ((Local3 != Local4))
                    {
                        Return (0x00)
                    }

                    Local1++
                    Local2++
                }

                Local4 = DerefOf (Arg1 [Local2])
                If ((Local4 == 0x00))
                {
                    Return (0x01)
                }

                If (((Local4 == 0x2C) || (Local4 == 0x3A)))
                {
                    Return (0x01)
                }

                Return (0x00)
            }

            Method (GITM, 2, NotSerialized)
            {
                Local0 = 0x00
                Local1 = SizeOf (Arg1)
                While ((Local0 < Local1))
                {
                    Local3 = DerefOf (DerefOf (Arg1 [Local0]) [0x01])
                    If (SCMP (Local3, Arg0, 0x00))
                    {
                        Return (Local0)
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (GSEL, 3, NotSerialized)
            {
                Local0 = 0x00
                Local1 = SizeOf (Arg0)
                While ((Local0 < Local1))
                {
                    Local2 = DerefOf (Arg0 [Local0])
                    If (SCMP (Local2, Arg1, Arg2))
                    {
                        Return (Local0)
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (SLEN, 2, NotSerialized)
            {
                Local0 = DerefOf (Arg0 [Arg1])
                Return (SizeOf (Local0))
            }

            Method (CLRP, 0, NotSerialized)
            {
                ^^PCI0.LPC0.WPAS = 0x00
                ^^PCI0.LPC0.WPNW = 0x00
            }

            Method (GPAS, 2, NotSerialized)
            {
                Local0 = Arg1
                Local1 = 0x00
                While ((Local1 <= 0x80))
                {
                    Local2 = DerefOf (Arg0 [Local0])
                    If (((Local2 == 0x2C) || (Local2 == 0x00)))
                    {
                        PSTR [Local1] = 0x00
                        Return (Local1)
                    }

                    PSTR [Local1] = Local2
                    Local0++
                    Local1++
                }

                PSTR [Local1] = 0x00
                Return (Ones)
            }

            Method (CPAS, 2, NotSerialized)
            {
                CLRP ()
                Local0 = Arg1
                Local1 = GPAS (Arg0, Local0)
                If ((Local1 == Ones))
                {
                    Return (0x02)
                }

                If ((Local1 == 0x00))
                {
                    Return (0x02)
                }

                ^^PCI0.LPC0.WPAS = PSTR /* \_SB_.WMI1.PSTR */
                Local0 += Local1
                Local0++
                Local6 = GSEL (PENC, Arg0, Local0)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                ^^PCI0.LPC0.WENC = Local6
                If ((Local6 == 0x00))
                {
                    Local0 += SLEN (PENC, 0x00)
                    If ((DerefOf (Arg0 [Local0]) != 0x2C))
                    {
                        Return (0x02)
                    }

                    Local0++
                    Local6 = GSEL (PKBD, Arg0, Local0)
                    If ((Local6 == Ones))
                    {
                        Return (0x02)
                    }

                    ^^PCI0.LPC0.WKBD = Local6
                }

                Return (0x00)
            }

            Method (SPAS, 1, NotSerialized)
            {
                CLRP ()
                Local6 = GSEL (PTYP, Arg0, 0x00)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                ^^PCI0.LPC0.WPTY = Local6
                Local0 = SLEN (PTYP, Local6)
                If ((DerefOf (Arg0 [Local0]) != 0x2C))
                {
                    Return (0x02)
                }

                Local0++
                Local1 = GPAS (Arg0, Local0)
                If (((Local1 == Ones) || (Local1 == 0x00)))
                {
                    Return (0x02)
                }

                ^^PCI0.LPC0.WPAS = PSTR /* \_SB_.WMI1.PSTR */
                Local0 += Local1
                If ((DerefOf (Arg0 [Local0]) != 0x2C))
                {
                    Return (0x02)
                }

                Local0++
                Local1 = GPAS (Arg0, Local0)
                If ((Local1 == Ones))
                {
                    Return (0x02)
                }

                If ((Local1 == 0x00))
                {
                    PSTR = 0x00
                }

                ^^PCI0.LPC0.WPNW = PSTR /* \_SB_.WMI1.PSTR */
                Local0 += Local1
                Local0++
                Local6 = GSEL (PENC, Arg0, Local0)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                ^^PCI0.LPC0.WENC = Local6
                If ((Local6 == 0x00))
                {
                    Local0 += SLEN (PENC, 0x00)
                    If ((DerefOf (Arg0 [Local0]) != 0x2C))
                    {
                        Return (0x02)
                    }

                    Local0++
                    Local6 = GSEL (PKBD, Arg0, Local0)
                    If ((Local6 == Ones))
                    {
                        Return (0x02)
                    }

                    ^^PCI0.LPC0.WKBD = Local6
                }

                Return (0x00)
            }

            Method (WSET, 2, NotSerialized)
            {
                Local0 = ILEN /* \_SB_.WMI1.ILEN */
                Local0++
                Local1 = GITM (IBUF, Arg0)
                If ((Local1 == Ones))
                {
                    Return (0x02)
                }

                ^^PCI0.LPC0.WITM = Local1
                Local3 = DerefOf (Arg0 [Local1])
                Local4 = DerefOf (Local3 [0x01])
                Local2 = SizeOf (Local4)
                Local2++
                Local4 = DerefOf (Local3 [0x00])
                If ((Local4 < 0x64))
                {
                    Local5 = DerefOf (Arg1 [Local4])
                    Local6 = GSEL (Local5, IBUF, Local2)
                    If ((Local6 == Ones))
                    {
                        Return (0x02)
                    }

                    ^^PCI0.LPC0.WSEL = Local6
                    Local2 += SLEN (Local5, Local6)
                    Local4 = DerefOf (IBUF [Local2])
                }
                Else
                {
                    ^^PCI0.LPC0.WLS0 = 0x3F
                    ^^PCI0.LPC0.WLS1 = 0x3F
                    ^^PCI0.LPC0.WLS2 = 0x3F
                    ^^PCI0.LPC0.WLS3 = 0x3F
                    ^^PCI0.LPC0.WLS4 = 0x3F
                    ^^PCI0.LPC0.WLS5 = 0x3F
                    ^^PCI0.LPC0.WLS6 = 0x3F
                    ^^PCI0.LPC0.WLS7 = 0x3F
                    ^^PCI0.LPC0.WLS8 = 0x3F
                    ^^PCI0.LPC0.WLS9 = 0x3F
                    ^^PCI0.LPC0.WLSA = 0x3F
                    ^^PCI0.LPC0.WLSB = 0x3F
                    ^^PCI0.LPC0.WLSC = 0x3F
                    ^^PCI0.LPC0.WLSD = 0x3F
                    Local6 = GSEL (VLST, IBUF, Local2)
                    If ((Local6 == Ones))
                    {
                        Return (0x02)
                    }

                    ^^PCI0.LPC0.WLS0 = Local6
                    Local2 += SLEN (VLST, Local6)
                    Local4 = DerefOf (IBUF [Local2])
                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        ^^PCI0.LPC0.WLS1 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        ^^PCI0.LPC0.WLS2 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        ^^PCI0.LPC0.WLS3 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        ^^PCI0.LPC0.WLS4 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        ^^PCI0.LPC0.WLS5 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        ^^PCI0.LPC0.WLS6 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        ^^PCI0.LPC0.WLS7 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        ^^PCI0.LPC0.WLS8 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        ^^PCI0.LPC0.WLS9 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        ^^PCI0.LPC0.WLSA = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        ^^PCI0.LPC0.WLSB = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        ^^PCI0.LPC0.WLSC = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        ^^PCI0.LPC0.WLSD = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }
                }

                If (((Local4 == 0x2C) && (Local2 < Local0)))
                {
                    Local2++
                    Local0 = CPAS (IBUF, Local2)
                    If ((Local0 != 0x00))
                    {
                        Return (Local0)
                    }
                }

                Return (0x00)
            }

            Name (WQBA, Buffer (0x089D)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x8D, 0x08, 0x00, 0x00, 0xF2, 0x36, 0x00, 0x00,  // .....6..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0xC9, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x13, 0x10, 0x0A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x4C, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PL...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x0E, 0x88, 0x14, 0x40, 0x48, 0x26, 0x84,  // 1...@H&.
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0xA2, 0xC9, 0xA0, 0x00, 0xA7,  // ........
                /* 0060 */  0x08, 0x82, 0xB4, 0x65, 0x01, 0xBA, 0x05, 0xF8,  // ...e....
                /* 0068 */  0x16, 0xA0, 0x1D, 0x42, 0x68, 0x15, 0x0A, 0x30,  // ...Bh..0
                /* 0070 */  0x29, 0xC0, 0x27, 0x98, 0x2C, 0x0A, 0x90, 0x0D,  // ).'.,...
                /* 0078 */  0x26, 0xDB, 0x70, 0x64, 0x18, 0x4C, 0xE4, 0x18,  // &.pd.L..
                /* 0080 */  0x50, 0x62, 0xC6, 0x80, 0xD2, 0x39, 0x05, 0xD9,  // Pb...9..
                /* 0088 */  0x04, 0x16, 0x74, 0xA1, 0x28, 0x9A, 0x46, 0x94,  // ..t.(.F.
                /* 0090 */  0x04, 0x07, 0x75, 0x0C, 0x11, 0x82, 0x97, 0x2B,  // ..u....+
                /* 0098 */  0x40, 0xF2, 0x04, 0xA4, 0x79, 0x5E, 0xB2, 0x3E,  // @...y^.>
                /* 00A0 */  0x08, 0x0D, 0x81, 0x8D, 0x80, 0x47, 0x91, 0x00,  // .....G..
                /* 00A8 */  0xC2, 0x62, 0x2C, 0x53, 0xE2, 0x61, 0x50, 0x1E,  // .b,S.aP.
                /* 00B0 */  0x40, 0x24, 0x67, 0xA8, 0x28, 0x60, 0x7B, 0x9D,  // @$g.(`{.
                /* 00B8 */  0x88, 0x86, 0x75, 0x9C, 0x4C, 0x12, 0x1C, 0x6A,  // ..u.L..j
                /* 00C0 */  0x94, 0x96, 0x28, 0xC0, 0xFC, 0xC8, 0x34, 0x91,  // ..(...4.
                /* 00C8 */  0x63, 0x6B, 0x7A, 0xC4, 0x82, 0x64, 0xD2, 0x86,  // ckz..d..
                /* 00D0 */  0x82, 0x1A, 0xBA, 0xA7, 0x75, 0x52, 0x9E, 0x68,  // ....uR.h
                /* 00D8 */  0xC4, 0x83, 0x32, 0x4C, 0x02, 0x8F, 0x82, 0xA1,  // ..2L....
                /* 00E0 */  0x71, 0x82, 0xB2, 0x20, 0xE4, 0x60, 0xA0, 0x28,  // q.. .`.(
                /* 00E8 */  0xC0, 0x93, 0xF0, 0x1C, 0x8B, 0x17, 0x20, 0x7C,  // ...... |
                /* 00F0 */  0xC6, 0xE4, 0x28, 0x10, 0x23, 0x81, 0x8F, 0x04,  // ..(.#...
                /* 00F8 */  0x1E, 0xCD, 0x31, 0x63, 0x81, 0xC2, 0x05, 0x3C,  // ..1c...<
                /* 0100 */  0x9F, 0x63, 0x88, 0x1C, 0xF7, 0x50, 0x63, 0x1C,  // .c...Pc.
                /* 0108 */  0x45, 0xE4, 0x04, 0xEF, 0x00, 0x51, 0x8C, 0x56,  // E....Q.V
                /* 0110 */  0xD0, 0xBC, 0x85, 0x18, 0x2C, 0x9A, 0xC1, 0x7A,  // ....,..z
                /* 0118 */  0x06, 0x27, 0x83, 0x4E, 0xF0, 0xFF, 0x3F, 0x02,  // .'.N..?.
                /* 0120 */  0x2E, 0x03, 0x42, 0x1E, 0x05, 0x58, 0x1D, 0x94,  // ..B..X..
                /* 0128 */  0xA6, 0x61, 0x82, 0xEE, 0x05, 0xBC, 0x1A, 0x1A,  // .a......
                /* 0130 */  0x13, 0xA0, 0x11, 0x43, 0xCA, 0x04, 0x38, 0xBB,  // ...C..8.
                /* 0138 */  0x2F, 0x68, 0x46, 0x6D, 0x09, 0x30, 0x27, 0x40,  // /hFm.0'@
                /* 0140 */  0x9B, 0x00, 0x6F, 0x08, 0x42, 0x39, 0xCF, 0x28,  // ..o.B9.(
                /* 0148 */  0xC7, 0x72, 0x8A, 0x51, 0x1E, 0x06, 0x62, 0xBE,  // .r.Q..b.
                /* 0150 */  0x0C, 0x04, 0x8D, 0x12, 0x23, 0xE6, 0xB9, 0xC4,  // ....#...
                /* 0158 */  0x35, 0x6C, 0x84, 0x18, 0x21, 0x4F, 0x21, 0x50,  // 5l..!O!P
                /* 0160 */  0xDC, 0xF6, 0x07, 0x41, 0x06, 0x8D, 0x1B, 0xBD,  // ...A....
                /* 0168 */  0x4F, 0x0B, 0x67, 0x75, 0x02, 0x47, 0xFF, 0xA4,  // O.gu.G..
                /* 0170 */  0x60, 0x02, 0x4F, 0xF9, 0xC0, 0x9E, 0x0D, 0x4E,  // `.O....N
                /* 0178 */  0xE0, 0x58, 0xA3, 0xC6, 0x38, 0x95, 0x04, 0x8E,  // .X..8...
                /* 0180 */  0xFD, 0x80, 0x90, 0x06, 0x10, 0x45, 0x82, 0x47,  // .....E.G
                /* 0188 */  0x9D, 0x16, 0x7C, 0x2E, 0xF0, 0xD0, 0x0E, 0xDA,  // ..|.....
                /* 0190 */  0x73, 0x3C, 0x81, 0x20, 0x87, 0x70, 0x04, 0x4F,  // s<. .p.O
                /* 0198 */  0x0C, 0x0F, 0x04, 0x1E, 0x03, 0xBB, 0x29, 0xF8,  // ......).
                /* 01A0 */  0x08, 0xE0, 0x13, 0x02, 0xDE, 0x35, 0xA0, 0xAE,  // .....5..
                /* 01A8 */  0x06, 0x0F, 0x06, 0x6C, 0xD0, 0xE1, 0x30, 0xE3,  // ...l..0.
                /* 01B0 */  0xF5, 0xF0, 0xC3, 0x9D, 0xC0, 0x49, 0x3E, 0x60,  // .....I>`
                /* 01B8 */  0xF0, 0xC3, 0x86, 0x07, 0x87, 0x9B, 0xE7, 0xC9,  // ........
                /* 01C0 */  0x1C, 0x59, 0xA9, 0x02, 0xCC, 0x1E, 0x0E, 0x74,  // .Y.....t
                /* 01C8 */  0x90, 0xF0, 0x69, 0x83, 0x9D, 0x01, 0x30, 0xF2,  // ..i...0.
                /* 01D0 */  0x07, 0x81, 0x1A, 0x99, 0xA1, 0x3D, 0xEE, 0x97,  // .....=..
                /* 01D8 */  0x0E, 0x43, 0x3E, 0x27, 0x1C, 0x16, 0x13, 0x7B,  // .C>'...{
                /* 01E0 */  0xEA, 0xA0, 0xE3, 0x01, 0xFF, 0x65, 0xE4, 0x39,  // .....e.9
                /* 01E8 */  0xC3, 0xD3, 0xF7, 0x7C, 0x4D, 0x30, 0xEC, 0xC0,  // ...|M0..
                /* 01F0 */  0xD1, 0x03, 0x31, 0xF4, 0xC3, 0xC6, 0x61, 0x9C,  // ..1...a.
                /* 01F8 */  0x86, 0xEF, 0x1F, 0x3E, 0x2F, 0xC0, 0x38, 0x05,  // ...>/.8.
                /* 0200 */  0x78, 0xE4, 0xFE, 0xFF, 0x1F, 0x52, 0x7C, 0x9A,  // x....R|.
                /* 0208 */  0xE0, 0x47, 0x0B, 0x9F, 0x26, 0xD8, 0xF5, 0xE0,  // .G..&...
                /* 0210 */  0x34, 0x9E, 0x03, 0x3C, 0x9C, 0xB3, 0xF2, 0x61,  // 4..<...a
                /* 0218 */  0x02, 0x6C, 0xF7, 0x13, 0x36, 0xA2, 0x77, 0x0B,  // .l..6.w.
                /* 0220 */  0x8F, 0x06, 0x7B, 0x0A, 0x00, 0xDF, 0xF9, 0x05,  // ..{.....
                /* 0228 */  0x9C, 0x77, 0x0D, 0x36, 0x58, 0x18, 0xE7, 0x17,  // .w.6X...
                /* 0230 */  0xE0, 0x71, 0x42, 0xF0, 0x10, 0xF8, 0x41, 0xC2,  // .qB...A.
                /* 0238 */  0x43, 0xE0, 0x03, 0x78, 0xFE, 0x38, 0x43, 0x2B,  // C..x.8C+
                /* 0240 */  0x9D, 0x17, 0x72, 0x60, 0xF0, 0xCE, 0x39, 0x30,  // ..r`..90
                /* 0248 */  0x46, 0xC1, 0xF3, 0x3C, 0x36, 0x4C, 0xA0, 0x20,  // F..<6L. 
                /* 0250 */  0xAF, 0x01, 0x85, 0x7A, 0x16, 0x50, 0x18, 0x9F,  // ...z.P..
                /* 0258 */  0x6A, 0x80, 0xD7, 0xFF, 0xFF, 0x54, 0x03, 0x5C,  // j....T.\
                /* 0260 */  0x0E, 0x07, 0xB8, 0x93, 0x03, 0xDC, 0x7B, 0x01,  // ......{.
                /* 0268 */  0xBB, 0x38, 0x3C, 0xD7, 0xC0, 0x15, 0x7D, 0xAE,  // .8<...}.
                /* 0270 */  0x81, 0x7A, 0x6F, 0x29, 0x6E, 0x8C, 0xBA, 0xC6,  // .zo)n...
                /* 0278 */  0x04, 0x79, 0x14, 0x78, 0xA4, 0x89, 0xF2, 0x3C,  // .y.x...<
                /* 0280 */  0xF3, 0x2E, 0x13, 0xE1, 0xD9, 0xC6, 0xD7, 0x1A,  // ........
                /* 0288 */  0x4F, 0x21, 0x8E, 0xAF, 0x35, 0x46, 0x7C, 0x99,  // O!..5F|.
                /* 0290 */  0x78, 0xB7, 0x31, 0xEE, 0xC1, 0x3D, 0xD6, 0x3C,  // x.1..=.<
                /* 0298 */  0xE4, 0x18, 0xE4, 0x68, 0x22, 0xBC, 0x18, 0x04,  // ...h"...
                /* 02A0 */  0x7C, 0xBC, 0xF1, 0xB1, 0x06, 0xBC, 0x62, 0x5E,  // |.....b^
                /* 02A8 */  0x28, 0xB2, 0x70, 0xAC, 0x01, 0x34, 0xFE, 0xFF,  // (.p..4..
                /* 02B0 */  0x8F, 0x35, 0xC0, 0x0D, 0xEB, 0x01, 0x05, 0x7C,  // .5.....|
                /* 02B8 */  0x47, 0x06, 0x76, 0x43, 0x81, 0x77, 0x42, 0x01,  // G.vC.wB.
                /* 02C0 */  0xFC, 0x24, 0x7E, 0x01, 0xE8, 0xC8, 0xE1, 0xB4,  // .$~.....
                /* 02C8 */  0x20, 0xB2, 0xF1, 0x06, 0xF0, 0x29, 0x80, 0xAA,  //  ....)..
                /* 02D0 */  0x01, 0xD2, 0x34, 0x61, 0x13, 0x4C, 0x4F, 0x2E,  // ..4a.LO.
                /* 02D8 */  0x78, 0x1F, 0x09, 0x9C, 0x9B, 0x44, 0xC9, 0x87,  // x....D..
                /* 02E0 */  0x45, 0xE1, 0x9C, 0xF5, 0x20, 0x42, 0x41, 0x0C,  // E... BA.
                /* 02E8 */  0xE8, 0x20, 0xC7, 0x09, 0xF4, 0x19, 0xC5, 0x07,  // . ......
                /* 02F0 */  0x91, 0x13, 0x7D, 0x22, 0xF4, 0xA0, 0x3C, 0x8C,  // ..}"..<.
                /* 02F8 */  0x77, 0x14, 0x76, 0x02, 0xF1, 0x61, 0xC2, 0x63,  // w.v..a.c
                /* 0300 */  0xF7, 0x31, 0x81, 0xFF, 0x63, 0x3C, 0x1B, 0xA3,  // .1..c<..
                /* 0308 */  0x5B, 0x0D, 0x86, 0xFE, 0xFF, 0xE7, 0x14, 0x0E,  // [.......
                /* 0310 */  0xE6, 0x83, 0x08, 0x27, 0xA8, 0xEB, 0x26, 0x01,  // ...'..&.
                /* 0318 */  0x32, 0x7D, 0x47, 0x05, 0x50, 0x00, 0xF9, 0x5E,  // 2}G.P..^
                /* 0320 */  0xE0, 0x73, 0xC0, 0xB3, 0x01, 0x1B, 0xC3, 0xA3,  // .s......
                /* 0328 */  0x80, 0xD1, 0x8C, 0xCE, 0xC3, 0x4F, 0x16, 0x15,  // .....O..
                /* 0330 */  0x77, 0xB2, 0x14, 0xC4, 0x93, 0x75, 0x94, 0xC9,  // w....u..
                /* 0338 */  0xA2, 0x67, 0xE2, 0x7B, 0x85, 0x67, 0xF4, 0xA6,  // .g.{.g..
                /* 0340 */  0xE5, 0x39, 0x7A, 0xC2, 0xBE, 0x87, 0xC0, 0x3A,  // .9z....:
                /* 0348 */  0x0C, 0x84, 0x7C, 0x30, 0xF0, 0x34, 0x0C, 0xE7,  // ..|0.4..
                /* 0350 */  0xC9, 0x72, 0x38, 0x4F, 0x96, 0x8F, 0xC5, 0xD7,  // .r8O....
                /* 0358 */  0x10, 0xF0, 0x09, 0x9C, 0x2D, 0xC8, 0xE1, 0x31,  // ....-..1
                /* 0360 */  0xB1, 0x46, 0x45, 0xAF, 0x42, 0x1E, 0x1E, 0xBF,  // .FE.B...
                /* 0368 */  0x1C, 0x78, 0x3E, 0xCF, 0x08, 0x47, 0xF9, 0x24,  // .x>..G.$
                /* 0370 */  0x81, 0xC3, 0x78, 0x26, 0xF1, 0x10, 0x7D, 0x2B,  // ..x&..}+
                /* 0378 */  0x82, 0x35, 0x91, 0x93, 0xF6, 0x6D, 0xE1, 0x64,  // .5...m.d
                /* 0380 */  0x83, 0xBE, 0x9E, 0x61, 0x6E, 0x45, 0xB0, 0xFF,  // ...anE..
                /* 0388 */  0xFF, 0xB7, 0x22, 0x38, 0x17, 0x34, 0x98, 0x99,  // .."8.4..
                /* 0390 */  0xEE, 0x55, 0xA8, 0x58, 0xF7, 0x2A, 0x40, 0xEC,  // .U.X.*@.
                /* 0398 */  0xB0, 0x5E, 0x7B, 0x7C, 0xB0, 0x82, 0x7B, 0xAF,  // .^{|..{.
                /* 03A0 */  0x82, 0x7B, 0xA9, 0x7A, 0x56, 0x38, 0xC6, 0xF0,  // .{.zV8..
                /* 03A8 */  0x0F, 0x53, 0x31, 0x4E, 0xE9, 0xB5, 0xD3, 0x40,  // .S1N...@
                /* 03B0 */  0x61, 0xA2, 0xC4, 0x7B, 0xAF, 0xF2, 0x18, 0xDF,  // a..{....
                /* 03B8 */  0xAB, 0xD8, 0x15, 0x2A, 0x4C, 0xAC, 0x97, 0x2B,  // ...*L..+
                /* 03C0 */  0xA3, 0xBE, 0x4E, 0x84, 0x0B, 0x14, 0x24, 0xD2,  // ..N...$.
                /* 03C8 */  0xAB, 0x55, 0x94, 0xC8, 0xF1, 0x0D, 0xF9, 0x5E,  // .U.....^
                /* 03D0 */  0x05, 0x5E, 0x39, 0xF7, 0x2A, 0x90, 0xFD, 0xFF,  // .^9.*...
                /* 03D8 */  0xEF, 0x55, 0x80, 0x79, 0xB4, 0xF7, 0x2A, 0x30,  // .U.y..*0
                /* 03E0 */  0x5E, 0x1B, 0xD8, 0x0D, 0x09, 0x16, 0xD0, 0x8B,  // ^.......
                /* 03E8 */  0x15, 0x60, 0x28, 0xF3, 0xC5, 0x8A, 0xE6, 0xBD,  // .`(.....
                /* 03F0 */  0x58, 0x21, 0xFE, 0xFF, 0xE7, 0x12, 0xA6, 0xE7,  // X!......
                /* 03F8 */  0x62, 0x45, 0xE6, 0x09, 0xFF, 0x66, 0x05, 0x70,  // bE...f.p
                /* 0400 */  0xFA, 0xFF, 0x7F, 0xB3, 0x02, 0x8C, 0xDD, 0x8B,  // ........
                /* 0408 */  0x30, 0x47, 0x2B, 0x78, 0x29, 0x6F, 0x56, 0x34,  // 0G+x)oV4
                /* 0410 */  0xCE, 0x32, 0x14, 0x70, 0x41, 0x14, 0xC6, 0x37,  // .2.pA..7
                /* 0418 */  0x2B, 0xC0, 0xD1, 0x75, 0x05, 0x37, 0x64, 0xB8,  // +..u.7d.
                /* 0420 */  0x60, 0x51, 0x82, 0xF9, 0x10, 0xE2, 0xE9, 0x1C,  // `Q......
                /* 0428 */  0xF1, 0x43, 0xC2, 0x4B, 0xC0, 0x63, 0x8E, 0x07,  // .C.K.c..
                /* 0430 */  0xFC, 0x40, 0xE0, 0xCB, 0x15, 0x98, 0xFE, 0xFF,  // .@......
                /* 0438 */  0x04, 0x3E, 0xF9, 0x9E, 0xE5, 0xDB, 0xD4, 0x7B,  // .>.....{
                /* 0440 */  0x2F, 0x3F, 0x60, 0xBD, 0x57, 0xF9, 0xF0, 0x1B,  // /?`.W...
                /* 0448 */  0xEB, 0x9D, 0xE1, 0xE5, 0xCA, 0x23, 0x89, 0x72,  // .....#.r
                /* 0450 */  0x12, 0xA1, 0x7C, 0xB7, 0x7A, 0xAF, 0x32, 0x4A,  // ..|.z.2J
                /* 0458 */  0xC4, 0x17, 0x62, 0x9F, 0x82, 0x0D, 0x6D, 0x94,  // ..b...m.
                /* 0460 */  0xA7, 0x8A, 0xE8, 0xC6, 0x7B, 0xB9, 0x02, 0xAF,  // ....{...
                /* 0468 */  0xA4, 0xCB, 0x15, 0x40, 0x93, 0xE1, 0xBF, 0x5C,  // ...@...\
                /* 0470 */  0x81, 0xEF, 0xE6, 0x80, 0xBD, 0x26, 0xC1, 0xF9,  // .....&..
                /* 0478 */  0xFF, 0x5F, 0x93, 0xF8, 0xF5, 0x0A, 0xF0, 0x93,  // ._......
                /* 0480 */  0xFD, 0x7A, 0x45, 0x73, 0x5F, 0xAF, 0x50, 0xA2,  // .zEs_.P.
                /* 0488 */  0x20, 0xA4, 0x08, 0x48, 0x33, 0x05, 0xCF, 0xFD,  //  ..H3...
                /* 0490 */  0x0A, 0xE0, 0xC4, 0xFF, 0xFF, 0x7E, 0x05, 0x58,  // .....~.X
                /* 0498 */  0x0E, 0x77, 0xBF, 0x02, 0x7A, 0xB7, 0x23, 0xF0,  // .w..z.#.
                /* 04A0 */  0xA2, 0xBC, 0x1D, 0x61, 0xAF, 0x58, 0xF8, 0x8C,  // ...a.X..
                /* 04A8 */  0x57, 0x2C, 0x1A, 0x66, 0x25, 0x8A, 0xB7, 0x26,  // W,.f%..&
                /* 04B0 */  0x0A, 0xE3, 0x2B, 0x16, 0x30, 0xF9, 0xFF, 0x5F,  // ..+.0.._
                /* 04B8 */  0xB1, 0x80, 0xD9, 0x41, 0x14, 0x37, 0x6A, 0xB8,  // ...A.7j.
                /* 04C0 */  0x17, 0x27, 0xDF, 0x7A, 0x3C, 0xDF, 0x88, 0xBE,  // .'.z<...
                /* 04C8 */  0xC3, 0x60, 0x4E, 0x58, 0x30, 0x6E, 0x58, 0xF0,  // .`NX0nX.
                /* 04D0 */  0x87, 0xF4, 0x30, 0xEC, 0x93, 0xC4, 0x3B, 0x96,  // ..0...;.
                /* 04D8 */  0x8F, 0x56, 0x06, 0x79, 0x03, 0x7E, 0xB2, 0x7A,  // .V.y.~.z
                /* 04E0 */  0xB0, 0x8A, 0x62, 0x84, 0x80, 0xC7, 0xF3, 0x2E,  // ..b.....
                /* 04E8 */  0xEC, 0xA3, 0xD5, 0x9B, 0x96, 0x51, 0x62, 0xC7,  // .....Qb.
                /* 04F0 */  0xF2, 0x85, 0xEA, 0x59, 0xCB, 0xD7, 0x2C, 0x43,  // ...Y..,C
                /* 04F8 */  0xC4, 0x7D, 0x20, 0xF6, 0x0D, 0x0B, 0xB0, 0xFD,  // .} .....
                /* 0500 */  0xFF, 0xBF, 0x61, 0x01, 0x8E, 0x2E, 0x0E, 0xFC,  // ..a.....
                /* 0508 */  0xE0, 0x80, 0xBD, 0x61, 0x01, 0x3E, 0x67, 0x0A,  // ...a.>g.
                /* 0510 */  0x9E, 0x1B, 0x16, 0xB0, 0xF9, 0xFF, 0xDF, 0xB0,  // ........
                /* 0518 */  0x00, 0xFE, 0xFF, 0xFF, 0x6F, 0x58, 0xC0, 0xE1,  // ....oX..
                /* 0520 */  0x76, 0x85, 0xBD, 0x65, 0x61, 0x6F, 0x2F, 0x64,  // v..eao/d
                /* 0528 */  0x15, 0x34, 0xD4, 0x4A, 0x14, 0xFC, 0x7B, 0x65,  // .4.J..{e
                /* 0530 */  0x18, 0x7A, 0xC3, 0x02, 0x1C, 0x8D, 0xDB, 0xA3,  // .z......
                /* 0538 */  0x06, 0xC7, 0xD9, 0xE0, 0x49, 0x02, 0x73, 0xAE,  // ....I.s.
                /* 0540 */  0xC6, 0xCD, 0xE6, 0xE0, 0x02, 0x47, 0xE8, 0x1D,  // .....G..
                /* 0548 */  0x54, 0x73, 0x67, 0x97, 0x14, 0x18, 0xB7, 0x2C,  // Tsg....,
                /* 0550 */  0xB8, 0x97, 0xAA, 0x87, 0x86, 0x28, 0x07, 0xF1,  // .....(..
                /* 0558 */  0x2A, 0xFC, 0x60, 0xF5, 0x28, 0x75, 0x64, 0x8F,  // *.`.(ud.
                /* 0560 */  0x57, 0x4F, 0xC3, 0x3E, 0x66, 0xF9, 0x96, 0x65,  // WO.>f..e
                /* 0568 */  0xA8, 0x08, 0x6F, 0x59, 0xEC, 0x0C, 0x11, 0x2F,  // ..oY.../
                /* 0570 */  0x56, 0x94, 0x10, 0xEF, 0x15, 0xA1, 0x7D, 0xE7,  // V.....}.
                /* 0578 */  0x32, 0xF8, 0xA3, 0xB1, 0x51, 0x83, 0xBE, 0x1C,  // 2...Q...
                /* 0580 */  0xBF, 0x65, 0xC1, 0xFB, 0xFF, 0xDF, 0xB2, 0xE0,  // .e......
                /* 0588 */  0x8B, 0xFC, 0xAB, 0xE8, 0x44, 0xE0, 0x5B, 0x16,  // ....D.[.
                /* 0590 */  0xC0, 0x8F, 0x60, 0x10, 0x72, 0x32, 0x70, 0xF4,  // ..`.r2p.
                /* 0598 */  0x79, 0x01, 0x3F, 0x80, 0x87, 0x11, 0x0F, 0x89,  // y.?.....
                /* 05A0 */  0x05, 0x18, 0x38, 0xBD, 0x2F, 0xF9, 0x4C, 0xC1,  // ..8./.L.
                /* 05A8 */  0x0F, 0x18, 0x3E, 0x53, 0xB0, 0xEB, 0x41, 0xF4,  // ..>S..A.
                /* 05B0 */  0xC7, 0x00, 0x9F, 0x4B, 0x30, 0x83, 0x03, 0xFF,  // ...K0...
                /* 05B8 */  0xB5, 0xE2, 0xD0, 0x3D, 0x8A, 0xD7, 0x07, 0x13,  // ...=....
                /* 05C0 */  0x78, 0x70, 0xFC, 0xFF, 0x3F, 0x38, 0xB8, 0x77,  // xp..?8.w
                /* 05C8 */  0x86, 0x23, 0xF2, 0x1D, 0xC6, 0x83, 0x03, 0xDB,  // .#......
                /* 05D0 */  0x41, 0x00, 0x38, 0x0C, 0x0E, 0x1F, 0x6A, 0x70,  // A.8...jp
                /* 05D8 */  0xE8, 0xF1, 0x18, 0x38, 0xA4, 0xCF, 0x63, 0xEC,  // ...8..c.
                /* 05E0 */  0xC2, 0xF0, 0x90, 0xE3, 0xA1, 0x81, 0x0D, 0xD0,  // ........
                /* 05E8 */  0x43, 0x03, 0x96, 0x93, 0x78, 0x0A, 0x39, 0x34,  // C...x.94
                /* 05F0 */  0x30, 0x4B, 0x18, 0x1A, 0x50, 0x8A, 0x37, 0x34,  // 0K..P.74
                /* 05F8 */  0xFA, 0xFF, 0x1F, 0x1A, 0x1F, 0x92, 0x0F, 0x0B,  // ........
                /* 0600 */  0x31, 0x9F, 0x72, 0x22, 0xBC, 0x2F, 0xF8, 0x04,  // 1.r"./..
                /* 0608 */  0xC5, 0xD0, 0x5F, 0x53, 0x7C, 0xBB, 0xF0, 0x4D,  // .._S|..M
                /* 0610 */  0x10, 0x37, 0x3E, 0x70, 0x5D, 0x3A, 0x3D, 0x3E,  // .7>p]:=>
                /* 0618 */  0xE0, 0x73, 0xE4, 0xF2, 0xF8, 0x70, 0x47, 0x27,  // .s...pG'
                /* 0620 */  0x8F, 0x0F, 0x86, 0xCB, 0xAB, 0x0C, 0x39, 0x9A,  // ......9.
                /* 0628 */  0xF8, 0x68, 0xC5, 0x86, 0x07, 0xB6, 0x9B, 0x9E,  // .h......
                /* 0630 */  0x87, 0x07, 0x7C, 0xAE, 0x9B, 0x60, 0xBC, 0x42,  // ..|..`.B
                /* 0638 */  0xF2, 0x6B, 0x09, 0x8C, 0x13, 0x14, 0xFE, 0xBA,  // .k......
                /* 0640 */  0x09, 0xDE, 0xFF, 0xFF, 0x75, 0x13, 0x78, 0x8E,  // ....u.x.
                /* 0648 */  0x82, 0x6B, 0xBD, 0x64, 0xD3, 0x20, 0xAF, 0x1C,  // .k.d. ..
                /* 0650 */  0xC5, 0x7A, 0x11, 0x50, 0x18, 0x9F, 0xD9, 0x00,  // .z.P....
                /* 0658 */  0x47, 0x63, 0x7D, 0x66, 0x03, 0xCB, 0xBD, 0x80,  // Gc}f....
                /* 0660 */  0xDD, 0xD8, 0xE0, 0x9E, 0xD6, 0x60, 0xDF, 0x1D,  // .....`..
                /* 0668 */  0x1E, 0xCE, 0x1E, 0xD3, 0x1E, 0xD5, 0x1E, 0xD0,  // ........
                /* 0670 */  0x7C, 0xC4, 0x8E, 0xF1, 0x96, 0x16, 0x24, 0x4E,  // |.....$N
                /* 0678 */  0x84, 0xD7, 0x81, 0xA7, 0x35, 0x5F, 0x32, 0xE2,  // ....5_2.
                /* 0680 */  0x05, 0x7A, 0x5A, 0x33, 0x46, 0x9C, 0x97, 0x36,  // .zZ3F..6
                /* 0688 */  0x23, 0xBE, 0x52, 0x84, 0x78, 0x58, 0xF3, 0xC9,  // #.R.xX..
                /* 0690 */  0xCD, 0x78, 0x0F, 0x13, 0xE1, 0xC2, 0xBC, 0xB0,  // .x......
                /* 0698 */  0x3D, 0xAD, 0x81, 0xE3, 0xFF, 0x7F, 0x5A, 0x83,  // =.....Z.
                /* 06A0 */  0x23, 0xE7, 0x8A, 0x0D, 0xD0, 0xE4, 0xA2, 0x8F,  // #.......
                /* 06A8 */  0x3B, 0xA4, 0x80, 0xE5, 0xDA, 0xC0, 0x6E, 0x29,  // ;.....n)
                /* 06B0 */  0xF0, 0x2E, 0xD8, 0xC0, 0xF9, 0xFF, 0x7F, 0x44,  // .......D
                /* 06B8 */  0x01, 0x5F, 0x96, 0x0B, 0x36, 0xCD, 0x71, 0xC1,  // ._..6.q.
                /* 06C0 */  0x46, 0x71, 0x58, 0x0D, 0x90, 0xE6, 0x09, 0xFF,  // FqX.....
                /* 06C8 */  0x7A, 0x0D, 0xFE, 0x49, 0xF8, 0x7A, 0x0D, 0xD8,  // z..I.z..
                /* 06D0 */  0xBE, 0xC5, 0xE2, 0xAE, 0xD7, 0xC0, 0xEA, 0xFF,  // ........
                /* 06D8 */  0x7F, 0xBD, 0x06, 0x96, 0x82, 0x47, 0x4A, 0xEF,  // .....GJ.
                /* 06E0 */  0xD4, 0xE0, 0xBA, 0x69, 0xE3, 0x41, 0xDF, 0xB4,  // ...i.A..
                /* 06E8 */  0x61, 0x0A, 0xBE, 0x45, 0xD1, 0x28, 0xE4, 0x8A,  // a..E.(..
                /* 06F0 */  0xB6, 0x10, 0x0A, 0xE3, 0x5B, 0x14, 0xE0, 0x08,  // ....[...
                /* 06F8 */  0xFB, 0x2D, 0x0A, 0x2C, 0x17, 0xA7, 0xB7, 0x28,  // .-.,...(
                /* 0700 */  0xFC, 0x0C, 0x3C, 0x68, 0xDF, 0x75, 0x18, 0xA6,  // ..<h.u..
                /* 0708 */  0xEF, 0xD0, 0xF0, 0x4F, 0x4D, 0xCF, 0x4D, 0x0F,  // ...OM.M.
                /* 0710 */  0x4E, 0x0F, 0xCD, 0x3E, 0x48, 0xF9, 0x70, 0xF0,  // N..>H.p.
                /* 0718 */  0xFC, 0xF4, 0xFF, 0x8F, 0xF1, 0x5E, 0xE7, 0x9B,  // .....^..
                /* 0720 */  0xD4, 0x6B, 0x94, 0x2F, 0x30, 0xC7, 0x10, 0x31,  // .k./0..1
                /* 0728 */  0xCA, 0xCB, 0xB4, 0x21, 0xE2, 0xF9, 0xD4, 0xE4,  // ...!....
                /* 0730 */  0xB3, 0x42, 0xDC, 0x10, 0x0F, 0xD1, 0x46, 0x88,  // .B....F.
                /* 0738 */  0xFA, 0x3C, 0xED, 0x09, 0xBD, 0x46, 0x81, 0x57,  // .<...F.W
                /* 0740 */  0xD0, 0x35, 0x0A, 0xA0, 0xC9, 0xFD, 0x08, 0x77,  // .5.....w
                /* 0748 */  0x8D, 0x02, 0xCB, 0xBD, 0x81, 0x9D, 0x87, 0xF8,  // ........
                /* 0750 */  0x95, 0xC8, 0xD7, 0x06, 0x18, 0xF7, 0x28, 0x38,  // ......(8
                /* 0758 */  0xFF, 0xFF, 0x7B, 0x14, 0x60, 0x23, 0xCC, 0x3D,  // ..{.`#.=
                /* 0760 */  0x8A, 0x06, 0xB9, 0x47, 0xA1, 0x4E, 0x26, 0xBE,  // ...G.N&.
                /* 0768 */  0xD4, 0x79, 0xA2, 0xE0, 0x08, 0x7F, 0x91, 0x42,  // .y.....B
                /* 0770 */  0xC5, 0x26, 0x51, 0xE8, 0xC3, 0x10, 0x2A, 0xE6,  // .&Q...*.
                /* 0778 */  0x61, 0x84, 0x82, 0x18, 0xD0, 0x19, 0x4E, 0x14,  // a.....N.
                /* 0780 */  0x68, 0x15, 0x27, 0x0A, 0x72, 0x8B, 0xF1, 0xA4,  // h.'.r...
                /* 0788 */  0x1E, 0xA3, 0x00, 0x5F, 0xCB, 0xF4, 0x50, 0x79,  // ..._..Py
                /* 0790 */  0xE4, 0xA1, 0x52, 0x10, 0x0F, 0xD5, 0x71, 0x86,  // ..R...q.
                /* 0798 */  0x8A, 0x9E, 0xA4, 0xE7, 0x8F, 0xF9, 0xFF, 0x1F,  // ........
                /* 07A0 */  0x1C, 0xB0, 0x07, 0x29, 0x80, 0x17, 0x0A, 0x6D,  // ...)...m
                /* 07A8 */  0xFA, 0xD4, 0x68, 0xD4, 0xAA, 0x41, 0x99, 0x1A,  // ..h..A..
                /* 07B0 */  0x65, 0x1A, 0xD4, 0xEA, 0x53, 0xA9, 0x31, 0x63,  // e...S.1c
                /* 07B8 */  0xE7, 0x50, 0x4B, 0x3B, 0x4B, 0x50, 0x31, 0x8B,  // .PK;KP1.
                /* 07C0 */  0xD1, 0x68, 0x1C, 0x05, 0x84, 0xCA, 0xFE, 0x9B,  // .h......
                /* 07C8 */  0x0B, 0xC4, 0x21, 0x9F, 0x3A, 0x02, 0x74, 0xB0,  // ..!.:.t.
                /* 07D0 */  0x17, 0x95, 0x80, 0x2C, 0x6B, 0x6D, 0x02, 0x71,  // ...,km.q
                /* 07D8 */  0x7C, 0x13, 0x10, 0x8D, 0x80, 0x48, 0xCB, 0x63,  // |....H.c
                /* 07E0 */  0x42, 0x40, 0xCE, 0x0D, 0x22, 0x20, 0xAB, 0x58,  // B@.." .X
                /* 07E8 */  0x93, 0x80, 0xAC, 0xF9, 0x01, 0x23, 0x70, 0xEB,  // .....#p.
                /* 07F0 */  0xD4, 0x01, 0xC4, 0x52, 0x82, 0xD0, 0x44, 0x0B,  // ...R..D.
                /* 07F8 */  0x17, 0xA8, 0xE3, 0x81, 0x68, 0x30, 0x84, 0x46,  // ....h0.F
                /* 0800 */  0x40, 0x0E, 0x46, 0x21, 0x20, 0xCB, 0xF8, 0x74,  // @.F! ..t
                /* 0808 */  0x0B, 0xDC, 0x02, 0xAC, 0x00, 0x31, 0xF9, 0x20,  // .....1. 
                /* 0810 */  0x54, 0xB0, 0x17, 0x50, 0xA6, 0x1E, 0x44, 0x40,  // T..P..D@
                /* 0818 */  0x56, 0xBA, 0x56, 0x01, 0x59, 0x37, 0x88, 0x80,  // V.V.Y7..
                /* 0820 */  0xFE, 0xFF, 0x2F, 0x83, 0x32, 0x03, 0xCE, 0x32,  // ../.2..2
                /* 0828 */  0xBA, 0x01, 0x62, 0x0A, 0x1F, 0x0A, 0x02, 0xB1,  // ..b.....
                /* 0830 */  0x26, 0x3D, 0xA0, 0x4C, 0x20, 0x88, 0xAE, 0x1C,  // &=.L ...
                /* 0838 */  0xC4, 0x0F, 0x10, 0x93, 0x06, 0x22, 0x20, 0xC7,  // ....." .
                /* 0840 */  0x39, 0x98, 0x08, 0xDC, 0x71, 0x14, 0x01, 0x52,  // 9...q..R
                /* 0848 */  0x47, 0xC3, 0xA5, 0x20, 0x54, 0xFC, 0xF3, 0x44,  // G.. T..D
                /* 0850 */  0x20, 0x16, 0x64, 0x09, 0x8C, 0x82, 0xD0, 0x08,  //  .d.....
                /* 0858 */  0x9A, 0x40, 0x98, 0x3C, 0x4F, 0x20, 0x2C, 0xD4,  // .@.<O ,.
                /* 0860 */  0x9F, 0x5C, 0xA7, 0x15, 0xA2, 0x6A, 0x88, 0xD4,  // .\...j..
                /* 0868 */  0x15, 0x08, 0x0B, 0xFC, 0x30, 0xD0, 0x60, 0x9C,  // ....0.`.
                /* 0870 */  0x1E, 0x44, 0x40, 0x4E, 0xFA, 0xA7, 0x0A, 0x44,  // .D@N...D
                /* 0878 */  0x72, 0x83, 0x08, 0xC8, 0xF9, 0x9F, 0x22, 0x02,  // r.....".
                /* 0880 */  0x77, 0xEA, 0xD7, 0x84, 0x86, 0x4F, 0xBE, 0x58,  // w....O.X
                /* 0888 */  0x41, 0x88, 0xB8, 0x87, 0x55, 0x50, 0xA2, 0x14,  // A...UP..
                /* 0890 */  0x44, 0x40, 0x56, 0xF6, 0xB4, 0x12, 0x90, 0x75,  // D@V....u
                /* 0898 */  0x82, 0x08, 0xC8, 0xFF, 0x7F                     // .....
            })
        }

        Device (WMI2)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_WDG, Buffer (0x64)
            {
                /* 0000 */  0xF1, 0x24, 0xB4, 0xFC, 0x5A, 0x07, 0x0E, 0x4E,  // .$..Z..N
                /* 0008 */  0xBF, 0xC4, 0x62, 0xF3, 0xE7, 0x17, 0x71, 0xFA,  // ..b...q.
                /* 0010 */  0x41, 0x37, 0x01, 0x01, 0xE3, 0x5E, 0xBE, 0xE2,  // A7...^..
                /* 0018 */  0xDA, 0x42, 0xDB, 0x49, 0x83, 0x78, 0x1F, 0x52,  // .B.I.x.R
                /* 0020 */  0x47, 0x38, 0x82, 0x02, 0x41, 0x38, 0x01, 0x02,  // G8..A8..
                /* 0028 */  0x9A, 0x01, 0x30, 0x74, 0xE9, 0xDC, 0x48, 0x45,  // ..0t..HE
                /* 0030 */  0xBA, 0xB0, 0x9F, 0xDE, 0x09, 0x35, 0xCA, 0xFF,  // .....5..
                /* 0038 */  0x41, 0x39, 0x0A, 0x05, 0x03, 0x70, 0xF4, 0x7F,  // A9...p..
                /* 0040 */  0x6C, 0x3B, 0x5E, 0x4E, 0xA2, 0x27, 0xE9, 0x79,  // l;^N.'.y
                /* 0048 */  0x82, 0x4A, 0x85, 0xD1, 0x41, 0x41, 0x01, 0x06,  // .J..AA..
                /* 0050 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0058 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0060 */  0x42, 0x42, 0x01, 0x00                           // BB..
            })
            Name (PREL, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Method (WQA7, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WMIS (0x07, 0x00)
                PREL [0x00] = ^^PCI0.LPC0.WLS0 /* \_SB_.PCI0.LPC0.WLS0 */
                PREL [0x01] = ^^PCI0.LPC0.WLS1 /* \_SB_.PCI0.LPC0.WLS1 */
                PREL [0x02] = ^^PCI0.LPC0.WLS2 /* \_SB_.PCI0.LPC0.WLS2 */
                PREL [0x03] = ^^PCI0.LPC0.WLS3 /* \_SB_.PCI0.LPC0.WLS3 */
                PREL [0x04] = ^^PCI0.LPC0.WLS4 /* \_SB_.PCI0.LPC0.WLS4 */
                PREL [0x05] = ^^PCI0.LPC0.WLS5 /* \_SB_.PCI0.LPC0.WLS5 */
                PREL [0x06] = ^^PCI0.LPC0.WLS6 /* \_SB_.PCI0.LPC0.WLS6 */
                PREL [0x07] = ^^PCI0.LPC0.WLS7 /* \_SB_.PCI0.LPC0.WLS7 */
                Release (^^WMI1.MWMI)
                Return (PREL) /* \_SB_.WMI2.PREL */
            }

            Method (WMA8, 3, NotSerialized)
            {
                CreateByteField (Arg2, 0x00, PRE0)
                CreateByteField (Arg2, 0x01, PRE1)
                CreateByteField (Arg2, 0x02, PRE2)
                CreateByteField (Arg2, 0x03, PRE3)
                CreateByteField (Arg2, 0x04, PRE4)
                CreateByteField (Arg2, 0x05, PRE5)
                CreateByteField (Arg2, 0x06, PRE6)
                CreateByteField (Arg2, 0x07, PRE7)
                Acquire (^^WMI1.MWMI, 0xFFFF)
                ^^PCI0.LPC0.WLS0 = PRE0 /* \_SB_.WMI2.WMA8.PRE0 */
                ^^PCI0.LPC0.WLS1 = PRE1 /* \_SB_.WMI2.WMA8.PRE1 */
                ^^PCI0.LPC0.WLS2 = PRE2 /* \_SB_.WMI2.WMA8.PRE2 */
                ^^PCI0.LPC0.WLS3 = PRE3 /* \_SB_.WMI2.WMA8.PRE3 */
                ^^PCI0.LPC0.WLS4 = PRE4 /* \_SB_.WMI2.WMA8.PRE4 */
                ^^PCI0.LPC0.WLS5 = PRE5 /* \_SB_.WMI2.WMA8.PRE5 */
                ^^PCI0.LPC0.WLS6 = PRE6 /* \_SB_.WMI2.WMA8.PRE6 */
                ^^PCI0.LPC0.WLS7 = PRE7 /* \_SB_.WMI2.WMA8.PRE7 */
                WMIS (0x08, 0x00)
                Release (^^WMI1.MWMI)
            }

            Name (ITEM, Package (0x05)
            {
                Package (0x02)
                {
                    0x00, 
                    "InhibitEnteringThinkPadSetup"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "MTMSerialConcatenation"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "SwapProductName"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ComputraceMsgDisable"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "AtpMsgDisable"
                }
            })
            Name (VSEL, Package (0x02)
            {
                Package (0x02)
                {
                    "Disable", 
                    "Enable"
                }, 

                Package (0x02)
                {
                    "Off", 
                    "On"
                }
            })
            Method (WQA9, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                If ((WMIS (0x09, Arg0) != 0x00))
                {
                    Release (^^WMI1.MWMI)
                    Return ("")
                }

                Local0 = DerefOf (ITEM [^^PCI0.LPC0.WITM])
                Local1 = DerefOf (Local0 [0x00])
                Local2 = DerefOf (Local0 [0x01])
                Concatenate (Local2, ",", Local6)
                Local3 = DerefOf (VSEL [Local1])
                Concatenate (Local6, DerefOf (Local3 [^^PCI0.LPC0.WSEL]), Local7)
                Release (^^WMI1.MWMI)
                Return (Local7)
            }

            Method (WMAA, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == 0x00))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = ^^WMI1.CARG (Arg2)
                    If ((Local0 == 0x00))
                    {
                        Local0 = ^^WMI1.WSET (ITEM, VSEL)
                        If ((Local0 == 0x00))
                        {
                            Local0 = WMIS (0x0A, 0x00)
                        }
                    }
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (^^WMI1.RETN [Local0]))
            }

            Name (WQBB, Buffer (0x0538)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x28, 0x05, 0x00, 0x00, 0xAE, 0x18, 0x00, 0x00,  // (.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0xDE, 0x8B, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0D, 0x10, 0x8A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x50, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PP...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x10, 0x88, 0x14, 0x40, 0x48, 0x28, 0x84,  // 1...@H(.
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0x0A, 0x90, 0x29, 0xC0, 0xA0,  // .....)..
                /* 0060 */  0x00, 0xA7, 0x08, 0x22, 0x88, 0xD2, 0xB2, 0x00,  // ..."....
                /* 0068 */  0xDD, 0x02, 0x7C, 0x0B, 0xD0, 0x0E, 0x21, 0xB4,  // ..|...!.
                /* 0070 */  0xC8, 0x95, 0x0A, 0xB0, 0x08, 0x25, 0x9F, 0x80,  // .....%..
                /* 0078 */  0x92, 0x88, 0x22, 0xD9, 0x78, 0xB2, 0x8D, 0x48,  // ..".x..H
                /* 0080 */  0xE6, 0x61, 0x91, 0x83, 0x40, 0x89, 0x19, 0x04,  // .a..@...
                /* 0088 */  0x4A, 0x27, 0xAE, 0x6C, 0xE2, 0x6A, 0x10, 0x07,  // J'.l.j..
                /* 0090 */  0x10, 0xE5, 0x3C, 0xA2, 0x24, 0x38, 0xAA, 0x83,  // ..<.$8..
                /* 0098 */  0x88, 0x10, 0xBB, 0x5C, 0x01, 0x92, 0x07, 0x20,  // ...\... 
                /* 00A0 */  0xCD, 0x13, 0x93, 0xF5, 0x39, 0x68, 0x64, 0x6C,  // ....9hdl
                /* 00A8 */  0x04, 0x3C, 0x98, 0x04, 0x10, 0x16, 0x65, 0x9D,  // .<....e.
                /* 00B0 */  0x8A, 0x02, 0x83, 0xF2, 0x00, 0x22, 0x39, 0x63,  // ....."9c
                /* 00B8 */  0x45, 0x01, 0xDB, 0xEB, 0x44, 0x64, 0x72, 0xA0,  // E...Ddr.
                /* 00C0 */  0x54, 0x12, 0x1C, 0x6A, 0x98, 0x9E, 0x5A, 0xF3,  // T..j..Z.
                /* 00C8 */  0x13, 0xD3, 0x44, 0x4E, 0xAD, 0xE9, 0x21, 0x0B,  // ..DN..!.
                /* 00D0 */  0x92, 0x49, 0x1B, 0x0A, 0x6A, 0xEC, 0x9E, 0xD6,  // .I..j...
                /* 00D8 */  0x49, 0x79, 0xA6, 0x11, 0x0F, 0xCA, 0x30, 0x09,  // Iy....0.
                /* 00E0 */  0x3C, 0x0A, 0x86, 0xC6, 0x09, 0xCA, 0x82, 0x90,  // <.......
                /* 00E8 */  0x83, 0x81, 0xA2, 0x00, 0x4F, 0xC2, 0x73, 0x2C,  // ....O.s,
                /* 00F0 */  0x5E, 0x80, 0xF0, 0x11, 0x93, 0xB3, 0x40, 0x8C,  // ^.....@.
                /* 00F8 */  0x04, 0x3E, 0x13, 0x78, 0xE4, 0xC7, 0x8C, 0x1D,  // .>.x....
                /* 0100 */  0x51, 0xB8, 0x80, 0xE7, 0x73, 0x0C, 0x91, 0xE3,  // Q...s...
                /* 0108 */  0x1E, 0x6A, 0x8C, 0xA3, 0x88, 0x7C, 0x38, 0x0C,  // .j...|8.
                /* 0110 */  0xED, 0x74, 0xE3, 0x1C, 0xD8, 0xE9, 0x14, 0x04,  // .t......
                /* 0118 */  0x2E, 0x90, 0x60, 0x3D, 0xCF, 0x59, 0x20, 0xFF,  // ..`=.Y .
                /* 0120 */  0xFF, 0x18, 0x07, 0xC1, 0xF0, 0x8E, 0x01, 0x23,  // .......#
                /* 0128 */  0x03, 0x42, 0x1E, 0x05, 0x58, 0x1D, 0x96, 0x26,  // .B..X..&
                /* 0130 */  0x91, 0xC0, 0xEE, 0x05, 0x68, 0xBC, 0x04, 0x48,  // ....h..H
                /* 0138 */  0xE1, 0x20, 0xA5, 0x0C, 0x42, 0x30, 0x8D, 0x09,  // . ..B0..
                /* 0140 */  0xB0, 0x75, 0x68, 0x90, 0x37, 0x01, 0xD6, 0xAE,  // .uh.7...
                /* 0148 */  0x02, 0x42, 0x89, 0x74, 0x02, 0x71, 0x42, 0x44,  // .B.t.qBD
                /* 0150 */  0x89, 0x18, 0xD4, 0x40, 0x51, 0x6A, 0x43, 0x15,  // ...@QjC.
                /* 0158 */  0x4C, 0x67, 0xC3, 0x13, 0x66, 0xDC, 0x10, 0x31,  // Lg..f..1
                /* 0160 */  0x0C, 0x14, 0xB7, 0xFD, 0x41, 0x90, 0x61, 0xE3,  // ....A.a.
                /* 0168 */  0xC6, 0xEF, 0x41, 0x9D, 0xD6, 0xD9, 0x1D, 0xD3,  // ..A.....
                /* 0170 */  0xAB, 0x82, 0x09, 0x3C, 0xE9, 0x37, 0x84, 0xA7,  // ...<.7..
                /* 0178 */  0x83, 0xA3, 0x38, 0xDA, 0xA8, 0x31, 0x9A, 0x23,  // ..8..1.#
                /* 0180 */  0x65, 0xAB, 0xD6, 0xB9, 0xC2, 0x91, 0xE0, 0x51,  // e......Q
                /* 0188 */  0xE7, 0x05, 0x9F, 0x0C, 0x3C, 0xB4, 0xC3, 0xF6,  // ....<...
                /* 0190 */  0x60, 0xCF, 0xD2, 0x43, 0x38, 0x82, 0x67, 0x86,  // `..C8.g.
                /* 0198 */  0x47, 0x02, 0x8F, 0x81, 0xDD, 0x15, 0x7C, 0x08,  // G.....|.
                /* 01A0 */  0xF0, 0x19, 0x01, 0xEF, 0x1A, 0x50, 0x97, 0x83,  // .....P..
                /* 01A8 */  0x47, 0x03, 0x36, 0xE9, 0x70, 0x98, 0xF1, 0x7A,  // G.6.p..z
                /* 01B0 */  0xEE, 0x9E, 0xBA, 0xCF, 0x18, 0xFC, 0xBC, 0xE1,  // ........
                /* 01B8 */  0xC1, 0xE1, 0x46, 0x7A, 0x32, 0x47, 0x56, 0xAA,  // ..Fz2GV.
                /* 01C0 */  0x00, 0xB3, 0xD7, 0x00, 0x1D, 0x25, 0x7C, 0xE0,  // .....%|.
                /* 01C8 */  0x60, 0x77, 0x81, 0xA7, 0x00, 0x13, 0x58, 0xFE,  // `w....X.
                /* 01D0 */  0x20, 0x50, 0x23, 0x33, 0xB4, 0xC7, 0xFB, 0xDE,  //  P#3....
                /* 01D8 */  0x61, 0xC8, 0x27, 0x85, 0xC3, 0x62, 0x62, 0x0F,  // a.'..bb.
                /* 01E0 */  0x1E, 0x74, 0x3C, 0xE0, 0xBF, 0x8F, 0x3C, 0x69,  // .t<...<i
                /* 01E8 */  0x78, 0xFA, 0x9E, 0xAF, 0x09, 0x06, 0x86, 0x90,  // x.......
                /* 01F0 */  0x95, 0xF1, 0xA0, 0x06, 0x62, 0xE8, 0x57, 0x85,  // ....b.W.
                /* 01F8 */  0xC3, 0x38, 0x0D, 0x9F, 0x40, 0x7C, 0x0E, 0x08,  // .8..@|..
                /* 0200 */  0x12, 0xE3, 0x98, 0x3C, 0x38, 0xFF, 0xFF, 0x09,  // ...<8...
                /* 0208 */  0x1C, 0x6B, 0xE4, 0xF4, 0x9C, 0xE2, 0xF3, 0x04,  // .k......
                /* 0210 */  0x3F, 0x5C, 0xF8, 0x3C, 0xC1, 0x4E, 0x0C, 0xA7,  // ?\.<.N..
                /* 0218 */  0xF1, 0x1C, 0xE0, 0xE1, 0x9C, 0x95, 0x8F, 0x13,  // ........
                /* 0220 */  0xC0, 0x02, 0xE2, 0x75, 0x82, 0x0F, 0x14, 0x3E,  // ...u...>
                /* 0228 */  0xEC, 0xA1, 0x79, 0x14, 0x2F, 0x11, 0x6F, 0x0F,  // ..y./.o.
                /* 0230 */  0x26, 0x88, 0xF6, 0x10, 0x03, 0xC6, 0x19, 0xE1,  // &.......
                /* 0238 */  0xCE, 0x1B, 0x70, 0x4E, 0x31, 0xC0, 0x03, 0xEA,  // ..pN1...
                /* 0240 */  0x10, 0x30, 0x87, 0x09, 0x0F, 0x81, 0x0F, 0xE0,  // .0......
                /* 0248 */  0x19, 0xE4, 0x1C, 0x7D, 0xCC, 0x39, 0x33, 0xDC,  // ...}.93.
                /* 0250 */  0x71, 0x07, 0x6C, 0xC3, 0xE0, 0x91, 0x2D, 0x80,  // q.l...-.
                /* 0258 */  0xB0, 0x38, 0x4F, 0x02, 0x05, 0x7C, 0x1B, 0x50,  // .8O..|.P
                /* 0260 */  0x18, 0x1F, 0x6E, 0xC0, 0xFB, 0xFF, 0x3F, 0xDC,  // ..n...?.
                /* 0268 */  0x00, 0xD7, 0xF3, 0x01, 0xEE, 0xF8, 0x00, 0xF7,  // ........
                /* 0270 */  0x62, 0xC1, 0x0E, 0x0F, 0x8F, 0x37, 0xC0, 0x60,  // b....7.`
                /* 0278 */  0x48, 0x8F, 0x34, 0x6F, 0x35, 0x31, 0x5E, 0x6D,  // H.4o51^m
                /* 0280 */  0x42, 0x44, 0x78, 0xA8, 0x79, 0xB7, 0x31, 0x52,  // BDx.y.1R
                /* 0288 */  0xBC, 0xC7, 0x1B, 0x76, 0x8D, 0x39, 0x8B, 0x07,  // ...v.9..
                /* 0290 */  0x90, 0x28, 0xC5, 0xA1, 0xE9, 0x62, 0x13, 0x23,  // .(...b.#
                /* 0298 */  0xCA, 0x9B, 0x8D, 0x61, 0xDF, 0x74, 0x0C, 0x14,  // ...a.t..
                /* 02A0 */  0x2A, 0x52, 0x84, 0x30, 0x2F, 0x16, 0x21, 0x1E,  // *R.0/.!.
                /* 02A8 */  0x6F, 0xC0, 0x2C, 0xE9, 0xA5, 0xA2, 0xCF, 0x81,  // o.,.....
                /* 02B0 */  0x8F, 0x37, 0x80, 0x97, 0xFF, 0xFF, 0xF1, 0x06,  // .7......
                /* 02B8 */  0xF0, 0x30, 0x0C, 0x1F, 0x53, 0xC0, 0x76, 0x73,  // .0..S.vs
                /* 02C0 */  0x60, 0xF7, 0x14, 0xF8, 0xE7, 0x14, 0xC0, 0x91,  // `.......
                /* 02C8 */  0x90, 0x47, 0x80, 0x0E, 0x1E, 0x16, 0x01, 0x22,  // .G....."
                /* 02D0 */  0x1B, 0xCF, 0x00, 0x9F, 0x89, 0xA8, 0x40, 0x2A,  // ......@*
                /* 02D8 */  0xCD, 0x14, 0x2C, 0xE3, 0x14, 0xAC, 0x4E, 0x88,  // ..,...N.
                /* 02E0 */  0x5C, 0x06, 0x85, 0x44, 0x40, 0x68, 0x64, 0x86,  // \..D@hd.
                /* 02E8 */  0xF3, 0x21, 0xD1, 0x60, 0x06, 0xF1, 0xF9, 0xC0,  // .!.`....
                /* 02F0 */  0x67, 0x0A, 0x9F, 0x9C, 0xF8, 0xFF, 0xFF, 0xE4,  // g.......
                /* 02F8 */  0x04, 0x9E, 0x83, 0xC9, 0x43, 0x05, 0x2C, 0x44,  // ....C.,D
                /* 0300 */  0x9F, 0x16, 0x38, 0x9C, 0xCF, 0x2C, 0x1C, 0xCE,  // ..8..,..
                /* 0308 */  0x47, 0x12, 0x7E, 0x80, 0xE4, 0x47, 0x25, 0x70,  // G.~..G%p
                /* 0310 */  0x09, 0x3C, 0x34, 0x80, 0x02, 0xC8, 0xF7, 0x03,  // .<4.....
                /* 0318 */  0x9F, 0x03, 0x9E, 0x11, 0xD8, 0x1C, 0x1E, 0x09,  // ........
                /* 0320 */  0x7C, 0x20, 0x60, 0xF0, 0x3C, 0xDA, 0xA8, 0xE8,  // | `.<...
                /* 0328 */  0xD1, 0xC6, 0xC3, 0xE3, 0x47, 0x06, 0xCF, 0xE7,  // ....G...
                /* 0330 */  0x81, 0xE0, 0x28, 0x1F, 0x09, 0x70, 0x18, 0xEF,  // ..(..p..
                /* 0338 */  0x17, 0x1E, 0xA2, 0x4F, 0x39, 0xB0, 0x26, 0x72,  // ...O9.&r
                /* 0340 */  0xD4, 0x16, 0x7D, 0x22, 0x10, 0xE8, 0x33, 0x17,  // ..}"..3.
                /* 0348 */  0xE6, 0x94, 0x03, 0x9C, 0x82, 0x8F, 0x1E, 0x15,  // ........
                /* 0350 */  0xF5, 0x40, 0x0A, 0xDA, 0x93, 0x82, 0xCF, 0x0A,  // .@......
                /* 0358 */  0x3E, 0x7C, 0xC1, 0xFF, 0xFF, 0x1F, 0xBE, 0xE0,  // >|......
                /* 0360 */  0xCC, 0xEB, 0x65, 0xCD, 0x07, 0x8E, 0x38, 0x67,  // ..e...8g
                /* 0368 */  0x71, 0xBA, 0xEF, 0x16, 0xF8, 0x13, 0x29, 0x30,  // q.....)0
                /* 0370 */  0x0B, 0x72, 0x22, 0x45, 0xC1, 0xF8, 0x44, 0x0A,  // .r"E..D.
                /* 0378 */  0xD8, 0xBC, 0x05, 0x60, 0xAF, 0x0B, 0x4F, 0x22,  // ...`..O"
                /* 0380 */  0x30, 0xCE, 0x11, 0xCF, 0x58, 0x30, 0x0F, 0x55,  // 0...X0.U
                /* 0388 */  0xA7, 0xF8, 0x52, 0xF5, 0xC6, 0x10, 0xE1, 0xC9,  // ..R.....
                /* 0390 */  0xEA, 0x35, 0xEA, 0x01, 0xCB, 0x60, 0x2F, 0x02,  // .5...`/.
                /* 0398 */  0x86, 0x79, 0xC5, 0xF2, 0xE9, 0x2A, 0xC4, 0x03,  // .y...*..
                /* 03A0 */  0x96, 0xCF, 0x5A, 0xD1, 0x42, 0x84, 0x8C, 0x12,  // ..Z.B...
                /* 03A8 */  0xEC, 0x15, 0xEB, 0x55, 0xC6, 0x47, 0x2A, 0x83,  // ...U.G*.
                /* 03B0 */  0x07, 0x0C, 0x1B, 0x2D, 0x52, 0x84, 0x47, 0x2C,  // ...-R.G,
                /* 03B8 */  0xFC, 0xFF, 0xFF, 0x88, 0x05, 0x1E, 0x09, 0x07,  // ........
                /* 03C0 */  0x52, 0x80, 0x2A, 0x03, 0xC7, 0x1D, 0x48, 0x81,  // R.*...H.
                /* 03C8 */  0xFD, 0x69, 0x02, 0x7F, 0xBD, 0xF0, 0x78, 0xB0,  // .i....x.
                /* 03D0 */  0xFF, 0xFF, 0x73, 0x00, 0xF8, 0x0E, 0x31, 0xC0,  // ..s...1.
                /* 03D8 */  0x60, 0xC0, 0x30, 0x0E, 0x31, 0xC0, 0x43, 0xF0,  // `.0.1.C.
                /* 03E0 */  0xC9, 0x0C, 0xF4, 0xC7, 0x1D, 0xF8, 0xE3, 0xE0,  // ........
                /* 03E8 */  0x19, 0x9F, 0x1C, 0x26, 0x50, 0x98, 0x13, 0x29,  // ...&P..)
                /* 03F0 */  0x0A, 0xC6, 0x27, 0x52, 0xC0, 0xD9, 0xFF, 0xFF,  // ..'R....
                /* 03F8 */  0x70, 0x05, 0x86, 0xE3, 0x0D, 0xF8, 0x6F, 0x33,  // p.....o3
                /* 0400 */  0x3E, 0x84, 0xFA, 0x7C, 0xE3, 0x0B, 0xA9, 0x21,  // >..|...!
                /* 0408 */  0x5E, 0x6C, 0xDE, 0xD4, 0x5E, 0x09, 0x5E, 0xDF,  // ^l..^.^.
                /* 0410 */  0xD9, 0xB5, 0xE6, 0xF5, 0xDD, 0xA7, 0x82, 0x27,  // .......'
                /* 0418 */  0xD1, 0x08, 0x21, 0xA3, 0xBC, 0xE4, 0x18, 0x24,  // ..!....$
                /* 0420 */  0xC4, 0xEB, 0xA8, 0x01, 0x83, 0x05, 0x89, 0x78,  // .......x
                /* 0428 */  0x0A, 0x4F, 0x3B, 0x8F, 0x37, 0xE0, 0x15, 0x75,  // .O;.7..u
                /* 0430 */  0x20, 0x05, 0xE8, 0xF1, 0xFF, 0x3F, 0x90, 0x02,  //  ....?..
                /* 0438 */  0x83, 0x7B, 0x0A, 0xEC, 0x73, 0x0A, 0xE0, 0x29,  // .{..s..)
                /* 0440 */  0xF9, 0x89, 0x94, 0xA6, 0x3E, 0x91, 0xA2, 0x15,  // ....>...
                /* 0448 */  0x01, 0x69, 0xAA, 0x60, 0x21, 0x98, 0xFE, 0x44,  // .i.`!..D
                /* 0450 */  0x4A, 0x0F, 0x06, 0xCE, 0x4D, 0xA2, 0xE4, 0x43,  // J...M..C
                /* 0458 */  0xA3, 0x70, 0xCE, 0x7A, 0x20, 0xA1, 0x20, 0x06,  // .p.z . .
                /* 0460 */  0x74, 0x90, 0x43, 0x05, 0xFA, 0xAC, 0xE2, 0x03,  // t.C.....
                /* 0468 */  0xC9, 0x81, 0x3C, 0x22, 0x7A, 0x58, 0x3E, 0x54,  // ..<"zX>T
                /* 0470 */  0xFA, 0xAE, 0xE2, 0x73, 0x88, 0x8F, 0x14, 0x1E,  // ...s....
                /* 0478 */  0xBF, 0x0F, 0x0B, 0xFC, 0x3F, 0xE3, 0xE3, 0x28,  // ....?..(
                /* 0480 */  0x03, 0xAF, 0xE6, 0xBC, 0x82, 0x02, 0xF3, 0x69,  // .......i
                /* 0488 */  0x14, 0xA3, 0xEB, 0x3E, 0x01, 0x92, 0xFF, 0xFF,  // ...>....
                /* 0490 */  0xFC, 0xB8, 0xBE, 0xC3, 0x28, 0xC8, 0xD1, 0x79,  // ....(..y
                /* 0498 */  0xF8, 0xC9, 0xA2, 0xE2, 0x4E, 0x96, 0x82, 0x78,  // ....N..x
                /* 04A0 */  0xB2, 0x8E, 0x32, 0x59, 0xF4, 0x4C, 0x7C, 0xBB,  // ..2Y.L|.
                /* 04A8 */  0xF0, 0x8C, 0xDE, 0xBB, 0x7C, 0x83, 0x65, 0x37,  // ....|.e7
                /* 04B0 */  0x59, 0x78, 0x97, 0x81, 0x90, 0x8F, 0x06, 0xBE,  // Yx......
                /* 04B8 */  0xC9, 0xC2, 0x1D, 0x8B, 0x2F, 0x23, 0xE0, 0xBB,  // ..../#..
                /* 04C0 */  0xC9, 0x02, 0x5E, 0x47, 0xE3, 0xB3, 0x05, 0x3B,  // ..^G...;
                /* 04C8 */  0x85, 0xF8, 0xBA, 0x06, 0x4B, 0xA1, 0x4D, 0x9F,  // ....K.M.
                /* 04D0 */  0x1A, 0x8D, 0x5A, 0xFD, 0xFF, 0x1B, 0x94, 0xA9,  // ..Z.....
                /* 04D8 */  0x51, 0xA6, 0x41, 0xAD, 0x3E, 0x95, 0x1A, 0x33,  // Q.A.>..3
                /* 04E0 */  0x76, 0xA1, 0xB0, 0xB8, 0x0B, 0x06, 0x95, 0xB4,  // v.......
                /* 04E8 */  0x2C, 0x8D, 0xCB, 0x81, 0x40, 0x68, 0x80, 0x5B,  // ,...@h.[
                /* 04F0 */  0xA9, 0x40, 0x1C, 0xFA, 0x0B, 0xA4, 0x53, 0x02,  // .@....S.
                /* 04F8 */  0xF9, 0x6A, 0x09, 0xC8, 0x62, 0x57, 0x25, 0x10,  // .j..bW%.
                /* 0500 */  0xCB, 0x54, 0x01, 0xD1, 0xC8, 0xDD, 0xC2, 0x20,  // .T..... 
                /* 0508 */  0x02, 0x72, 0xBC, 0x4F, 0x8D, 0x40, 0x1D, 0x49,  // .r.O.@.I
                /* 0510 */  0x07, 0x10, 0x13, 0xE4, 0x63, 0xAC, 0xF4, 0x25,  // ....c..%
                /* 0518 */  0x20, 0x10, 0xCB, 0xA6, 0x15, 0xA0, 0xE5, 0x3A,  //  ......:
                /* 0520 */  0x01, 0x62, 0x61, 0x41, 0x68, 0xC0, 0x5F, 0xB5,  // .baAh._.
                /* 0528 */  0x86, 0xE0, 0xB4, 0x20, 0x02, 0x72, 0x32, 0x2D,  // ... .r2-
                /* 0530 */  0x40, 0x2C, 0x27, 0x88, 0x80, 0xFC, 0xFF, 0x07   // @,'.....
            })
        }
    }

    Scope (\)
    {
        Name (HPDT, Package (0x09)
        {
            "LEGACYHP", 
            0x80000000, 
            0x80000000, 
            "NATIVEHP", 
            0x80000000, 
            0x80000000, 
            "THERMALX", 
            0x80000000, 
            0x80000000
        })
        Name (DDB0, 0x00)
        Name (DDB1, 0x00)
        Name (DDB2, 0x00)
    }

    Scope (_GPE)
    {
        Method (TRIG, 0, NotSerialized)
        {
            TRIE ()
        }

        Method (_L1C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Local1 = 0xFFFF
            Local2 = \_SB.PCI0.SMB.MIN
            Local1 = (Local2 << 0x08)
            Local2 = \_SB.PCI0.SMB.SEC
            Local1 |= Local2
            P80H = Local1
        }

        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.PB4, 0x02) // Device Wake
            Notify (\_SB.PCI0.PB5, 0x02) // Device Wake
            Notify (\_SB.PCI0.PB6, 0x02) // Device Wake
            Notify (\_SB.PCI0.PB7, 0x02) // Device Wake
            Notify (\_SB.PCI0.SPB0, 0x02) // Device Wake
            Notify (\_SB.PCI0.SPB1, 0x02) // Device Wake
            Notify (\_SB.PCI0.SPB2, 0x02) // Device Wake
            Notify (\_SB.PCI0.SPB3, 0x02) // Device Wake
        }

        Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.OHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.OHC2, 0x02) // Device Wake
            Notify (\_SB.PCI0.OHC3, 0x02) // Device Wake
            Notify (\_SB.PCI0.OHC4, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC2, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC3, 0x02) // Device Wake
            Notify (\_SB.PCI0.XHC0, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L14, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Sleep (0xC8)
            If (\_SB.PCI0.SMB.E20C)
            {
                If (\_SB.PCI0.SMB.GE20)
                {
                    P80H = 0xD0
                }
            }
            ElseIf (!\_SB.PCI0.SMB.GE20)
            {
                P80H = 0xD3
            }

            TRIE ()
            Notify (\_SB.PCI0.PB7, 0x01) // Device Check
        }

        Method (TRIE, 0, NotSerialized)
        {
            \_SB.PCI0.SMB.E20C = ~\_SB.PCI0.SMB.GE20
        }

        Name (WLAN, 0x00)
        Name (WLST, 0x01)
    }

    Scope (_TZ)
    {
        Name (TPAS, 0x5F)
        Name (TPC, 0x64)
        Name (TPSP, 0x63)
        ThermalZone (THZ0)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                \_SB.PCI0.LPC0.TMCP = (0x0AAC + (TPC * 0x0A))
                Return ((0x0AAC + (TPC * 0x0A)))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                \_SB.PCI0.LPC0.CRCP = 0x0BB8
                If (\_SB.PCI0.LPC0.EC.ECOK)
                {
                    Local0 = \_SB.PCI0.LPC0.EC.TMP2
                    If (((Local0 < 0x23) | (Local0 > 0x73)))
                    {
                        Local0 = 0x23
                    }

                    If ((Local0 > TPSP))
                    {
                        If (\_SB.PCI0.LPC0.EC.HKEY.DHKC)
                        {
                            \_SB.PCI0.LPC0.EC.HKEY.MHKQ (0x6022)
                        }
                    }

                    \_SB.PCI0.LPC0.CRCP = (0x0AAC + (Local0 * 0x0A))
                }

                If ((\_SB.PCI0.LPC0.CRCP >= \_SB.PCI0.LPC0.TMCP))
                {
                    \_SB.TSDL ()
                }

                Return (\_SB.PCI0.LPC0.CRCP)
            }

            Method (_PSL, 0, Serialized)  // _PSL: Passive List
            {
                Return (Package (0x01)
                {
                    \_PR.C000
                })
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return ((0x0AAC + (TPAS * 0x0A)))
            }

            Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
            {
                Return (0x02)
            }

            Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
            {
                Return (0x03)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (0x64)
            }
        }
    }

    Scope (_SB.PCI0.SMB)
    {
        Mutex (SBX0, 0x00)
        OperationRegion (SMB0, SystemIO, 0x0B00, 0x10)
        Field (SMB0, ByteAcc, NoLock, Preserve)
        {
            HST0,   8, 
            SLV0,   8, 
            CNT0,   8, 
            CMD0,   8, 
            ADD0,   8, 
            DT00,   8, 
            DT10,   8, 
            BLK0,   8
        }

        Method (WBD0, 1, NotSerialized)
        {
            Local0 = Arg0
            Local2 = 0x00
            Local3 = HST0 /* \_SB_.PCI0.SMB_.HST0 */
            Local1 = (Local3 & 0x80)
            While ((Local1 != 0x80))
            {
                If ((Local0 < 0x0A))
                {
                    Local2 = 0x18
                    Local1 = 0x00
                }
                Else
                {
                    Sleep (0x0A)
                    Local0 -= 0x0A
                    Local3 = HST0 /* \_SB_.PCI0.SMB_.HST0 */
                    Local1 = (Local3 & 0x80)
                }
            }

            If ((Local2 != 0x18))
            {
                Local1 = (HST0 & 0x1C)
                If (Local1)
                {
                    Local2 = 0x07
                }
            }

            Return (Local2)
        }

        Method (WTC0, 1, NotSerialized)
        {
            Local0 = Arg0
            Local2 = 0x07
            Local1 = 0x01
            While ((Local1 == 0x01))
            {
                Local3 = (HST0 & 0x1D)
                If ((Local3 != 0x00))
                {
                    If ((Local3 == 0x01))
                    {
                        If ((Local0 < 0x0A))
                        {
                            Local2 = 0x18
                            Local1 = 0x00
                        }
                        Else
                        {
                            Sleep (0x0A)
                            Local0 -= 0x0A
                        }
                    }
                    Else
                    {
                        Local2 = 0x07
                        Local1 = 0x00
                    }
                }
                Else
                {
                    Local2 = 0x00
                    Local1 = 0x00
                }
            }

            HST0 = (HST0 | 0x1F)
            Return (Local2)
        }

        Method (SBR0, 3, NotSerialized)
        {
            Local0 = Package (0x22)
                {
                    0x07, 
                    0x00, 
                    0x00
                }
            Local4 = (Arg0 & 0x5F)
            If ((Local4 != 0x03))
            {
                If ((Local4 != 0x05))
                {
                    If ((Local4 != 0x07))
                    {
                        If ((Local4 != 0x09))
                        {
                            If ((Local4 != 0x0B))
                            {
                                Local0 [0x00] = 0x19
                                Return (Local0)
                            }
                        }
                    }
                }
            }

            If ((Acquire (SBX0, 0xFFFF) == 0x00))
            {
                ADD0 = ((Arg1 << 0x01) | 0x01)
                CMD0 = Arg2
                HST0 = (HST0 | 0x1F)
                Local1 = (Arg0 & 0xA0)
                CNT0 = ((CNT0 & 0x5F) | Local1)
                If ((Local4 == 0x03))
                {
                    CNT0 = ((CNT0 & 0xA0) | 0x40)
                }

                If ((Local4 == 0x05))
                {
                    CNT0 = ((CNT0 & 0xA0) | 0x44)
                }

                If ((Local4 == 0x07))
                {
                    CNT0 = ((CNT0 & 0xA0) | 0x48)
                }

                If ((Local4 == 0x09))
                {
                    CNT0 = ((CNT0 & 0xA0) | 0x4C)
                }

                If ((Local4 == 0x0B))
                {
                    HST0 = (HST0 | 0x80)
                    DT00 = 0x00
                    CNT0 = ((CNT0 & 0xA0) | 0x54)
                }

                Local1 = WTC0 (0x03E8)
                Local0 [0x00] = Local1
                If ((Local1 == 0x00))
                {
                    If ((Local4 == 0x05))
                    {
                        Local0 [0x01] = 0x01
                        Local0 [0x02] = DT00 /* \_SB_.PCI0.SMB_.DT00 */
                    }

                    If ((Local4 == 0x07))
                    {
                        Local0 [0x01] = 0x01
                        Local0 [0x02] = DT00 /* \_SB_.PCI0.SMB_.DT00 */
                    }

                    If ((Local4 == 0x09))
                    {
                        Local0 [0x01] = 0x02
                        Local2 = DT10 /* \_SB_.PCI0.SMB_.DT10 */
                        Local2 <<= 0x08
                        Local2 += DT00 /* \_SB_.PCI0.SMB_.DT00 */
                        Local0 [0x02] = Local2
                    }

                    If ((Local4 == 0x0B))
                    {
                        Local1 = WBD0 (0x01F4)
                        If ((Local1 != 0x00))
                        {
                            Local0 [0x00] = Local1
                        }
                        Else
                        {
                            Local0 [0x01] = DT00 /* \_SB_.PCI0.SMB_.DT00 */
                            Local1 = DT00 /* \_SB_.PCI0.SMB_.DT00 */
                            Local2 = CNT0 /* \_SB_.PCI0.SMB_.CNT0 */
                            Local2 = 0x00
                            While ((Local2 < Local1))
                            {
                                Local3 = (0x02 + Local2)
                                Local0 [Local3] = BLK0 /* \_SB_.PCI0.SMB_.BLK0 */
                                Local2 += 0x01
                            }

                            HST0 = (HST0 | 0x80)
                        }
                    }
                }

                CNT0 = (CNT0 & 0x5F)
                Release (SBX0)
            }

            Return (Local0)
        }

        Method (SBW0, 5, NotSerialized)
        {
            Local0 = Package (0x01)
                {
                    0x07
                }
            Local4 = (Arg0 & 0x5F)
            If ((Local4 != 0x02))
            {
                If ((Local4 != 0x04))
                {
                    If ((Local4 != 0x06))
                    {
                        If ((Local4 != 0x08))
                        {
                            If ((Local4 != 0x0A))
                            {
                                Local0 [0x00] = 0x19
                                Return (Local0)
                            }
                        }
                    }
                }
            }

            If ((Acquire (SBX0, 0xFFFF) == 0x00))
            {
                ADD0 = (Arg1 << 0x01)
                CMD0 = Arg2
                HST0 = (HST0 | 0x1F)
                Local1 = (Arg0 & 0xA0)
                CNT0 = ((CNT0 & 0x5F) | Local1)
                If ((Local4 == 0x02))
                {
                    CNT0 = ((CNT0 & 0xA0) | 0x40)
                }

                If ((Local4 == 0x04))
                {
                    CNT0 = ((CNT0 & 0xA0) | 0x44)
                }

                If ((Local4 == 0x06))
                {
                    DT00 = Arg4
                    CNT0 = ((CNT0 & 0xA0) | 0x48)
                }

                If ((Local4 == 0x08))
                {
                    DT00 = (Arg4 & 0xFF)
                    DT10 = (Arg4 >> 0x08)
                    CNT0 = ((CNT0 & 0xA0) | 0x4C)
                }

                If ((Local4 == 0x0A))
                {
                    HST0 = (HST0 | 0x80)
                    Local1 = CNT0 /* \_SB_.PCI0.SMB_.CNT0 */
                    DT00 = Arg3
                    Local2 = 0x00
                    While ((Local2 < Arg3))
                    {
                        BLK0 = Arg4 [Local2]
                        Local2 += 0x01
                    }

                    CNT0 = ((CNT0 & 0xA0) | 0x54)
                }

                Local0 [0x00] = WTC0 (0x03E8)
                CNT0 = (CNT0 & 0x5F)
                Release (SBX0)
            }

            Return (Local0)
        }
    }
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 000000F4
[008h 0008 001h]                    Revision : 04
[009h 0009 001h]                    Checksum : 12
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-G9   "
[018h 0024 004h]                Oem Revision : 00001050
[01Ch 0028 004h]             Asl Compiler ID : "PTL "
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 004h]                FACS Address : DEE1A000
[028h 0040 004h]                DSDT Address : DEEA1000
[02Ch 0044 001h]                       Model : 01
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B0
[034h 0052 001h]           ACPI Enable Value : A0
[035h 0053 001h]          ACPI Disable Value : A1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00000800
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000804
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00000000
[04Ch 0076 004h]      PM Timer Block Address : 00000808
[050h 0080 004h]          GPE0 Block Address : 00000820
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 00
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 08
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0000
[066h 0102 002h]          Cache Flush Stride : 0000
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 00
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 00
[06Dh 0109 002h]  Boot Flags (decoded below) : 0001
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 000005AD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 01 [Byte Access:8]
[078h 0120 008h]                     Address : 0000000000000CF9

[080h 0128 001h]        Value to cause reset : 06
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 00
[084h 0132 008h]                FACS Address : 00000000DEE1A000
[08Ch 0140 008h]                DSDT Address : 00000000DEEA1000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 02 [Word Access:16]
[098h 0152 008h]                     Address : 0000000000000800

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 01 [SystemIO]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 02 [Word Access:16]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000000804

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 01 [SystemIO]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 02 [Word Access:16]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 00
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 0000000000000000

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000000808

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 40
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 03 [DWord Access:32]
[0E0h 0224 008h]                     Address : 0000000000000820

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 01 [SystemIO]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 03 [DWord Access:32]
[0ECh 0236 008h]                     Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 04 12 4C 45 4E 4F 56 4F  // FACP......LENOVO
    0010: 54 50 2D 47 39 20 20 20 50 10 00 00 50 54 4C 20  // TP-G9   P...PTL 
    0020: 02 00 00 00 00 A0 E1 DE 00 10 EA DE 01 02 09 00  // ................
    0030: B0 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 00 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 00 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 00 00 00 01 00 0D 00 00 01 00 00  // e...............
    0070: AD 05 00 00 01 08 00 01 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 00 A0 E1 DE 00 00 00 00 00 10 EA DE  // ................
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 03  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 03 00 00 00 00  //  ...............
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 0000A200
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 01
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 A2 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000054
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : DA
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-G9   "
[018h 0024 004h]                Oem Revision : 00001050
[01Ch 0028 004h]             Asl Compiler ID : "PTL "
[020h 0032 004h]       Asl Compiler Revision : 00000002


[024h 0036 002h]               Subtable Type : 0000
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]    FPDT Boot Record Address : 00000000DD9ED698

[034h 0052 002h]               Subtable Type : 3000
[036h 0054 001h]                      Length : 10
[037h 0055 001h]                    Revision : 01

**** Unknown FPDT subtable type 0x3000


[044h 0068 002h]               Subtable Type : 3001
[046h 0070 001h]                      Length : 10
[047h 0071 001h]                    Revision : 01

**** Unknown FPDT subtable type 0x3001


Raw Table Data: Length 84 (0x54)

    0000: 46 50 44 54 54 00 00 00 01 DA 4C 45 4E 4F 56 4F  // FPDTT.....LENOVO
    0010: 54 50 2D 47 39 20 20 20 50 10 00 00 50 54 4C 20  // TP-G9   P...PTL 
    0020: 02 00 00 00 00 00 10 01 00 00 00 00 98 D6 9E DD  // ................
    0030: 00 00 00 00 00 30 10 01 00 00 00 00 18 B0 9E DD  // .....0..........
    0040: 00 00 00 00 01 30 10 01 00 00 00 00 18 60 98 DD  // .....0.......`..
    0050: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 8C
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-G9   "
[018h 0024 004h]                Oem Revision : 00001050
[01Ch 0028 004h]             Asl Compiler ID : "PTL "
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 004h]           Hardware Block ID : 43538210

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 08
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 02
[035h 0053 002h]         Minimum Clock Ticks : 0014
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 8C 4C 45 4E 4F 56 4F  // HPET8.....LENOVO
    0010: 54 50 2D 47 39 20 20 20 50 10 00 00 50 54 4C 20  // TP-G9   P...PTL 
    0020: 02 00 00 00 10 82 53 43 00 08 00 00 00 00 D0 FE  // ......SC........
    0030: 00 00 00 00 02 14 00 00                          // ........


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 79
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-G9   "
[018h 0024 004h]                Oem Revision : 00001050
[01Ch 0028 004h]             Asl Compiler ID : "PTL "
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000F8000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : 3F
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 79 4C 45 4E 4F 56 4F  // MCFG<....yLENOVO
    0010: 54 50 2D 47 39 20 20 20 50 10 00 00 50 54 4C 20  // TP-G9   P...PTL 
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


POAT
----
[000h 0000 004h]                   Signature : "POAT"    
[004h 0004 004h]                Table Length : 00000055
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 7E
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-G9   "
[018h 0024 004h]                Oem Revision : 00001050
[01Ch 0028 004h]             Asl Compiler ID : "PTL "
[020h 0032 004h]       Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [POAT]


Raw Table Data: Length 85 (0x55)

    0000: 50 4F 41 54 55 00 00 00 03 7E 4C 45 4E 4F 56 4F  // POATU....~LENOVO
    0010: 54 50 2D 47 39 20 20 20 50 10 00 00 50 54 4C 20  // TP-G9   P...PTL 
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0050: 00 00 00 00 00                                   // .....


SBST
----
[000h 0000 004h]                   Signature : "SBST"    [Smart Battery Specification Table]
[004h 0004 004h]                Table Length : 00000030
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 9D
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-G9   "
[018h 0024 004h]                Oem Revision : 00001050
[01Ch 0028 004h]             Asl Compiler ID : "PTL "
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 004h]               Warning Level : 00000000
[028h 0040 004h]                   Low Level : 00000000
[02Ch 0044 004h]              Critical Level : 00000000

Raw Table Data: Length 48 (0x30)

    0000: 53 42 53 54 30 00 00 00 01 9D 4C 45 4E 4F 56 4F  // SBST0.....LENOVO
    0010: 54 50 2D 47 39 20 20 20 50 10 00 00 50 54 4C 20  // TP-G9   P...PTL 
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


SLIC
----
[000h 0000 004h]                   Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004 004h]                Table Length : 00000176
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 0F
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-G9   "
[018h 0024 004h]                Oem Revision : 00001050
[01Ch 0028 004h]             Asl Compiler ID : "PTL "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 152h] Software Licensing Structure : 53 4C 49 43 76 01 00 00 01 0F 4C 45 4E 4F 56 4F /* SLICv.....LENOVO */\
/* 034h 0052  16 */                            54 50 2D 47 39 20 20 20 50 10 00 00 50 54 4C 20 /* TP-G9   P...PTL  */\
/* 044h 0068  16 */                            01 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00 /* ................ */\
/* 054h 0084  16 */                            00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 /* .$..RSA1........ */\
/* 064h 0100  16 */                            69 16 4A 9F B1 4B 3A FB 80 20 AA AF C4 F9 3E C1 /* i.J..K:.. ....>. */\
/* 074h 0116  16 */                            80 49 EE 6A 65 26 72 1E CD BF 5F 2F 96 D6 C0 0A /* .I.je&r..._/.... */\
/* 084h 0132  16 */                            92 F5 06 B5 00 B2 3B 29 02 E2 4C 8D C2 F2 BC 41 /* ......;)..L....A */\
/* 094h 0148  16 */                            77 9C 70 F0 F3 1B 09 D2 63 5A DC A8 83 F8 5E C9 /* w.p.....cZ....^. */\
/* 0A4h 0164  16 */                            15 95 F9 FA FD DC 05 B7 4D 67 7F 2D B3 84 33 20 /* ........Mg.-..3  */\
/* 0B4h 0180  16 */                            E1 D1 79 2A A7 6A 77 D1 B6 20 2A 76 42 C5 D5 E9 /* ..y*.jw.. *vB... */\
/* 0C4h 0196  16 */                            B6 43 40 55 44 C3 C9 37 99 5F 41 97 70 F3 D1 F6 /* .C@UD..7._A.p... */\
/* 0D4h 0212  16 */                            07 EC 7B 1A 29 A1 C1 F1 91 FD 48 86 6E 3E CE CB /* ..{.).....H.n>.. */\
/* 0E4h 0228  16 */                            01 00 00 00 B6 00 00 00 00 00 02 00 4C 45 4E 4F /* ............LENO */\
/* 0F4h 0244  16 */                            56 4F 54 50 2D 47 39 20 20 20 57 49 4E 44 4F 57 /* VOTP-G9   WINDOW */\
/* 104h 0260  16 */                            53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00 /* S .............. */\
/* 114h 0276  16 */                            00 00 00 00 00 00 98 1A 65 72 DD 7A 78 72 BD 62 /* ........er.zxr.b */\
/* 124h 0292  16 */                            E6 B1 7C 95 B4 85 68 06 A3 98 1F 66 00 7E 08 94 /* ..|...h....f.~.. */\
/* 134h 0308  16 */                            07 F4 0E D2 EB F9 3E 52 B0 DF F5 B7 30 C7 F0 0C /* ......>R....0... */\
/* 144h 0324  16 */                            6C B6 69 2B 34 DD 86 C0 29 75 A6 CE A0 10 B7 E0 /* l.i+4...)u...... */\
/* 154h 0340  16 */                            F7 F0 AE 24 24 28 55 A0 8B 38 1E 6D 79 2F 91 AC /* ...$$(U..8.my/.. */\
/* 164h 0356  16 */                            4A CF 8D 22 25 38 04 16 35 B0 9E 76 64 EA 35 62 /* J.."%8..5..vd.5b */\
/* 174h 0372   2 */                            9D 94                                           /* .. */\

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 0F 4C 45 4E 4F 56 4F  // SLICv.....LENOVO
    0010: 54 50 2D 47 39 20 20 20 50 10 00 00 50 54 4C 20  // TP-G9   P...PTL 
    0020: 01 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 69 16 4A 9F B1 4B 3A FB 80 20 AA AF C4 F9 3E C1  // i.J..K:.. ....>.
    0050: 80 49 EE 6A 65 26 72 1E CD BF 5F 2F 96 D6 C0 0A  // .I.je&r..._/....
    0060: 92 F5 06 B5 00 B2 3B 29 02 E2 4C 8D C2 F2 BC 41  // ......;)..L....A
    0070: 77 9C 70 F0 F3 1B 09 D2 63 5A DC A8 83 F8 5E C9  // w.p.....cZ....^.
    0080: 15 95 F9 FA FD DC 05 B7 4D 67 7F 2D B3 84 33 20  // ........Mg.-..3 
    0090: E1 D1 79 2A A7 6A 77 D1 B6 20 2A 76 42 C5 D5 E9  // ..y*.jw.. *vB...
    00A0: B6 43 40 55 44 C3 C9 37 99 5F 41 97 70 F3 D1 F6  // .C@UD..7._A.p...
    00B0: 07 EC 7B 1A 29 A1 C1 F1 91 FD 48 86 6E 3E CE CB  // ..{.).....H.n>..
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 4C 45 4E 4F  // ............LENO
    00D0: 56 4F 54 50 2D 47 39 20 20 20 57 49 4E 44 4F 57  // VOTP-G9   WINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 98 1A 65 72 DD 7A 78 72 BD 62  // ........er.zxr.b
    0100: E6 B1 7C 95 B4 85 68 06 A3 98 1F 66 00 7E 08 94  // ..|...h....f.~..
    0110: 07 F4 0E D2 EB F9 3E 52 B0 DF F5 B7 30 C7 F0 0C  // ......>R....0...
    0120: 6C B6 69 2B 34 DD 86 C0 29 75 A6 CE A0 10 B7 E0  // l.i+4...)u......
    0130: F7 F0 AE 24 24 28 55 A0 8B 38 1E 6D 79 2F 91 AC  // ...$$(U..8.my/..
    0140: 4A CF 8D 22 25 38 04 16 35 B0 9E 76 64 EA 35 62  // J.."%8..5..vd.5b
    0150: 9D 94 60 F7 87 7A CE 35 2D E8 EB E0 E3 D7 C6 FE  // ..`..z.5-.......
    0160: 0C 93 8B 52 D4 13 22 09 78 8D 61 BC 9E 36 C8 1F  // ...R..".x.a..6..
    0170: 5A 03 A3 3D 85 7B                                // Z..=.{


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "ALIB", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIC, MethodObj)    // Warning: Unknown method, guessing 2 arguments

    Scope (\_SB)
    {
        Name (A001, 0x06)
        Name (AD02, 0x03)
        Alias (AD02, A010)
        Name (AD03, 0x02)
        Alias (AD03, A011)
        Name (AD04, 0x00)
        Alias (AD04, A012)
        Name (AD05, 0x03)
        Alias (AD05, A013)
        Name (AD06, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x02, 
            0x02, 
            0x02, 
            0x00
        })
        Alias (AD06, A014)
        Name (AD08, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Alias (AD08, A015)
        Name (A016, 0x00)
        Name (A017, 0x00)
        Name (A018, 0x01)
        Name (A019, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A020, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A021, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (AD09, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Alias (AD09, A022)
        Name (A023, Package (0x08)
        {
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01
        })
        Name (A024, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A026, 0x00)
        Method (A027, 1, Serialized)
        {
            Local1 = DerefOf (Arg0 [0x02])
            Local0 = A003 ()
            A017 = Local1
            Local2 = ((0x01 << 0x05) | (0x01 << 0x06))
            Local3 = ((A017 << 0x05) | (A018 << 0x06))
            A028 (0x00, 0x60, 0xF4, ~Local2, (Local2 & Local3))
            If ((Local1 == Local0))
            {
                Return (0x00)
            }

            A007 (A017)
            If ((A010 == 0x04))
            {
                A002 (0x01)
            }

            If (((A010 <= 0x01) || (A010 >= 0x04)))
            {
                Return (0x00)
            }

            If ((A016 == 0x00))
            {
                Return (0x00)
            }

            A029 ()
            Return (0x00)
        }

        Method (A030, 1, NotSerialized)
        {
            Local7 = A031 (Arg0)
            Local0 = DerefOf (Local7 [0x02])
            If ((Local0 != 0x02))
            {
                Return (Local7)
            }

            A029 ()
            Return (Local7)
        }

        Method (A031, 1, NotSerialized)
        {
            Name (A032, 0x00)
            A026 = 0x00
            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A033)
            A033 = 0x03
            CreateByteField (Local7, 0x02, A034)
            A034 = 0x01
            If (((A010 <= 0x01) || (A010 >= 0x04)))
            {
                Return (Local7)
            }

            If ((A016 == 0x00))
            {
                Return (Local7)
            }

            CreateWordField (Arg0, 0x02, A035)
            CreateWordField (Arg0, 0x04, A036)
            CreateWordField (Arg0, 0x06, A037)
            CreateByteField (Arg0, 0x08, A038)
            CreateByteField (Arg0, 0x09, A039)
            A032 = ((A035 >> 0x08) & 0xFF)
            While ((A026 <= A001))
            {
                If ((A040 (A026) == 0x01))
                {
                    Local1 = A008 (((A026 + 0x02) << 0x03), 0x18)
                    Local2 = ((Local1 >> 0x10) & 0xFF)
                    Local1 = ((Local1 >> 0x08) & 0xFF)
                    If (((A032 >= Local1) && (A032 <= Local2)))
                    {
                        Break
                    }
                }

                A026++
            }

            If ((A026 > A001))
            {
                Return (Local7)
            }

            If ((DerefOf (A019 [A026]) == 0x00))
            {
                A019 [A026] = A035 /* \_SB_.A031.A035 */
            }
            ElseIf ((DerefOf (A019 [A026]) != A035))
            {
                Return (Local7)
            }

            A024 [A026] = 0x00
            If ((A039 == 0x00))
            {
                A019 [A026] = 0x00
            }

            If ((A039 == 0x01))
            {
                A024 [A026] = 0x01
            }

            If ((A039 == 0x02))
            {
                A021 [A026] = 0x01
            }

            If ((A039 == 0x03))
            {
                A021 [A026] = 0x02
            }

            If (((A036 & A037) == 0x01))
            {
                A021 [A026] = DerefOf (A014 [A026])
            }

            A034 = 0x02
            Return (Local7)
        }

        Method (A040, 1, Serialized)
        {
            If ((DerefOf (A014 [Arg0]) == 0x00))
            {
                Return (0x00)
            }

            Return (0x01)
        }

        Method (A041, 1, Serialized)
        {
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            A016 = DerefOf (Arg0 [0x02])
            Local0 = A042 (0x00, 0x60, 0xF4)
            If ((A016 == 0x01))
            {
                If (((Local0 & 0x01) == 0x01))
                {
                    Return (Local7)
                }

                Local0 |= 0x01
            }

            If ((A016 == 0x00))
            {
                If (((Local0 & 0x01) == 0x00))
                {
                    Return (Local7)
                }

                Local0 &= ~0x01
            }

            Local0 |= (A010 << 0x01)
            A043 (0x00, 0x60, 0xF4, Local0)
            A044 (RefOf (A020), RefOf (A019))
            A007 (A017)
            If ((A010 == 0x04))
            {
                A002 (0x01)
            }

            If (((A010 > 0x01) && (A010 < 0x04)))
            {
                If ((A010 == 0x02))
                {
                    A044 (RefOf (A014), RefOf (A022))
                    A026 = 0x00
                    While ((A026 <= A001))
                    {
                        If ((DerefOf (A015 [A026]) != 0x00))
                        {
                            A022 [A026] = DerefOf (A015 [A026])
                        }

                        A026++
                    }
                }
                Else
                {
                    A044 (RefOf (A023), RefOf (A022))
                    A022 [0x06] = DerefOf (A014 [0x06])
                }

                A029 ()
            }

            Return (Local7)
        }

        Name (A045, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Method (A029, 0, Serialized)
        {
            A026 = 0x00
            A044 (RefOf (A023), RefOf (A045))
            While ((A026 <= A001))
            {
                If ((A040 (A026) == 0x01))
                {
                    A045 [A026] = A046 (A026)
                }

                A026++
            }

            If ((Match (A024, MEQ, 0x01, MTR, 0x00, 0x00) != Ones))
            {
                A044 (RefOf (A023), RefOf (A045))
            }

            If ((Match (A045, MEQ, 0x02, MTR, 0x00, 0x00) != Ones))
            {
                A047 (0x02, 0x01)
                A002 (0x02)
            }

            A026 = 0x00
            While ((A026 <= A001))
            {
                If ((A040 (A026) == 0x00))
                {
                    A026++
                    Continue
                }

                Local0 = DerefOf (A022 [A026])
                Local2 = DerefOf (A045 [A026])
                If ((Local0 == Local2))
                {
                    A026++
                    Continue
                }

                A022 [A026] = Local2
                A048 (A026, Local2)
                A026++
            }

            If ((Match (A045, MEQ, 0x02, MTR, 0x00, 0x00) == Ones))
            {
                A002 (0x01)
                A047 (0x01, 0x00)
            }
        }

        Method (A046, 1, NotSerialized)
        {
            Local0 = 0x02
            Local1 = A003 ()
            If ((DerefOf (A019 [Arg0]) == 0x00))
            {
                If (((Local1 == 0x01) || (A010 == 0x03)))
                {
                    Local0 = 0x01
                }

                If (((Local1 == 0x00) && (A010 == 0x03)))
                {
                    If ((Arg0 == 0x06))
                    {
                        Local0 = 0x02
                    }
                }

                If ((DerefOf (A015 [Arg0]) != 0x00))
                {
                    Local0 = DerefOf (A015 [Arg0])
                }
            }
            Else
            {
                Local0 = DerefOf (A021 [Arg0])
            }

            Local2 = DerefOf (A014 [A026])
            If ((Local2 < Local0))
            {
                Local0 = Local2
            }

            Return (Local0)
        }

        Method (A048, 2, NotSerialized)
        {
            If ((Arg0 == 0x06))
            {
                A028 (0x00, 0x60, 0x80, ~0x40, 0x40)
            }

            A049 (Arg0, Arg1)
            If ((DerefOf (A019 [Arg0]) != 0x00))
            {
                A050 (Arg0, 0xA1, ~0x1000, 0x00)
            }
            Else
            {
                A050 (Arg0, 0xA1, ~0x1000, 0x1000)
            }

            Local1 = ((Arg0 + 0x02) << 0x03)
            Local3 = (A051 (Arg0, 0xA5) & 0x3F)
            A052 (Arg0, 0x01, Local3)
            If ((Local3 >= 0x10))
            {
                A053 (Arg0)
                Local2 = 0x01
                While (Local2)
                {
                    A054 (Local1, 0x68, ~0x00, 0x20)
                    Sleep (0x1E)
                    While ((A008 (Local1, 0x68) & 0x08000000))
                    {
                        Sleep (0x0A)
                    }

                    Local2 = 0x00
                    If ((Arg1 == 0x01))
                    {
                        If ((A055 (Arg0) != 0x01))
                        {
                            Local2 = 0x01
                        }
                    }
                }

                A056 (Arg0)
            }
            Else
            {
            }

            If ((Arg0 == 0x06))
            {
                A028 (0x00, 0x60, 0x80, ~0x40, 0x00)
            }
        }

        Name (A057, Package (0x09)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A058, 0x00)
        Name (A059, 0x00)
        Method (A053, 1, Serialized)
        {
            A058 = 0x00
            A059 = 0x00
            Local1 = ((Arg0 + 0x02) << 0x03)
            If ((Arg0 == 0x06))
            {
                A057 [0x00] = A060 (0x00, 0x00)
                A060 (0x00, 0x01)
                Return (0x00)
            }

            Local3 = A008 (Local1, 0x18)
            Local3 = ((Local3 >> 0x08) & 0xFF)
            Local2 = (Local3 << 0x08)
            Local3 = A008 (Local2, 0x0C)
            Local3 = ((Local3 >> 0x10) & 0xFF)
            If (((Local3 & 0x80) != 0x00))
            {
                Local0 = 0x07
            }
            Else
            {
                Local0 = 0x00
            }

            Local4 = 0x00
            While ((Local4 <= Local0))
            {
                A058 = A061 ((Local2 + Local4), 0x10)
                If ((A058 == 0x00))
                {
                    Local4++
                    Continue
                }

                A058 += 0x10
                A059 = A008 ((Local2 + Local4), A058)
                A057 [Local4] = (A059 & 0x03)
                A054 ((Local2 + Local4), A058, ~0x03, 0x00)
                Local4++
            }
        }

        Method (A056, 1, Serialized)
        {
            A058 = 0x00
            A059 = 0x00
            If ((Arg0 == 0x06))
            {
                A060 (DerefOf (A057 [0x00]), 0x01)
                Return (0x00)
            }

            Local1 = ((Arg0 + 0x02) << 0x03)
            Local3 = A008 (Local1, 0x18)
            Local3 = ((Local3 >> 0x08) & 0xFF)
            Local2 = (Local3 << 0x08)
            Local3 = A008 (Local2, 0x0C)
            Local3 = ((Local3 >> 0x10) & 0xFF)
            If (((Local3 & 0x80) != 0x00))
            {
                Local0 = 0x07
            }
            Else
            {
                Local0 = 0x00
            }

            Local4 = 0x00
            While ((Local4 <= Local0))
            {
                A058 = A061 ((Local2 + Local4), 0x10)
                If ((A058 == 0x00))
                {
                    Local4++
                    Continue
                }

                A058 += 0x10
                A009 ((Local2 + Local4), A058, DerefOf (A057 [Local4]))
                Local4++
            }
        }

        Method (A049, 2, NotSerialized)
        {
            Local0 = ((Arg0 + 0x02) << 0x03)
            If ((Arg1 == 0x01))
            {
                A054 (Local0, 0x88, ~0x2F, 0x21)
                A050 (Arg0, 0xA4, ~0x20000001, 0x00)
            }
            Else
            {
                A050 (Arg0, 0xA4, ~0x20000001, 0x20000001)
                A054 (Local0, 0x88, ~0x2F, 0x02)
            }
        }

        Method (A044, 2, NotSerialized)
        {
            Local1 = SizeOf (Arg0)
            Local0 = 0x00
            While ((Local0 < Local1))
            {
                DerefOf (Arg1) [Local0] = DerefOf (DerefOf (Arg0) [Local0])
                Local0++
            }
        }

        Method (A003, 0, NotSerialized)
        {
            Return ((A017 & A018))
        }

        Name (A062, 0x00)
        Name (A063, 0x00)
        Name (A064, 0x00)
        Name (A065, 0x00)
        Name (A066, 0x00)
        Name (A067, 0x00)
        Method (A068, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A033)
            CreateWordField (Local7, 0x02, A069)
            CreateByteField (Arg0, 0x02, A070)
            A033 = 0x03
            A069 = A070 /* \_SB_.A068.A070 */
            Return (Local7)
        }

        Method (A071, 1, Serialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            Local1 = ((Local1 >> 0x03) - 0x02)
            If ((Local0 == 0x01))
            {
                Local2 = 0x06
            }
            Else
            {
                Local2 = 0x04
            }

            Local0 = A072 (Local1, Local2)
            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A033)
            CreateByteField (Local7, 0x02, A034)
            CreateByteField (Local7, 0x03, A073)
            A033 = 0x04
            A034 = 0x00
            A073 = Local0
            Return (Local7)
        }

        Name (A074, Buffer (0x0A)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00                                       // ..
        })
        Method (A072, 2, Serialized)
        {
            Local4 = 0x00
            Local7 = A075 (Arg0)
            Local1 = DerefOf (Local7 [0x07])
            If ((Local1 != 0x01))
            {
                Return (Local4)
            }

            Local2 = Arg1
            While ((Local2 != 0x08))
            {
                If ((Local2 == 0x06))
                {
                    A015 [Arg0] = 0x00
                    A050 (Arg0, 0xA2, ~0x2000, 0x00)
                    A018 = 0x00
                    A029 ()
                    A076 (Arg0, 0x01)
                    A077 (Arg0, 0x00)
                    Local2 = 0x01
                    Local3 = 0x00
                }

                If ((Local2 == 0x01))
                {
                    Local1 = (A051 (Arg0, 0xA5) & 0x3F)
                    If ((Local1 > 0x04))
                    {
                        Local2 = 0x02
                        Local3 = 0x00
                        Continue
                    }

                    If ((Local3 < 0x50))
                    {
                        Sleep (0x01)
                        Local3++
                    }
                    Else
                    {
                        Local2 = 0x04
                    }
                }

                If ((Local2 == 0x02))
                {
                    Local1 = A051 (Arg0, 0xA5)
                    Local1 &= 0x3F
                    If ((Local1 == 0x10))
                    {
                        Local2 = 0x05
                        Continue
                    }

                    If ((Local3 < 0x50))
                    {
                        Sleep (0x01)
                        Local3++
                        Continue
                    }

                    Local2 = 0x04
                    If ((DerefOf (A015 [Arg0]) == 0x01))
                    {
                        Continue
                    }

                    If ((A078 (Arg0) == 0x01))
                    {
                        A050 (Arg0, 0xA2, ~0x2000, 0x2000)
                        A015 [Arg0] = 0x01
                        A049 (Arg0, 0x01)
                        Local2 = 0x07
                    }
                }

                If ((Local2 == 0x04))
                {
                    A077 (Arg0, 0x01)
                    A076 (Arg0, 0x00)
                    A015 [Arg0] = 0x01
                    Local2 = 0x00
                }

                If ((Local2 == 0x07))
                {
                    If (CondRefOf (\_SB.ALIC, Local6))
                    {
                        Local1 = ((Arg0 + 0x02) << 0x03)
                        \_SB.ALIC (Local1, 0x00)
                        Sleep (0x02)
                        \_SB.ALIC (Local1, 0x01)
                        Local3 = 0x00
                        Local2 = 0x01
                        Continue
                    }

                    Local2 = 0x04
                }

                If ((Local2 == 0x05))
                {
                    Local4 = 0x01
                    Local2 = 0x00
                    A076 (Arg0, 0x02)
                }

                If ((Local2 == 0x00))
                {
                    A018 = 0x01
                    A029 ()
                    Local2 = 0x08
                }
            }

            Return (Local4)
        }

        Method (A076, 2, Serialized)
        {
            Local7 = A075 (Arg0)
            A064 = DerefOf (Local7 [0x02])
            A065 = DerefOf (Local7 [0x03])
            If ((Arg1 == 0x00))
            {
                A079 (Arg0, A064, A065, 0x01)
            }

            If ((Arg1 == 0x01))
            {
                A079 (Arg0, A064, A065, 0x00)
            }

            If ((Arg1 != 0x02))
            {
                Return (0x00)
            }

            Local2 = A080 (Arg0, 0x00)
            If ((A080 (Arg0, 0x01) <= Local2))
            {
                Return (0x00)
            }

            Local1 = A081 (Arg0)
            If ((Local1 == 0x00))
            {
                Local3 = (A064 + Local2)
                Local4 = A065 /* \_SB_.A065 */
            }
            Else
            {
                Local4 = (A065 - Local2)
                Local3 = A064 /* \_SB_.A064 */
            }

            A079 (Arg0, Local3, Local4, 0x01)
            Return (0x00)
        }

        Method (A078, 1, NotSerialized)
        {
            Local1 = Buffer (0x10){}
            Local0 = 0x00
            While ((Local0 <= 0x03))
            {
                Local2 = A051 (Arg0, (Local0 + 0xA5))
                Local1 [(Local0 * 0x04)] = Local2
                Local1 [((Local0 * 0x04) + 0x01)] = (
                    Local2 >> 0x08)
                Local1 [((Local0 * 0x04) + 0x02)] = (
                    Local2 >> 0x10)
                Local1 [((Local0 * 0x04) + 0x03)] = (
                    Local2 >> 0x18)
                Local0++
            }

            Local0 = 0x00
            While ((Local0 < 0x0F))
            {
                If (((DerefOf (Local1 [Local0]) == 0x2A) && (DerefOf (
                    Local1 [(Local0 + 0x01)]) == 0x09)))
                {
                    Return (0x01)
                }

                Local0++
            }

            Return (0x00)
        }

        Method (A081, 1, Serialized)
        {
            Local7 = A075 (Arg0)
            A062 = DerefOf (Local7 [0x00])
            A063 = DerefOf (Local7 [0x01])
            Local0 = 0x00
            If ((A062 > A063))
            {
                Local0 = 0x01
            }

            Local1 = (A051 (Arg0, 0x50) & 0x01)
            Return (((Local0 ^ Local1) & 0x01))
        }

        Method (A077, 2, NotSerialized)
        {
            Local7 = A075 (Arg0)
            A067 = DerefOf (Local7 [0x04])
            A066 = ((DerefOf (Local7 [(0x05 + 0x01)]) << 
                0x08) | DerefOf (Local7 [0x05]))
            A028 (0x00, 0xE0, ((A066 << 0x10) | (0x0800 + (0x0100 * 
                A067))), ~0x01, Arg1)
        }

        Name (A082, Buffer (0x07)
        {
             0x00, 0x01, 0x02, 0x04, 0x08, 0x0C, 0x10         // .......
        })
        Method (A080, 2, NotSerialized)
        {
            If ((Arg1 == 0x00))
            {
                Local0 = ((A051 (Arg0, 0xA2) >> 0x04) & 0x07)
                Local1 = DerefOf (A082 [Local0])
            }
            Else
            {
                Local7 = A075 (Arg0)
                A062 = DerefOf (Local7 [0x00])
                A063 = DerefOf (Local7 [0x01])
                If ((A062 > A063))
                {
                    Local1 = (A062 - A063) /* \_SB_.A063 */
                }
                Else
                {
                    Local1 = (A063 - A062) /* \_SB_.A062 */
                }

                Local1++
            }

            Return (Local1)
        }

        Method (A079, 4, Serialized)
        {
            Local7 = A075 (Arg0)
            A064 = Arg1
            A065 = Arg2
            A066 = ((DerefOf (Local7 [(0x05 + 0x01)]) << 
                0x08) | DerefOf (Local7 [0x05]))
            If ((A064 > A065))
            {
                Local1 = (A064 - A065) /* \_SB_.A065 */
                Local2 = A065 /* \_SB_.A065 */
            }
            Else
            {
                Local1 = (A065 - A064) /* \_SB_.A064 */
                Local2 = A064 /* \_SB_.A064 */
            }

            Local3 = (((0x01 << (Local1 + 0x01)) - 0x01) << 
                Local2)
            Local4 = ~Local3
            If ((Arg3 == 0x01))
            {
                Local3 = 0x00
            }

            A028 (0x00, 0xE0, ((A066 << 0x10) | 0x8023), Local4, Local3)
            Stall (0x0A)
        }

        Method (A083, 1, NotSerialized)
        {
            Local0 = A042 (0x00, 0x60, 0xCD)
            Arg0++
            Local0 = ((Local0 & 0xFEFFFFFF) | (~(Local0 & 0x01000000)
                 & 0x01000000))
            Local0 = ((Local0 & 0xFD00FFFF) | (Arg0 << 0x10))
            A043 (0x00, 0x60, 0xCD, Local0)
            Local0 = A042 (0x00, 0x60, 0xCE)
            Return (Local0)
        }

        Method (A084, 3, NotSerialized)
        {
            Local0 = A042 (0x00, 0x60, 0xCD)
            Local1 = (Arg1 & 0xFFFF)
            Local0 = ((Local0 & 0xFEFFFFFF) | (~(Local0 & 0x01000000)
                 & 0x01000000))
            Local0 = ((Local0 & 0xFD000000) | (Arg0 << 0x10))
            Local0 |= 0x02000000
            Local0 |= Local1
            A043 (0x00, 0x60, 0xCD, Local0)
            If ((Arg2 == 0x01))
            {
                Local1 = (Arg1 >> 0x10)
                Local0 = ((Local0 & 0xFEFFFFFF) | (~(Local0 & 0x01000000)
                     & 0x01000000))
                Local0 = ((Local0 & 0xFF000000) | ((Arg0 + 0x01) << 0x10
                    ))
                Local0 |= Local1
                A043 (0x00, 0x60, 0xCD, Local0)
            }
        }

        Method (A085, 2, NotSerialized)
        {
            Local0 = ((Arg0 << 0x03) | 0x01)
            A084 (0x03, Local0, 0x01)
            If ((Arg1 && 0x01))
            {
                While (((A083 (0x03) & 0x02) != 0x02)){}
            }

            If ((Arg1 && 0x02))
            {
                While (((A083 (0x03) & 0x04) != 0x04)){}
            }

            A084 (0x03, 0x00, 0x01)
        }

        Method (A005, 2, NotSerialized)
        {
            A084 (0x0B, Arg0, 0x00)
            A084 (0x05, Arg1, 0x01)
        }

        Method (A004, 1, NotSerialized)
        {
            A084 (0x0B, Arg0, 0x00)
            Local0 = A083 (0x05)
            Return (Local0)
        }

        Method (A086, 1, NotSerialized)
        {
            Local0 = ((Arg0 & 0xFF) | 0x01865000)
            Local1 = ((Arg0 & 0xFFFFFF00) | 0x04)
            Local2 = ((0x03 << 0x1E) | (0x01 << 0x12))
            A005 (0x8600, Local0)
            A005 (0x8604, Local1)
            A005 (0x8608, Local2)
            If (((Arg0 >> 0x10) == 0xFE00))
            {
                A085 (0x0D, 0x03)
            }

            If (((Arg0 >> 0x10) == 0xFE30))
            {
                A085 (0x0B, 0x03)
            }

            Return (A004 (0x8650))
        }

        Method (A087, 2, NotSerialized)
        {
            Local0 = ((Arg0 & 0xFF) | 0x01865000)
            Local1 = ((Arg0 & 0xFFFFFF00) | 0x04)
            Local2 = ((0x03 << 0x1E) | (0x01 << 0x12))
            Local2 |= (0x01 << 0x10)
            A005 (0x8600, Local0)
            A005 (0x8604, Local1)
            A005 (0x8608, Local2)
            A005 (0x8650, Arg1)
            A085 (0x0B, 0x03)
        }

        Method (A055, 1, NotSerialized)
        {
            Local1 = A051 (Arg0, 0xA4)
            Local2 = (Local1 >> 0x0B)
            Local2 &= 0x01
            Local2++
            Return (Local2)
        }

        Name (AD01, 0xF8000000)
        Alias (AD01, A088)
        Name (AD07, Package (0x08)
        {
            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x04, 0x04, 0x04, 0x04, 0x01, 0x30, 0x01, 0x00,  // .....0..
                /* 0008 */  0x02, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x05, 0x05, 0x05, 0x05, 0x02, 0x30, 0x01, 0x00,  // .....0..
                /* 0008 */  0x02, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x06, 0x06, 0x06, 0x06, 0x03, 0x30, 0x01, 0x00,  // .....0..
                /* 0008 */  0x02, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x07, 0x07, 0x07, 0x07, 0x04, 0x30, 0x01, 0x01,  // .....0..
                /* 0008 */  0x02, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x03, 0x00, 0x03, 0x00, 0x30, 0x01, 0x00,  // .....0..
                /* 0008 */  0x02, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }
        })
        Alias (AD07, A089)
        Name (A090, Buffer (0x0100){})
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x01))
            {
                Return (A027 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (A030 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (A041 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (A068 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (A091 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (A071 (Arg1))
            }

            Return (0x00)
        }

        Method (A091, 0, Serialized)
        {
            Return (0x00)
        }

        Method (A008, 2, Serialized)
        {
            Local0 = (A088 + (Arg0 << 0x0C))
            Local0 += Arg1
            OperationRegion (A092, SystemMemory, Local0, 0x04)
            Field (A092, DWordAcc, NoLock, Preserve)
            {
                A093,   32
            }

            Return (A093) /* \_SB_.A008.A093 */
        }

        Method (A009, 3, Serialized)
        {
            Local0 = (A088 + (Arg0 << 0x0C))
            Local0 += Arg1
            OperationRegion (A092, SystemMemory, Local0, 0x04)
            Field (A092, DWordAcc, NoLock, Preserve)
            {
                A093,   32
            }

            A093 = Arg2
        }

        Method (A054, 4, Serialized)
        {
            Local0 = A008 (Arg0, Arg1)
            Local0 = ((Local0 & Arg2) | Arg3)
            A009 (Arg0, Arg1, Local0)
        }

        Mutex (A094, 0x00)
        Method (A051, 2, NotSerialized)
        {
            Acquire (A094, 0xFFFF)
            Local0 = ((Arg0 + 0x02) << 0x03)
            A009 (Local0, 0xE0, Arg1)
            Local0 = A008 (Local0, 0xE4)
            Release (A094)
            Return (Local0)
        }

        Method (A052, 3, NotSerialized)
        {
            Acquire (A094, 0xFFFF)
            Local0 = ((Arg0 + 0x02) << 0x03)
            A009 (Local0, 0xE0, Arg1)
            A009 (Local0, 0xE4, Arg2)
            Release (A094)
        }

        Method (A050, 4, NotSerialized)
        {
            Local0 = A051 (Arg0, Arg1)
            Local0 = ((Local0 & Arg2) | Arg3)
            A052 (Arg0, Arg1, Local0)
        }

        Mutex (A095, 0x00)
        Method (A042, 3, NotSerialized)
        {
            Acquire (A095, 0xFFFF)
            A009 (Arg0, Arg1, Arg2)
            Local0 = A008 (Arg0, (Arg1 + 0x04))
            Release (A095)
            Return (Local0)
        }

        Method (A043, 4, NotSerialized)
        {
            Acquire (A095, 0xFFFF)
            A009 (Arg0, Arg1, Arg2)
            A009 (Arg0, (Arg1 + 0x04), Arg3)
            Release (A095)
        }

        Method (A028, 5, NotSerialized)
        {
            Local0 = A042 (Arg0, Arg1, Arg2)
            Local0 = ((Local0 & Arg3) | Arg4)
            A043 (Arg0, Arg1, Arg2, Local0)
        }

        Method (A075, 1, NotSerialized)
        {
            Return (DerefOf (A089 [Arg0]))
        }

        Method (A061, 2, NotSerialized)
        {
            Local1 = 0x34
            If ((A008 (Arg0, 0x00) == 0xFFFFFFFF))
            {
                Return (0x00)
            }

            Local0 = 0x01
            While ((Local0 == 0x01))
            {
                Local1 = (A008 (Arg0, Local1) & 0xFF)
                If ((Local1 == 0x00))
                {
                    Break
                }

                If (((A008 (Arg0, Local1) & 0xFF) == Arg1))
                {
                    Local0 = 0x00
                }
                Else
                {
                    Local1++
                }
            }

            Return (Local1)
        }

        Method (A060, 2, Serialized)
        {
            OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
            Field (PMIO, ByteAcc, NoLock, Preserve)
            {
                PMRI,   8, 
                PMRD,   8
            }

            IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
            {
                Offset (0xE0), 
                ABAR,   32
            }

            OperationRegion (ACFG, SystemIO, ABAR, 0x08)
            Field (ACFG, DWordAcc, NoLock, Preserve)
            {
                ABIX,   32, 
                ABDA,   32
            }

            Local0 = 0x00
            If ((Arg1 == 0x00))
            {
                ABIX = 0x80000068
                Local0 = ABDA /* \_SB_.A060.ABDA */
                Return (Local0)
            }
            Else
            {
                ABIX = 0x80000068
                Local0 = ABDA /* \_SB_.A060.ABDA */
                Local0 = ((Local0 & 0xFFFFFFFC) | Arg0)
                ABDA = Local0
            }
        }

        Method (A047, 2, Serialized)
        {
            Local1 = A042 (0x00, 0x60, 0xEA)
            Local1 |= 0x02
            A043 (0x00, 0x60, 0xEA, Local1)
            Local1 &= ~(0x03 << 0x03)
            If ((Arg0 == 0x01))
            {
                Local3 = A012 /* \_SB_.A012 */
            }
            Else
            {
                Local3 = A011 /* \_SB_.A011 */
            }

            Local1 |= (Local3 << 0x03)
            Local2 = (~Local1 & 0x04)
            Local1 = ((Local1 & ~0x04) | Local2)
            A043 (0x00, 0x60, 0xEA, Local1)
            If ((Arg1 != 0x00))
            {
                While (((Local1 << 0x02) != Local2))
                {
                    Local1 = (A042 (0x00, 0x60, 0xEB) & 0x01)
                }
            }
        }

        Method (A002, 1, NotSerialized)
        {
            Local1 = A003 ()
            Local0 = A004 (0x8490)
            If (((Local0 & 0xF0) != 0x00))
            {
                If ((Arg0 == 0x02))
                {
                    Local0 &= 0xFFFFFFA0
                    Local0 |= 0xA0
                }
                ElseIf ((Local1 == 0x00))
                {
                    Local0 &= 0xFFFFFF60
                    Local0 |= 0x60
                }
                Else
                {
                    Local0 &= 0xFFFFFF20
                    Local0 |= 0x20
                }

                A005 (0x8490, Local0)
            }
        }

        Method (A006, 1, NotSerialized)
        {
        }

        Name (AD0B, 0x01)
        Method (A007, 1, NotSerialized)
        {
            If ((AD0B == 0x01))
            {
                Local1 = ((0x18 << 0x03) | 0x04)
                Local2 = A008 (Local1, 0x015C)
                If ((Arg0 == 0x00))
                {
                    Local2 |= 0x01
                }
                Else
                {
                    Local2 &= 0xFFFFFFFC
                }

                A009 (Local1, 0x015C, Local2)
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "AMD   ", "POWERNOW", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00001784, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000550, 
                0x00000E04, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000352, 
                0x0000055E, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00001784, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000550, 
                0x00000E04, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000352, 
                0x0000055E, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000841, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00001784, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000550, 
                0x00000E04, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000352, 
                0x0000055E, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00001784, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000550, 
                0x00000E04, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000352, 
                0x0000055E, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000841, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
    }
}



UEFI1
-----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 00000292
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : D6
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-G9   "
[018h 0024 004h]                Oem Revision : 00001050
[01Ch 0028 004h]             Asl Compiler ID : "PTL "
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 010h]             UUID Identifier : 0D9FB197-CEFC-4E91-ACB1-2535D9E5A844
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 658 (0x292)

    0000: 55 45 46 49 92 02 00 00 01 D6 4C 45 4E 4F 56 4F  // UEFI......LENOVO
    0010: 54 50 2D 47 39 20 20 20 50 10 00 00 50 54 4C 20  // TP-G9   P...PTL 
    0020: 02 00 00 00 97 B1 9F 0D FC CE 91 4E AC B1 25 35  // ...........N..%5
    0030: D9 E5 A8 44 36 00 1E 00 00 00 42 00 00 00 43 00  // ...D6.....B...C.
    0040: 00 00 44 00 00 00 45 00 00 00 46 00 00 00 47 00  // ..D...E...F...G.
    0050: 00 00 48 00 00 00 49 00 00 00 4A 00 00 00 4B 00  // ..H...I...J...K.
    0060: 00 00 4D 00 00 00 F2 00 00 00 F1 00 00 00 F3 00  // ..M.............
    0070: 00 00 E9 00 00 00 01 00 00 00 02 00 00 00 AB 00  // ................
    0080: 00 00 03 00 00 00 04 00 00 00 20 00 00 00 05 00  // .......... .....
    0090: 00 00 06 00 00 00 07 00 00 00 08 00 00 00 09 00  // ................
    00A0: 00 00 0A 00 00 00 0B 00 00 00 0C 00 00 00 0D 00  // ................
    00B0: 00 00 83 0C FA 0E D7 03 B9 44 9C 8D 6F 32 E6 3E  // .........D..o2.>
    00C0: C0 98 78 98 E4 93 55 AD FD 46 B6 16 6C 4E 69 9A  // ..x...U..F..lNi.
    00D0: 6B 9E E9 79 FB C0 21 28 21 4C 9A BB 9E 7E B2 CA  // k..y..!(!L...~..
    00E0: 15 F4 39 12 2F CE 28 7D F2 43 B5 15 5E 60 9F 10  // ..9./.(}.C..^`..
    00F0: 06 0C B8 6E 83 9E 86 8A 60 4A 83 A9 D4 41 E9 6A  // ...n....`J...A.j
    0100: 27 05 62 40 78 F8 BD 63 DE 44 AF 27 F8 27 FD 67  // '.b@x..c.D.'.'.g
    0110: 89 06 C5 C0 04 AE 4C 4B 82 44 A3 53 C1 38 2B 4A  // ......LK.D.S.8+J
    0120: 08 48 ED 36 EC CA AE C7 D9 4E B5 E1 E3 4E 15 CB  // .H.6.....N...N..
    0130: 8F 04 4A DF A9 58 EF FB C8 4D A3 9F 8D B6 BE 0F  // ..J..X...M......
    0140: 83 70 1D B2 04 DC 15 5D 50 4D A2 D8 5D 1B 4F 82  // .p.....]PM..].O.
    0150: AC 11 8F 0A 9E CA 15 F8 29 4A A7 16 EB AE 45 CA  // ........)J....E.
    0160: 63 6E E2 36 F7 1B FC F4 39 4C 9E 9B CE A8 35 39  // cn.6....9L....59
    0170: C3 1A 9C 9C C7 C4 09 9F 51 41 99 C4 53 A0 0A 4A  // ........QA..S..J
    0180: 94 96 00 A8 63 EF 86 95 FB 42 84 AB EA 59 0B F1  // ....c....B...Y..
    0190: 41 AA 58 DC AF D8 22 6E F8 42 99 66 36 FF 78 8C  // A.X..."n.B.f6.x.
    01A0: 9C AF CF 73 D7 68 B2 FB DD 47 AC D1 21 8E F9 19  // ...s.h...G..!...
    01B0: A5 2C 5E 1D 9C 62 BD F6 52 4F 8A 5F 93 96 E7 28  // .,^..b..RO._...(
    01C0: 9B EC C1 50 59 3F BA 9C 76 4E B2 AA 83 4F DA 5E  // ...PY?..vN...O.^
    01D0: 07 C9 65 00 9B 59 30 86 71 4B B4 9C 0B 12 AF 56  // ..e..Y0.qK.....V
    01E0: 07 80 54 D2 8E A2 52 C4 13 48 AF 26 18 0D 39 D5  // ..T...R..H.&..9.
    01F0: 6C 00 66 73 5E 52 29 84 65 4B B1 77 3B 79 04 DD  // l.fs^R).eK.w;y..
    0200: BF 85 05 9E E1 EE 9A 07 17 4D 8F 46 CF 81 12 60  // .........M.F...`
    0210: DB 26 7F EE 45 D0 BE 98 EB 4F BD 30 D6 76 37 7D  // .&..E....O.0.v7}
    0220: CE F8 25 51 B0 6D BB 88 8E 41 A4 BC EF C4 17 4D  // ..%Q.m...A.....M
    0230: 69 BC C7 76 9F 9B FA 28 2B 45 97 1F C1 20 ED 9F  // i..v...(+E... ..
    0240: 5E 99 A9 0B 09 B4 66 D2 03 4E BE 37 AD BD BC 85  // ^.....f..N.7....
    0250: 63 FD 9C 7C 96 6E 42 8E 65 48 9D 6C 4F 80 05 2F  // c..|.nB.eH.lO../
    0260: 2C 0E C9 27 0D B0 DC CC 13 44 90 78 14 88 A0 0C  // ,..'.....D.x....
    0270: B6 FE EC 9A 91 B8 9C 93 4B 47 A9 18 29 9F B2 65  // ........KG..)..e
    0280: 93 6C 8A 8C 3C 24 D0 BB A9 4A BE 17 CF 9B 58 31  // .l..<$...J....X1
    0290: 30 EC                                            // 0.


UEFI2
-----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 0000003E
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 06
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-G9   "
[018h 0024 004h]                Oem Revision : 00001050
[01Ch 0028 004h]             Asl Compiler ID : "PTL "
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 010h]             UUID Identifier : D29563E8-CFE1-4D41-8E54-DA4322FEDE5C
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 62 (0x3E)

    0000: 55 45 46 49 3E 00 00 00 01 06 4C 45 4E 4F 56 4F  // UEFI>.....LENOVO
    0010: 54 50 2D 47 39 20 20 20 50 10 00 00 50 54 4C 20  // TP-G9   P...PTL 
    0020: 02 00 00 00 E8 63 95 D2 E1 CF 41 4D 8E 54 DA 43  // .....c....AM.T.C
    0030: 22 FE DE 5C 36 00 00 60 DF DE 00 00 00 00        // "..\6..`......


UEFI3
-----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 00000042
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : F8
[00Ah 0010 006h]                      Oem ID : "PTL   "
[010h 0016 008h]                Oem Table ID : "COMBUF"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "PTL "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 010h]             UUID Identifier : 15E896BE-0CDF-47E2-9B97-A28A398BC765
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 66 (0x42)

    0000: 55 45 46 49 42 00 00 00 01 F8 50 54 4C 20 20 20  // UEFIB.....PTL   
    0010: 43 4F 4D 42 55 46 00 00 01 00 00 00 50 54 4C 20  // COMBUF......PTL 
    0020: 01 00 00 00 BE 96 E8 15 DF 0C E2 47 9B 97 A2 8A  // ...........G....
    0030: 39 8B C7 65 36 00 02 00 00 00 A8 16 FA DB 00 00  // 9..e6...........
    0040: 00 00                                            // ..


