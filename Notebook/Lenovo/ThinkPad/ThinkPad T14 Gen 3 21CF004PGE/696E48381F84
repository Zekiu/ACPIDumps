
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20221020
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000586  0x01  "LENOVO"  "ACDC    "  0x00000001  "INTL"   0x20180313
 02)  MCFG  0x0000003C  0x01  "LENOVO"  "TP-R23  "  0x00001290  "PTEC"   0x00000002
 03)  APIC  0x0000014C  0x02  "LENOVO"  "TP-R23  "  0x00001290  "PTEC"   0x00000002
 04)  CRAT  0x00000EC0  0x01  "LENOVO"  "TP-R23  "  0x00001290  "PTEC"   0x00000002
 05)  SSDT  0x00000A93  0x01  "LENOVO"  "UsbCTabl"  0x00000001  "INTL"   0x20180313
 06)  SSDT  0x00000762  0x01  "LENOVO"  "TP-R23  "  0x00000001  "INTL"   0x20180313
 07)  VFCT  0x0000AE84  0x01  "LENOVO"  "TP-R23  "  0x00001290  "PTEC"   0x00000002
 08)  BATB  0x0000004A  0x02  "LENOVO"  "TP-R23  "  0x00001290  "PTEC"   0x00000002
 09)  SSDT  0x000051C4  0x01  "LENOVO"  "TP-R23  "  0x00000001  "INTL"   0x20180313
 10)  SSDT  0x000085B1  0x01  "LENOVO"  "TP-R23  "  0x00000001  "INTL"   0x20180313
 11)  SSDT  0x000007AF  0x01  "LENOVO"  "TP-R23  "  0x00000001  "INTL"   0x20180313
 12)  CDIT  0x00000029  0x01  "LENOVO"  "TP-R23  "  0x00001290  "PTEC"   0x00000002
 13)  UEFI  0x0000009E  0x01  "LENOVO"  "TP-R23  "  0x00001290  "PTEC"   0x00000002
 14)  IVRS  0x000001E4  0x02  "LENOVO"  "TP-R23  "  0x00001290  "PTEC"   0x00000002
 15)  DSDT  0x00014C76  0x01  "LENOVO"  "TP-R23  "  0x00001290  "INTL"   0x20180313
 16)  SSDT  0x00000BC3  0x01  "LENOVO"  "TP-R23  "  0x00000001  "INTL"   0x20180313
 17)  SBST  0x00000030  0x01  "LENOVO"  "TP-R23  "  0x00001290  "PTEC"   0x00000002
 18)  WSMT  0x00000028  0x01  "LENOVO"  "TP-R23  "  0x00001290  "PTEC"   0x00000002
 19)  SSDT  0x00000024  0x01  "LENOVO"  "TP-R23  "  0x00000001  "INTL"   0x20180313
 20)  SSDT  0x000001D8  0x01  "LENOVO"  "STD3    "  0x00000001  "INTL"   0x20180313
 21)  SSDT  0x00001203  0x01  "LENOVO"  "TP-R23  "  0x00000001  "INTL"   0x20180313
 22)  SSDT  0x000007CF  0x01  "LENOVO"  "TP-R23  "  0x00000001  "INTL"   0x20180313
 23)  SSDT  0x00007F5B  0x02  "LENOVO"  "TP-R23  "  0x00000002  "MSFT"   0x02000002
 24)  SSDT  0x00000090  0x01  "LENOVO"  "TP-R23  "  0x00000001  "INTL"   0x20180313
 25)  FACP  0x00000114  0x06  "LENOVO"  "TP-R23  "  0x00001290  "PTEC"   0x00000002
 26)  FPDT  0x00000034  0x01  "LENOVO"  "TP-R23  "  0x00001290  "PTEC"   0x00000002
 27)  SSDT  0x000000A2  0x01  "LENOVO"  "PID0Ssdt"  0x00000001  "INTL"   0x20180313
 28)  SSDT  0x00000DB2  0x01  "LENOVO"  "TP-R23  "  0x00000001  "INTL"   0x20180313
 29)  MSDM  0x00000055  0x03  "LENOVO"  "TP-R23  "  0x00001290  "PTEC"   0x00000002
 30)  SSDT  0x00009B23  0x01  "LENOVO"  "TP-R23  "  0x00000001  "INTL"   0x20180313
 31)  SSDT  0x000015F7  0x01  "LENOVO"  "TP-R23  "  0x00000001  "INTL"   0x20180313
 32)  SSDT  0x000018A8  0x01  "LENOVO"  "TP-R23  "  0x00000001  "INTL"   0x20180313
 33)  HPET  0x00000038  0x01  "LENOVO"  "TP-R23  "  0x00001290  "PTEC"   0x00000002
 34)  SSDT  0x00005354  0x02  "LENOVO"  "TP-R23  "  0x00000001  "AMD "   0x00000001
 35)  FACS  0x00000040  0x01
 36)  BGRT  0x00000038  0x01  "LENOVO"  "TP-R23  "  0x00001290  "PTEC"   0x00000002
 37)  SSDT  0x00000410  0x01  "LENOVO"  "TP-R23  "  0x00000001  "INTL"   0x20180313

Found 37 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 0000014C
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : D8
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-R23  "
[018h 0024 004h]                Oem Revision : 00001290
[01Ch 0028 004h]             Asl Compiler ID : "PTEC"
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 00
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 01
[037h 0055 001h]               Local Apic ID : 01
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 02
[03Fh 0063 001h]               Local Apic ID : 02
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 03
[047h 0071 001h]               Local Apic ID : 03
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 00 [Processor Local APIC]
[04Dh 0077 001h]                      Length : 08
[04Eh 0078 001h]                Processor ID : 04
[04Fh 0079 001h]               Local Apic ID : 04
[050h 0080 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084 001h]               Subtable Type : 00 [Processor Local APIC]
[055h 0085 001h]                      Length : 08
[056h 0086 001h]                Processor ID : 05
[057h 0087 001h]               Local Apic ID : 05
[058h 0088 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092 001h]               Subtable Type : 00 [Processor Local APIC]
[05Dh 0093 001h]                      Length : 08
[05Eh 0094 001h]                Processor ID : 06
[05Fh 0095 001h]               Local Apic ID : 06
[060h 0096 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100 001h]               Subtable Type : 00 [Processor Local APIC]
[065h 0101 001h]                      Length : 08
[066h 0102 001h]                Processor ID : 07
[067h 0103 001h]               Local Apic ID : 07
[068h 0104 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108 001h]               Subtable Type : 00 [Processor Local APIC]
[06Dh 0109 001h]                      Length : 08
[06Eh 0110 001h]                Processor ID : 08
[06Fh 0111 001h]               Local Apic ID : 08
[070h 0112 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116 001h]               Subtable Type : 00 [Processor Local APIC]
[075h 0117 001h]                      Length : 08
[076h 0118 001h]                Processor ID : 09
[077h 0119 001h]               Local Apic ID : 09
[078h 0120 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124 001h]               Subtable Type : 00 [Processor Local APIC]
[07Dh 0125 001h]                      Length : 08
[07Eh 0126 001h]                Processor ID : 0A
[07Fh 0127 001h]               Local Apic ID : 0A
[080h 0128 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132 001h]               Subtable Type : 00 [Processor Local APIC]
[085h 0133 001h]                      Length : 08
[086h 0134 001h]                Processor ID : 0B
[087h 0135 001h]               Local Apic ID : 0B
[088h 0136 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140 001h]               Subtable Type : 00 [Processor Local APIC]
[08Dh 0141 001h]                      Length : 08
[08Eh 0142 001h]                Processor ID : 0C
[08Fh 0143 001h]               Local Apic ID : 0C
[090h 0144 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148 001h]               Subtable Type : 00 [Processor Local APIC]
[095h 0149 001h]                      Length : 08
[096h 0150 001h]                Processor ID : 0D
[097h 0151 001h]               Local Apic ID : 0D
[098h 0152 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156 001h]               Subtable Type : 00 [Processor Local APIC]
[09Dh 0157 001h]                      Length : 08
[09Eh 0158 001h]                Processor ID : 0E
[09Fh 0159 001h]               Local Apic ID : 0E
[0A0h 0160 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164 001h]               Subtable Type : 00 [Processor Local APIC]
[0A5h 0165 001h]                      Length : 08
[0A6h 0166 001h]                Processor ID : 0F
[0A7h 0167 001h]               Local Apic ID : 0F
[0A8h 0168 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172 001h]               Subtable Type : 01 [I/O APIC]
[0ADh 0173 001h]                      Length : 0C
[0AEh 0174 001h]                 I/O Apic ID : 20
[0AFh 0175 001h]                    Reserved : 00
[0B0h 0176 004h]                     Address : FEC00000
[0B4h 0180 004h]                   Interrupt : 00000000

[0B8h 0184 001h]               Subtable Type : 01 [I/O APIC]
[0B9h 0185 001h]                      Length : 0C
[0BAh 0186 001h]                 I/O Apic ID : 21
[0BBh 0187 001h]                    Reserved : 00
[0BCh 0188 004h]                     Address : FEC01000
[0C0h 0192 004h]                   Interrupt : 00000018

[0C4h 0196 001h]               Subtable Type : 02 [Interrupt Source Override]
[0C5h 0197 001h]                      Length : 0A
[0C6h 0198 001h]                         Bus : 00
[0C7h 0199 001h]                      Source : 01
[0C8h 0200 004h]                   Interrupt : 00000001
[0CCh 0204 002h]       Flags (decoded below) : 0007
                                    Polarity : 3
                                Trigger Mode : 1

[0CEh 0206 001h]               Subtable Type : 02 [Interrupt Source Override]
[0CFh 0207 001h]                      Length : 0A
[0D0h 0208 001h]                         Bus : 00
[0D1h 0209 001h]                      Source : 0C
[0D2h 0210 004h]                   Interrupt : 0000000C
[0D6h 0214 002h]       Flags (decoded below) : 0007
                                    Polarity : 3
                                Trigger Mode : 1

[0D8h 0216 001h]               Subtable Type : 02 [Interrupt Source Override]
[0D9h 0217 001h]                      Length : 0A
[0DAh 0218 001h]                         Bus : 00
[0DBh 0219 001h]                      Source : 00
[0DCh 0220 004h]                   Interrupt : 00000002
[0E0h 0224 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0E2h 0226 001h]               Subtable Type : 02 [Interrupt Source Override]
[0E3h 0227 001h]                      Length : 0A
[0E4h 0228 001h]                         Bus : 00
[0E5h 0229 001h]                      Source : 09
[0E6h 0230 004h]                   Interrupt : 00000009
[0EAh 0234 002h]       Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[0ECh 0236 001h]               Subtable Type : 04 [Local APIC NMI]
[0EDh 0237 001h]                      Length : 06
[0EEh 0238 001h]                Processor ID : 00
[0EFh 0239 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0F1h 0241 001h]        Interrupt Input LINT : 01

[0F2h 0242 001h]               Subtable Type : 04 [Local APIC NMI]
[0F3h 0243 001h]                      Length : 06
[0F4h 0244 001h]                Processor ID : 01
[0F5h 0245 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0F7h 0247 001h]        Interrupt Input LINT : 01

[0F8h 0248 001h]               Subtable Type : 04 [Local APIC NMI]
[0F9h 0249 001h]                      Length : 06
[0FAh 0250 001h]                Processor ID : 02
[0FBh 0251 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0FDh 0253 001h]        Interrupt Input LINT : 01

[0FEh 0254 001h]               Subtable Type : 04 [Local APIC NMI]
[0FFh 0255 001h]                      Length : 06
[100h 0256 001h]                Processor ID : 03
[101h 0257 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[103h 0259 001h]        Interrupt Input LINT : 01

[104h 0260 001h]               Subtable Type : 04 [Local APIC NMI]
[105h 0261 001h]                      Length : 06
[106h 0262 001h]                Processor ID : 04
[107h 0263 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[109h 0265 001h]        Interrupt Input LINT : 01

[10Ah 0266 001h]               Subtable Type : 04 [Local APIC NMI]
[10Bh 0267 001h]                      Length : 06
[10Ch 0268 001h]                Processor ID : 05
[10Dh 0269 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[10Fh 0271 001h]        Interrupt Input LINT : 01

[110h 0272 001h]               Subtable Type : 04 [Local APIC NMI]
[111h 0273 001h]                      Length : 06
[112h 0274 001h]                Processor ID : 06
[113h 0275 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[115h 0277 001h]        Interrupt Input LINT : 01

[116h 0278 001h]               Subtable Type : 04 [Local APIC NMI]
[117h 0279 001h]                      Length : 06
[118h 0280 001h]                Processor ID : 07
[119h 0281 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[11Bh 0283 001h]        Interrupt Input LINT : 01

[11Ch 0284 001h]               Subtable Type : 04 [Local APIC NMI]
[11Dh 0285 001h]                      Length : 06
[11Eh 0286 001h]                Processor ID : 08
[11Fh 0287 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[121h 0289 001h]        Interrupt Input LINT : 01

[122h 0290 001h]               Subtable Type : 04 [Local APIC NMI]
[123h 0291 001h]                      Length : 06
[124h 0292 001h]                Processor ID : 09
[125h 0293 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[127h 0295 001h]        Interrupt Input LINT : 01

[128h 0296 001h]               Subtable Type : 04 [Local APIC NMI]
[129h 0297 001h]                      Length : 06
[12Ah 0298 001h]                Processor ID : 0A
[12Bh 0299 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[12Dh 0301 001h]        Interrupt Input LINT : 01

[12Eh 0302 001h]               Subtable Type : 04 [Local APIC NMI]
[12Fh 0303 001h]                      Length : 06
[130h 0304 001h]                Processor ID : 0B
[131h 0305 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[133h 0307 001h]        Interrupt Input LINT : 01

[134h 0308 001h]               Subtable Type : 04 [Local APIC NMI]
[135h 0309 001h]                      Length : 06
[136h 0310 001h]                Processor ID : 0C
[137h 0311 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[139h 0313 001h]        Interrupt Input LINT : 01

[13Ah 0314 001h]               Subtable Type : 04 [Local APIC NMI]
[13Bh 0315 001h]                      Length : 06
[13Ch 0316 001h]                Processor ID : 0D
[13Dh 0317 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[13Fh 0319 001h]        Interrupt Input LINT : 01

[140h 0320 001h]               Subtable Type : 04 [Local APIC NMI]
[141h 0321 001h]                      Length : 06
[142h 0322 001h]                Processor ID : 0E
[143h 0323 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[145h 0325 001h]        Interrupt Input LINT : 01

[146h 0326 001h]               Subtable Type : 04 [Local APIC NMI]
[147h 0327 001h]                      Length : 06
[148h 0328 001h]                Processor ID : 0F
[149h 0329 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[14Bh 0331 001h]        Interrupt Input LINT : 01

Raw Table Data: Length 332 (0x14C)

    0000: 41 50 49 43 4C 01 00 00 02 D8 4C 45 4E 4F 56 4F  // APICL.....LENOVO
    0010: 54 50 2D 52 32 33 20 20 90 12 00 00 50 54 45 43  // TP-R23  ....PTEC
    0020: 02 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 02  // ................
    0040: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 04 04  // ................
    0050: 01 00 00 00 00 08 05 05 01 00 00 00 00 08 06 06  // ................
    0060: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 08 08  // ................
    0070: 01 00 00 00 00 08 09 09 01 00 00 00 00 08 0A 0A  // ................
    0080: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0C 0C  // ................
    0090: 01 00 00 00 00 08 0D 0D 01 00 00 00 00 08 0E 0E  // ................
    00A0: 01 00 00 00 00 08 0F 0F 01 00 00 00 01 0C 20 00  // .............. .
    00B0: 00 00 C0 FE 00 00 00 00 01 0C 21 00 00 10 C0 FE  // ..........!.....
    00C0: 18 00 00 00 02 0A 00 01 01 00 00 00 07 00 02 0A  // ................
    00D0: 00 0C 0C 00 00 00 07 00 02 0A 00 00 02 00 00 00  // ................
    00E0: 00 00 02 0A 00 09 09 00 00 00 0F 00 04 06 00 05  // ................
    00F0: 00 01 04 06 01 05 00 01 04 06 02 05 00 01 04 06  // ................
    0100: 03 05 00 01 04 06 04 05 00 01 04 06 05 05 00 01  // ................
    0110: 04 06 06 05 00 01 04 06 07 05 00 01 04 06 08 05  // ................
    0120: 00 01 04 06 09 05 00 01 04 06 0A 05 00 01 04 06  // ................
    0130: 0B 05 00 01 04 06 0C 05 00 01 04 06 0D 05 00 01  // ................
    0140: 04 06 0E 05 00 01 04 06 0F 05 00 01              // ............


BATB
----
[000h 0000 004h]                   Signature : "BATB"    
[004h 0004 004h]                Table Length : 0000004A
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : A8
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-R23  "
[018h 0024 004h]                Oem Revision : 00001290
[01Ch 0028 004h]             Asl Compiler ID : "PTEC"
[020h 0032 004h]       Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [BATB]


Raw Table Data: Length 74 (0x4A)

    0000: 42 41 54 42 4A 00 00 00 02 A8 4C 45 4E 4F 56 4F  // BATBJ.....LENOVO
    0010: 54 50 2D 52 32 33 20 20 90 12 00 00 50 54 45 43  // TP-R23  ....PTEC
    0020: 02 00 00 00 E8 63 95 D2 E1 CF 41 4D 8E 54 DA 43  // .....c....AM.T.C
    0030: 22 FE DE 5C 36 00 00 30 77 76 00 00 00 00 00 00  // "..\6..0wv......
    0040: 75 76 00 00 00 00 00 00 01 00                    // uv........


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 97
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-R23  "
[018h 0024 004h]                Oem Revision : 00001290
[01Ch 0028 004h]             Asl Compiler ID : "PTEC"
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 000000006B976018
[030h 0048 004h]               Image OffsetX : 00000480
[034h 0052 004h]               Image OffsetY : 00000294

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 97 4C 45 4E 4F 56 4F  // BGRT8.....LENOVO
    0010: 54 50 2D 52 32 33 20 20 90 12 00 00 50 54 45 43  // TP-R23  ....PTEC
    0020: 02 00 00 00 01 00 01 00 18 60 97 6B 00 00 00 00  // .........`.k....
    0030: 80 04 00 00 94 02 00 00                          // ........


CDIT
----
[000h 0000 004h]                   Signature : "CDIT"    
[004h 0004 004h]                Table Length : 00000029
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 3C
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-R23  "
[018h 0024 004h]                Oem Revision : 00001290
[01Ch 0028 004h]             Asl Compiler ID : "PTEC"
[020h 0032 004h]       Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 3C 4C 45 4E 4F 56 4F  // CDIT)....<LENOVO
    0010: 54 50 2D 52 32 33 20 20 90 12 00 00 50 54 45 43  // TP-R23  ....PTEC
    0020: 02 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000 004h]                   Signature : "CRAT"    
[004h 0004 004h]                Table Length : 00000EC0
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 86
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-R23  "
[018h 0024 004h]                Oem Revision : 00001290
[01Ch 0028 004h]             Asl Compiler ID : "PTEC"
[020h 0032 004h]       Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 3776 (0xEC0)

    0000: 43 52 41 54 C0 0E 00 00 01 86 4C 45 4E 4F 56 4F  // CRAT......LENOVO
    0010: 54 50 2D 52 32 33 20 20 90 12 00 00 50 54 45 43  // TP-R23  ....PTEC
    0020: 02 00 00 00 3B 00 00 00 00 00 00 00 00 00 00 00  // ....;...........
    0030: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 00 00 00 00 00 00 00 80 00 00 00 00 40 00 00 00  // ............@...
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 80  // ................
    0070: 07 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 02 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    00B0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    00C0: 02 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    00D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    00F0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0100: 02 40 00 00 0F 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0130: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0140: 02 40 00 00 0F 00 00 00 00 00 00 00 FF 00 00 00  // .@..............
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00  // .............@..
    0170: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0180: 02 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    01B0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    01C0: 02 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    01D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01E0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    01F0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0200: 02 40 00 00 0F 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0230: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0240: 02 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0270: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0280: 02 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    02B0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    02C0: 02 40 00 00 0F 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    02F0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0300: 02 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0330: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0340: 02 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0360: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0370: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0380: 02 40 00 00 0F 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    03B0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    03C0: 02 40 00 00 0B 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    03D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03E0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    03F0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0400: 02 40 00 00 0D 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0430: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0440: 02 40 00 00 0F 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0470: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0480: 02 40 00 00 0B 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04A0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    04B0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    04C0: 02 40 00 00 0D 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    04D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04E0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    04F0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0500: 02 40 00 00 0F 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0520: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0530: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0540: 02 40 00 00 0B 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0560: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0570: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0580: 02 40 00 00 0D 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05A0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    05B0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    05C0: 02 40 00 00 0F 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    05D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    05F0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0600: 02 40 00 00 0B 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0620: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0630: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0640: 02 40 00 00 0D 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0660: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0670: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0680: 02 40 00 00 0F 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    06B0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    06C0: 03 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    06D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06E0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    06F0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0700: 03 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0720: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0730: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0740: 03 40 00 00 AB 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0760: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0770: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0780: 03 40 00 00 AD 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07A0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    07B0: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    07C0: 03 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    07D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    07F0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0800: 03 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0820: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0830: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0840: 03 40 00 00 AB 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0860: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0870: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0880: 03 40 00 00 AD 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08A0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    08B0: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    08C0: 03 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    08D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08E0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    08F0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0900: 03 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0920: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0930: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0940: 03 40 00 00 AB 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0960: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0970: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0980: 03 40 00 00 AD 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    09B0: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    09C0: 03 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    09D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09E0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    09F0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0A00: 03 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A20: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0A30: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0A40: 03 40 00 00 AB 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A60: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0A70: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0A80: 03 40 00 00 AD 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AA0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0AB0: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0AC0: 03 40 00 00 0B 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AE0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0AF0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0B00: 03 40 00 00 0D 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B20: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0B30: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0B40: 03 40 00 00 AB 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B60: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0B70: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0B80: 03 40 00 00 AD 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0B90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BA0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0BB0: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0BC0: 03 40 00 00 0B 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BE0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0BF0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0C00: 03 40 00 00 0D 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0C10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C20: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0C30: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0C40: 03 40 00 00 AB 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0C50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C60: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0C70: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0C80: 03 40 00 00 AD 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CA0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0CB0: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0CC0: 03 40 00 00 0B 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0CD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CE0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0CF0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0D00: 03 40 00 00 0D 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D20: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0D30: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0D40: 03 40 00 00 AB 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0D50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D60: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0D70: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0D80: 03 40 00 00 AD 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0D90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DA0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0DB0: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0DC0: 03 40 00 00 0B 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0DD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DE0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0DF0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0E00: 03 40 00 00 0D 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0E10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E20: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0E30: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0E40: 03 40 00 00 AB 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0E50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E60: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0E70: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0E80: 03 40 00 00 AD 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EA0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0EB0: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................


DSDT
----
DefinitionBlock ("", "DSDT", 1, "LENOVO", "TP-R23  ", 0x00001290)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.FAN0.CRNF, MethodObj)    // 0 Arguments
    External (_SB_.FAN0.SRPM, MethodObj)    // 1 Arguments
    External (_SB_.I2CB, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPC0.EC0_.FDLS, IntObj)
    External (_SB_.PCI0.LPC0.EC0_.HAM6, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.HKEY.TSSS, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPC0.EC0_.HPLD, UnknownObj)
    External (_SB_.PCI0.M017, MethodObj)    // 6 Arguments
    External (_SB_.PCI0.M402, MethodObj)    // 3 Arguments
    External (_SB_.PCI0.M403, MethodObj)    // 4 Arguments
    External (_SB_.PCI0.M429, MethodObj)    // 7 Arguments
    External (_SB_.PCI0.M472, MethodObj)    // 4 Arguments
    External (_SB_.TPM_.PTS_, MethodObj)    // 1 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M250, MethodObj)    // 5 Arguments
    External (M460, MethodObj)    // 7 Arguments
    External (TPOS, UnknownObj)

    Name (MACA, "_AUXMAX_#XXXXXXXXXXXX#")
    Name (WOLD, "_S5WOL_#01EF1700000000#")
    Name (SPS, 0x00)
    Name (OSIF, 0x00)
    Name (WNTF, 0x00)
    Name (WXPF, 0x00)
    Name (WVIS, 0x00)
    Name (WIN7, 0x00)
    Name (WIN8, 0x00)
    Name (WSPV, 0x00)
    Name (LNUX, 0x00)
    Name (H8DR, 0x00)
    Name (MEMX, 0x00)
    Name (ACST, 0x00)
    Name (FMBL, 0x01)
    Name (FDTP, 0x02)
    Name (FUPS, 0x03)
    Name (FNID, 0x00)
    Name (RRBF, 0x00)
    Name (NBCF, 0x00)
    OperationRegion (CNVS, SystemMemory, 0x7775E018, 0x2000)
    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        SCSB,   65536
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        SNMA,   32
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        SSMB,   24768, 
        SSPL,   16, 
        SSPB,   2048
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        SGMB,   128, 
        SGPL,   16, 
        SGPB,   2048
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        SGSB,   24608
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        SEDL,   768, 
        SENS,   32
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        SWMB,   60992, 
        SWAL,   16, 
        SWAB,   2048
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        GWMB,   60864
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        SPMB,   1104
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        GPMB,   5520
    }

    OperationRegion (MNVS, SystemMemory, 0x77758018, 0x2000)
    Field (MNVS, DWordAcc, NoLock, Preserve)
    {
        Offset (0xD00), 
        GAPA,   32, 
        GAPL,   32, 
        DCKI,   32, 
        DCKS,   32, 
        VCDL,   1, 
        VCDC,   1, 
        VCDT,   1, 
        VCDD,   1, 
            ,   1, 
        VCSS,   1, 
        VCDB,   1, 
        VCIN,   1, 
        VVPO,   8, 
        BNTN,   8, 
        BRLV,   8, 
        CDFL,   8, 
        CDAH,   8, 
        PMOD,   2, 
        PDIR,   1, 
        PDMA,   1, 
        Offset (0xD17), 
        LFDC,   1, 
        Offset (0xD18), 
        C2NA,   1, 
        C3NA,   1, 
        C4NA,   1, 
        C6NA,   1, 
        C7NA,   1, 
        Offset (0xD19), 
        Offset (0xD1A), 
            ,   2, 
            ,   1, 
        NHPS,   1, 
        NPMS,   1, 
        Offset (0xD1B), 
        UOPT,   8, 
        BTID,   32, 
        DPP0,   1, 
        DPP1,   1, 
        DPP2,   1, 
        DPP3,   1, 
        DPP4,   1, 
        DPP5,   1, 
        Offset (0xD21), 
        Offset (0xD22), 
        TCRT,   16, 
        TPSV,   16, 
        TTC1,   16, 
        TTC2,   16, 
        TTSP,   16, 
        SRAH,   8, 
        SRHE,   8, 
        SRE1,   8, 
        SRE2,   8, 
        SRE3,   8, 
        SRE4,   8, 
        SRE5,   8, 
        SRE6,   8, 
        SRU1,   8, 
        SRU2,   8, 
        SRU3,   8, 
        SRU7,   8, 
        SRU4,   8, 
        SRU5,   8, 
        SRU8,   8, 
        SRPB,   8, 
        SRLP,   8, 
        SRSA,   8, 
        SRSM,   8, 
        CWAC,   1, 
        CWAS,   1, 
        CWUE,   1, 
        CWUS,   1, 
        Offset (0xD40), 
        CWAP,   16, 
        CWAT,   16, 
        DBGC,   1, 
        Offset (0xD45), 
        FS1L,   16, 
        FS1M,   16, 
        FS1H,   16, 
        FS2L,   16, 
        FS2M,   16, 
        FS2H,   16, 
        FS3L,   16, 
        FS3M,   16, 
        FS3H,   16, 
        TATC,   1, 
            ,   6, 
        TATL,   1, 
        TATW,   8, 
        TNFT,   4, 
        TNTT,   4, 
        TDFA,   4, 
        TDTA,   4, 
        TDFD,   4, 
        TDTD,   4, 
        TCFA,   4, 
        TCTA,   4, 
        TCFD,   4, 
        TCTD,   4, 
        TSFT,   4, 
        TSTT,   4, 
        TIT0,   8, 
        TCR0,   16, 
        TPS0,   16, 
        TIT1,   8, 
        TCR1,   16, 
        TPS1,   16, 
        TIT2,   8, 
        TCR2,   16, 
        TPS2,   16, 
        TIF0,   8, 
        TIF1,   8, 
        TIF2,   8, 
        Offset (0xD78), 
        BTHI,   1, 
        Offset (0xD79), 
        HDIR,   1, 
        HDEH,   1, 
        HDSP,   1, 
        HDPP,   1, 
        HDUB,   1, 
        HDMC,   1, 
        NFCF,   1, 
        NOMC,   1, 
        TPME,   8, 
        BIDE,   4, 
        IDET,   4, 
            ,   1, 
            ,   1, 
        Offset (0xD7D), 
        DTS0,   8, 
        Offset (0xD7F), 
        DT00,   1, 
        DT01,   1, 
        DT02,   1, 
        DT03,   1, 
        Offset (0xD80), 
        LIDB,   1, 
        C4WR,   1, 
        C4AC,   1, 
        ODDX,   1, 
        CMPR,   1, 
        ILNF,   1, 
        PLUX,   1, 
        Offset (0xD81), 
        Offset (0xD8A), 
        WLAC,   8, 
        WIWK,   1, 
        Offset (0xD8C), 
            ,   4, 
            ,   1, 
        IDMM,   1, 
        Offset (0xD8D), 
            ,   3, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0xD8E), 
        Offset (0xD8F), 
            ,   4, 
        Offset (0xD90), 
        Offset (0xD91), 
        SWGP,   8, 
        IPMS,   8, 
        IPMB,   120, 
        IPMR,   24, 
        IPMO,   24, 
        IPMA,   8, 
        VIGD,   1, 
        VDSC,   1, 
        VMSH,   1, 
            ,   1, 
        VDSP,   1, 
        Offset (0xDAA), 
        Offset (0xDAD), 
        ASFT,   8, 
        PL1L,   8, 
        PL1M,   8, 
        CHKC,   32, 
        CHKE,   32, 
        ATRB,   32, 
        Offset (0xDBD), 
        PPCR,   8, 
        TPCR,   5, 
        Offset (0xDBF), 
        Offset (0xDCE), 
        CTPR,   8, 
        PPCA,   8, 
        TPCA,   5, 
        Offset (0xDD1), 
        BFWB,   296, 
        OSPX,   1, 
        OSC4,   1, 
        CPPX,   1, 
        Offset (0xDF7), 
        SPEN,   1, 
        SCRM,   1, 
            ,   1, 
        ETAU,   1, 
        IHBC,   1, 
        ARPM,   1, 
        APMF,   1, 
        Offset (0xDF8), 
        FTPS,   8, 
        HIST,   8, 
        LPST,   8, 
        LWST,   8, 
        Offset (0xDFF), 
        Offset (0xE00), 
        Offset (0xE20), 
        HPET,   32, 
        PKLI,   16, 
        VLCX,   16, 
        VNIT,   8, 
        VBD0,   8, 
        VBDT,   128, 
        VBPL,   16, 
        VBPH,   16, 
        VBML,   8, 
        VBMH,   8, 
        VEDI,   1024, 
        PDCI,   16, 
        ISCG,   32, 
        ISSP,   1, 
        ISWK,   2, 
        ISFS,   3, 
        Offset (0xEC7), 
        SHA1,   160, 
        Offset (0xEDC), 
        LWCP,   1, 
        LWEN,   1, 
        IOCP,   1, 
        IOEN,   1, 
        IOST,   1, 
        Offset (0xEDD), 
        USBR,   1, 
        Offset (0xEDE), 
        Offset (0xEDF), 
        Offset (0xEE1), 
        BT2T,   1, 
        Offset (0xEE2), 
        TPPP,   8, 
        TPPC,   8, 
        CTPC,   8, 
        FNWK,   8, 
        Offset (0xEE7), 
        XHCC,   8, 
        FCAP,   16, 
        VSTD,   1, 
        VCQL,   1, 
        VTIO,   1, 
        VMYH,   1, 
        VSTP,   1, 
        VLCM,   1, 
        VDGM,   1, 
        VADM,   1, 
        VDMC,   1, 
        VTMS,   1, 
        VDLS,   1, 
        VMMC,   1, 
        VMSC,   1, 
        VPSC,   1, 
        VCSC,   1, 
        VAMT,   1, 
        CICF,   4, 
        CICM,   4, 
        MYHC,   8, 
        MMCC,   8, 
        PT1D,   15, 
        Offset (0xEF1), 
        PT2D,   15, 
        Offset (0xEF3), 
        PT0D,   15, 
        Offset (0xEF5), 
        DVS0,   1, 
        DVS1,   1, 
        DVS2,   1, 
        DVS3,   1, 
        Offset (0xEF7), 
        Offset (0xF13), 
        Offset (0xF14), 
            ,   4, 
        SADM,   4, 
        SMYH,   4, 
        SMMC,   4, 
        SPSC,   4, 
        SAMT,   4, 
        STDV,   8, 
        SCRB,   8, 
        PMOF,   8, 
        MPID,   8, 
        VEDX,   1024, 
        SHDW,   8, 
        TPID,   16, 
        TPAD,   8, 
        TDVI,   16, 
        TDPI,   16, 
        TLVI,   16, 
        TLPI,   16, 
        EPAO,   8, 
        TLAS,   8, 
        FADM,   8, 
        DYPR,   32
    }

    Field (MNVS, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB00), 
        WITM,   8, 
        WSEL,   8, 
        WLS0,   8, 
        WLS1,   8, 
        WLS2,   8, 
        WLS3,   8, 
        WLS4,   8, 
        WLS5,   8, 
        WLS6,   8, 
        WLS7,   8, 
        WLS8,   8, 
        WLS9,   8, 
        WLSA,   8, 
        WLSB,   8, 
        WLSC,   8, 
        WLSD,   8, 
        WENC,   8, 
        WKBD,   8, 
        WPTY,   8, 
        WPAS,   1032, 
        WPNW,   1032, 
        WSPM,   8, 
        WSPS,   8, 
        WSMN,   8, 
        WSMX,   8, 
        WSEN,   8, 
        WSKB,   8, 
        WASB,   8, 
        WASI,   16, 
        WASD,   8, 
        WASS,   32, 
        WDRV,   8, 
        WMTH,   8, 
        RTC0,   8, 
        RTC1,   8, 
        RTC2,   8, 
        WSHS,   8, 
        WEXF,   8, 
        SDBM,   8
    }

    Field (MNVS, ByteAcc, NoLock, Preserve)
    {
        Offset (0x1000), 
        CBFF,   32768
    }

    Field (MNVS, ByteAcc, NoLock, Preserve)
    {
        Offset (0xA00), 
        DBGB,   1024
    }

    OperationRegion (SMI0, SystemIO, 0xB0, 0x02)
    Field (SMI0, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    Field (MNVS, AnyAcc, NoLock, Preserve)
    {
        Offset (0xFC0), 
        CMD,    8, 
        ERR,    32, 
        PAR0,   32, 
        PAR1,   32, 
        PAR2,   32, 
        PAR3,   32
    }

    Mutex (MSMI, 0x00)
    Method (SMI, 5, Serialized)
    {
        Acquire (MSMI, 0xFFFF)
        CMD = Arg0
        ERR = 0x01
        PAR0 = Arg1
        PAR1 = Arg2
        PAR2 = Arg3
        PAR3 = Arg4
        APMC = 0xF5
        While ((ERR == 0x01))
        {
            Sleep (0x01)
            APMC = 0xF5
        }

        Local0 = PAR0 /* \PAR0 */
        Release (MSMI)
        Return (Local0)
    }

    Method (RPCI, 1, NotSerialized)
    {
        Return (SMI (0x00, 0x00, Arg0, 0x00, 0x00))
    }

    Method (WPCI, 2, NotSerialized)
    {
        SMI (0x00, 0x01, Arg0, Arg1, 0x00)
    }

    Method (MPCI, 3, NotSerialized)
    {
        SMI (0x00, 0x02, Arg0, Arg1, Arg2)
    }

    Method (RBEC, 1, NotSerialized)
    {
        Return (SMI (0x00, 0x03, Arg0, 0x00, 0x00))
    }

    Method (WBEC, 2, NotSerialized)
    {
        SMI (0x00, 0x04, Arg0, Arg1, 0x00)
    }

    Method (MBEC, 3, NotSerialized)
    {
        SMI (0x00, 0x05, Arg0, Arg1, Arg2)
    }

    Method (RISA, 1, NotSerialized)
    {
        Return (SMI (0x00, 0x06, Arg0, 0x00, 0x00))
    }

    Method (WISA, 2, NotSerialized)
    {
        SMI (0x00, 0x07, Arg0, Arg1, 0x00)
    }

    Method (MISA, 3, NotSerialized)
    {
        SMI (0x00, 0x08, Arg0, Arg1, Arg2)
    }

    Method (VEXP, 0, NotSerialized)
    {
        SMI (0x01, 0x00, 0x00, 0x00, 0x00)
    }

    Method (VUPS, 1, NotSerialized)
    {
        SMI (0x01, 0x01, Arg0, 0x00, 0x00)
    }

    Method (VSDS, 2, NotSerialized)
    {
        SMI (0x01, 0x02, Arg0, Arg1, 0x00)
    }

    Method (VDDC, 0, NotSerialized)
    {
        SMI (0x01, 0x03, 0x00, 0x00, 0x00)
    }

    Method (VVPD, 1, NotSerialized)
    {
        SMI (0x01, 0x04, Arg0, 0x00, 0x00)
    }

    Method (VNRS, 1, NotSerialized)
    {
        SMI (0x01, 0x05, Arg0, 0x00, 0x00)
    }

    Method (GLPW, 0, NotSerialized)
    {
        Return (SMI (0x01, 0x06, 0x00, 0x00, 0x00))
    }

    Method (VSLD, 1, NotSerialized)
    {
        SMI (0x01, 0x07, Arg0, 0x00, 0x00)
    }

    Method (VEVT, 1, NotSerialized)
    {
        Return (SMI (0x01, 0x08, Arg0, 0x00, 0x00))
    }

    Method (VTHR, 0, NotSerialized)
    {
        Return (SMI (0x01, 0x09, 0x00, 0x00, 0x00))
    }

    Method (VBRC, 1, NotSerialized)
    {
        SMI (0x01, 0x0A, Arg0, 0x00, 0x00)
    }

    Method (VBRG, 0, NotSerialized)
    {
        Return (SMI (0x01, 0x0E, 0x00, 0x00, 0x00))
    }

    Method (VCMS, 2, NotSerialized)
    {
        Return (SMI (0x01, 0x0B, Arg0, Arg1, 0x00))
    }

    Method (VBTD, 0, NotSerialized)
    {
        Return (SMI (0x01, 0x0F, 0x00, 0x00, 0x00))
    }

    Method (VDYN, 2, NotSerialized)
    {
        Return (SMI (0x01, 0x11, Arg0, Arg1, 0x00))
    }

    Method (SDPS, 2, NotSerialized)
    {
        Return (SMI (0x01, 0x12, Arg0, Arg1, 0x00))
    }

    Method (SCMS, 1, NotSerialized)
    {
        Return (SMI (0x02, Arg0, 0x00, 0x00, 0x00))
    }

    Method (BHDP, 2, NotSerialized)
    {
        Return (SMI (0x03, 0x00, Arg0, Arg1, 0x00))
    }

    Method (STEP, 1, NotSerialized)
    {
        SMI (0x04, Arg0, 0x00, 0x00, 0x00)
    }

    Method (SLTP, 0, NotSerialized)
    {
        SMI (0x05, 0x00, 0x00, 0x00, 0x00)
    }

    Method (CBRI, 0, NotSerialized)
    {
        SMI (0x05, 0x01, 0x00, 0x00, 0x00)
    }

    Method (BCHK, 0, NotSerialized)
    {
        Return (SMI (0x05, 0x04, 0x00, 0x00, 0x00))
    }

    Method (BYRS, 0, NotSerialized)
    {
        SMI (0x05, 0x05, 0x00, 0x00, 0x00)
    }

    Method (LCHK, 1, NotSerialized)
    {
        Return (SMI (0x05, 0x06, Arg0, 0x00, 0x00))
    }

    Method (BLTH, 1, NotSerialized)
    {
        Return (SMI (0x06, Arg0, 0x00, 0x00, 0x00))
    }

    Method (PRSM, 2, NotSerialized)
    {
        Return (SMI (0x07, 0x00, Arg0, Arg1, 0x00))
    }

    Method (ISOC, 1, NotSerialized)
    {
        Return (SMI (0x07, 0x03, Arg0, 0x00, 0x00))
    }

    Method (EZRC, 1, NotSerialized)
    {
        Return (SMI (0x07, 0x04, Arg0, 0x00, 0x00))
    }

    Method (WGSV, 1, NotSerialized)
    {
        Return (SMI (0x09, Arg0, 0x00, 0x00, 0x00))
    }

    Method (TSDL, 0, NotSerialized)
    {
        Return (SMI (0x0A, 0x03, 0x00, 0x00, 0x00))
    }

    Method (FLPF, 1, NotSerialized)
    {
        Return (SMI (0x0A, 0x04, Arg0, 0x00, 0x00))
    }

    Method (GTST, 1, NotSerialized)
    {
        Return (SMI (0x0A, 0x05, Arg0, 0x00, 0x00))
    }

    Method (CSUM, 1, NotSerialized)
    {
        Return (SMI (0x0E, Arg0, 0x00, 0x00, 0x00))
    }

    Method (NVSS, 1, NotSerialized)
    {
        Return (SMI (0x0F, Arg0, 0x00, 0x00, 0x00))
    }

    Method (WMIS, 2, NotSerialized)
    {
        Return (SMI (0x10, Arg0, Arg1, 0x00, 0x00))
    }

    Method (AWON, 1, NotSerialized)
    {
        Return (SMI (0x12, Arg0, 0x00, 0x00, 0x00))
    }

    Method (PMON, 2, NotSerialized)
    {
        Local0 = SizeOf (Arg0)
        Name (TSTR, Buffer (Local0){})
        TSTR = Arg0
        DBGB = TSTR /* \PMON.TSTR */
        SMI (0x11, Arg1, 0x00, 0x00, 0x00)
    }

    Method (UAWS, 1, NotSerialized)
    {
        Return (SMI (0x13, Arg0, 0x00, 0x00, 0x00))
    }

    Method (BFWC, 1, NotSerialized)
    {
        Return (SMI (0x14, 0x00, Arg0, 0x00, 0x00))
    }

    Method (BFWP, 0, NotSerialized)
    {
        Return (SMI (0x14, 0x01, 0x00, 0x00, 0x00))
    }

    Method (BFWL, 0, NotSerialized)
    {
        SMI (0x14, 0x02, 0x00, 0x00, 0x00)
    }

    Method (BFWG, 1, NotSerialized)
    {
        SMI (0x14, 0x03, Arg0, 0x00, 0x00)
    }

    Method (BDMC, 1, NotSerialized)
    {
        SMI (0x14, 0x04, Arg0, 0x00, 0x00)
    }

    Method (PSIF, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x05, Arg0, Arg1, 0x00))
    }

    Method (FNSC, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x06, Arg0, Arg1, 0x00))
    }

    Method (AUDC, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x07, Arg0, Arg1, 0x00))
    }

    Method (SYBC, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x08, Arg0, Arg1, 0x00))
    }

    Method (KBLS, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x09, Arg0, Arg1, 0x00))
    }

    Method (SSTI, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x0A, Arg0, Arg1, 0x00))
    }

    Method (SSTH, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x0B, Arg0, Arg1, 0x00))
    }

    Method (FPCI, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x0C, Arg0, Arg1, 0x00))
    }

    Method (UBIS, 1, NotSerialized)
    {
        Return (SMI (0x15, 0x00, Arg0, 0x00, 0x00))
    }

    Method (DIEH, 1, NotSerialized)
    {
        Return (SMI (0x16, 0x00, Arg0, 0x00, 0x00))
    }

    Method (OUTP, 2, NotSerialized)
    {
        SMI (0x17, Arg0, Arg1, 0x00, 0x00)
    }

    Method (SREQ, 3, NotSerialized)
    {
        SMI (0x18, (Arg0 & 0xFF), (Arg1 & 0xFF), (Arg2 & 
            0xFF), 0x00)
    }

    Method (SPMS, 1, NotSerialized)
    {
        SMI (0x19, (Arg0 & 0xFF), 0x00, 0x00, 0x00)
    }

    Method (LVSS, 2, NotSerialized)
    {
        Return (SMI (0x1A, (Arg0 & 0xFF), Arg1, 0x00, 0x00))
    }

    Method (WMEM, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \WMEM.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (WFIO, 2, Serialized)
    {
        Local0 = (Arg0 << 0x02)
        WMEM (0xFED81500, Local0, 0x16, 0x01, Arg1)
    }

    Scope (\)
    {
        OperationRegion (LFCN, SystemMemory, 0x77778698, 0x001C)
        Field (LFCN, AnyAcc, Lock, Preserve)
        {
            BDID,   8, 
            BDTP,   8, 
            MCSZ,   8, 
            KBID,   8, 
            LWSR,   8, 
            LSID,   8, 
            TPVD,   16, 
            TPPD,   16, 
            PNVD,   16, 
            PNPD,   16, 
            TPSD,   16, 
            WWVD,   16, 
            WWPD,   16, 
            WLVD,   16, 
            WLPD,   16, 
            NLCK,   8, 
            MTID,   8, 
            SPSU,   8, 
            BS50,   8
        }
    }

    Method (LM01, 1, Serialized)
    {
        Local0 = Arg0
        OperationRegion (VARM, SystemMemory, Local0, 0x01)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Return (VARR) /* \LM01.VARR */
    }

    Method (LM02, 1, Serialized)
    {
        Local0 = Arg0
        OperationRegion (VARM, SystemMemory, Local0, 0x02)
        Field (VARM, WordAcc, NoLock, Preserve)
        {
            VARR,   16
        }

        Return (VARR) /* \LM02.VARR */
    }

    Method (LM03, 1, Serialized)
    {
        Local0 = Arg0
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Return (VARR) /* \LM03.VARR */
    }

    Method (LM04, 2, Serialized)
    {
        Local0 = Arg0
        OperationRegion (VARM, SystemMemory, Local0, 0x01)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        VARR = (Arg1 & 0xFF)
    }

    Method (LM05, 2, Serialized)
    {
        Local0 = Arg0
        OperationRegion (VARM, SystemMemory, Local0, 0x02)
        Field (VARM, WordAcc, NoLock, Preserve)
        {
            VARR,   16
        }

        VARR = (Arg1 & 0xFFFF)
    }

    Method (LM06, 2, Serialized)
    {
        Local0 = Arg0
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        VARR = (Arg1 & 0xFFFFFFFF)
    }

    Method (LM07, 1, Serialized)
    {
        Local0 = (Arg0 & 0xFFFF)
        OperationRegion (VARI, SystemIO, Local0, 0x01)
        Field (VARI, ByteAcc, Lock, Preserve)
        {
            VARR,   8
        }

        Return (VARR) /* \LM07.VARR */
    }

    Method (LM08, 1, Serialized)
    {
        Local0 = (Arg0 & 0xFFFF)
        OperationRegion (VARJ, SystemIO, Local0, 0x02)
        Field (VARJ, WordAcc, Lock, Preserve)
        {
            VARR,   16
        }

        Return (VARR) /* \LM08.VARR */
    }

    Method (LM09, 2, Serialized)
    {
        Local0 = (Arg0 & 0xFFFF)
        OperationRegion (VARK, SystemIO, Local0, 0x01)
        Field (VARK, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        VARR = (Arg1 & 0xFF)
    }

    Method (LM0A, 2, Serialized)
    {
        Local0 = (Arg0 & 0xFFFF)
        OperationRegion (VARL, SystemIO, Local0, 0x02)
        Field (VARL, WordAcc, Lock, Preserve)
        {
            VARR,   16
        }

        VARR = (Arg1 & 0xFFFF)
    }

    Method (LM0B, 4, Serialized)
    {
        Local0 = 0xE0000000
        Local0 += ((Arg0 & 0xFF) << 0x14)
        Local0 += ((Arg1 & 0x1F) << 0x0F)
        Local0 += ((Arg2 & 0x07) << 0x0C)
        Local0 += (Arg3 & 0x0FFF)
        Return (LM01 (Local0))
    }

    Method (LM0C, 4, Serialized)
    {
        Local0 = 0xE0000000
        Local0 += ((Arg0 & 0xFF) << 0x14)
        Local0 += ((Arg1 & 0x1F) << 0x0F)
        Local0 += ((Arg2 & 0x07) << 0x0C)
        Local0 += (Arg3 & 0x0FFF)
        Return (LM02 (Local0))
    }

    Method (LM0D, 4, Serialized)
    {
        Local0 = 0xE0000000
        Local0 += ((Arg0 & 0xFF) << 0x14)
        Local0 += ((Arg1 & 0x1F) << 0x0F)
        Local0 += ((Arg2 & 0x07) << 0x0C)
        Local0 += (Arg3 & 0x0FFF)
        Return (LM03 (Local0))
    }

    Method (LM0E, 5, Serialized)
    {
        Local0 = 0xE0000000
        Local0 += ((Arg0 & 0xFF) << 0x14)
        Local0 += ((Arg1 & 0x1F) << 0x0F)
        Local0 += ((Arg2 & 0x07) << 0x0C)
        Local0 += (Arg3 & 0x0FFF)
        LM04 (Local0, (Arg4 & 0xFF))
    }

    Method (LM0F, 5, Serialized)
    {
        Local0 = 0xE0000000
        Local0 += ((Arg0 & 0xFF) << 0x14)
        Local0 += ((Arg1 & 0x1F) << 0x0F)
        Local0 += ((Arg2 & 0x07) << 0x0C)
        Local0 += (Arg3 & 0x0FFF)
        LM05 (Local0, (Arg4 & 0xFFFF))
    }

    Method (LM10, 5, Serialized)
    {
        Local0 = 0xE0000000
        Local0 += ((Arg0 & 0xFF) << 0x14)
        Local0 += ((Arg1 & 0x1F) << 0x0F)
        Local0 += ((Arg2 & 0x07) << 0x0C)
        Local0 += (Arg3 & 0x0FFF)
        LM06 (Local0, (Arg4 & 0xFFFFFFFF))
    }

    Method (LM11, 2, Serialized)
    {
        Local0 = (Arg0 << 0x02)
        Local0 += 0xFED81500
        Local1 = LM03 (Local0)
        Local2 = (Arg1 & 0x01)
        If ((Local2 == 0x01))
        {
            Local1 |= 0x00400000
        }
        Else
        {
            Local1 &= 0xFFBFFFFF
        }

        LM06 (Local0, Local1)
    }

    Method (LM12, 1, Serialized)
    {
        Local0 = (Arg0 << 0x02)
        Local0 += 0xFED81500
        Local1 = LM03 (Local0)
        If (((Local1 && 0x00800000) == 0x01))
        {
            If (((Local1 & 0x00400000) == 0x00400000))
            {
                Return (0x01)
            }
            Else
            {
                Return (0x00)
            }
        }
        ElseIf (((Local1 & 0x00010000) == 0x00010000))
        {
            Return (0x01)
        }
        Else
        {
            Return (0x00)
        }
    }

    Method (LM13, 1, Serialized)
    {
        Return ((LM01 ((0xFED80700 + (Arg0 & 0xFF))) & 0xFF))
    }

    Method (LM14, 2, Serialized)
    {
        LM04 ((0xFED80700 + (Arg0 & 0xFF)), (Arg1 & 0xFF))
    }

    Method (LM15, 1, Serialized)
    {
        OperationRegion (VARE, SystemIO, 0x72, 0x02)
        Field (VARE, ByteAcc, Lock, Preserve)
        {
            EINP,   8, 
            EDAP,   8
        }

        EINP = (Arg0 & 0xFF)
        Return (EDAP) /* \LM15.EDAP */
    }

    Method (LM16, 2, Serialized)
    {
        OperationRegion (VARE, SystemIO, 0x72, 0x02)
        Field (VARE, ByteAcc, Lock, Preserve)
        {
            EINP,   8, 
            EDAP,   8
        }

        EINP = (Arg0 & 0xFF)
        EDAP = (Arg1 & 0xFF)
    }

    Method (LM17, 1, Serialized)
    {
        LM09 (0x80, Arg0)
    }

    Method (LM18, 1, Serialized)
    {
        LM09 (0xB0, Arg0)
    }

    Scope (_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (NOS3, Package (0x04)
    {
        0x03, 
        0x03, 
        0x00, 
        0x00
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        0x00, 
        0x00
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        0x00, 
        0x00
    })
    Name (TZFG, 0x00)
    OperationRegion (DBG0, SystemIO, 0x80, 0x01)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Method (GSMI, 1, NotSerialized)
    {
        APMD = Arg0
        APMC = 0xE4
        Sleep (0x02)
    }

    Method (BSMI, 1, NotSerialized)
    {
        APMD = Arg0
        APMC = 0xBE
        Sleep (One)
    }

    Method (PPTS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            \_SB.PCI0.SMB.RSTU = 0x00
        }

        \_SB.PCI0.SMB.CLPS = 0x01
        \_SB.PCI0.SMB.SLPS = 0x01
        \_SB.PCI0.SMB.PEWS = \_SB.PCI0.SMB.PEWS
    }

    Method (PWAK, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            \_SB.PCI0.SMB.RSTU = 0x01
        }

        \_SB.PCI0.SMB.PEWS = \_SB.PCI0.SMB.PEWS
        \_SB.PCI0.SMB.PEWD = 0x00
    }

    Method (TPST, 1, Serialized)
    {
        M000 (Arg0)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        PRWP [One] = Arg1
        If ((DAS3 == Zero))
        {
            If ((Arg1 <= 0x03))
            {
                PRWP [One] = Zero
            }
        }

        Return (PRWP) /* \PRWP */
    }

    OperationRegion (GNVS, SystemMemory, 0x77765E98, 0x0000000D)
    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        BRTL,   8, 
        CNSB,   8, 
        DAS3,   8, 
        WKPM,   8, 
        NAPC,   8, 
        PCBA,   32, 
        BT00,   8, 
        MWTT,   8, 
        DPTC,   8, 
        WOVS,   8
    }

    OperationRegion (OGNS, SystemMemory, 0x77765F18, 0x00000005)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        THPN,   8, 
        THPD,   8, 
        SDMO,   8, 
        TBEN,   8, 
        TBNH,   8
    }

    OperationRegion (PNVS, SystemMemory, 0x77765F98, 0x00000002)
    Field (PNVS, AnyAcc, NoLock, Preserve)
    {
        HDSI,   8, 
        HDSO,   8
    }

    Name (LINX, 0x00)
    Name (OSSP, 0x00)
    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = 0x00
                TPOS = 0x00
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSSP = 0x01
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = 0x01
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = 0x01
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = 0x01
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = 0x01
                    WIN8 = 0x01
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Windows 2016"))
                {
                    OSSP = 0x01
                    WIN8 = 0x01
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = 0x01
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = 0x01
                    TPOS = 0x01
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = 0x00
                    TPOS = 0x00
                }
            }
            Else
            {
                OSTB = 0x00
                TPOS = 0x00
            }

            If ((TPOS == 0x80)){}
        }

        Return (OSTB) /* \OSTB */
    }

    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        M250 (0x00, 0x00, 0x00, 0x13F01308, 0x01)
        P80H = Arg0
        PPTS (Arg0)
        If ((Arg0 == 0x05))
        {
            If ((WKPM == One))
            {
                \_SB.PCI0.SMB.PWDE = One
            }

            BSMI (Zero)
            GSMI (0x03)
            Local1 = 0xC0
        }

        If ((Arg0 == 0x04))
        {
            \_SB.PCI0.SMB.SLPS = 0x01
            \_SB.PCI0.SMB.RSTU = 0x01
            Local1 = 0x80
        }

        If ((Arg0 == 0x03))
        {
            \_SB.PCI0.SMB.SLPS = 0x01
            Local1 = 0x40
        }

        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }

        \_SB.APTS (Arg0)
        Local0 = 0x01
        If ((Arg0 == SPS))
        {
            Local0 = 0x00
        }

        If (((Arg0 == 0x00) || (Arg0 >= 0x06)))
        {
            Local0 = 0x00
        }

        If (Local0)
        {
            SPS = Arg0
            \_SB.PCI0.LPC0.EC0.HKEY.MHKE (0x00)
            If (\_SB.PCI0.LPC0.EC0.KBLT)
            {
                SCMS (0x0D)
            }

            If ((Arg0 == 0x01))
            {
                FNID = \_SB.PCI0.LPC0.EC0.HFNI
                \_SB.PCI0.LPC0.EC0.HFNI = 0x00
                \_SB.PCI0.LPC0.EC0.HFSP = 0x00
            }

            If ((Arg0 == 0x03))
            {
                SLTP ()
                ACST = \_SB.PCI0.LPC0.EC0.AC._PSR ()
                If ((FNWK == 0x01))
                {
                    If (H8DR)
                    {
                        \_SB.PCI0.LPC0.EC0.HWFN = 0x00
                    }
                    Else
                    {
                        MBEC (0x32, 0xEF, 0x00)
                    }
                }
            }

            If ((Arg0 == 0x04))
            {
                \_SB.PCI0.LPC0.EC0.S03F = 0x00
                \_SB.SLPB._PSW (0x00)
                SLTP ()
                AWON (0x04)
            }

            \_SB.PCI0.LPC0.EC0.S03F = 0x00
            If ((Arg0 == 0x05))
            {
                SLTP ()
                AWON (0x05)
            }

            If ((Arg0 >= 0x04))
            {
                \_SB.PCI0.LPC0.EC0.HWLB = 0x00
            }
            Else
            {
                \_SB.PCI0.LPC0.EC0.HWLB = 0x01
            }

            If ((Arg0 >= 0x03))
            {
                \_SB.PCI0.LPC0.EC0.HCMU = 0x01
            }

            If ((Arg0 != 0x05)){}
            \_SB.PCI0.LPC0.EC0.HKEY.WGPS (Arg0)
        }
    }

    OperationRegion (XMOS, SystemIO, 0x72, 0x02)
    Field (XMOS, ByteAcc, Lock, Preserve)
    {
        XIDX,   8, 
        XDAT,   8
    }

    IndexField (XIDX, XDAT, ByteAcc, Lock, Preserve)
    {
        Offset (0xAE), 
        WKSR,   8
    }

    Name (WAKI, Package (0x02)
    {
        0x00, 
        0x00
    })
    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        P80H = (Arg0 << 0x04)
        PWAK (Arg0)
        \_SB.AWAK (Arg0)
        SPSU = Arg0
        BS50 = 0x00
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If (GPIC)
            {
                \_SB.PCI0.LPC0.DSPI ()
                If (NAPC)
                {
                    \_SB.PCI0.NAPE ()
                }
            }

            If ((WKSR == 0x61))
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
            ElseIf ((WKSR == 0x68))
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
            ElseIf ((WKSR == 0x6B))
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        If ((Arg0 == 0x03))
        {
            \_SB.PCI0.LPC0.EC0.HWAK = 0x00
        }

        If (((Arg0 == 0x00) || (Arg0 >= 0x05)))
        {
            Return (WAKI) /* \WAKI */
        }

        SPS = 0x00
        Local0 = 0x00
        If ((TPOS == 0x40))
        {
            Local0 = 0x01
        }

        If ((TPOS == 0x80))
        {
            Local0 = 0x02
        }

        If ((TPOS == 0x50))
        {
            Local0 = 0x03
        }

        If ((TPOS == 0x60))
        {
            Local0 = 0x04
        }

        If ((TPOS == 0x61))
        {
            Local0 = 0x04
        }

        If ((TPOS == 0x70))
        {
            Local0 = 0x05
        }

        \_SB.PCI0.LPC0.EC0.HCMU = 0x00
        \_SB.PCI0.LPC0.EC0.EVNT (0x01)
        \_SB.PCI0.LPC0.EC0.HKEY.MHKE (0x01)
        \_SB.PCI0.LPC0.EC0.FNST ()
        SCMS (0x21)
        LIDB = 0x00
        \_SB.PCI0.LPC0.EC0.HKEY.CSSS ()
        If ((Arg0 == 0x01))
        {
            FNID = \_SB.PCI0.LPC0.EC0.HFNI
        }

        If ((Arg0 == 0x03))
        {
            NVSS (0x00)
            IOEN = 0x00
            IOST = 0x00
            If ((ISWK == 0x01))
            {
                If (\_SB.PCI0.LPC0.EC0.HKEY.DHKC)
                {
                    \_SB.PCI0.LPC0.EC0.HKEY.MHKQ (0x6070)
                }
            }

            VCMS (0x01, \_SB.LID._LID ())
            AWON (0x00)
            If ((WLAC == 0x02)){}
            ElseIf ((\_SB.PCI0.LPC0.EC0.ELNK && (WLAC == 0x01)))
            {
                \_SB.PCI0.LPC0.EC0.DCWL = 0x00
            }
            Else
            {
                \_SB.PCI0.LPC0.EC0.DCWL = 0x01
            }
        }

        If ((Arg0 == 0x04))
        {
            NVSS (0x00)
            \_SB.PCI0.LPC0.EC0.HSPA = 0x00
            Local0 = AUDC (0x00, 0x00)
            Local0 &= 0x01
            If ((Local0 == 0x00))
            {
                WFIO (0x54, 0x00)
            }
            Else
            {
                WFIO (0x54, 0x01)
            }

            IOEN = 0x00
            IOST = 0x00
            If ((ISWK == 0x02))
            {
                If (\_SB.PCI0.LPC0.EC0.HKEY.DHKC)
                {
                    \_SB.PCI0.LPC0.EC0.HKEY.MHKQ (0x6080)
                }
            }

            If ((WLAC == 0x02)){}
            ElseIf ((\_SB.PCI0.LPC0.EC0.ELNK && (WLAC == 0x01)))
            {
                \_SB.PCI0.LPC0.EC0.DCWL = 0x00
            }
            Else
            {
                \_SB.PCI0.LPC0.EC0.DCWL = 0x01
            }
        }

        \_SB.PCI0.LPC0.EC0.BATW (Arg0)
        \_SB.PCI0.LPC0.EC0.HKEY.WGWK (Arg0)
        VSLD (\_SB.LID._LID ())
        If ((Arg0 < 0x04))
        {
            If (((RRBF & 0x02) || (\_SB.PCI0.LPC0.EC0.HWAC & 0x02)))
            {
                Local0 = (Arg0 << 0x08)
                Local0 = (0x2013 | Local0)
                \_SB.PCI0.LPC0.EC0.HKEY.MHKQ (Local0)
            }
        }

        If ((Arg0 == 0x04))
        {
            Local0 = 0x00
            Local1 = CSUM (0x00)
            If ((Local1 != CHKC))
            {
                Local0 = 0x01
                CHKC = Local1
            }

            Local1 = CSUM (0x01)
            If ((Local1 != CHKE))
            {
                Local0 = 0x01
                CHKE = Local1
            }

            If (Local0)
            {
                Notify (_SB, 0x00) // Bus Check
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            \_SB.PCI0.LPC0.EC0.HKEY.DYTC (0x000F0001)
        }

        RRBF = Zero
        \_SB.PCI0.LPC0.EC0.AC.ACDC = 0xFF
        Notify (\_SB.PCI0.LPC0.EC0.AC, 0x80) // Status Change
        Notify (\_SB.PCI0, 0x00) // Bus Check
        M250 (0x00, 0x00, 0x00, 0x13F01308, 0x00)
        Return (WAKI) /* \WAKI */
    }

    Scope (_SI)
    {
        Method (_SST, 1, NotSerialized)  // _SST: System Status
        {
            If ((Arg0 == 0x00))
            {
                \_SB.PCI0.LPC0.EC0.LED (0x00, 0x00)
                \_SB.PCI0.LPC0.EC0.LED (0x0A, 0x00)
                \_SB.PCI0.LPC0.EC0.LED (0x07, 0x00)
            }

            If ((Arg0 == 0x01))
            {
                If ((SPS || WNTF))
                {
                    \_SB.PCI0.LPC0.EC0.BEEP (0x05)
                }

                \_SB.PCI0.LPC0.EC0.LED (0x00, 0x80)
                \_SB.PCI0.LPC0.EC0.LED (0x0A, 0x80)
                \_SB.PCI0.LPC0.EC0.LED (0x07, 0x00)
            }

            If ((Arg0 == 0x02))
            {
                \_SB.PCI0.LPC0.EC0.LED (0x00, 0x80)
                \_SB.PCI0.LPC0.EC0.LED (0x0A, 0x80)
                \_SB.PCI0.LPC0.EC0.LED (0x07, 0xC0)
            }

            If ((Arg0 == 0x03))
            {
                If ((SPS > 0x03))
                {
                    \_SB.PCI0.LPC0.EC0.BEEP (0x07)
                }
                ElseIf ((SPS == 0x03))
                {
                    \_SB.PCI0.LPC0.EC0.BEEP (0x03)
                }
                Else
                {
                    \_SB.PCI0.LPC0.EC0.BEEP (0x04)
                }

                If ((SPS == 0x03)){}
                Else
                {
                    \_SB.PCI0.LPC0.EC0.LED (0x00, 0x80)
                    \_SB.PCI0.LPC0.EC0.LED (0x0A, 0x80)
                }

                \_SB.PCI0.LPC0.EC0.LED (0x00, 0xA0)
                Stall (0x64)
                \_SB.PCI0.LPC0.EC0.LED (0x0A, 0xA0)
            }

            If ((Arg0 == 0x04))
            {
                \_SB.PCI0.LPC0.EC0.BEEP (0x03)
                \_SB.PCI0.LPC0.EC0.LED (0x07, 0xC0)
                \_SB.PCI0.LPC0.EC0.LED (0x00, 0xC0)
                \_SB.PCI0.LPC0.EC0.LED (0x0A, 0xC0)
                \_SB.PCI0.LPC0.EC0.HLCL = 0xC0
                Sleep (0x64)
                Local0 = 0xCA
                \_SB.PCI0.LPC0.EC0.HLCL = Local0
            }
        }
    }

    Name (PICM, 0x00)
    Name (GPIC, 0x00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
        GPIC = Arg0
        If (Arg0)
        {
            \_SB.PCI0.LPC0.DSPI ()
            If (NAPC)
            {
                \_SB.PCI0.NAPE ()
            }
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_BBN, 0x00)  // _BBN: BIOS Bus Number
            Name (_ADR, 0x00)  // _ADR: Address
            Name (NBRI, Zero)
            Name (NBAR, Zero)
            Name (NCMD, Zero)
            Name (PXDC, Zero)
            Name (PXLC, Zero)
            Name (PXD2, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((GPIC != Zero))
                {
                    ^LPC0.DSPI ()
                    If (NAPC)
                    {
                        NAPE ()
                    }
                }

                OSTP ()
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg0, 0x00, UID0)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg2 == One))
                {
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Start  CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg2 == 0x02))
                {
                    Local2 = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
                }
                Else
                {
                    Local3 = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If ((TBEN == One))
                    {
                        If ((TBNH != Zero))
                        {
                            CTRL &= 0xFFFFFFF5
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFF4
                        }
                    }

                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0xFFFFFFFE
                    }

                    CTRL &= 0xFFFFFFF5
                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01)){}
                        If ((CTRL & 0x04)){}
                        If ((CTRL & 0x10)){}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                }
                Else
                {
                    CDW1 |= 0x04
                }

                If ((Arg2 == One))
                {
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Return CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg2 == 0x02))
                {
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
                }

                Return (Arg3)
            }

            OperationRegion (K8ST, SystemMemory, 0x77778B18, 0x00000070)
            Field (K8ST, AnyAcc, NoLock, Preserve)
            {
                C0_0,   16, 
                C2_0,   16, 
                C4_0,   16, 
                C6_0,   16, 
                C8_0,   16, 
                CA_0,   16, 
                CC_0,   16, 
                CE_0,   16, 
                D0_0,   16, 
                D2_0,   16, 
                D4_0,   16, 
                D6_0,   16, 
                D8_0,   16, 
                DA_0,   16, 
                DC_0,   16, 
                DE_0,   16, 
                E0_0,   16, 
                E2_0,   16, 
                E4_0,   16, 
                E6_0,   16, 
                E8_0,   16, 
                EA_0,   16, 
                EC_0,   16, 
                EE_0,   16, 
                F0_0,   16, 
                F2_0,   16, 
                F4_0,   16, 
                F6_0,   16, 
                F8_0,   16, 
                FA_0,   16, 
                FC_0,   16, 
                FE_0,   16, 
                TOML,   32, 
                TOMH,   32, 
                PCIB,   32, 
                PCIS,   32, 
                T1MN,   64, 
                T1MX,   64, 
                T1LN,   64, 
                MM1B,   32, 
                MM1S,   32
            }

            Name (RSRC, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, _Y00)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C1FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C2000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C5FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C6000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000C9FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CA000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CDFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CE000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D1FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D2000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D5FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D6000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000D9FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DA000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DDFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DE000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E1FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E2000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E5FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E6000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000E9FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EA000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EDFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EE000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xF4000000,         // Range Minimum
                    0xFEBFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0AC00000,         // Length
                    0x00,, _Y02, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (RSRC, \_SB.PCI0._Y00._MAX, WB1M)  // _MAX: Maximum Base Address
                CreateWordField (RSRC, \_SB.PCI0._Y00._LEN, WB1L)  // _LEN: Length
                CreateDWordField (RSRC, \_SB.PCI0._Y01._MIN, BT1S)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y01._MAX, BT1M)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y01._LEN, BT1L)  // _LEN: Length
                CreateDWordField (RSRC, \_SB.PCI0._Y02._MIN, BT2S)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y02._MAX, BT2M)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y02._LEN, BT2L)  // _LEN: Length
                WB1M = 0xFF
                WB1L = 0x0100
                Local0 = PCIB /* \_SB_.PCI0.PCIB */
                BT1S = TOML /* \_SB_.PCI0.TOML */
                BT1M = 0xDFFFFFFF
                BT1L = ((BT1M - BT1S) + 0x01)
                BT2S = MM1B /* \_SB_.PCI0.MM1B */
                Local0 = (MM1B + MM1S) /* \_SB_.PCI0.MM1S */
                BT2M = (Local0 - 0x01)
                BT2L = MM1S /* \_SB_.PCI0.MM1S */
                CreateQWordField (RSRC, \_SB.PCI0._Y03._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateQWordField (RSRC, \_SB.PCI0._Y03._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateQWordField (RSRC, \_SB.PCI0._Y03._LEN, M1LN)  // _LEN: Length
                M1MN = T1MN /* \_SB_.PCI0.T1MN */
                M1MX = T1MX /* \_SB_.PCI0.T1MX */
                M1LN = T1LN /* \_SB_.PCI0.T1LN */
                M460 ("WBS1 %x %x \n", WB1M, WB1L, 0x00, 0x00, 0x00, 0x00)
                M460 ("BTS1 %x %x %x \n", BT1S, BT1M, BT1L, 0x00, 0x00, 0x00)
                M460 ("BTS2 %x %x %x \n", BT2S, BT2M, BT2L, 0x00, 0x00, 0x00)
                Return (RSRC) /* \_SB_.PCI0.RSRC */
            }

            Device (MEMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (MEM1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y04)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y05)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y06)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._BAS, MB01)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._LEN, ML01)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._BAS, MB02)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._LEN, ML02)  // _LEN: Length
                    If (GPIC)
                    {
                        MB01 = 0xFEC00000
                        MB02 = 0xFEE00000
                        ML01 = 0x1000
                        If (NAPC)
                        {
                            ML01 += 0x1000
                        }

                        ML02 = 0x1000
                    }

                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y06._BAS, MB03)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y06._LEN, ML03)  // _LEN: Length
                    MB03 = PCIB /* \_SB_.PCI0.PCIB */
                    ML03 = PCIS /* \_SB_.PCI0.PCIS */
                    M460 ("FECX %x %x %x \n", MB01, ML01, 0x00, 0x00, 0x00, 0x00)
                    M460 ("FEEX %x %x %x \n", MB02, ML02, 0x00, 0x00, 0x00, 0x00)
                    M460 ("PMIB %x %x %x \n", MB03, ML03, 0x00, 0x00, 0x00, 0x00)
                    Return (MEM1) /* \_SB_.PCI0.MEMR.MEM1 */
                }
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                Local0 = (PCBA + 0xB8)
                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    NAPX,   32, 
                    NAPD,   32
                }

                Local1 = NAPX /* \_SB_.PCI0.NAPE.NAPX */
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPE.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                NAPX = Local1
                Release (NAPM)
            }

            Method (PXCR, 3, Serialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.GPPX.PXCR\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = Zero
                Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
                While ((Local1 != Zero))
                {
                    Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                    {
                        Break
                    }

                    If ((Local2 == 0x10))
                    {
                        Local0 = Local1
                        Break
                    }

                    Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
                }

                Return (Local0)
            }

            Method (SPCF, 1, NotSerialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.GPPX.SPCF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = M019 (Zero, (Arg0 >> 0x10), (Arg0 & 0xFF), 
                    0x18)
                NBRI = ((Local0 & 0xFF00) >> 0x08)
                NCMD = M019 (NBRI, Zero, Zero, 0x04)
                NBAR = M019 (NBRI, Zero, Zero, 0x10)
                Local1 = PXCR (NBRI, Zero, Zero)
                PXDC = M019 (NBRI, Zero, Zero, (Local1 + 0x08))
                PXLC = M019 (NBRI, Zero, Zero, (Local1 + 0x10))
                PXD2 = M019 (NBRI, Zero, Zero, (Local1 + 0x28))
            }

            Method (RPCF, 0, NotSerialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.GPPX.RPCF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local1 = PXCR (NBRI, Zero, Zero)
                M020 (NBRI, Zero, Zero, (Local1 + 0x08), PXDC)
                M020 (NBRI, Zero, Zero, (Local1 + 0x10), (PXLC & 0xFFFFFEFC))
                M020 (NBRI, Zero, Zero, (Local1 + 0x28), PXD2)
                M020 (NBRI, Zero, Zero, 0x10, NBAR)
                M020 (NBRI, Zero, Zero, 0x04, 0x06)
            }

            Method (UPWD, 0, NotSerialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.UPWD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
                Field (PSMI, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8, 
                    SMID,   8
                }

                SMIC = HDSI /* \HDSI */
            }

            Method (LPWD, 0, NotSerialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.LPWD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
                Field (PSMI, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8, 
                    SMID,   8
                }

                SMIC = HDSO /* \HDSO */
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (GPIC)
                {
                    Return (Package (0x11)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            0x00, 
                            0x18
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x01, 
                            0x00, 
                            0x19
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x02, 
                            0x00, 
                            0x1A
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x03, 
                            0x00, 
                            0x1B
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            0x00, 
                            0x1C
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x01, 
                            0x00, 
                            0x1D
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x02, 
                            0x00, 
                            0x1E
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x03, 
                            0x00, 
                            0x1F
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x00, 
                            0x00, 
                            0x28
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x00, 
                            0x00, 
                            0x28
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x00, 
                            0x00, 
                            0x20
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x01, 
                            0x00, 
                            0x21
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x02, 
                            0x00, 
                            0x22
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }
                    })
                }
                Else
                {
                    Return (Package (0x11)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x02, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x03, 
                            ^LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            ^LPC0.LNKE, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x01, 
                            ^LPC0.LNKF, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x02, 
                            ^LPC0.LNKG, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x03, 
                            ^LPC0.LNKH, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x00, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x00, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x00, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x02, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x00, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x02, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x03, 
                            ^LPC0.LNKD, 
                            0x00
                        }
                    })
                }
            }

            OperationRegion (BAR1, PCI_Config, 0x14, 0x04)
            Field (BAR1, ByteAcc, NoLock, Preserve)
            {
                NBBA,   32
            }

            OperationRegion (PM80, SystemIO, 0x0CD6, 0x02)
            Field (PM80, AnyAcc, NoLock, Preserve)
            {
                PM0I,   8, 
                PM0D,   8
            }

            IndexField (PM0I, PM0D, ByteAcc, NoLock, Preserve)
            {
                Offset (0x80), 
                SI3R,   1
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x0F, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x0F, Zero))
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x2C
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x2D
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x2E
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x2F
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKH, 
                                0x00
                            }
                        })
                    }
                }

                Device (RTL8)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                }

                Device (RUSB)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Name (_S0W, 0x00)  // _S0W: S0 Device Wake State
                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x0E, 0x03))
                    }
                    Else
                    {
                        Return (GPRW (0x0E, Zero))
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                    Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                    {
                    }

                    OperationRegion (RPXX, PCI_Config, 0x00, 0x10)
                    Field (RPXX, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32
                    }

                    Method (CAPA, 0, Serialized)
                    {
                        Local0 = ToInteger (VDID)
                        If (((Local0 & 0xFFFF) == 0x14C3))
                        {
                            Local1 = 0x84
                        }
                        Else
                        {
                            Local1 = 0x44
                        }

                        Return (Local1)
                    }

                    OperationRegion (FLDR, PCI_Config, CAPA (), 0x06)
                    Field (FLDR, ByteAcc, NoLock, Preserve)
                    {
                        DCAP,   32, 
                        DCTR,   16
                    }

                    Method (WIST, 0, Serialized)
                    {
                        If (CondRefOf (VDID))
                        {
                            Switch (ToInteger (VDID))
                            {
                                Case (0x095A8086)
                                {
                                    Return (0x01)
                                }
                                Case (0x095B8086)
                                {
                                    Return (0x01)
                                }
                                Case (0x31658086)
                                {
                                    Return (0x01)
                                }
                                Case (0x31668086)
                                {
                                    Return (0x01)
                                }
                                Case (0x08B18086)
                                {
                                    Return (0x01)
                                }
                                Case (0x08B28086)
                                {
                                    Return (0x01)
                                }
                                Case (0x08B38086)
                                {
                                    Return (0x01)
                                }
                                Case (0x08B48086)
                                {
                                    Return (0x01)
                                }
                                Case (0x24F38086)
                                {
                                    Return (0x01)
                                }
                                Case (0x24F48086)
                                {
                                    Return (0x01)
                                }
                                Case (0x24F58086)
                                {
                                    Return (0x01)
                                }
                                Case (0x24F68086)
                                {
                                    Return (0x01)
                                }
                                Case (0x24FD8086)
                                {
                                    Return (0x01)
                                }
                                Case (0x24FB8086)
                                {
                                    Return (0x01)
                                }
                                Case (0x25268086)
                                {
                                    Return (0x01)
                                }
                                Case (0x27238086)
                                {
                                    Return (0x01)
                                }
                                Case (0xB82210EC)
                                {
                                    Return (0x01)
                                }
                                Case (0x061614C3)
                                {
                                    Return (0x01)
                                }
                                Default
                                {
                                    Return (0x00)
                                }

                            }
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    PowerResource (WRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x01)
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            If ((DCAP & 0x10000000))
                            {
                                Local0 = DCTR /* \_SB_.PCI0.GPP6.PXSX.DCTR */
                                Local0 |= 0x8000
                                DCTR = Local0
                            }
                        }
                    }

                    Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x2C
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x2D
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x2E
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x2F
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKH, 
                                0x00
                            }
                        })
                    }
                }

                Device (DEV0)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (DEV1)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (BTH0)
                {
                    Name (_HID, "QCOM6390")  // _HID: Hardware ID
                    Name (_S4W, 0x02)  // _S4W: S4 Device Wake State
                    Name (_S0W, 0x02)  // _S0W: S0 Device Wake State
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((BT00 == Zero))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (UBUF, ResourceTemplate ()
                        {
                            UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                                0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                                0x0020, 0x0020, "\\_SB.FUR0",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                                )
                                {   // Pin list
                                    0x0004
                                }
                        })
                        Return (UBUF) /* \_SB_.PCI0.GPP6.BTH0._CRS.UBUF */
                    }
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x02, 0x03))
                    }
                    Else
                    {
                        Return (GPRW (0x02, Zero))
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    P0WW
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    P0WW
                })
                Name (D0WW, 0x01)
                PowerResource (P0WW, 0x00, 0x0000)
                {
                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        WFIO (0x06, 0x00)
                        Sleep (0x1E)
                        WFIO (0x03, 0x01)
                        Sleep (0x0A)
                        WFIO (0x28, 0x00)
                        Sleep (0x01F4)
                        Notify (L850, 0x01) // Device Check
                        WFIO (0x28, 0x01)
                        Sleep (0x1E)
                        WFIO (0x03, 0x00)
                        Sleep (0x46)
                        WFIO (0x06, 0x01)
                        Notify (L850, 0x01) // Device Check
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (D0WW) /* \_SB_.PCI0.GPP7.D0WW */
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        If ((D0WW != 0x01))
                        {
                            WWON ()
                            D0WW = 0x01
                        }
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        If ((D0WW != 0x00))
                        {
                            WOFF ()
                            D0WW = 0x00
                        }
                    }
                }

                Method (WWON, 0, NotSerialized)
                {
                    If ((LM12 (0x06) != 0x01))
                    {
                        M429 (0x00, 0x02, 0x03, 0x88, 0x00, 0x04, 0x02)
                        M472 (0x00, 0x02, 0x03, 0x00)
                        WFIO (0x06, 0x01)
                        Sleep (0x20)
                        M403 (0x00, 0x02, 0x03, 0x01)
                        Sleep (0x20)
                        Local1 = 0x00
                        Local2 = 0x2775
                        While ((((Local1 & 0x28) != 0x20) && (Local2 > 0x00)))
                        {
                            Local1 = M017 (0x00, 0x02, 0x03, 0x6B, 0x00, 0x08)
                            Local2 = (Local2 - 0x01)
                            Stall (0x63)
                        }

                        M403 (0x00, 0x02, 0x03, 0x00)
                        Sleep (0x20)
                    }
                }

                Method (WOFF, 0, NotSerialized)
                {
                    If ((LM12 (0x06) == 0x01))
                    {
                        M402 (0x00, 0x02, 0x03)
                        Sleep (0x0A)
                        WFIO (0x06, 0x00)
                        Sleep (0x1E)
                    }
                }

                OperationRegion (PCG1, PCI_Config, 0x58, 0x20)
                Field (PCG1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LNKC,   2
                }

                Device (L850)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                    {
                        Local0 = (Arg0 + 0x2D00)
                    }

                    Method (RHRW, 0, NotSerialized)
                    {
                        If ((WKPM == One))
                        {
                            Return (GPRW (0x08, 0x03))
                        }
                        Else
                        {
                            Return (GPRW (0x08, Zero))
                        }
                    }

                    OperationRegion (PCG2, PCI_Config, 0x00, 0x90)
                    Field (PCG2, DWordAcc, NoLock, Preserve)
                    {
                        VID0,   16, 
                        DID0,   16, 
                        Offset (0x80), 
                        APML,   2
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        LNKC = 0x02
                        WFIO (0x03, 0x01)
                        Sleep (0x32)
                        Notify (L850, 0x01) // Device Check
                        LNKC = 0x02
                        WFIO (0x03, 0x00)
                        Sleep (0x3E)
                        Notify (_SB, 0x00) // Bus Check
                        Sleep (0x64)
                        Notify (PCI0, 0x00) // Bus Check
                        Sleep (0x64)
                        Notify (L850, 0x01) // Device Check
                        LNKC = 0x02
                        APML = 0x02
                        Return (0x00)
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                             // .
                                })
                            }

                            If ((Arg2 == 0x01)){}
                            If ((Arg2 == 0x02)){}
                            If ((Arg2 == 0x03))
                            {
                                Return (0x03)
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (LFCT, 0, NotSerialized)
                    {
                        If ((DID0 == 0x7360))
                        {
                            APML = 0x02
                            Return (0x00)
                        }
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x2E
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x2F
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x2C
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x2D
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKH, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKF, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00020004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x2E
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x2F
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x2C
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x2D
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKH, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKF, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (GP11)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x18
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x19
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x1A
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x1B
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (GP12)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x18
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x19
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x1A
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x1B
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x22
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x23
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x20
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x21
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKB, 
                                0x00
                            }
                        })
                    }
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (AF7E, 0x80000001)
                    Name (DOSA, 0x00)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Device (LCD)
                    {
                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            Return (0x0110)
                        }

                        Name (BRLV, Buffer (0x11)
                        {
                            /* 0000 */  0x52, 0x22, 0x02, 0x08, 0x0E, 0x16, 0x1C, 0x22,  // R"....."
                            /* 0008 */  0x2A, 0x30, 0x36, 0x3E, 0x44, 0x4B, 0x52, 0x58,  // *06>DKRX
                            /* 0010 */  0x64                                             // d
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            If ((AF7E == 0x80000001))
                            {
                                Return (^^^^LPC0.EC0.BRTW) /* \_SB_.PCI0.LPC0.EC0_.BRTW */
                            }
                            Else
                            {
                                Return (BRLV) /* \_SB_.PCI0.GP17.VGA_.LCD_.BRLV */
                            }
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((AF7E == 0x80000001))
                            {
                                Local0 = Match (^^^^LPC0.EC0.BRTW, MEQ, Arg0, MTR, 0x00, 0x02)
                                Local1 = (Local0 - 0x02)
                                \BRLV = Local1
                                SCMS (0x16)
                            }
                        }

                        Method (_DDC, 1, NotSerialized)  // _DDC: Display Data Current
                        {
                            If ((Arg0 == 0x01))
                            {
                                Return (VEDI) /* \VEDI */
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Name (VBUF, Buffer (0x0100)
                                {
                                     0x00                                             // .
                                })
                                Concatenate (VEDI, VEDX, VBUF) /* \_SB_.PCI0.GP17.VGA_.LCD_._DDC.VBUF */
                                Return (VBUF) /* \_SB_.PCI0.GP17.VGA_.LCD_._DDC.VBUF */
                            }

                            Return (0x00)
                        }
                    }
                }

                Device (PSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "AcpDmicConnected", 
                                0x01
                            }
                        }
                    })
                    Method (_WOV, 0, NotSerialized)
                    {
                        If (HDMC)
                        {
                            Return (0x00)
                        }

                        If (NOMC)
                        {
                            Return (0x00)
                        }

                        Return (WOVS) /* \WOVS */
                    }
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    OperationRegion (PMOP, PCI_Config, 0x50, 0x08)
                    Field (PMOP, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x01), 
                        Offset (0x02), 
                            ,   3, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   3, 
                            ,   1, 
                            ,   1, 
                        Offset (0x04), 
                        POWS,   2, 
                            ,   1, 
                            ,   1, 
                            ,   3, 
                        Offset (0x05), 
                            ,   4, 
                            ,   2, 
                        PMES,   1, 
                            ,   2
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (UPCN, Package (0x04)
                        {
                            0x00, 
                            0x00, 
                            0x00, 
                            0x00
                        })
                        Name (UPC4, Package (0x04)
                        {
                            0xFF, 
                            0x09, 
                            0x00, 
                            0x00
                        })
                        Name (UPC3, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            0x00, 
                            0x00
                        })
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                        Name (UPC5, Package (0x04)
                        {
                            0xFF, 
                            0x00, 
                            0x00, 
                            0x00
                        })
                        Name (PLDN, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x99, 0x11, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00   // ........
                            }
                        })
                        Name (PLDI, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                            }
                        })
                        Name (PLD1, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x69, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        Name (PLD3, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x61, 0x1C, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00   // a.......
                            }
                        })
                        Name (PLD4, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x65, 0x1D, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00   // e.......
                            }
                        })
                        Name (PLD5, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x69, 0x0C, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        Device (HS01)
                        {
                            Name (_ADR, 0x01)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPCN) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPCN */
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPCN) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPCN */
                            }
                        }

                        Device (HS03)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPCP) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPCP */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLDI) /* \_SB_.PCI0.GP17.XHC0.RHUB.PLDI */
                            }

                            Device (HS01)
                            {
                                Name (_ADR, 0x01)  // _ADR: Address
                                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                {
                                    Return (UPCN) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPCN */
                                }

                                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                {
                                    Return (PLDN) /* \_SB_.PCI0.GP17.XHC0.RHUB.PLDN */
                                }
                            }

                            Device (HS02)
                            {
                                Name (_ADR, 0x02)  // _ADR: Address
                                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                {
                                    Return (UPCN) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPCN */
                                }

                                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                {
                                    Return (PLDN) /* \_SB_.PCI0.GP17.XHC0.RHUB.PLDN */
                                }
                            }

                            Device (HS03)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                {
                                    Return (UPCN) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPCN */
                                }

                                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                {
                                    Return (PLDN) /* \_SB_.PCI0.GP17.XHC0.RHUB.PLDN */
                                }
                            }
                        }

                        Device (HS04)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPCN) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPCN */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLDN) /* \_SB_.PCI0.GP17.XHC0.RHUB.PLDN */
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPCN) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPCN */
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPCN) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPCN */
                            }
                        }
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (UPCN, Package (0x04)
                        {
                            0x00, 
                            0x00, 
                            0x00, 
                            0x00
                        })
                        Name (UPC4, Package (0x04)
                        {
                            0xFF, 
                            0x09, 
                            0x00, 
                            0x00
                        })
                        Name (UPC3, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            0x00, 
                            0x00
                        })
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                        Name (UPC5, Package (0x04)
                        {
                            0xFF, 
                            0x00, 
                            0x00, 
                            0x00
                        })
                        Name (PLDN, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x99, 0x11, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00   // ........
                            }
                        })
                        Name (PLD2, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x61, 0x1C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00   // a.......
                            }
                        })
                        Name (PLD6, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x61, 0x1E, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00   // a.......
                            }
                        })
                        Name (PLD7, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x61, 0x1C, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00   // a.......
                            }
                        })
                        Name (PLD8, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0xE0, 0x1E, 0x08, 0x05, 0x00, 0x00, 0x00, 0x00   // ........
                            }
                        })
                        Name (PLDC, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x24, 0x01, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00,  // $.......
                                /* 0010 */  0x88, 0xFF, 0xB8, 0xFF                           // ....
                            }
                        })
                        Device (HS01)
                        {
                            Name (_ADR, 0x01)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC5) /* \_SB_.PCI0.GP17.XHC1.RHUB.UPC5 */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD2) /* \_SB_.PCI0.GP17.XHC1.RHUB.PLD2 */
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC5) /* \_SB_.PCI0.GP17.XHC1.RHUB.UPC5 */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD6) /* \_SB_.PCI0.GP17.XHC1.RHUB.PLD6 */
                            }
                        }

                        Device (HS03)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPCN) /* \_SB_.PCI0.GP17.XHC1.RHUB.UPCN */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLDN) /* \_SB_.PCI0.GP17.XHC1.RHUB.PLDN */
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC3) /* \_SB_.PCI0.GP17.XHC1.RHUB.UPC3 */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD2) /* \_SB_.PCI0.GP17.XHC1.RHUB.PLD2 */
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC3) /* \_SB_.PCI0.GP17.XHC1.RHUB.UPC3 */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD6) /* \_SB_.PCI0.GP17.XHC1.RHUB.PLD6 */
                            }
                        }
                    }
                }

                Scope (XHC0.RHUB.HS03.HS01)
                {
                    PowerResource (BTRT, 0x05, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x01)
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                        }

                        Mutex (CNMT, 0x00)
                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            Local0 = Acquire (CNMT, 0x03E8)
                            If ((Local0 == Zero))
                            {
                                If (H8DR)
                                {
                                    ^^^^^^^LPC0.EC0.DCBD = Zero
                                }
                                Else
                                {
                                    MBEC (0x3A, 0xEF, 0x00)
                                }

                                Sleep (0xC8)
                                If (H8DR)
                                {
                                    ^^^^^^^LPC0.EC0.DCBD = One
                                }
                                Else
                                {
                                    MBEC (0x3A, 0xFF, 0x10)
                                }

                                Sleep (0xC8)
                            }

                            Release (CNMT)
                        }
                    }

                    Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                    {
                        Return (Package (0x01)
                        {
                            BTRT
                        })
                    }
                }

                Device (MP2C)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x1E
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x1F
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x1C
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x1D
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKH, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKF, 
                                0x00
                            }
                        })
                    }
                }

                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP19)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xFF                                             // .
                                })
                            }
                            Case (0x05)
                            {
                                Return (Zero)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x1A
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x1B
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x18
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x19
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKB, 
                                0x00
                            }
                        })
                    }
                }

                Device (NHI0)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (NHI1)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (XHC2)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (UPCN, Package (0x04)
                        {
                            0x00, 
                            0x00, 
                            0x00, 
                            0x00
                        })
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                        Name (PLDC, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x24, 0x01, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00,  // $.......
                                /* 0010 */  0xDD, 0x00, 0x95, 0x00                           // ....
                            }
                        })
                        Name (PLDN, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x99, 0x11, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00   // ........
                            }
                        })
                        Device (HSCM)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPCN) /* \_SB_.PCI0.GP19.XHC2.RHUB.UPCN */
                            }

                            Device (PCAM)
                            {
                                Name (_ADR, 0x01)  // _ADR: Address
                                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                {
                                    Return (PLDC) /* \_SB_.PCI0.GP19.XHC2.RHUB.PLDC */
                                }

                                Method (_STA, 0, NotSerialized)  // _STA: Status
                                {
                                    Return (0x0F)
                                }
                            }

                            Device (CMIR)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                {
                                    Return (PLDC) /* \_SB_.PCI0.GP19.XHC2.RHUB.PLDC */
                                }

                                Method (_STA, 0, NotSerialized)  // _STA: Status
                                {
                                    Return (0x0F)
                                }
                            }
                        }
                    }
                }

                Device (XHC3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (UPCN, Package (0x04)
                        {
                            0x00, 
                            0x00, 
                            0x00, 
                            0x00
                        })
                        Name (UPC3, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            0x00, 
                            0x00
                        })
                        Name (UPC4, Package (0x04)
                        {
                            0xFF, 
                            0x09, 
                            0x00, 
                            0x00
                        })
                        Name (UPC5, Package (0x04)
                        {
                            0xFF, 
                            0x00, 
                            0x00, 
                            0x00
                        })
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                        Name (PLD1, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x69, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        Device (PRT1)
                        {
                            Name (_ADR, 0x01)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC4) /* \_SB_.PCI0.GP19.XHC3.RHUB.UPC4 */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP19.XHC3.RHUB.PLD1 */
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC4) /* \_SB_.PCI0.GP19.XHC3.RHUB.UPC4 */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP19.XHC3.RHUB.PLD1 */
                            }
                        }
                    }
                }

                Device (XHC4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (UPCN, Package (0x04)
                        {
                            0x00, 
                            0x00, 
                            0x00, 
                            0x00
                        })
                        Name (UPC3, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            0x00, 
                            0x00
                        })
                        Name (UPC4, Package (0x04)
                        {
                            0xFF, 
                            0x09, 
                            0x00, 
                            0x00
                        })
                        Name (UPC5, Package (0x04)
                        {
                            0xFF, 
                            0x00, 
                            0x00, 
                            0x00
                        })
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                        Name (PLD5, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x69, 0x0C, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        Device (PRT1)
                        {
                            Name (_ADR, 0x01)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC4) /* \_SB_.PCI0.GP19.XHC4.RHUB.UPC4 */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD5) /* \_SB_.PCI0.GP19.XHC4.RHUB.PLD5 */
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC4) /* \_SB_.PCI0.GP19.XHC4.RHUB.UPC4 */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD5) /* \_SB_.PCI0.GP19.XHC4.RHUB.PLD5 */
                            }
                        }
                    }
                }
            }

            Scope (\_SB)
            {
                Device (WMIW)
                {
                    Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                    Name (_UID, "WWMI")  // _UID: Unique ID
                    Name (_WDG, Buffer (0x28)
                    {
                        /* 0000 */  0x17, 0x82, 0x35, 0x11, 0xCF, 0x21, 0xFD, 0x4B,  // ..5..!.K
                        /* 0008 */  0xA8, 0xDC, 0xAB, 0xEB, 0x94, 0x80, 0x9A, 0x6E,  // .......n
                        /* 0010 */  0x42, 0x43, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // BC..!...
                        /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                        /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x46, 0x45, 0x01, 0x00   // ..).FE..
                    })
                    Method (WMBC, 3, NotSerialized)
                    {
                        ^^PCI0.GPP7.L850._RST ()
                        Return (0x00)
                    }

                    Name (WQFE, Buffer (0x02C8)
                    {
                        /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                        /* 0008 */  0xB8, 0x02, 0x00, 0x00, 0x20, 0x06, 0x00, 0x00,  // .... ...
                        /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                        /* 0018 */  0x18, 0xDB, 0x82, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                        /* 0020 */  0x20, 0xC2, 0x02, 0x89, 0xC0, 0x61, 0x68, 0x24,  //  ....ah$
                        /* 0028 */  0xD4, 0x01, 0x0C, 0x46, 0x03, 0x88, 0xE4, 0x40,  // ...F...@
                        /* 0030 */  0xC8, 0x05, 0x13, 0x13, 0x20, 0x02, 0x42, 0x5E,  // .... .B^
                        /* 0038 */  0x05, 0xD8, 0x14, 0x60, 0x12, 0x44, 0xFD, 0xFB,  // ...`.D..
                        /* 0040 */  0x43, 0x94, 0x04, 0x87, 0x12, 0x02, 0x21, 0x89,  // C.....!.
                        /* 0048 */  0x02, 0xCC, 0x0B, 0xD0, 0x2D, 0xC0, 0xB0, 0x00,  // ....-...
                        /* 0050 */  0xDB, 0x02, 0x4C, 0x0B, 0x70, 0x0C, 0x49, 0xA5,  // ..L.p.I.
                        /* 0058 */  0x81, 0x53, 0x02, 0x4B, 0x81, 0x90, 0x50, 0x01,  // .S.K..P.
                        /* 0060 */  0xCA, 0x05, 0xF8, 0x16, 0xA0, 0x1D, 0x51, 0x92,  // ......Q.
                        /* 0068 */  0x05, 0x58, 0x86, 0x11, 0x81, 0x47, 0x11, 0xD9,  // .X...G..
                        /* 0070 */  0x68, 0x1C, 0x1A, 0x3B, 0x0C, 0xCB, 0x04, 0xD3,  // h..;....
                        /* 0078 */  0x20, 0x0E, 0xA3, 0x6C, 0x64, 0x11, 0x78, 0x42,  //  ..ld.xB
                        /* 0080 */  0x9D, 0x0A, 0x90, 0x2B, 0x40, 0x98, 0x00, 0xF1,  // ...+@...
                        /* 0088 */  0xA8, 0xC2, 0x68, 0x0E, 0x8A, 0xC8, 0x87, 0x46,  // ..h....F
                        /* 0090 */  0x89, 0x19, 0x13, 0x81, 0xED, 0x1C, 0x5B, 0xA3,  // ......[.
                        /* 0098 */  0x38, 0x8D, 0xC2, 0x05, 0x48, 0xC7, 0xD0, 0x08,  // 8...H...
                        /* 00A0 */  0x8E, 0x2B, 0x41, 0x87, 0x33, 0xD0, 0x14, 0xA2,  // .+A.3...
                        /* 00A8 */  0x45, 0x28, 0x48, 0x80, 0x75, 0x0C, 0x61, 0x1E,  // E(H.u.a.
                        /* 00B0 */  0x52, 0x94, 0x80, 0xF1, 0x62, 0x84, 0x88, 0x7A,  // R...b..z
                        /* 00B8 */  0x54, 0x06, 0x0C, 0x14, 0x24, 0xD0, 0x59, 0xC5,  // T...$.Y.
                        /* 00C0 */  0x88, 0x52, 0x34, 0x98, 0x20, 0x03, 0x7B, 0x02,  // .R4. .{.
                        /* 00C8 */  0xC6, 0x88, 0x17, 0xA2, 0xD5, 0x51, 0x11, 0x9C,  // .....Q..
                        /* 00D0 */  0x9E, 0x07, 0x43, 0x26, 0x71, 0x3C, 0x18, 0x19,  // ..C&q<..
                        /* 00D8 */  0x10, 0xC2, 0x3A, 0x8D, 0x03, 0x35, 0x81, 0xDD,  // ..:..5..
                        /* 00E0 */  0x0B, 0x30, 0x86, 0x20, 0x67, 0x02, 0xAC, 0x09,  // .0. g...
                        /* 00E8 */  0x10, 0x27, 0x40, 0x19, 0x8A, 0xBC, 0x09, 0xB0,  // .'@.....
                        /* 00F0 */  0x05, 0x42, 0x86, 0x54, 0x23, 0x8A, 0x06, 0x58,  // .B.T#..X
                        /* 00F8 */  0x21, 0x88, 0xC6, 0x16, 0xA5, 0x41, 0x40, 0x81,  // !....A@.
                        /* 0100 */  0xC4, 0x8A, 0x62, 0xA8, 0x16, 0x21, 0x34, 0xCC,  // ..b..!4.
                        /* 0108 */  0x78, 0xA1, 0x0E, 0xD4, 0x48, 0xB5, 0x21, 0xC9,  // x...H.!.
                        /* 0110 */  0xFE, 0x20, 0x48, 0xB8, 0x63, 0x81, 0x24, 0x80,  // . H.c.$.
                        /* 0118 */  0x28, 0xD2, 0x68, 0x50, 0x47, 0x81, 0x04, 0x8F,  // (.hPG...
                        /* 0120 */  0x06, 0x3E, 0x16, 0x9C, 0xD4, 0xA1, 0x9D, 0xDC,  // .>......
                        /* 0128 */  0x89, 0x05, 0x39, 0xDD, 0xE3, 0xAB, 0xF3, 0x4C,  // ..9....L
                        /* 0130 */  0x40, 0x46, 0xCF, 0xB0, 0x12, 0xFC, 0x26, 0xF8,  // @F....&.
                        /* 0138 */  0xFF, 0x7F, 0x48, 0xC0, 0xBB, 0x06, 0xD4, 0xED,  // ..H.....
                        /* 0140 */  0xE0, 0xD9, 0x80, 0x0D, 0x33, 0x1C, 0x66, 0x88,  // ....3.f.
                        /* 0148 */  0x9E, 0x72, 0xB8, 0x13, 0x38, 0x44, 0x06, 0xE8,  // .r..8D..
                        /* 0150 */  0x31, 0x3D, 0x16, 0x60, 0xE7, 0x76, 0x32, 0xCF,  // 1=.`.v2.
                        /* 0158 */  0x04, 0xA5, 0x0A, 0x30, 0x7B, 0x3E, 0xD0, 0xC0,  // ...0{>..
                        /* 0160 */  0x12, 0x1C, 0x8F, 0x0F, 0x03, 0x1E, 0x36, 0x3F,  // ......6?
                        /* 0168 */  0x15, 0x78, 0x10, 0x7C, 0x64, 0x86, 0xF6, 0x18,  // .x.|d...
                        /* 0170 */  0x4F, 0xEB, 0x9D, 0xC0, 0x47, 0x85, 0xC3, 0x62,  // O...G..b
                        /* 0178 */  0x62, 0x21, 0xA4, 0x00, 0x42, 0xE3, 0x01, 0xBF,  // b!..B...
                        /* 0180 */  0xE2, 0x43, 0x81, 0x10, 0x5E, 0x1C, 0x3C, 0x5F,  // .C..^.<_
                        /* 0188 */  0x13, 0x14, 0x09, 0x8C, 0x1E, 0x90, 0xFD, 0x0A,  // ........
                        /* 0190 */  0x40, 0x08, 0xFE, 0x7A, 0x70, 0x44, 0x0F, 0x10,  // @..zpD..
                        /* 0198 */  0x11, 0x1E, 0x23, 0xAC, 0x79, 0x4E, 0xBA, 0x4F,  // ..#.yN.O
                        /* 01A0 */  0xF4, 0x0E, 0x4D, 0x94, 0xC2, 0x0B, 0xE7, 0x85,  // ..M.....
                        /* 01A8 */  0xC2, 0x27, 0x06, 0x8F, 0x3A, 0xD8, 0x7B, 0x85,  // .'..:.{.
                        /* 01B0 */  0x87, 0x80, 0x3B, 0x46, 0x78, 0x08, 0xFC, 0x1C,  // ..;Fx...
                        /* 01B8 */  0x70, 0x06, 0x07, 0x74, 0x3A, 0x87, 0x70, 0x40,  // p..t:.p@
                        /* 01C0 */  0x51, 0xCE, 0xE2, 0x88, 0x7C, 0xC0, 0x30, 0xC2,  // Q...|.0.
                        /* 01C8 */  0x79, 0x3E, 0x57, 0x3C, 0x67, 0x78, 0x1C, 0x67,  // y>W<gx.g
                        /* 01D0 */  0xF1, 0xC8, 0x70, 0x52, 0xAF, 0x03, 0x3E, 0x10,  // ..pR..>.
                        /* 01D8 */  0x68, 0xA5, 0x3A, 0x8B, 0x58, 0x36, 0x88, 0x6C,  // h.:.X6.l
                        /* 01E0 */  0xAC, 0xD5, 0x04, 0x92, 0x05, 0x66, 0x2A, 0x0D,  // .....f*.
                        /* 01E8 */  0x09, 0x0C, 0x50, 0xCF, 0x01, 0x26, 0xB0, 0x48,  // ..P..&.H
                        /* 01F0 */  0x60, 0x1D, 0x4F, 0xB8, 0x3C, 0x0A, 0x89, 0x83,  // `.O.<...
                        /* 01F8 */  0xD0, 0xA8, 0x0C, 0x67, 0x39, 0x70, 0x14, 0xC4,  // ...g9p..
                        /* 0200 */  0xA7, 0x00, 0x47, 0x85, 0x90, 0x93, 0x03, 0x01,  // ..G.....
                        /* 0208 */  0xFA, 0xFF, 0x7F, 0x92, 0x78, 0xCF, 0x30, 0xC4,  // ....x.0.
                        /* 0210 */  0xB3, 0x83, 0x09, 0x1C, 0x0C, 0x42, 0x87, 0x08,  // .....B..
                        /* 0218 */  0x1F, 0x1B, 0xF0, 0x37, 0x04, 0x9F, 0x07, 0xB8,  // ...7....
                        /* 0220 */  0xC0, 0x73, 0x08, 0x68, 0x6E, 0x1D, 0xE7, 0xFA,  // .s.hn...
                        /* 0228 */  0xD6, 0xC1, 0x16, 0x7A, 0x28, 0x7C, 0x58, 0xE4,  // ...z(|X.
                        /* 0230 */  0x3C, 0x41, 0xC7, 0xC1, 0xC7, 0x13, 0x2F, 0x01,  // <A..../.
                        /* 0238 */  0x3F, 0x26, 0xC0, 0xBF, 0x82, 0x78, 0x12, 0xA7,  // ?&...x..
                        /* 0240 */  0xF0, 0x02, 0xF2, 0xF6, 0x91, 0xC0, 0x63, 0xC2,  // ......c.
                        /* 0248 */  0x1D, 0x13, 0xE0, 0x01, 0xF9, 0x56, 0xE0, 0xD9,  // .....V..
                        /* 0250 */  0x3F, 0x19, 0xB0, 0x39, 0x84, 0x08, 0x13, 0xCD,  // ?..9....
                        /* 0258 */  0xF0, 0x98, 0xC8, 0x10, 0xFA, 0xED, 0xF8, 0x44,  // .......D
                        /* 0260 */  0xE0, 0x71, 0xF1, 0x71, 0xFA, 0x4C, 0xC3, 0xB0,  // .q.q.L..
                        /* 0268 */  0x5F, 0x57, 0x30, 0x83, 0x7A, 0xA3, 0xF0, 0x31,  // _W0.z..1
                        /* 0270 */  0xC0, 0xB0, 0x1E, 0x39, 0x87, 0x35, 0x5A, 0xD8,  // ...9.5Z.
                        /* 0278 */  0x03, 0x7E, 0x9A, 0xF0, 0x4D, 0xC4, 0x33, 0xF3,  // .~..M.3.
                        /* 0280 */  0x1D, 0xC6, 0x67, 0x10, 0xB0, 0x00, 0xE2, 0xCF,  // ..g.....
                        /* 0288 */  0x0B, 0xEF, 0x00, 0x9E, 0x80, 0x01, 0xD9, 0xC4,  // ........
                        /* 0290 */  0x7D, 0x1A, 0x00, 0xC7, 0xE0, 0x22, 0x9C, 0xE9,  // }...."..
                        /* 0298 */  0x3B, 0xC5, 0x41, 0x3C, 0x3E, 0xE0, 0x09, 0x2A,  // ;.A<>..*
                        /* 02A0 */  0xB4, 0xE9, 0x53, 0xA3, 0x51, 0xAB, 0x06, 0x65,  // ..S.Q..e
                        /* 02A8 */  0x6A, 0x94, 0x69, 0x50, 0xAB, 0x4F, 0xA5, 0xC6,  // j.iP.O..
                        /* 02B0 */  0x8C, 0x1D, 0x15, 0xFC, 0xFF, 0x97, 0xF7, 0x6C,  // .......l
                        /* 02B8 */  0xD0, 0x60, 0x1D, 0x0E, 0x84, 0x4A, 0xA7, 0x92,  // .`...J..
                        /* 02C0 */  0x11, 0x10, 0x05, 0x01, 0x11, 0x90, 0xFF, 0xFF   // ........
                    })
                }
            }

            Device (SMB)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (SBRV, PCI_Config, 0x08, 0x0100)
                Field (SBRV, AnyAcc, NoLock, Preserve)
                {
                    RVID,   8, 
                    Offset (0x5A), 
                    I1F,    1, 
                    I12F,   1, 
                    Offset (0x7A), 
                        ,   2, 
                    G31O,   1, 
                    Offset (0xD9), 
                        ,   6, 
                    ACIR,   1
                }

                OperationRegion (PMIO, SystemMemory, 0xFED80300, 0x0100)
                Field (PMIO, ByteAcc, NoLock, Preserve)
                {
                        ,   6, 
                    HPEN,   1, 
                    Offset (0x60), 
                    P1EB,   16, 
                    Offset (0xF0), 
                        ,   3, 
                    RSTU,   1
                }

                OperationRegion (ERMG, SystemMemory, 0xFED81500, 0x03FF)
                Field (ERMG, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x0B), 
                        ,   4, 
                    P2IS,   1, 
                    P2WS,   1, 
                    Offset (0x18), 
                    Offset (0x1A), 
                    GE10,   1, 
                    Offset (0x1C), 
                    Offset (0x1E), 
                    GE11,   1, 
                    Offset (0x40), 
                    Offset (0x42), 
                    GE12,   1, 
                    Offset (0x46), 
                    GS17,   1, 
                        ,   5, 
                    GV17,   1, 
                    GE17,   1, 
                    Offset (0x108), 
                    Offset (0x10A), 
                    P33I,   1, 
                    Offset (0x10C), 
                    Offset (0x10E), 
                    P37I,   1, 
                    Offset (0x118), 
                    Offset (0x11A), 
                    P3BI,   1, 
                    Offset (0x11C), 
                    Offset (0x11E), 
                    P40I,   1, 
                    Offset (0x128), 
                        ,   22, 
                    PLEN,   1, 
                    Offset (0x130), 
                    Offset (0x132), 
                    BOID,   1
                }

                OperationRegion (ERMM, SystemMemory, 0xFED80000, 0x1000)
                Field (ERMM, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x288), 
                        ,   1, 
                    CLPS,   1, 
                    Offset (0x2B0), 
                        ,   2, 
                    SLPS,   2, 
                    Offset (0x3BB), 
                        ,   6, 
                    PWDE,   1
                }

                OperationRegion (P1E0, SystemIO, P1EB, 0x04)
                Field (P1E0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                        ,   6, 
                    PEWS,   1, 
                    WSTA,   1, 
                    Offset (0x03), 
                        ,   6, 
                    PEWD,   1
                }

                Method (TRMD, 0, NotSerialized)
                {
                }

                Method (HTCD, 0, NotSerialized)
                {
                }

                OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
                Field (ABIO, DWordAcc, NoLock, Preserve)
                {
                    INAB,   32, 
                    DAAB,   32
                }

                Method (RDAB, 1, NotSerialized)
                {
                    INAB = Arg0
                    Return (DAAB) /* \_SB_.PCI0.SMB_.DAAB */
                }

                Method (WTAB, 2, NotSerialized)
                {
                    INAB = Arg0
                    DAAB = Arg1
                }

                Method (RWAB, 3, NotSerialized)
                {
                    Local0 = (RDAB (Arg0) & Arg1)
                    Local1 = (Local0 | Arg2)
                    WTAB (Arg0, Local1)
                }

                Method (CABR, 3, NotSerialized)
                {
                    Local0 = (Arg0 << 0x05)
                    Local1 = (Local0 + Arg1)
                    Local2 = (Local1 << 0x18)
                    Local3 = (Local2 + Arg2)
                    Return (Local3)
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
                Field (PIRQ, ByteAcc, NoLock, Preserve)
                {
                    PIID,   8, 
                    PIDA,   8
                }

                IndexField (PIID, PIDA, ByteAcc, NoLock, Preserve)
                {
                    PIRA,   8, 
                    PIRB,   8, 
                    PIRC,   8, 
                    PIRD,   8, 
                    PIRE,   8, 
                    PIRF,   8, 
                    PIRG,   8, 
                    PIRH,   8, 
                    Offset (0x0C), 
                    SIRA,   8, 
                    SIRB,   8, 
                    SIRC,   8, 
                    SIRD,   8, 
                    PIRS,   8, 
                    Offset (0x13), 
                    HDAD,   8, 
                    Offset (0x17), 
                    SDCL,   8, 
                    Offset (0x1A), 
                    SDIO,   8, 
                    Offset (0x30), 
                    USB1,   8, 
                    Offset (0x34), 
                    USB3,   8, 
                    Offset (0x41), 
                    SATA,   8, 
                    Offset (0x62), 
                    GIOC,   8, 
                    Offset (0x70), 
                    I2C0,   8, 
                    I2C1,   8, 
                    I2C2,   8, 
                    I2C3,   8, 
                    URT0,   8, 
                    URT1,   8
                }

                Name (IPRS, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,5,6,10,11}
                })
                Name (UPRS, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Exclusive, )
                        {15}
                })
                OperationRegion (KBDD, SystemIO, 0x64, 0x01)
                Field (KBDD, ByteAcc, NoLock, Preserve)
                {
                    PD64,   8
                }

                Method (DSPI, 0, NotSerialized)
                {
                    INTA (0x1F)
                    INTB (0x1F)
                    INTC (0x1F)
                    INTD (0x1F)
                    Local1 = PD64 /* \_SB_.PCI0.LPC0.PD64 */
                    PIRE = 0x1F
                    PIRF = 0x1F
                    PIRG = 0x1F
                    PIRH = 0x1F
                }

                Method (INTA, 1, NotSerialized)
                {
                    PIRA = Arg0
                    If (GPIC)
                    {
                        HDAD = Arg0
                        SDCL = Arg0
                    }
                }

                Method (INTB, 1, NotSerialized)
                {
                    PIRB = Arg0
                }

                Method (INTC, 1, NotSerialized)
                {
                    PIRC = Arg0
                    If (GPIC)
                    {
                        USB1 = Arg0
                        USB3 = Arg0
                    }
                }

                Method (INTD, 1, NotSerialized)
                {
                    PIRD = Arg0
                    If (GPIC)
                    {
                        SATA = Arg0
                    }
                }

                Device (LNKA)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRA)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTA (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRA) /* \_SB_.PCI0.LPC0.PIRA */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTA (Local0)
                    }
                }

                Device (LNKB)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRB)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTB (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRB) /* \_SB_.PCI0.LPC0.PIRB */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTB (Local0)
                    }
                }

                Device (LNKC)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRC)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTC (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRC) /* \_SB_.PCI0.LPC0.PIRC */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTC (Local0)
                    }
                }

                Device (LNKD)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRD)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTD (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRD) /* \_SB_.PCI0.LPC0.PIRD */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTD (Local0)
                    }
                }

                Device (LNKE)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRE)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRE = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRE) /* \_SB_.PCI0.LPC0.PIRE */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRE = Local0
                    }
                }

                Device (LNKF)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRF)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRF = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRF) /* \_SB_.PCI0.LPC0.PIRF */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRF = Local0
                    }
                }

                Device (LNKG)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRG)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRG = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRG) /* \_SB_.PCI0.LPC0.PIRG */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRG = Local0
                    }
                }

                Device (LNKH)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x08)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRH)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRH = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRH) /* \_SB_.PCI0.LPC0.PIRH */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRH = Local0
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((^^^SMB.HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.RTC_.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TIME)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((^^^SMB.HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.TIME.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.TIME.BUF1 */
                    }
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0xD0,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                    })
                }

                OperationRegion (LPCS, PCI_Config, 0xA0, 0x04)
                Field (LPCS, DWordAcc, NoLock, Preserve)
                {
                    SPBA,   32
                }

                Device (MEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (MSRC, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x02000000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y07)
                        Memory32Fixed (ReadWrite,
                            0xFEC10000,         // Address Base
                            0x00000020,         // Address Length
                            _Y08)
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED61000,         // Address Base
                            0x00000400,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED80000,         // Address Base
                            0x00001000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y07._BAS, BARX)  // _BAS: Base Address
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y07._LEN, GALN)  // _LEN: Length
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y08._BAS, MB01)  // _BAS: Base Address
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y08._LEN, ML01)  // _LEN: Length
                        Local0 = SPBA /* \_SB_.PCI0.LPC0.SPBA */
                        MB01 = (Local0 & 0xFFFFFFE0)
                        Local0 = NBBA /* \_SB_.PCI0.NBBA */
                        If (Local0)
                        {
                            GALN = 0x1000
                            BARX = (Local0 & 0xFFFFFFF0)
                        }

                        Return (MSRC) /* \_SB_.PCI0.LPC0.MEM_.MSRC */
                    }
                }

                Device (KBD)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        If (WIN8)
                        {
                            Return (0x7100AE30)
                        }

                        Return (0x0303D041)
                    }

                    Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveLow, Exclusive, )
                            {1}
                    })
                }

                Device (MOU)
                {
                    Name (_HID, "PNP0F13" /* PS/2 Mouse */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQ (Edge, ActiveLow, Exclusive, )
                            {12}
                    })
                    Name (DIDL, Package (0x05)
                    {
                        0x03, 
                        0x06, 
                        0x02, 
                        0x01, 
                        0x01
                    })
                    Name (PNPL, Package (0x05)
                    {
                        "LEN030B", 
                        "LEN030C", 
                        "LEN0305", 
                        "LEN0305", 
                        "LEN0305"
                    })
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        MHID ()
                    }

                    Method (MHID, 0, NotSerialized)
                    {
                        Local0 = Match (DIDL, MEQ, (TPSD & 0xFF), MTR, 0x00, 0x00)
                        If ((Local0 != Ones))
                        {
                            _HID = DerefOf (PNPL [Local0])
                        }
                        Else
                        {
                            _STA = 0x00
                        }
                    }
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (_GPE, 0x0B)  // _GPE: General Purpose Events
                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((Arg0 == 0x03))
                        {
                            H8DR = Arg1
                        }

                        If (((Arg0 == 0x03) && (Arg1 == 0x01)))
                        {
                            Local0 = 0x00
                            If ((TPOS == 0x40))
                            {
                                Local0 = 0x01
                            }

                            If ((TPOS == 0x80))
                            {
                                Local0 = 0x02
                            }

                            If ((TPOS == 0x50))
                            {
                                Local0 = 0x03
                            }

                            If ((TPOS == 0x60))
                            {
                                Local0 = 0x04
                            }

                            If ((TPOS == 0x61))
                            {
                                Local0 = 0x04
                            }

                            If ((TPOS == 0x70))
                            {
                                Local0 = 0x05
                            }

                            If (H8DR){}
                            Else
                            {
                            }
                        }
                    }

                    OperationRegion (KBCS, SystemIO, 0x60, 0x05)
                    Field (KBCS, ByteAcc, NoLock, Preserve)
                    {
                        KB60,   8, 
                        Offset (0x04), 
                        KB64,   8
                    }

                    OperationRegion (SC64, SystemIO, 0x64, One)
                    Field (SC64, ByteAcc, NoLock, Preserve)
                    {
                        KOBF,   1, 
                        KIBF,   1
                    }

                    Method (ECPC, 1, Serialized)
                    {
                        OperationRegion (PCPT, SystemIO, 0x80, 0x04)
                        Field (PCPT, DWordAcc, NoLock, Preserve)
                        {
                            PC80,   32
                        }

                        Local0 = (Arg0 & 0x00FFFFFF)
                        PC80 = (Local0 | 0xEC000000)
                    }

                    Method (WIBE, 0, Serialized)
                    {
                        Local2 = 0x32
                        While (Local2)
                        {
                            If (!KIBF)
                            {
                                Return (Zero)
                            }

                            Sleep (One)
                            Local2--
                        }

                        If (KIBF)
                        {
                            ECPC (0x00F600EE)
                        }

                        Return (One)
                    }

                    Method (WOBF, 0, Serialized)
                    {
                        Local2 = 0x32
                        While (Local2)
                        {
                            If (!KOBF)
                            {
                                Return (Zero)
                            }

                            Sleep (One)
                            Local2--
                        }

                        If (KOBF)
                        {
                            ECPC (0x00F600EF)
                        }

                        Return (One)
                    }

                    Method (DLMS, 1, Serialized)
                    {
                        While (Arg0)
                        {
                            Stall (0xC8)
                            Stall (0xC8)
                            Stall (0xC8)
                            Stall (0xC8)
                            Stall (0xC8)
                            Arg0--
                        }
                    }

                    Method (DLS1, 1, Serialized)
                    {
                        While (Arg0)
                        {
                            DLMS (0x03E8)
                            Arg0--
                        }
                    }

                    Method (WKB4, 1, Serialized)
                    {
                        Local0 = (Arg0 & 0xFF)
                        ECPC ((Local0 | 0x00F76400))
                        WIBE ()
                        If (KOBF)
                        {
                            P80H = 0xEB
                            Local1 = KB60 /* \_SB_.PCI0.LPC0.EC0_.KB60 */
                            ECPC ((Local1 | 0x00E76500))
                            Return (Zero)
                        }
                        ElseIf (~KIBF){}
                        P80H = 0xEF
                        WIBE ()
                        ECPC ((Local0 | 0x00E76600))
                    }

                    Method (EMBF, 1, Serialized)
                    {
                        Local2 = Arg0
                        Local0 = One
                        While ((Local2 && (Local0 & One)))
                        {
                            Sleep (One)
                            Local1 = KB60 /* \_SB_.PCI0.LPC0.EC0_.KB60 */
                            Sleep (One)
                            Local0 = KB64 /* \_SB_.PCI0.LPC0.EC0_.KB64 */
                            Local2--
                        }
                    }

                    Mutex (UCCI, 0x00)
                    OperationRegion (ECOR, EmbeddedControl, 0x00, 0x0100)
                    Field (ECOR, ByteAcc, NoLock, Preserve)
                    {
                        HDBM,   1, 
                            ,   1, 
                            ,   1, 
                        HFNE,   1, 
                            ,   1, 
                            ,   1, 
                        HLDM,   1, 
                        Offset (0x01), 
                        BBLS,   1, 
                        BTCM,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        HBPR,   1, 
                        BTPC,   1, 
                        Offset (0x02), 
                        HDUE,   1, 
                            ,   4, 
                        SNLK,   1, 
                        Offset (0x03), 
                            ,   5, 
                        HAUM,   2, 
                        Offset (0x05), 
                        HSPA,   1, 
                        Offset (0x06), 
                        HSUN,   8, 
                        HSRP,   8, 
                        Offset (0x0C), 
                        HLCL,   8, 
                            ,   4, 
                        CALM,   1, 
                            ,   1, 
                        KBLL,   1, 
                        KBLH,   1, 
                        HFNS,   2, 
                        Offset (0x0F), 
                            ,   6, 
                        NULS,   1, 
                        Offset (0x10), 
                        HAM0,   8, 
                        HAM1,   8, 
                        HAM2,   8, 
                        HAM3,   8, 
                        HAM4,   8, 
                        HAM5,   8, 
                        HAM6,   8, 
                        HAM7,   8, 
                        HAM8,   8, 
                        HAM9,   8, 
                        HAMA,   8, 
                        HAMB,   8, 
                        HAMC,   8, 
                        HAMD,   8, 
                        HAME,   8, 
                        HAMF,   8, 
                        Offset (0x23), 
                        HANT,   8, 
                        Offset (0x26), 
                            ,   2, 
                        HANA,   2, 
                        Offset (0x27), 
                        Offset (0x28), 
                            ,   1, 
                        SKEM,   1, 
                        Offset (0x29), 
                        Offset (0x2A), 
                        HATR,   8, 
                        HT0H,   8, 
                        HT0L,   8, 
                        HT1H,   8, 
                        HT1L,   8, 
                        HFSP,   8, 
                        MICM,   1, 
                            ,   5, 
                        HMUT,   1, 
                        Offset (0x31), 
                            ,   2, 
                        HUWB,   1, 
                            ,   3, 
                        VPON,   1, 
                        VRST,   1, 
                        HWPM,   1, 
                        HWLB,   1, 
                        HWLO,   1, 
                        HWDK,   1, 
                        HWFN,   1, 
                        HWBT,   1, 
                        HWRI,   1, 
                        HWBU,   1, 
                        HWLU,   1, 
                        Offset (0x34), 
                            ,   3, 
                        PIBS,   1, 
                            ,   2, 
                        KBLE,   1, 
                        HPLO,   1, 
                            ,   4, 
                        FANE,   1, 
                        Offset (0x36), 
                        HWAC,   16, 
                        HB0S,   7, 
                        HB0A,   1, 
                        HB1S,   7, 
                        HB1A,   1, 
                        HCMU,   1, 
                            ,   2, 
                        OVRQ,   1, 
                        DCBD,   1, 
                        DCWL,   1, 
                        DCWW,   1, 
                        HB1I,   1, 
                            ,   1, 
                        KBLT,   1, 
                        BTPW,   1, 
                        FNKC,   1, 
                        HUBS,   1, 
                        BDPW,   1, 
                        BDDT,   1, 
                        HUBB,   1, 
                        Offset (0x46), 
                            ,   1, 
                        BTWK,   1, 
                        HPLD,   1, 
                            ,   1, 
                        HPAC,   1, 
                        BTST,   1, 
                        PSST,   1, 
                        Offset (0x47), 
                        HPBU,   1, 
                            ,   1, 
                        HBID,   1, 
                            ,   3, 
                        HBCS,   1, 
                        HPNF,   1, 
                            ,   1, 
                        GSTS,   1, 
                            ,   2, 
                        HLBU,   1, 
                        DOCD,   1, 
                        HCBL,   1, 
                        Offset (0x49), 
                        SLUL,   1, 
                            ,   1, 
                        ACAT,   1, 
                            ,   4, 
                        ELNK,   1, 
                        FPSU,   1, 
                        Offset (0x4B), 
                        Offset (0x4C), 
                        HTMH,   8, 
                        HTML,   8, 
                        HWAK,   16, 
                        HMPR,   8, 
                            ,   7, 
                        HMDN,   1, 
                        Offset (0x78), 
                        TMP0,   8, 
                        Offset (0x7F), 
                            ,   1, 
                        QCON,   1, 
                        Offset (0x80), 
                        Offset (0x81), 
                        HIID,   8, 
                        Offset (0x83), 
                        HFNI,   8, 
                        HSPD,   16, 
                        Offset (0x88), 
                        TSL0,   7, 
                        TSR0,   1, 
                        TSL1,   7, 
                        TSR1,   1, 
                        TSL2,   7, 
                        TSR2,   1, 
                        TSL3,   7, 
                        TSR3,   1, 
                        GPUT,   1, 
                        Offset (0x8D), 
                        HDAA,   3, 
                        HDAB,   3, 
                        HDAC,   2, 
                        Offset (0xB0), 
                        BSC0,   8, 
                        BEC0,   8, 
                        BSC1,   8, 
                        BEC1,   8, 
                        HDEP,   32, 
                        HDEM,   8, 
                        HDES,   8, 
                        Offset (0xC4), 
                        CQLS,   1, 
                        SMCS,   1, 
                        Offset (0xC5), 
                        Offset (0xC8), 
                        ATMX,   8, 
                        HWAT,   8, 
                        Offset (0xCB), 
                        TTCI,   8, 
                        PWMH,   8, 
                        PWML,   8, 
                        Offset (0xCF), 
                            ,   4, 
                        ESFL,   1, 
                        ESLS,   1, 
                        ESLP,   1, 
                        Offset (0xD0), 
                        Offset (0xED), 
                            ,   4, 
                        HDDD,   1, 
                        Offset (0xFF), 
                        S03F,   8
                    }

                    Method (LKBD, 0, Serialized)
                    {
                        If ((TPOS == 0x80))
                        {
                            SCMS (0x21)
                        }
                        ElseIf (H8DR)
                        {
                            If ((KBLE == 0x01))
                            {
                                ^HKEY.MHKQ (0x1012)
                            }
                        }
                        ElseIf ((RBEC (0x34) & 0x40))
                        {
                            ^HKEY.MHKQ (0x1012)
                        }
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If (H8DR)
                        {
                            HSPA = 0x00
                        }
                        Else
                        {
                            MBEC (0x05, 0xFE, 0x00)
                        }

                        ^HKEY.WGIN ()
                        If (H8DR)
                        {
                            If ((WLAC == 0x02)){}
                            ElseIf ((ELNK && (WLAC == 0x01)))
                            {
                                DCWL = 0x00
                            }
                            Else
                            {
                                DCWL = 0x01
                            }
                        }
                        Else
                        {
                            MBEC (0x3A, 0xFF, 0x20)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                    Method (LED, 2, NotSerialized)
                    {
                        Local0 = (Arg0 | Arg1)
                        If (H8DR)
                        {
                            HLCL = Local0
                        }
                        Else
                        {
                            WBEC (0x0C, Local0)
                        }
                    }

                    Name (BAON, 0x00)
                    Name (WBON, 0x00)
                    Method (BEEP, 1, NotSerialized)
                    {
                        If ((Arg0 == 0x05))
                        {
                            WBON = 0x00
                        }

                        Local2 = WBON /* \_SB_.PCI0.LPC0.EC0_.WBON */
                        If (BAON)
                        {
                            If ((Arg0 == 0x00))
                            {
                                BAON = 0x00
                                If (WBON)
                                {
                                    Local0 = 0x03
                                    Local1 = 0x08
                                }
                                Else
                                {
                                    Local0 = 0x00
                                    Local1 = 0x00
                                }
                            }
                            Else
                            {
                                Local0 = 0xFF
                                Local1 = 0xFF
                                If ((Arg0 == 0x11))
                                {
                                    WBON = 0x00
                                }

                                If ((Arg0 == 0x10))
                                {
                                    WBON = 0x01
                                }
                            }
                        }
                        Else
                        {
                            Local0 = Arg0
                            Local1 = 0xFF
                            If ((Arg0 == 0x0F))
                            {
                                Local0 = Arg0
                                Local1 = 0x08
                                BAON = 0x01
                            }

                            If ((Arg0 == 0x11))
                            {
                                Local0 = 0x00
                                Local1 = 0x00
                                WBON = 0x00
                            }

                            If ((Arg0 == 0x10))
                            {
                                Local0 = 0x03
                                Local1 = 0x08
                                WBON = 0x01
                            }
                        }

                        If ((Arg0 == 0x03))
                        {
                            WBON = 0x00
                            If (Local2)
                            {
                                Local0 = 0x07
                                If (((SPS == 0x03) || (SPS == 0x04)))
                                {
                                    Local2 = 0x00
                                    Local0 = 0xFF
                                    Local1 = 0xFF
                                }
                            }
                        }

                        If ((Arg0 == 0x07))
                        {
                            If (Local2)
                            {
                                Local2 = 0x00
                                Local0 = 0xFF
                                Local1 = 0xFF
                            }
                        }

                        If (H8DR)
                        {
                            If ((Local2 && !WBON))
                            {
                                HSRP = 0x00
                                HSUN = 0x00
                                Sleep (0x64)
                            }

                            If ((Local1 != 0xFF))
                            {
                                HSRP = Local1
                            }

                            If ((Local0 != 0xFF))
                            {
                                HSUN = Local0
                            }
                        }
                        Else
                        {
                            If ((Local2 && !WBON))
                            {
                                WBEC (0x07, 0x00)
                                WBEC (0x06, 0x00)
                                Sleep (0x64)
                            }

                            If ((Local1 != 0xFF))
                            {
                                WBEC (0x07, Local1)
                            }

                            If ((Local0 != 0xFF))
                            {
                                WBEC (0x06, Local0)
                            }
                        }

                        If ((Arg0 == 0x03)){}
                        If ((Arg0 == 0x07))
                        {
                            Sleep (0x01F4)
                        }
                    }

                    Method (EVNT, 1, NotSerialized)
                    {
                        If (H8DR)
                        {
                            If (Arg0)
                            {
                                HAM5 |= 0x04
                            }
                            Else
                            {
                                HAM5 &= 0xFB
                            }
                        }
                        ElseIf (Arg0)
                        {
                            MBEC (0x15, 0xFF, 0x04)
                        }
                        Else
                        {
                            MBEC (0x15, 0xFB, 0x00)
                        }
                    }

                    Method (CHKS, 0, NotSerialized)
                    {
                        Local0 = 0x03E8
                        While (HMPR)
                        {
                            Sleep (0x01)
                            Local0--
                            If (!Local0)
                            {
                                Return (0x8080)
                            }
                        }

                        If (HMDN)
                        {
                            Return (Zero)
                        }

                        Return (0x8081)
                    }

                    Method (LPMD, 0, NotSerialized)
                    {
                        Local0 = 0x00
                        Local1 = 0x00
                        Local2 = 0x00
                        Return (Local0)
                    }

                    Method (CLPM, 0, NotSerialized)
                    {
                    }

                    Method (ECNT, 1, Serialized)
                    {
                        Switch (ToInteger (Arg0))
                        {
                            Case (0x00)
                            {
                                If ((^HKEY.MSCB == 0x00))
                                {
                                    If (H8DR)
                                    {
                                        ESLS = 0x00
                                    }
                                    Else
                                    {
                                        Local0 = RBEC (0xCF)
                                        Local0 &= 0xFFFFFFDF
                                        WBEC (0xCF, Local0)
                                    }

                                    LED (0x0A, 0x80)
                                    LED (0x00, 0x80)
                                }

                                SCMS (0x21)
                                Return (0x00)
                            }
                            Case (0x01)
                            {
                                If ((^HKEY.MSCB == 0x00))
                                {
                                    If (H8DR)
                                    {
                                        ESLS = 0x01
                                    }
                                    Else
                                    {
                                        Local1 = RBEC (0xCF)
                                        Local1 |= 0x20
                                        WBEC (0xCF, Local1)
                                    }

                                    LED (0x00, 0xA0)
                                    LED (0x0A, 0xA0)
                                }

                                Return (0x00)
                            }
                            Case (0x02)
                            {
                                If (H8DR)
                                {
                                    ESLP = 0x00
                                }
                                Else
                                {
                                    Local0 = RBEC (0xCF)
                                    Local0 &= 0xFFFFFFBF
                                    WBEC (0xCF, Local0)
                                }

                                Sleep (0x0A)
                                Return (0x00)
                            }
                            Case (0x03)
                            {
                                If (H8DR)
                                {
                                    ESLP = 0x01
                                }
                                Else
                                {
                                    Local1 = RBEC (0xCF)
                                    Local1 |= 0x40
                                    WBEC (0xCF, Local1)
                                }

                                Return (0x00)
                            }
                            Case (0x04)
                            {
                                If (H8DR)
                                {
                                    ESLS = 0x00
                                }
                                Else
                                {
                                    Local0 = RBEC (0xCF)
                                    Local0 &= 0xFFFFFFDF
                                    WBEC (0xCF, Local0)
                                }

                                LED (0x0A, 0x80)
                                LED (0x00, 0x80)
                                SCMS (0x21)
                                Return (0x00)
                            }
                            Case (0x05)
                            {
                                If (H8DR)
                                {
                                    ESLS = 0x01
                                }
                                Else
                                {
                                    Local1 = RBEC (0xCF)
                                    Local1 |= 0x20
                                    WBEC (0xCF, Local1)
                                }

                                LED (0x00, 0xA0)
                                LED (0x0A, 0xA0)
                                Return (0x00)
                            }
                            Default
                            {
                                Return (0xFF)
                            }

                        }
                    }

                    Mutex (MCPU, 0x00)
                    Mutex (LIDQ, 0x00)
                    Method (_Q1F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x01, 0x00020000))
                        {
                            If ((PKLI & 0x0C00))
                            {
                                ^HKEY.MHKQ (0x1012)
                            }
                        }

                        SCMS (0x0E)
                        SCMS (0x20)
                    }

                    Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x01, 0x40))
                        {
                            ^HKEY.MHKQ (0x1007)
                        }
                    }

                    Method (_Q1C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x01, 0x01000000))
                        {
                            ^HKEY.MHKQ (0x1019)
                        }
                    }

                    Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x01, 0x02000000))
                        {
                            ^HKEY.MHKQ (0x101A)
                        }
                    }

                    Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.DHKC)
                        {
                            ^HKEY.MHKQ (0x1004)
                        }
                        Else
                        {
                            Notify (SLPB, 0x80) // Status Change
                        }
                    }

                    Method (_Q64, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x01, 0x10))
                        {
                            ^HKEY.MHKQ (0x1005)
                        }
                    }

                    Method (_Q62, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x03, 0x00010000))
                        {
                            ^HKEY.MHKQ (0x1311)
                        }
                    }

                    Method (_Q6B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x03, 0x4000))
                        {
                            ^HKEY.TSSS ()
                        }
                    }

                    Method (_Q65, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x03, 0x00020000))
                        {
                            ^HKEY.MHKQ (0x1312)
                        }
                    }

                    Method (_Q76, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x03, 0x00040000))
                        {
                            ^HKEY.MHKQ (0x1313)
                        }
                    }

                    Method (_Q78, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x03, 0x00400000))
                        {
                            ^HKEY.MHKQ (0x1317)
                        }
                    }

                    Method (_Q79, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x03, 0x00800000))
                        {
                            ^HKEY.MHKQ (0x1318)
                        }
                    }

                    Method (_Q7A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x03, 0x01000000))
                        {
                            ^HKEY.MHKQ (0x1319)
                        }
                    }

                    Method (_Q26, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((Acquire (UCCI, 0xA000) == 0x00))
                        {
                            If ((BS50 == 0x00))
                            {
                                BS50 = 0x01
                                Sleep (0xC8)
                            }

                            SCMS (0x12)
                            ^HKEY.DYTC (0x000FA001)
                            Sleep (0x01F4)
                            Notify (AC, 0x80) // Status Change
                            If (WXPF)
                            {
                                Acquire (MCPU, 0xFFFF)
                            }

                            If (WXPF)
                            {
                                Sleep (0x64)
                            }

                            If (WXPF)
                            {
                                Release (MCPU)
                            }

                            ^HKEY.MHKQ (0x6040)
                            Release (UCCI)
                        }
                    }

                    Method (ACIN, 0, NotSerialized)
                    {
                        If ((Acquire (UCCI, 0xA000) == 0x00))
                        {
                            SCMS (0x12)
                            Sleep (0x01F4)
                            Notify (AC, 0x80) // Status Change
                            If (WXPF)
                            {
                                Acquire (MCPU, 0xFFFF)
                            }

                            If (WXPF)
                            {
                                Sleep (0x64)
                            }

                            If (WXPF)
                            {
                                Release (MCPU)
                            }

                            ^HKEY.MHKQ (0x6040)
                            Release (UCCI)
                        }
                    }

                    Method (_Q27, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((Acquire (UCCI, 0xA000) == 0x00))
                        {
                            SCMS (0x12)
                            If ((^^^^LID._LID () == 0x00))
                            {
                                ^HKEY.DYTC (0x001FA001)
                            }

                            Sleep (0x01F4)
                            Notify (AC, 0x80) // Status Change
                            If (WXPF)
                            {
                                Acquire (MCPU, 0xFFFF)
                            }

                            If (WXPF)
                            {
                                Sleep (0x64)
                            }

                            If (WXPF)
                            {
                                Release (MCPU)
                            }

                            ^HKEY.MHKQ (0x6040)
                            Release (UCCI)
                        }
                    }

                    Method (ACOU, 0, NotSerialized)
                    {
                        If ((Acquire (UCCI, 0xA000) == 0x00))
                        {
                            SCMS (0x12)
                            Sleep (0x01F4)
                            Notify (AC, 0x80) // Status Change
                            If (WXPF)
                            {
                                Acquire (MCPU, 0xFFFF)
                            }

                            If (WXPF)
                            {
                                Sleep (0x64)
                            }

                            If (WXPF)
                            {
                                Release (MCPU)
                            }

                            ^HKEY.MHKQ (0x6040)
                            Release (UCCI)
                        }
                    }

                    OperationRegion (QWER, SystemIO, 0x72, 0x02)
                    Field (QWER, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x8D), 
                        WERT,   8, 
                        DFGH,   8
                    }

                    Method (_Q2A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((Acquire (LIDQ, 0xA000) == 0x00))
                        {
                            P80H = 0x2A
                            WERT = HPLD /* \_SB_.PCI0.LPC0.EC0_.HPLD */
                            HAM6 = HPLD /* \_SB_.PCI0.LPC0.EC0_.HPLD */
                            VCMS (0x01, ^^^^LID._LID ())
                            SCMS (0x21)
                            ^HKEY.DYTC (0x000FA001)
                            If ((ILNF == 0x00))
                            {
                                If (IOST)
                                {
                                    If (!ISOC (0x00))
                                    {
                                        IOST = 0x00
                                        ^HKEY.MHKQ (0x60D0)
                                    }
                                }

                                ^HKEY.MHKQ (0x5002)
                                If ((PLUX == 0x00))
                                {
                                    Notify (LID, 0x80) // Status Change
                                    Sleep (0x01F4)
                                }
                            }

                            Release (LIDQ)
                        }
                    }

                    Method (LIDO, 0, NotSerialized)
                    {
                        If ((Acquire (LIDQ, 0xA000) == 0x00))
                        {
                            P80H = 0x2A
                            WERT = HPLD /* \_SB_.PCI0.LPC0.EC0_.HPLD */
                            HAM6 = HPLD /* \_SB_.PCI0.LPC0.EC0_.HPLD */
                            VCMS (0x01, ^^^^LID._LID ())
                            If ((ILNF == 0x00))
                            {
                                If (IOST)
                                {
                                    If (!ISOC (0x00))
                                    {
                                        IOST = 0x00
                                        ^HKEY.MHKQ (0x60D0)
                                    }
                                }

                                ^HKEY.MHKQ (0x5002)
                                If ((PLUX == 0x00))
                                {
                                    Notify (LID, 0x80) // Status Change
                                }
                            }

                            Release (LIDQ)
                        }
                    }

                    Method (_Q2B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((Acquire (LIDQ, 0xA000) == 0x00))
                        {
                            P80H = 0x2B
                            WERT = 0x00
                            DFGH = 0x00
                            HAM6 = 0x00
                            SCMS (0x0D)
                            VCMS (0x01, ^^^^LID._LID ())
                            If ((^AC._PSR () == 0x00))
                            {
                                ^HKEY.DYTC (0x001FA001)
                            }

                            If ((ILNF == 0x00))
                            {
                                If ((IOEN && !IOST))
                                {
                                    If (!ISOC (0x01))
                                    {
                                        IOST = 0x01
                                        ^HKEY.MHKQ (0x60D0)
                                    }
                                }

                                ^HKEY.MHKQ (0x5001)
                                If ((PLUX == 0x00))
                                {
                                    Notify (LID, 0x80) // Status Change
                                }
                            }

                            Release (LIDQ)
                        }
                    }

                    Method (LIDC, 0, NotSerialized)
                    {
                        P80H = 0x2B
                        WERT = 0x00
                        DFGH = 0x00
                        HAM6 = 0x00
                        SCMS (0x0D)
                        VCMS (0x01, ^^^^LID._LID ())
                        If ((ILNF == 0x00))
                        {
                            If ((IOEN && !IOST))
                            {
                                If (!ISOC (0x01))
                                {
                                    IOST = 0x01
                                    ^HKEY.MHKQ (0x60D0)
                                }
                            }

                            ^HKEY.MHKQ (0x5001)
                            If ((PLUX == 0x00))
                            {
                                Notify (LID, 0x80) // Status Change
                            }
                        }
                    }

                    Method (_Q3D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                    }

                    Method (_Q48, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                    }

                    Method (_Q49, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                    }

                    Method (_Q7F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Fatal (0x01, 0x80010000, 0x2EEB)
                    }

                    Method (_Q46, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^HKEY.MHKQ (0x6012)
                    }

                    Method (_Q3B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((WLAC == 0x02)){}
                        ElseIf ((ELNK && (WLAC == 0x01)))
                        {
                            DCWL = 0x00
                        }
                        Else
                        {
                            DCWL = 0x01
                        }
                    }

                    Method (_Q2F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        BFCC ()
                    }

                    Method (_Q71, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^HKEY.MHKQ (0x1316)
                    }

                    Name (FDLS, 0x00)
                    Method (_Q5A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x5A
                        FDLS = 0x01
                        ^HKEY.DYTC (0x001FA001)
                    }

                    Method (_Q5B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x5A
                        FDLS = 0x00
                        ^HKEY.DYTC (0x000FA001)
                    }

                    Method (_Q5C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x5C
                        ^HKEY.DYTC (0x001F4001)
                    }

                    Method (_Q5D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x5D
                        ^HKEY.DYTC (0x000F4001)
                    }

                    Method (_Q3C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((CQLS == 0x01))
                        {
                            ^HKEY.DYTC (0x001F1001)
                        }
                        ElseIf ((CQLS == 0x00))
                        {
                            ^HKEY.DYTC (0x000F1001)
                        }
                    }

                    Method (_Q6D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (CondRefOf (\_SB.PCI0.LPC0.EC0.HKEY.MSCB))
                        {
                            If ((^HKEY.MSCB == 0x00))
                            {
                                ^HKEY.DYTC (0x0017D001)
                            }
                        }
                        Else
                        {
                            ^HKEY.DYTC (0x0017D001)
                        }
                    }

                    Method (_Q6E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (CondRefOf (\_SB.PCI0.LPC0.EC0.HKEY.MSCB))
                        {
                            If ((^HKEY.MSCB == 0x00))
                            {
                                ^HKEY.DYTC (0x0015D001)
                            }
                        }
                        Else
                        {
                            ^HKEY.DYTC (0x0015D001)
                        }
                    }

                    Method (_Q6F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (CondRefOf (\_SB.PCI0.LPC0.EC0.HKEY.MSCB))
                        {
                            If ((^HKEY.MSCB == 0x00))
                            {
                                ^HKEY.DYTC (0x0013D001)
                            }
                        }
                        Else
                        {
                            ^HKEY.DYTC (0x0013D001)
                        }
                    }

                    Method (_Q8B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x8B
                        ^HKEY.DYTC (0x001F0001)
                    }

                    Method (_Q8C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x8C
                        ^HKEY.DYTC (0x001F0001)
                    }

                    Method (_Q5F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x85
                        APMC = 0xCC
                    }

                    Method (_Q5E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x84
                        APMC = 0xCF
                    }

                    Method (_Q22, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (HB0A)
                        {
                            Notify (BAT0, 0x80) // Status Change
                        }
                    }

                    Method (_Q4A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (BAT0, 0x81) // Information Change
                    }

                    Method (_Q4B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q24, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (BFCC, 0, NotSerialized)
                    {
                        If (^BAT0.B0ST)
                        {
                            Notify (BAT0, 0x81) // Information Change
                        }
                    }

                    Method (BATW, 1, NotSerialized)
                    {
                        If (BT2T){}
                    }

                    Name (BCLS, 0x00)
                    OperationRegion (ECOE, SystemMemory, 0xFEEC2000, 0xFF)
                    Field (ECOE, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x16), 
                        SBVO,   16, 
                        Offset (0x1A), 
                        SBAC,   16, 
                        SBRS,   16, 
                        SBRC,   16, 
                        Offset (0x22), 
                        SBFC,   16, 
                        Offset (0x26), 
                        SBAE,   16, 
                        SBAF,   16, 
                        SBBS,   16
                    }

                    Field (ECOE, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x12), 
                        SBBM,   16, 
                        Offset (0x2C), 
                        SBCC,   16, 
                        Offset (0x92), 
                        SBMD,   16
                    }

                    Field (ECOE, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x32), 
                        SBDC,   16, 
                        SBDV,   16, 
                        Offset (0x38), 
                        SBDT,   16, 
                        SBSN,   16, 
                        Offset (0x82), 
                        SBOM,   16
                    }

                    Field (ECOE, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x62), 
                        SBCH,   32
                    }

                    Field (ECOE, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x42), 
                        SBMN,   128
                    }

                    Field (ECOE, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x52), 
                        SBDN,   128
                    }

                    Mutex (BATM, 0x00)
                    Method (GBIF, 3, NotSerialized)
                    {
                        Acquire (BATM, 0xFFFF)
                        If (Arg2)
                        {
                            Local7 = SBBM /* \_SB_.PCI0.LPC0.EC0_.SBBM */
                            Local7 >>= 0x0F
                            Arg1 [0x00] = (Local7 ^ 0x01)
                            If (Local7)
                            {
                                Local1 = (SBFC * 0x0A)
                            }
                            Else
                            {
                                Local1 = SBFC /* \_SB_.PCI0.LPC0.EC0_.SBFC */
                            }

                            Arg1 [0x02] = Local1
                            If (Local7)
                            {
                                Local0 = (SBDC * 0x0A)
                            }
                            Else
                            {
                                Local0 = SBDC /* \_SB_.PCI0.LPC0.EC0_.SBDC */
                            }

                            Arg1 [0x01] = Local0
                            Divide (Local1, 0x14, Local2, Arg1 [0x05])
                            If (Local7)
                            {
                                Arg1 [0x06] = 0xC8
                            }
                            ElseIf (SBDV)
                            {
                                Divide (0x00030D40, SBDV, Local2, Arg1 [0x06])
                            }
                            Else
                            {
                                Arg1 [0x06] = 0x00
                            }

                            Arg1 [0x04] = SBDV /* \_SB_.PCI0.LPC0.EC0_.SBDV */
                            Local0 = SBSN /* \_SB_.PCI0.LPC0.EC0_.SBSN */
                            Name (SERN, Buffer (0x06)
                            {
                                "     "
                            })
                            Local2 = 0x04
                            While (Local0)
                            {
                                Divide (Local0, 0x0A, Local1, Local0)
                                SERN [Local2] = (Local1 + 0x30)
                                Local2--
                            }

                            Arg1 [0x0A] = SERN /* \_SB_.PCI0.LPC0.EC0_.GBIF.SERN */
                            Arg1 [0x09] = SBDN /* \_SB_.PCI0.LPC0.EC0_.SBDN */
                            Name (BTYP, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            BTYP = SBCH /* \_SB_.PCI0.LPC0.EC0_.SBCH */
                            Arg1 [0x0B] = BTYP /* \_SB_.PCI0.LPC0.EC0_.GBIF.BTYP */
                            Arg1 [0x0C] = SBMN /* \_SB_.PCI0.LPC0.EC0_.SBMN */
                        }
                        Else
                        {
                            Arg1 [0x01] = 0xFFFFFFFF
                            Arg1 [0x05] = 0x00
                            Arg1 [0x06] = 0x00
                            Arg1 [0x02] = 0xFFFFFFFF
                        }

                        Release (BATM)
                        Return (Arg1)
                    }

                    Method (GBIX, 3, Serialized)
                    {
                        Acquire (BATM, 0xFFFF)
                        If (Arg2)
                        {
                            Local7 = SBCC /* \_SB_.PCI0.LPC0.EC0_.SBCC */
                            Arg1 [0x08] = Local7
                            Local7 = SBBM /* \_SB_.PCI0.LPC0.EC0_.SBBM */
                            Local7 >>= 0x0F
                            Arg1 [0x01] = (Local7 ^ 0x01)
                            If (Local7)
                            {
                                Local1 = (SBFC * 0x0A)
                            }
                            Else
                            {
                                Local1 = SBFC /* \_SB_.PCI0.LPC0.EC0_.SBFC */
                            }

                            Arg1 [0x03] = Local1
                            If (Local7)
                            {
                                Local0 = (SBDC * 0x0A)
                            }
                            Else
                            {
                                Local0 = SBDC /* \_SB_.PCI0.LPC0.EC0_.SBDC */
                            }

                            Arg1 [0x02] = Local0
                            Divide (Local1, 0x14, Local2, Arg1 [0x06])
                            If (Local7)
                            {
                                Arg1 [0x07] = 0xC8
                            }
                            ElseIf (SBDV)
                            {
                                Divide (0x00030D40, SBDV, Local2, Arg1 [0x07])
                            }
                            Else
                            {
                                Arg1 [0x07] = 0x00
                            }

                            Arg1 [0x05] = SBDV /* \_SB_.PCI0.LPC0.EC0_.SBDV */
                            Local0 = SBSN /* \_SB_.PCI0.LPC0.EC0_.SBSN */
                            Name (SERN, Buffer (0x06)
                            {
                                "     "
                            })
                            Local2 = 0x04
                            While (Local0)
                            {
                                Divide (Local0, 0x0A, Local1, Local0)
                                SERN [Local2] = (Local1 + 0x30)
                                Local2--
                            }

                            Arg1 [0x11] = SERN /* \_SB_.PCI0.LPC0.EC0_.GBIX.SERN */
                            Arg1 [0x10] = SBDN /* \_SB_.PCI0.LPC0.EC0_.SBDN */
                            Name (BTYP, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            BTYP = SBCH /* \_SB_.PCI0.LPC0.EC0_.SBCH */
                            Arg1 [0x12] = BTYP /* \_SB_.PCI0.LPC0.EC0_.GBIX.BTYP */
                            Arg1 [0x13] = SBMN /* \_SB_.PCI0.LPC0.EC0_.SBMN */
                        }
                        Else
                        {
                            Arg1 [0x02] = 0xFFFFFFFF
                            Arg1 [0x06] = 0x00
                            Arg1 [0x07] = 0x00
                            Arg1 [0x03] = 0xFFFFFFFF
                        }

                        Release (BATM)
                        Return (Arg1)
                    }

                    Method (GBCL, 1, Serialized)
                    {
                        If ((BCLS == 0x00))
                        {
                            Return (0x00)
                        }

                        If ((Arg0 == 0x00))
                        {
                            Local0 = BSC0 /* \_SB_.PCI0.LPC0.EC0_.BSC0 */
                            Local1 = BEC0 /* \_SB_.PCI0.LPC0.EC0_.BEC0 */
                        }
                        Else
                        {
                            Local0 = BSC1 /* \_SB_.PCI0.LPC0.EC0_.BSC1 */
                            Local1 = BEC1 /* \_SB_.PCI0.LPC0.EC0_.BEC1 */
                        }

                        If (((Local0 > 0x00) && (Local0 <= 0x64)))
                        {
                            If (((Local1 > 0x00) && (Local1 <= 0x64)))
                            {
                                If ((Local1 > Local0))
                                {
                                    Return (0x01)
                                }
                            }
                        }

                        Return (0x00)
                    }

                    Method (GBST, 4, Serialized)
                    {
                        Acquire (BATM, 0xFFFF)
                        If ((Arg1 & 0x20))
                        {
                            Local0 = 0x02
                        }
                        ElseIf ((Arg1 & 0x40))
                        {
                            Local0 = 0x01
                        }
                        Else
                        {
                            Local0 = 0x00
                        }

                        If ((Arg1 & 0x07)){}
                        Else
                        {
                            Local0 |= 0x04
                        }

                        If (((Arg1 & 0x07) == 0x07))
                        {
                            Local1 = 0xFFFFFFFF
                            Local2 = 0xFFFFFFFF
                            Local3 = 0xFFFFFFFF
                        }
                        Else
                        {
                            Local3 = SBVO /* \_SB_.PCI0.LPC0.EC0_.SBVO */
                            If (Arg2)
                            {
                                Local2 = (SBRC * 0x0A)
                            }
                            Else
                            {
                                Local2 = SBRC /* \_SB_.PCI0.LPC0.EC0_.SBRC */
                            }

                            Local1 = SBAC /* \_SB_.PCI0.LPC0.EC0_.SBAC */
                            If ((Local1 >= 0x8000))
                            {
                                If ((Local0 & 0x01))
                                {
                                    Local1 = (0x00010000 - Local1)
                                }
                                Else
                                {
                                    Local1 = 0x00
                                }
                            }
                            ElseIf (!(Local0 & 0x02))
                            {
                                Local1 = 0x00
                            }

                            If (Arg2)
                            {
                                Local1 *= Local3
                                Local1 /= 0x03E8
                            }
                        }

                        Arg3 [0x00] = Local0
                        Arg3 [0x01] = Local1
                        Arg3 [0x02] = Local2
                        Arg3 [0x03] = Local3
                        Release (BATM)
                        If (GBCL (Arg0))
                        {
                            Local0 |= 0x08
                            Arg3 [0x00] = Local0
                        }

                        Return (Arg3)
                    }

                    Method (AJTP, 3, NotSerialized)
                    {
                        Local0 = Arg1
                        Acquire (BATM, 0xFFFF)
                        Local1 = SBRC /* \_SB_.PCI0.LPC0.EC0_.SBRC */
                        Release (BATM)
                        If ((Arg0 == 0x00))
                        {
                            Local2 = HB0S /* \_SB_.PCI0.LPC0.EC0_.HB0S */
                        }
                        Else
                        {
                            Local2 = HB1S /* \_SB_.PCI0.LPC0.EC0_.HB1S */
                        }

                        If ((Local2 & 0x20))
                        {
                            If ((Arg2 > 0x00))
                            {
                                Local0 += 0x01
                            }

                            If ((Local0 <= Local1))
                            {
                                Local0 = (Local1 + 0x01)
                            }
                        }
                        ElseIf ((Local2 & 0x40))
                        {
                            If ((Local0 >= Local1))
                            {
                                Local0 = (Local1 - 0x01)
                            }
                        }

                        Return (Local0)
                    }

                    Device (BAT0)
                    {
                        Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                        Name (_UID, 0x00)  // _UID: Unique ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            _SB
                        })
                        Name (B0ST, 0x00)
                        Name (BT0I, Package (0x0D)
                        {
                            0x00, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0x01, 
                            0x2A30, 
                            0x00, 
                            0x00, 
                            0x01, 
                            0x01, 
                            "", 
                            "", 
                            "", 
                            ""
                        })
                        Name (BX0I, Package (0x15)
                        {
                            0x01, 
                            0x00, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0x01, 
                            0xFFFFFFFF, 
                            0x00, 
                            0x00, 
                            0xFFFFFFFF, 
                            0x00017318, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0x03E8, 
                            0x01F4, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            "", 
                            "", 
                            "", 
                            "", 
                            0x00
                        })
                        Name (BT0P, Package (0x04){})
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (H8DR)
                            {
                                B0ST = HB0A /* \_SB_.PCI0.LPC0.EC0_.HB0A */
                            }
                            ElseIf ((RBEC (0x38) & 0x80))
                            {
                                B0ST = 0x01
                            }
                            Else
                            {
                                B0ST = 0x00
                            }

                            If (B0ST)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                        {
                            Local7 = 0x00
                            Local6 = 0x0A
                            While ((!Local7 && Local6))
                            {
                                If (HB0A)
                                {
                                    If (((HB0S & 0x07) == 0x07))
                                    {
                                        Sleep (0x03E8)
                                        Local6--
                                    }
                                    Else
                                    {
                                        Local7 = 0x01
                                    }
                                }
                                Else
                                {
                                    Local6 = 0x00
                                }
                            }

                            GBIX (0x00, BX0I, Local7)
                            BT0I [0x00] = DerefOf (BX0I [0x01])
                            BT0I [0x01] = DerefOf (BX0I [0x02])
                            BT0I [0x02] = DerefOf (BX0I [0x03])
                            BT0I [0x03] = DerefOf (BX0I [0x04])
                            BT0I [0x04] = DerefOf (BX0I [0x05])
                            BT0I [0x05] = DerefOf (BX0I [0x06])
                            BT0I [0x06] = DerefOf (BX0I [0x07])
                            BT0I [0x07] = DerefOf (BX0I [0x0E])
                            BT0I [0x08] = DerefOf (BX0I [0x0F])
                            BT0I [0x09] = DerefOf (BX0I [0x10])
                            BT0I [0x0A] = DerefOf (BX0I [0x11])
                            BT0I [0x0B] = DerefOf (BX0I [0x12])
                            BT0I [0x0C] = DerefOf (BX0I [0x13])
                            Return (BT0I) /* \_SB_.PCI0.LPC0.EC0_.BAT0.BT0I */
                        }

                        Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
                        {
                            Local7 = 0x00
                            Local6 = 0x0A
                            While ((!Local7 && Local6))
                            {
                                If (HB0A)
                                {
                                    If (((HB0S & 0x07) == 0x07))
                                    {
                                        Sleep (0x03E8)
                                        Local6--
                                    }
                                    Else
                                    {
                                        Local7 = 0x01
                                    }
                                }
                                Else
                                {
                                    Local6 = 0x00
                                }
                            }

                            Return (GBIX (0x00, BX0I, Local7))
                        }

                        Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                        {
                            Local0 = (DerefOf (BX0I [0x01]) ^ 0x01)
                            GBST (0x00, HB0S, Local0, BT0P)
                            If (((HB0S & 0x07) != 0x00))
                            {
                                If ((DerefOf (BT0P [0x02]) == 0x00))
                                {
                                    Sleep (0x14)
                                    GBST (0x00, HB0S, Local0, BT0P)
                                }
                            }

                            If (((HB0S & 0x07) == 0x07))
                            {
                                BT0P [0x01] = 0xFFFFFFFF
                                BT0P [0x02] = 0xFFFFFFFF
                                BT0P [0x03] = 0xFFFFFFFF
                            }

                            ^^^^^FAN0.SRPM (TMP0)
                            ^^^^^FAN0.CRNF ()
                            Return (BT0P) /* \_SB_.PCI0.LPC0.EC0_.BAT0.BT0P */
                        }
                    }

                    Device (AC)
                    {
                        Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                        Name (_UID, 0x00)  // _UID: Unique ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            _SB
                        })
                        Name (XX00, Buffer (0x03){})
                        Name (ACDC, 0xFF)
                        Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                        {
                            If ((Acquire (UCCI, 0xA000) == 0x00))
                            {
                                If (H8DR)
                                {
                                    Local0 = HPAC /* \_SB_.PCI0.LPC0.EC0_.HPAC */
                                }
                                ElseIf ((RBEC (0x46) & 0x10))
                                {
                                    Local0 = 0x01
                                }
                                Else
                                {
                                    Local0 = 0x00
                                }

                                If (((Local0 != ACDC) || (ACDC == 0xFF)))
                                {
                                    CreateWordField (XX00, 0x00, SSZE)
                                    CreateByteField (XX00, 0x02, ACST)
                                    SSZE = 0x03
                                    ACDC = Local0
                                    If (ACDC)
                                    {
                                        ^^^^GP17.VGA.AFN4 (0x01)
                                        ACST = 0x00
                                    }
                                    Else
                                    {
                                        ^^^^GP17.VGA.AFN4 (0x02)
                                        ACST = 0x01
                                    }

                                    ALIB (0x01, XX00)
                                }

                                Release (UCCI)
                            }

                            Return (Local0)
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }

                    Device (HKEY)
                    {
                        Name (_HID, EisaId ("LEN0268"))  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (MHKV, 0, NotSerialized)
                        {
                            Return (0x0200)
                        }

                        Name (DHKC, 0x00)
                        Name (DHKB, 0x01)
                        Name (DHKH, 0x00)
                        Name (DHKW, 0x00)
                        Name (DHKS, 0x00)
                        Name (DHKD, 0x00)
                        Name (DHKN, 0x0808)
                        Name (DHKE, 0x00)
                        Name (DHKF, 0x01FF4000)
                        Name (DHKT, 0x00)
                        Name (DHWW, 0x00)
                        Mutex (XDHK, 0x00)
                        Method (MHKA, 1, NotSerialized)
                        {
                            If ((Arg0 == 0x00))
                            {
                                Return (0x03)
                            }
                            ElseIf ((Arg0 == 0x01))
                            {
                                Return (0xFFFFFFFB)
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Return (0x00)
                            }
                            ElseIf ((Arg0 == 0x03))
                            {
                                Return (0x01FF4000)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Method (MHKN, 1, NotSerialized)
                        {
                            If ((Arg0 == 0x00))
                            {
                                Return (0x03)
                            }
                            ElseIf ((Arg0 == 0x01))
                            {
                                Return (DHKN) /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKN */
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Return (DHKE) /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKE */
                            }
                            ElseIf ((Arg0 == 0x03))
                            {
                                Return (DHKF) /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKF */
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Method (MHKK, 2, NotSerialized)
                        {
                            If ((Arg0 == 0x00))
                            {
                                Return (0x03)
                            }
                            ElseIf (DHKC)
                            {
                                If ((Arg0 == 0x01))
                                {
                                    Return ((DHKN & Arg1))
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    Return ((DHKE & Arg1))
                                }
                                ElseIf ((Arg0 == 0x03))
                                {
                                    Return ((DHKF & Arg1))
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (MHKM, 2, NotSerialized)
                        {
                            Acquire (XDHK, 0xFFFF)
                            If ((Arg0 > 0x60))
                            {
                                Noop
                            }
                            ElseIf ((Arg0 <= 0x20))
                            {
                                Local0 = (One << Arg0--)
                                If ((Local0 & 0xFFFFFFFB))
                                {
                                    If (Arg1)
                                    {
                                        DHKN |= Local0 /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKN */
                                    }
                                    Else
                                    {
                                        DHKN &= (Local0 ^ 0xFFFFFFFF)
                                    }
                                }
                                Else
                                {
                                    Noop
                                }
                            }
                            ElseIf ((Arg0 <= 0x40))
                            {
                                Noop
                            }
                            ElseIf ((Arg0 <= 0x60))
                            {
                                Arg0 -= 0x40
                                Local0 = (One << Arg0--)
                                If ((Local0 & 0x01FF4000))
                                {
                                    If (Arg1)
                                    {
                                        DHKF |= Local0 /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKF */
                                    }
                                    Else
                                    {
                                        DHKF &= (Local0 ^ 0xFFFFFFFF)
                                    }
                                }
                                Else
                                {
                                    Noop
                                }
                            }

                            Release (XDHK)
                        }

                        Method (MHKS, 0, NotSerialized)
                        {
                            Notify (SLPB, 0x80) // Status Change
                        }

                        Method (MHKC, 1, NotSerialized)
                        {
                            DHKC = Arg0
                        }

                        Method (MHKP, 0, NotSerialized)
                        {
                            Acquire (XDHK, 0xFFFF)
                            If (DHWW)
                            {
                                Local1 = DHWW /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHWW */
                                DHWW = Zero
                            }
                            ElseIf (DHKW)
                            {
                                Local1 = DHKW /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKW */
                                DHKW = Zero
                            }
                            ElseIf (DHKD)
                            {
                                Local1 = DHKD /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKD */
                                DHKD = Zero
                            }
                            ElseIf (DHKS)
                            {
                                Local1 = DHKS /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKS */
                                DHKS = Zero
                            }
                            ElseIf (DHKT)
                            {
                                Local1 = DHKT /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKT */
                                DHKT = Zero
                            }
                            Else
                            {
                                Local1 = DHKH /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKH */
                                DHKH = Zero
                            }

                            Release (XDHK)
                            Return (Local1)
                        }

                        Method (MHKE, 1, Serialized)
                        {
                            DHKB = Arg0
                            Acquire (XDHK, 0xFFFF)
                            DHKH = Zero
                            DHKW = Zero
                            DHKS = Zero
                            DHKD = Zero
                            DHKT = Zero
                            DHWW = Zero
                            Release (XDHK)
                        }

                        Method (MHKQ, 1, Serialized)
                        {
                            If (DHKB)
                            {
                                If (DHKC)
                                {
                                    Acquire (XDHK, 0xFFFF)
                                    If ((Arg0 < 0x1000)){}
                                    ElseIf ((Arg0 < 0x2000))
                                    {
                                        DHKH = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x3000))
                                    {
                                        DHKW = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x4000))
                                    {
                                        DHKS = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x5000))
                                    {
                                        DHKD = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x6000))
                                    {
                                        DHKH = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x7000))
                                    {
                                        DHKT = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x8000))
                                    {
                                        DHWW = Arg0
                                    }
                                    Else
                                    {
                                    }

                                    Release (XDHK)
                                    Notify (HKEY, 0x80) // Status Change
                                }
                                ElseIf ((Arg0 == 0x1004))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                        }

                        Method (MHKB, 1, NotSerialized)
                        {
                            If ((Arg0 == 0x00))
                            {
                                BEEP (0x11)
                                LIDB = 0x00
                            }
                            ElseIf ((Arg0 == 0x01))
                            {
                                BEEP (0x10)
                                LIDB = 0x01
                            }
                            Else
                            {
                            }
                        }

                        Method (MHKD, 0, NotSerialized)
                        {
                            If ((PLUX == 0x00)){}
                        }

                        Method (MHQC, 1, NotSerialized)
                        {
                            If (WNTF)
                            {
                                If ((Arg0 == 0x00))
                                {
                                    Return (CWAC) /* \CWAC */
                                }
                                ElseIf ((Arg0 == 0x01))
                                {
                                    Return (CWAP) /* \CWAP */
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    Return (CWAT) /* \CWAT */
                                }
                                Else
                                {
                                    Noop
                                }
                            }
                            Else
                            {
                                Noop
                            }

                            Return (0x00)
                        }

                        Method (MHGC, 0, NotSerialized)
                        {
                            If (WNTF)
                            {
                                Acquire (XDHK, 0xFFFF)
                                If (CKC4 (0x00))
                                {
                                    Local0 = 0x03
                                }
                                Else
                                {
                                    Local0 = 0x04
                                }

                                Release (XDHK)
                                Return (Local0)
                            }
                            Else
                            {
                                Noop
                            }

                            Return (0x00)
                        }

                        Method (MHSC, 1, NotSerialized)
                        {
                        }

                        Method (CKC4, 1, NotSerialized)
                        {
                            Local0 = 0x00
                            If (C4WR)
                            {
                                If (!C4AC)
                                {
                                    Local0 |= 0x01
                                }
                            }

                            If (C4NA)
                            {
                                Local0 |= 0x02
                            }

                            If ((CWAC && CWAS))
                            {
                                Local0 |= 0x04
                            }

                            Local0 &= ~Arg0
                            Return (Local0)
                        }

                        Method (MHQE, 0, NotSerialized)
                        {
                            Return (0x00)
                        }

                        Method (MHGE, 0, NotSerialized)
                        {
                            If ((C4WR && C4AC))
                            {
                                Return (0x04)
                            }

                            Return (0x03)
                        }

                        Method (MHSE, 1, NotSerialized)
                        {
                        }

                        Method (UAWO, 1, NotSerialized)
                        {
                            Return (UAWS (Arg0))
                        }

                        Method (MLCG, 1, NotSerialized)
                        {
                            Local0 = KBLS (0x00, 0x00)
                            Return (Local0)
                        }

                        Method (MLCS, 1, NotSerialized)
                        {
                            Local0 = KBLS (0x01, Arg0)
                            If (!(Local0 & 0x80000000))
                            {
                                If ((Arg0 & 0x00010000))
                                {
                                    MHKQ (0x6001)
                                }
                                ElseIf (MHKK (0x01, 0x00020000))
                                {
                                    MHKQ (0x1012)
                                }
                            }

                            Return (Local0)
                        }

                        Method (DSSG, 1, NotSerialized)
                        {
                            Local0 = (0x0400 | PDCI) /* \PDCI */
                            Return (Local0)
                        }

                        Method (DSSS, 1, NotSerialized)
                        {
                            PDCI |= Arg0
                        }

                        Method (SBSG, 1, NotSerialized)
                        {
                            Return (SYBC (0x00, 0x00))
                        }

                        Method (SBSS, 1, NotSerialized)
                        {
                            Return (SYBC (0x01, Arg0))
                        }

                        Method (PBLG, 1, NotSerialized)
                        {
                            Local0 = BRLV /* \BRLV */
                            Local1 = (Local0 | 0x0F00)
                            Return (Local1)
                        }

                        Method (PBLS, 1, NotSerialized)
                        {
                            BRLV = Arg0
                            If (VIGD){}
                            Else
                            {
                                VBRC (BRLV)
                            }

                            If (!NBCF)
                            {
                                MHKQ (0x6050)
                            }

                            Return (0x00)
                        }

                        Method (PMSG, 1, NotSerialized)
                        {
                            Local0 = PRSM (0x00, 0x00)
                            Return (Local0)
                        }

                        Method (PMSS, 1, NotSerialized)
                        {
                            PRSM (0x01, Arg0)
                            Return (0x00)
                        }

                        Method (ISSG, 1, NotSerialized)
                        {
                            Local0 = ISSP /* \ISSP */
                            If (ISSP)
                            {
                                Local0 |= 0x01000000
                                Local0 |= (ISFS << 0x19)
                            }

                            Local0 |= (ISCG & 0x30)
                            Local0 &= 0xFFFFFFFE
                            Local0 |= 0x02
                            Local0 |= ((ISWK & 0x02) << 0x02)
                            Return (Local0)
                        }

                        Method (ISSS, 1, NotSerialized)
                        {
                            ISCG = Arg0
                            Return (0x00)
                        }

                        Method (FFSG, 1, NotSerialized)
                        {
                            Return (0x00)
                        }

                        Method (FFSS, 1, NotSerialized)
                        {
                            Return (0x80000000)
                        }

                        Method (GMKS, 0, NotSerialized)
                        {
                            Return (FNSC (0x02, 0x00))
                        }

                        Method (SMKS, 1, NotSerialized)
                        {
                            Local0 = FNSC (0x03, (Arg0 & 0x00010001))
                            MHKQ (0x6060)
                            Return (Local0)
                        }

                        Method (GSKL, 1, NotSerialized)
                        {
                            Return (FNSC (0x04, (Arg0 & 0x0F000000)))
                        }

                        Method (SSKL, 1, NotSerialized)
                        {
                            Return (FNSC (0x05, (Arg0 & 0x0F00FFFF)))
                        }

                        Method (INSG, 1, NotSerialized)
                        {
                            Local0 = IOEN /* \IOEN */
                            Local0 |= (IOST << 0x07)
                            Local0 |= (IOCP << 0x08)
                            Local0 |= 0x10000000
                            Return (Local0)
                        }

                        Method (INSS, 1, NotSerialized)
                        {
                            If ((Arg0 & 0x10000000))
                            {
                                If (IOCP)
                                {
                                    Local0 = ((Arg0 & 0x80) >> 0x07)
                                    If (!EZRC (Local0))
                                    {
                                        IOST = Local0
                                    }
                                }

                                Return (0x00)
                            }

                            If ((IOCP && (Arg0 & 0x01)))
                            {
                                IOEN = 0x01
                            }
                            Else
                            {
                                IOEN = 0x00
                                If (IOST)
                                {
                                    If (!ISOC (0x00))
                                    {
                                        IOST = 0x00
                                    }
                                }
                            }

                            Return (0x00)
                        }
                    }

                    Scope (HKEY)
                    {
                        Name (INDV, 0x00)
                        Method (MHQI, 0, NotSerialized)
                        {
                            Return (0x00)
                        }

                        Method (MHGI, 1, NotSerialized)
                        {
                            Name (RETB, Buffer (0x10){})
                            CreateByteField (RETB, 0x00, MHGS)
                            Local0 = (0x01 << Arg0)
                            If ((INDV & Local0))
                            {
                                If ((Arg0 == 0x00))
                                {
                                    CreateField (RETB, 0x08, 0x78, BRBU)
                                    BRBU = IPMB /* \IPMB */
                                    MHGS = 0x10
                                }
                                ElseIf ((Arg0 == 0x01))
                                {
                                    CreateField (RETB, 0x08, 0x18, RRBU)
                                    RRBU = IPMR /* \IPMR */
                                    MHGS = 0x04
                                }
                                ElseIf ((Arg0 == 0x08))
                                {
                                    CreateField (RETB, 0x10, 0x18, ODBU)
                                    CreateByteField (RETB, 0x01, MHGZ)
                                    ODBU = IPMO /* \IPMO */
                                    MHGS = 0x05
                                }
                                ElseIf ((Arg0 == 0x09))
                                {
                                    CreateField (RETB, 0x10, 0x08, AUBU)
                                    AUBU = IPMA /* \IPMA */
                                    RETB [0x01] = 0x01
                                    MHGS = 0x03
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    Local1 = VDYN (0x00, 0x00)
                                    RETB [0x02] = (Local1 & 0x0F)
                                    Local1 >>= 0x04
                                    RETB [0x01] = (Local1 & 0x0F)
                                    MHGS = 0x03
                                }
                            }

                            Return (RETB) /* \_SB_.PCI0.LPC0.EC0_.HKEY.MHGI.RETB */
                        }

                        Method (MHSI, 2, NotSerialized)
                        {
                            Local0 = (0x01 << Arg0)
                            If ((INDV & Local0))
                            {
                                If ((Arg0 == 0x08))
                                {
                                    If (Arg1)
                                    {
                                        If (H8DR)
                                        {
                                            Local1 = HPBU /* \_SB_.PCI0.LPC0.EC0_.HPBU */
                                        }
                                        Else
                                        {
                                            Local1 = (RBEC (0x47) & 0x01)
                                        }
                                    }
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    VDYN (0x01, Arg1)
                                }
                            }
                        }
                    }

                    Scope (\_SB.PCI0.LPC0.EC0)
                    {
                        Method (_Q6A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                        {
                            If (HDMC)
                            {
                                Noop
                            }
                            ElseIf (^HKEY.MHKK (0x01, 0x04000000))
                            {
                                ^HKEY.MHKQ (0x101B)
                            }
                        }
                    }

                    Scope (HKEY)
                    {
                        Method (MMTG, 0, NotSerialized)
                        {
                            Local0 = 0x0101
                            If (HDMC)
                            {
                                Local0 |= 0x00010000
                            }

                            Return (Local0)
                        }

                        Method (MMTS, 1, NotSerialized)
                        {
                            If (HDMC)
                            {
                                Noop
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                LED (0x0E, 0x80)
                            }
                            ElseIf ((Arg0 == 0x03))
                            {
                                LED (0x0E, 0xC0)
                            }
                            Else
                            {
                                LED (0x0E, 0x00)
                            }
                        }
                    }

                    Scope (HKEY)
                    {
                        Method (PWMC, 0, NotSerialized)
                        {
                            Return (0x00)
                        }

                        Method (PWMG, 0, NotSerialized)
                        {
                            Local0 = PWMH /* \_SB_.PCI0.LPC0.EC0_.PWMH */
                            Local0 <<= 0x08
                            Local0 |= PWML /* \_SB_.PCI0.LPC0.EC0_.PWML */
                            Return (Local0)
                        }
                    }

                    Scope (\_SB.PCI0.LPC0.EC0)
                    {
                        Method (_Q3F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                        {
                            ^HKEY.MHKQ (0x6000)
                        }

                        Method (_Q74, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                        {
                            ^HKEY.MHKQ (0x6060)
                        }
                    }

                    Scope (HKEY)
                    {
                    }

                    Scope (\_SB.PCI0.LPC0.EC0)
                    {
                        Name (BTBF, Buffer (0x0100)
                        {
                             0x00                                             // .
                        })
                        Method (BTIF, 0, NotSerialized)
                        {
                            BTBF = TWBT /* \_SB_.PCI0.LPC0.EC0_.TWBT */
                            Return (BTBF) /* \_SB_.PCI0.LPC0.EC0_.BTBF */
                        }
                    }

                    Scope (HKEY)
                    {
                        Method (SBIG, 1, NotSerialized)
                        {
                            Return (BTIF ())
                        }
                    }

                    OperationRegion (ECMM, SystemMemory, 0xFEEC2000, 0x1000)
                    Field (ECMM, AnyAcc, Lock, Preserve)
                    {
                        TWBT,   2048, 
                        T2BT,   2048
                    }

                    Scope (HKEY)
                    {
                        Name (LQCS, 0x00)
                        Name (AM00, 0x00)
                        Name (AM01, 0x00)
                        Name (AM02, 0x00)
                        Name (AM03, 0x00)
                        Name (AM04, 0x00)
                        Name (AM05, 0x00)
                        Name (AM06, 0x00)
                        Name (AM07, 0x00)
                        Name (AM08, 0x00)
                        Name (AM09, 0x00)
                        Name (AM0A, 0x00)
                        Name (AM0B, 0x00)
                        Name (AM0C, 0x00)
                        Name (AM0D, 0x00)
                        Name (AM0E, 0x00)
                        Name (AM0F, 0x00)
                        Method (LQCC, 1, NotSerialized)
                        {
                            If (((Arg0 & 0xFFFF) == 0x0100))
                            {
                                AM00 = HAM0 /* \_SB_.PCI0.LPC0.EC0_.HAM0 */
                                AM01 = HAM1 /* \_SB_.PCI0.LPC0.EC0_.HAM1 */
                                AM02 = HAM2 /* \_SB_.PCI0.LPC0.EC0_.HAM2 */
                                AM03 = HAM3 /* \_SB_.PCI0.LPC0.EC0_.HAM3 */
                                AM04 = HAM4 /* \_SB_.PCI0.LPC0.EC0_.HAM4 */
                                AM05 = HAM5 /* \_SB_.PCI0.LPC0.EC0_.HAM5 */
                                AM06 = HAM6 /* \_SB_.PCI0.LPC0.EC0_.HAM6 */
                                AM07 = HAM7 /* \_SB_.PCI0.LPC0.EC0_.HAM7 */
                                AM08 = HAM8 /* \_SB_.PCI0.LPC0.EC0_.HAM8 */
                                AM09 = HAM9 /* \_SB_.PCI0.LPC0.EC0_.HAM9 */
                                AM0A = HAMA /* \_SB_.PCI0.LPC0.EC0_.HAMA */
                                AM0B = HAMB /* \_SB_.PCI0.LPC0.EC0_.HAMB */
                                AM0C = HAMC /* \_SB_.PCI0.LPC0.EC0_.HAMC */
                                AM0D = HAMD /* \_SB_.PCI0.LPC0.EC0_.HAMD */
                                AM0E = HAME /* \_SB_.PCI0.LPC0.EC0_.HAME */
                                AM0F = HAMF /* \_SB_.PCI0.LPC0.EC0_.HAMF */
                                LQCS = 0x01
                                Return (0x01)
                            }
                            ElseIf (((Arg0 & 0xFFFF) == 0x0101))
                            {
                                If ((LQCS == 0x01))
                                {
                                    If (((Arg0 & 0x00010000) == 0x00010000))
                                    {
                                        HAM0 = (AM00 & 0xFF)
                                        HAM1 = (AM01 & 0xFF)
                                        HAM2 = (AM02 & 0x87)
                                        HAM3 = (AM03 & 0x4D)
                                        HAM4 = (AM04 & 0xFF)
                                        HAM5 = (AM05 & 0xFF)
                                        HAM6 = (AM06 & 0xFF)
                                        HAM7 = (AM07 & 0x8F)
                                        HAM8 = (AM08 & 0xF7)
                                        HAM9 = (AM09 & 0xFF)
                                        HAMA = (AM0A & 0xFF)
                                        HAMB = (AM0B & 0xFF)
                                        HAMC = (AM0C & 0x00)
                                        HAMD = (AM0D & 0xE0)
                                        HAME = (AM0E & 0xA2)
                                        HAMF = (AM0F & 0xF8)
                                        QCON = 0x01
                                        Return (0x00)
                                    }
                                    ElseIf (((Arg0 & 0x00010000) == 0x00))
                                    {
                                        HAM0 = AM00 /* \_SB_.PCI0.LPC0.EC0_.HKEY.AM00 */
                                        HAM1 = AM01 /* \_SB_.PCI0.LPC0.EC0_.HKEY.AM01 */
                                        HAM2 = AM02 /* \_SB_.PCI0.LPC0.EC0_.HKEY.AM02 */
                                        HAM3 = AM03 /* \_SB_.PCI0.LPC0.EC0_.HKEY.AM03 */
                                        HAM4 = AM04 /* \_SB_.PCI0.LPC0.EC0_.HKEY.AM04 */
                                        HAM5 = AM05 /* \_SB_.PCI0.LPC0.EC0_.HKEY.AM05 */
                                        HAM6 = AM06 /* \_SB_.PCI0.LPC0.EC0_.HKEY.AM06 */
                                        HAM7 = AM07 /* \_SB_.PCI0.LPC0.EC0_.HKEY.AM07 */
                                        HAM8 = AM08 /* \_SB_.PCI0.LPC0.EC0_.HKEY.AM08 */
                                        HAM9 = AM09 /* \_SB_.PCI0.LPC0.EC0_.HKEY.AM09 */
                                        HAMA = AM0A /* \_SB_.PCI0.LPC0.EC0_.HKEY.AM0A */
                                        HAMB = AM0B /* \_SB_.PCI0.LPC0.EC0_.HKEY.AM0B */
                                        HAMC = AM0C /* \_SB_.PCI0.LPC0.EC0_.HKEY.AM0C */
                                        HAMD = AM0D /* \_SB_.PCI0.LPC0.EC0_.HKEY.AM0D */
                                        HAME = AM0E /* \_SB_.PCI0.LPC0.EC0_.HKEY.AM0E */
                                        HAMF = AM0F /* \_SB_.PCI0.LPC0.EC0_.HKEY.AM0F */
                                        QCON = 0x00
                                        Return (0x00)
                                    }
                                }
                            }

                            Return (0x10000000)
                        }
                    }
                }
            }
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            OperationRegion (ASDF, SystemIO, 0x72, 0x02)
            Field (ASDF, ByteAcc, NoLock, Preserve)
            {
                INDX,   8, 
                DATA,   8
            }

            IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
            {
                Offset (0x8E), 
                SDFG,   8
            }

            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                If (H8DR)
                {
                    SDFG = ^^PCI0.LPC0.EC0.HPLD /* \_SB_.PCI0.LPC0.EC0_.HPLD */
                    Return (^^PCI0.LPC0.EC0.HPLD) /* \_SB_.PCI0.LPC0.EC0_.HPLD */
                }
                ElseIf ((RBEC (0x46) & 0x04))
                {
                    Return (0x01)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (LWCP)
                {
                    Return (Package (0x02)
                    {
                        0x08, 
                        0x04
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        0x08, 
                        0x03
                    })
                }
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (H8DR)
                {
                    If (Arg0)
                    {
                        ^^PCI0.LPC0.EC0.HWLO = 0x01
                    }
                    Else
                    {
                        ^^PCI0.LPC0.EC0.HWLO = 0x00
                    }
                }
                ElseIf (Arg0)
                {
                    MBEC (0x32, 0xFF, 0x04)
                }
                Else
                {
                    MBEC (0x32, 0xFB, 0x00)
                }

                If (LWCP)
                {
                    If (Arg0)
                    {
                        LWEN = 0x01
                        ^^PCI0.LPC0.EC0.BTPC = 0x01
                    }
                    Else
                    {
                        LWEN = 0x00
                        ^^PCI0.LPC0.EC0.BTPC = 0x00
                    }
                }
            }
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x08, 
                    0x03
                })
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (H8DR)
                {
                    If (Arg0)
                    {
                        ^^PCI0.LPC0.EC0.HWFN = 0x01
                    }
                    Else
                    {
                        ^^PCI0.LPC0.EC0.HWFN = 0x00
                    }
                }
                ElseIf (Arg0)
                {
                    MBEC (0x32, 0xFF, 0x10)
                }
                Else
                {
                    MBEC (0x32, 0xEF, 0x00)
                }
            }
        }

        Scope (PCI0.LPC0.EC0)
        {
            Method (_Q43, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If ((^HKEY.DHKC == 0x00))
                {
                    HMUT = 0x00
                }

                SCMS (0x18)
            }

            Method (SAUM, 1, NotSerialized)
            {
                If ((Arg0 > 0x03))
                {
                    Noop
                }
                ElseIf (H8DR)
                {
                    HAUM = Arg0
                }
                Else
                {
                    MBEC (0x03, 0x9F, (Arg0 << 0x05))
                }
            }
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            OperationRegion (FAD7, SystemMemory, 0xFED81652, 0x01)
            Field (FAD7, ByteAcc, NoLock, Preserve)
            {
                    ,   6, 
                FAD8,   1, 
                Offset (0x01)
            }

            OperationRegion (CMS8, SystemMemory, 0xFED80700, 0x80)
            Field (CMS8, ByteAcc, NoLock, Preserve)
            {
                Offset (0x51), 
                CM8C,   1, 
                    ,   1, 
                CM8I,   1, 
                Offset (0x52)
            }

            Method (GSMS, 1, NotSerialized)
            {
                Return (AUDC (0x00, 0x00))
            }

            Method (SSMS, 1, NotSerialized)
            {
                If ((Arg0 == 0x00)){}
                Else
                {
                }

                Return (AUDC (0x01, (Arg0 & 0x01)))
            }

            Method (SHDA, 1, NotSerialized)
            {
                Return (AUDC (0x02, (Arg0 & 0x01)))
            }
        }

        Scope (PCI0.LPC0.EC0)
        {
            Name (BRTW, Package (0x12)
            {
                0x64, 
                0x64, 
                0x05, 
                0x0A, 
                0x14, 
                0x19, 
                0x1E, 
                0x23, 
                0x28, 
                0x2D, 
                0x32, 
                0x37, 
                0x3C, 
                0x41, 
                0x46, 
                0x50, 
                0x5A, 
                0x64
            })
            Name (BRTB, Package (0x04)
            {
                Package (0x16)
                {
                    0x1E, 
                    0x04, 
                    0x04, 
                    0x07, 
                    0x0A, 
                    0x0E, 
                    0x11, 
                    0x16, 
                    0x1B, 
                    0x21, 
                    0x29, 
                    0x32, 
                    0x3C, 
                    0x46, 
                    0x64, 
                    0x8C, 
                    0xB4, 
                    0xFF, 
                    0x04E2, 
                    0x04E2, 
                    0x04, 
                    0x04
                }, 

                Package (0x16)
                {
                    0x28, 
                    0x04, 
                    0x04, 
                    0x07, 
                    0x0A, 
                    0x0E, 
                    0x11, 
                    0x16, 
                    0x1B, 
                    0x21, 
                    0x29, 
                    0x32, 
                    0x3C, 
                    0x46, 
                    0x64, 
                    0x8C, 
                    0xB4, 
                    0xFF, 
                    0x04E2, 
                    0x04E2, 
                    0x04, 
                    0x04
                }, 

                Package (0x16)
                {
                    0x32, 
                    0x04, 
                    0x04, 
                    0x07, 
                    0x0A, 
                    0x0E, 
                    0x11, 
                    0x16, 
                    0x1B, 
                    0x21, 
                    0x29, 
                    0x32, 
                    0x3C, 
                    0x46, 
                    0x64, 
                    0x8C, 
                    0xB4, 
                    0xFF, 
                    0x04E2, 
                    0x04E2, 
                    0x04, 
                    0x04
                }, 

                Package (0x16)
                {
                    0x00, 
                    0x04, 
                    0x04, 
                    0x07, 
                    0x09, 
                    0x0C, 
                    0x10, 
                    0x15, 
                    0x1C, 
                    0x25, 
                    0x32, 
                    0x40, 
                    0x50, 
                    0x64, 
                    0x82, 
                    0xA5, 
                    0xCD, 
                    0xFF, 
                    0xDC, 
                    0xDC, 
                    0x04, 
                    0x04
                }
            })
            Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (^HKEY.MHKK (0x01, 0x8000))
                {
                    ^HKEY.MHKQ (0x1010)
                }

                Notify (^^^GP17.VGA.LCD, 0x86) // Device-Specific
            }

            Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (^HKEY.MHKK (0x01, 0x00010000))
                {
                    ^HKEY.MHKQ (0x1011)
                }

                Notify (^^^GP17.VGA.LCD, 0x87) // Device-Specific
            }

            Method (BFRQ, 0, NotSerialized)
            {
                Local0 = 0x80000100
                Local1 = DerefOf (DerefOf (BRTB [BNTN]) [0x13])
                Local0 |= (Local1 << 0x09)
                Local1 = DerefOf (DerefOf (BRTB [BNTN]) [0x15])
                Local0 |= Local1
                Return (Local0)
            }
        }

        Scope (PCI0.LPC0.EC0)
        {
            Method (_Q19, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (^HKEY.MHKK (0x01, 0x00800000))
                {
                    ^HKEY.MHKQ (0x1018)
                }

                SCMS (0x03)
            }
        }

        Scope (PCI0.LPC0.EC0)
        {
            Method (_Q63, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (^HKEY.MHKK (0x01, 0x00080000))
                {
                    ^HKEY.MHKQ (0x1014)
                }

                SCMS (0x0B)
            }
        }

        Scope (PCI0.LPC0.EC0)
        {
            Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                FNST ()
            }

            Method (_Q72, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                FNST ()
            }

            Method (_Q73, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                FNST ()
            }

            Method (FNST, 0, NotSerialized)
            {
                If (H8DR)
                {
                    Local0 = HFNS /* \_SB_.PCI0.LPC0.EC0_.HFNS */
                    Local1 = HFNE /* \_SB_.PCI0.LPC0.EC0_.HFNE */
                }
                Else
                {
                    Local0 = (RBEC (0x0E) & 0x03)
                    Local1 = (RBEC (0x00) & 0x08)
                }

                If (Local1)
                {
                    If ((Local0 == 0x00))
                    {
                        SCMS (0x11)
                    }

                    If ((Local0 == 0x01))
                    {
                        SCMS (0x0F)
                    }

                    If ((Local0 == 0x02))
                    {
                        SCMS (0x10)
                    }

                    ^HKEY.MHKQ (0x6005)
                }
            }
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Method (GHSL, 1, NotSerialized)
            {
                Return (FNSC (0x00, 0x00))
            }

            Method (SHSL, 1, NotSerialized)
            {
                Return (FNSC (0x01, (Arg0 & 0x00010001)))
            }
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Name (WGFL, 0x00)
            Method (WSIF, 0, NotSerialized)
            {
                Return (0x00)
            }

            Method (WLSW, 0, NotSerialized)
            {
                Return (0x10010001)
            }

            Method (GWAN, 0, NotSerialized)
            {
                Local0 = 0x00
                If ((WGFL & 0x01))
                {
                    Local0 |= 0x01
                }

                If ((WGFL & 0x08))
                {
                    Return (Local0)
                }

                If (WPWS ())
                {
                    Local0 |= 0x02
                }

                Local0 |= 0x04
                Return (Local0)
            }

            Method (SWAN, 1, NotSerialized)
            {
                If ((Arg0 & 0x02))
                {
                    WPWC (0x01)
                }
                Else
                {
                    WPWC (0x00)
                }
            }

            Method (GBDC, 0, NotSerialized)
            {
                Local0 = 0x00
                If ((WGFL & 0x10))
                {
                    Local0 |= 0x01
                }

                If ((WGFL & 0x80))
                {
                    Return (Local0)
                }

                If (BPWS ())
                {
                    Local0 |= 0x02
                }

                Local0 |= 0x04
                Return (Local0)
            }

            Method (SBDC, 1, NotSerialized)
            {
                If ((Arg0 & 0x02))
                {
                    BPWC (0x01)
                }
                Else
                {
                    BPWC (0x00)
                }
            }

            Method (WPWS, 0, NotSerialized)
            {
                If (H8DR)
                {
                    Local0 = DCWW /* \_SB_.PCI0.LPC0.EC0_.DCWW */
                }
                Else
                {
                    Local0 = ((RBEC (0x3A) & 0x40) >> 0x06)
                }

                Return (Local0)
            }

            Method (WPWC, 1, NotSerialized)
            {
                If ((Arg0 && ((WGFL & 0x01) && !(WGFL & 0x08
                    ))))
                {
                    If (H8DR)
                    {
                        DCWW = One
                    }
                    Else
                    {
                        MBEC (0x3A, 0xFF, 0x40)
                    }

                    WGFL |= 0x02
                }
                Else
                {
                    If (H8DR)
                    {
                        DCWW = Zero
                    }
                    Else
                    {
                        MBEC (0x3A, 0xBF, 0x00)
                    }

                    WGFL &= 0xFFFFFFFD
                }
            }

            Method (BPWS, 0, NotSerialized)
            {
                If (H8DR)
                {
                    Local0 = DCBD /* \_SB_.PCI0.LPC0.EC0_.DCBD */
                }
                Else
                {
                    Local0 = ((RBEC (0x3A) & 0x10) >> 0x04)
                }

                Return (Local0)
            }

            Method (BPWC, 1, NotSerialized)
            {
                If ((Arg0 && ((WGFL & 0x10) && !(WGFL & 0x80
                    ))))
                {
                    If (H8DR)
                    {
                        DCBD = One
                    }
                    Else
                    {
                        MBEC (0x3A, 0xFF, 0x10)
                    }

                    WGFL |= 0x20
                }
                Else
                {
                    If (H8DR)
                    {
                        DCBD = Zero
                    }
                    Else
                    {
                        MBEC (0x3A, 0xEF, 0x00)
                    }

                    WGFL &= 0xFFFFFFDF
                }
            }

            Method (WGIN, 0, NotSerialized)
            {
                WGFL = 0x00
                WGFL = WGSV (0x01)
                If (WIN8)
                {
                    If ((WGFL && 0x10))
                    {
                        BPWC (0x01)
                    }
                }

                If (WPWS ())
                {
                    WGFL |= 0x02
                }

                If (BPWS ())
                {
                    WGFL |= 0x20
                }
            }

            Method (WGPS, 1, NotSerialized)
            {
                If ((Arg0 >= 0x04))
                {
                    BLTH (0x05)
                }
            }

            Method (WGWK, 1, NotSerialized)
            {
                Noop
            }
        }

        Scope (PCI0.LPC0.EC0)
        {
            Method (_Q41, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^HKEY.MHKQ (0x7000)
            }
        }

        Device (WMI1)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_WDG, Buffer (0x0140)
            {
                /* 0000 */  0x0E, 0x23, 0xF5, 0x51, 0x77, 0x96, 0xCD, 0x46,  // .#.Qw..F
                /* 0008 */  0xA1, 0xCF, 0xC0, 0xB2, 0x3E, 0xE3, 0x4D, 0xB7,  // ....>.M.
                /* 0010 */  0x41, 0x30, 0xFF, 0x05, 0x64, 0x9A, 0x47, 0x98,  // A0..d.G.
                /* 0018 */  0xF5, 0x33, 0x33, 0x4E, 0xA7, 0x07, 0x8E, 0x25,  // .33N...%
                /* 0020 */  0x1E, 0xBB, 0xC3, 0xA1, 0x41, 0x31, 0x01, 0x06,  // ....A1..
                /* 0028 */  0xEF, 0x54, 0x4B, 0x6A, 0xED, 0xA5, 0x33, 0x4D,  // .TKj..3M
                /* 0030 */  0x94, 0x55, 0xB0, 0xD9, 0xB4, 0x8D, 0xF4, 0xB3,  // .U......
                /* 0038 */  0x41, 0x32, 0x01, 0x06, 0xB6, 0xEB, 0xF1, 0x74,  // A2.....t
                /* 0040 */  0x7A, 0x92, 0x7D, 0x4C, 0x95, 0xDF, 0x69, 0x8E,  // z.}L..i.
                /* 0048 */  0x21, 0xE8, 0x0E, 0xB5, 0x41, 0x33, 0x01, 0x06,  // !...A3..
                /* 0050 */  0xFF, 0x04, 0xEF, 0x7E, 0x28, 0x43, 0x7C, 0x44,  // ...~(C|D
                /* 0058 */  0xB5, 0xBB, 0xD4, 0x49, 0x92, 0x5D, 0x53, 0x8D,  // ...I.]S.
                /* 0060 */  0x41, 0x34, 0x01, 0x06, 0x9E, 0x15, 0xDB, 0x8A,  // A4......
                /* 0068 */  0x32, 0x1E, 0x5C, 0x45, 0xBC, 0x93, 0x30, 0x8A,  // 2.\E..0.
                /* 0070 */  0x7E, 0xD9, 0x82, 0x46, 0x41, 0x35, 0x01, 0x01,  // ~..FA5..
                /* 0078 */  0xFD, 0xD9, 0x51, 0x26, 0x1C, 0x91, 0x69, 0x4B,  // ..Q&..iK
                /* 0080 */  0xB9, 0x4E, 0xD0, 0xDE, 0xD5, 0x96, 0x3B, 0xD7,  // .N....;.
                /* 0088 */  0x41, 0x36, 0x01, 0x06, 0x1A, 0x65, 0x64, 0x73,  // A6...eds
                /* 0090 */  0x2F, 0x13, 0xE7, 0x4F, 0xAD, 0xAA, 0x40, 0xC6,  // /..O..@.
                /* 0098 */  0xC7, 0xEE, 0x2E, 0x3B, 0x41, 0x37, 0x01, 0x06,  // ...;A7..
                /* 00A0 */  0x2C, 0xEF, 0xDD, 0xDF, 0xD4, 0x57, 0xCE, 0x48,  // ,....W.H
                /* 00A8 */  0xB1, 0x96, 0x0F, 0xB7, 0x87, 0xD9, 0x08, 0x36,  // .......6
                /* 00B0 */  0x43, 0x30, 0x01, 0x06, 0xCC, 0x08, 0xA0, 0x34,  // C0.....4
                /* 00B8 */  0x05, 0xD2, 0x62, 0x4B, 0x9E, 0x67, 0x31, 0xDF,  // ..bK.g1.
                /* 00C0 */  0xA8, 0xB9, 0x00, 0x03, 0x41, 0x41, 0x01, 0x06,  // ....AA..
                /* 00C8 */  0x9D, 0xFB, 0x50, 0xC0, 0x5F, 0xDF, 0x06, 0x46,  // ..P._..F
                /* 00D0 */  0xB0, 0x66, 0x9E, 0xFC, 0x40, 0x1B, 0x25, 0x51,  // .f..@.%Q
                /* 00D8 */  0x41, 0x42, 0x01, 0x06, 0x95, 0xE9, 0x9C, 0x9B,  // AB......
                /* 00E0 */  0xC3, 0xC2, 0xEE, 0x40, 0x81, 0xD5, 0x94, 0x68,  // ...@...h
                /* 00E8 */  0x95, 0x37, 0x59, 0xBE, 0x41, 0x43, 0x01, 0x06,  // .7Y.AC..
                /* 00F0 */  0x89, 0x78, 0x34, 0x98, 0x12, 0xE1, 0x14, 0x4F,  // .x4....O
                /* 00F8 */  0xB4, 0x18, 0x27, 0x3A, 0x13, 0x67, 0xDE, 0x9C,  // ..':.g..
                /* 0100 */  0x41, 0x44, 0x01, 0x06, 0x3A, 0x25, 0x21, 0x34,  // AD..:%!4
                /* 0108 */  0x7C, 0xBD, 0x22, 0x42, 0x84, 0x7F, 0x1D, 0xA6,  // |."B....
                /* 0110 */  0x4E, 0x3E, 0x8F, 0xCF, 0x41, 0x45, 0x01, 0x06,  // N>..AE..
                /* 0118 */  0x35, 0xCE, 0x07, 0xF3, 0x39, 0xD5, 0xD6, 0x42,  // 5...9..B
                /* 0120 */  0x9E, 0x87, 0x55, 0x6D, 0x7D, 0xFF, 0x91, 0x64,  // ..Um}..d
                /* 0128 */  0x41, 0x46, 0x01, 0x06, 0x21, 0x12, 0x90, 0x05,  // AF..!...
                /* 0130 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0138 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Name (RETN, Package (0x05)
            {
                "Success", 
                "Not Supported", 
                "Invalid Parameter", 
                "Access Denied", 
                "System Busy"
            })
            Name (ITEM, Package (0x6F)
            {
                Package (0x02)
                {
                    0x0E, 
                    "WakeOnLAN"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "USBBIOSSupport"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "AlwaysOnUSB"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "TrackPoint"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "TouchPad"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "FnSticky"
                }, 

                Package (0x02)
                {
                    0x05, 
                    "BootDisplayDevice"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "CPUPowerManagement"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PowerControlBeep"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "LowBatteryAlarm"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PasswordBeep"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "KeyboardBeep"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ExtendedMemoryTest"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "LockBIOSSetting"
                }, 

                Package (0x02)
                {
                    0x0B, 
                    "MinimumPasswordLength"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BIOSPasswordAtUnattendedBoot"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "FingerprintPredesktopAuthentication"
                }, 

                Package (0x02)
                {
                    0x03, 
                    "FingerprintSecurityMode"
                }, 

                Package (0x02)
                {
                    0x02, 
                    "SecurityChip"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BIOSUpdateByEndUsers"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "DataExecutionPrevention"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "EthernetLANAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WirelessLANAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WirelessWANAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BluetoothAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WirelessUSBAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ModemAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "USBPortAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "IEEE1394Access"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ExpressCardAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PCIExpressSlotAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "UltrabayAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "IntegratedCameraAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "MicrophoneAccess"
                }, 

                Package (0x02)
                {
                    0x0A, 
                    "BootMode"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "StartupOptionKeys"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BootDeviceListF12Option"
                }, 

                Package (0x02)
                {
                    0x64, 
                    "BootOrder"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WiMAXAccess"
                }, 

                Package (0x02)
                {
                    0x18, 
                    "AmdVt"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "FingerprintPasswordAuthentication"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "OsDetectionForSwitchableGraphics"
                }, 

                Package (0x02)
                {
                    0x0F, 
                    "AbsolutePersistenceModuleActivation"
                }, 

                Package (0x02)
                {
                    0x01, 
                    "PCIExpressPowerManagement"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "eSATAPortAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "HardwarePasswordManager"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "FnCtrlKeySwap"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BIOSPasswordAtReboot"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "OnByAcAttach"
                }, 

                Package (0x02)
                {
                    0x64, 
                    "NetworkBoot"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BootOrderLock"
                }, 

                Package (0x02)
                {
                    0x11, 
                    "ExpressCardSpeed"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "RapidStartTechnology"
                }, 

                Package (0x02)
                {
                    0x12, 
                    "KeyboardIllumination"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "IPv4NetworkStack"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "IPv6NetworkStack"
                }, 

                Package (0x02)
                {
                    0x13, 
                    "UefiPxeBootPriority"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PhysicalPresenceForTpmClear"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "SecureRollBackPrevention"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "SecureBoot"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "NfcAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BottomCoverTamperDetected"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PasswordCountExceededError"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BIOSPasswordAtBootDeviceList"
                }, 

                Package (0x02)
                {
                    0x14, 
                    "UMAFramebufferSize"
                }, 

                Package (0x02)
                {
                    0x15, 
                    "BootTimeExtension"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "FnKeyAsPrimary"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WirelessAutoDisconnection"
                }, 

                Package (0x02)
                {
                    0x1B, 
                    "MACAddressPassThrough"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WindowsUEFIFirmwareUpdate"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WakeOnLANDock"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "DeviceGuard"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WiFiNetworkBoot"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "LenovoCloudServices"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "IntegratedAudioAccess"
                }, 

                Package (0x02)
                {
                    0x0F, 
                    "ComputraceModuleActivation"
                }, 

                Package (0x02)
                {
                    0x1C, 
                    "MaxPasswordAttempts"
                }, 

                Package (0x02)
                {
                    0x1D, 
                    "PasswordChangeTime"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "SystemManagementPasswordControl"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PowerOnPasswordControl"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "HardDiskPasswordControl"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BIOSSetupConfigurations"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "EnhancedWindowsBiometricSecurity"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ThinkShieldsecurewipe"
                }, 

                Package (0x02)
                {
                    0x1E, 
                    "SetupUI"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ChargeInBatteryMode"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "StrongPassword"
                }, 

                Package (0x02)
                {
                    0x20, 
                    "KeyboardLayout"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "Allow3rdPartyUEFICA"
                }, 

                Package (0x02)
                {
                    0x21, 
                    "WakeUponAlarm"
                }, 

                Package (0x02)
                {
                    0x22, 
                    "AlarmDate"
                }, 

                Package (0x02)
                {
                    0x23, 
                    "AlarmTime"
                }, 

                Package (0x02)
                {
                    0x24, 
                    "AlarmDayofWeek"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "UserDefinedAlarmSunday"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "UserDefinedAlarmMonday"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "UserDefinedAlarmTuesday"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "UserDefinedAlarmWednesday"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "UserDefinedAlarmThursday"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "UserDefinedAlarmFriday"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "UserDefinedAlarmSaturday"
                }, 

                Package (0x02)
                {
                    0x23, 
                    "UserDefinedAlarmTime"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BlockSIDAuthentication"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "IntelligentCoolingBoost"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ePrivacyLock"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ThinkShieldPasswordlessPowerOnAuthentication"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "DashEnabled"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "TSME"
                }, 

                Package (0x02)
                {
                    0x28, 
                    "HDMIModeSelect"
                }, 

                Package (0x02)
                {
                    0x29, 
                    "TpmSelection"
                }, 

                Package (0x02)
                {
                    0x2A, 
                    "PlutonSecurityProcessor"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "CoolQuietOnLap"
                }
            })
            Name (VSEL, Package (0x2B)
            {
                Package (0x02)
                {
                    "Disable", 
                    "Enable"
                }, 

                Package (0x02)
                {
                    "Disable", 
                    "Automatic"
                }, 

                Package (0x04)
                {
                    "Active", 
                    "Inactive", 
                    "Disable", 
                    "Enable"
                }, 

                Package (0x02)
                {
                    "Normal", 
                    "High"
                }, 

                Package (0x02)
                {
                    "Independent", 
                    "Synchronized"
                }, 

                Package (0x04)
                {
                    "LCD", 
                    "", 
                    "", 
                    "ExternalDisplay"
                }, 

                Package (0x03)
                {
                    "High", 
                    "Normal", 
                    "Silent"
                }, 

                Package (0x02)
                {
                    "Compatibility", 
                    "AHCI"
                }, 

                Package (0x02)
                {
                    "External", 
                    "InternalOnly"
                }, 

                Package (0x02)
                {
                    "MaximizePerformance", 
                    "Balanced"
                }, 

                Package (0x02)
                {
                    "Quick", 
                    "Diagnostics"
                }, 

                Package (0x0A)
                {
                    "Disable", 
                    "4", 
                    "5", 
                    "6", 
                    "7", 
                    "8", 
                    "9", 
                    "10", 
                    "11", 
                    "12"
                }, 

                Package (0x03)
                {
                    "Auto", 
                    "On", 
                    "Off"
                }, 

                Package (0x02)
                {
                    "SwitchableGfx", 
                    "DiscreteGfx"
                }, 

                Package (0x03)
                {
                    "Disable", 
                    "ACOnly", 
                    "ACandBattery"
                }, 

                Package (0x03)
                {
                    "Disable", 
                    "Enable", 
                    "PermanentlyDisable"
                }, 

                Package (0x02)
                {
                    "HDMI", 
                    "USBTypeC"
                }, 

                Package (0x02)
                {
                    "Generation1", 
                    "Automatic"
                }, 

                Package (0x03)
                {
                    "ThinkLightOnly", 
                    "BacklightOnly", 
                    "Both"
                }, 

                Package (0x02)
                {
                    "IPv6First", 
                    "IPv4First"
                }, 

                Package (0x05)
                {
                    "Auto", 
                    "1GB", 
                    "2GB", 
                    "4GB", 
                    "8GB"
                }, 

                Package (0x0B)
                {
                    "Disable", 
                    "1", 
                    "2", 
                    "3", 
                    "", 
                    "5", 
                    "", 
                    "", 
                    "", 
                    "", 
                    "10"
                }, 

                Package (0x03)
                {
                    "Disable", 
                    "Enable", 
                    "SoftwareControl"
                }, 

                Package (0x04)
                {
                    "NoSecurity", 
                    "UserAuthorization", 
                    "SecureConnect", 
                    "DisplayPortandUSB"
                }, 

                Package (0x02)
                {
                    "Disable", 
                    "Enable"
                }, 

                Package (0x03)
                {
                    "Enable", 
                    "Disable", 
                    ""
                }, 

                Package (0x03)
                {
                    "Disable", 
                    "Enable", 
                    "Pre-BootACL"
                }, 

                Package (0x03)
                {
                    "Disable", 
                    "Enable", 
                    "Second"
                }, 

                Package (0x04)
                {
                    "Unlimited", 
                    "1", 
                    "3", 
                    "100"
                }, 

                Package (0x02)
                {
                    "Immediately", 
                    "AfterReboot"
                }, 

                Package (0x02)
                {
                    "SimpleText", 
                    "Graphical"
                }, 

                Package (0x02)
                {
                    "Linux", 
                    "Windows 10"
                }, 

                Package (0x1B)
                {
                    "English_US", 
                    "CanadianFrenchMultilingual", 
                    "CanadianFrench", 
                    "Spanish_LA", 
                    "Portuguese_BR", 
                    "Belgian", 
                    "Danish", 
                    "Spanish", 
                    "French", 
                    "German", 
                    "Hungarian", 
                    "Icelandic", 
                    "Italian", 
                    "Norwegian", 
                    "Portuguese", 
                    "Slovenian", 
                    "Swedish", 
                    "Swiss", 
                    "Turkish", 
                    "English_UK", 
                    "Japanese", 
                    "Korean", 
                    "TraditionalChinese", 
                    "Turkish-F", 
                    "Estonian", 
                    "Finnish", 
                    "Czech"
                }, 

                Package (0x05)
                {
                    "Disable", 
                    "UserDefined", 
                    "WeeklyEvent", 
                    "DailyEvent", 
                    "SingleEvent"
                }, 

                Package (0x01)
                {
                    "MM/DD/YYYY"
                }, 

                Package (0x01)
                {
                    "HH/MM/SS"
                }, 

                Package (0x07)
                {
                    "Sunday", 
                    "Monday", 
                    "Tuesday", 
                    "Wednesday", 
                    "Thursday", 
                    "Friday", 
                    "Saturday"
                }, 

                Package (0x03)
                {
                    "Near", 
                    "Middle", 
                    "Far"
                }, 

                Package (0x03)
                {
                    "Fast", 
                    "Medium", 
                    "Slow"
                }, 

                Package (0x02)
                {
                    "No", 
                    "Yes"
                }, 

                Package (0x02)
                {
                    "HDMI1.4", 
                    "HDMI2.0"
                }, 

                Package (0x02)
                {
                    "DiscreteTPM2.0", 
                    "PlutonTPM2.0"
                }, 

                Package (0x03)
                {
                    "Disable", 
                    "Enable", 
                    "Disable(SW_Controlled)"
                }
            })
            Name (VLST, Package (0x14)
            {
                "HDD0", 
                "HDD1", 
                "HDD2", 
                "HDD3", 
                "HDD4", 
                "PXEBOOT", 
                "ATAPICD0", 
                "ATAPICD1", 
                "ATAPICD2", 
                "USBFDD", 
                "USBCD", 
                "USBHDD", 
                "OtherHDD", 
                "OtherCD", 
                "NVMe0", 
                "NVMe1", 
                "HTTPSBOOT", 
                "LENOVOCLOUD", 
                "ON-PREMISE", 
                "NODEV"
            })
            Name (VR01, Package (0x67)
            {
                "0000", 
                "1998", 
                "1999", 
                "2000", 
                "2001", 
                "2002", 
                "2003", 
                "2004", 
                "2005", 
                "2006", 
                "2007", 
                "2008", 
                "2009", 
                "2010", 
                "2011", 
                "2012", 
                "2013", 
                "2014", 
                "2015", 
                "2016", 
                "2017", 
                "2018", 
                "2019", 
                "2020", 
                "2021", 
                "2022", 
                "2023", 
                "2024", 
                "2025", 
                "2026", 
                "2027", 
                "2028", 
                "2029", 
                "2030", 
                "2031", 
                "2032", 
                "2033", 
                "2034", 
                "2035", 
                "2036", 
                "2037", 
                "2038", 
                "2039", 
                "2040", 
                "2041", 
                "2042", 
                "2043", 
                "2044", 
                "2045", 
                "2046", 
                "2047", 
                "2048", 
                "2049", 
                "2050", 
                "2051", 
                "2052", 
                "2053", 
                "2054", 
                "2055", 
                "2056", 
                "2057", 
                "2058", 
                "2059", 
                "2060", 
                "2061", 
                "2062", 
                "2063", 
                "2064", 
                "2065", 
                "2066", 
                "2067", 
                "2068", 
                "2069", 
                "2070", 
                "2071", 
                "2072", 
                "2073", 
                "2074", 
                "2075", 
                "2076", 
                "2077", 
                "2078", 
                "2079", 
                "2080", 
                "2081", 
                "2082", 
                "2083", 
                "2084", 
                "2085", 
                "2086", 
                "2087", 
                "2088", 
                "2089", 
                "2090", 
                "2091", 
                "2092", 
                "2093", 
                "2094", 
                "2095", 
                "2096", 
                "2097", 
                "2098", 
                "2099"
            })
            Name (VR02, Package (0x0D)
            {
                "00", 
                "01", 
                "02", 
                "03", 
                "04", 
                "05", 
                "06", 
                "07", 
                "08", 
                "09", 
                "10", 
                "11", 
                "12"
            })
            Name (VR03, Package (0x20)
            {
                "00", 
                "01", 
                "02", 
                "03", 
                "04", 
                "05", 
                "06", 
                "07", 
                "08", 
                "09", 
                "10", 
                "11", 
                "12", 
                "13", 
                "14", 
                "15", 
                "16", 
                "17", 
                "18", 
                "19", 
                "20", 
                "21", 
                "22", 
                "23", 
                "24", 
                "25", 
                "26", 
                "27", 
                "28", 
                "29", 
                "30", 
                "31"
            })
            Name (VR04, Package (0x18)
            {
                "00", 
                "01", 
                "02", 
                "03", 
                "04", 
                "05", 
                "06", 
                "07", 
                "08", 
                "09", 
                "10", 
                "11", 
                "12", 
                "13", 
                "14", 
                "15", 
                "16", 
                "17", 
                "18", 
                "19", 
                "20", 
                "21", 
                "22", 
                "23"
            })
            Name (VR05, Package (0x3C)
            {
                "00", 
                "01", 
                "02", 
                "03", 
                "04", 
                "05", 
                "06", 
                "07", 
                "08", 
                "09", 
                "10", 
                "11", 
                "12", 
                "13", 
                "14", 
                "15", 
                "16", 
                "17", 
                "18", 
                "19", 
                "20", 
                "21", 
                "22", 
                "23", 
                "24", 
                "25", 
                "26", 
                "27", 
                "28", 
                "29", 
                "30", 
                "31", 
                "32", 
                "33", 
                "34", 
                "35", 
                "36", 
                "37", 
                "38", 
                "39", 
                "40", 
                "41", 
                "42", 
                "43", 
                "44", 
                "45", 
                "46", 
                "47", 
                "48", 
                "49", 
                "50", 
                "51", 
                "52", 
                "53", 
                "54", 
                "55", 
                "56", 
                "57", 
                "58", 
                "59"
            })
            Name (PENC, Package (0x02)
            {
                "ascii", 
                "scancode"
            })
            Name (PKBD, Package (0x03)
            {
                "us", 
                "fr", 
                "gr"
            })
            Name (PTYP, Package (0x13)
            {
                "pap", 
                "pop", 
                "uhdp1", 
                "mhdp1", 
                "uhdp2", 
                "mhdp2", 
                "uhdp3", 
                "mhdp3", 
                "uhdp4", 
                "mhdp4", 
                "udrp1", 
                "adrp1", 
                "udrp2", 
                "adrp2", 
                "udrp3", 
                "adrp3", 
                "udrp4", 
                "adrp4", 
                "smp"
            })
            Name (OPCD, Package (0x0E)
            {
                "WmiOpcodePasswordType", 
                "WmiOpcodePasswordCurrent01", 
                "WmiOpcodePasswordCurrent02", 
                "WmiOpcodePasswordCurrent03", 
                "WmiOpcodePasswordCurrent04", 
                "WmiOpcodePasswordNew01", 
                "WmiOpcodePasswordNew02", 
                "WmiOpcodePasswordNew03", 
                "WmiOpcodePasswordNew04", 
                "WmiOpcodePasswordEncode", 
                "WmiOpcodePasswordSetUpdate", 
                "WmiOpcodePasswordAdmin", 
                "WmiOpcodeTPM", 
                "WmiOpcodePasswordFree"
            })
            Name (FUNC, Package (0x06)
            {
                Package (0x02)
                {
                    0x27, 
                    "ClearSecurityChip"
                }, 

                Package (0x02)
                {
                    0x27, 
                    "ResetFingerprintData"
                }, 

                Package (0x02)
                {
                    0x27, 
                    "ResettoSetupMode"
                }, 

                Package (0x02)
                {
                    0x27, 
                    "RestoreFactoryKeys"
                }, 

                Package (0x02)
                {
                    0x27, 
                    "ClearAllSecureBootKeys"
                }, 

                Package (0x02)
                {
                    0x27, 
                    "ResetSystemToFactoryDefaults"
                }
            })
            Mutex (MWMI, 0x00)
            Name (PCFG, Buffer (0x18){})
            Name (IBUF, Buffer (0x0600){})
            Name (ILEN, 0x00)
            Name (PSTR, Buffer (0x81){})
            Name (ALEN, 0x00)
            Method (WQA0, 1, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((WMIS (0x00, Arg0) != 0x00))
                {
                    Release (MWMI)
                    Return ("")
                }

                Local0 = DerefOf (ITEM [WITM])
                Local1 = DerefOf (Local0 [0x00])
                Local2 = DerefOf (Local0 [0x01])
                If ((Local1 == 0x22))
                {
                    Concatenate (Local2, ",", Local6)
                    Concatenate (Local6, DerefOf (VR02 [RTC1]), Local7)
                    Concatenate (Local7, "/", Local6)
                    Concatenate (Local6, DerefOf (VR03 [RTC2]), Local7)
                    Concatenate (Local7, "/", Local6)
                    Concatenate (Local6, DerefOf (VR01 [RTC0]), Local7)
                }
                ElseIf ((Local1 == 0x23))
                {
                    Concatenate (Local2, ",", Local6)
                    Concatenate (Local6, DerefOf (VR04 [RTC0]), Local7)
                    Concatenate (Local7, ":", Local6)
                    Concatenate (Local6, DerefOf (VR05 [RTC1]), Local7)
                    Concatenate (Local7, ":", Local6)
                    Concatenate (Local6, DerefOf (VR05 [RTC2]), Local7)
                }
                ElseIf ((Local1 < 0x64))
                {
                    Concatenate (Local2, ",", Local6)
                    Local3 = DerefOf (VSEL [Local1])
                    Concatenate (Local6, DerefOf (Local3 [WSEL]), Local7)
                }
                Else
                {
                    Local3 = SizeOf (VLST)
                    If ((WLS0 <= Local3))
                    {
                        Concatenate (Local2, ",", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS0]), Local2)
                    }

                    If ((WLS1 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS1]), Local2)
                    }

                    If ((WLS2 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS2]), Local2)
                    }

                    If ((WLS3 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS3]), Local2)
                    }

                    If ((WLS4 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS4]), Local2)
                    }

                    If ((WLS5 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS5]), Local2)
                    }

                    If ((WLS6 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS6]), Local2)
                    }

                    If ((WLS7 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS7]), Local2)
                    }

                    If ((WLS8 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS8]), Local2)
                    }

                    If ((WLS9 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS9]), Local2)
                    }

                    If ((WLSA <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLSA]), Local2)
                    }

                    If ((WLSB <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLSB]), Local2)
                    }

                    If ((WLSC <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLSC]), Local2)
                    }

                    If ((WLSD <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLSD]), Local2)
                    }

                    Local7 = Local2
                }

                Release (MWMI)
                Return (Local7)
            }

            Method (WMA1, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == 0x00))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = CARG (Arg2)
                    If ((Local0 == 0x00))
                    {
                        Local0 = WSET (ITEM, VSEL)
                        If ((Local0 == 0x00))
                        {
                            Local0 = WMIS (0x01, 0x00)
                        }
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMA2, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local0 = CARG (Arg2)
                If ((Local0 == 0x00))
                {
                    If ((ILEN != 0x00))
                    {
                        Local0 = CPAS (IBUF, 0x00)
                    }

                    If ((Local0 == 0x00))
                    {
                        Local0 = WMIS (0x02, 0x00)
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMA3, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local0 = CARG (Arg2)
                If ((Local0 == 0x00))
                {
                    If ((ILEN != 0x00))
                    {
                        Local0 = CPAS (IBUF, 0x00)
                    }

                    If ((Local0 == 0x00))
                    {
                        Local0 = WMIS (0x03, 0x00)
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMA4, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local0 = CARG (Arg2)
                If ((Local0 == 0x00))
                {
                    If ((ILEN != 0x00))
                    {
                        Local0 = CPAS (IBUF, 0x00)
                    }

                    If ((Local0 == 0x00))
                    {
                        Local0 = WMIS (0x04, 0x00)
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WQA5, 1, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                WMIS (0x05, 0x00)
                PCFG [0x00] = WSPM /* \WSPM */
                PCFG [0x04] = WSPS /* \WSPS */
                PCFG [0x08] = WSMN /* \WSMN */
                PCFG [0x0C] = WSMX /* \WSMX */
                PCFG [0x10] = WSEN /* \WSEN */
                PCFG [0x14] = WSKB /* \WSKB */
                Release (MWMI)
                Return (PCFG) /* \_SB_.WMI1.PCFG */
            }

            Method (WMA6, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == 0x00))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = CARG (Arg2)
                    If ((Local0 == 0x00))
                    {
                        If ((ILEN != 0x00))
                        {
                            Local0 = SPAS (IBUF)
                        }

                        If ((Local0 == 0x00))
                        {
                            Local0 = WMIS (0x06, 0x00)
                        }
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMA7, 3, NotSerialized)
            {
                If ((SizeOf (Arg2) == 0x00))
                {
                    Return ("")
                }

                Local0 = CARG (Arg2)
                If ((Local0 == 0x00))
                {
                    Local1 = GITM (IBUF, ITEM)
                    If ((Local1 == Ones))
                    {
                        Return ("")
                    }

                    Local0 = DerefOf (ITEM [Local1])
                    Local1 = DerefOf (Local0 [0x00])
                    If ((Local1 < 0x64))
                    {
                        Local3 = DerefOf (VSEL [Local1])
                        Local2 = DerefOf (Local3 [0x00])
                        Local4 = SizeOf (Local3)
                        Local5 = 0x01
                        While ((Local5 < Local4))
                        {
                            Local6 = DerefOf (Local3 [Local5])
                            If ((SizeOf (Local6) != 0x00))
                            {
                                Concatenate (Local2, ",", Local7)
                                Concatenate (Local7, Local6, Local2)
                            }

                            Local5++
                        }
                    }
                    Else
                    {
                        Local2 = DerefOf (VLST [0x00])
                        Local4 = SizeOf (VLST)
                        Local5 = 0x01
                        While ((Local5 < Local4))
                        {
                            Local6 = DerefOf (VLST [Local5])
                            Concatenate (Local2, ",", Local7)
                            Concatenate (Local7, Local6, Local2)
                            Local5++
                        }
                    }
                }

                Return (Local2)
            }

            Method (WQA8, 1, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((WMIS (0x10, Arg0) != 0x00))
                {
                    Release (MWMI)
                    Return ("")
                }

                Local0 = DerefOf (FUNC [WITM])
                Local1 = DerefOf (Local0 [0x00])
                Local2 = DerefOf (Local0 [0x01])
                Concatenate (Local2, ",", Local6)
                Local3 = DerefOf (VSEL [Local1])
                Concatenate (Local6, DerefOf (Local3 [WSEL]), Local7)
                Release (MWMI)
                Return (Local7)
            }

            Method (WMA9, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == 0x00))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = CARG (Arg2)
                    If ((Local0 == 0x00))
                    {
                        Local0 = WSET (FUNC, VSEL)
                        If ((Local0 == 0x00))
                        {
                            Local0 = WMIS (0x11, 0x00)
                        }
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMC0, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == 0x00))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = CARG (Arg2)
                    If ((Local0 == 0x00))
                    {
                        Local6 = GSEL (OPCD, IBUF, 0x00, 0x01)
                        If ((Local6 != Ones))
                        {
                            Local4 = DerefOf (OPCD [Local6])
                            Local2 = SizeOf (Local4)
                            Local3 = DerefOf (IBUF [Local2])
                            If (((Local3 == 0x2C) || (Local3 == 0x3A)))
                            {
                                Local2++
                            }

                            Local0 = 0x00
                            If ((Local6 == 0x00))
                            {
                                WPTY = 0xFF
                                Local7 = GSEL (PTYP, IBUF, Local2, 0x01)
                                If ((Local7 != Ones))
                                {
                                    WPTY = Local7
                                }
                                Else
                                {
                                    Local0 = 0x02
                                }
                            }
                            ElseIf ((Local6 == 0x01))
                            {
                                PSTR = 0x00
                                Local1 = GPAO (IBUF, Local2)
                                If ((Local1 == Ones))
                                {
                                    Local0 = 0x02
                                }

                                If ((Local0 == 0x00))
                                {
                                    WPAS = PSTR /* \_SB_.WMI1.PSTR */
                                }
                            }
                            ElseIf ((Local6 == 0x05))
                            {
                                PSTR = 0x00
                                Local1 = GPAO (IBUF, Local2)
                                If ((Local1 == Ones))
                                {
                                    Local0 = 0x02
                                }

                                If ((Local1 == 0x00))
                                {
                                    PSTR = 0x00
                                }

                                If ((Local0 == 0x00))
                                {
                                    WPNW = PSTR /* \_SB_.WMI1.PSTR */
                                }
                            }
                            ElseIf ((Local6 == 0x0A))
                            {
                                Local0 = 0x00
                            }
                            ElseIf ((Local6 == 0x0B))
                            {
                                PSTR = 0x00
                                Local1 = GPAO (IBUF, Local2)
                                If ((Local1 == Ones))
                                {
                                    Local0 = 0x02
                                }

                                If ((Local1 == 0x00))
                                {
                                    Local0 = 0x02
                                }

                                If ((Local0 == 0x00))
                                {
                                    WPAS = PSTR /* \_SB_.WMI1.PSTR */
                                }
                            }
                            Else
                            {
                                Local0 = 0x02
                            }

                            If ((Local0 == 0x00))
                            {
                                Local0 = WMIS (0x0F, Local6)
                            }
                        }
                        Else
                        {
                            Local0 = 0x02
                        }
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMAA, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                WEXF = 0x01
                If ((SizeOf (Arg2) == 0x00))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = CARG (Arg2)
                    If ((Local0 == 0x00))
                    {
                        CBFF = 0x00
                        CBFF = IBUF /* \_SB_.WMI1.IBUF */
                        Local0 = WSET (ITEM, VSEL)
                        If ((Local0 == 0x00))
                        {
                            Local0 = WMIS (0x01, 0x00)
                        }

                        CBFF = 0x00
                    }
                }

                WEXF = 0x00
                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMAB, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                WEXF = 0x01
                Local0 = CARG (Arg2)
                If ((Local0 == 0x00))
                {
                    If ((ILEN != 0x00))
                    {
                        CBFF = 0x00
                        CBFF = IBUF /* \_SB_.WMI1.IBUF */
                        Local0 = WMIS (0x02, 0x00)
                    }
                    Else
                    {
                        Local0 = 0x02
                    }
                }

                CBFF = 0x00
                WEXF = 0x00
                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMAC, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                WEXF = 0x01
                Local0 = CARG (Arg2)
                If ((Local0 == 0x00))
                {
                    If ((ILEN != 0x00))
                    {
                        CBFF = IBUF /* \_SB_.WMI1.IBUF */
                        Local0 = WMIS (0x03, 0x00)
                    }
                    Else
                    {
                        Local0 = 0x02
                    }
                }

                CBFF = 0x00
                WEXF = 0x00
                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMAD, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                WEXF = 0x01
                Local0 = CARG (Arg2)
                If ((Local0 == 0x00))
                {
                    If ((ILEN != 0x00))
                    {
                        CBFF = IBUF /* \_SB_.WMI1.IBUF */
                        Local0 = WMIS (0x04, 0x00)
                    }
                    Else
                    {
                        Local0 = 0x02
                    }
                }

                CBFF = 0x00
                WEXF = 0x00
                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMAE, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                WEXF = 0x01
                If ((SizeOf (Arg2) == 0x00))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = CARG (Arg2)
                    If ((Local0 == 0x00))
                    {
                        If ((ILEN != 0x00))
                        {
                            CBFF = IBUF /* \_SB_.WMI1.IBUF */
                            Local0 = WMIS (0x06, 0x00)
                        }
                        Else
                        {
                            Local0 = 0x02
                        }
                    }
                }

                CBFF = 0x00
                WEXF = 0x00
                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMAF, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                WEXF = 0x01
                If ((SizeOf (Arg2) == 0x00))
                {
                    Local0 = 0x02
                }
                Else
                {
                    CBFF = IBUF /* \_SB_.WMI1.IBUF */
                    Local0 = CARG (Arg2)
                    If ((Local0 == 0x00))
                    {
                        CBFF = IBUF /* \_SB_.WMI1.IBUF */
                        Local0 = WSET (FUNC, VSEL)
                        If ((Local0 == 0x00))
                        {
                            Local0 = WMIS (0x11, 0x00)
                        }
                    }
                }

                CBFF = 0x00
                WEXF = 0x00
                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (CARG, 1, NotSerialized)
            {
                Local0 = SizeOf (Arg0)
                If ((Local0 == 0x00))
                {
                    IBUF = 0x00
                    ILEN = 0x00
                    Return (0x00)
                }

                If ((ObjectType (Arg0) != 0x02))
                {
                    Return (0x02)
                }

                If ((WEXF == 0x01))
                {
                    If ((Local0 >= 0x05FF))
                    {
                        Return (0x02)
                    }
                }
                ElseIf ((Local0 >= 0x01FF))
                {
                    Return (0x02)
                }

                IBUF = Arg0
                Local0--
                Local1 = DerefOf (IBUF [Local0])
                If (((Local1 == 0x3B) || (Local1 == 0x2A)))
                {
                    IBUF [Local0] = 0x00
                    ILEN = Local0
                }
                Else
                {
                    ILEN = SizeOf (Arg0)
                }

                Return (0x00)
            }

            Method (SCMP, 4, NotSerialized)
            {
                Local0 = SizeOf (Arg0)
                If ((Local0 == 0x00))
                {
                    Return (0x00)
                }

                Local0++
                Name (STR1, Buffer (Local0){})
                STR1 = Arg0
                Local0--
                If ((ALEN != 0x00))
                {
                    Local0 = ALEN /* \_SB_.WMI1.ALEN */
                }

                Local1 = 0x00
                Local2 = Arg2
                While ((Local1 < Local0))
                {
                    Local3 = DerefOf (STR1 [Local1])
                    Local4 = DerefOf (Arg1 [Local2])
                    If ((Arg3 == 0x01))
                    {
                        If ((Local3 >= 0x41))
                        {
                            If ((Local3 <= 0x5A))
                            {
                                Local3 += 0x20
                            }
                        }

                        If ((Local4 >= 0x41))
                        {
                            If ((Local4 <= 0x5A))
                            {
                                Local4 += 0x20
                            }
                        }
                    }

                    If ((Local3 != Local4))
                    {
                        Return (0x00)
                    }

                    Local1++
                    Local2++
                }

                If ((ALEN != 0x00))
                {
                    Return (0x01)
                }

                Local4 = DerefOf (Arg1 [Local2])
                If ((Local4 == 0x00))
                {
                    Return (0x01)
                }

                If (((Local4 == 0x2C) || (Local4 == 0x3A)))
                {
                    Return (0x01)
                }

                Return (0x00)
            }

            Method (GITM, 2, NotSerialized)
            {
                Local0 = 0x00
                Local1 = SizeOf (Arg1)
                While ((Local0 < Local1))
                {
                    Local3 = DerefOf (DerefOf (Arg1 [Local0]) [0x01])
                    If (SCMP (Local3, Arg0, 0x00, 0x00))
                    {
                        Return (Local0)
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (GSEL, 4, NotSerialized)
            {
                Local0 = 0x00
                Local1 = SizeOf (Arg0)
                While ((Local0 < Local1))
                {
                    Local2 = DerefOf (Arg0 [Local0])
                    If (SCMP (Local2, Arg1, Arg2, Arg3))
                    {
                        Return (Local0)
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (SLEN, 2, NotSerialized)
            {
                Local0 = DerefOf (Arg0 [Arg1])
                Return (SizeOf (Local0))
            }

            Method (CLRP, 0, NotSerialized)
            {
                WPAS = 0x00
                WPNW = 0x00
            }

            Method (GPAS, 2, NotSerialized)
            {
                Local0 = Arg1
                Local1 = 0x00
                While ((Local1 <= 0x80))
                {
                    Local2 = DerefOf (Arg0 [Local0])
                    If (((Local2 == 0x2C) || (Local2 == 0x00)))
                    {
                        PSTR [Local1] = 0x00
                        Return (Local1)
                    }

                    PSTR [Local1] = Local2
                    Local0++
                    Local1++
                }

                PSTR [Local1] = 0x00
                Return (Ones)
            }

            Method (GPAO, 2, NotSerialized)
            {
                Local0 = Arg1
                Local1 = 0x00
                While ((Local1 <= 0x80))
                {
                    Local2 = DerefOf (Arg0 [Local0])
                    If ((Local2 == 0x00))
                    {
                        PSTR [Local1] = 0x00
                        Return (Local1)
                    }

                    PSTR [Local1] = Local2
                    Local0++
                    Local1++
                }

                Local1--
                PSTR [Local1] = 0x00
                Return (Ones)
            }

            Method (CPAS, 2, NotSerialized)
            {
                CLRP ()
                Local0 = Arg1
                Local1 = GPAS (Arg0, Local0)
                If ((Local1 == Ones))
                {
                    Return (0x02)
                }

                If ((Local1 == 0x00))
                {
                    Return (0x02)
                }

                WPAS = PSTR /* \_SB_.WMI1.PSTR */
                Local0 += Local1
                Local0++
                Local6 = GSEL (PENC, Arg0, Local0, 0x00)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                WENC = Local6
                If ((Local6 == 0x00))
                {
                    Local0 += SLEN (PENC, 0x00)
                    If ((DerefOf (Arg0 [Local0]) != 0x2C))
                    {
                        Return (0x02)
                    }

                    Local0++
                    Local6 = GSEL (PKBD, Arg0, Local0, 0x00)
                    If ((Local6 == Ones))
                    {
                        Return (0x02)
                    }

                    WKBD = Local6
                }

                Return (0x00)
            }

            Method (SPAS, 1, NotSerialized)
            {
                CLRP ()
                Local6 = GSEL (PTYP, Arg0, 0x00, 0x00)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                WPTY = Local6
                Local0 = SLEN (PTYP, Local6)
                If ((DerefOf (Arg0 [Local0]) != 0x2C))
                {
                    Return (0x02)
                }

                Local0++
                PSTR = 0x00
                Local1 = GPAS (Arg0, Local0)
                If ((Local1 == Ones))
                {
                    Return (0x02)
                }

                WPAS = PSTR /* \_SB_.WMI1.PSTR */
                Local0 += Local1
                If ((DerefOf (Arg0 [Local0]) != 0x2C))
                {
                    Return (0x02)
                }

                Local0++
                PSTR = 0x00
                Local1 = GPAS (Arg0, Local0)
                If ((Local1 == Ones))
                {
                    Return (0x02)
                }

                If ((Local1 == 0x00))
                {
                    PSTR = 0x00
                }

                WPNW = PSTR /* \_SB_.WMI1.PSTR */
                Local0 += Local1
                Local0++
                Local6 = GSEL (PENC, Arg0, Local0, 0x00)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                WENC = Local6
                If ((Local6 == 0x00))
                {
                    Local0 += SLEN (PENC, 0x00)
                    If ((DerefOf (Arg0 [Local0]) != 0x2C))
                    {
                        Return (0x02)
                    }

                    Local0++
                    Local6 = GSEL (PKBD, Arg0, Local0, 0x00)
                    If ((Local6 == Ones))
                    {
                        Return (0x02)
                    }

                    WKBD = Local6
                }

                Return (0x00)
            }

            Method (WSET, 2, NotSerialized)
            {
                Local0 = ILEN /* \_SB_.WMI1.ILEN */
                Local0++
                Local1 = GITM (IBUF, Arg0)
                If ((Local1 == Ones))
                {
                    Return (0x02)
                }

                WITM = Local1
                Local3 = DerefOf (Arg0 [Local1])
                Local4 = DerefOf (Local3 [0x01])
                Local2 = SizeOf (Local4)
                Local2++
                Local4 = DerefOf (Local3 [0x00])
                If ((Local4 == 0x22))
                {
                    If ((ALMD (Local2) != 0x00))
                    {
                        Return (0x02)
                    }

                    Local2 += 0x0A
                    Local4 = DerefOf (IBUF [Local2])
                }
                ElseIf ((Local4 == 0x23))
                {
                    If ((ALMT (Local2) != 0x00))
                    {
                        Return (0x02)
                    }

                    Local2 += 0x08
                    Local4 = DerefOf (IBUF [Local2])
                }
                ElseIf ((Local4 < 0x64))
                {
                    Local5 = DerefOf (Arg1 [Local4])
                    Local6 = GSEL (Local5, IBUF, Local2, 0x00)
                    If ((Local6 == Ones))
                    {
                        Return (0x02)
                    }

                    WSEL = Local6
                    Local2 += SLEN (Local5, Local6)
                    Local4 = DerefOf (IBUF [Local2])
                }
                Else
                {
                    WLS0 = 0x3F
                    WLS1 = 0x3F
                    WLS2 = 0x3F
                    WLS3 = 0x3F
                    WLS4 = 0x3F
                    WLS5 = 0x3F
                    WLS6 = 0x3F
                    WLS7 = 0x3F
                    WLS8 = 0x3F
                    WLS9 = 0x3F
                    WLSA = 0x3F
                    WLSB = 0x3F
                    WLSC = 0x3F
                    WLSD = 0x3F
                    Local6 = GSEL (VLST, IBUF, Local2, 0x00)
                    If ((Local6 == Ones))
                    {
                        Return (0x02)
                    }

                    WLS0 = Local6
                    Local2 += SLEN (VLST, Local6)
                    Local4 = DerefOf (IBUF [Local2])
                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, 0x00)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS1 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, 0x00)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS2 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, 0x00)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS3 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, 0x00)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS4 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, 0x00)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS5 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, 0x00)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS6 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, 0x00)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS7 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, 0x00)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS8 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, 0x00)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS9 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, 0x00)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLSA = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, 0x00)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLSB = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, 0x00)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLSC = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, 0x00)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLSD = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }
                }

                If ((WEXF == 0x00))
                {
                    If (((Local4 == 0x2C) && (Local2 < Local0)))
                    {
                        Local2++
                        Local0 = CPAS (IBUF, Local2)
                        If ((Local0 != 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Return (0x00)
            }

            Method (ALMD, 1, NotSerialized)
            {
                Local0 = Arg0
                Local1 = VR02 /* \_SB_.WMI1.VR02 */
                ALEN = 0x02
                Local2 = GSEL (Local1, IBUF, Local0, 0x00)
                ALEN = 0x00
                If ((Local2 == Ones))
                {
                    Return (0x02)
                }

                RTC1 = Local2
                Local0++
                Local0++
                Local3 = DerefOf (IBUF [Local0])
                If ((Local3 != 0x2F))
                {
                    Return (0x02)
                }

                Local0++
                Local1 = VR03 /* \_SB_.WMI1.VR03 */
                ALEN = 0x02
                Local2 = GSEL (Local1, IBUF, Local0, 0x00)
                ALEN = 0x00
                If ((Local2 == Ones))
                {
                    Return (0x02)
                }

                RTC2 = Local2
                Local0++
                Local0++
                Local3 = DerefOf (IBUF [Local0])
                If ((Local3 != 0x2F))
                {
                    Return (0x02)
                }

                Local0++
                Local1 = VR01 /* \_SB_.WMI1.VR01 */
                Local2 = GSEL (Local1, IBUF, Local0, 0x00)
                If ((Local2 == Ones))
                {
                    Return (0x02)
                }

                RTC0 = Local2
                Return (0x00)
            }

            Method (ALMT, 1, NotSerialized)
            {
                Local0 = Arg0
                Local1 = VR04 /* \_SB_.WMI1.VR04 */
                ALEN = 0x02
                Local2 = GSEL (Local1, IBUF, Local0, 0x00)
                ALEN = 0x00
                If ((Local2 == Ones))
                {
                    Return (0x02)
                }

                RTC0 = Local2
                Local0++
                Local0++
                Local3 = DerefOf (IBUF [Local0])
                If ((Local3 != 0x3A))
                {
                    Return (0x02)
                }

                Local0++
                Local1 = VR05 /* \_SB_.WMI1.VR05 */
                ALEN = 0x02
                Local2 = GSEL (Local1, IBUF, Local0, 0x00)
                ALEN = 0x00
                If ((Local2 == Ones))
                {
                    Return (0x02)
                }

                RTC1 = Local2
                Local0++
                Local0++
                Local3 = DerefOf (IBUF [Local0])
                If ((Local3 != 0x3A))
                {
                    Return (0x02)
                }

                Local0++
                Local1 = VR05 /* \_SB_.WMI1.VR05 */
                Local2 = GSEL (Local1, IBUF, Local0, 0x00)
                If ((Local2 == Ones))
                {
                    Return (0x02)
                }

                RTC2 = Local2
                Return (0x00)
            }

            Name (WQBA, Buffer (0x0EAC)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x9C, 0x0E, 0x00, 0x00, 0xFA, 0x72, 0x00, 0x00,  // .....r..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0xD3, 0xB7, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x25, 0x10, 0x0A, 0x0D, 0x21, 0x02, 0x0B,  // .%...!..
                /* 0028 */  0x83, 0x50, 0x4C, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PL...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x0E, 0x88, 0x14, 0x40, 0x48, 0x26, 0x84,  // 1...@H&.
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0xA2, 0xC9, 0xA0, 0x00, 0xA7,  // ........
                /* 0060 */  0x08, 0x82, 0xB4, 0x65, 0x01, 0xBA, 0x05, 0xAC,  // ...e....
                /* 0068 */  0xA8, 0x76, 0x08, 0xA1, 0x55, 0x28, 0xC0, 0xA4,  // .v..U(..
                /* 0070 */  0x00, 0x9F, 0x60, 0xB2, 0x28, 0x40, 0x36, 0x98,  // ..`.(@6.
                /* 0078 */  0x6C, 0xC3, 0x91, 0x61, 0x30, 0x91, 0x63, 0x40,  // l..a0.c@
                /* 0080 */  0x89, 0x19, 0x03, 0x4A, 0xE7, 0x14, 0x64, 0x13,  // ...J..d.
                /* 0088 */  0x58, 0xD0, 0x85, 0xA2, 0x68, 0x1A, 0x51, 0x12,  // X...h.Q.
                /* 0090 */  0x1C, 0xD4, 0x31, 0x44, 0x08, 0x5E, 0xAE, 0x00,  // ..1D.^..
                /* 0098 */  0xC9, 0x13, 0x90, 0xE6, 0x79, 0xC9, 0xFA, 0x20,  // ....y.. 
                /* 00A0 */  0x34, 0x04, 0x36, 0x02, 0x1E, 0x45, 0x02, 0x08,  // 4.6..E..
                /* 00A8 */  0x8B, 0xB1, 0x4C, 0x89, 0x87, 0x41, 0x79, 0x00,  // ..L..Ay.
                /* 00B0 */  0x91, 0x9C, 0xA1, 0xA2, 0x80, 0xED, 0x75, 0x22,  // ......u"
                /* 00B8 */  0x1A, 0xD6, 0x71, 0x32, 0x49, 0x70, 0xA8, 0x51,  // ..q2Ip.Q
                /* 00C0 */  0x5A, 0xA2, 0x00, 0xF3, 0x23, 0xD3, 0x44, 0x8E,  // Z...#.D.
                /* 00C8 */  0xAD, 0xE9, 0x11, 0x0B, 0x92, 0x49, 0x1B, 0x0A,  // .....I..
                /* 00D0 */  0x6A, 0xE8, 0x9E, 0xD6, 0x49, 0x79, 0xA2, 0x11,  // j...Iy..
                /* 00D8 */  0x0F, 0xCA, 0x30, 0x09, 0x3C, 0x0A, 0x86, 0xC6,  // ..0.<...
                /* 00E0 */  0x09, 0xCA, 0x82, 0x90, 0x83, 0x81, 0xA2, 0x00,  // ........
                /* 00E8 */  0x4F, 0xC2, 0x73, 0x2C, 0x5E, 0x80, 0xF0, 0x19,  // O.s,^...
                /* 00F0 */  0x93, 0xA3, 0x40, 0x8C, 0x04, 0x3E, 0x12, 0x78,  // ..@..>.x
                /* 00F8 */  0x34, 0xC7, 0x8C, 0x05, 0x0A, 0x17, 0xF0, 0x7C,  // 4......|
                /* 0100 */  0x8E, 0x21, 0x72, 0xDC, 0x43, 0x8D, 0x71, 0x14,  // .!r.C.q.
                /* 0108 */  0x91, 0x13, 0xBC, 0x03, 0x44, 0x31, 0x5A, 0x41,  // ....D1ZA
                /* 0110 */  0xF3, 0x16, 0x62, 0xB0, 0x68, 0x06, 0xEB, 0x19,  // ..b.h...
                /* 0118 */  0x9C, 0x0C, 0x3A, 0xC1, 0xFF, 0xFF, 0x08, 0xB8,  // ..:.....
                /* 0120 */  0x0C, 0x08, 0x79, 0x14, 0x60, 0x75, 0x50, 0x9A,  // ..y.`uP.
                /* 0128 */  0x86, 0x09, 0xBA, 0x17, 0x60, 0x4D, 0x80, 0x31,  // ....`M.1
                /* 0130 */  0x01, 0x1A, 0x31, 0xA4, 0x4C, 0x80, 0xB3, 0xFB,  // ..1.L...
                /* 0138 */  0x82, 0x66, 0xD4, 0x96, 0x00, 0x73, 0x02, 0xB4,  // .f...s..
                /* 0140 */  0x09, 0xF0, 0x86, 0x20, 0x94, 0xF3, 0x8C, 0x72,  // ... ...r
                /* 0148 */  0x2C, 0xA7, 0x18, 0xE5, 0x61, 0x20, 0xE6, 0xCB,  // ,...a ..
                /* 0150 */  0x40, 0xD0, 0x28, 0x31, 0x62, 0x9E, 0x4B, 0x5C,  // @.(1b.K\
                /* 0158 */  0xC3, 0x46, 0x88, 0x11, 0xF2, 0x14, 0x02, 0xC5,  // .F......
                /* 0160 */  0x6D, 0x7F, 0x10, 0x64, 0xD0, 0xB8, 0xD1, 0xFB,  // m..d....
                /* 0168 */  0xB4, 0x70, 0x56, 0x27, 0x70, 0xF4, 0x4F, 0x0A,  // .pV'p.O.
                /* 0170 */  0x26, 0xF0, 0x94, 0x0F, 0xEC, 0xD9, 0xE0, 0x04,  // &.......
                /* 0178 */  0x8E, 0x35, 0x6A, 0x8C, 0x53, 0x49, 0xE0, 0xD8,  // .5j.SI..
                /* 0180 */  0x0F, 0x08, 0x69, 0x00, 0x51, 0x24, 0x78, 0xD4,  // ..i.Q$x.
                /* 0188 */  0x69, 0xC1, 0xE7, 0x02, 0x0F, 0xED, 0xA0, 0x3D,  // i......=
                /* 0190 */  0xC7, 0x13, 0x08, 0x72, 0x08, 0x47, 0xF0, 0xC4,  // ...r.G..
                /* 0198 */  0xF0, 0x40, 0xE0, 0x31, 0xB0, 0x9B, 0x82, 0x8F,  // .@.1....
                /* 01A0 */  0x00, 0x3E, 0x21, 0xE0, 0x5D, 0x03, 0xEA, 0x6A,  // .>!.]..j
                /* 01A8 */  0xF0, 0x60, 0xC0, 0x06, 0x1D, 0x0E, 0x33, 0x5E,  // .`....3^
                /* 01B0 */  0x0F, 0x3F, 0xDC, 0x09, 0x9C, 0xE4, 0x03, 0x06,  // .?......
                /* 01B8 */  0x3F, 0x6C, 0x78, 0x70, 0xB8, 0x79, 0x9E, 0xCC,  // ?lxp.y..
                /* 01C0 */  0x91, 0x95, 0x2A, 0xC0, 0xEC, 0xE1, 0x40, 0x07,  // ..*...@.
                /* 01C8 */  0x09, 0x9F, 0x36, 0xD8, 0x19, 0x00, 0x23, 0x7F,  // ..6...#.
                /* 01D0 */  0x10, 0xA8, 0x91, 0x19, 0xDA, 0xE3, 0x7E, 0xE9,  // ......~.
                /* 01D8 */  0x30, 0xE4, 0x73, 0xC2, 0x61, 0x31, 0xB1, 0xA7,  // 0.s.a1..
                /* 01E0 */  0x0E, 0x3A, 0x1E, 0xF0, 0x5F, 0x46, 0x9E, 0x33,  // .:.._F.3
                /* 01E8 */  0x3C, 0x7D, 0xCF, 0xD7, 0x04, 0xC3, 0x0E, 0x1C,  // <}......
                /* 01F0 */  0x3D, 0x10, 0x43, 0x3F, 0x6C, 0x1C, 0xC6, 0x69,  // =.C?l..i
                /* 01F8 */  0xF8, 0xFE, 0xE1, 0xF3, 0x02, 0x8C, 0x53, 0x80,  // ......S.
                /* 0200 */  0x47, 0xEE, 0xFF, 0xFF, 0x21, 0xC5, 0xA7, 0x09,  // G...!...
                /* 0208 */  0x7E, 0xB4, 0xF0, 0x69, 0x82, 0x5D, 0x0F, 0x4E,  // ~..i.].N
                /* 0210 */  0xE3, 0x39, 0xC0, 0xC3, 0x39, 0x2B, 0x1F, 0x26,  // .9..9+.&
                /* 0218 */  0xC0, 0x76, 0x3F, 0x61, 0x23, 0x7A, 0xB7, 0xF0,  // .v?a#z..
                /* 0220 */  0x68, 0xB0, 0xA7, 0x00, 0xF0, 0x9D, 0x5F, 0xC0,  // h....._.
                /* 0228 */  0x79, 0xD7, 0x60, 0x83, 0x85, 0x71, 0x7E, 0x01,  // y.`..q~.
                /* 0230 */  0x1E, 0x27, 0x04, 0x0F, 0x81, 0x1F, 0x24, 0x3C,  // .'....$<
                /* 0238 */  0x04, 0x3E, 0x80, 0xE7, 0x8F, 0x33, 0xB4, 0xD2,  // .>...3..
                /* 0240 */  0x79, 0x21, 0x07, 0x06, 0xEF, 0x9C, 0x03, 0x63,  // y!.....c
                /* 0248 */  0x14, 0x3C, 0xCF, 0x63, 0xC3, 0x04, 0x0A, 0xF2,  // .<.c....
                /* 0250 */  0x1A, 0x50, 0xA8, 0x67, 0x01, 0x85, 0xF1, 0xA9,  // .P.g....
                /* 0258 */  0x06, 0x78, 0xFD, 0xFF, 0x4F, 0x35, 0xC0, 0xE5,  // .x..O5..
                /* 0260 */  0x70, 0x80, 0x3B, 0x39, 0xC0, 0xBD, 0x17, 0xB0,  // p.;9....
                /* 0268 */  0x8B, 0xC3, 0x73, 0x0D, 0x5C, 0xD1, 0xE7, 0x1A,  // ..s.\...
                /* 0270 */  0xA8, 0xF7, 0x96, 0xE2, 0xC6, 0xA8, 0x6B, 0x4C,  // ......kL
                /* 0278 */  0x90, 0x47, 0x81, 0x47, 0x9A, 0x28, 0xCF, 0x33,  // .G.G.(.3
                /* 0280 */  0xEF, 0x32, 0x11, 0x9E, 0x6D, 0x7C, 0xAD, 0xF1,  // .2..m|..
                /* 0288 */  0x14, 0xE2, 0xF8, 0x5A, 0x63, 0xC4, 0x97, 0x89,  // ...Zc...
                /* 0290 */  0x77, 0x1B, 0xE3, 0x1E, 0xDC, 0x63, 0xCD, 0x43,  // w....c.C
                /* 0298 */  0x8E, 0x41, 0x8E, 0x26, 0xC2, 0x8B, 0x41, 0xC0,  // .A.&..A.
                /* 02A0 */  0xC7, 0x1B, 0x1F, 0x6B, 0xC0, 0x2B, 0xE6, 0x85,  // ...k.+..
                /* 02A8 */  0x22, 0x0B, 0xC7, 0x1A, 0x40, 0xE3, 0xFF, 0xFF,  // "...@...
                /* 02B0 */  0x58, 0x03, 0xDC, 0xB0, 0x1E, 0x50, 0xC0, 0x77,  // X....P.w
                /* 02B8 */  0x64, 0x60, 0x37, 0x14, 0x78, 0x27, 0x14, 0xC0,  // d`7.x'..
                /* 02C0 */  0x4F, 0xE2, 0x17, 0x80, 0x8E, 0x1C, 0x4E, 0x0B,  // O.....N.
                /* 02C8 */  0x22, 0x1B, 0x6F, 0x00, 0x9F, 0x02, 0xA8, 0x1A,  // ".o.....
                /* 02D0 */  0x20, 0x4D, 0x13, 0x36, 0xC1, 0xF4, 0xE4, 0x82,  //  M.6....
                /* 02D8 */  0xF7, 0x91, 0xC0, 0xB9, 0x49, 0x94, 0x7C, 0x58,  // ....I.|X
                /* 02E0 */  0x14, 0xCE, 0x59, 0x0F, 0x22, 0x14, 0xC4, 0x80,  // ..Y."...
                /* 02E8 */  0x0E, 0x72, 0x9C, 0x40, 0x9F, 0x51, 0x7C, 0x10,  // .r.@.Q|.
                /* 02F0 */  0x39, 0xD1, 0x27, 0x42, 0x0F, 0xCA, 0xC3, 0x78,  // 9.'B...x
                /* 02F8 */  0x47, 0x61, 0x27, 0x10, 0x1F, 0x26, 0x3C, 0x76,  // Ga'..&<v
                /* 0300 */  0x1F, 0x13, 0xF8, 0x3F, 0xC6, 0xB3, 0x31, 0xBA,  // ...?..1.
                /* 0308 */  0xD5, 0x60, 0xE8, 0xFF, 0x7F, 0x4E, 0xE1, 0x60,  // .`...N.`
                /* 0310 */  0x3E, 0x88, 0x70, 0x82, 0xBA, 0x6E, 0x12, 0x20,  // >.p..n. 
                /* 0318 */  0xD3, 0x77, 0x54, 0x00, 0x05, 0x90, 0xEF, 0x05,  // .wT.....
                /* 0320 */  0x3E, 0x07, 0x3C, 0x1B, 0xB0, 0x31, 0x3C, 0x0A,  // >.<..1<.
                /* 0328 */  0x18, 0xCD, 0xE8, 0x3C, 0xFC, 0x64, 0x51, 0x71,  // ...<.dQq
                /* 0330 */  0x27, 0x4B, 0x41, 0x3C, 0x59, 0x47, 0x99, 0x2C,  // 'KA<YG.,
                /* 0338 */  0x7A, 0x26, 0xBE, 0x57, 0x78, 0x46, 0x6F, 0x5A,  // z&.WxFoZ
                /* 0340 */  0x9E, 0xA3, 0x27, 0xEC, 0x7B, 0x08, 0xAC, 0xC3,  // ..'.{...
                /* 0348 */  0x40, 0xC8, 0x07, 0x03, 0x4F, 0xC3, 0x70, 0x9E,  // @...O.p.
                /* 0350 */  0x2C, 0x87, 0xF3, 0x64, 0xF9, 0x58, 0x7C, 0x0D,  // ,..d.X|.
                /* 0358 */  0x01, 0x9F, 0xC0, 0xD9, 0x82, 0x1C, 0x1E, 0x13,  // ........
                /* 0360 */  0x6B, 0x54, 0xF4, 0x2A, 0xE4, 0xE1, 0xF1, 0xCB,  // kT.*....
                /* 0368 */  0x81, 0xE7, 0xF3, 0x8C, 0x70, 0x94, 0x4F, 0x12,  // ....p.O.
                /* 0370 */  0x38, 0x8C, 0x67, 0x12, 0x0F, 0xD1, 0xB7, 0x22,  // 8.g...."
                /* 0378 */  0x58, 0x13, 0x39, 0x69, 0xDF, 0x16, 0x4E, 0x36,  // X.9i..N6
                /* 0380 */  0xE8, 0xEB, 0x19, 0xE6, 0x56, 0x04, 0xFB, 0xFF,  // ....V...
                /* 0388 */  0x7F, 0x2B, 0x82, 0x73, 0x41, 0x83, 0x99, 0xE9,  // .+.sA...
                /* 0390 */  0x5E, 0x85, 0x8A, 0x75, 0xAF, 0x02, 0xC4, 0x0E,  // ^..u....
                /* 0398 */  0xEB, 0xB5, 0xC7, 0x07, 0x2B, 0xB8, 0xF7, 0x2A,  // ....+..*
                /* 03A0 */  0xB8, 0x97, 0xAA, 0x67, 0x85, 0x63, 0x0C, 0xFF,  // ...g.c..
                /* 03A8 */  0x30, 0x15, 0xE3, 0x94, 0x5E, 0x3B, 0x0D, 0x14,  // 0...^;..
                /* 03B0 */  0x26, 0x4A, 0xBC, 0xF7, 0x2A, 0x8F, 0xF1, 0xBD,  // &J..*...
                /* 03B8 */  0x8A, 0x5D, 0xA1, 0xC2, 0xC4, 0x7A, 0xB9, 0x32,  // .]...z.2
                /* 03C0 */  0xEA, 0xEB, 0x44, 0xB8, 0x40, 0x41, 0x22, 0xBD,  // ..D.@A".
                /* 03C8 */  0x5A, 0x45, 0x89, 0x1C, 0xDF, 0x90, 0xEF, 0x55,  // ZE.....U
                /* 03D0 */  0xE0, 0x95, 0x73, 0xAF, 0x02, 0xD9, 0xFF, 0xFF,  // ..s.....
                /* 03D8 */  0x5E, 0x05, 0x98, 0x47, 0x7B, 0xAF, 0x02, 0xE3,  // ^..G{...
                /* 03E0 */  0xB5, 0x81, 0xDD, 0x90, 0x60, 0x01, 0xBD, 0x58,  // ....`..X
                /* 03E8 */  0x01, 0x86, 0x32, 0x5F, 0xAC, 0x68, 0xDE, 0x8B,  // ..2_.h..
                /* 03F0 */  0x15, 0xE2, 0xFF, 0x7F, 0x2E, 0x61, 0x7A, 0x2E,  // .....az.
                /* 03F8 */  0x56, 0x64, 0x9E, 0xF0, 0x6F, 0x56, 0x00, 0xA7,  // Vd..oV..
                /* 0400 */  0xFF, 0xFF, 0x37, 0x2B, 0xC0, 0xD8, 0xBD, 0x08,  // ..7+....
                /* 0408 */  0x73, 0xB4, 0x82, 0x97, 0xF2, 0x66, 0x45, 0xE3,  // s....fE.
                /* 0410 */  0x2C, 0x43, 0x01, 0x17, 0x44, 0x61, 0x7C, 0xB3,  // ,C..Da|.
                /* 0418 */  0x02, 0x1C, 0x5D, 0x57, 0x70, 0x43, 0x86, 0x0B,  // ..]WpC..
                /* 0420 */  0x16, 0x25, 0x98, 0x0F, 0x21, 0x9E, 0xCE, 0x11,  // .%..!...
                /* 0428 */  0x3F, 0x24, 0xBC, 0x04, 0x3C, 0xE6, 0x78, 0xC0,  // ?$..<.x.
                /* 0430 */  0x0F, 0x04, 0xBE, 0x5C, 0x81, 0xE9, 0xFF, 0x4F,  // ...\...O
                /* 0438 */  0xE0, 0x93, 0xEF, 0x59, 0xBE, 0x4D, 0xBD, 0xF7,  // ...Y.M..
                /* 0440 */  0xF2, 0x03, 0xD6, 0x7B, 0x95, 0x0F, 0xBF, 0xB1,  // ...{....
                /* 0448 */  0xDE, 0x19, 0x5E, 0xAE, 0x3C, 0x92, 0x28, 0x27,  // ..^.<.('
                /* 0450 */  0x11, 0xCA, 0x77, 0xAB, 0xF7, 0x2A, 0xA3, 0x44,  // ..w..*.D
                /* 0458 */  0x7C, 0x21, 0xF6, 0x29, 0xD8, 0xD0, 0x46, 0x79,  // |!.)..Fy
                /* 0460 */  0xAA, 0x88, 0x6E, 0xBC, 0x97, 0x2B, 0xF0, 0x4A,  // ..n..+.J
                /* 0468 */  0xBA, 0x5C, 0x01, 0x34, 0x19, 0xFE, 0xCB, 0x15,  // .\.4....
                /* 0470 */  0xF8, 0x6E, 0x0E, 0xD8, 0x6B, 0x12, 0x9C, 0xFF,  // .n..k...
                /* 0478 */  0xFF, 0x35, 0x89, 0x5F, 0xAF, 0x00, 0x3F, 0xD9,  // .5._..?.
                /* 0480 */  0xAF, 0x57, 0x34, 0xF7, 0xF5, 0x0A, 0x25, 0x0A,  // .W4...%.
                /* 0488 */  0x42, 0x8A, 0x80, 0x34, 0x53, 0xF0, 0xDC, 0xAF,  // B..4S...
                /* 0490 */  0x00, 0x4E, 0xFC, 0xFF, 0xEF, 0x57, 0x80, 0xE5,  // .N...W..
                /* 0498 */  0x70, 0xF7, 0x2B, 0xA0, 0x77, 0x3B, 0x02, 0x2F,  // p.+.w;./
                /* 04A0 */  0xCA, 0xDB, 0x11, 0xF6, 0x8A, 0x85, 0xCF, 0x78,  // .......x
                /* 04A8 */  0xC5, 0xA2, 0x61, 0x56, 0xA2, 0x78, 0x6B, 0xA2,  // ..aV.xk.
                /* 04B0 */  0x30, 0xBE, 0x62, 0x01, 0x93, 0xFF, 0xFF, 0x15,  // 0.b.....
                /* 04B8 */  0x0B, 0x98, 0x1D, 0x44, 0x71, 0xA3, 0x86, 0x7B,  // ...Dq..{
                /* 04C0 */  0x71, 0xF2, 0xAD, 0xC7, 0xF3, 0x8D, 0xE8, 0x3B,  // q......;
                /* 04C8 */  0x0C, 0xE6, 0x84, 0x05, 0xE3, 0x86, 0x05, 0x7F,  // ........
                /* 04D0 */  0x48, 0x0F, 0xC3, 0x3E, 0x49, 0xBC, 0x63, 0xF9,  // H..>I.c.
                /* 04D8 */  0x68, 0x65, 0x90, 0x37, 0xE0, 0x27, 0xAB, 0x07,  // he.7.'..
                /* 04E0 */  0xAB, 0x28, 0x46, 0x08, 0x78, 0x3C, 0xEF, 0xC2,  // .(F.x<..
                /* 04E8 */  0x3E, 0x5A, 0xBD, 0x69, 0x19, 0x25, 0x76, 0x2C,  // >Z.i.%v,
                /* 04F0 */  0x5F, 0xA8, 0x9E, 0xB5, 0x7C, 0xCD, 0x32, 0x44,  // _...|.2D
                /* 04F8 */  0xDC, 0x07, 0x62, 0xDF, 0xB0, 0x00, 0xDB, 0xFF,  // ..b.....
                /* 0500 */  0xFF, 0x1B, 0x16, 0xE0, 0xE8, 0xE2, 0xC0, 0x0F,  // ........
                /* 0508 */  0x0E, 0xD8, 0x1B, 0x16, 0xE0, 0x73, 0xA6, 0xE0,  // .....s..
                /* 0510 */  0xB9, 0x61, 0x01, 0x9B, 0xFF, 0xFF, 0x0D, 0x0B,  // .a......
                /* 0518 */  0xE0, 0xFF, 0xFF, 0xFF, 0x86, 0x05, 0x1C, 0x6E,  // .......n
                /* 0520 */  0x57, 0xD8, 0x5B, 0x16, 0xF6, 0xF6, 0x42, 0x56,  // W.[...BV
                /* 0528 */  0x41, 0x43, 0xAD, 0x44, 0xC1, 0xBF, 0x57, 0x86,  // AC.D..W.
                /* 0530 */  0xA1, 0x37, 0x2C, 0xC0, 0xD1, 0xB8, 0x3D, 0x6A,  // .7,...=j
                /* 0538 */  0x70, 0x9C, 0x0D, 0x9E, 0x24, 0x30, 0xE7, 0x6A,  // p...$0.j
                /* 0540 */  0xDC, 0x6C, 0x0E, 0x2E, 0x70, 0x84, 0xDE, 0x41,  // .l..p..A
                /* 0548 */  0x35, 0x77, 0x76, 0x49, 0x81, 0x71, 0xCB, 0x82,  // 5wvI.q..
                /* 0550 */  0x7B, 0xA9, 0x7A, 0x68, 0x88, 0x72, 0x10, 0xAF,  // {.zh.r..
                /* 0558 */  0xC2, 0x0F, 0x56, 0x8F, 0x52, 0x47, 0xF6, 0x78,  // ..V.RG.x
                /* 0560 */  0xF5, 0x34, 0xEC, 0x63, 0x96, 0x6F, 0x59, 0x86,  // .4.c.oY.
                /* 0568 */  0x8A, 0xF0, 0x96, 0xC5, 0xCE, 0x10, 0xF1, 0x62,  // .......b
                /* 0570 */  0x45, 0x09, 0xF1, 0x5E, 0x11, 0xDA, 0x77, 0x2E,  // E..^..w.
                /* 0578 */  0x83, 0x3F, 0x1A, 0x1B, 0x35, 0xE8, 0xCB, 0xF1,  // .?..5...
                /* 0580 */  0x5B, 0x16, 0xBC, 0xFF, 0xFF, 0x2D, 0x0B, 0xBE,  // [....-..
                /* 0588 */  0xC8, 0xBF, 0x8A, 0x4E, 0x04, 0xBE, 0x65, 0x01,  // ...N..e.
                /* 0590 */  0xFC, 0x08, 0x06, 0x21, 0x27, 0x03, 0x47, 0x9F,  // ...!'.G.
                /* 0598 */  0x17, 0xF0, 0x03, 0x78, 0x18, 0xF1, 0x90, 0x58,  // ...x...X
                /* 05A0 */  0x80, 0x81, 0xD3, 0xFB, 0x92, 0xCF, 0x14, 0xFC,  // ........
                /* 05A8 */  0x80, 0xE1, 0x33, 0x05, 0xBB, 0x1E, 0x44, 0x7F,  // ..3...D.
                /* 05B0 */  0x0C, 0xF0, 0xB9, 0x04, 0x33, 0x38, 0xF0, 0x5F,  // ....38._
                /* 05B8 */  0x2B, 0x0E, 0xDD, 0xA3, 0x78, 0x7D, 0x30, 0x81,  // +...x}0.
                /* 05C0 */  0x07, 0xC7, 0xFF, 0xFF, 0x83, 0x83, 0x7B, 0x67,  // ......{g
                /* 05C8 */  0x38, 0x22, 0xDF, 0x61, 0x3C, 0x38, 0xB0, 0x1D,  // 8".a<8..
                /* 05D0 */  0x04, 0x80, 0xC3, 0xE0, 0xF0, 0xA1, 0x06, 0x87,  // ........
                /* 05D8 */  0x1E, 0x8F, 0x81, 0x43, 0xFA, 0x3C, 0xC6, 0x2E,  // ...C.<..
                /* 05E0 */  0x0C, 0x0F, 0x39, 0x1E, 0x1A, 0xD8, 0x00, 0x3D,  // ..9....=
                /* 05E8 */  0x34, 0x60, 0x39, 0x89, 0xA7, 0x90, 0x43, 0x03,  // 4`9...C.
                /* 05F0 */  0xB3, 0x84, 0xA1, 0x01, 0xA5, 0x78, 0x43, 0xA3,  // .....xC.
                /* 05F8 */  0xFF, 0xFF, 0xA1, 0xF1, 0x21, 0xF9, 0xB0, 0x10,  // ....!...
                /* 0600 */  0xF3, 0x29, 0x27, 0xC2, 0xFB, 0x82, 0x4F, 0x50,  // .)'...OP
                /* 0608 */  0x0C, 0xFD, 0x35, 0xC5, 0xB7, 0x0B, 0xDF, 0x04,  // ..5.....
                /* 0610 */  0x71, 0xE3, 0x03, 0xD7, 0xA5, 0xD3, 0xE3, 0x03,  // q.......
                /* 0618 */  0x3E, 0x47, 0x2E, 0x8F, 0x0F, 0x77, 0x74, 0xF2,  // >G...wt.
                /* 0620 */  0xF8, 0x60, 0xB8, 0xBC, 0xCA, 0x90, 0xA3, 0x89,  // .`......
                /* 0628 */  0x8F, 0x56, 0x6C, 0x78, 0x60, 0xBB, 0xE9, 0x79,  // .Vlx`..y
                /* 0630 */  0x78, 0xC0, 0xE7, 0xBA, 0x09, 0xC6, 0x2B, 0x24,  // x.....+$
                /* 0638 */  0xBF, 0x96, 0xC0, 0x38, 0x41, 0xE1, 0xAF, 0x9B,  // ...8A...
                /* 0640 */  0xE0, 0xFD, 0xFF, 0x5F, 0x37, 0x81, 0xE7, 0x28,  // ..._7..(
                /* 0648 */  0xB8, 0xD6, 0x4B, 0x36, 0x0D, 0xF2, 0xCA, 0x51,  // ..K6...Q
                /* 0650 */  0xAC, 0x17, 0x01, 0x85, 0xF1, 0x99, 0x0D, 0x70,  // .......p
                /* 0658 */  0x34, 0xD6, 0x67, 0x36, 0xB0, 0xDC, 0x0B, 0xD8,  // 4.g6....
                /* 0660 */  0x8D, 0x0D, 0xEE, 0x69, 0x0D, 0xF6, 0xDD, 0xE1,  // ...i....
                /* 0668 */  0xE1, 0xEC, 0x31, 0xED, 0x51, 0xED, 0x01, 0xCD,  // ..1.Q...
                /* 0670 */  0x47, 0xEC, 0x18, 0x6F, 0x69, 0x41, 0xE2, 0x44,  // G..oiA.D
                /* 0678 */  0x78, 0x1D, 0x78, 0x5A, 0xF3, 0x25, 0x23, 0x5E,  // x.xZ.%#^
                /* 0680 */  0xA0, 0xA7, 0x35, 0x63, 0xC4, 0x79, 0x69, 0x33,  // ..5c.yi3
                /* 0688 */  0xE2, 0x2B, 0x45, 0x88, 0x87, 0x35, 0x9F, 0xDC,  // .+E..5..
                /* 0690 */  0x8C, 0xF7, 0x30, 0x11, 0x2E, 0xCC, 0x0B, 0xDB,  // ..0.....
                /* 0698 */  0xD3, 0x1A, 0x38, 0xFE, 0xFF, 0xA7, 0x35, 0x38,  // ..8...58
                /* 06A0 */  0x72, 0xAE, 0xD8, 0x00, 0x4D, 0x2E, 0xFA, 0xB8,  // r...M...
                /* 06A8 */  0x43, 0x0A, 0x58, 0xAE, 0x0D, 0xEC, 0x96, 0x02,  // C.X.....
                /* 06B0 */  0xEF, 0x82, 0x0D, 0x9C, 0xFF, 0xFF, 0x47, 0x14,  // ......G.
                /* 06B8 */  0xF0, 0x65, 0xB9, 0x60, 0xD3, 0x1C, 0x17, 0x6C,  // .e.`...l
                /* 06C0 */  0x14, 0x87, 0xD5, 0x00, 0x69, 0x9E, 0xF0, 0xAF,  // ....i...
                /* 06C8 */  0xD7, 0xE0, 0x9F, 0x84, 0xAF, 0xD7, 0x80, 0xED,  // ........
                /* 06D0 */  0x5B, 0x2C, 0xEE, 0x7A, 0x0D, 0xAC, 0xFE, 0xFF,  // [,.z....
                /* 06D8 */  0xD7, 0x6B, 0x60, 0x29, 0x78, 0xA4, 0xF4, 0x4E,  // .k`)x..N
                /* 06E0 */  0x0D, 0xAE, 0x9B, 0x36, 0x1E, 0xF4, 0x4D, 0x1B,  // ...6..M.
                /* 06E8 */  0xA6, 0xE0, 0x5B, 0x14, 0x8D, 0x42, 0xAE, 0x68,  // ..[..B.h
                /* 06F0 */  0x0B, 0xA1, 0x30, 0xBE, 0x45, 0x01, 0x8E, 0xB0,  // ..0.E...
                /* 06F8 */  0xDF, 0xA2, 0xC0, 0x72, 0x71, 0x7A, 0x8B, 0xC2,  // ...rqz..
                /* 0700 */  0xCF, 0xC0, 0x83, 0xF6, 0x5D, 0x87, 0x61, 0xFA,  // ....].a.
                /* 0708 */  0x0E, 0x0D, 0xFF, 0xD4, 0xF4, 0xDC, 0xF4, 0xE0,  // ........
                /* 0710 */  0xF4, 0xD0, 0xEC, 0x83, 0x94, 0x0F, 0x07, 0xCF,  // ........
                /* 0718 */  0x4F, 0xFF, 0xFF, 0x18, 0xEF, 0x75, 0xBE, 0x49,  // O....u.I
                /* 0720 */  0xBD, 0x46, 0xF9, 0x02, 0x73, 0x0C, 0x11, 0xA3,  // .F..s...
                /* 0728 */  0xBC, 0x4C, 0x1B, 0x22, 0x9E, 0x4F, 0x4D, 0x3E,  // .L.".OM>
                /* 0730 */  0x2B, 0xC4, 0x0D, 0xF1, 0x10, 0x6D, 0x84, 0xA8,  // +....m..
                /* 0738 */  0xCF, 0xD3, 0x9E, 0xD0, 0x6B, 0x14, 0x78, 0x05,  // ....k.x.
                /* 0740 */  0x5D, 0xA3, 0x00, 0x9A, 0xDC, 0x8F, 0x70, 0xD7,  // ].....p.
                /* 0748 */  0x28, 0xB0, 0xDC, 0x1B, 0xD8, 0x79, 0x88, 0x5F,  // (....y._
                /* 0750 */  0x89, 0x7C, 0x6D, 0x80, 0x71, 0x8F, 0x82, 0xF3,  // .|m.q...
                /* 0758 */  0xFF, 0xBF, 0x47, 0x01, 0x36, 0xC2, 0xDC, 0xA3,  // ..G.6...
                /* 0760 */  0x68, 0x90, 0x7B, 0x14, 0xEA, 0x64, 0xE2, 0x4B,  // h.{..d.K
                /* 0768 */  0x9D, 0x27, 0x0A, 0x8E, 0xF0, 0x17, 0x29, 0x54,  // .'....)T
                /* 0770 */  0x6C, 0x12, 0x85, 0x3E, 0x0C, 0xA1, 0x62, 0x1E,  // l..>..b.
                /* 0778 */  0x46, 0x28, 0x88, 0x01, 0x9D, 0xE1, 0x44, 0x81,  // F(....D.
                /* 0780 */  0x56, 0x71, 0xA2, 0x20, 0xB7, 0x18, 0x4F, 0xEA,  // Vq. ..O.
                /* 0788 */  0x31, 0x0A, 0xF0, 0xB5, 0x4C, 0x0F, 0x95, 0x47,  // 1...L..G
                /* 0790 */  0x1E, 0x2A, 0x05, 0xF1, 0x50, 0x1D, 0x67, 0xA8,  // .*..P.g.
                /* 0798 */  0xE8, 0x49, 0x7A, 0xFE, 0x98, 0xFF, 0xFF, 0xC1,  // .Iz.....
                /* 07A0 */  0x01, 0x7B, 0x90, 0x02, 0x78, 0xA1, 0xFA, 0x20,  // .{..x.. 
                /* 07A8 */  0x45, 0xC3, 0x90, 0x2B, 0xDC, 0x42, 0x28, 0x8C,  // E..+.B(.
                /* 07B0 */  0x0F, 0x52, 0x80, 0xA3, 0x9B, 0x25, 0xEE, 0x20,  // .R...%. 
                /* 07B8 */  0x05, 0xE3, 0xFF, 0x7F, 0x90, 0xC2, 0x8C, 0x80,  // ........
                /* 07C0 */  0xBD, 0x46, 0x9E, 0xA3, 0x62, 0x3D, 0xAD, 0x33,  // .F..b=.3
                /* 07C8 */  0xD0, 0x38, 0x6F, 0x45, 0x3E, 0x0B, 0xB2, 0x0B,  // .8oE>...
                /* 07D0 */  0x8B, 0x8F, 0x45, 0x26, 0xF0, 0x49, 0x0A, 0x2E,  // ..E&.I..
                /* 07D8 */  0xC6, 0xD3, 0xAD, 0x0F, 0xB5, 0x06, 0x79, 0x78,  // ......yx
                /* 07E0 */  0x7A, 0xBA, 0xF5, 0x59, 0xEA, 0xFD, 0x29, 0xD0,  // z..Y..).
                /* 07E8 */  0xA1, 0x3E, 0x44, 0x59, 0xDC, 0x08, 0xC8, 0xFD,  // .>DY....
                /* 07F0 */  0xD6, 0xD7, 0xA9, 0x67, 0x5B, 0xA3, 0x3C, 0x3D,  // ...g[.<=
                /* 07F8 */  0x04, 0x8D, 0x13, 0x31, 0x5A, 0x4C, 0x43, 0x05,  // ...1ZLC.
                /* 0800 */  0x8A, 0xF2, 0x66, 0xE5, 0x93, 0x14, 0xC0, 0xB2,  // ..f.....
                /* 0808 */  0xFF, 0xFF, 0x49, 0x0A, 0x5C, 0x17, 0x07, 0x76,  // ..I.\..v
                /* 0810 */  0x70, 0xC0, 0xDD, 0x1B, 0xE0, 0x9C, 0xA4, 0x00,  // p.......
                /* 0818 */  0x3F, 0x79, 0x4E, 0x52, 0xF4, 0x8A, 0xEB, 0x93,  // ?yNR....
                /* 0820 */  0x14, 0x17, 0x05, 0x21, 0x45, 0x40, 0x9A, 0x28,  // ...!E@.(
                /* 0828 */  0x58, 0xAE, 0xB8, 0x80, 0xCB, 0xFF, 0xFF, 0x15,  // X.......
                /* 0830 */  0x17, 0xE0, 0x63, 0x2C, 0x09, 0xF7, 0x5B, 0x4C,  // ..c,..[L
                /* 0838 */  0x10, 0x18, 0xD4, 0x55, 0x0A, 0x78, 0xFD, 0xFF,  // ...U.x..
                /* 0840 */  0xAF, 0x52, 0xC0, 0xE5, 0x0A, 0xF0, 0x2A, 0x05,  // .R....*.
                /* 0848 */  0x96, 0xC3, 0xD2, 0x93, 0xC2, 0x03, 0x91, 0x91,  // ........
                /* 0850 */  0xF8, 0x8B, 0xE4, 0xBD, 0xC1, 0xC6, 0xB1, 0x04,  // ........
                /* 0858 */  0xEC, 0x9B, 0x09, 0x9B, 0xF7, 0x8B, 0x14, 0x4C,  // .......L
                /* 0860 */  0xF7, 0x47, 0x5C, 0x02, 0xF1, 0xC4, 0x10, 0xF8,  // .G\.....
                /* 0868 */  0x2D, 0xE7, 0x48, 0xDF, 0xA0, 0x8C, 0xF3, 0x7C,  // -.H....|
                /* 0870 */  0x6B, 0xAC, 0xA7, 0x5B, 0x76, 0x65, 0x3A, 0x8F,  // k..[ve:.
                /* 0878 */  0x28, 0x31, 0xC2, 0x3D, 0x43, 0xC5, 0x88, 0x12,  // (1.=C...
                /* 0880 */  0xE3, 0x95, 0x2A, 0x48, 0xC0, 0x10, 0xCF, 0x54,  // ..*H...T
                /* 0888 */  0x21, 0x9F, 0x76, 0x3D, 0xD9, 0x97, 0x29, 0xDB,  // !.v=..).
                /* 0890 */  0xBF, 0x49, 0x81, 0x38, 0xFE, 0x8B, 0x41, 0x37,  // .I.8..A7
                /* 0898 */  0x12, 0xDF, 0xA4, 0x00, 0x7F, 0xFF, 0xFF, 0x9B,  // ........
                /* 08A0 */  0x14, 0xF0, 0x0B, 0x3C, 0x70, 0xF4, 0x40, 0x0C,  // ...<p.@.
                /* 08A8 */  0xFD, 0xC8, 0xE2, 0x69, 0xF8, 0xBC, 0xE1, 0x33,  // ...i...3
                /* 08B0 */  0xA5, 0x31, 0x8E, 0xC9, 0x83, 0xE3, 0xB1, 0x46,  // .1.....F
                /* 08B8 */  0x4E, 0x6F, 0x45, 0x3E, 0x4F, 0xF0, 0xC3, 0x85,  // NoE>O...
                /* 08C0 */  0xCF, 0x13, 0xEC, 0xC4, 0x70, 0x1A, 0xCF, 0x01,  // ....p...
                /* 08C8 */  0x3E, 0x88, 0x60, 0x8E, 0x13, 0xC0, 0xE5, 0x1C,  // >.`.....
                /* 08D0 */  0x00, 0xBE, 0x7B, 0x20, 0xEE, 0x06, 0x06, 0x96,  // ..{ ....
                /* 08D8 */  0x19, 0xE1, 0x47, 0x04, 0xE3, 0x02, 0x06, 0x5C,  // ..G....\
                /* 08E0 */  0xFF, 0xFF, 0x17, 0x30, 0x70, 0x8E, 0x82, 0xE7,  // ...0p...
                /* 08E8 */  0xBB, 0x75, 0x02, 0x8A, 0xEF, 0x15, 0xEC, 0xEA,  // .u......
                /* 08F0 */  0xF0, 0xFC, 0x00, 0x8E, 0x5B, 0x27, 0xDC, 0x83,  // ....['..
                /* 08F8 */  0x8D, 0xAF, 0x2F, 0x67, 0x79, 0xA6, 0x2F, 0x34,  // ../gy./4
                /* 0900 */  0x4F, 0x35, 0x0C, 0xE6, 0xF1, 0x26, 0x42, 0x9C,  // O5...&B.
                /* 0908 */  0x28, 0xC6, 0x3B, 0x4B, 0xA3, 0xBC, 0x7F, 0xC4,  // (.;K....
                /* 0910 */  0x78, 0xB5, 0x89, 0x11, 0x25, 0x50, 0x24, 0x03,  // x...%P$.
                /* 0918 */  0x1B, 0x28, 0xF0, 0x5B, 0xC5, 0x13, 0x89, 0x41,  // .(.[...A
                /* 0920 */  0x7D, 0xEB, 0x04, 0x3E, 0xFF, 0xFF, 0x5B, 0x27,  // }..>..['
                /* 0928 */  0xC0, 0xA0, 0x8B, 0x03, 0xBB, 0xA5, 0xC0, 0x3F,  // .......?
                /* 0930 */  0xA5, 0x00, 0x5E, 0xFE, 0xFF, 0xA7, 0x14, 0x9E,  // ..^.....
                /* 0938 */  0xFC, 0xD6, 0x49, 0x53, 0xDF, 0x3A, 0xA1, 0x4C,  // ..IS.:.L
                /* 0940 */  0x14, 0x2C, 0xB7, 0x4E, 0x60, 0x70, 0x1C, 0x79,  // .,.N`p.y
                /* 0948 */  0xEB, 0x04, 0x7C, 0xDF, 0x2D, 0x7C, 0xEB, 0x04,  // ..|.-|..
                /* 0950 */  0xF6, 0xFF, 0xFF, 0x5B, 0x27, 0xB0, 0x88, 0x36,  // ...['..6
                /* 0958 */  0x2A, 0x7A, 0xD5, 0xC4, 0xCF, 0xE7, 0x55, 0x13,  // *z....U.
                /* 0960 */  0xE6, 0x05, 0x14, 0x5C, 0x77, 0x23, 0xE0, 0x94,  // ...\w#..
                /* 0968 */  0xEB, 0x7E, 0x45, 0xEF, 0xA1, 0x0E, 0xB6, 0x24,  // .~E....$
                /* 0970 */  0x7A, 0x15, 0x05, 0x3C, 0x61, 0x1F, 0x34, 0xD8,  // z..<a.4.
                /* 0978 */  0x8E, 0x2B, 0x1C, 0xE5, 0x5D, 0x10, 0x0B, 0xF4,  // .+..]...
                /* 0980 */  0xFF, 0x3F, 0x10, 0x5F, 0xAF, 0x60, 0x9F, 0x3D,  // .?._.`.=
                /* 0988 */  0xCF, 0xF1, 0x75, 0xE1, 0x35, 0x22, 0xC2, 0x23,  // ..u.5".#
                /* 0990 */  0xD5, 0x63, 0x43, 0x84, 0xE7, 0xAA, 0x60, 0x4F,  // .cC...`O
                /* 0998 */  0x55, 0x71, 0x5E, 0xAF, 0xD8, 0x34, 0x9E, 0xB0,  // Uq^..4..
                /* 09A0 */  0xE2, 0x3C, 0x8B, 0x7A, 0x0A, 0x51, 0x1E, 0xAC,  // .<.z.Q..
                /* 09A8 */  0xA2, 0x3C, 0x88, 0x1A, 0xF1, 0x85, 0x20, 0x74,  // .<.... t
                /* 09B0 */  0xE0, 0x78, 0xC1, 0xA2, 0x1B, 0x21, 0xD6, 0xEB,  // .x...!..
                /* 09B8 */  0x15, 0x78, 0xE5, 0x5C, 0xAF, 0x00, 0x9A, 0x5C,  // .x.\...\
                /* 09C0 */  0x29, 0xC1, 0x78, 0x66, 0xF0, 0xFF, 0x7F, 0x5A,  // ).xf...Z
                /* 09C8 */  0xCF, 0x0D, 0xFC, 0xDA, 0x80, 0x3D, 0x36, 0xB0,  // .....=6.
                /* 09D0 */  0xDB, 0x15, 0xE0, 0xE7, 0x6E, 0xE5, 0x43, 0x87,  // ....n.C.
                /* 09D8 */  0x13, 0xDF, 0xAE, 0x50, 0x07, 0x13, 0xEB, 0xB9,  // ...P....
                /* 09E0 */  0x5D, 0x21, 0xE6, 0x09, 0xF7, 0x72, 0x05, 0x70,  // ]!...r.p
                /* 09E8 */  0xE0, 0xFF, 0x7F, 0xB9, 0x02, 0xBC, 0x07, 0xBB,  // ........
                /* 09F0 */  0x5C, 0x01, 0xBD, 0x8B, 0x11, 0x18, 0xE1, 0xFB,  // \.......
                /* 09F8 */  0xC4, 0x11, 0xCA, 0xA3, 0x92, 0x2F, 0x46, 0x30,  // ...../F0
                /* 0A00 */  0xCE, 0xC2, 0xC0, 0xEB, 0xFF, 0x7F, 0x16, 0x06,  // ........
                /* 0A08 */  0x6C, 0x0C, 0xEB, 0xCD, 0xC7, 0x87, 0x2B, 0x30,  // l.....+0
                /* 0A10 */  0x5C, 0xAE, 0x60, 0x9F, 0x19, 0xDE, 0xAB, 0x0C,  // \.`.....
                /* 0A18 */  0xF1, 0x44, 0xF5, 0x40, 0x65, 0xA8, 0x97, 0x2B,  // .D.@e..+
                /* 0A20 */  0xC3, 0x44, 0x0A, 0xF1, 0x36, 0xCC, 0xD0, 0x42,  // .D..6..B
                /* 0A28 */  0x44, 0x09, 0x17, 0xC4, 0x28, 0x3E, 0x5F, 0x19,  // D...(>_.
                /* 0A30 */  0x2E, 0xF6, 0xD3, 0x94, 0xCF, 0x57, 0xC1, 0x1E,  // .....W..
                /* 0A38 */  0xB2, 0xC2, 0x46, 0x88, 0xF2, 0x2C, 0x0C, 0x38,  // ..F..,.8
                /* 0A40 */  0xFE, 0xFF, 0x9F, 0x85, 0x01, 0x5F, 0x17, 0x07,  // ....._..
                /* 0A48 */  0x76, 0x4B, 0x82, 0x75, 0x71, 0xF2, 0xED, 0x0A,  // vK.uq...
                /* 0A50 */  0x70, 0x74, 0x16, 0x86, 0x3D, 0x51, 0x70, 0x5C,  // pt..=Qp\
                /* 0A58 */  0xAF, 0x80, 0xC9, 0xFF, 0xFF, 0x2C, 0x0C, 0xF0,  // .....,..
                /* 0A60 */  0xFF, 0xFF, 0x7F, 0x16, 0x06, 0xF7, 0xDD, 0x08,  // ........
                /* 0A68 */  0x73, 0xBE, 0x82, 0x7D, 0x30, 0xD4, 0xFD, 0x8A,  // s..}0...
                /* 0A70 */  0x46, 0x5A, 0x88, 0x62, 0x2E, 0x89, 0xC2, 0xF8,  // FZ.b....
                /* 0A78 */  0x7E, 0x05, 0x38, 0x12, 0x3C, 0x68, 0xD0, 0x80,  // ~.8.<h..
                /* 0A80 */  0x45, 0x09, 0xE6, 0x63, 0x88, 0xA7, 0x73, 0xBC,  // E..c..s.
                /* 0A88 */  0x8F, 0x09, 0xAF, 0x01, 0x8F, 0x3A, 0x1E, 0xF2,  // .....:..
                /* 0A90 */  0x23, 0x81, 0xAF, 0x58, 0x60, 0x3D, 0x44, 0xBD,  // #..X`=D.
                /* 0A98 */  0x60, 0xF9, 0x6A, 0x63, 0x8C, 0x08, 0x2F, 0xC3,  // `.jc../.
                /* 0AA0 */  0x86, 0x79, 0xAF, 0x0A, 0xF1, 0x0E, 0xFC, 0x8A,  // .y......
                /* 0AA8 */  0xE5, 0x0B, 0x45, 0xB0, 0x08, 0x51, 0x1E, 0x85,  // ..E..Q..
                /* 0AB0 */  0x5F, 0x86, 0x8D, 0x67, 0xC8, 0x07, 0x2D, 0x03,  // _..g..-.
                /* 0AB8 */  0x85, 0x35, 0xE4, 0x3B, 0x71, 0x8C, 0x13, 0xF0,  // .5.;q...
                /* 0AC0 */  0x9D, 0xC2, 0x57, 0x2C, 0x78, 0xFF, 0xFF, 0x2B,  // ..W,x..+
                /* 0AC8 */  0x16, 0x6C, 0x51, 0x57, 0x2C, 0x80, 0x26, 0x27,  // .lQW,.&'
                /* 0AD0 */  0x07, 0xDC, 0x15, 0x0B, 0x2C, 0x77, 0x07, 0xEC,  // ....,w..
                /* 0AD8 */  0x5D, 0x09, 0xFE, 0x25, 0x0B, 0x98, 0xFD, 0xFF,  // ]..%....
                /* 0AE0 */  0x2F, 0x59, 0xC0, 0x42, 0xC1, 0x5B, 0x41, 0x67,  // /Y.B.[Ag
                /* 0AE8 */  0x0F, 0xA7, 0xBF, 0x64, 0xA1, 0x4E, 0x22, 0xD6,  // ...d.N".
                /* 0AF0 */  0x04, 0xA4, 0xA9, 0x82, 0xEB, 0x96, 0x05, 0x30,  // .......0
                /* 0AF8 */  0xEE, 0xFF, 0x7F, 0xCB, 0x02, 0x3C, 0x04, 0xBC,  // .....<..
                /* 0B00 */  0x65, 0x01, 0xBD, 0x1B, 0x12, 0x78, 0x51, 0xDE,  // e....xQ.
                /* 0B08 */  0x90, 0xB0, 0x17, 0x2D, 0x78, 0x49, 0x2F, 0x5A,  // ...-xI/Z
                /* 0B10 */  0x34, 0xCE, 0x5A, 0x14, 0x71, 0x55, 0x14, 0xC6,  // 4.Z.qU..
                /* 0B18 */  0x17, 0x2D, 0xC0, 0xCF, 0xFF, 0x7F, 0xDC, 0xBE,  // .-......
                /* 0B20 */  0xB5, 0xE0, 0xC6, 0x0D, 0xF7, 0xF2, 0xE4, 0x9B,  // ........
                /* 0B28 */  0x8F, 0x67, 0x1B, 0xD1, 0xD7, 0x18, 0xCC, 0x39,  // .g.....9
                /* 0B30 */  0x0B, 0xDE, 0x35, 0x0B, 0xF6, 0xCD, 0xEA, 0xC5,  // ..5.....
                /* 0B38 */  0xEA, 0x34, 0x9F, 0xAC, 0x82, 0x3C, 0x5C, 0xF9,  // .4...<\.
                /* 0B40 */  0x7C, 0x15, 0xFA, 0x0D, 0x2B, 0xC2, 0x7B, 0xD6,  // |...+.{.
                /* 0B48 */  0x6B, 0x96, 0xEF, 0xC4, 0x51, 0x62, 0x3C, 0x19,  // k...Qb<.
                /* 0B50 */  0x1B, 0x23, 0x4A, 0xC0, 0x28, 0xC1, 0xA2, 0x06,  // .#J.(...
                /* 0B58 */  0x7E, 0x80, 0x88, 0x13, 0xE3, 0x45, 0x2B, 0xCC,  // ~....E+.
                /* 0B60 */  0x19, 0x3C, 0x75, 0xF9, 0x26, 0xF1, 0x9A, 0x05,  // .<u.&...
                /* 0B68 */  0xF0, 0xE7, 0xFF, 0x7F, 0xCD, 0x02, 0x46, 0x37,  // ......F7
                /* 0B70 */  0x07, 0x7E, 0x72, 0xC0, 0x5E, 0xB3, 0x00, 0x6F,  // .~r.^..o
                /* 0B78 */  0x97, 0x2C, 0x9F, 0x3C, 0x7C, 0x3A, 0xF6, 0x35,  // .,.<|:.5
                /* 0B80 */  0x0B, 0x3F, 0x55, 0x70, 0x5D, 0xB3, 0x00, 0x2F,  // .?Up]../
                /* 0B88 */  0xFF, 0xFF, 0x6B, 0x16, 0xC0, 0xB0, 0x70, 0xD7,  // ..k...p.
                /* 0B90 */  0x2C, 0xA0, 0x77, 0x3F, 0x02, 0xFB, 0xFF, 0xFF,  // ,.w?....
                /* 0B98 */  0x7E, 0x04, 0x53, 0xF3, 0x25, 0x8B, 0x86, 0x59,  // ~.S.%..Y
                /* 0BA0 */  0x89, 0xC2, 0xAD, 0x89, 0xC2, 0xF8, 0x92, 0x05,  // ........
                /* 0BA8 */  0x38, 0x3A, 0x61, 0x83, 0x69, 0xBA, 0xBE, 0x60,  // 8:a.i..`
                /* 0BB0 */  0xE3, 0x06, 0x73, 0x6A, 0x51, 0x23, 0xF4, 0x8E,  // ..sjQ#..
                /* 0BB8 */  0xA8, 0x0B, 0x1B, 0x3B, 0x1A, 0x83, 0xE3, 0x8A,  // ...;....
                /* 0BC0 */  0xE5, 0x8B, 0xD5, 0xFB, 0x95, 0x8F, 0xC3, 0x3E,  // .......>
                /* 0BC8 */  0x33, 0xBC, 0x5E, 0x19, 0xED, 0xCD, 0xEA, 0xD9,  // 3.^.....
                /* 0BD0 */  0xE1, 0x1D, 0xCB, 0x58, 0x11, 0x7C, 0x34, 0xF6,  // ...X.|4.
                /* 0BD8 */  0x61, 0xCB, 0xE7, 0xAC, 0x28, 0x0F, 0xC7, 0xC6,  // a...(...
                /* 0BE0 */  0x7C, 0xC4, 0x0A, 0x74, 0x1E, 0x81, 0x43, 0x44,  // |..t..CD
                /* 0BE8 */  0x8B, 0x15, 0x36, 0xC4, 0x3B, 0x16, 0x78, 0x05,  // ..6.;.x.
                /* 0BF0 */  0xDD, 0xB1, 0x40, 0xFC, 0xFF, 0xBF, 0x63, 0x01,  // ..@...c.
                /* 0BF8 */  0xB6, 0xCF, 0x1E, 0xB8, 0x3B, 0x16, 0x58, 0x2E,  // ....;.X.
                /* 0C00 */  0x0E, 0xEC, 0xE0, 0xC4, 0xEF, 0x0D, 0xF8, 0x1B,  // ........
                /* 0C08 */  0x16, 0xE0, 0x29, 0xCD, 0x0D, 0x8B, 0x26, 0xB9,  // ..)...&.
                /* 0C10 */  0x61, 0xA1, 0x8E, 0x26, 0xD6, 0xA3, 0xE0, 0xFF,  // a..&....
                /* 0C18 */  0x7F, 0xE2, 0xE0, 0x13, 0x85, 0x7D, 0xBF, 0x02,  // .....}..
                /* 0C20 */  0xFF, 0x2C, 0x7C, 0xBF, 0x02, 0x6C, 0xE3, 0xBF,  // .,|..l..
                /* 0C28 */  0x5F, 0x01, 0x96, 0xFE, 0xFF, 0xF7, 0x2B, 0xF8,  // _.....+.
                /* 0C30 */  0x07, 0x46, 0x8F, 0xD4, 0x97, 0x2A, 0x70, 0x5D,  // .F...*p]
                /* 0C38 */  0xB5, 0xF0, 0xA0, 0xAF, 0x5A, 0x30, 0x73, 0x1E,  // ....Z0s.
                /* 0C40 */  0x7F, 0x51, 0x01, 0x8F, 0xBF, 0x80, 0xD6, 0x9B,  // .Q......
                /* 0C48 */  0x14, 0x3F, 0x28, 0x3D, 0x2B, 0x3C, 0x11, 0x19,  // .?(=+<..
                /* 0C50 */  0x8D, 0x23, 0xBD, 0x39, 0xD8, 0x38, 0x96, 0xC0,  // .#.9.8..
                /* 0C58 */  0x8D, 0xE8, 0xE3, 0x2F, 0x18, 0x46, 0xF0, 0xF0,  // .../.F..
                /* 0C60 */  0xF4, 0xCC, 0xF0, 0x1A, 0xE5, 0xEB, 0x93, 0xEF,  // ........
                /* 0C68 */  0x52, 0xCF, 0x50, 0xC1, 0x9E, 0xA6, 0x7C, 0x01,  // R.P...|.
                /* 0C70 */  0xF6, 0x55, 0xCA, 0x38, 0x6F, 0x51, 0x51, 0xE2,  // .U.8oQQ.
                /* 0C78 */  0x3C, 0x45, 0x19, 0x33, 0x4A, 0xB8, 0x08, 0x91,  // <E.3J...
                /* 0C80 */  0x9E, 0xA9, 0x0C, 0x11, 0x3E, 0x42, 0xB4, 0xE7,  // ....>B..
                /* 0C88 */  0xA9, 0xC7, 0x29, 0x5F, 0xA5, 0xF8, 0xFF, 0xFF,  // ..)_....
                /* 0C90 */  0x2A, 0x05, 0x3E, 0x49, 0x57, 0x29, 0x80, 0x26,  // *.>IW).&
                /* 0C98 */  0xC3, 0x7F, 0x95, 0x02, 0xEB, 0xC9, 0x01, 0x7F,  // ........
                /* 0CA0 */  0x71, 0xC0, 0x1E, 0x1C, 0xD8, 0x5D, 0x0A, 0xB8,  // q....]..
                /* 0CA8 */  0xFC, 0xFF, 0x4F, 0xBF, 0xC0, 0x77, 0xA6, 0x60,  // ..O..w.`
                /* 0CB0 */  0x3A, 0xFD, 0x02, 0x2C, 0xFB, 0xFF, 0x9F, 0x7E,  // :..,...~
                /* 0CB8 */  0x01, 0x76, 0x5C, 0x8F, 0xC0, 0xA7, 0xD0, 0xA6,  // .v\.....
                /* 0CC0 */  0x4F, 0x8D, 0x46, 0xAD, 0x1A, 0x94, 0xA9, 0x51,  // O.F....Q
                /* 0CC8 */  0xA6, 0x41, 0xAD, 0x3E, 0x95, 0x1A, 0x33, 0x06,  // .A.>..3.
                /* 0CD0 */  0xF7, 0x26, 0xA4, 0x1B, 0x06, 0x15, 0xB3, 0x2E,  // .&......
                /* 0CD8 */  0x0D, 0xCC, 0x51, 0x40, 0xA8, 0x6C, 0x09, 0x20,  // ..Q@.l. 
                /* 0CE0 */  0x2C, 0xE4, 0x1F, 0x48, 0x80, 0x0E, 0xF6, 0xD9,  // ,..H....
                /* 0CE8 */  0xD2, 0x68, 0xC9, 0xB2, 0x04, 0xE2, 0xF8, 0x26,  // .h.....&
                /* 0CF0 */  0x20, 0x1A, 0x01, 0x91, 0x16, 0x15, 0x40, 0x2C,  //  .....@,
                /* 0CF8 */  0x37, 0x88, 0x80, 0xAC, 0x62, 0xD1, 0x02, 0xB2,  // 7...b...
                /* 0D00 */  0xE6, 0x9F, 0x8D, 0xC0, 0xAD, 0x53, 0x07, 0x10,  // .....S..
                /* 0D08 */  0x4B, 0x09, 0x42, 0x13, 0x3D, 0x07, 0x04, 0xEA,  // K.B.=...
                /* 0D10 */  0x78, 0x20, 0x1A, 0x0C, 0xA1, 0x11, 0x90, 0x83,  // x ......
                /* 0D18 */  0x51, 0x08, 0xC8, 0x32, 0x9C, 0x80, 0x33, 0x01,  // Q..2..3.
                /* 0D20 */  0x56, 0x80, 0xFC, 0xFF, 0xBF, 0xF9, 0x08, 0x84,  // V.......
                /* 0D28 */  0x0A, 0xF6, 0x02, 0xCA, 0xD4, 0x83, 0x08, 0xC8,  // ........
                /* 0D30 */  0x4A, 0x97, 0x2D, 0x20, 0xEB, 0x06, 0x11, 0x90,  // J.- ....
                /* 0D38 */  0xB3, 0x9A, 0x01, 0x67, 0x19, 0xDD, 0x00, 0x31,  // ...g...1
                /* 0D40 */  0x85, 0xCF, 0x07, 0x81, 0x58, 0x93, 0x1E, 0x50,  // ....X..P
                /* 0D48 */  0x26, 0x10, 0x44, 0xD7, 0x10, 0xE2, 0x07, 0x88,  // &.D.....
                /* 0D50 */  0x49, 0x03, 0x11, 0x90, 0xE3, 0x5C, 0x58, 0x04,  // I....\X.
                /* 0D58 */  0xEE, 0x38, 0x8A, 0x00, 0xA9, 0xA3, 0xE1, 0x52,  // .8.....R
                /* 0D60 */  0x10, 0x2A, 0xFE, 0x8B, 0x26, 0x10, 0x0B, 0xB2,  // .*..&...
                /* 0D68 */  0x04, 0x46, 0x41, 0x68, 0x04, 0x4D, 0x20, 0x4C,  // .FAh.M L
                /* 0D70 */  0x9E, 0x27, 0x10, 0x16, 0x4A, 0xD4, 0x10, 0x58,  // .'..J..X
                /* 0D78 */  0x10, 0x55, 0x43, 0xA4, 0xAE, 0x40, 0x58, 0xE0,  // .UC..@X.
                /* 0D80 */  0xE7, 0x82, 0x06, 0xE3, 0xF4, 0x20, 0x02, 0x72,  // ..... .r
                /* 0D88 */  0xD2, 0xD7, 0x56, 0x20, 0x92, 0x1B, 0x44, 0x40,  // ..V ..D@
                /* 0D90 */  0xCE, 0xFF, 0x3C, 0x11, 0xB8, 0x53, 0xBF, 0x31,  // ..<..S.1
                /* 0D98 */  0x34, 0x7C, 0xF2, 0xE0, 0x0A, 0x42, 0xC4, 0xBD,  // 4|...B..
                /* 0DA0 */  0xBE, 0x82, 0x12, 0xA5, 0x20, 0x02, 0xB2, 0xB2,  // .... ...
                /* 0DA8 */  0x3F, 0x97, 0x80, 0xAC, 0x13, 0x44, 0x40, 0xD6,  // ?....D@.
                /* 0DB0 */  0xFB, 0xFC, 0x7A, 0x10, 0x60, 0xDF, 0xAF, 0x07,  // ..z.`...
                /* 0DB8 */  0x01, 0x06, 0x42, 0x53, 0x3D, 0xB9, 0x04, 0xEA,  // ..BS=...
                /* 0DC0 */  0x88, 0x20, 0x1A, 0x28, 0x51, 0x07, 0xC4, 0xC2,  // . .(Q...
                /* 0DC8 */  0x81, 0x68, 0x80, 0xC4, 0x1D, 0x38, 0x8B, 0x66,  // .h...8.f
                /* 0DD0 */  0x0F, 0x88, 0x09, 0xFB, 0xB2, 0x08, 0xC4, 0x42,  // .......B
                /* 0DD8 */  0xFC, 0x81, 0x30, 0xE9, 0x2F, 0x0F, 0x01, 0x5A,  // ..0./..Z
                /* 0DE0 */  0xF2, 0x03, 0xE8, 0x00, 0x19, 0x08, 0x0D, 0xF8,  // ........
                /* 0DE8 */  0x1B, 0xD1, 0x10, 0x9C, 0x16, 0x44, 0x40, 0x4E,  // .....D@N
                /* 0DF0 */  0xF6, 0x10, 0x11, 0x90, 0x73, 0x82, 0x68, 0x60,  // ....s.h`
                /* 0DF8 */  0xE4, 0xC7, 0x16, 0x9C, 0xE8, 0xF9, 0xF0, 0x09,  // ........
                /* 0E00 */  0xC8, 0x69, 0x40, 0xA8, 0x72, 0x97, 0xA0, 0x2C,  // .i@.r..,
                /* 0E08 */  0x06, 0x88, 0x80, 0x2C, 0xF9, 0x2B, 0x12, 0x88,  // ...,.+..
                /* 0E10 */  0x04, 0x00, 0xD1, 0x40, 0xC8, 0x87, 0x23, 0x38,  // ...@..#8
                /* 0E18 */  0x09, 0xFA, 0xD0, 0x0E, 0x44, 0x64, 0xBE, 0x47,  // ....Dd.G
                /* 0E20 */  0x1E, 0x25, 0xD8, 0x07, 0x23, 0xA8, 0xFE, 0xFF,  // .%..#...
                /* 0E28 */  0x97, 0x38, 0x81, 0x08, 0xC8, 0x7A, 0x3E, 0x24,  // .8...z>$
                /* 0E30 */  0x02, 0xB2, 0x3A, 0x10, 0x01, 0x39, 0xCF, 0x0B,  // ..:..9..
                /* 0E38 */  0x5C, 0xE0, 0x4E, 0xA3, 0x15, 0x88, 0x69, 0x79,  // \.N...iy
                /* 0E40 */  0x84, 0x04, 0x21, 0x0A, 0xDE, 0x2B, 0x41, 0x89,  // ..!..+A.
                /* 0E48 */  0x1C, 0x10, 0x01, 0x39, 0x3A, 0x10, 0x15, 0xA2,  // ...9:...
                /* 0E50 */  0x16, 0x88, 0x05, 0x70, 0x0B, 0xCE, 0xA4, 0xDB,  // ...p....
                /* 0E58 */  0x05, 0x62, 0xC1, 0x41, 0x68, 0xDC, 0xDF, 0x4A,  // .b.Ah..J
                /* 0E60 */  0x50, 0x92, 0x1D, 0x44, 0x40, 0xCE, 0xF9, 0x8D,  // P..D@...
                /* 0E68 */  0x14, 0x90, 0x53, 0x83, 0xE8, 0x30, 0x41, 0x3E,  // ..S..0A>
                /* 0E70 */  0x60, 0xC1, 0x89, 0xC2, 0x97, 0x89, 0x80, 0x9C,  // `.......
                /* 0E78 */  0x0F, 0x84, 0xA6, 0x79, 0x5D, 0x05, 0x25, 0xD1,  // ...y].%.
                /* 0E80 */  0x40, 0x04, 0xE4, 0x18, 0x5F, 0x19, 0x01, 0x39,  // @..._..9
                /* 0E88 */  0x14, 0x88, 0x80, 0x1C, 0xEE, 0x93, 0x24, 0x70,  // ......$p
                /* 0E90 */  0xC7, 0x52, 0x0D, 0xC4, 0x44, 0x7D, 0xE2, 0x1E,  // .R..D}..
                /* 0E98 */  0x06, 0xD8, 0x7F, 0x25, 0x28, 0x51, 0x05, 0xA2,  // ...%(Q..
                /* 0EA0 */  0xE1, 0x91, 0x47, 0x8A, 0x80, 0xAC, 0x07, 0x44,  // ..G....D
                /* 0EA8 */  0x40, 0xFE, 0xFF, 0x03                           // @...
            })
        }

        Device (WMI2)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_WDG, Buffer (0x78)
            {
                /* 0000 */  0xF1, 0x24, 0xB4, 0xFC, 0x5A, 0x07, 0x0E, 0x4E,  // .$..Z..N
                /* 0008 */  0xBF, 0xC4, 0x62, 0xF3, 0xE7, 0x17, 0x71, 0xFA,  // ..b...q.
                /* 0010 */  0x41, 0x37, 0x01, 0x01, 0xE3, 0x5E, 0xBE, 0xE2,  // A7...^..
                /* 0018 */  0xDA, 0x42, 0xDB, 0x49, 0x83, 0x78, 0x1F, 0x52,  // .B.I.x.R
                /* 0020 */  0x47, 0x38, 0x82, 0x02, 0x41, 0x38, 0x01, 0x02,  // G8..A8..
                /* 0028 */  0x9A, 0x01, 0x30, 0x74, 0xE9, 0xDC, 0x48, 0x45,  // ..0t..HE
                /* 0030 */  0xBA, 0xB0, 0x9F, 0xDE, 0x09, 0x35, 0xCA, 0xFF,  // .....5..
                /* 0038 */  0x41, 0x39, 0x14, 0x05, 0x03, 0x70, 0xF4, 0x7F,  // A9...p..
                /* 0040 */  0x6C, 0x3B, 0x5E, 0x4E, 0xA2, 0x27, 0xE9, 0x79,  // l;^N.'.y
                /* 0048 */  0x82, 0x4A, 0x85, 0xD1, 0x41, 0x41, 0x01, 0x06,  // .J..AA..
                /* 0050 */  0x20, 0x63, 0x11, 0x91, 0x7E, 0x59, 0x98, 0x45,  //  c..~Y.E
                /* 0058 */  0xA1, 0x02, 0x4A, 0xEC, 0x83, 0x75, 0xC6, 0x49,  // ..J..u.I
                /* 0060 */  0x41, 0x42, 0x01, 0x06, 0x21, 0x12, 0x90, 0x05,  // AB..!...
                /* 0068 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0070 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x42, 0x01, 0x00   // ..).BB..
            })
            Name (PREL, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Method (WQA7, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WMIS (0x07, 0x00)
                PREL [0x00] = WLS0 /* \WLS0 */
                PREL [0x01] = WLS1 /* \WLS1 */
                PREL [0x02] = WLS2 /* \WLS2 */
                PREL [0x03] = WLS3 /* \WLS3 */
                PREL [0x04] = WLS4 /* \WLS4 */
                PREL [0x05] = WLS5 /* \WLS5 */
                PREL [0x06] = WLS6 /* \WLS6 */
                PREL [0x07] = WLS7 /* \WLS7 */
                Release (^^WMI1.MWMI)
                Return (PREL) /* \_SB_.WMI2.PREL */
            }

            Method (WMA8, 3, NotSerialized)
            {
                CreateByteField (Arg2, 0x00, PRE0)
                CreateByteField (Arg2, 0x01, PRE1)
                CreateByteField (Arg2, 0x02, PRE2)
                CreateByteField (Arg2, 0x03, PRE3)
                CreateByteField (Arg2, 0x04, PRE4)
                CreateByteField (Arg2, 0x05, PRE5)
                CreateByteField (Arg2, 0x06, PRE6)
                CreateByteField (Arg2, 0x07, PRE7)
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WLS0 = PRE0 /* \_SB_.WMI2.WMA8.PRE0 */
                WLS1 = PRE1 /* \_SB_.WMI2.WMA8.PRE1 */
                WLS2 = PRE2 /* \_SB_.WMI2.WMA8.PRE2 */
                WLS3 = PRE3 /* \_SB_.WMI2.WMA8.PRE3 */
                WLS4 = PRE4 /* \_SB_.WMI2.WMA8.PRE4 */
                WLS5 = PRE5 /* \_SB_.WMI2.WMA8.PRE5 */
                WLS6 = PRE6 /* \_SB_.WMI2.WMA8.PRE6 */
                WLS7 = PRE7 /* \_SB_.WMI2.WMA8.PRE7 */
                WMIS (0x08, 0x00)
                Release (^^WMI1.MWMI)
            }

            Name (ITEM, Package (0x0D)
            {
                Package (0x02)
                {
                    0x00, 
                    "InhibitEnteringThinkPadSetup"
                }, 

                Package (0x02)
                {
                    0x03, 
                    "MTMSerialConcatenation"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "SwapProductName"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ComputraceMsgDisable"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "CpuDebugEnable"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PasswordAfterBootDeviceList"
                }, 

                Package (0x02)
                {
                    0x02, 
                    "SpecialCharForPassword"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "CustomPasswordMode"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "AbsoluteFree"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ShutdownByBottomCoverTamper"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "TpmClearByBottomCoverTamper"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ShutdownByCoverTamper"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "TpmClearByCoverTamper"
                }
            })
            Name (VSEL, Package (0x04)
            {
                Package (0x02)
                {
                    "Disable", 
                    "Enable"
                }, 

                Package (0x02)
                {
                    "Off", 
                    "On"
                }, 

                Package (0x25)
                {
                    "409", 
                    "c0c", 
                    "1009", 
                    "80a", 
                    "416", 
                    "813", 
                    "406", 
                    "40a", 
                    "40c", 
                    "407", 
                    "40e", 
                    "40f", 
                    "410", 
                    "414", 
                    "816", 
                    "424", 
                    "40b", 
                    "807", 
                    "41f", 
                    "809", 
                    "411", 
                    "412", 
                    "404", 
                    "841f", 
                    "425", 
                    "8406", 
                    "405", 
                    "401", 
                    "402", 
                    "408", 
                    "40d", 
                    "419", 
                    "8409", 
                    "41e", 
                    "4009", 
                    "9009", 
                    "422"
                }, 

                Package (0x06)
                {
                    "Disable", 
                    "Enable", 
                    "Default", 
                    "MTMSN", 
                    "1SMTMSN", 
                    "MTSN"
                }
            })
            Method (WQA9, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                If ((WMIS (0x09, Arg0) != 0x00))
                {
                    Release (^^WMI1.MWMI)
                    Return ("")
                }

                Local0 = DerefOf (ITEM [WITM])
                Local1 = DerefOf (Local0 [0x00])
                Local2 = DerefOf (Local0 [0x01])
                Concatenate (Local2, ",", Local6)
                Local3 = DerefOf (VSEL [Local1])
                Concatenate (Local6, DerefOf (Local3 [WSEL]), Local7)
                Release (^^WMI1.MWMI)
                Return (Local7)
            }

            Method (WMAA, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == 0x00))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = ^^WMI1.CARG (Arg2)
                    If ((Local0 == 0x00))
                    {
                        Local0 = ^^WMI1.WSET (ITEM, VSEL)
                        If ((Local0 == 0x00))
                        {
                            Local0 = WMIS (0x0A, 0x00)
                        }
                    }
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (^^WMI1.RETN [Local0]))
            }

            Method (WMAB, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WEXF = 0x01
                PMON ("SetPlatformSettinEx %x\n", 0x00)
                If ((SizeOf (Arg2) == 0x00))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = ^^WMI1.CARG (Arg2)
                    If ((Local0 == 0x00))
                    {
                        CBFF = 0x00
                        CBFF = ^^WMI1.IBUF /* \_SB_.WMI1.IBUF */
                        Local0 = ^^WMI1.WSET (ITEM, VSEL)
                        If ((Local0 == 0x00))
                        {
                            Local0 = WMIS (0x0A, 0x00)
                        }

                        CBFF = 0x00
                    }
                }

                WEXF = 0x00
                Release (^^WMI1.MWMI)
                Return (DerefOf (^^WMI1.RETN [Local0]))
            }

            Name (WQBB, Buffer (0x05DD)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xCD, 0x05, 0x00, 0x00, 0xBC, 0x1F, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0x54, 0x8F, 0x00, 0x01, 0x06, 0x18, 0x42,  // .T.....B
                /* 0020 */  0x10, 0x0F, 0x10, 0x8A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x50, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PP...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x10, 0x88, 0x14, 0x40, 0x48, 0x28, 0x84,  // 1...@H(.
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0x0A, 0x90, 0x29, 0xC0, 0xA0,  // .....)..
                /* 0060 */  0x00, 0xA7, 0x08, 0x22, 0x88, 0xD2, 0xB2, 0x00,  // ..."....
                /* 0068 */  0xDD, 0x02, 0x7C, 0x0B, 0xD0, 0x0E, 0x21, 0xB4,  // ..|...!.
                /* 0070 */  0xC8, 0x95, 0x0A, 0xB0, 0x08, 0x25, 0x9F, 0x80,  // .....%..
                /* 0078 */  0x92, 0x88, 0x22, 0xD9, 0x78, 0xB2, 0x8D, 0x48,  // ..".x..H
                /* 0080 */  0xE6, 0x61, 0x91, 0x83, 0x40, 0x89, 0x19, 0x04,  // .a..@...
                /* 0088 */  0x4A, 0x27, 0xAE, 0x6C, 0xE2, 0x6A, 0x10, 0x07,  // J'.l.j..
                /* 0090 */  0x10, 0xE5, 0x3C, 0xA2, 0x24, 0x38, 0xAA, 0x83,  // ..<.$8..
                /* 0098 */  0x88, 0x10, 0xBB, 0x5C, 0x01, 0x92, 0x07, 0x20,  // ...\... 
                /* 00A0 */  0xCD, 0x13, 0x93, 0xF5, 0x39, 0x68, 0x64, 0x6C,  // ....9hdl
                /* 00A8 */  0x04, 0x3C, 0x98, 0x04, 0x10, 0x16, 0x65, 0x9D,  // .<....e.
                /* 00B0 */  0x8A, 0x02, 0x83, 0x1A, 0xB2, 0xE5, 0x8C, 0x15,  // ........
                /* 00B8 */  0x05, 0x6C, 0xAF, 0x13, 0x91, 0xC9, 0x81, 0x52,  // .l.....R
                /* 00C0 */  0x49, 0x70, 0xA8, 0x61, 0x7A, 0x6A, 0xCD, 0x4F,  // Ip.azj.O
                /* 00C8 */  0x4C, 0x13, 0x39, 0xB5, 0xA6, 0x87, 0x2C, 0x48,  // L.9...,H
                /* 00D0 */  0x26, 0x6D, 0x28, 0xA8, 0xB1, 0x7B, 0x5A, 0x27,  // &m(..{Z'
                /* 00D8 */  0xE5, 0x99, 0x46, 0x3C, 0x28, 0xC3, 0x24, 0xF0,  // ..F<(.$.
                /* 00E0 */  0x28, 0x18, 0x1A, 0x27, 0x28, 0x0B, 0x42, 0x0E,  // (..'(.B.
                /* 00E8 */  0x06, 0x8A, 0x02, 0x3C, 0x09, 0xCF, 0xB1, 0x78,  // ...<...x
                /* 00F0 */  0x01, 0xC2, 0x47, 0x4C, 0xCE, 0x02, 0x31, 0x12,  // ..GL..1.
                /* 00F8 */  0xF8, 0x4C, 0xE0, 0x91, 0x1F, 0x33, 0x76, 0x44,  // .L...3vD
                /* 0100 */  0xE1, 0x02, 0x9E, 0xCF, 0x31, 0x44, 0x8E, 0x7B,  // ....1D.{
                /* 0108 */  0xA8, 0x31, 0x8E, 0x22, 0xF2, 0xE1, 0x30, 0xB4,  // .1."..0.
                /* 0110 */  0xD3, 0x8D, 0x73, 0x60, 0xA7, 0x53, 0x10, 0xB8,  // ..s`.S..
                /* 0118 */  0x40, 0x82, 0xF5, 0x3C, 0x67, 0x81, 0xFC, 0xFF,  // @..<g...
                /* 0120 */  0x63, 0x1C, 0x04, 0xC3, 0x3B, 0x06, 0x8C, 0x0C,  // c...;...
                /* 0128 */  0x08, 0x79, 0x14, 0x60, 0x75, 0x58, 0x9A, 0x44,  // .y.`uX.D
                /* 0130 */  0x02, 0xBB, 0x17, 0xA0, 0xF1, 0x12, 0x20, 0x85,  // ...... .
                /* 0138 */  0x83, 0x94, 0x32, 0x08, 0xC1, 0x34, 0x26, 0xC0,  // ..2..4&.
                /* 0140 */  0xD6, 0xA1, 0x41, 0xDE, 0x04, 0x58, 0xBB, 0x0A,  // ..A..X..
                /* 0148 */  0x08, 0x25, 0xD2, 0x09, 0xC4, 0x09, 0x11, 0x25,  // .%.....%
                /* 0150 */  0x62, 0x50, 0x03, 0x45, 0xA9, 0x0D, 0x55, 0x30,  // bP.E..U0
                /* 0158 */  0x9D, 0x0D, 0x4F, 0x98, 0x71, 0x43, 0xC4, 0x30,  // ..O.qC.0
                /* 0160 */  0x50, 0xDC, 0xF6, 0x07, 0x41, 0x86, 0x8D, 0x1B,  // P...A...
                /* 0168 */  0xBF, 0x07, 0x75, 0x5A, 0x67, 0x77, 0x4C, 0xAF,  // ..uZgwL.
                /* 0170 */  0x0A, 0x26, 0xF0, 0xA4, 0xDF, 0x10, 0x9E, 0x0E,  // .&......
                /* 0178 */  0x8E, 0xE2, 0x68, 0xA3, 0xC6, 0x68, 0x8E, 0x94,  // ..h..h..
                /* 0180 */  0xAD, 0x5A, 0x1A, 0x38, 0x14, 0x09, 0x1E, 0x75,  // .Z.8...u
                /* 0188 */  0x5E, 0xF0, 0xC9, 0xC0, 0x43, 0x3B, 0x6C, 0x0F,  // ^...C;l.
                /* 0190 */  0xF6, 0x2C, 0x3D, 0x84, 0x23, 0x78, 0x66, 0x78,  // .,=.#xfx
                /* 0198 */  0x24, 0xF0, 0x18, 0xD8, 0x5D, 0xC1, 0x87, 0x00,  // $...]...
                /* 01A0 */  0x9F, 0x11, 0xF0, 0xAE, 0x01, 0x75, 0x39, 0x78,  // .....u9x
                /* 01A8 */  0x34, 0x60, 0x93, 0x0E, 0x87, 0x19, 0xAF, 0xE7,  // 4`......
                /* 01B0 */  0xEE, 0xA9, 0xFB, 0x8C, 0xC1, 0xCF, 0x1B, 0x1E,  // ........
                /* 01B8 */  0x1C, 0x6E, 0xA4, 0x27, 0x73, 0x64, 0xA5, 0x0A,  // .n.'sd..
                /* 01C0 */  0x30, 0x7B, 0x0D, 0xD0, 0x51, 0xC2, 0x07, 0x0E,  // 0{..Q...
                /* 01C8 */  0x76, 0x17, 0x78, 0x0A, 0x30, 0x81, 0xE5, 0x0F,  // v.x.0...
                /* 01D0 */  0x02, 0x35, 0x32, 0x43, 0x7B, 0xBC, 0xEF, 0x1D,  // .52C{...
                /* 01D8 */  0x86, 0x7C, 0x52, 0x38, 0x2C, 0x26, 0xF6, 0xE0,  // .|R8,&..
                /* 01E0 */  0x41, 0xC7, 0x03, 0xFE, 0xFB, 0xC8, 0x93, 0x86,  // A.......
                /* 01E8 */  0xA7, 0xEF, 0xF9, 0x9A, 0x60, 0x60, 0x08, 0x59,  // ....``.Y
                /* 01F0 */  0x19, 0x0F, 0x6A, 0x20, 0x86, 0x7E, 0x55, 0x38,  // ..j .~U8
                /* 01F8 */  0x8C, 0xD3, 0xF0, 0x09, 0xC4, 0xE7, 0x80, 0x20,  // ....... 
                /* 0200 */  0x31, 0x8E, 0xC9, 0x83, 0xF3, 0xFF, 0x9F, 0xC0,  // 1.......
                /* 0208 */  0xB1, 0x46, 0x4E, 0xCF, 0x29, 0x3E, 0x4F, 0xF0,  // .FN.)>O.
                /* 0210 */  0xC3, 0x85, 0xCF, 0x13, 0xEC, 0xC4, 0x70, 0x1A,  // ......p.
                /* 0218 */  0xCF, 0x01, 0x1E, 0xCE, 0x59, 0xF9, 0x38, 0x01,  // ....Y.8.
                /* 0220 */  0x2C, 0x20, 0x5E, 0x27, 0xF8, 0x40, 0xE1, 0xC3,  // , ^'.@..
                /* 0228 */  0x1E, 0x9A, 0x47, 0xF1, 0x12, 0xF1, 0xF6, 0x60,  // ..G....`
                /* 0230 */  0x82, 0x68, 0x0F, 0x31, 0x60, 0x9C, 0x11, 0xEE,  // .h.1`...
                /* 0238 */  0xBC, 0x01, 0xE7, 0x14, 0x03, 0x3C, 0xA0, 0x0E,  // .....<..
                /* 0240 */  0x01, 0x73, 0x98, 0xF0, 0x10, 0xF8, 0x00, 0x9E,  // .s......
                /* 0248 */  0x41, 0xCE, 0xD1, 0xC7, 0x9C, 0x33, 0xC3, 0x1D,  // A....3..
                /* 0250 */  0x77, 0xC0, 0x36, 0x0C, 0x1E, 0xD9, 0x02, 0x08,  // w.6.....
                /* 0258 */  0x8B, 0xF3, 0x24, 0x50, 0xC0, 0xB7, 0x01, 0x85,  // ..$P....
                /* 0260 */  0xF1, 0xE1, 0x06, 0xBC, 0xFF, 0xFF, 0xC3, 0x0D,  // ........
                /* 0268 */  0x70, 0x3D, 0x1F, 0xE0, 0x8E, 0x0F, 0x70, 0x2F,  // p=....p/
                /* 0270 */  0x16, 0xEC, 0xF0, 0xF0, 0x78, 0x03, 0x0C, 0x86,  // ....x...
                /* 0278 */  0xF4, 0x48, 0xF3, 0x56, 0x13, 0xE3, 0xD5, 0x26,  // .H.V...&
                /* 0280 */  0x44, 0x84, 0x87, 0x9A, 0x77, 0x1B, 0x23, 0xC5,  // D...w.#.
                /* 0288 */  0x7B, 0xBC, 0x61, 0xD7, 0x98, 0xB3, 0x78, 0x00,  // {.a...x.
                /* 0290 */  0x89, 0x52, 0x1C, 0x9A, 0x2E, 0x36, 0x31, 0xA2,  // .R...61.
                /* 0298 */  0xBC, 0xD9, 0x18, 0xF6, 0x4D, 0xC7, 0x40, 0xA1,  // ....M.@.
                /* 02A0 */  0x22, 0x45, 0x08, 0xF3, 0x62, 0x11, 0xE2, 0xF1,  // "E..b...
                /* 02A8 */  0x06, 0xCC, 0x92, 0x5E, 0x2A, 0xFA, 0x1C, 0xF8,  // ...^*...
                /* 02B0 */  0x78, 0x03, 0x78, 0xF9, 0xFF, 0x1F, 0x6F, 0x00,  // x.x...o.
                /* 02B8 */  0x0F, 0xC3, 0xF0, 0x31, 0x05, 0x6C, 0x37, 0x07,  // ...1.l7.
                /* 02C0 */  0x76, 0x4F, 0x81, 0x7F, 0x4E, 0x01, 0x1C, 0x09,  // vO..N...
                /* 02C8 */  0x79, 0x04, 0xE8, 0xE0, 0x61, 0x11, 0x20, 0xB2,  // y...a. .
                /* 02D0 */  0xF1, 0x0C, 0xF0, 0x99, 0x88, 0x0A, 0xA4, 0xD2,  // ........
                /* 02D8 */  0x4C, 0xC1, 0x32, 0x4E, 0xC1, 0xEA, 0x84, 0xC8,  // L.2N....
                /* 02E0 */  0x65, 0x50, 0x48, 0x04, 0x84, 0x46, 0x66, 0x38,  // ePH..Ff8
                /* 02E8 */  0x1F, 0x12, 0x0D, 0x66, 0x10, 0x9F, 0x0F, 0x7C,  // ...f...|
                /* 02F0 */  0xA6, 0xF0, 0xC9, 0x89, 0xFF, 0xFF, 0x4F, 0x4E,  // ......ON
                /* 02F8 */  0xE0, 0x39, 0x98, 0x3C, 0x54, 0xC0, 0x42, 0xF4,  // .9.<T.B.
                /* 0300 */  0x69, 0x81, 0xC3, 0xF9, 0xCC, 0xC2, 0xE1, 0x7C,  // i......|
                /* 0308 */  0x24, 0xE1, 0x07, 0x48, 0x7E, 0x54, 0x02, 0x97,  // $..H~T..
                /* 0310 */  0xC0, 0x43, 0x03, 0x28, 0x80, 0x7C, 0x3F, 0xF0,  // .C.(.|?.
                /* 0318 */  0x39, 0xE0, 0x19, 0x81, 0xCD, 0xE1, 0x91, 0xC0,  // 9.......
                /* 0320 */  0x07, 0x02, 0x06, 0xCF, 0xA3, 0x8D, 0x8A, 0x1E,  // ........
                /* 0328 */  0x6D, 0x3C, 0x3C, 0x7E, 0x64, 0xF0, 0x7C, 0x1E,  // m<<~d.|.
                /* 0330 */  0x08, 0x8E, 0xF2, 0x91, 0x00, 0x87, 0xF1, 0x7E,  // .......~
                /* 0338 */  0xE1, 0x21, 0xFA, 0x94, 0x03, 0x6B, 0x22, 0x47,  // .!...k"G
                /* 0340 */  0x6D, 0xD1, 0x27, 0x02, 0x81, 0x3E, 0x73, 0x61,  // m.'..>sa
                /* 0348 */  0x4E, 0x39, 0xC0, 0x29, 0xF8, 0xE8, 0x51, 0x51,  // N9.)..QQ
                /* 0350 */  0x0F, 0xA4, 0xA0, 0x3D, 0x29, 0xF8, 0xAC, 0xE0,  // ...=)...
                /* 0358 */  0xC3, 0x17, 0xFC, 0xFF, 0xFF, 0xE1, 0x0B, 0xCE,  // ........
                /* 0360 */  0xBC, 0x5E, 0xD6, 0x7C, 0xE0, 0x88, 0x73, 0x16,  // .^.|..s.
                /* 0368 */  0xA7, 0xFB, 0x6E, 0x81, 0x3F, 0x91, 0x02, 0xB3,  // ..n.?...
                /* 0370 */  0x20, 0x27, 0x52, 0x14, 0x8C, 0x4F, 0xA4, 0x80,  //  'R..O..
                /* 0378 */  0xCD, 0x5B, 0x00, 0xF6, 0xBA, 0xF0, 0x24, 0x02,  // .[....$.
                /* 0380 */  0xE3, 0x1C, 0xF1, 0x8C, 0x05, 0xF3, 0x50, 0x75,  // ......Pu
                /* 0388 */  0x8A, 0x2F, 0x55, 0x6F, 0x0C, 0x11, 0x9E, 0xAC,  // ./Uo....
                /* 0390 */  0x5E, 0xA3, 0x1E, 0xB0, 0x0C, 0xF6, 0x22, 0x60,  // ^....."`
                /* 0398 */  0x98, 0x57, 0x2C, 0x9F, 0xAE, 0x42, 0x3C, 0x60,  // .W,..B<`
                /* 03A0 */  0xF9, 0xAC, 0x15, 0x2D, 0x44, 0xC8, 0x28, 0xC1,  // ...-D.(.
                /* 03A8 */  0x5E, 0xB1, 0x5E, 0x65, 0x7C, 0xA4, 0x32, 0x78,  // ^.^e|.2x
                /* 03B0 */  0xC0, 0xB0, 0xD1, 0x22, 0x45, 0x78, 0xC4, 0xC2,  // ..."Ex..
                /* 03B8 */  0xFF, 0xFF, 0x8F, 0x58, 0xE0, 0x91, 0x70, 0x20,  // ...X..p 
                /* 03C0 */  0x05, 0xA8, 0x32, 0x70, 0xDC, 0x81, 0x14, 0xD8,  // ..2p....
                /* 03C8 */  0x9F, 0x26, 0xF0, 0xD7, 0x0B, 0x8F, 0x07, 0xFB,  // .&......
                /* 03D0 */  0xFF, 0x3F, 0x07, 0x80, 0xEF, 0x10, 0x03, 0x0C,  // .?......
                /* 03D8 */  0x06, 0x0C, 0xE3, 0x10, 0x03, 0x3C, 0x04, 0x9F,  // .....<..
                /* 03E0 */  0xCC, 0x40, 0x7F, 0xDC, 0x81, 0x3F, 0x0E, 0x9E,  // .@...?..
                /* 03E8 */  0xF1, 0xC9, 0x61, 0x02, 0x85, 0x39, 0x91, 0xA2,  // ..a..9..
                /* 03F0 */  0x60, 0x7C, 0x22, 0x05, 0x9C, 0xFD, 0xFF, 0x0F,  // `|".....
                /* 03F8 */  0x57, 0x60, 0x38, 0xDE, 0x80, 0xFF, 0x36, 0xE3,  // W`8...6.
                /* 0400 */  0x43, 0xA8, 0xCF, 0x37, 0xBE, 0x90, 0x1A, 0xE2,  // C..7....
                /* 0408 */  0xC5, 0xE6, 0x4D, 0xED, 0x95, 0xE0, 0xF5, 0x9D,  // ..M.....
                /* 0410 */  0x5D, 0x6B, 0x5E, 0xDF, 0x7D, 0x2A, 0x78, 0x12,  // ]k^.}*x.
                /* 0418 */  0x8D, 0x10, 0x32, 0xCA, 0x4B, 0x8E, 0x41, 0x42,  // ..2.K.AB
                /* 0420 */  0xBC, 0x8E, 0x1A, 0x30, 0x58, 0x90, 0x88, 0xA7,  // ...0X...
                /* 0428 */  0xF0, 0xB4, 0xF3, 0x78, 0x03, 0x5E, 0x51, 0x07,  // ...x.^Q.
                /* 0430 */  0x52, 0x80, 0x1E, 0xFF, 0xFF, 0x03, 0x29, 0x30,  // R.....)0
                /* 0438 */  0xB8, 0xA7, 0xC0, 0x3E, 0xA7, 0x00, 0x9E, 0x92,  // ...>....
                /* 0440 */  0x9F, 0x48, 0x69, 0xEA, 0x13, 0x29, 0x5A, 0x11,  // .Hi..)Z.
                /* 0448 */  0x90, 0xA6, 0x0A, 0x16, 0x82, 0xE9, 0x4F, 0xA4,  // ......O.
                /* 0450 */  0xF4, 0x60, 0xE0, 0xDC, 0x24, 0x4A, 0x3E, 0x34,  // .`..$J>4
                /* 0458 */  0x0A, 0xE7, 0xAC, 0x07, 0x12, 0x0A, 0x62, 0x40,  // ......b@
                /* 0460 */  0x07, 0x39, 0x54, 0xA0, 0xCF, 0x2A, 0x3E, 0x90,  // .9T..*>.
                /* 0468 */  0x1C, 0xC8, 0x23, 0xA2, 0x87, 0xE5, 0x43, 0xA5,  // ..#...C.
                /* 0470 */  0xEF, 0x2A, 0x3E, 0x87, 0xF8, 0x48, 0xE1, 0xF1,  // .*>..H..
                /* 0478 */  0xFB, 0xB0, 0xC0, 0xFF, 0x33, 0x3E, 0x8E, 0x32,  // ....3>.2
                /* 0480 */  0xF0, 0x6A, 0xCE, 0x2B, 0x28, 0x30, 0x9F, 0x46,  // .j.+(0.F
                /* 0488 */  0x31, 0xBA, 0xEE, 0x13, 0x20, 0xF9, 0xFF, 0xCF,  // 1... ...
                /* 0490 */  0x8F, 0xEB, 0x3B, 0x8C, 0x82, 0x1C, 0x9D, 0x87,  // ..;.....
                /* 0498 */  0x9F, 0x2C, 0x2A, 0xEE, 0x64, 0x29, 0x88, 0x27,  // .,*.d).'
                /* 04A0 */  0xEB, 0x28, 0x93, 0x45, 0xCF, 0xC4, 0xB7, 0x0B,  // .(.E....
                /* 04A8 */  0xCF, 0xE8, 0xBD, 0xCB, 0x37, 0x58, 0x76, 0x93,  // ....7Xv.
                /* 04B0 */  0x85, 0x77, 0x19, 0x08, 0xF9, 0x68, 0xE0, 0x9B,  // .w...h..
                /* 04B8 */  0x2C, 0xDC, 0xB1, 0xF8, 0x32, 0x02, 0xBE, 0x9B,  // ,...2...
                /* 04C0 */  0x2C, 0xE0, 0x75, 0x34, 0x3E, 0x5B, 0xB0, 0x53,  // ,.u4>[.S
                /* 04C8 */  0x88, 0xAF, 0x6B, 0xB0, 0xB2, 0xDE, 0xB0, 0xC8,  // ..k.....
                /* 04D0 */  0xFF, 0x9F, 0x60, 0x9C, 0x85, 0x28, 0xE4, 0x92,  // ..`..(..
                /* 04D8 */  0x28, 0x8C, 0x6F, 0x58, 0x80, 0xA3, 0xBB, 0x0D,  // (.oX....
                /* 04E0 */  0xEE, 0x86, 0x05, 0x1C, 0x80, 0x0E, 0xC5, 0x57,  // .......W
                /* 04E8 */  0x2C, 0xD8, 0x87, 0xA8, 0x37, 0xAA, 0x08, 0x3E,  // ,...7..>
                /* 04F0 */  0x5F, 0xBD, 0x60, 0x3D, 0x57, 0x3D, 0x89, 0xFA,  // _.`=W=..
                /* 04F8 */  0x5A, 0xF5, 0x6C, 0x65, 0xF4, 0x17, 0x52, 0x76,  // Z.le..Rv
                /* 0500 */  0xBA, 0xF2, 0x15, 0xCB, 0x88, 0xE1, 0x02, 0x86,  // ........
                /* 0508 */  0x32, 0x4C, 0xB8, 0x57, 0x88, 0x58, 0x81, 0x63,  // 2L.W.X.c
                /* 0510 */  0xBE, 0x90, 0xFA, 0x9C, 0xED, 0x5B, 0x15, 0xBB,  // .....[..
                /* 0518 */  0x62, 0x81, 0x53, 0xD6, 0x15, 0x0B, 0x48, 0xFD,  // b.S...H.
                /* 0520 */  0xFF, 0xAF, 0x58, 0x80, 0xD1, 0xE1, 0xBF, 0x62,  // ..X....b
                /* 0528 */  0x01, 0xA7, 0x83, 0x03, 0xBB, 0x63, 0x01, 0x9E,  // .....c..
                /* 0530 */  0xD2, 0xDF, 0xB1, 0xE8, 0x2D, 0xCB, 0x77, 0x2C,  // ....-.w,
                /* 0538 */  0x7E, 0x10, 0xB1, 0xA6, 0x3B, 0x16, 0x84, 0xFF,  // ~...;...
                /* 0540 */  0xFF, 0x5C, 0xE1, 0x5E, 0xB2, 0x00, 0x8E, 0xFF,  // .\.^....
                /* 0548 */  0xFF, 0x2F, 0x59, 0xF0, 0xC2, 0x5D, 0xB2, 0x80,  // ./Y..]..
                /* 0550 */  0xDE, 0x05, 0x09, 0x7C, 0x97, 0x2C, 0xF8, 0x17,  // ...|.,..
                /* 0558 */  0x24, 0xAE, 0xD0, 0xA6, 0x4F, 0x8D, 0x46, 0xAD,  // $...O.F.
                /* 0560 */  0x1A, 0x94, 0xA9, 0x51, 0xA6, 0x41, 0xAD, 0x3E,  // ...Q.A.>
                /* 0568 */  0x95, 0x1A, 0x33, 0xE6, 0x06, 0x4A, 0xE2, 0x6E,  // ..3..J.n
                /* 0570 */  0x18, 0x54, 0xD2, 0xBA, 0x34, 0x30, 0x07, 0x02,  // .T..40..
                /* 0578 */  0xA1, 0x01, 0x24, 0x80, 0xB0, 0xD0, 0xBF, 0x20,  // ..$.... 
                /* 0580 */  0x1D, 0x13, 0xC8, 0x77, 0x4B, 0x40, 0x16, 0xBB,  // ...wK@..
                /* 0588 */  0x2C, 0x81, 0x58, 0xA6, 0x0A, 0x88, 0x46, 0x2E,  // ,.X...F.
                /* 0590 */  0x17, 0x06, 0x11, 0x90, 0xE3, 0xFD, 0x6B, 0x04,  // ......k.
                /* 0598 */  0xEA, 0x48, 0x3A, 0x80, 0x98, 0x20, 0x1F, 0x83,  // .H:.. ..
                /* 05A0 */  0xA5, 0x4F, 0x01, 0x81, 0x58, 0x36, 0xAD, 0x00,  // .O..X6..
                /* 05A8 */  0x2D, 0xD7, 0x09, 0x10, 0x0B, 0x0B, 0x42, 0x03,  // -.....B.
                /* 05B0 */  0x5A, 0x19, 0x02, 0x4B, 0x0B, 0x22, 0x20, 0x27,  // Z..K." '
                /* 05B8 */  0xD3, 0x02, 0xC4, 0x72, 0x82, 0x08, 0xC8, 0xCA,  // ...r....
                /* 05C0 */  0x16, 0x2C, 0x70, 0x6B, 0xFA, 0x6E, 0x08, 0xC8,  // .,pk.n..
                /* 05C8 */  0x89, 0x40, 0x68, 0x92, 0x67, 0x83, 0x40, 0x1D,  // .@h.g.@.
                /* 05D0 */  0x0B, 0x44, 0x40, 0x8E, 0x60, 0x07, 0x88, 0x05,  // .D@.`...
                /* 05D8 */  0x02, 0x11, 0x90, 0xFF, 0xFF                     // .....
            })
        }

        Device (WMI3)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_WDG, /**** Is ResourceTemplate, but EndTag not at buffer end ****/ Buffer (0x3C)
            {
                /* 0000 */  0x79, 0x36, 0x4D, 0x8F, 0x9E, 0x74, 0x79, 0x44,  // y6M..tyD
                /* 0008 */  0x9B, 0x16, 0xC6, 0x26, 0x01, 0xFD, 0x25, 0xF0,  // ...&..%.
                /* 0010 */  0x41, 0x42, 0x01, 0x02, 0x69, 0xE8, 0xD2, 0x85,  // AB..i...
                /* 0018 */  0x5A, 0x36, 0xCE, 0x4A, 0xA4, 0xD3, 0xCD, 0x69,  // Z6.J...i
                /* 0020 */  0x2B, 0x16, 0x98, 0xA0, 0x41, 0x43, 0x01, 0x02,  // +...AC..
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x42, 0x43, 0x01, 0x00                           // BC..
            })
            Method (WMAB, 3, NotSerialized)
            {
                CreateByteField (Arg2, 0x00, ASS0)
                CreateWordField (Arg2, 0x01, ASS1)
                CreateByteField (Arg2, 0x03, ASS2)
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WASB = ASS0 /* \_SB_.WMI3.WMAB.ASS0 */
                WASI = ASS1 /* \_SB_.WMI3.WMAB.ASS1 */
                WASD = ASS2 /* \_SB_.WMI3.WMAB.ASS2 */
                WMIS (0x0B, 0x00)
                Local0 = WASS /* \WASS */
                Release (^^WMI1.MWMI)
                Return (Local0)
            }

            Method (WMAC, 3, NotSerialized)
            {
                CreateByteField (Arg2, 0x00, ASS0)
                CreateWordField (Arg2, 0x01, ASS1)
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WASB = ASS0 /* \_SB_.WMI3.WMAC.ASS0 */
                WASI = ASS1 /* \_SB_.WMI3.WMAC.ASS1 */
                WMIS (0x0C, Arg1)
                Local0 = WASS /* \WASS */
                Release (^^WMI1.MWMI)
                Return (Local0)
            }

            Name (WQBC, Buffer (0x040A)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xFA, 0x03, 0x00, 0x00, 0x32, 0x12, 0x00, 0x00,  // ....2...
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0xC3, 0x88, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x07, 0x10, 0x8A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x50, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PP...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x10, 0x88, 0x14, 0x40, 0x48, 0x28, 0x84,  // 1...@H(.
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0x0A, 0x90, 0x29, 0xC0, 0xA0,  // .....)..
                /* 0060 */  0x00, 0xA7, 0x08, 0x22, 0x88, 0xD2, 0xB2, 0x00,  // ..."....
                /* 0068 */  0xDD, 0x02, 0x7C, 0x0B, 0xD0, 0x0E, 0x21, 0xB4,  // ..|...!.
                /* 0070 */  0x58, 0x07, 0x11, 0x21, 0xD2, 0x31, 0x34, 0x29,  // X..!.14)
                /* 0078 */  0x40, 0xA2, 0x00, 0x8B, 0x02, 0x64, 0xC3, 0xC8,  // @....d..
                /* 0080 */  0x36, 0x22, 0x99, 0x87, 0x45, 0x0E, 0x02, 0x25,  // 6"..E..%
                /* 0088 */  0x66, 0x10, 0x28, 0x9D, 0xE0, 0xB2, 0x89, 0xAB,  // f.(.....
                /* 0090 */  0x41, 0x9C, 0x4C, 0x94, 0xF3, 0x88, 0x92, 0xE0,  // A.L.....
                /* 0098 */  0xA8, 0x0E, 0x22, 0x42, 0xEC, 0x72, 0x05, 0x48,  // .."B.r.H
                /* 00A0 */  0x1E, 0x80, 0x34, 0x4F, 0x4C, 0xD6, 0xE7, 0xA0,  // ..4OL...
                /* 00A8 */  0x91, 0xB1, 0x11, 0xF0, 0x94, 0x1A, 0x40, 0x58,  // ......@X
                /* 00B0 */  0xA0, 0x75, 0x2A, 0xE0, 0x7A, 0x0D, 0x43, 0x3D,  // .u*.z.C=
                /* 00B8 */  0x80, 0x48, 0xCE, 0x58, 0x51, 0xC0, 0xF6, 0x3A,  // .H.XQ..:
                /* 00C0 */  0x11, 0x8D, 0xEA, 0x40, 0x99, 0x24, 0x38, 0xD4,  // ...@.$8.
                /* 00C8 */  0x30, 0x3D, 0xB5, 0xE6, 0x27, 0xA6, 0x89, 0x9C,  // 0=..'...
                /* 00D0 */  0x5A, 0xD3, 0x43, 0x16, 0x24, 0x93, 0x36, 0x14,  // Z.C.$.6.
                /* 00D8 */  0xD4, 0xD8, 0x3D, 0xAD, 0x93, 0xF2, 0x4C, 0x23,  // ..=...L#
                /* 00E0 */  0x1E, 0x94, 0x61, 0x12, 0x78, 0x14, 0x0C, 0x8D,  // ..a.x...
                /* 00E8 */  0x13, 0x94, 0x75, 0x22, 0xA0, 0x03, 0xE5, 0x80,  // ..u"....
                /* 00F0 */  0x27, 0xE1, 0x39, 0x16, 0x2F, 0x40, 0xF8, 0x88,  // '.9./@..
                /* 00F8 */  0xC9, 0xB4, 0x4D, 0xE0, 0x33, 0x81, 0x87, 0x79,  // ..M.3..y
                /* 0100 */  0xCC, 0xD8, 0x11, 0x85, 0x0B, 0x78, 0x3E, 0xC7,  // .....x>.
                /* 0108 */  0x10, 0x39, 0xEE, 0xA1, 0xC6, 0x38, 0x8A, 0xC8,  // .9...8..
                /* 0110 */  0x47, 0x60, 0x24, 0x03, 0xC5, 0x2B, 0x08, 0x89,  // G`$..+..
                /* 0118 */  0x80, 0xF8, 0x76, 0x70, 0x70, 0x91, 0xFC, 0xFF,  // ..vpp...
                /* 0120 */  0x47, 0x89, 0x11, 0x2A, 0xC6, 0xDB, 0x00, 0x6E,  // G..*...n
                /* 0128 */  0x5E, 0x09, 0x8A, 0x1E, 0x07, 0x4A, 0x06, 0x84,  // ^....J..
                /* 0130 */  0x3C, 0x0A, 0xB0, 0x7A, 0x28, 0x20, 0x04, 0x16,  // <..z( ..
                /* 0138 */  0x27, 0x40, 0xE3, 0x38, 0x05, 0xD3, 0x99, 0x00,  // '@.8....
                /* 0140 */  0x6D, 0x02, 0xBC, 0x09, 0x30, 0x27, 0xC0, 0x16,  // m...0'..
                /* 0148 */  0x86, 0x80, 0x82, 0x9C, 0x59, 0x94, 0x20, 0x11,  // ....Y. .
                /* 0150 */  0x42, 0x31, 0x88, 0x0A, 0x05, 0x18, 0x43, 0x14,  // B1....C.
                /* 0158 */  0xCA, 0x3B, 0x41, 0x8C, 0xCA, 0x20, 0x74, 0x82,  // .;A.. t.
                /* 0160 */  0x08, 0x14, 0x3D, 0x78, 0x98, 0xD6, 0x40, 0x74,  // ..=x..@t
                /* 0168 */  0x89, 0xF0, 0xC8, 0xB1, 0x47, 0x00, 0x9F, 0x19,  // ....G...
                /* 0170 */  0xCE, 0xE9, 0x04, 0x1F, 0x01, 0xDE, 0x16, 0x4C,  // .......L
                /* 0178 */  0xE0, 0x79, 0xBF, 0x24, 0x1C, 0x6A, 0xD8, 0x03,  // .y.$.j..
                /* 0180 */  0x8E, 0x1A, 0xE3, 0x28, 0x12, 0x58, 0xD0, 0x33,  // ...(.X.3
                /* 0188 */  0x42, 0x16, 0x40, 0x14, 0x09, 0x1E, 0x75, 0x64,  // B.@...ud
                /* 0190 */  0xF0, 0xE1, 0xC0, 0x23, 0x3B, 0x72, 0xCF, 0xF0,  // ...#;r..
                /* 0198 */  0x04, 0x82, 0x1C, 0xC2, 0x11, 0x3C, 0x36, 0x3C,  // .....<6<
                /* 01A0 */  0x15, 0x78, 0x0C, 0xEC, 0xBA, 0xE0, 0x73, 0x80,  // .x....s.
                /* 01A8 */  0x8F, 0x09, 0x78, 0xD7, 0x80, 0x9A, 0xF3, 0xD3,  // ..x.....
                /* 01B0 */  0x01, 0x9B, 0x72, 0x38, 0xCC, 0x70, 0x3D, 0xFD,  // ..r8.p=.
                /* 01B8 */  0x70, 0x27, 0x70, 0xD2, 0x06, 0x64, 0xB3, 0xF3,  // p'p..d..
                /* 01C0 */  0xE0, 0x70, 0xE3, 0x3C, 0x99, 0x23, 0x2B, 0x55,  // .p.<.#+U
                /* 01C8 */  0x80, 0xD9, 0x13, 0x82, 0x4E, 0x13, 0x3E, 0x73,  // ....N.>s
                /* 01D0 */  0xB0, 0xBB, 0xC0, 0xF9, 0xF4, 0x0C, 0x49, 0xE4,  // ......I.
                /* 01D8 */  0x0F, 0x02, 0x35, 0x32, 0x43, 0xFB, 0x2C, 0xF0,  // ..52C.,.
                /* 01E0 */  0xEA, 0x61, 0xC8, 0x87, 0x85, 0xC3, 0x62, 0x62,  // .a....bb
                /* 01E8 */  0xCF, 0x1E, 0x74, 0x3C, 0xE0, 0x3F, 0x25, 0x3C,  // ..t<.?%<
                /* 01F0 */  0x6C, 0x78, 0xFA, 0x9E, 0xAF, 0x09, 0xA2, 0x3D,  // lx.....=
                /* 01F8 */  0x8F, 0x80, 0xE1, 0xFF, 0x7F, 0x1E, 0x81, 0x39,  // .......9
                /* 0200 */  0x9C, 0x07, 0x84, 0x27, 0x07, 0x76, 0x80, 0xC0,  // ...'.v..
                /* 0208 */  0x1C, 0x48, 0x80, 0xC9, 0xF9, 0x02, 0x77, 0x28,  // .H....w(
                /* 0210 */  0xF0, 0x10, 0xF8, 0x00, 0x1E, 0x25, 0xCE, 0xD1,  // .....%..
                /* 0218 */  0x4A, 0x67, 0x86, 0x3C, 0xB9, 0x80, 0x2D, 0xFB,  // Jg.<..-.
                /* 0220 */  0x1B, 0x40, 0x07, 0x0F, 0xE7, 0x06, 0x91, 0x8D,  // .@......
                /* 0228 */  0x57, 0x80, 0x09, 0x74, 0x38, 0xB1, 0x1E, 0x20,  // W..t8.. 
                /* 0230 */  0x4D, 0x14, 0x0C, 0x04, 0xD3, 0xD3, 0x6B, 0x00,  // M.....k.
                /* 0238 */  0x3E, 0x15, 0x38, 0x37, 0x89, 0x92, 0x0F, 0x8C,  // >.87....
                /* 0240 */  0xC2, 0x39, 0xEB, 0x79, 0x84, 0x82, 0x18, 0xD0,  // .9.y....
                /* 0248 */  0x41, 0x20, 0xE4, 0xE4, 0xA0, 0x80, 0x3A, 0xAA,  // A ....:.
                /* 0250 */  0xF8, 0x3C, 0x72, 0xAA, 0x0F, 0x3D, 0x9E, 0x94,  // .<r..=..
                /* 0258 */  0x47, 0xE1, 0xAB, 0x8A, 0x0F, 0x21, 0x3E, 0x4F,  // G....!>O
                /* 0260 */  0x78, 0xF4, 0x3E, 0x29, 0xF0, 0xEF, 0x8C, 0xAF,  // x.>)....
                /* 0268 */  0x0E, 0x46, 0xB7, 0x9A, 0xE3, 0x0A, 0x0A, 0xCC,  // .F......
                /* 0270 */  0x67, 0x11, 0x4E, 0x50, 0xD7, 0x6D, 0x01, 0xFA,  // g.NP.m..
                /* 0278 */  0x29, 0xE0, 0x08, 0x3C, 0x94, 0x77, 0x92, 0xC7,  // )..<.w..
                /* 0280 */  0x90, 0x04, 0xF5, 0x9D, 0x16, 0x40, 0x01, 0xE4,  // .....@..
                /* 0288 */  0x9B, 0x81, 0x4F, 0x02, 0x21, 0xFE, 0xFF, 0x4F,  // ..O.!..O
                /* 0290 */  0x07, 0x1E, 0xC3, 0xC3, 0x80, 0xD1, 0x8C, 0xCE,  // ........
                /* 0298 */  0xC3, 0x4F, 0x16, 0x15, 0x77, 0xB2, 0x14, 0xC4,  // .O..w...
                /* 02A0 */  0x93, 0x75, 0x94, 0xC9, 0xA2, 0x67, 0xE2, 0xAB,  // .u...g..
                /* 02A8 */  0x85, 0x27, 0x74, 0x4A, 0x41, 0xCE, 0xD1, 0x13,  // .'tJA...
                /* 02B0 */  0xF6, 0x55, 0x04, 0xD6, 0xF9, 0x20, 0xE4, 0x8B,  // .U... ..
                /* 02B8 */  0x81, 0xA7, 0x61, 0x38, 0x4F, 0x96, 0xC3, 0x79,  // ..a8O..y
                /* 02C0 */  0xB2, 0x7C, 0x2C, 0xBE, 0x6A, 0xC0, 0x1F, 0x2D,  // .|,.j..-
                /* 02C8 */  0x96, 0xA0, 0xC0, 0xD9, 0x82, 0x1C, 0x1E, 0x13,  // ........
                /* 02D0 */  0x6F, 0x54, 0xF4, 0x46, 0xE4, 0xE1, 0xF1, 0xCB,  // oT.F....
                /* 02D8 */  0x81, 0xE7, 0xF3, 0x8C, 0x70, 0x94, 0x6F, 0x12,  // ....p.o.
                /* 02E0 */  0x38, 0x8C, 0xC7, 0x12, 0x0F, 0xD1, 0x97, 0x23,  // 8......#
                /* 02E8 */  0x58, 0x13, 0x39, 0x69, 0xDF, 0x16, 0x4E, 0x36,  // X.9i..N6
                /* 02F0 */  0xE8, 0x4B, 0x10, 0xBB, 0x1C, 0x01, 0xBF, 0x88,  // .K......
                /* 02F8 */  0x26, 0x86, 0xC1, 0x22, 0x2D, 0x45, 0x11, 0x17,  // &.."-E..
                /* 0300 */  0x45, 0x61, 0x7C, 0xC5, 0x82, 0xFD, 0xFF, 0xBF,  // Ea|.....
                /* 0308 */  0x62, 0x01, 0x16, 0x04, 0x0F, 0x1B, 0x34, 0x87,  // b.....4.
                /* 0310 */  0x83, 0x97, 0x1E, 0x36, 0x6B, 0x38, 0x07, 0x99,  // ...6k8..
                /* 0318 */  0xD3, 0xF1, 0x48, 0x4E, 0x1B, 0xC6, 0x1D, 0x0B,  // ..HN....
                /* 0320 */  0xFE, 0x9D, 0xEA, 0xA9, 0xCA, 0xD3, 0x8A, 0xF2,  // ........
                /* 0328 */  0x64, 0xF5, 0x7A, 0xE5, 0x63, 0x96, 0xA1, 0xCE,  // d.z.c...
                /* 0330 */  0xE0, 0x1D, 0xCB, 0xB7, 0x3C, 0x4F, 0x21, 0x4A,  // ....<O!J
                /* 0338 */  0x9C, 0x97, 0x2D, 0x76, 0xC7, 0x32, 0x48, 0x50,  // ..-v.2HP
                /* 0340 */  0x23, 0x3F, 0x68, 0x31, 0x94, 0xE0, 0xF1, 0xDE,  // #?h1....
                /* 0348 */  0xB1, 0x00, 0x6F, 0xFF, 0xFF, 0x3B, 0x16, 0x60,  // ..o..;.`
                /* 0350 */  0xFC, 0x04, 0xC1, 0x09, 0x7C, 0xC7, 0x02, 0x1C,  // ....|...
                /* 0358 */  0xC5, 0x7E, 0x37, 0xE8, 0x4A, 0x45, 0xEE, 0x58,  // .~7.JE.X
                /* 0360 */  0x28, 0x0E, 0xAB, 0xB9, 0x63, 0x41, 0x9C, 0x28,  // (...cA.(
                /* 0368 */  0xE6, 0x8A, 0x05, 0x86, 0xFF, 0xFF, 0x15, 0x0B,  // ........
                /* 0370 */  0xE0, 0x75, 0xC0, 0x2B, 0x16, 0x68, 0xFE, 0xFF,  // .u.+.h..
                /* 0378 */  0x57, 0x2C, 0xF0, 0x5E, 0x8E, 0x80, 0xDF, 0x09,  // W,.^....
                /* 0380 */  0xD1, 0x77, 0x0D, 0x7E, 0x9A, 0xB6, 0xA2, 0xBB,  // .w.~....
                /* 0388 */  0x06, 0x94, 0x19, 0xBE, 0x07, 0xF9, 0xB0, 0x13,  // ........
                /* 0390 */  0x2C, 0xD2, 0xA3, 0x8D, 0x6F, 0x49, 0xE1, 0x7C,  // ,...oI.|
                /* 0398 */  0xDB, 0x00, 0xD8, 0xF2, 0xFF, 0xBF, 0x6D, 0x00,  // ......m.
                /* 03A0 */  0x4C, 0x19, 0xBF, 0x6F, 0x1B, 0xC0, 0x4F, 0xA1,  // L..o..O.
                /* 03A8 */  0x4D, 0x9F, 0x1A, 0x8D, 0x5A, 0x35, 0x28, 0x53,  // M...Z5(S
                /* 03B0 */  0xA3, 0x4C, 0x83, 0x5A, 0x7D, 0x2A, 0x35, 0x66,  // .L.Z}*5f
                /* 03B8 */  0x4C, 0xC9, 0xC1, 0xCE, 0x77, 0x0C, 0x2A, 0x6C,  // L...w.*l
                /* 03C0 */  0x65, 0x1A, 0x9A, 0x63, 0x81, 0xD0, 0x10, 0xC7,  // e..c....
                /* 03C8 */  0x26, 0x19, 0x01, 0x51, 0x22, 0x10, 0x01, 0x59,  // &..Q"..Y
                /* 03D0 */  0xFD, 0x6F, 0x42, 0x40, 0xCE, 0x02, 0x22, 0x20,  // .oB@.." 
                /* 03D8 */  0x2B, 0x58, 0x9A, 0xC0, 0x9D, 0xFF, 0xD8, 0x28,  // +X.....(
                /* 03E0 */  0x40, 0xA2, 0x02, 0x84, 0x29, 0x7D, 0x93, 0x09,  // @...)}..
                /* 03E8 */  0xD4, 0xB2, 0x41, 0x04, 0xF4, 0xFF, 0x3F, 0x42,  // ..A...?B
                /* 03F0 */  0xD9, 0x00, 0x62, 0x82, 0x41, 0x04, 0x64, 0x91,  // ..b.A.d.
                /* 03F8 */  0x3E, 0x80, 0x98, 0x62, 0x10, 0x01, 0x59, 0xDD,  // >..b..Y.
                /* 0400 */  0xA3, 0x40, 0x40, 0xD6, 0x0A, 0x22, 0x20, 0xFF,  // .@@.." .
                /* 0408 */  0xFF, 0x01                                       // ..
            })
        }

        Device (WMI4)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x57, 0xBB, 0x84, 0x85, 0x31, 0x5E, 0xC4, 0x46,  // W...1^.F
                /* 0008 */  0xBC, 0x8E, 0x5E, 0x94, 0x56, 0x3A, 0xE4, 0x15,  // ..^.V:..
                /* 0010 */  0x41, 0x44, 0x01, 0x06, 0x21, 0x12, 0x90, 0x05,  // AD..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x44, 0x01, 0x00   // ..).BD..
            })
            Name (TDRV, Package (0x08)
            {
                "Drv1", 
                "Drv2", 
                "Drv3", 
                "Drv4", 
                "Drv5", 
                "Drv6", 
                "Drv7", 
                "Drv8"
            })
            Name (PTYP, Package (0x07)
            {
                "POP", 
                "SVP", 
                "SMP", 
                "UHDP", 
                "MHDP", 
                "UDRP", 
                "ADRP"
            })
            Name (EMTH, Package (0x0E)
            {
                "ATAN", 
                "ATAC", 
                "DOD", 
                "SPZ", 
                "USNAF", 
                "CCI6", 
                "BHI5", 
                "GV", 
                "RGP1", 
                "RGP4", 
                "RTOII", 
                "OPALPASS", 
                "NVMEU", 
                "NVMEC"
            })
            Method (WMAD, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == 0x00))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = ^^WMI1.CARG (Arg2)
                    If ((Local0 == 0x00))
                    {
                        If ((^^WMI1.ILEN != 0x00))
                        {
                            ^^WMI1.CLRP ()
                            Local0 = SWIP (^^WMI1.IBUF)
                            If ((Local0 == 0x00))
                            {
                                Local0 = WMIS (0x0D, 0x00)
                            }

                            ^^WMI1.CLRP ()
                        }
                    }
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (^^WMI1.RETN [Local0]))
            }

            Method (SWIP, 1, NotSerialized)
            {
                Local6 = ^^WMI1.GSEL (TDRV, Arg0, 0x00, 0x00)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                WDRV = Local6
                Local0 = ^^WMI1.SLEN (TDRV, Local6)
                If ((DerefOf (Arg0 [Local0]) != 0x2C))
                {
                    Return (0x02)
                }

                Local0++
                Local6 = ^^WMI1.GSEL (EMTH, Arg0, Local0, 0x00)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                WMTH = Local6
                Local0 += ^^WMI1.SLEN (EMTH, Local6)
                If ((DerefOf (Arg0 [Local0]) != 0x2C))
                {
                    Return (0x02)
                }

                Local0++
                Local6 = ^^WMI1.GSEL (PTYP, Arg0, Local0, 0x00)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                WPTY = Local6
                Local0 += ^^WMI1.SLEN (PTYP, Local6)
                If ((DerefOf (Arg0 [Local0]) != 0x2C))
                {
                    Return (0x02)
                }

                Local0++
                Local1 = ^^WMI1.GPAS (Arg0, Local0)
                If (((Local1 == Ones) || (Local1 == 0x00)))
                {
                    Return (0x02)
                }

                WPAS = ^^WMI1.PSTR /* \_SB_.WMI1.PSTR */
                Return (0x00)
            }

            Name (WQBD, Buffer (0x0322)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x12, 0x03, 0x00, 0x00, 0x36, 0x08, 0x00, 0x00,  // ....6...
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0xDA, 0x83, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x0E, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x58, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PX...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0xD4, 0x18, 0xA8, 0x58, 0x08, 0x89, 0x00,  // 1...X...
                /* 0050 */  0xA6, 0x42, 0xE0, 0x08, 0x41, 0xBF, 0x02, 0x10,  // .B..A...
                /* 0058 */  0x3A, 0x14, 0x20, 0x53, 0x80, 0x41, 0x01, 0x4E,  // :. S.A.N
                /* 0060 */  0x11, 0x44, 0x10, 0xA5, 0x65, 0x01, 0xBA, 0x05,  // .D..e...
                /* 0068 */  0xF8, 0x16, 0xA0, 0x1D, 0x42, 0x68, 0x91, 0xE2,  // ....Bh..
                /* 0070 */  0x9C, 0x42, 0xEB, 0x93, 0x10, 0x48, 0xAF, 0x02,  // .B...H..
                /* 0078 */  0x4C, 0x0B, 0x10, 0x0E, 0x22, 0x8B, 0x02, 0x64,  // L..."..d
                /* 0080 */  0x63, 0xC8, 0x36, 0x28, 0x19, 0x09, 0x13, 0x39,  // c.6(...9
                /* 0088 */  0x0C, 0x94, 0x98, 0x61, 0xA0, 0x74, 0xCE, 0x42,  // ...a.t.B
                /* 0090 */  0x36, 0x81, 0x35, 0x83, 0x42, 0x51, 0x34, 0x93,  // 6.5.BQ4.
                /* 0098 */  0x28, 0x09, 0x4E, 0xE1, 0x30, 0x22, 0x04, 0x2F,  // (.N.0"./
                /* 00A0 */  0x57, 0x80, 0xE4, 0x09, 0x48, 0xF3, 0xD4, 0x34,  // W...H..4
                /* 00A8 */  0x8F, 0x83, 0x38, 0x04, 0x36, 0x02, 0x9E, 0x58,  // ..8.6..X
                /* 00B0 */  0x03, 0x08, 0x8B, 0xB5, 0x52, 0x05, 0x75, 0x00,  // ....R.u.
                /* 00B8 */  0x83, 0xD9, 0xB6, 0x04, 0xC8, 0x19, 0x2D, 0x0A,  // ......-.
                /* 00C0 */  0xD8, 0xB3, 0x3A, 0x91, 0x26, 0x87, 0x4A, 0x25,  // ..:.&.J%
                /* 00C8 */  0xC1, 0xA1, 0x06, 0x6A, 0x89, 0x02, 0xCC, 0x8F,  // ...j....
                /* 00D0 */  0x4C, 0x13, 0x39, 0xB6, 0xD3, 0x3B, 0xC3, 0x90,  // L.9..;..
                /* 00D8 */  0x4C, 0xDA, 0x50, 0x50, 0xA3, 0xF7, 0xB4, 0x4E,  // L.PP...N
                /* 00E0 */  0xCA, 0x73, 0x8D, 0x78, 0x50, 0x86, 0x49, 0xE0,  // .s.xP.I.
                /* 00E8 */  0x51, 0x30, 0x34, 0x4E, 0x50, 0x16, 0x84, 0x76,  // Q04NP..v
                /* 00F0 */  0x44, 0x07, 0x4A, 0x00, 0x4F, 0xC2, 0x73, 0x2C,  // D.J.O.s,
                /* 00F8 */  0x7E, 0xD0, 0x64, 0x22, 0x4F, 0x03, 0x31, 0x12,  // ~.d"O.1.
                /* 0100 */  0xF8, 0x54, 0x60, 0xD1, 0x63, 0x46, 0x8F, 0x28,  // .T`.cF.(
                /* 0108 */  0x5C, 0xC0, 0xF3, 0x39, 0x86, 0xF3, 0xF7, 0x50,  // \..9...P
                /* 0110 */  0x63, 0x1C, 0x45, 0xE4, 0x04, 0xF1, 0x7D, 0x0E,  // c.E...}.
                /* 0118 */  0x60, 0x50, 0x41, 0x0A, 0x12, 0x20, 0x15, 0x5D,  // `PA.. .]
                /* 0120 */  0xFF, 0x7F, 0xB8, 0x68, 0x5D, 0xCF, 0x5D, 0x28,  // ...h].](
                /* 0128 */  0x86, 0x3A, 0xEB, 0x93, 0x0A, 0x76, 0x1C, 0xBE,  // .:...v..
                /* 0130 */  0x10, 0x70, 0x9C, 0xDE, 0x4F, 0x04, 0x74, 0x28,  // .p..O.t(
                /* 0138 */  0x58, 0x19, 0x10, 0xF2, 0x28, 0xC0, 0xEA, 0xE8,  // X...(...
                /* 0140 */  0x34, 0x97, 0x04, 0x16, 0x27, 0xC0, 0x1A, 0x84,  // 4...'...
                /* 0148 */  0xA6, 0x5A, 0x21, 0x82, 0x50, 0x7A, 0x13, 0x60,  // .Z!.Pz.`
                /* 0150 */  0x0B, 0x43, 0x83, 0xE9, 0x4C, 0x80, 0x31, 0x14,  // .C..L.1.
                /* 0158 */  0x61, 0xD5, 0x76, 0x25, 0x10, 0x46, 0x94, 0x70,  // a.v%.F.p
                /* 0160 */  0x41, 0x62, 0x06, 0x8B, 0xC7, 0xCC, 0x41, 0x09,  // Ab....A.
                /* 0168 */  0x24, 0x5C, 0xCC, 0x57, 0x83, 0x38, 0x61, 0xC2,  // $\.W.8a.
                /* 0170 */  0xC6, 0x49, 0xE0, 0xC1, 0xE3, 0x4E, 0x01, 0x3E,  // .I...N.>
                /* 0178 */  0x38, 0x1C, 0xE0, 0x41, 0x3D, 0x05, 0x3C, 0x31,  // 8..A=.<1
                /* 0180 */  0x98, 0xC0, 0x53, 0x3F, 0xB8, 0x67, 0x84, 0x97,  // ..S?.g..
                /* 0188 */  0x8A, 0x73, 0x8C, 0x1A, 0xE3, 0x0C, 0x12, 0x58,  // .s.....X
                /* 0190 */  0xD2, 0x5B, 0x42, 0x16, 0x40, 0x14, 0x09, 0x1E,  // .[B.@...
                /* 0198 */  0x75, 0x6A, 0xF0, 0xF9, 0xC0, 0x23, 0x3B, 0x78,  // uj...#;x
                /* 01A0 */  0x8F, 0xF6, 0x04, 0x82, 0x1C, 0xC2, 0x11, 0x3C,  // .......<
                /* 01A8 */  0x39, 0x3C, 0x18, 0x78, 0x0C, 0xEC, 0xC6, 0xE0,  // 9<.x....
                /* 01B0 */  0xA3, 0x80, 0x4F, 0x0A, 0xF8, 0x51, 0x07, 0x7C,  // ..O..Q.|
                /* 01B8 */  0x45, 0x78, 0x40, 0x60, 0x23, 0x0E, 0x87, 0x19,  // Ex@`#...
                /* 01C0 */  0xAE, 0x87, 0xED, 0x09, 0x9C, 0xFA, 0xB3, 0x06,  // ........
                /* 01C8 */  0x3F, 0x77, 0x78, 0x70, 0xB8, 0x91, 0x9E, 0xCC,  // ?wxp....
                /* 01D0 */  0x91, 0xBD, 0x07, 0x34, 0x7B, 0x48, 0xD0, 0x81,  // ...4{H..
                /* 01D8 */  0xC2, 0x07, 0x0F, 0x76, 0x15, 0xB0, 0x67, 0x48,  // ...v..gH
                /* 01E0 */  0x22, 0x7F, 0x10, 0xA8, 0x91, 0x19, 0xDA, 0x13,  // ".......
                /* 01E8 */  0x7E, 0xFF, 0x30, 0xE4, 0xF3, 0xC2, 0x61, 0xB1,  // ~.0...a.
                /* 01F0 */  0xE3, 0x87, 0x0F, 0x20, 0x1E, 0x0F, 0xF8, 0xEF,  // ... ....
                /* 01F8 */  0x25, 0xCF, 0x1B, 0x9E, 0xBE, 0xE7, 0xEB, 0xF3,  // %.......
                /* 0200 */  0x84, 0x81, 0xB1, 0xFF, 0xFF, 0x43, 0x09, 0x18,  // .....C..
                /* 0208 */  0x6E, 0x0F, 0xFC, 0x58, 0x02, 0xE7, 0x48, 0x02,  // n..X..H.
                /* 0210 */  0x4C, 0x26, 0xE9, 0x21, 0xF0, 0x33, 0x81, 0x87,  // L&.!.3..
                /* 0218 */  0xC0, 0x07, 0xF0, 0x24, 0x71, 0x8A, 0x56, 0x3A,  // ...$q.V:
                /* 0220 */  0x31, 0xE4, 0xE9, 0x05, 0xAC, 0xF9, 0x1F, 0x01,  // 1.......
                /* 0228 */  0x3A, 0x7C, 0x38, 0x3B, 0x88, 0x6C, 0x3C, 0x03,  // :|8;.l<.
                /* 0230 */  0x7C, 0x10, 0xA0, 0x6A, 0x80, 0x34, 0x53, 0xD8,  // |..j.4S.
                /* 0238 */  0x04, 0xD3, 0x93, 0xEB, 0xE0, 0xC3, 0x73, 0x93,  // ......s.
                /* 0240 */  0x28, 0xF9, 0xC8, 0x28, 0x9C, 0xB3, 0x1E, 0x49,  // (..(...I
                /* 0248 */  0x28, 0x88, 0x01, 0x1D, 0xE4, 0x44, 0x81, 0x3E,  // (....D.>
                /* 0250 */  0xAD, 0x78, 0x08, 0xE7, 0xFA, 0xE4, 0xE3, 0x41,  // .x.....A
                /* 0258 */  0xF9, 0x3E, 0xE2, 0xDB, 0x8A, 0x0F, 0x21, 0x3E,  // .>....!>
                /* 0260 */  0x4F, 0x78, 0xF8, 0x3E, 0x29, 0xF0, 0x1F, 0x8D,  // Ox.>)...
                /* 0268 */  0xAF, 0x0E, 0x46, 0xB7, 0x9A, 0x13, 0x0B, 0x0A,  // ..F.....
                /* 0270 */  0xCC, 0x67, 0x11, 0x4E, 0x50, 0xD7, 0x65, 0x02,  // .g.NP.e.
                /* 0278 */  0x64, 0xFA, 0x4E, 0x0B, 0x50, 0xFF, 0xFF, 0x97,  // d.N.P...
                /* 0280 */  0x00, 0x0E, 0xE4, 0xAB, 0x81, 0x8F, 0x02, 0x8F,  // ........
                /* 0288 */  0x07, 0x6C, 0x0C, 0x4F, 0x03, 0x46, 0x33, 0x3A,  // .l.O.F3:
                /* 0290 */  0x0F, 0x3F, 0x59, 0x54, 0xDC, 0xC9, 0x52, 0x10,  // .?YT..R.
                /* 0298 */  0x4F, 0xD6, 0x51, 0x26, 0x8B, 0x9E, 0x89, 0x2F,  // O.Q&.../
                /* 02A0 */  0x00, 0x9E, 0xD1, 0x2B, 0x80, 0xE7, 0xE8, 0x09,  // ...+....
                /* 02A8 */  0xFB, 0x2A, 0x02, 0xEB, 0x80, 0xF0, 0x50, 0xE3,  // .*....P.
                /* 02B0 */  0x3B, 0x06, 0x83, 0xF3, 0x64, 0x39, 0x9C, 0x27,  // ;...d9.'
                /* 02B8 */  0xCB, 0xC7, 0xE2, 0x9B, 0x08, 0xF8, 0x04, 0xCE,  // ........
                /* 02C0 */  0x16, 0xE4, 0xF0, 0x98, 0x90, 0xA3, 0xA2, 0x97,  // ........
                /* 02C8 */  0x22, 0x0F, 0x8F, 0x5F, 0x0E, 0x3C, 0x9F, 0x67,  // ".._.<.g
                /* 02D0 */  0x84, 0xA3, 0x7C, 0x92, 0xC0, 0x61, 0xBC, 0x61,  // ..|..a.a
                /* 02D8 */  0x78, 0x88, 0xBE, 0x1F, 0xC1, 0x9A, 0xC8, 0x49,  // x......I
                /* 02E0 */  0xFB, 0xB6, 0x70, 0xB2, 0x41, 0xE3, 0x87, 0xF5,  // ..p.A...
                /* 02E8 */  0xFD, 0x08, 0xB8, 0x2A, 0xB4, 0xE9, 0x53, 0xA3,  // ...*..S.
                /* 02F0 */  0x51, 0xAB, 0x06, 0x65, 0x6A, 0x94, 0x69, 0x50,  // Q..ej.iP
                /* 02F8 */  0xAB, 0x4F, 0xA5, 0xC6, 0x8C, 0x5D, 0xB3, 0x2C,  // .O...].,
                /* 0300 */  0xD0, 0xC0, 0xFF, 0x7F, 0x44, 0x4C, 0xE2, 0xDA,  // ....DL..
                /* 0308 */  0x34, 0x38, 0x07, 0x04, 0xA1, 0x71, 0xBE, 0x40,  // 48...q.@
                /* 0310 */  0x32, 0x02, 0xA2, 0x6C, 0x20, 0x02, 0x72, 0x8E,  // 2..l .r.
                /* 0318 */  0xFF, 0x84, 0x80, 0x9C, 0x0A, 0x44, 0x40, 0xFE,  // .....D@.
                /* 0320 */  0xFF, 0x03                                       // ..
            })
        }

        Device (WMI5)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_WDG, Buffer (0xDC)
            {
                /* 0000 */  0xBF, 0xEF, 0x42, 0x20, 0xF9, 0x9A, 0xDF, 0x47,  // ..B ...G
                /* 0008 */  0xB7, 0x1A, 0x28, 0x7C, 0x03, 0x0C, 0x91, 0xCF,  // ..(|....
                /* 0010 */  0x47, 0x4E, 0x01, 0x01, 0x5E, 0xB4, 0x9E, 0xB7,  // GN..^...
                /* 0018 */  0xB3, 0x85, 0xD5, 0x41, 0xA9, 0x65, 0xCC, 0x17,  // ...A.e..
                /* 0020 */  0xD2, 0x2A, 0x6D, 0x8B, 0x47, 0x4D, 0x01, 0x01,  // .*m.GM..
                /* 0028 */  0x77, 0x80, 0x92, 0x02, 0x0A, 0xAD, 0xC7, 0x4C,  // w......L
                /* 0030 */  0x96, 0xB4, 0x2B, 0x89, 0x83, 0xC4, 0x38, 0x04,  // ..+...8.
                /* 0038 */  0x53, 0x43, 0x01, 0x02, 0x61, 0x57, 0x50, 0x1F,  // SC..aWP.
                /* 0040 */  0x4A, 0x1F, 0x78, 0x4B, 0x8B, 0xD7, 0xBB, 0x52,  // J.xK...R
                /* 0048 */  0xFA, 0x7E, 0x4F, 0x37, 0x47, 0x43, 0x01, 0x02,  // .~O7GC..
                /* 0050 */  0x84, 0xC2, 0x95, 0x28, 0x84, 0x00, 0x9E, 0x41,  // ...(...A
                /* 0058 */  0xAE, 0xF6, 0x8D, 0xCB, 0xBB, 0x55, 0xB0, 0xB1,  // .....U..
                /* 0060 */  0x45, 0x43, 0x01, 0x01, 0xCF, 0xB4, 0x31, 0xD9,  // EC....1.
                /* 0068 */  0x4E, 0xF5, 0x07, 0x4D, 0x94, 0x20, 0x42, 0x85,  // N..M. B.
                /* 0070 */  0x8C, 0xC6, 0xA2, 0x34, 0x4E, 0x53, 0x01, 0x01,  // ...4NS..
                /* 0078 */  0xCC, 0xAD, 0x11, 0xBE, 0x23, 0x99, 0xAD, 0x45,  // ....#..E
                /* 0080 */  0x9E, 0x74, 0xCB, 0x5F, 0xB1, 0x04, 0xBE, 0x9D,  // .t._....
                /* 0088 */  0x57, 0x44, 0x01, 0x02, 0xC2, 0x81, 0xE0, 0x48,  // WD.....H
                /* 0090 */  0x7E, 0x18, 0xE1, 0x43, 0x8B, 0xB1, 0x62, 0xF4,  // ~..C..b.
                /* 0098 */  0x82, 0xCC, 0x66, 0x9C, 0x52, 0x44, 0x01, 0x02,  // ..f.RD..
                /* 00A0 */  0xB8, 0xE2, 0x02, 0xE7, 0x12, 0x41, 0x76, 0x47,  // .....AvG
                /* 00A8 */  0x98, 0xB3, 0xCC, 0x1B, 0x0C, 0x73, 0x92, 0xB4,  // .....s..
                /* 00B0 */  0x57, 0x50, 0x01, 0x02, 0xED, 0xD2, 0x94, 0x2B,  // WP.....+
                /* 00B8 */  0x48, 0x25, 0xDE, 0x4F, 0xAC, 0x72, 0x96, 0xCA,  // H%.O.r..
                /* 00C0 */  0x99, 0xC6, 0xBF, 0xE6, 0x52, 0x50, 0x01, 0x01,  // ....RP..
                /* 00C8 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 00D0 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 00D8 */  0x42, 0x45, 0x01, 0x00                           // BE..
            })
            Name (RETN, Package (0x0A)
            {
                "SUCCESS", 
                "ERROR: NOT_SUPPORTED", 
                "ERROR: INVALID_PARAMETER", 
                "ERROR: ACCESS_DENIED", 
                "ERROR: SYSTEM_BUSY", 
                "ERROR: OUT_OF_RESOURCES", 
                "ERROR: NOT_FOUND", 
                "ERROR: SECURITY_VIORATION", 
                "ERROR: ABORTED", 
                "ERROR: BUFFERTOOSMALL"
            })
            Method (CARU, 2, NotSerialized)
            {
                Local0 = Arg1
                If ((Local0 == 0x00))
                {
                    ^^WMI1.IBUF = 0x00
                    ^^WMI1.ILEN = 0x00
                    Return (0x00)
                }

                Local1 = SizeOf (^^WMI1.IBUF)
                Local1--
                If ((Local0 >= Local1))
                {
                    Return (0x02)
                }

                ^^WMI1.IBUF = 0x00
                Local2 = 0x00
                While ((Local2 < Local0))
                {
                    Local3 = (Local2 * 0x02)
                    ^^WMI1.IBUF [Local2] = DerefOf (Arg0 [Local3])
                    Local2++
                }

                Local0--
                Local1 = DerefOf (^^WMI1.IBUF [Local0])
                If (((Local1 == 0x3B) || (Local1 == 0x2A)))
                {
                    ^^WMI1.IBUF [Local0] = 0x00
                    ^^WMI1.ILEN = Local0
                }
                Else
                {
                    ^^WMI1.ILEN = Arg1
                }

                Return (0x00)
            }

            Method (WQGN, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WMIS (0x0E, 0x00)
                Release (^^WMI1.MWMI)
                Return (SNMA) /* \SNMA */
            }

            Method (WQGM, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WMIS (0x0E, 0x01)
                Release (^^WMI1.MWMI)
                Return (SNMA) /* \SNMA */
            }

            Method (WMSC, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                SCSB = Arg2
                Local0 = SSPL /* \SSPL */
                If ((Local0 == 0x00))
                {
                    SSPB = 0x00
                }
                Else
                {
                    Local0 /= 0x02
                }

                Local1 = CARU (SSPB, Local0)
                SSPB = 0x00
                SSPL = 0x00
                If ((Local1 == 0x00))
                {
                    If ((^^WMI1.ILEN != 0x00))
                    {
                        Local1 = ^^WMI1.CPAS (^^WMI1.IBUF, 0x00)
                    }

                    If ((Local1 == 0x00))
                    {
                        Local1 = WMIS (0x0E, 0x02)
                    }
                }

                If ((Local1 != 0x00))
                {
                    SCSB = 0x00
                    ^^WMI1.CLRP ()
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (RETN [Local1]))
            }

            Method (WMGC, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                SCSB = Arg2
                Local0 = SGPL /* \SGPL */
                If ((SGPL == 0x00))
                {
                    SGPB = 0x00
                }
                Else
                {
                    Local0 /= 0x02
                }

                Local1 = CARU (SGPB, Local0)
                SGPB = 0x00
                SGPL = 0x00
                If ((Local1 == 0x00))
                {
                    If ((^^WMI1.ILEN != 0x00))
                    {
                        Local1 = ^^WMI1.CPAS (^^WMI1.IBUF, 0x00)
                    }

                    If ((Local1 == 0x00))
                    {
                        Local1 = WMIS (0x0E, 0x03)
                    }
                }

                If ((Local1 != 0x00))
                {
                    SCSB = 0x00
                    ^^WMI1.CLRP ()
                }

                Release (^^WMI1.MWMI)
                Return (SGSB) /* \SGSB */
            }

            Method (WQEC, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = WMIS (0x0E, 0x04)
                If ((Local0 != 0x00))
                {
                    SCSB = 0x00
                }

                Release (^^WMI1.MWMI)
                Return (SEDL) /* \SEDL */
            }

            Method (WQNS, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = WMIS (0x0E, 0x04)
                If ((Local0 != 0x00))
                {
                    SCSB = 0x00
                }

                Release (^^WMI1.MWMI)
                Return (SENS) /* \SENS */
            }

            Method (WMWD, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                SCSB = Arg2
                Local0 = SWAL /* \SWAL */
                If ((Local0 == 0x00))
                {
                    SWAB = 0x00
                }
                Else
                {
                    Local0 /= 0x02
                }

                Local1 = CARU (SWAB, Local0)
                SWAL = 0x00
                SWAB = 0x00
                If ((Local1 == 0x00))
                {
                    If ((^^WMI1.ILEN != 0x00))
                    {
                        Local1 = ^^WMI1.CPAS (^^WMI1.IBUF, 0x00)
                    }

                    If ((Local1 == 0x00))
                    {
                        Local1 = WMIS (0x0E, 0x05)
                    }
                }

                If ((Local1 != 0x00))
                {
                    SCSB = 0x00
                    ^^WMI1.CLRP ()
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (RETN [Local1]))
            }

            Method (WMRD, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                SCSB = Arg2
                Local1 = WMIS (0x0E, 0x08)
                If ((Local1 != 0x00))
                {
                    SCSB = 0x00
                    ^^WMI1.CLRP ()
                }

                Release (^^WMI1.MWMI)
                Return (GWMB) /* \GWMB */
            }

            Method (WMWP, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                SCSB = Arg2
                Local0 = WMIS (0x0E, 0x06)
                If ((Local0 != 0x00))
                {
                    SCSB = 0x00
                    ^^WMI1.CLRP ()
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WQRP, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = WMIS (0x0E, 0x07)
                If ((Local0 != 0x00))
                {
                    SCSB = 0x00
                }

                Release (^^WMI1.MWMI)
                Return (GPMB) /* \GPMB */
            }

            Name (WQBE, Buffer (0x1019)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x09, 0x10, 0x00, 0x00, 0x0C, 0x5C, 0x00, 0x00,  // .....\..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0xC4, 0xAC, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
                /* 0020 */  0x10, 0x1B, 0x10, 0x92, 0x40, 0x62, 0x02, 0x09,  // ....@b..
                /* 0028 */  0x83, 0x50, 0x68, 0x16, 0x06, 0x43, 0xB8, 0x2C,  // .Ph..C.,
                /* 0030 */  0x0A, 0x42, 0x2E, 0xA0, 0xA8, 0x14, 0x08, 0x19,  // .B......
                /* 0038 */  0x16, 0xA0, 0x58, 0x80, 0x73, 0x01, 0xD2, 0x05,  // ..X.s...
                /* 0040 */  0x28, 0x47, 0x91, 0x63, 0x10, 0x11, 0xB8, 0x7F,  // (G.c....
                /* 0048 */  0x7F, 0x88, 0xE1, 0x40, 0xA4, 0x00, 0x42, 0xA2,  // ...@..B.
                /* 0050 */  0x21, 0x24, 0x02, 0x98, 0x0A, 0x81, 0x23, 0x04,  // !$....#.
                /* 0058 */  0xFD, 0x0A, 0x40, 0xE8, 0x50, 0x80, 0x4C, 0x01,  // ..@.P.L.
                /* 0060 */  0x06, 0x05, 0x38, 0x45, 0x10, 0x41, 0x94, 0x96,  // ..8E.A..
                /* 0068 */  0x05, 0xE8, 0x16, 0xE0, 0x5B, 0x80, 0x76, 0x08,  // ....[.v.
                /* 0070 */  0xA1, 0x19, 0xE7, 0x1C, 0x4E, 0xA1, 0x69, 0x01,  // ....N.i.
                /* 0078 */  0x9A, 0x21, 0x34, 0x8A, 0xC3, 0x08, 0x13, 0x29,  // .!4....)
                /* 0080 */  0x68, 0x8C, 0x78, 0x67, 0x62, 0xCF, 0x38, 0xB2,  // h.xgb.8.
                /* 0088 */  0x28, 0x40, 0x36, 0x86, 0x6C, 0x83, 0x93, 0xD1,  // (@6.l...
                /* 0090 */  0x30, 0x91, 0x43, 0x41, 0x89, 0x19, 0x0A, 0x4A,  // 0.CA...J
                /* 0098 */  0xE7, 0x4C, 0x64, 0x13, 0x58, 0x03, 0x28, 0x14,  // .Ld.X.(.
                /* 00A0 */  0x45, 0xE3, 0x88, 0x92, 0xE0, 0x0C, 0x4E, 0x21,  // E.....N!
                /* 00A8 */  0x42, 0xF0, 0x72, 0x05, 0x48, 0x9E, 0x80, 0x66,  // B.r.H..f
                /* 00B0 */  0x72, 0x14, 0xAD, 0x0F, 0x42, 0x43, 0x60, 0x23,  // r...BC`#
                /* 00B8 */  0xE0, 0x92, 0x2D, 0x80, 0x30, 0x51, 0xAB, 0x95,  // ..-.0Q..
                /* 00C0 */  0x48, 0x18, 0x94, 0x04, 0x10, 0xC9, 0x19, 0x31,  // H......1
                /* 00C8 */  0x0A, 0xD8, 0x5E, 0x27, 0x22, 0x93, 0xC3, 0xA5,  // ..^'"...
                /* 00D0 */  0xD2, 0x06, 0x8B, 0x1E, 0xE7, 0xA9, 0x1C, 0xA1,  // ........
                /* 00D8 */  0x07, 0x67, 0x02, 0xA3, 0x9E, 0xD2, 0xE1, 0xBC,  // .g......
                /* 00E0 */  0x03, 0x14, 0x8F, 0x2A, 0x8C, 0xE6, 0xA0, 0xC8,  // ...*....
                /* 00E8 */  0xC8, 0x71, 0xE3, 0xB3, 0x44, 0x58, 0x9D, 0x02,  // .q..DX..
                /* 00F0 */  0x62, 0x1F, 0xDA, 0x01, 0x17, 0x3E, 0x65, 0x32,  // b....>e2
                /* 00F8 */  0x82, 0x43, 0x4D, 0x70, 0x7C, 0x31, 0x4E, 0xED,  // .CMp|1N.
                /* 0100 */  0x6C, 0x3D, 0x64, 0xCF, 0xDA, 0x03, 0x2C, 0x08,  // l=d...,.
                /* 0108 */  0x54, 0x83, 0x87, 0x03, 0x16, 0x2E, 0x8A, 0x21,  // T......!
                /* 0110 */  0xA2, 0x1C, 0x43, 0xA0, 0xF3, 0xF4, 0x50, 0x70,  // ..C...Pp
                /* 0118 */  0x32, 0x20, 0xE4, 0x51, 0x80, 0x55, 0x01, 0xFF,  // 2 .Q.U..
                /* 0120 */  0xFF, 0xE1, 0x9D, 0x4B, 0x02, 0xCF, 0xC0, 0x93,  // ...K....
                /* 0128 */  0x6A, 0x4C, 0x80, 0x32, 0x04, 0x89, 0x1B, 0x96,  // jL.2....
                /* 0130 */  0x6C, 0x1D, 0x13, 0x34, 0xB0, 0xDA, 0x90, 0x84,  // l..4....
                /* 0138 */  0x12, 0x2C, 0x50, 0x94, 0x60, 0x51, 0xA2, 0xC5,  // .,P.`Q..
                /* 0140 */  0x8A, 0x74, 0x28, 0xA1, 0x0C, 0x6A, 0xAC, 0x40,  // .t(..j.@
                /* 0148 */  0xAD, 0x41, 0x68, 0x2C, 0x31, 0x02, 0xC5, 0x78,  // .Ah,1..x
                /* 0150 */  0x73, 0x30, 0x41, 0x41, 0x2B, 0x97, 0x86, 0x91,  // s0AA+...
                /* 0158 */  0x78, 0xF0, 0x32, 0xB2, 0x9F, 0xA7, 0x06, 0x4A,  // x.2....J
                /* 0160 */  0x70, 0x34, 0x6C, 0x82, 0x67, 0x16, 0x35, 0x81,  // p4l.g.5.
                /* 0168 */  0x63, 0x43, 0x08, 0xD4, 0xA7, 0x08, 0x3B, 0x38,  // cC....;8
                /* 0170 */  0x45, 0xA0, 0x0E, 0x01, 0x47, 0x1A, 0xF2, 0xB0,  // E...G...
                /* 0178 */  0x0E, 0x90, 0x4D, 0x2C, 0xAE, 0xCF, 0x13, 0xDE,  // ..M,....
                /* 0180 */  0x82, 0x8F, 0x03, 0x7C, 0x0C, 0x9E, 0xED, 0xD1,  // ...|....
                /* 0188 */  0x05, 0x3C, 0x06, 0x76, 0x1E, 0x30, 0x20, 0xDE,  // .<.v.0 .
                /* 0190 */  0xFB, 0x05, 0x80, 0xCC, 0xD9, 0xE7, 0x02, 0x18,  // ........
                /* 0198 */  0x47, 0x01, 0xB8, 0x23, 0xC3, 0x9D, 0x15, 0x3C,  // G..#...<
                /* 01A0 */  0x2E, 0x0E, 0xEF, 0x03, 0xC2, 0x1B, 0x44, 0xB1,  // ......D.
                /* 01A8 */  0xE7, 0x04, 0x2A, 0xEB, 0xAC, 0x80, 0xBE, 0x47,  // ..*....G
                /* 01B0 */  0x1C, 0x5B, 0xC0, 0x52, 0x05, 0xFC, 0x41, 0x9E,  // .[.R..A.
                /* 01B8 */  0x25, 0x1E, 0x25, 0x3C, 0x03, 0x1F, 0x2C, 0x3C,  // %.%<..,<
                /* 01C0 */  0xF4, 0x04, 0xA3, 0x43, 0xC8, 0x09, 0x2C, 0x1D,  // ...C..,.
                /* 01C8 */  0x33, 0x47, 0x6D, 0x7E, 0x38, 0x3A, 0x36, 0xB0,  // 3Gm~8:6.
                /* 01D0 */  0xA8, 0x10, 0xFA, 0x49, 0x78, 0xCC, 0xE0, 0x38,  // ...Ix..8
                /* 01D8 */  0x86, 0x78, 0xCC, 0xC0, 0xE3, 0xFF, 0x3F, 0x66,  // .x....?f
                /* 01E0 */  0xF8, 0x23, 0xC3, 0xDD, 0x13, 0x3C, 0x58, 0x70,  // .#...<Xp
                /* 01E8 */  0x38, 0x3B, 0x33, 0x88, 0xC0, 0x47, 0x18, 0x8F,  // 8;3..G..
                /* 01F0 */  0x16, 0x37, 0x48, 0x4F, 0x91, 0xDF, 0x38, 0xC2,  // .7HO..8.
                /* 01F8 */  0x56, 0x3F, 0x0C, 0x1A, 0x77, 0xBC, 0xA0, 0x02,  // V?..w...
                /* 0200 */  0xF4, 0x78, 0xC1, 0x2F, 0x6F, 0xBC, 0xA0, 0x19,  // .x./o...
                /* 0208 */  0x1B, 0x9C, 0x11, 0x83, 0xEF, 0xEC, 0xE0, 0x03,  // ........
                /* 0210 */  0x0F, 0x70, 0x18, 0x13, 0xE6, 0x8C, 0xC2, 0x0E,  // .p......
                /* 0218 */  0x3B, 0xC0, 0xE3, 0xFF, 0x8F, 0xE1, 0x21, 0xF0,  // ;.....!.
                /* 0220 */  0xB3, 0x86, 0x87, 0xC0, 0x07, 0xF0, 0xDC, 0x72,  // .......r
                /* 0228 */  0x92, 0x56, 0x3A, 0x35, 0xE4, 0xD9, 0x08, 0x58,  // .V:5...X
                /* 0230 */  0x0C, 0x86, 0x07, 0x7C, 0x03, 0x99, 0x40, 0x51,  // ...|..@Q
                /* 0238 */  0x8E, 0x0E, 0x8A, 0x04, 0x83, 0xF2, 0x70, 0x12,  // ......p.
                /* 0240 */  0x82, 0x2E, 0x09, 0x0E, 0x75, 0x0A, 0xF0, 0xB8,  // ....u...
                /* 0248 */  0x9F, 0x2C, 0x8E, 0xE3, 0x5C, 0xDE, 0x1D, 0x3C,  // .,..\..<
                /* 0250 */  0xA2, 0x07, 0x0D, 0x18, 0x67, 0x08, 0x8F, 0xF1,  // ....g...
                /* 0258 */  0x8C, 0x3D, 0xBB, 0xC7, 0x14, 0x8F, 0xCE, 0x04,  // .=......
                /* 0260 */  0x1E, 0x05, 0x43, 0xE3, 0x87, 0x14, 0x76, 0xA0,  // ..C...v.
                /* 0268 */  0xE0, 0xA7, 0x00, 0x1F, 0x28, 0xD8, 0x00, 0x9F,  // ....(...
                /* 0270 */  0x8D, 0x5E, 0x38, 0x3C, 0x91, 0x47, 0x20, 0x13,  // .^8<.G .
                /* 0278 */  0xF8, 0x4C, 0x63, 0xEC, 0x67, 0x18, 0xF0, 0x1C,  // .Lc.g...
                /* 0280 */  0x0E, 0x7C, 0xA9, 0x78, 0x3D, 0x62, 0x57, 0x9F,  // .|.x=bW.
                /* 0288 */  0xE3, 0x31, 0x4E, 0xB8, 0x83, 0x7F, 0x2C, 0xF2,  // .1N...,.
                /* 0290 */  0xB4, 0x1F, 0x0B, 0x0C, 0xF2, 0x5C, 0x04, 0xFB,  // .....\..
                /* 0298 */  0x0A, 0xF1, 0x36, 0xF1, 0x30, 0xE4, 0xF3, 0x81,  // ..6.0...
                /* 02A0 */  0x27, 0xF0, 0x3E, 0xE4, 0x43, 0xD1, 0xB9, 0x06,  // '.>.C...
                /* 02A8 */  0x79, 0x33, 0x32, 0x58, 0x6F, 0x93, 0x14, 0x94,  // y32Xo...
                /* 02B0 */  0xD1, 0xA2, 0x3C, 0x17, 0x05, 0x8B, 0xF2, 0x5A,  // ..<....Z
                /* 02B8 */  0x64, 0x98, 0x63, 0x8A, 0xFD, 0x46, 0x11, 0x22,  // d.c..F."
                /* 02C0 */  0x48, 0xD0, 0x60, 0x31, 0x42, 0x26, 0xF0, 0xC1,  // H.`1B&..
                /* 02C8 */  0x0A, 0xFF, 0xFF, 0x3F, 0x58, 0x81, 0x43, 0xC8,  // ...?X.C.
                /* 02D0 */  0xAA, 0x75, 0x34, 0x72, 0x24, 0x78, 0xD4, 0xD1,  // .u4r$x..
                /* 02D8 */  0xC1, 0x27, 0x03, 0x8F, 0xEC, 0xB0, 0x7D, 0xAD,  // .'....}.
                /* 02E0 */  0x30, 0xC8, 0x13, 0x94, 0x0F, 0x14, 0x8F, 0x04,  // 0.......
                /* 02E8 */  0x1E, 0x03, 0xBB, 0x2B, 0xF8, 0x10, 0xE0, 0x33,  // ...+...3
                /* 02F0 */  0x02, 0xDE, 0x35, 0xA0, 0x2E, 0x07, 0xCF, 0x26,  // ..5....&
                /* 02F8 */  0xB0, 0xCE, 0x28, 0xF8, 0xC3, 0x08, 0xFC, 0xF3,  // ..(.....
                /* 0300 */  0x1C, 0x3B, 0x8D, 0xF8, 0x2C, 0x91, 0xC0, 0xF2,  // .;..,...
                /* 0308 */  0x07, 0x81, 0x1A, 0x99, 0xA1, 0x7D, 0xBF, 0x78,  // .....}.x
                /* 0310 */  0xAD, 0x33, 0xE4, 0x93, 0xC2, 0x61, 0xB1, 0x53,  // .3...a.S
                /* 0318 */  0x89, 0x4F, 0x40, 0xE0, 0x18, 0x0F, 0xFC, 0xCB,  // .O@.....
                /* 0320 */  0xC0, 0x63, 0x88, 0xA7, 0xEF, 0xF9, 0x9A, 0x60,  // .c.....`
                /* 0328 */  0xD8, 0x93, 0x12, 0x7A, 0xB8, 0x1E, 0xF4, 0xE3,  // ...z....
                /* 0330 */  0x02, 0xC6, 0xE7, 0x89, 0x40, 0xF7, 0x80, 0xA7,  // ....@...
                /* 0338 */  0x05, 0x4C, 0xA8, 0x81, 0xD3, 0x03, 0x17, 0x78,  // .L.....x
                /* 0340 */  0x4E, 0x2B, 0xF8, 0xD3, 0x04, 0xBC, 0xD1, 0xE0,  // N+......
                /* 0348 */  0xCE, 0x12, 0x70, 0x86, 0x89, 0xFB, 0xFF, 0x9F,  // ..p.....
                /* 0350 */  0x70, 0xC0, 0x81, 0xF6, 0x84, 0x03, 0xBE, 0xDB,  // p.......
                /* 0358 */  0x06, 0x1B, 0x2F, 0xDC, 0x03, 0x0E, 0xE0, 0x50,  // ../....P
                /* 0360 */  0xC8, 0xB1, 0x91, 0xC6, 0x7A, 0x17, 0x28, 0xFA,  // ....z.(.
                /* 0368 */  0x01, 0x87, 0xC2, 0xF8, 0x80, 0x03, 0x38, 0x3A,  // ......8:
                /* 0370 */  0xCC, 0xF0, 0xFF, 0xFF, 0x01, 0x07, 0x3C, 0x53,  // ......<S
                /* 0378 */  0x38, 0xB0, 0x43, 0x88, 0x15, 0xE4, 0x29, 0xC1,  // 8.C...).
                /* 0380 */  0xB7, 0x49, 0x98, 0x63, 0xF7, 0x99, 0xC4, 0x38,  // .I.c...8
                /* 0388 */  0x27, 0xE2, 0x63, 0x0E, 0xEC, 0xCB, 0x8D, 0x2F,  // '.c..../
                /* 0390 */  0x32, 0x81, 0x83, 0x9C, 0xEB, 0x03, 0x64, 0x90,  // 2.....d.
                /* 0398 */  0x07, 0x49, 0xDF, 0x21, 0x7D, 0x9C, 0x78, 0xCC,  // .I.!}.x.
                /* 03A0 */  0xF1, 0xE9, 0xE6, 0x2D, 0xD2, 0x28, 0xA7, 0xF1,  // ...-.(..
                /* 03A8 */  0x3E, 0x69, 0x14, 0xCF, 0x24, 0x42, 0xAC, 0x87,  // >i..$B..
                /* 03B0 */  0x1D, 0xDF, 0x2C, 0x0D, 0x16, 0x2B, 0xCA, 0x4B,  // ..,..+.K
                /* 03B8 */  0xA5, 0x8F, 0x39, 0xE0, 0x15, 0x79, 0xCC, 0x01,  // ..9..y..
                /* 03C0 */  0x28, 0xF0, 0xFF, 0x3F, 0xE6, 0x80, 0xE3, 0xF1,  // (..?....
                /* 03C8 */  0xE0, 0x63, 0x0E, 0xEE, 0x28, 0x61, 0xE0, 0x87,  // .c..(a..
                /* 03D0 */  0x06, 0x1F, 0x40, 0x60, 0x9D, 0x44, 0xD8, 0x89,  // ..@`.D..
                /* 03D8 */  0x01, 0x13, 0xF0, 0xA8, 0x03, 0x3A, 0xC1, 0xE7,  // .....:..
                /* 03E0 */  0x0A, 0xD0, 0x8C, 0x88, 0x9D, 0x2A, 0xC0, 0x78,  // .....*.x
                /* 03E8 */  0xE0, 0x01, 0xDF, 0xB0, 0x7C, 0xE0, 0x01, 0xE7,  // ....|...
                /* 03F0 */  0xC8, 0xC1, 0x75, 0xE8, 0x01, 0xDE, 0xFF, 0xFF,  // ..u.....
                /* 03F8 */  0x43, 0x0F, 0x70, 0xD1, 0x69, 0x02, 0x84, 0x05,  // C.p.i...
                /* 0400 */  0x7B, 0x21, 0x28, 0xF2, 0x53, 0x81, 0xC2, 0xF8,  // {!(.S...
                /* 0408 */  0xD0, 0x03, 0x38, 0x1A, 0xE5, 0xD3, 0x04, 0x58,  // ..8....X
                /* 0410 */  0x0E, 0xA4, 0xEC, 0x16, 0xE6, 0x73, 0x98, 0xC7,  // .....s..
                /* 0418 */  0xE3, 0x39, 0xFB, 0x28, 0xC1, 0xCE, 0xE2, 0xBE,  // .9.(....
                /* 0420 */  0x93, 0xC3, 0x3F, 0xF5, 0xC0, 0x3F, 0x57, 0x3C,  // ..?..?W<
                /* 0428 */  0x4D, 0xBC, 0xD7, 0xBC, 0x20, 0x1A, 0xE5, 0x55,  // M... ..U
                /* 0430 */  0x27, 0xC2, 0x03, 0x8F, 0x8F, 0xE1, 0x3E, 0x26,  // '.....>&
                /* 0438 */  0x7A, 0xC4, 0x2F, 0x3C, 0x86, 0xF2, 0xA5, 0xC7,  // z./<....
                /* 0440 */  0xB7, 0x1F, 0x9F, 0x15, 0x0D, 0xF2, 0x70, 0x6E,  // ......pn
                /* 0448 */  0x88, 0x77, 0x8B, 0x70, 0x91, 0x62, 0x44, 0xF7,  // .w.p.bD.
                /* 0450 */  0xDC, 0x7D, 0xEA, 0x01, 0xCB, 0xFF, 0xFF, 0xD4,  // .}......
                /* 0458 */  0x83, 0x97, 0xF6, 0x80, 0xD1, 0x2F, 0xCB, 0xA7,  // ...../..
                /* 0460 */  0x1E, 0x80, 0x1F, 0x07, 0x56, 0xDC, 0xA9, 0x05,  // ....V...
                /* 0468 */  0x2C, 0xD7, 0x07, 0x76, 0x11, 0x81, 0x75, 0x60,  // ,..v..u`
                /* 0470 */  0x01, 0xE6, 0xFF, 0xFF, 0x03, 0x0B, 0x70, 0xD0,  // ......p.
                /* 0478 */  0xFA, 0x78, 0xD0, 0x09, 0xC4, 0x3A, 0x41, 0x64,  // .x...:Ad
                /* 0480 */  0xE3, 0x29, 0xE0, 0xC3, 0x00, 0xD5, 0x7D, 0xEA,  // .)....}.
                /* 0488 */  0xD3, 0x6C, 0x61, 0x43, 0x0B, 0x52, 0xF0, 0x3E,  // .laC.R.>
                /* 0490 */  0x19, 0x58, 0x21, 0x8C, 0x34, 0xBE, 0x20, 0x34,  // .X!.4. 4
                /* 0498 */  0x3A, 0xC3, 0x59, 0x15, 0x8C, 0xE0, 0x0C, 0xE2,  // :.Y.....
                /* 04A0 */  0xA3, 0x99, 0x03, 0x41, 0xC8, 0xC8, 0x40, 0x28,  // ...A..@(
                /* 04A8 */  0xA4, 0x55, 0x9C, 0x3F, 0xC8, 0xDD, 0xC8, 0x47,  // .U.?...G
                /* 04B0 */  0x04, 0x27, 0xB8, 0xCC, 0x7B, 0xFE, 0xF4, 0xAA,  // .'..{...
                /* 04B8 */  0xC0, 0xB1, 0x7D, 0x78, 0x30, 0xB0, 0xE7, 0xEC,  // ..}x0...
                /* 04C0 */  0x3B, 0x0B, 0x9F, 0xB8, 0x6F, 0x01, 0x67, 0xFC,  // ;...o.g.
                /* 04C8 */  0xDE, 0xE0, 0xFB, 0x81, 0xD5, 0xC0, 0xA1, 0xA0,  // ........
                /* 04D0 */  0x7D, 0x27, 0xE1, 0x27, 0x18, 0x76, 0x76, 0x02,  // }'.'.vv.
                /* 04D8 */  0xC7, 0x6D, 0x24, 0xC1, 0x0C, 0x07, 0x56, 0xF4,  // .m$...V.
                /* 04E0 */  0xC0, 0x8C, 0xFA, 0xBE, 0xF1, 0x2E, 0xE3, 0xDB,  // ........
                /* 04E8 */  0x0A, 0x1B, 0x89, 0x07, 0x06, 0x6F, 0x44, 0xB0,  // .....oD.
                /* 04F0 */  0x06, 0x6C, 0x5D, 0x87, 0x2B, 0x90, 0xE5, 0x98,  // .l].+...
                /* 04F8 */  0x11, 0x5A, 0xC9, 0x15, 0x1F, 0xD2, 0x9C, 0xF8,  // .Z......
                /* 0500 */  0xFF, 0x7F, 0x4E, 0x60, 0xBB, 0x19, 0x78, 0x4E,  // ..N`..xN
                /* 0508 */  0x60, 0x3B, 0x1D, 0xC0, 0x99, 0x13, 0x3F, 0x1D,  // `;....?.
                /* 0510 */  0x80, 0xF9, 0x83, 0xE2, 0x89, 0xC1, 0x42, 0xF2,  // ......B.
                /* 0518 */  0xE9, 0x00, 0x5C, 0x41, 0x8E, 0x3A, 0xE8, 0x73,  // ..\A.:.s
                /* 0520 */  0x14, 0x1B, 0xD7, 0xBB, 0x86, 0x4F, 0x1A, 0x3E,  // .....O.>
                /* 0528 */  0x5A, 0xF8, 0x1E, 0xE5, 0xC1, 0x83, 0x75, 0x9C,  // Z.....u.
                /* 0530 */  0x1E, 0x3C, 0xFC, 0x5B, 0x0E, 0x56, 0xDF, 0x31,  // .<.[.V.1
                /* 0538 */  0x06, 0x14, 0x40, 0xBE, 0xB3, 0xF8, 0x8C, 0xF2,  // ..@.....
                /* 0540 */  0xDC, 0xC2, 0xC6, 0xF0, 0x98, 0x62, 0x34, 0xA3,  // .....b4.
                /* 0548 */  0xF3, 0xF0, 0xE8, 0x14, 0xC6, 0x71, 0x6F, 0x10,  // .....qo.
                /* 0550 */  0x14, 0xC4, 0x07, 0x04, 0x47, 0x99, 0x2C, 0xF2,  // ....G.,.
                /* 0558 */  0xFF, 0x7F, 0xFB, 0x61, 0x77, 0x1E, 0xCF, 0xE8,  // ...aw...
                /* 0560 */  0xB0, 0x83, 0x3C, 0x2C, 0x92, 0xCB, 0x85, 0xEE,  // ..<,....
                /* 0568 */  0x48, 0xB0, 0x6E, 0x2C, 0x21, 0x9F, 0x56, 0x3C,  // H.n,!.V<
                /* 0570 */  0x0D, 0x9F, 0x0B, 0xF0, 0xA7, 0x0F, 0x7E, 0x7F,  // ......~.
                /* 0578 */  0xF2, 0x15, 0x09, 0x7C, 0x02, 0x67, 0x0B, 0x72,  // ...|.g.r
                /* 0580 */  0x78, 0x4C, 0xCC, 0x0B, 0x03, 0x6A, 0x78, 0xFC,  // xL...jx.
                /* 0588 */  0x72, 0xE0, 0xF9, 0x3C, 0x23, 0x1C, 0xE5, 0xE3,  // r..<#...
                /* 0590 */  0x0D, 0x0E, 0xE3, 0xE9, 0xC5, 0x43, 0xF4, 0xCD,  // .....C..
                /* 0598 */  0x0D, 0xD6, 0x44, 0x4E, 0xDA, 0xB7, 0x85, 0x93,  // ..DN....
                /* 05A0 */  0x0D, 0xFA, 0x5A, 0x89, 0xB9, 0xB9, 0x01, 0x57,  // ..Z....W
                /* 05A8 */  0x4D, 0x4B, 0xA1, 0x81, 0x96, 0xA3, 0xA8, 0x0B,  // MK......
                /* 05B0 */  0xA3, 0x30, 0xBE, 0x03, 0x02, 0x9B, 0xFF, 0xFF,  // .0......
                /* 05B8 */  0x1D, 0x10, 0x58, 0x5D, 0xAB, 0x0E, 0x1D, 0x2C,  // ..X]...,
                /* 05C0 */  0x07, 0x84, 0xC7, 0x09, 0xCC, 0xB4, 0xC1, 0x73,  // .......s
                /* 05C8 */  0xFF, 0x83, 0x7B, 0x6F, 0x8E, 0xFD, 0xEA, 0xFC,  // ..{o....
                /* 05D0 */  0x3E, 0x11, 0xE2, 0xCD, 0xEF, 0xC5, 0x2F, 0xCE,  // >...../.
                /* 05D8 */  0x83, 0x5F, 0x24, 0xCF, 0xF5, 0xFD, 0x8F, 0x1D,  // ._$.....
                /* 05E0 */  0xA6, 0x7D, 0x5A, 0x79, 0x93, 0x36, 0xCA, 0x41,  // .}Zy.6.A
                /* 05E8 */  0x3C, 0x02, 0x1A, 0x24, 0x42, 0xD8, 0x47, 0x9B,  // <..$B.G.
                /* 05F0 */  0x27, 0x30, 0x03, 0x1D, 0x4A, 0xC8, 0x28, 0x8F,  // '0..J.(.
                /* 05F8 */  0x37, 0x51, 0xDE, 0xFF, 0x00, 0xD3, 0xFF, 0xFF,  // 7Q......
                /* 0600 */  0xFB, 0x1F, 0xE0, 0xE9, 0x12, 0xCC, 0xEE, 0x7F,  // ........
                /* 0608 */  0x80, 0x53, 0x7D, 0x17, 0x3E, 0xAA, 0x0D, 0x44,  // .S}.>..D
                /* 0610 */  0xF7, 0x3F, 0x9C, 0xE6, 0x47, 0x83, 0x66, 0x0B,  // .?..G.f.
                /* 0618 */  0xFB, 0xEE, 0xC7, 0xEE, 0x7F, 0x5C, 0x1D, 0x8C,  // .....\..
                /* 0620 */  0x92, 0xD0, 0xE8, 0xB8, 0xC4, 0xB5, 0xC3, 0x08,  // ........
                /* 0628 */  0xCE, 0x20, 0x3E, 0x47, 0xF8, 0xFE, 0x07, 0xEB,  // . >G....
                /* 0630 */  0xFF, 0x7F, 0xFF, 0x03, 0x4C, 0x5C, 0xC9, 0x80,  // ....L\..
                /* 0638 */  0xDD, 0x11, 0x10, 0x1C, 0x57, 0x32, 0xE0, 0x14,  // ....W2..
                /* 0640 */  0xE9, 0x52, 0x80, 0x0A, 0x71, 0x29, 0xA0, 0x20,  // .R..q). 
                /* 0648 */  0x9E, 0x98, 0xC3, 0x5C, 0x0D, 0xD1, 0x93, 0xF5,  // ...\....
                /* 0650 */  0xD5, 0x10, 0xC6, 0x9D, 0x0C, 0xEC, 0xD7, 0x06,  // ........
                /* 0658 */  0xDF, 0x4B, 0xE0, 0xFE, 0xFF, 0x0F, 0xFB, 0x70,  // .K.....p
                /* 0660 */  0x42, 0x5D, 0x1D, 0xD0, 0x97, 0x15, 0x9F, 0x0E,  // B]......
                /* 0668 */  0x31, 0x03, 0xD4, 0xD9, 0x81, 0x0E, 0x0A, 0x5C,  // 1......\
                /* 0670 */  0xD7, 0x43, 0xDC, 0xD8, 0xE0, 0x9D, 0x0F, 0xC1,  // .C......
                /* 0678 */  0x77, 0x7B, 0x03, 0x1E, 0xF1, 0x6E, 0x6F, 0x40,  // w{...no@
                /* 0680 */  0xEF, 0xCE, 0x05, 0xDC, 0x04, 0xFE, 0xA5, 0x4C,  // .......L
                /* 0688 */  0xA0, 0x38, 0x4B, 0x91, 0x24, 0x18, 0xD4, 0xCD,  // .8K.$...
                /* 0690 */  0x0D, 0x3C, 0xFF, 0xFF, 0x9B, 0x1B, 0x70, 0x3F,  // .<....p?
                /* 0698 */  0x34, 0x78, 0xD8, 0xE0, 0xC0, 0x8F, 0x71, 0xD6,  // 4x....q.
                /* 06A0 */  0x4F, 0x04, 0x3E, 0xB3, 0x78, 0xC2, 0x6C, 0xDA,  // O.>.x.l.
                /* 06A8 */  0xB0, 0xF0, 0x13, 0xF8, 0xE2, 0x06, 0xF7, 0xA2,  // ........
                /* 06B0 */  0xF1, 0xEE, 0xEF, 0xD3, 0x5A, 0xE4, 0x28, 0x9E,  // ....Z.(.
                /* 06B8 */  0xE8, 0x13, 0xDB, 0x7B, 0x47, 0x84, 0x28, 0x0C,  // ...{G.(.
                /* 06C0 */  0xE2, 0xDD, 0x2D, 0xDC, 0x19, 0x44, 0x39, 0x87,  // ..-..D9.
                /* 06C8 */  0xD7, 0x26, 0x5F, 0xE0, 0x9E, 0xDD, 0x3C, 0xD6,  // .&_...<.
                /* 06D0 */  0xB0, 0x8F, 0x6E, 0xBE, 0xBA, 0x19, 0x21, 0x46,  // ..n...!F
                /* 06D8 */  0xDC, 0x10, 0x41, 0x5F, 0xDC, 0xC0, 0x1B, 0xE2,  // ..A_....
                /* 06E0 */  0x8C, 0x4D, 0x2F, 0x6E, 0x80, 0x87, 0xFF, 0xFF,  // .M/n....
                /* 06E8 */  0xC5, 0x0D, 0xF0, 0x22, 0xF1, 0xE1, 0xA0, 0x3B,  // ..."...;
                /* 06F0 */  0x17, 0x1F, 0x8F, 0x45, 0x41, 0x93, 0xD3, 0x02,  // ...EA...
                /* 06F8 */  0x9C, 0xCB, 0x0F, 0xE6, 0xFE, 0xE1, 0x0B, 0x83,  // ........
                /* 0700 */  0x45, 0xC0, 0xEB, 0x60, 0x63, 0x68, 0x9F, 0x29,  // E..`ch.)
                /* 0708 */  0xF8, 0x01, 0xC3, 0x67, 0x0A, 0x06, 0xCC, 0x0F,  // ...g....
                /* 0710 */  0x26, 0x98, 0x23, 0x05, 0xF0, 0x3A, 0xF1, 0xC0,  // &.#..:..
                /* 0718 */  0x1B, 0x97, 0xC7, 0xE3, 0x41, 0xC3, 0x9D, 0xCC,  // ....A...
                /* 0720 */  0x49, 0x57, 0x3D, 0x05, 0xDD, 0x05, 0xAC, 0xEE,  // IW=.....
                /* 0728 */  0x28, 0x07, 0x92, 0x21, 0x63, 0x09, 0x2C, 0xF8,  // (..!c.,.
                /* 0730 */  0xE0, 0x03, 0x8A, 0xFF, 0xFF, 0x34, 0xB0, 0x13,  // .....4..
                /* 0738 */  0x85, 0x31, 0x16, 0x58, 0x03, 0x65, 0xB7, 0x41,  // .1.X.e.A
                /* 0740 */  0xC0, 0xDD, 0x60, 0xB8, 0x84, 0xD3, 0x0F, 0x2A,  // ..`....*
                /* 0748 */  0xF4, 0xB3, 0xC0, 0x07, 0x20, 0x40, 0xF7, 0xFF,  // .... @..
                /* 0750 */  0xFF, 0x00, 0x04, 0xBE, 0xE9, 0x3D, 0xE2, 0x3C,  // .....=.<
                /* 0758 */  0xBA, 0x3D, 0xF0, 0xBC, 0x57, 0x9C, 0x67, 0xEC,  // .=..W.g.
                /* 0760 */  0xF0, 0x2F, 0x3E, 0x2F, 0xC3, 0x86, 0x79, 0xFB,  // ./>/..y.
                /* 0768 */  0x31, 0x46, 0xBC, 0x47, 0x95, 0xC7, 0x60, 0x43,  // 1F.G..`C
                /* 0770 */  0x86, 0x79, 0x10, 0x0A, 0x13, 0xCA, 0x47, 0x21,  // .y....G!
                /* 0778 */  0x23, 0x86, 0x88, 0x1B, 0xE1, 0x25, 0xE8, 0x50,  // #....%.P
                /* 0780 */  0x02, 0x1D, 0xC0, 0x69, 0xFB, 0x00, 0x04, 0x56,  // ...i...V
                /* 0788 */  0x99, 0x07, 0x20, 0x80, 0x26, 0x0F, 0x07, 0x9F,  // .. .&...
                /* 0790 */  0x23, 0x71, 0x03, 0xF0, 0xA0, 0xDF, 0x18, 0x8C,  // #q......
                /* 0798 */  0xFA, 0xBA, 0x60, 0x9F, 0xC7, 0x03, 0x8D, 0xE9,  // ..`.....
                /* 07A0 */  0x8C, 0xFE, 0xFF, 0x71, 0x8F, 0x29, 0x76, 0x8C,  // ...q.)v.
                /* 07A8 */  0x58, 0xE1, 0x7D, 0x18, 0x88, 0xF1, 0x66, 0xE2,  // X.}...f.
                /* 07B0 */  0x23, 0x03, 0x3B, 0xF6, 0xF1, 0x23, 0x10, 0x78,  // #.;..#.x
                /* 07B8 */  0x8E, 0x7A, 0xE0, 0x19, 0x12, 0xEE, 0xE4, 0xEF,  // .z......
                /* 07C0 */  0x29, 0xBD, 0xEB, 0x79, 0x4C, 0x78, 0xA8, 0xF0,  // )..yLx..
                /* 07C8 */  0xE7, 0x84, 0x39, 0x61, 0x82, 0xEF, 0x84, 0x81,  // ..9a....
                /* 07D0 */  0xBB, 0x48, 0x83, 0x6B, 0xE4, 0xE0, 0x3B, 0xF1,  // .H.k..;.
                /* 07D8 */  0x00, 0xFE, 0xFE, 0xFF, 0x04, 0x8E, 0xA5, 0x03,  // ........
                /* 07E0 */  0x84, 0x49, 0x7B, 0x21, 0x28, 0x08, 0x0C, 0xEA,  // .I{!(...
                /* 07E8 */  0xA4, 0x0A, 0xE7, 0xC4, 0x83, 0x3B, 0xA0, 0x80,  // .....;..
                /* 07F0 */  0x73, 0xA8, 0xB8, 0x93, 0x03, 0xDC, 0xA1, 0x1C,  // s.......
                /* 07F8 */  0x23, 0xBB, 0x31, 0xC4, 0x3A, 0x7C, 0xC3, 0xF8,  // #.1.:|..
                /* 0800 */  0xD6, 0xC0, 0x8E, 0x0A, 0xC6, 0x39, 0x4C, 0x8F,  // .....9L.
                /* 0808 */  0xF1, 0x50, 0x8D, 0xCC, 0x4E, 0x9D, 0x98, 0xE3,  // .P..N...
                /* 0810 */  0x83, 0x8F, 0x24, 0x3E, 0x07, 0xBC, 0x8A, 0xF8,  // ..$>....
                /* 0818 */  0x90, 0x03, 0xFF, 0x92, 0xEA, 0x5B, 0xCD, 0x79,  // .....[.y
                /* 0820 */  0x3D, 0x36, 0xB2, 0x1B, 0xA3, 0x0F, 0x38, 0x91,  // =6....8.
                /* 0828 */  0x82, 0x3C, 0x34, 0x62, 0xC0, 0x1E, 0x72, 0x7C,  // .<4b..r|
                /* 0830 */  0x8C, 0x78, 0xC2, 0x79, 0xC8, 0x31, 0x6C, 0xD4,  // .x.y.1l.
                /* 0838 */  0xF7, 0x1D, 0xE3, 0x9C, 0xCA, 0xB3, 0x84, 0x21,  // .......!
                /* 0840 */  0x62, 0xBD, 0xEF, 0x98, 0xC0, 0x72, 0x6D, 0x40,  // b....rm@
                /* 0848 */  0xDC, 0xBF, 0x65, 0x8C, 0x5F, 0x07, 0x60, 0xFC,  // ..e._.`.
                /* 0850 */  0xF1, 0xC0, 0xA3, 0xE1, 0xB1, 0xAF, 0xD5, 0xF4,  // ........
                /* 0858 */  0x18, 0x02, 0x9E, 0x73, 0x0B, 0x7C, 0x40, 0xBC,  // ...s.|@.
                /* 0860 */  0xF7, 0x3B, 0x00, 0x39, 0xB9, 0xB3, 0xA3, 0x01,  // .;.9....
                /* 0868 */  0xFE, 0x34, 0x80, 0xFF, 0xFF, 0x9F, 0x06, 0x70,  // .4.....p
                /* 0870 */  0x23, 0xC3, 0x9D, 0xEF, 0xE0, 0x19, 0x3A, 0x19,  // #.....:.
                /* 0878 */  0x83, 0x4E, 0xC8, 0x98, 0x7D, 0x34, 0x42, 0x5F,  // .N..}4B_
                /* 0880 */  0xEC, 0x3C, 0x9F, 0x47, 0x5D, 0xCF, 0xCC, 0xF7,  // .<.G]...
                /* 0888 */  0xA1, 0xE8, 0x21, 0xDE, 0xB3, 0x4C, 0xE0, 0xC0,  // ..!..L..
                /* 0890 */  0x10, 0xFA, 0x94, 0x79, 0xDC, 0xE0, 0x38, 0xFE,  // ...y..8.
                /* 0898 */  0x80, 0x63, 0xDC, 0xF0, 0xE7, 0xEA, 0x71, 0x83,  // .c....q.
                /* 08A0 */  0x65, 0x74, 0x30, 0x07, 0x0D, 0x7E, 0xC8, 0x93,  // et0..~..
                /* 08A8 */  0x3B, 0x86, 0x07, 0x81, 0xF7, 0x6F, 0x9F, 0x2D,  // ;....o.-
                /* 08B0 */  0x9E, 0xA0, 0x71, 0x83, 0x06, 0x1B, 0xA0, 0x07,  // ..q.....
                /* 08B8 */  0x0D, 0xBE, 0xFF, 0xFF, 0xA0, 0xC1, 0x3B, 0x3A,  // ......;:
                /* 08C0 */  0xB8, 0x83, 0x06, 0x97, 0xA0, 0x41, 0xA3, 0x8F,  // .....A..
                /* 08C8 */  0x81, 0x1E, 0x07, 0xBB, 0x0C, 0xB0, 0x89, 0xC0,  // ........
                /* 08D0 */  0x3A, 0x1B, 0x6A, 0xD8, 0xA0, 0x3A, 0xE2, 0x78,  // :.j..:.x
                /* 08D8 */  0xD8, 0xE0, 0x3F, 0xE7, 0x1C, 0x36, 0xB8, 0xC6,  // ..?..6..
                /* 08E0 */  0x07, 0x7B, 0xE0, 0xE0, 0x3A, 0xE3, 0x7A, 0xE0,  // .{..:.z.
                /* 08E8 */  0xB8, 0xF1, 0x78, 0x1E, 0x6F, 0x42, 0x46, 0x3C,  // ..x.oBF<
                /* 08F0 */  0x90, 0x10, 0x6F, 0x14, 0x27, 0x1B, 0xE6, 0x05,  // ..o.'...
                /* 08F8 */  0xCF, 0x04, 0xE3, 0x8E, 0x1A, 0x54, 0xA0, 0x1E,  // .....T..
                /* 0900 */  0xAD, 0xFF, 0xFF, 0xA3, 0x06, 0xB7, 0xC0, 0xF3,  // ........
                /* 0908 */  0x07, 0x88, 0x06, 0x07, 0x6B, 0xC8, 0xE0, 0x92,  // ....k...
                /* 0910 */  0x74, 0x0A, 0x42, 0x0F, 0xC6, 0x67, 0x01, 0x36,  // t.B..g.6
                /* 0918 */  0x48, 0x9F, 0xB2, 0xD8, 0xB5, 0x84, 0x11, 0x0C,  // H.......
                /* 0920 */  0x7F, 0x10, 0x02, 0x15, 0xA8, 0x87, 0x0C, 0x3C,  // .......<
                /* 0928 */  0x07, 0x07, 0xEF, 0x2C, 0x04, 0xCF, 0xCA, 0xC8,  // ...,....
                /* 0930 */  0x81, 0x02, 0xF0, 0xD1, 0xBC, 0xB7, 0xF1, 0xE3,  // ........
                /* 0938 */  0x56, 0x5C, 0x0F, 0x93, 0x8D, 0x9C, 0xFF, 0xFF,  // V\......
                /* 0940 */  0x47, 0x0E, 0x8E, 0x33, 0xAF, 0x47, 0x0E, 0x3C,  // G..3.G.<
                /* 0948 */  0x07, 0x07, 0x6F, 0xE4, 0xF0, 0x46, 0xED, 0x91,  // ..o..F..
                /* 0950 */  0x83, 0xEB, 0x98, 0xE7, 0x91, 0xE3, 0x58, 0x0C,  // ......X.
                /* 0958 */  0xFC, 0x1A, 0x17, 0xF1, 0xA9, 0x80, 0x8D, 0x07,  // ........
                /* 0960 */  0xCE, 0x8B, 0xCC, 0x63, 0x07, 0xCF, 0x90, 0x3C,  // ...c...<
                /* 0968 */  0x76, 0xF0, 0x9F, 0x22, 0xF1, 0x63, 0x87, 0x39,  // v..".c.9
                /* 0970 */  0x3C, 0xD8, 0xA3, 0x07, 0xC7, 0xFF, 0x7F, 0xF4,  // <.......
                /* 0978 */  0xE0, 0x90, 0x35, 0x7A, 0xF4, 0x30, 0x3C, 0x1E,  // ..5z.0<.
                /* 0980 */  0x1C, 0x72, 0x97, 0xC3, 0x41, 0xC6, 0x3F, 0x47,  // .r..A.?G
                /* 0988 */  0x80, 0xCA, 0xC4, 0xE9, 0x0A, 0xA8, 0x8E, 0x0E,  // ........
                /* 0990 */  0xEE, 0xD8, 0x81, 0xC7, 0xD1, 0x06, 0x26, 0xEC,  // ......&.
                /* 0998 */  0xE1, 0x1D, 0xCB, 0x13, 0x09, 0x78, 0x55, 0x9C,  // .....xU.
                /* 09A0 */  0x48, 0x80, 0xD6, 0xFF, 0xFF, 0x68, 0x03, 0x73,  // H....h.s
                /* 09A8 */  0x70, 0x30, 0x46, 0x0E, 0xDC, 0x30, 0x4F, 0xE9,  // p0F..0O.
                /* 09B0 */  0x99, 0xFC, 0xC8, 0xC1, 0x3E, 0x5E, 0x8F, 0x1C,  // ....>^..
                /* 09B8 */  0x78, 0x0E, 0x0E, 0xDE, 0xC8, 0x81, 0x07, 0xD6,  // x.......
                /* 09C0 */  0x03, 0x36, 0xF8, 0x2E, 0xBF, 0x7C, 0x0C, 0x0F,  // .6...|..
                /* 09C8 */  0xBF, 0xB8, 0x53, 0xBF, 0xEF, 0xBE, 0x3E, 0x5B,  // ..S...>[
                /* 09D0 */  0xC3, 0xFB, 0xFF, 0x9F, 0xAD, 0x01, 0x5F, 0x09,  // ......_.
                /* 09D8 */  0x1E, 0x2F, 0x26, 0x50, 0xC8, 0x13, 0x84, 0xC2,  // ./&P....
                /* 09E0 */  0x3F, 0x05, 0x28, 0x8C, 0x4F, 0x56, 0x3E, 0x5B,  // ?.(.OV>[
                /* 09E8 */  0xC3, 0x3D, 0x46, 0x1A, 0x8E, 0x1F, 0x02, 0x7C,  // .=F....|
                /* 09F0 */  0x4C, 0x78, 0x1D, 0x3B, 0x8E, 0x73, 0x79, 0x83,  // Lx.;.sy.
                /* 09F8 */  0xF0, 0x88, 0x1E, 0x7D, 0x61, 0x9C, 0x24, 0x7C,  // ...}a.$|
                /* 0A00 */  0x05, 0x60, 0xB3, 0x7B, 0x4E, 0xF0, 0xE8, 0x4C,  // .`.{N..L
                /* 0A08 */  0xE0, 0x51, 0x30, 0x34, 0x7E, 0x4A, 0x60, 0x87,  // .Q04~J`.
                /* 0A10 */  0x05, 0x7E, 0x0A, 0xF0, 0xB1, 0x82, 0x0D, 0xF0,  // .~......
                /* 0A18 */  0x69, 0xFB, 0xBD, 0xD5, 0x13, 0x79, 0x73, 0x78,  // i....ysx
                /* 0A20 */  0x72, 0x65, 0x47, 0x64, 0x47, 0x38, 0xCB, 0x82,  // reGdG8..
                /* 0A28 */  0x0A, 0xE7, 0xA9, 0xDF, 0x10, 0x8F, 0xDC, 0x98,  // ........
                /* 0A30 */  0xE1, 0xC3, 0x41, 0x66, 0xBE, 0x06, 0x45, 0x60,  // ..Af..E`
                /* 0A38 */  0x5E, 0xED, 0x7D, 0x06, 0xF0, 0x35, 0x27, 0xC4,  // ^.}..5'.
                /* 0A40 */  0x79, 0xC6, 0x32, 0xD0, 0x81, 0x44, 0x78, 0xB2,  // y.2..Dx.
                /* 0A48 */  0x78, 0x0D, 0xF0, 0xC1, 0x82, 0x9D, 0xB9, 0xF1,  // x.......
                /* 0A50 */  0xFF, 0xFF, 0x33, 0x37, 0xEE, 0xB6, 0xEF, 0x73,  // ..37...s
                /* 0A58 */  0x76, 0x84, 0x87, 0x0F, 0x0F, 0x24, 0xC2, 0xE3,  // v....$..
                /* 0A60 */  0xB6, 0x11, 0x9E, 0xB4, 0x7D, 0xE6, 0xF6, 0x65,  // ....}..e
                /* 0A68 */  0xDB, 0x60, 0xA1, 0x8C, 0xF9, 0xE4, 0xFD, 0xE0,  // .`......
                /* 0A70 */  0x6D, 0xC4, 0x47, 0x6E, 0xCF, 0x29, 0x46, 0xE8,  // m.Gn.)F.
                /* 0A78 */  0x37, 0x6E, 0x0F, 0xC0, 0x78, 0x87, 0xC2, 0xCE,  // 7n..x...
                /* 0A80 */  0xED, 0xE0, 0x14, 0xF6, 0x48, 0xD6, 0xB1, 0xD2,  // ....H...
                /* 0A88 */  0x91, 0xE0, 0x51, 0x87, 0x29, 0x7E, 0xC4, 0xF0,  // ..Q.)~..
                /* 0A90 */  0x31, 0xDD, 0x47, 0x48, 0x0F, 0xE1, 0x08, 0x9E,  // 1.GH....
                /* 0A98 */  0x2E, 0x9E, 0x0F, 0x3C, 0x06, 0x76, 0x71, 0xF0,  // ...<.vq.
                /* 0AA0 */  0x89, 0xC0, 0x07, 0x06, 0xFC, 0xC1, 0xE4, 0x90,  // ........
                /* 0AA8 */  0x7D, 0x5C, 0x81, 0x75, 0x6C, 0xC1, 0x8F, 0xE8,  // }\.ul...
                /* 0AB0 */  0xB9, 0x04, 0xF6, 0x29, 0x9E, 0x1D, 0x4C, 0x7C,  // ...)..L|
                /* 0AB8 */  0xB0, 0x48, 0x60, 0xF9, 0x83, 0x40, 0x8D, 0xCC,  // .H`..@..
                /* 0AC0 */  0xD0, 0xBE, 0x6C, 0xBC, 0xCC, 0xFB, 0x48, 0xE0,  // ..l...H.
                /* 0AC8 */  0x61, 0xB1, 0xE3, 0x8A, 0x4F, 0xD6, 0xE0, 0x18,  // a...O...
                /* 0AD0 */  0x0F, 0xFC, 0x63, 0xC0, 0x33, 0x89, 0xA7, 0xEF,  // ..c.3...
                /* 0AD8 */  0xF9, 0xFA, 0x4C, 0x8B, 0x3D, 0xB7, 0x80, 0xE5,  // ..L.=...
                /* 0AE0 */  0x12, 0xC1, 0xCE, 0x10, 0xFC, 0xF6, 0xC3, 0x09,  // ........
                /* 0AE8 */  0xFC, 0xFF, 0x3F, 0xB5, 0x00, 0xEE, 0xB4, 0xBF,  // ..?.....
                /* 0AF0 */  0x1D, 0x74, 0x0C, 0xB1, 0x6E, 0x10, 0xD9, 0x38,  // .t..n..8
                /* 0AF8 */  0x44, 0xD1, 0x11, 0x5A, 0xFB, 0x63, 0x59, 0x93,  // D..Z.cY.
                /* 0B00 */  0x85, 0xA7, 0x17, 0x4E, 0xD0, 0x3E, 0x16, 0x58,  // ...N.>.X
                /* 0B08 */  0x29, 0x8C, 0xB4, 0x3E, 0x1F, 0x34, 0x36, 0xC3,  // )..>.46.
                /* 0B10 */  0x5B, 0x1D, 0x8C, 0xE0, 0x0C, 0xE2, 0xD3, 0x94,  // [.......
                /* 0B18 */  0x03, 0x41, 0xE8, 0x68, 0x85, 0x3B, 0x91, 0xF9,  // .A.h.;..
                /* 0B20 */  0xAC, 0x84, 0x49, 0x70, 0x8D, 0xA6, 0x93, 0xF1,  // ..Ip....
                /* 0B28 */  0x3D, 0x81, 0x63, 0xFB, 0xE4, 0x60, 0x60, 0x5F,  // =.c..``_
                /* 0B30 */  0x99, 0xE0, 0xAA, 0x81, 0x43, 0x41, 0xFB, 0x42,  // ....CA.B
                /* 0B38 */  0xC2, 0x4F, 0x4E, 0x60, 0xCB, 0x02, 0x21, 0x27,  // .ON`..!'
                /* 0B40 */  0x27, 0x0A, 0xD4, 0x2C, 0x3C, 0x59, 0xFC, 0xD1,  // '..,<Y..
                /* 0B48 */  0x1E, 0x73, 0x5D, 0xF1, 0x68, 0x3C, 0x38, 0xEC,  // .s].h<8.
                /* 0B50 */  0xFF, 0x7F, 0x70, 0x98, 0x51, 0xC1, 0x1A, 0xB4,  // ..p.Q...
                /* 0B58 */  0x75, 0x8D, 0x0A, 0x34, 0x47, 0x97, 0x67, 0x97,  // u..4G.g.
                /* 0B60 */  0x04, 0x73, 0xCC, 0x0A, 0xAD, 0xE4, 0xAA, 0x43,  // .s.....C
                /* 0B68 */  0xE6, 0xC4, 0x6E, 0x05, 0x51, 0xAB, 0x9F, 0x13,  // ..n.Q...
                /* 0B70 */  0xA8, 0x6F, 0x07, 0x9E, 0x13, 0xD8, 0x4E, 0x08,  // .o....N.
                /* 0B78 */  0x70, 0xEE, 0x0C, 0x98, 0x13, 0x02, 0x78, 0x83,  // p.....x.
                /* 0B80 */  0xD9, 0x39, 0x21, 0xC0, 0x43, 0xF2, 0x09, 0x01,  // .9!.C...
                /* 0B88 */  0x5C, 0x41, 0xCE, 0x3A, 0xE8, 0xE3, 0x14, 0x1B,  // \A.:....
                /* 0B90 */  0xD7, 0xDB, 0x86, 0xCF, 0x1A, 0x3E, 0x72, 0xF8,  // .....>r.
                /* 0B98 */  0x3A, 0xE5, 0xC1, 0x83, 0x75, 0x9C, 0x1E, 0x3C,  // :...u..<
                /* 0BA0 */  0xEC, 0xFF, 0xFF, 0x35, 0x07, 0xAF, 0xEF, 0x1C,  // ...5....
                /* 0BA8 */  0x03, 0x0A, 0x20, 0xDF, 0x5A, 0x7C, 0x4A, 0x79,  // .. .Z|Jy
                /* 0BB0 */  0x72, 0x61, 0x63, 0x78, 0x50, 0x31, 0x9A, 0xD1,  // racxP1..
                /* 0BB8 */  0xF9, 0xED, 0xD0, 0xB7, 0x10, 0x7E, 0xAB, 0xF7,  // .....~..
                /* 0BC0 */  0x0D, 0xC2, 0x20, 0x3E, 0x20, 0x38, 0xCA, 0x64,  // .. > 8.d
                /* 0BC8 */  0xD1, 0x33, 0xF1, 0xA5, 0xC7, 0x33, 0x3A, 0xEC,  // .3...3:.
                /* 0BD0 */  0x20, 0xE7, 0x68, 0x82, 0x97, 0x8B, 0x97, 0x24,  //  .h....$
                /* 0BD8 */  0x58, 0x77, 0x96, 0x90, 0xCF, 0x2B, 0x9E, 0x86,  // Xw...+..
                /* 0BE0 */  0xCF, 0x05, 0xF8, 0x13, 0x08, 0xBF, 0x40, 0xF9,  // ......@.
                /* 0BE8 */  0x8E, 0x04, 0xBE, 0xDB, 0x22, 0x6E, 0xB6, 0x60,  // ...."n.`
                /* 0BF0 */  0x84, 0xC7, 0x44, 0xBE, 0x30, 0xA0, 0x86, 0xC7,  // ..D.0...
                /* 0BF8 */  0x2F, 0x07, 0x9E, 0xCF, 0x33, 0xC2, 0x51, 0x3E,  // /...3.Q>
                /* 0C00 */  0xE0, 0xE0, 0x30, 0x9E, 0x60, 0x3C, 0x44, 0x5F,  // ..0.`<D_
                /* 0C08 */  0xE0, 0x60, 0x4D, 0xE4, 0xA4, 0x7D, 0x5B, 0x38,  // .`M..}[8
                /* 0C10 */  0xD9, 0xA0, 0xEF, 0x99, 0xEC, 0x02, 0x07, 0xAC,  // ........
                /* 0C18 */  0xFE, 0xFF, 0x17, 0x38, 0x30, 0x2A, 0x5D, 0x10,  // ...80*].
                /* 0C20 */  0x8D, 0xB6, 0x28, 0x45, 0x5E, 0x1E, 0x85, 0xF1,  // ..(E^...
                /* 0C28 */  0x85, 0x10, 0x70, 0x74, 0x8C, 0xF0, 0x01, 0x00,  // ..pt....
                /* 0C30 */  0x1C, 0x37, 0xA5, 0x07, 0x00, 0x58, 0xD7, 0x85,  // .7...X..
                /* 0C38 */  0xA3, 0x7E, 0x83, 0xC6, 0x9D, 0x02, 0xE0, 0xDE,  // .~......
                /* 0C40 */  0x05, 0xE1, 0x8F, 0xF5, 0x81, 0x25, 0xFC, 0xAB,  // .....%..
                /* 0C48 */  0x45, 0x8C, 0xF7, 0xBF, 0xE0, 0xCF, 0x36, 0x0F,  // E.....6.
                /* 0C50 */  0x81, 0x41, 0xC2, 0xBC, 0x06, 0x86, 0x7A, 0x17,  // .A....z.
                /* 0C58 */  0xF4, 0xFD, 0xE6, 0x99, 0xD0, 0x28, 0x91, 0xDE,  // .....(..
                /* 0C60 */  0xD7, 0x1E, 0x04, 0x8D, 0x52, 0x1B, 0xA4, 0x46,  // ....R..F
                /* 0C68 */  0x12, 0xDB, 0x20, 0xEF, 0x85, 0x06, 0x8A, 0xF0,  // .. .....
                /* 0C70 */  0xF8, 0x77, 0xFA, 0xBE, 0x0B, 0x82, 0xFB, 0xFF,  // .w......
                /* 0C78 */  0x7F, 0x17, 0x04, 0x38, 0x75, 0x7F, 0x60, 0x77,  // ...8u.`w
                /* 0C80 */  0x41, 0xC0, 0xD2, 0xFF, 0xFF, 0x2E, 0x08, 0x26,  // A......&
                /* 0C88 */  0xB5, 0xD7, 0x3F, 0x7A, 0xFB, 0xF3, 0x5D, 0x10,  // ..?z..].
                /* 0C90 */  0xA7, 0xFB, 0xCD, 0xA0, 0xC9, 0xC2, 0xBB, 0x07,  // ........
                /* 0C98 */  0xFA, 0x2E, 0xC8, 0x55, 0xC2, 0x48, 0x01, 0x8D,  // ...U.H..
                /* 0CA0 */  0x8E, 0x4D, 0x3C, 0xF3, 0xA9, 0x84, 0x82, 0x18,  // .M<.....
                /* 0CA8 */  0xD0, 0x77, 0x41, 0xC0, 0xCF, 0xB5, 0x0B, 0x58,  // .wA....X
                /* 0CB0 */  0x48, 0xDC, 0xAA, 0x26, 0xCC, 0x45, 0xC1, 0x68,  // H..&.E.h
                /* 0CB8 */  0xC2, 0x06, 0xF1, 0x38, 0x3D, 0x61, 0x5F, 0xFF,  // ...8=a_.
                /* 0CC0 */  0x70, 0xA3, 0xF4, 0x21, 0x11, 0xE6, 0xCD, 0x0B,  // p..!....
                /* 0CC8 */  0xEC, 0xC3, 0xF1, 0x95, 0xC3, 0xFF, 0xFF, 0x2B,  // .......+
                /* 0CD0 */  0x20, 0x98, 0x08, 0x86, 0x19, 0x18, 0xFA, 0x62,  //  ......b
                /* 0CD8 */  0xE4, 0x6B, 0x22, 0x8C, 0x61, 0x81, 0xFD, 0xCA,  // .k".a...
                /* 0CE0 */  0xE0, 0x61, 0x81, 0x2F, 0xD4, 0xF5, 0x01, 0x7D,  // .a./...}
                /* 0CE8 */  0x5B, 0xF1, 0x6D, 0x04, 0x17, 0xE2, 0xFC, 0x40,  // [.m....@
                /* 0CF0 */  0x07, 0x05, 0xAE, 0xAB, 0x22, 0x6E, 0x6C, 0xF0,  // ...."nl.
                /* 0CF8 */  0xCE, 0x8A, 0xE0, 0xBB, 0xC9, 0x01, 0x8F, 0xA0,  // ........
                /* 0D00 */  0x37, 0x39, 0xA0, 0xF2, 0xFF, 0xBF, 0xC9, 0xC1,  // 79......
                /* 0D08 */  0xB9, 0x79, 0x01, 0xDF, 0xF8, 0xAF, 0x12, 0x5F,  // .y....._
                /* 0D10 */  0x1B, 0xBD, 0x1E, 0x85, 0x5C, 0x19, 0x85, 0xF1,  // ....\...
                /* 0D18 */  0x25, 0x0E, 0x70, 0x84, 0xFD, 0x52, 0x08, 0xEE,  // %.p..R..
                /* 0D20 */  0xD1, 0x30, 0x18, 0x5F, 0xCD, 0xF8, 0xE5, 0x0D,  // .0._....
                /* 0D28 */  0x2E, 0xE2, 0x7B, 0xDB, 0x73, 0xC7, 0xD3, 0x46,  // ..{.s..F
                /* 0D30 */  0x90, 0x10, 0x6F, 0x56, 0x2F, 0x11, 0x8F, 0x6E,  // ..oV/..n
                /* 0D38 */  0xBE, 0xB6, 0x45, 0x78, 0x7E, 0x33, 0x4A, 0xB8,  // ..Ex~3J.
                /* 0D40 */  0x08, 0x2F, 0x6D, 0x51, 0xDE, 0xD3, 0x9E, 0xDE,  // ./mQ....
                /* 0D48 */  0x7C, 0xEE, 0x88, 0xF2, 0xE6, 0x66, 0xBC, 0x30,  // |....f.0
                /* 0D50 */  0xA1, 0x83, 0x84, 0x8B, 0x14, 0x2D, 0xB8, 0x27,  // .....-.'
                /* 0D58 */  0xED, 0x61, 0x63, 0xFE, 0xFF, 0x97, 0x37, 0x70,  // .ac...7p
                /* 0D60 */  0x49, 0xBB, 0xBC, 0x01, 0x34, 0x39, 0x35, 0xE0,  // I...495.
                /* 0D68 */  0x2E, 0x6F, 0x60, 0xB9, 0xDB, 0x63, 0x6F, 0x0D,  // .o`..co.
                /* 0D70 */  0xF8, 0xDB, 0x1B, 0x70, 0xFB, 0xFF, 0xDF, 0xDE,  // ...p....
                /* 0D78 */  0x80, 0x9F, 0xA0, 0x0B, 0x1B, 0x15, 0x03, 0xA2,  // ........
                /* 0D80 */  0xDB, 0x1B, 0xE7, 0xB0, 0xD4, 0xE7, 0x80, 0x66,  // .......f
                /* 0D88 */  0x0B, 0xFB, 0x30, 0xC1, 0xEE, 0x6F, 0xFC, 0xE4,  // ..0..o..
                /* 0D90 */  0x65, 0x59, 0xF7, 0x37, 0x94, 0x10, 0x18, 0xC1,  // eY.7....
                /* 0D98 */  0x19, 0xC4, 0x80, 0x4E, 0x09, 0x21, 0x1B, 0x87,  // ...N.!..
                /* 0DA0 */  0x05, 0xD4, 0x48, 0x3C, 0x0D, 0x58, 0x57, 0x0B,  // ..H<.XW.
                /* 0DA8 */  0xC3, 0x04, 0x4A, 0x30, 0xCB, 0x29, 0x1C, 0xA4,  // ..J0.)..
                /* 0DB0 */  0x04, 0xBE, 0x07, 0xBC, 0x34, 0xC0, 0x9E, 0xC7,  // ....4...
                /* 0DB8 */  0x53, 0x43, 0xD5, 0x63, 0xD1, 0x61, 0xC2, 0xEA,  // SC.c.a..
                /* 0DC0 */  0x8E, 0x00, 0xE8, 0x59, 0xC1, 0xBF, 0x90, 0x03,  // ...Y....
                /* 0DC8 */  0xDB, 0xFF, 0xFF, 0x85, 0x1C, 0x38, 0x9D, 0xE3,  // .....8..
                /* 0DD0 */  0xC0, 0x71, 0x21, 0x07, 0x5E, 0xC1, 0xCE, 0x5D,  // .q!.^..]
                /* 0DD8 */  0x40, 0xEF, 0xB0, 0x04, 0x7C, 0x82, 0x3C, 0x82,  // @...|.<.
                /* 0DE0 */  0x4C, 0xA0, 0xA8, 0xEB, 0x90, 0x74, 0x18, 0xD4,  // L....t..
                /* 0DE8 */  0x79, 0x0B, 0x78, 0xFE, 0xFF, 0xCF, 0x5B, 0xE0,  // y.x...[.
                /* 0DF0 */  0x0E, 0x72, 0x74, 0x03, 0xE5, 0x00, 0x0C, 0x13,  // .rt.....
                /* 0DF8 */  0x23, 0xCA, 0x21, 0x7B, 0xDC, 0x30, 0x81, 0x9E,  // #.!{.0..
                /* 0E00 */  0x07, 0x7C, 0x92, 0x31, 0x4A, 0xA4, 0xC0, 0xBE,  // .|.1J...
                /* 0E08 */  0x3C, 0xF8, 0x2A, 0xE3, 0xE3, 0x81, 0xA1, 0x3C,  // <.*....<
                /* 0E10 */  0x8D, 0x50, 0x9E, 0x6D, 0x30, 0xDF, 0x12, 0x7C,  // .P.m0..|
                /* 0E18 */  0xFE, 0x82, 0x7D, 0xDD, 0xF2, 0x0D, 0xEB, 0xA4,  // ..}.....
                /* 0E20 */  0xC3, 0x3F, 0x80, 0x19, 0xE3, 0xBD, 0x2B, 0x48,  // .?....+H
                /* 0E28 */  0x6B, 0x77, 0x70, 0x72, 0xFE, 0xF2, 0x6C, 0x4E,  // kwpr..lN
                /* 0E30 */  0xDA, 0x28, 0x07, 0xF3, 0xEA, 0xE5, 0x43, 0x98,  // .(....C.
                /* 0E38 */  0x61, 0x9F, 0xC1, 0x9E, 0x74, 0x0C, 0xF2, 0x24,  // a...t..$
                /* 0E40 */  0x6E, 0x98, 0xF8, 0x21, 0x23, 0x06, 0x79, 0xFE,  // n..!#.y.
                /* 0E48 */  0x02, 0x6F, 0xA0, 0x57, 0x80, 0x4E, 0x30, 0x3E,  // .o.W.N0>
                /* 0E50 */  0x7F, 0x01, 0x3E, 0xFE, 0xFF, 0xE7, 0x2F, 0xC0,  // ..>.../.
                /* 0E58 */  0x87, 0xEC, 0x67, 0x84, 0x8E, 0x4E, 0xFC, 0x88,  // ..g..N..
                /* 0E60 */  0x04, 0x1E, 0x71, 0xD0, 0x3A, 0xA8, 0x5A, 0xD4,  // ..q.:.Z.
                /* 0E68 */  0xF9, 0x02, 0x75, 0xD8, 0xF0, 0xF9, 0x82, 0x5D,  // ..u....]
                /* 0E70 */  0x59, 0xF9, 0x09, 0x05, 0x73, 0xBC, 0x00, 0x7C,  // Y...s..|
                /* 0E78 */  0x9C, 0x67, 0xE1, 0xFD, 0x59, 0x7C, 0x95, 0x02,  // .g..Y|..
                /* 0E80 */  0x6E, 0x67, 0x1C, 0xFF, 0xFF, 0xAF, 0xF9, 0xE0,  // ng......
                /* 0E88 */  0x3E, 0xDA, 0x01, 0x2E, 0x07, 0xC3, 0x15, 0xDA,  // >.......
                /* 0E90 */  0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35,  // ....U.25
                /* 0E98 */  0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6,  // .4...Rc.
                /* 0EA0 */  0xEC, 0x42, 0x49, 0xDE, 0xBB, 0x40, 0xA7, 0x28,  // .BI..@.(
                /* 0EA8 */  0xF2, 0x92, 0x10, 0x88, 0x85, 0x3D, 0x0B, 0x04,  // .....=..
                /* 0EB0 */  0xE2, 0x68, 0x8F, 0x14, 0x1D, 0x22, 0x1C, 0x88,  // .h..."..
                /* 0EB8 */  0x5E, 0x27, 0x13, 0x62, 0x02, 0x84, 0x45, 0x07,  // ^'.b..E.
                /* 0EC0 */  0xA1, 0xD2, 0x9F, 0x1D, 0x02, 0xB4, 0xF8, 0x67,  // .......g
                /* 0EC8 */  0x9D, 0xC0, 0x08, 0x08, 0xD7, 0x01, 0xC2, 0x22,  // ......."
                /* 0ED0 */  0xBC, 0x06, 0x04, 0xE8, 0x18, 0x4A, 0x80, 0x98,  // .....J..
                /* 0ED8 */  0x88, 0x77, 0xB8, 0x40, 0xAC, 0xC1, 0xCA, 0x21,  // .w.@...!
                /* 0EE0 */  0x5B, 0xE7, 0x10, 0x83, 0x08, 0xC8, 0x29, 0x80,  // [.....).
                /* 0EE8 */  0x68, 0x24, 0x20, 0x2A, 0x46, 0x0B, 0x10, 0x53,  // h$ *F..S
                /* 0EF0 */  0x06, 0x22, 0x20, 0xA7, 0x03, 0xA2, 0x51, 0x81,  // ." ...Q.
                /* 0EF8 */  0xA8, 0x48, 0x2F, 0x40, 0x4C, 0x31, 0x88, 0x80,  // .H/@L1..
                /* 0F00 */  0xAC, 0xEE, 0x4D, 0x20, 0x20, 0x6B, 0x05, 0x11,  // ..M  k..
                /* 0F08 */  0x90, 0x93, 0x9A, 0x19, 0x0E, 0x4B, 0xE9, 0x06,  // .....K..
                /* 0F10 */  0xE2, 0xFF, 0x1F, 0xC8, 0x1A, 0x5F, 0x02, 0x02,  // ....._..
                /* 0F18 */  0xB1, 0x44, 0x3D, 0xA0, 0x4C, 0x2F, 0x88, 0x40,  // .D=.L/.@
                /* 0F20 */  0x09, 0x10, 0x8D, 0x0D, 0x44, 0x43, 0xFA, 0x01,  // ....DC..
                /* 0F28 */  0x62, 0x91, 0x41, 0x34, 0x50, 0xF2, 0x2E, 0x11,  // b.A4P...
                /* 0F30 */  0x90, 0x83, 0x80, 0x08, 0xC8, 0xE1, 0x0D, 0x0D,  // ........
                /* 0F38 */  0x83, 0xC5, 0x76, 0x04, 0xC4, 0x44, 0xBF, 0xAC,  // ..v..D..
                /* 0F40 */  0x04, 0x62, 0xF1, 0x96, 0x40, 0x98, 0x38, 0x4F,  // .b..@.8O
                /* 0F48 */  0x80, 0x4C, 0x96, 0x29, 0x20, 0x16, 0x0A, 0x84,  // .L.) ...
                /* 0F50 */  0xAB, 0x02, 0x61, 0xD2, 0x74, 0x0D, 0x89, 0xFE,  // ..a.t...
                /* 0F58 */  0x9F, 0x83, 0x10, 0xA9, 0xEF, 0x17, 0x0D, 0x85,  // ........
                /* 0F60 */  0xBC, 0x70, 0x83, 0x10, 0xF9, 0x7F, 0x75, 0x81,  // .p....u.
                /* 0F68 */  0x38, 0xD0, 0x17, 0x37, 0x08, 0x89, 0xF8, 0x24,  // 8..7...$
                /* 0F70 */  0xD2, 0x70, 0xC8, 0x13, 0x29, 0x08, 0x91, 0xF4,  // .p..)...
                /* 0F78 */  0x3D, 0x3A, 0x60, 0xF6, 0x16, 0x17, 0x88, 0x65,  // =:`....e
                /* 0F80 */  0x7F, 0x87, 0x04, 0xE2, 0xD0, 0xCF, 0x8E, 0xC3,  // ........
                /* 0F88 */  0x21, 0x22, 0xEC, 0x1D, 0x07, 0x28, 0x08, 0xD5,  // !"...(..
                /* 0F90 */  0xEE, 0x6F, 0x80, 0x14, 0x44, 0x40, 0x56, 0xF1,  // .o..D@V.
                /* 0F98 */  0xA2, 0x13, 0x90, 0x25, 0x81, 0x08, 0xC8, 0x61,  // ...%...a
                /* 0FA0 */  0x80, 0x68, 0x32, 0x20, 0xAA, 0xEE, 0x33, 0x11,  // .h2 ..3.
                /* 0FA8 */  0x88, 0x48, 0x05, 0xD1, 0xA0, 0x09, 0x10, 0x4D,  // .H.....M
                /* 0FB0 */  0x0C, 0x44, 0xD3, 0x29, 0x04, 0x62, 0x59, 0x41,  // .D.).bYA
                /* 0FB8 */  0x04, 0x64, 0xD5, 0xDF, 0x29, 0x0D, 0xC7, 0xDA,  // .d..)...
                /* 0FC0 */  0x35, 0x02, 0xB1, 0xE4, 0x20, 0x34, 0xF2, 0xD3,  // 5... 4..
                /* 0FC8 */  0x43, 0xA0, 0xCE, 0x0F, 0x22, 0x20, 0x07, 0x7E,  // C..." .~
                /* 0FD0 */  0xA5, 0x09, 0xC8, 0xF1, 0x41, 0x34, 0x78, 0xA2,  // ....A4x.
                /* 0FD8 */  0x12, 0x88, 0x45, 0x01, 0xD1, 0x30, 0x89, 0x4B,  // ..E..0.K
                /* 0FE0 */  0x20, 0x26, 0x10, 0x44, 0x40, 0x8E, 0xF7, 0xD8,  //  &.D@...
                /* 0FE8 */  0x38, 0x0C, 0x12, 0xEA, 0x19, 0x12, 0x90, 0xF9,  // 8.......
                /* 0FF0 */  0x3C, 0x50, 0x50, 0xA3, 0xA0, 0x4C, 0x1B, 0x88,  // <PP..L..
                /* 0FF8 */  0x80, 0x2C, 0xEF, 0xE9, 0x11, 0x88, 0x88, 0x05,  // .,......
                /* 1000 */  0x11, 0x90, 0xC3, 0xFD, 0x3D, 0x04, 0xEE, 0xC8,  // ....=...
                /* 1008 */  0x3F, 0x90, 0x40, 0x44, 0xB0, 0x56, 0x88, 0xFF,  // ?.@D.V..
                /* 1010 */  0xFF, 0x43, 0x00, 0x79, 0xA4, 0x04, 0x21, 0xFF,  // .C.y..!.
                /* 1018 */  0x7F                                             // .
            })
        }

        Device (WMI6)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Name (_WDG, Buffer (0x78)
            {
                /* 0000 */  0x9F, 0x1C, 0x86, 0x26, 0xE9, 0x47, 0xC4, 0x44,  // ...&.G.D
                /* 0008 */  0xBD, 0x8B, 0xDF, 0xE7, 0xFA, 0x26, 0x10, 0xFE,  // .....&..
                /* 0010 */  0x44, 0x30, 0x01, 0x06, 0x0A, 0x18, 0xA3, 0x9A,  // D0......
                /* 0018 */  0x50, 0x97, 0xF7, 0x41, 0xB9, 0xF7, 0xD5, 0xD3,  // P..A....
                /* 0020 */  0xB1, 0xBA, 0xC3, 0xCE, 0x44, 0x31, 0x01, 0x06,  // ....D1..
                /* 0028 */  0xA7, 0x39, 0xBC, 0xB2, 0xDD, 0x78, 0x71, 0x4D,  // .9...xqM
                /* 0030 */  0xB0, 0x59, 0xA5, 0x10, 0xDE, 0xC4, 0x48, 0x90,  // .Y....H.
                /* 0038 */  0x44, 0x32, 0x01, 0x06, 0x0D, 0x59, 0xE8, 0x0D,  // D2...Y..
                /* 0040 */  0x10, 0x55, 0x44, 0x40, 0x96, 0x21, 0x77, 0xC2,  // .UD@.!w.
                /* 0048 */  0x27, 0xF5, 0xA7, 0x0D, 0x44, 0x33, 0x01, 0x06,  // '...D3..
                /* 0050 */  0xED, 0x19, 0x91, 0xC5, 0x0D, 0x1C, 0x06, 0x48,  // .......H
                /* 0058 */  0xA8, 0xE9, 0x59, 0xAA, 0x31, 0x81, 0x76, 0xC4,  // ..Y.1.v.
                /* 0060 */  0x44, 0x34, 0x01, 0x06, 0x21, 0x12, 0x90, 0x05,  // D4..!...
                /* 0068 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0070 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x46, 0x01, 0x00   // ..).BF..
            })
            Method (WMD0, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = CARC (Arg2)
                If ((Local0 == 0x00))
                {
                    Local0 = 0x02
                    Local0 = WMIS (0x12, 0x00)
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (^^WMI1.RETN [Local0]))
            }

            Method (WMD1, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = CARC (Arg2)
                If ((Local0 == 0x00))
                {
                    Local0 = 0x02
                    Local0 = WMIS (0x12, 0x01)
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (^^WMI1.RETN [Local0]))
            }

            Method (WMD2, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = CARC (Arg2)
                If ((Local0 == 0x00))
                {
                    Local0 = 0x02
                    Local0 = WMIS (0x12, 0x02)
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (^^WMI1.RETN [Local0]))
            }

            Method (WMD3, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = CARC (Arg2)
                If ((Local0 == 0x00))
                {
                    Local0 = 0x02
                    Local0 = WMIS (0x12, 0x03)
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (^^WMI1.RETN [Local0]))
            }

            Method (WMD4, 3, NotSerialized)
            {
                Name (ITEM, Package (0x03)
                {
                    Package (0x02)
                    {
                        0x00, 
                        "Sha1"
                    }, 

                    Package (0x02)
                    {
                        0x01, 
                        "Sha256"
                    }, 

                    Package (0x02)
                    {
                        0x02, 
                        "Md5"
                    }
                })
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = CARC (Arg2)
                If ((Local0 == 0x00))
                {
                    Local1 = ^^WMI1.GITM (CBFF, ITEM)
                    If ((Local1 == Ones))
                    {
                        Local0 = 0x02
                    }
                    Else
                    {
                        CBFF = 0x00
                        Local0 = WMIS (0x12, 0x04)
                        If ((Local0 == 0x00))
                        {
                            If ((Local1 == 0x00))
                            {
                                Local2 = GETS (CBFF, 0x00, 0x14)
                            }
                            ElseIf ((Local1 == 0x01))
                            {
                                Local2 = GETS (CBFF, 0x14, 0x20)
                            }
                            ElseIf ((Local1 == 0x02))
                            {
                                Local2 = GETS (CBFF, 0x34, 0x10)
                            }
                        }
                    }
                }

                If ((Local0 == 0x00))
                {
                    Release (^^WMI1.MWMI)
                    Return (Local2)
                }
                Else
                {
                    Release (^^WMI1.MWMI)
                    Return (DerefOf (^^WMI1.RETN [Local0]))
                }
            }

            Method (CARC, 1, NotSerialized)
            {
                CBFF = 0x00
                Local0 = SizeOf (Arg0)
                If ((Local0 == 0x00))
                {
                    Return (0x02)
                }

                If ((ObjectType (Arg0) != 0x02))
                {
                    Return (0x02)
                }

                If ((Local0 >= 0x1000))
                {
                    Return (0x02)
                }

                CBFF = Arg0
                Return (0x00)
            }

            Method (GETS, 3, NotSerialized)
            {
                Local0 = Arg1
                Local1 = GETB (Arg0, Local0)
                Local3 = GETC (Local1)
                Local4 = (Local0 + Arg2)
                Local0++
                While ((Local0 < Local4))
                {
                    Local1 = GETB (Arg0, Local0)
                    Local2 = GETC (Local1)
                    Concatenate (Local3, Local2, Local3)
                    Local0++
                }

                Return (Local3)
            }

            Method (GETB, 2, NotSerialized)
            {
                CreateByteField (Arg0, Arg1, TMPB)
                Return (TMPB) /* \_SB_.WMI6.GETB.TMPB */
            }

            Method (GETC, 1, NotSerialized)
            {
                Name (RETB, Buffer (0x08)
                {
                     0x00                                             // .
                })
                CreateWordField (RETB, 0x00, RTB0)
                CreateWordField (RETB, 0x01, RTB1)
                Name (ASCI, Package (0x10)
                {
                    "0", 
                    "1", 
                    "2", 
                    "3", 
                    "4", 
                    "5", 
                    "6", 
                    "7", 
                    "8", 
                    "9", 
                    "A", 
                    "B", 
                    "C", 
                    "D", 
                    "E", 
                    "F"
                })
                Name (TMPW, 0x00)
                TMPW = Arg0
                RTB0 = DerefOf (ASCI [((TMPW >> 0x04) & 0x0F)]
                    )
                RTB1 = DerefOf (ASCI [(TMPW & 0x0F)])
                Return (ToString (RETB, Ones))
            }

            Name (WQBF, Buffer (0x05D7)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xC7, 0x05, 0x00, 0x00, 0x1A, 0x25, 0x00, 0x00,  // .....%..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0xDB, 0x91, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0D, 0x10, 0x8A, 0x0F, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x60, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .P`...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x18, 0x88, 0x14, 0x40, 0x48, 0x30, 0x84,  // 1...@H0.
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0x0A, 0x90, 0x29, 0xC0, 0xA0,  // .....)..
                /* 0060 */  0x00, 0xA7, 0x08, 0x22, 0x88, 0xD2, 0xB2, 0x00,  // ..."....
                /* 0068 */  0xDD, 0x02, 0x7C, 0x0B, 0xD0, 0x0E, 0x21, 0xB4,  // ..|...!.
                /* 0070 */  0x0A, 0x05, 0x98, 0x14, 0xE0, 0x13, 0x4C, 0x88,  // ......L.
                /* 0078 */  0xB1, 0xCE, 0xE2, 0x24, 0x9A, 0x16, 0xA0, 0x19,  // ...$....
                /* 0080 */  0x42, 0xE3, 0x38, 0x90, 0x30, 0x91, 0x5A, 0x14,  // B.8.0.Z.
                /* 0088 */  0x20, 0x1B, 0x43, 0xB6, 0x91, 0xC9, 0x5C, 0x2C,  //  .C...\,
                /* 0090 */  0x72, 0x20, 0x28, 0x31, 0x03, 0x41, 0xE9, 0x9C,  // r (1.A..
                /* 0098 */  0x87, 0x6C, 0xE2, 0x6A, 0x08, 0x85, 0xA2, 0x68,  // .l.j...h
                /* 00A0 */  0x0C, 0x51, 0x12, 0x9C, 0xC3, 0x81, 0x44, 0x88,  // .Q....D.
                /* 00A8 */  0x5D, 0xAE, 0x00, 0xC9, 0x03, 0xD0, 0x2C, 0x4E,  // ].....,N
                /* 00B0 */  0xA2, 0xF5, 0x39, 0x68, 0x74, 0x6C, 0x04, 0x3C,  // ..9htl.<
                /* 00B8 */  0xE9, 0x82, 0x4D, 0xA0, 0x30, 0x6B, 0x55, 0x4C,  // ..M.0kUL
                /* 00C0 */  0x07, 0x30, 0x18, 0x0F, 0x20, 0x92, 0x33, 0x5E,  // .0.. .3^
                /* 00C8 */  0x14, 0xB0, 0xBD, 0x4E, 0x44, 0x63, 0x3B, 0x58,  // ...NDc;X
                /* 00D0 */  0x26, 0x09, 0x0E, 0x35, 0x54, 0x4B, 0x14, 0x60,  // &..5TK.`
                /* 00D8 */  0x7E, 0x62, 0x9A, 0xC8, 0xA9, 0x1D, 0x9F, 0x21,  // ~b.....!
                /* 00E0 */  0x99, 0xB4, 0xA1, 0xA0, 0xC6, 0xEF, 0x69, 0x9D,  // ......i.
                /* 00E8 */  0x94, 0x67, 0x1B, 0xF1, 0xA0, 0x0C, 0x93, 0xC0,  // .g......
                /* 00F0 */  0xA3, 0x60, 0x68, 0x9C, 0xA0, 0x2C, 0x08, 0xED,  // .`h..,..
                /* 00F8 */  0x88, 0x0E, 0x94, 0x00, 0x9E, 0x84, 0xE7, 0x58,  // .......X
                /* 0100 */  0xBC, 0x00, 0xE1, 0x23, 0x26, 0xE7, 0x81, 0x18,  // ...#&...
                /* 0108 */  0x09, 0x7C, 0x2E, 0xB0, 0xD4, 0x31, 0xA3, 0x47,  // .|...1.G
                /* 0110 */  0x14, 0x2E, 0xE0, 0xF9, 0x1C, 0x43, 0xE4, 0xB8,  // .....C..
                /* 0118 */  0xAF, 0x00, 0x1E, 0x45, 0xE4, 0x04, 0x47, 0x1D,  // ...E..G.
                /* 0120 */  0x2C, 0x4E, 0x41, 0x57, 0x01, 0xF2, 0xFF, 0xBF,  // ,NAW....
                /* 0128 */  0x0A, 0x18, 0xE5, 0x59, 0x00, 0x16, 0x81, 0x45,  // ...Y...E
                /* 0130 */  0x8F, 0x02, 0x25, 0x03, 0x42, 0x1E, 0x05, 0x58,  // ..%.B..X
                /* 0138 */  0xC5, 0xD6, 0x34, 0x12, 0x58, 0x99, 0x00, 0x6D,  // ..4.X..m
                /* 0140 */  0x02, 0xC4, 0x41, 0xC8, 0xD8, 0x00, 0x64, 0x4E,  // ..A...dN
                /* 0148 */  0x80, 0x46, 0x01, 0xB6, 0x26, 0x2A, 0x6F, 0xE3,  // .F..&*o.
                /* 0150 */  0x12, 0x4C, 0x14, 0x23, 0xC4, 0x0A, 0x11, 0xE5,  // .L.#....
                /* 0158 */  0x4C, 0xE2, 0xC6, 0x8C, 0x11, 0x25, 0x48, 0xC8,  // L....%H.
                /* 0160 */  0x78, 0x11, 0x63, 0xBC, 0x14, 0x84, 0x37, 0xF8,  // x.c...7.
                /* 0168 */  0x5B, 0x44, 0x24, 0x13, 0x78, 0xDC, 0xB8, 0x03,  // [D$.x...
                /* 0170 */  0x80, 0x4F, 0x0D, 0xC7, 0x76, 0x48, 0xBE, 0x2B,  // .O..vH.+
                /* 0178 */  0x98, 0xC0, 0xB3, 0x3E, 0xB4, 0xC7, 0x83, 0xC0,  // ...>....
                /* 0180 */  0x87, 0x1B, 0x35, 0xC6, 0x89, 0x84, 0x26, 0x0F,  // ..5...&.
                /* 0188 */  0x09, 0x59, 0x00, 0x51, 0x24, 0x78, 0xD4, 0x81,  // .Y.Q$x..
                /* 0190 */  0xC1, 0x47, 0x03, 0x8F, 0xEC, 0xB8, 0x3D, 0xC3,  // .G....=.
                /* 0198 */  0x13, 0x08, 0x72, 0x08, 0x47, 0xF0, 0xD0, 0xF0,  // ..r.G...
                /* 01A0 */  0x4C, 0xE0, 0x31, 0xB0, 0xCB, 0x82, 0x4F, 0x01,  // L.1...O.
                /* 01A8 */  0x3E, 0x24, 0xE0, 0x5D, 0x03, 0xEA, 0x76, 0xF0,  // >$.]..v.
                /* 01B0 */  0x6C, 0xC0, 0x46, 0x1D, 0x0E, 0x33, 0x5C, 0xCF,  // l.F..3\.
                /* 01B8 */  0x3B, 0xDC, 0x09, 0x3C, 0x1A, 0x3C, 0x68, 0xF0,  // ;..<.<h.
                /* 01C0 */  0x43, 0x87, 0x07, 0x87, 0x1B, 0xEB, 0xC9, 0x1C,  // C.......
                /* 01C8 */  0xD9, 0x0B, 0x41, 0xB3, 0xE7, 0x03, 0x4D, 0xD2,  // ..A...M.
                /* 01D0 */  0xA7, 0x0E, 0x76, 0x06, 0x38, 0x9F, 0x9E, 0x21,  // ..v.8..!
                /* 01D8 */  0x89, 0xFC, 0x41, 0xA0, 0x46, 0x66, 0x68, 0xCF,  // ..A.Ffh.
                /* 01E0 */  0xF8, 0xE5, 0xC3, 0x90, 0x8F, 0x0A, 0x87, 0xC5,  // ........
                /* 01E8 */  0xC4, 0x9E, 0x3E, 0xE8, 0x78, 0xC0, 0x7F, 0x29,  // ..>.x..)
                /* 01F0 */  0x79, 0xD4, 0xF0, 0xF4, 0x3D, 0x5F, 0x0F, 0x83,  // y...=_..
                /* 01F8 */  0x9D, 0x48, 0xE0, 0xFD, 0xFF, 0x4F, 0x24, 0xB0,  // .H...O$.
                /* 0200 */  0x2E, 0x0E, 0xEC, 0x74, 0xF0, 0xF2, 0xE0, 0x29,  // ...t...)
                /* 0208 */  0xBE, 0x37, 0xC0, 0x3B, 0x8F, 0x00, 0x0F, 0x90,  // .7.;....
                /* 0210 */  0x43, 0xC0, 0x9C, 0x0A, 0x3C, 0x04, 0x3E, 0x80,  // C...<.>.
                /* 0218 */  0x67, 0x89, 0x93, 0xB4, 0xD2, 0xA9, 0x21, 0x0F,  // g.....!.
                /* 0220 */  0x2F, 0x30, 0x66, 0x06, 0xF7, 0xF0, 0x82, 0x4F,  // /0f....O
                /* 0228 */  0xFE, 0x10, 0xD0, 0xD9, 0xC3, 0xA9, 0x41, 0x64,  // ......Ad
                /* 0230 */  0xE3, 0x29, 0xE0, 0x53, 0x0E, 0x55, 0x04, 0xA4,  // .).S.U..
                /* 0238 */  0xD9, 0x82, 0x85, 0x60, 0xFA, 0x05, 0x68, 0x04,  // ...`..h.
                /* 0240 */  0x3E, 0x1B, 0x38, 0x37, 0x89, 0x92, 0x8F, 0x8E,  // >.87....
                /* 0248 */  0xC2, 0x39, 0xEB, 0x99, 0x84, 0x82, 0x18, 0xD0,  // .9......
                /* 0250 */  0x41, 0xCE, 0x15, 0xE8, 0xE3, 0x8A, 0xCF, 0x24,  // A......$
                /* 0258 */  0xC7, 0xF0, 0xF0, 0xE3, 0x59, 0x79, 0x14, 0xBE,  // ....Yy..
                /* 0260 */  0xAE, 0xF8, 0x28, 0xE2, 0x53, 0x85, 0x8F, 0x00,  // ..(.S...
                /* 0268 */  0x3E, 0x2F, 0xF0, 0x2F, 0x8D, 0x2F, 0x10, 0x46,  // >/././.F
                /* 0270 */  0xB7, 0x9A, 0x23, 0x0B, 0x0A, 0xCC, 0x27, 0x12,  // ..#...'.
                /* 0278 */  0x4E, 0x50, 0xD7, 0x95, 0x02, 0x64, 0xFA, 0x70,  // NP...d.p
                /* 0280 */  0xD1, 0xFF, 0xFF, 0x33, 0x03, 0x1C, 0x20, 0x5F,  // ...3.. _
                /* 0288 */  0x0F, 0x7C, 0x1C, 0x78, 0x44, 0x60, 0x63, 0x78,  // .|.xD`cx
                /* 0290 */  0x22, 0x30, 0x9A, 0xD1, 0x79, 0xF8, 0xC9, 0xA2,  // "0..y...
                /* 0298 */  0xE2, 0x4E, 0x96, 0x82, 0x78, 0xB2, 0x8E, 0x32,  // .N..x..2
                /* 02A0 */  0x59, 0xF4, 0x4C, 0x7C, 0xC1, 0xF0, 0x8C, 0x5E,  // Y.L|...^
                /* 02A8 */  0x16, 0x82, 0x9C, 0xA3, 0x27, 0xEC, 0x0B, 0x09,  // ....'...
                /* 02B0 */  0xAC, 0xE3, 0x40, 0xC8, 0x37, 0x03, 0x4F, 0xC3,  // ..@.7.O.
                /* 02B8 */  0x70, 0x9E, 0x2C, 0x87, 0xF3, 0x64, 0xF9, 0x58,  // p.,..d.X
                /* 02C0 */  0x7C, 0x1F, 0x01, 0x9F, 0xC0, 0xD9, 0x82, 0x1C,  // |.......
                /* 02C8 */  0x1E, 0x13, 0x6D, 0x54, 0xF4, 0x56, 0xE4, 0xE1,  // ..mT.V..
                /* 02D0 */  0xF1, 0xCB, 0x81, 0xE7, 0xF3, 0x8C, 0x70, 0x94,  // ......p.
                /* 02D8 */  0xAF, 0x12, 0x38, 0x8C, 0x87, 0x13, 0x0F, 0xD1,  // ..8.....
                /* 02E0 */  0x17, 0x24, 0x58, 0x13, 0x39, 0x69, 0xDF, 0x16,  // .$X.9i..
                /* 02E8 */  0x4E, 0x36, 0x68, 0xFC, 0xB0, 0xBE, 0x20, 0x01,  // N6h... .
                /* 02F0 */  0xAF, 0xCC, 0x97, 0x2C, 0x1A, 0x67, 0x21, 0x0A,  // ...,.g!.
                /* 02F8 */  0xBB, 0x24, 0x0A, 0xE3, 0x4B, 0x16, 0xFB, 0xFF,  // .$..K...
                /* 0300 */  0x5F, 0xB2, 0x00, 0x3B, 0xD7, 0x1B, 0xDC, 0xA0,  // _..;....
                /* 0308 */  0xE1, 0x1E, 0x5D, 0xE2, 0x9C, 0xCC, 0xD1, 0xB2,  // ..].....
                /* 0310 */  0x59, 0x83, 0xE3, 0x96, 0x05, 0xF7, 0x1C, 0xF5,  // Y.......
                /* 0318 */  0xC0, 0x10, 0xA1, 0xB3, 0x7B, 0x95, 0x6E, 0x57,  // ....{.nW
                /* 0320 */  0x8F, 0x12, 0x51, 0x1E, 0xAF, 0x22, 0x3D, 0x5D,  // ..Q.."=]
                /* 0328 */  0xB5, 0x06, 0xA3, 0x5B, 0x96, 0xB1, 0x5E, 0xAE,  // ...[..^.
                /* 0330 */  0xE2, 0xBC, 0x65, 0xF9, 0xB2, 0x65, 0x14, 0x63,  // ..e..e.c
                /* 0338 */  0x87, 0x0B, 0x11, 0x38, 0x52, 0xB8, 0x10, 0x0F,  // ...8R...
                /* 0340 */  0x3B, 0x86, 0x79, 0xDA, 0x61, 0xB7, 0x2C, 0xB0,  // ;.y.a.,.
                /* 0348 */  0xCA, 0xBB, 0x65, 0x01, 0xD9, 0xFF, 0xFF, 0x2D,  // ..e....-
                /* 0350 */  0x0B, 0x30, 0x77, 0x8D, 0x04, 0xE3, 0xCD, 0x01,  // .0w.....
                /* 0358 */  0x77, 0x53, 0x02, 0xC3, 0x3D, 0x0B, 0x70, 0x96,  // wS..=.p.
                /* 0360 */  0xFE, 0x9E, 0x45, 0x6F, 0x5A, 0xBE, 0x67, 0xF1,  // ..EoZ.g.
                /* 0368 */  0xC3, 0x88, 0x35, 0x01, 0x69, 0xBE, 0xB0, 0xFE,  // ..5.i...
                /* 0370 */  0xFF, 0xF3, 0x85, 0x75, 0xD1, 0x02, 0x98, 0xFE,  // ...u....
                /* 0378 */  0xFF, 0xBF, 0x68, 0xE1, 0xC3, 0x5D, 0xB4, 0x80,  // ..h..]..
                /* 0380 */  0xDE, 0x25, 0x09, 0x78, 0x25, 0xBE, 0x69, 0xA1,  // .%.x%.i.
                /* 0388 */  0xA2, 0xDE, 0xB4, 0x00, 0xAD, 0xE3, 0x7D, 0xDF,  // ......}.
                /* 0390 */  0x61, 0x60, 0xCF, 0xC7, 0xC0, 0x60, 0x00, 0x2F,  // a`...`./
                /* 0398 */  0xC4, 0x21, 0xC2, 0xFF, 0xFF, 0x9F, 0xAD, 0x1E,  // .!......
                /* 03A0 */  0xB6, 0x7C, 0xC4, 0x32, 0xC4, 0xC3, 0x56, 0xB8,  // .|.2..V.
                /* 03A8 */  0x08, 0x6F, 0x5A, 0xC6, 0x88, 0xF3, 0x8E, 0xF5,  // .oZ.....
                /* 03B0 */  0xA6, 0xE5, 0x23, 0xC5, 0x7B, 0xD6, 0x43, 0xB2,  // ..#.{.C.
                /* 03B8 */  0x21, 0x83, 0x3C, 0x1C, 0x1B, 0xED, 0x08, 0x1F,  // !.<.....
                /* 03C0 */  0x93, 0x8D, 0x10, 0x37, 0xD8, 0x9B, 0x85, 0x6F,  // ...7...o
                /* 03C8 */  0x5A, 0x60, 0x15, 0x77, 0xD3, 0x02, 0x68, 0x32,  // Z`.w..h2
                /* 03D0 */  0xFC, 0x37, 0x2D, 0xF0, 0xDD, 0x1C, 0x30, 0x07,  // .7-...0.
                /* 03D8 */  0x64, 0x70, 0xFC, 0xFF, 0x2F, 0x5A, 0x80, 0xCB,  // dp../Z..
                /* 03E0 */  0xE9, 0x82, 0xE9, 0xA2, 0x05, 0x30, 0xE1, 0xFF,  // .....0..
                /* 03E8 */  0x7F, 0xD1, 0x02, 0x98, 0x77, 0x47, 0x02, 0x9F,  // ....wG..
                /* 03F0 */  0xBE, 0x2F, 0x96, 0x4F, 0xD4, 0x5E, 0x89, 0x24,  // ./.O.^.$
                /* 03F8 */  0x48, 0x80, 0xC1, 0x5C, 0xB4, 0xC0, 0xFE, 0xFF,  // H..\....
                /* 0400 */  0xBF, 0x68, 0x01, 0xCB, 0xB3, 0x83, 0x47, 0x0D,  // .h....G.
                /* 0408 */  0x96, 0x3B, 0xC0, 0xE3, 0x8E, 0x2F, 0x0B, 0x6F,  // .;.../.o
                /* 0410 */  0x6B, 0xEC, 0x86, 0xC2, 0x66, 0x0D, 0x0F, 0x2C,  // k...f..,
                /* 0418 */  0x46, 0xC0, 0x18, 0x47, 0x15, 0x28, 0x66, 0x84,  // F..G.(f.
                /* 0420 */  0xDE, 0x71, 0x84, 0xF9, 0x48, 0xE0, 0xEB, 0x16,  // .q..H...
                /* 0428 */  0xDC, 0x13, 0x16, 0xBB, 0x5F, 0x3D, 0x66, 0x19,  // ...._=f.
                /* 0430 */  0xC6, 0xE7, 0xAC, 0x28, 0xCF, 0x59, 0xEC, 0xBA,  // ...(.Y..
                /* 0438 */  0x65, 0x8C, 0xE7, 0x2C, 0x9F, 0x96, 0xAD, 0xED,  // e..,....
                /* 0440 */  0xE2, 0xA5, 0x13, 0x97, 0xAF, 0x5C, 0x11, 0x0E,  // .....\..
                /* 0448 */  0x28, 0x4C, 0x84, 0x20, 0x2F, 0xCB, 0x51, 0xDF,  // (L. /.Q.
                /* 0450 */  0xBD, 0x0C, 0xEE, 0xEB, 0x16, 0x78, 0x85, 0x5E,  // .....x.^
                /* 0458 */  0xB7, 0x00, 0x19, 0xFF, 0xFF, 0xEB, 0x16, 0x60,  // .......`
                /* 0460 */  0x66, 0xB0, 0xBE, 0x6E, 0x81, 0xEF, 0xFE, 0x80,  // f..n....
                /* 0468 */  0xB9, 0x30, 0xC1, 0x9E, 0x4D, 0xB8, 0xB7, 0x07,  // .0..M...
                /* 0470 */  0x18, 0x97, 0x2E, 0xC0, 0x9A, 0xA6, 0x57, 0x83,  // ......W.
                /* 0478 */  0x4E, 0x22, 0xD6, 0x03, 0xA2, 0x4B, 0x17, 0x3F,  // N"...K.?
                /* 0480 */  0xFB, 0x58, 0xDD, 0xA5, 0x8B, 0x4C, 0x1A, 0xFE,  // .X...L..
                /* 0488 */  0xFF, 0x7F, 0xD2, 0xB0, 0x6F, 0x5E, 0x00, 0xC3,  // ....o^..
                /* 0490 */  0xFF, 0xFF, 0x37, 0x2F, 0x78, 0x41, 0x6F, 0x5E,  // ..7/xAo^
                /* 0498 */  0x40, 0xEF, 0xD2, 0x04, 0xBC, 0x8E, 0x18, 0xBE,  // @.......
                /* 04A0 */  0x34, 0xC1, 0xD1, 0x70, 0xFF, 0xA2, 0x91, 0xD6,  // 4..p....
                /* 04A8 */  0xA3, 0xD0, 0x2B, 0xA3, 0x30, 0xBE, 0x7F, 0x01,  // ..+.0...
                /* 04B0 */  0x8E, 0x04, 0x8F, 0x1D, 0x34, 0x37, 0x38, 0xF8,  // ....478.
                /* 04B8 */  0xF3, 0xF6, 0x1D, 0xE0, 0x71, 0xE2, 0x54, 0x9E,  // ....q.T.
                /* 04C0 */  0x85, 0x82, 0xBF, 0x3D, 0xB0, 0xFF, 0xFF, 0x89,  // ...=....
                /* 04C8 */  0xC2, 0x77, 0x2F, 0xB8, 0x53, 0x78, 0xF4, 0xF2,  // .w/.Sx..
                /* 04D0 */  0x91, 0x2B, 0x42, 0x8C, 0xF3, 0x7A, 0xF7, 0x32,  // .+B..z.2
                /* 04D8 */  0x4A, 0xA8, 0xC7, 0x2F, 0x76, 0x62, 0x36, 0xCA,  // J../vb6.
                /* 04E0 */  0xA3, 0xD7, 0x7B, 0xB3, 0x51, 0xE2, 0x3D, 0x3A,  // ..{.Q.=:
                /* 04E8 */  0x1B, 0xD7, 0x38, 0x11, 0x1E, 0xA3, 0x83, 0x86,  // ..8.....
                /* 04F0 */  0x0A, 0xF1, 0xEC, 0x15, 0xF0, 0xE1, 0xD9, 0x77,  // .......w
                /* 04F8 */  0x2F, 0xF0, 0x4A, 0xBC, 0x7B, 0x01, 0x34, 0x39,  // /.J.{.49
                /* 0500 */  0x21, 0xE0, 0xEE, 0x5E, 0x60, 0x39, 0x83, 0xB0,  // !..^`9..
                /* 0508 */  0xFF, 0xFF, 0xA1, 0x09, 0xE6, 0xD5, 0x01, 0xCE,  // ........
                /* 0510 */  0xC5, 0x0B, 0xB0, 0xA6, 0xE2, 0xE2, 0x45, 0x15,  // ......E.
                /* 0518 */  0x5C, 0xBC, 0x50, 0x67, 0x0A, 0xEB, 0x7A, 0x12,  // \.Pg..z.
                /* 0520 */  0x68, 0xC6, 0xE0, 0xBC, 0x75, 0x01, 0x2E, 0xFF,  // h...u...
                /* 0528 */  0xFF, 0xB7, 0x2E, 0x80, 0x2D, 0x01, 0x6F, 0x5D,  // ....-.o]
                /* 0530 */  0x40, 0xEF, 0xAA, 0x04, 0xFC, 0x14, 0xDA, 0xF4,  // @.......
                /* 0538 */  0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35, 0xCA,  // ...U.25.
                /* 0540 */  0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6, 0x1C,  // 4...Rc..
                /* 0548 */  0x09, 0xF8, 0xFF, 0x5F, 0x52, 0x74, 0xC7, 0xA0,  // ..._Rt..
                /* 0550 */  0xE2, 0x56, 0xA6, 0xA1, 0x39, 0x1A, 0x08, 0x0D,  // .V..9...
                /* 0558 */  0xF5, 0x1B, 0x92, 0x11, 0x10, 0x25, 0x04, 0x11,  // .....%..
                /* 0560 */  0x90, 0xD3, 0xFC, 0x26, 0x04, 0xE4, 0x6C, 0x20,  // ...&..l 
                /* 0568 */  0x02, 0xB2, 0x9A, 0xA5, 0x09, 0xDC, 0x3A, 0x54,  // ......:T
                /* 0570 */  0x00, 0xB1, 0x14, 0x20, 0xFC, 0x8F, 0x23, 0x50,  // ... ..#P
                /* 0578 */  0x47, 0x02, 0x11, 0x90, 0xE5, 0xDB, 0x00, 0x62,  // G......b
                /* 0580 */  0x61, 0x40, 0x34, 0x64, 0xE2, 0x03, 0x9C, 0x45,  // a@4d...E
                /* 0588 */  0x7F, 0x12, 0x08, 0xC8, 0xC2, 0xE9, 0x04, 0x62,  // .......b
                /* 0590 */  0xD9, 0x4E, 0x40, 0x59, 0x06, 0x10, 0x01, 0x59,  // .N@Y...Y
                /* 0598 */  0xEF, 0xD7, 0x43, 0x40, 0x56, 0x0F, 0x22, 0x20,  // ..C@V." 
                /* 05A0 */  0x27, 0xB6, 0x02, 0xCE, 0x72, 0x7B, 0x01, 0x62,  // '...r{.b
                /* 05A8 */  0xAA, 0x17, 0x2E, 0x10, 0x27, 0xF9, 0x76, 0x08,  // ....'.v.
                /* 05B0 */  0xD4, 0xB1, 0x40, 0x04, 0xE4, 0x08, 0x6E, 0x80,  // ..@...n.
                /* 05B8 */  0x58, 0x20, 0x10, 0x01, 0x59, 0x90, 0x1D, 0x70,  // X ..Y..p
                /* 05C0 */  0x26, 0xC7, 0x0F, 0x10, 0x0B, 0x03, 0x42, 0x43,  // &.....BC
                /* 05C8 */  0x19, 0x1A, 0x28, 0x05, 0xD1, 0x40, 0x89, 0xA2,  // ..(..@..
                /* 05D0 */  0x81, 0x52, 0x10, 0x01, 0xF9, 0xFF, 0x0F         // .R.....
            })
        }

        Device (WMI7)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x24, 0xD8, 0x06, 0x0F, 0x18, 0xF9, 0x8A, 0x43,  // $......C
                /* 0008 */  0xA6, 0x70, 0x84, 0x35, 0x1E, 0x08, 0xDC, 0xC6,  // .p.5....
                /* 0010 */  0x43, 0x30, 0x01, 0x05, 0x21, 0x12, 0x90, 0x05,  // C0..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x43, 0x31, 0x01, 0x00   // ..).C1..
            })
            Name (VSEL, Package (0x02)
            {
                "Disable", 
                "Enable"
            })
            Method (WQC0, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = DerefOf (VSEL [SDBM])
                Release (^^WMI1.MWMI)
                Return (Local0)
            }

            Name (WQC1, Buffer (0x027E)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x6E, 0x02, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00,  // n.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xD8, 0x82, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x05, 0x10, 0x0A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x4C, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PL...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0xCE, 0x18, 0xA8, 0x4C, 0x08, 0x89, 0x00,  // 1...L...
                /* 0050 */  0xA6, 0x42, 0xE0, 0x08, 0x41, 0xBF, 0x02, 0x10,  // .B..A...
                /* 0058 */  0x3A, 0x44, 0x93, 0x41, 0x01, 0x4E, 0x11, 0x04,  // :D.A.N..
                /* 0060 */  0x69, 0xCB, 0x02, 0x74, 0x0B, 0xF0, 0x2D, 0x40,  // i..t..-@
                /* 0068 */  0x3B, 0x84, 0xD0, 0x22, 0x95, 0x28, 0x40, 0xA1,  // ;..".(@.
                /* 0070 */  0x00, 0x9B, 0x02, 0x2C, 0x0A, 0x90, 0x0D, 0x26,  // ...,...&
                /* 0078 */  0xDB, 0x70, 0x64, 0x18, 0x4C, 0xE4, 0x18, 0x50,  // .pd.L..P
                /* 0080 */  0x62, 0xC6, 0x80, 0xD2, 0x39, 0x05, 0x01, 0x1B,  // b...9...
                /* 0088 */  0xBD, 0x50, 0x14, 0x4D, 0x23, 0x4A, 0x82, 0x83,  // .P.M#J..
                /* 0090 */  0x3A, 0x86, 0x08, 0xC1, 0xCB, 0x15, 0x20, 0x79,  // :..... y
                /* 0098 */  0x02, 0xD2, 0x3C, 0x2F, 0x59, 0x1F, 0x84, 0x86,  // ..</Y...
                /* 00A0 */  0xC0, 0x46, 0xC0, 0x23, 0x4B, 0x00, 0x61, 0xA1,  // .F.#K.a.
                /* 00A8 */  0x96, 0xA9, 0x90, 0x30, 0x28, 0x0F, 0x20, 0x92,  // ...0(. .
                /* 00B0 */  0x33, 0x54, 0x14, 0xB0, 0xBD, 0x4E, 0x44, 0x26,  // 3T...ND&
                /* 00B8 */  0xC7, 0x49, 0x25, 0xC1, 0xA1, 0x46, 0xE9, 0xC1,  // .I%..F..
                /* 00C0 */  0x35, 0x3F, 0x32, 0x4D, 0xE4, 0xD8, 0x9A, 0x1E,  // 5?2M....
                /* 00C8 */  0xB1, 0x20, 0x99, 0xB4, 0xA1, 0xA0, 0x86, 0xEE,  // . ......
                /* 00D0 */  0x69, 0x9D, 0x94, 0x27, 0x1A, 0xF1, 0xA0, 0x0C,  // i..'....
                /* 00D8 */  0x93, 0xC0, 0xA3, 0x60, 0x68, 0x9C, 0xA0, 0x2C,  // ...`h..,
                /* 00E0 */  0x08, 0x39, 0x18, 0x28, 0x0A, 0xF0, 0x24, 0x3C,  // .9.(..$<
                /* 00E8 */  0xC7, 0xE2, 0x05, 0x08, 0x9F, 0x31, 0x39, 0x0A,  // .....19.
                /* 00F0 */  0xC4, 0x48, 0xE0, 0x23, 0x81, 0x05, 0x8F, 0x19,  // .H.#....
                /* 00F8 */  0x3D, 0xA2, 0x70, 0x01, 0xCF, 0xE7, 0x18, 0x22,  // =.p...."
                /* 0100 */  0xC7, 0x3D, 0xD4, 0x18, 0x47, 0x11, 0x39, 0xC1,  // .=..G.9.
                /* 0108 */  0x51, 0x1F, 0xD7, 0x83, 0x81, 0xAF, 0x00, 0x16,  // Q.......
                /* 0110 */  0x84, 0x49, 0xF0, 0x0E, 0x39, 0x5C, 0xAC, 0xD7,  // .I..9\..
                /* 0118 */  0x00, 0xF6, 0xFF, 0x47, 0x8B, 0xF5, 0x2E, 0x70,  // ...G...p
                /* 0120 */  0xEC, 0x0C, 0xE5, 0xA0, 0x82, 0x1C, 0x98, 0x09,  // ........
                /* 0128 */  0x42, 0x1E, 0x08, 0x46, 0x06, 0x84, 0x3C, 0x0A,  // B..F..<.
                /* 0130 */  0xB0, 0x3A, 0x36, 0x0D, 0x20, 0x81, 0xDD, 0xDF,  // .:6. ...
                /* 0138 */  0x19, 0xA4, 0x11, 0x42, 0xDA, 0x80, 0x24, 0x4E,  // ...B..$N
                /* 0140 */  0x80, 0xB2, 0xB1, 0xCA, 0x16, 0x90, 0xCC, 0x09,  // ........
                /* 0148 */  0x30, 0x86, 0x23, 0x94, 0x38, 0x9D, 0x81, 0xE8,  // 0.#.8...
                /* 0150 */  0x48, 0x10, 0x25, 0x44, 0xC4, 0xDE, 0x40, 0x85,  // H.%D..@.
                /* 0158 */  0x12, 0x28, 0x96, 0xAD, 0x21, 0x6A, 0x8E, 0x81,  // .(..!j..
                /* 0160 */  0xE2, 0x04, 0x7F, 0x33, 0x88, 0x10, 0xAF, 0xFD,  // ...3....
                /* 0168 */  0x41, 0x90, 0xB1, 0xE3, 0x0E, 0x01, 0x3E, 0x34,  // A.....>4
                /* 0170 */  0x9C, 0xD1, 0x29, 0x3E, 0x04, 0x3C, 0x30, 0x98,  // ..)>.<0.
                /* 0178 */  0xC0, 0xB3, 0x3A, 0xC3, 0x47, 0x84, 0xE0, 0x87,  // ..:.G...
                /* 0180 */  0x1C, 0x35, 0xC6, 0xA1, 0x24, 0xB0, 0xA0, 0xA5,  // .5..$...
                /* 0188 */  0x4B, 0x03, 0x88, 0x22, 0xC1, 0xA3, 0x0E, 0x0D,  // K.."....
                /* 0190 */  0x3E, 0x1E, 0x78, 0x68, 0xC7, 0xEE, 0x41, 0x9E,  // >.xh..A.
                /* 0198 */  0x40, 0x90, 0x43, 0x38, 0x82, 0x07, 0x87, 0xE7,  // @.C8....
                /* 01A0 */  0x02, 0x8F, 0x81, 0x5D, 0x18, 0x7C, 0x12, 0xF0,  // ...].|..
                /* 01A8 */  0x41, 0x01, 0xEF, 0x1A, 0x50, 0xA3, 0x7E, 0x3E,  // A...P.~>
                /* 01B0 */  0x60, 0x43, 0x0E, 0x87, 0x19, 0xAF, 0x4F, 0x01,  // `C....O.
                /* 01B8 */  0xE1, 0x4E, 0xE0, 0xB0, 0x9F, 0x33, 0xF8, 0x99,  // .N...3..
                /* 01C0 */  0xC3, 0x83, 0xC3, 0x4D, 0xF1, 0x64, 0x8E, 0xAC,  // ...M.d..
                /* 01C8 */  0x54, 0x01, 0x66, 0xCF, 0x08, 0x3A, 0x4F, 0xF8,  // T.f..:O.
                /* 01D0 */  0xD0, 0xC1, 0x2E, 0x04, 0xE7, 0xD3, 0x33, 0x24,  // ......3$
                /* 01D8 */  0x91, 0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED, 0x71,  // .?.....q
                /* 01E0 */  0xBF, 0x7B, 0x18, 0xF2, 0x71, 0xE1, 0xB0, 0x98,  // .{..q...
                /* 01E8 */  0xD8, 0xC3, 0x07, 0x1D, 0x0F, 0xF8, 0xEF, 0x24,  // .......$
                /* 01F0 */  0xCF, 0x08, 0x9E, 0xBE, 0xE7, 0x6B, 0x82, 0xD1,  // .....k..
                /* 01F8 */  0x07, 0x8E, 0x1E, 0x88, 0xA1, 0x9F, 0x39, 0x0E,  // ......9.
                /* 0200 */  0xE3, 0x34, 0x8C, 0xF8, 0xFF, 0x3F, 0xA2, 0xE7,  // .4...?..
                /* 0208 */  0x80, 0x20, 0x31, 0x8E, 0xC9, 0x83, 0xE3, 0x01,  // . 1.....
                /* 0210 */  0x47, 0x4E, 0xCF, 0x2A, 0x3E, 0x54, 0xF0, 0x13,  // GN.*>T..
                /* 0218 */  0x86, 0x0F, 0x15, 0xEC, 0x7C, 0x70, 0x1A, 0xCF,  // ....|p..
                /* 0220 */  0x01, 0x1E, 0xCE, 0x59, 0xF9, 0x4C, 0x01, 0x1C,  // ...Y.L..
                /* 0228 */  0x0F, 0x03, 0xE0, 0x1B, 0x96, 0x4F, 0x33, 0xE0,  // .....O3.
                /* 0230 */  0x9B, 0x16, 0x66, 0x58, 0x70, 0x66, 0xC5, 0x47,  // ..fXpf.G
                /* 0238 */  0x85, 0x39, 0xD3, 0x00, 0x8F, 0xE3, 0x82, 0x87,  // .9......
                /* 0240 */  0xC0, 0x4F, 0x15, 0x1E, 0x02, 0x1F, 0xC0, 0xC3,  // .O......
                /* 0248 */  0xC8, 0x79, 0x5A, 0xE9, 0xEC, 0x90, 0x67, 0x1F,  // .yZ...g.
                /* 0250 */  0x30, 0x8D, 0x82, 0x2B, 0xB4, 0xE9, 0x53, 0xA3,  // 0..+..S.
                /* 0258 */  0x51, 0xAB, 0x06, 0x65, 0x6A, 0x94, 0x69, 0x50,  // Q..ej.iP
                /* 0260 */  0xAB, 0x4F, 0xA5, 0xC6, 0x8C, 0xFD, 0x74, 0x2C,  // .O....t,
                /* 0268 */  0xED, 0x75, 0xA0, 0xE3, 0x81, 0xA5, 0xBD, 0x13,  // .u......
                /* 0270 */  0xF4, 0xFF, 0x3F, 0x28, 0x38, 0x18, 0x08, 0x8D,  // ..?(8...
                /* 0278 */  0x44, 0x27, 0x10, 0xFF, 0xFF, 0x01               // D'....
            })
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Mutex (BFWM, 0x00)
            Method (MHCF, 1, NotSerialized)
            {
                Local0 = BFWC (Arg0)
                Return (Local0)
            }

            Method (MHPF, 1, NotSerialized)
            {
                Name (RETB, Buffer (0x25){})
                Acquire (BFWM, 0xFFFF)
                If ((SizeOf (Arg0) <= 0x25))
                {
                    BFWB = Arg0
                    CHKS ()
                    If (BFWP ())
                    {
                        CHKS ()
                        BFWL ()
                    }

                    RETB = BFWB /* \BFWB */
                }

                Release (BFWM)
                Return (RETB) /* \_SB_.PCI0.LPC0.EC0_.HKEY.MHPF.RETB */
            }

            Method (MHIF, 1, NotSerialized)
            {
                Name (RETB, Buffer (0x0A){})
                Acquire (BFWM, 0xFFFF)
                BFWG (Arg0)
                RETB = BFWB /* \BFWB */
                Release (BFWM)
                Return (RETB) /* \_SB_.PCI0.LPC0.EC0_.HKEY.MHIF.RETB */
            }

            Method (MHDM, 1, NotSerialized)
            {
                BDMC (Arg0)
            }
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Method (PSSG, 1, NotSerialized)
            {
                Return (PSIF (0x00, 0x00))
            }

            Method (PSSS, 1, NotSerialized)
            {
                Return (PSIF (0x01, Arg0))
            }

            Method (PSBS, 1, NotSerialized)
            {
                Return (PSIF (0x02, Arg0))
            }

            Method (BICG, 1, NotSerialized)
            {
                Return (PSIF (0x03, Arg0))
            }

            Method (BICS, 1, NotSerialized)
            {
                Return (PSIF (0x04, Arg0))
            }

            Method (BCTG, 1, NotSerialized)
            {
                Return (PSIF (0x05, Arg0))
            }

            Method (BCCS, 1, NotSerialized)
            {
                Return (PSIF (0x06, Arg0))
            }

            Method (BCSG, 1, NotSerialized)
            {
                Return (PSIF (0x07, Arg0))
            }

            Method (BCSS, 1, NotSerialized)
            {
                Return (PSIF (0x08, Arg0))
            }

            Method (BDSG, 1, NotSerialized)
            {
                Return (PSIF (0x09, Arg0))
            }

            Method (BDSS, 1, NotSerialized)
            {
                Return (PSIF (0x0A, Arg0))
            }
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Method (GILN, 0, NotSerialized)
            {
                Return ((0x02 | ILNF))
            }

            Method (SILN, 1, NotSerialized)
            {
                If ((0x01 == Arg0))
                {
                    ILNF = 0x01
                    BBLS = 0x00
                    Return (0x00)
                }
                ElseIf ((0x02 == Arg0))
                {
                    ILNF = 0x00
                    BBLS = 0x01
                    Return (0x00)
                }
                Else
                {
                    Return (0x01)
                }
            }

            Method (GLSI, 0, NotSerialized)
            {
                If (H8DR)
                {
                    Return ((0x02 + HPLD))
                }
                ElseIf ((RBEC (0x46) & 0x04))
                {
                    Return (0x03)
                }
                Else
                {
                    Return (0x02)
                }
            }
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Method (GDLN, 0, NotSerialized)
            {
                Return ((0x02 | PLUX))
            }

            Method (SDLN, 1, NotSerialized)
            {
                If ((0x01 == Arg0))
                {
                    PLUX = 0x01
                    Return (0x00)
                }
                ElseIf ((0x02 == Arg0))
                {
                    PLUX = 0x00
                    Return (0x00)
                }
                Else
                {
                    Return (0x01)
                }
            }
        }

        Method (DTRD, 0, NotSerialized)
        {
            If (^PCI0.LPC0.EC0.PSST)
            {
                Return (0x01)
            }

            Return (0x00)
        }

        Method (DTNR, 0, NotSerialized)
        {
            If ((RBEC (0x46) & 0x40))
            {
                Return (0x01)
            }

            Return (0x00)
        }

        Method (DTPS, 0, NotSerialized)
        {
            If (H8DR)
            {
                Return (DTRD ())
            }
            Else
            {
                Return (DTNR ())
            }
        }

        Method (LAPS, 0, NotSerialized)
        {
            If (^PCI0.LPC0.EC0.CQLS)
            {
                Return (0x01)
            }
            Else
            {
                Return (0x00)
            }
        }

        Scope (PCI0.LPC0.EC0)
        {
            Method (DPRS, 0, Serialized)
            {
                Local0 = DTPS ()
                Local1 = LAPS ()
                Local1 |= (Local0 << 0x01)
                Switch (ToInteger (Local1))
                {
                    Case (0x00)
                    {
                        WFIO (0x82, 0x01)
                    }
                    Case (0x01)
                    {
                        WFIO (0x82, 0x01)
                    }
                    Case (0x02)
                    {
                        WFIO (0x82, 0x00)
                    }
                    Case (0x03)
                    {
                        WFIO (0x82, 0x00)
                    }

                }
            }

            Method (_Q4E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                DPRS ()
            }
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Method (GPSS, 0, NotSerialized)
            {
                If (H8DR)
                {
                    If (DTRD ())
                    {
                        Local1 = 0x01
                    }
                    Else
                    {
                        Local1 = 0x00
                    }
                }
                ElseIf (DTNR ())
                {
                    Local1 = 0x01
                }
                Else
                {
                    Local1 = 0x00
                }

                Local0 = 0x01
                Local0 |= (Local1 << 0x01)
                Local0 &= 0x03
                Return (Local0)
            }
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Method (FPSW, 1, Serialized)
            {
                Switch ((Arg0 & 0xFFFF))
                {
                    Case (0x0100)
                    {
                        Local0 = GLFP ()
                        FPSU = Local0
                        Local1 = (Local0 <<= 0x01 | 0x01)
                        Return (Local1)
                    }
                    Case (0x0101)
                    {
                        Local0 = (Arg0 >> 0x10)
                        SLFP (Local0)
                        Return (0x00)
                    }
                    Default
                    {
                        Return (0x80000000)
                    }

                }

                Return (0x00)
            }

            Method (GLFP, 0, NotSerialized)
            {
                If ((FPCI (0x00, 0x00) == 0x01))
                {
                    Return (0x01)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (SLFP, 1, NotSerialized)
            {
                If ((Arg0 == 0x01))
                {
                    FPSU = 0x01
                    FPCI (0x01, 0x01)
                }
                Else
                {
                    FPSU = 0x00
                    FPCI (0x01, 0x00)
                }
            }
        }

        OperationRegion (ECMS, SystemIO, 0x72, 0x02)
        Field (ECMS, ByteAcc, Lock, Preserve)
        {
            INDX,   8, 
            DATA,   8
        }

        Method (RECM, 1, Serialized)
        {
            INDX = Arg0
            Return (DATA) /* \_SB_.DATA */
        }

        Method (WECM, 2, Serialized)
        {
            INDX = Arg0
            DATA = Arg1
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Method (GSSS, 1, NotSerialized)
            {
                Local0 = 0x00
                CreateByteField (VEDI, 0x66, EFB1)
                If ((((SHDW & 0x80) == 0x00) && ((EFB1 & 0x80
                    ) == 0x80)))
                {
                    Local0 |= 0x00010000
                    If (((EPAO & 0x01) && (SHDW & 0x01)))
                    {
                        Local0 |= 0x00020000
                    }
                }

                If ((SHDW & 0x01))
                {
                    Local0 |= 0x01
                }

                Local0 |= 0x32000000
                Return (Local0)
            }

            Method (SSSS, 1, NotSerialized)
            {
                CreateByteField (VEDI, 0x66, EFB1)
                If ((((SHDW & 0x80) == 0x00) && ((EFB1 & 0x80
                    ) == 0x80)))
                {
                    If (((EPAO & 0x01) == 0x00))
                    {
                        If ((Arg0 == 0x00))
                        {
                            If (((SHDW & 0x01) != 0x00))
                            {
                                WFIO (0x87, 0x00)
                                SHDW = (SHDW & 0xFFFFFFFE)
                                WECM (0x4E, SHDW)
                                MHKQ (0x130F)
                                Return (0x00)
                            }
                        }

                        If ((Arg0 == 0x01))
                        {
                            If (((SHDW & 0x01) == 0x00))
                            {
                                WFIO (0x87, 0x01)
                                SHDW = (SHDW | 0x01)
                                WECM (0x4E, SHDW)
                                MHKQ (0x130F)
                                Return (0x00)
                            }
                        }
                    }

                    If (((EPAO & 0x01) == 0x01))
                    {
                        Return (0x00)
                    }
                }

                Return (0x80000000)
            }

            Method (TSSS, 0, NotSerialized)
            {
                CreateByteField (VEDI, 0x66, EFB1)
                If ((((SHDW & 0x80) == 0x00) && ((EFB1 & 0x80
                    ) == 0x80)))
                {
                    If (((SHDW & 0x01) != 0x00))
                    {
                        SSSS (0x00)
                        Return (0x00)
                    }

                    If (((SHDW & 0x01) == 0x00))
                    {
                        SSSS (0x01)
                        Return (0x00)
                    }
                }

                Return (0x80000000)
            }

            Method (CSSS, 0, NotSerialized)
            {
                If ((((SHDW & 0x80) == 0x00) && ((SHDW & 
                    0x01) != 0x00)))
                {
                    Return (SSSS (0x01))
                }
                Else
                {
                    Return (SSSS (0x00))
                }
            }
        }

        Scope (PCI0.LPC0.EC0)
        {
            Device (LSSD)
            {
                Name (_HID, EisaId ("LEN0111"))  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }
        }

        Method (LM01, 1, Serialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x01)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            Return (VARR) /* \_SB_.LM01.VARR */
        }

        Method (LM02, 1, Serialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            Return (VARR) /* \_SB_.LM02.VARR */
        }

        Method (LM03, 1, Serialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Return (VARR) /* \_SB_.LM03.VARR */
        }

        Method (LM04, 2, Serialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x01)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            VARR = (Arg1 & 0xFF)
        }

        Method (LM05, 2, Serialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            VARR = (Arg1 & 0xFFFF)
        }

        Method (LM06, 2, Serialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            VARR = (Arg1 & 0xFFFFFFFF)
        }

        Method (LM07, 1, Serialized)
        {
            Local0 = (Arg0 & 0xFFFF)
            OperationRegion (VARI, SystemIO, Local0, 0x01)
            Field (VARI, ByteAcc, Lock, Preserve)
            {
                VARR,   8
            }

            Return (VARR) /* \_SB_.LM07.VARR */
        }

        Method (LM08, 1, Serialized)
        {
            Local0 = (Arg0 & 0xFFFF)
            OperationRegion (VARJ, SystemIO, Local0, 0x02)
            Field (VARJ, WordAcc, Lock, Preserve)
            {
                VARR,   16
            }

            Return (VARR) /* \_SB_.LM08.VARR */
        }

        Method (LM09, 2, Serialized)
        {
            Local0 = (Arg0 & 0xFFFF)
            OperationRegion (VARK, SystemIO, Local0, 0x01)
            Field (VARK, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            VARR = (Arg1 & 0xFF)
        }

        Method (LM0A, 2, Serialized)
        {
            Local0 = (Arg0 & 0xFFFF)
            OperationRegion (VARL, SystemIO, Local0, 0x02)
            Field (VARL, WordAcc, Lock, Preserve)
            {
                VARR,   16
            }

            VARR = (Arg1 & 0xFFFF)
        }

        Method (LM0B, 4, Serialized)
        {
            Local0 = 0xE0000000
            Local0 += ((Arg0 & 0xFF) << 0x14)
            Local0 += ((Arg1 & 0x1F) << 0x0F)
            Local0 += ((Arg2 & 0x07) << 0x0C)
            Local0 += (Arg3 & 0x0FFF)
            Return (LM01 (Local0))
        }

        Method (LM0C, 4, Serialized)
        {
            Local0 = 0xE0000000
            Local0 += ((Arg0 & 0xFF) << 0x14)
            Local0 += ((Arg1 & 0x1F) << 0x0F)
            Local0 += ((Arg2 & 0x07) << 0x0C)
            Local0 += (Arg3 & 0x0FFF)
            Return (LM02 (Local0))
        }

        Method (LM0D, 4, Serialized)
        {
            Local0 = 0xE0000000
            Local0 += ((Arg0 & 0xFF) << 0x14)
            Local0 += ((Arg1 & 0x1F) << 0x0F)
            Local0 += ((Arg2 & 0x07) << 0x0C)
            Local0 += (Arg3 & 0x0FFF)
            Return (LM03 (Local0))
        }

        Method (LM0E, 5, Serialized)
        {
            Local0 = 0xE0000000
            Local0 += ((Arg0 & 0xFF) << 0x14)
            Local0 += ((Arg1 & 0x1F) << 0x0F)
            Local0 += ((Arg2 & 0x07) << 0x0C)
            Local0 += (Arg3 & 0x0FFF)
            LM04 (Local0, (Arg4 & 0xFF))
        }

        Method (LM0F, 5, Serialized)
        {
            Local0 = 0xE0000000
            Local0 += ((Arg0 & 0xFF) << 0x14)
            Local0 += ((Arg1 & 0x1F) << 0x0F)
            Local0 += ((Arg2 & 0x07) << 0x0C)
            Local0 += (Arg3 & 0x0FFF)
            LM05 (Local0, (Arg4 & 0xFFFF))
        }

        Method (LM10, 5, Serialized)
        {
            Local0 = 0xE0000000
            Local0 += ((Arg0 & 0xFF) << 0x14)
            Local0 += ((Arg1 & 0x1F) << 0x0F)
            Local0 += ((Arg2 & 0x07) << 0x0C)
            Local0 += (Arg3 & 0x0FFF)
            LM06 (Local0, (Arg4 & 0xFFFFFFFF))
        }

        Method (LM11, 2, Serialized)
        {
            Local0 = (Arg0 << 0x02)
            Local0 += 0xFED81500
            Local1 = LM03 (Local0)
            Local2 = (Arg1 & 0x01)
            If ((Local2 == 0x01))
            {
                Local1 |= 0x00400000
            }
            Else
            {
                Local1 &= 0xFFBFFFFF
            }

            LM06 (Local0, Local1)
        }

        Method (LM12, 1, Serialized)
        {
            Local0 = (Arg0 << 0x02)
            Local0 += 0xFED81500
            Local1 = LM03 (Local0)
            If (((Local1 && 0x00800000) == 0x01))
            {
                If (((Local1 & 0x00400000) == 0x00400000))
                {
                    Return (0x01)
                }
                Else
                {
                    Return (0x00)
                }
            }
            ElseIf (((Local1 & 0x00010000) == 0x00010000))
            {
                Return (0x01)
            }
            Else
            {
                Return (0x00)
            }
        }

        Method (LM13, 1, Serialized)
        {
            Return ((LM01 ((0xFED80700 + (Arg0 & 0xFF))) & 0xFF))
        }

        Method (LM14, 2, Serialized)
        {
            LM04 ((0xFED80700 + (Arg0 & 0xFF)), (Arg1 & 0xFF))
        }

        Method (LM15, 1, Serialized)
        {
            OperationRegion (VARE, SystemIO, 0x72, 0x02)
            Field (VARE, ByteAcc, Lock, Preserve)
            {
                EINP,   8, 
                EDAP,   8
            }

            EINP = (Arg0 & 0xFF)
            Return (EDAP) /* \_SB_.LM15.EDAP */
        }

        Method (LM16, 2, Serialized)
        {
            OperationRegion (VARE, SystemIO, 0x72, 0x02)
            Field (VARE, ByteAcc, Lock, Preserve)
            {
                EINP,   8, 
                EDAP,   8
            }

            EINP = (Arg0 & 0xFF)
            EDAP = (Arg1 & 0xFF)
        }

        Method (LM17, 1, Serialized)
        {
            LM09 (0x80, Arg0)
        }

        Method (LM18, 1, Serialized)
        {
            LM09 (0xB0, Arg0)
        }
    }

    Scope (\)
    {
        Name (HPDT, Package (0x09)
        {
            "LEGACYHP", 
            0x80000000, 
            0x80000000, 
            "NATIVEHP", 
            0x80000000, 
            0x80000000, 
            "THERMALX", 
            0x80000000, 
            0x80000000
        })
        Name (DDB0, 0x00)
        Name (DDB1, 0x00)
        Name (DDB2, 0x00)
    }

    Scope (_GPE)
    {
        Method (XL08, 0, NotSerialized)
        {
            TPST (0x3908)
            If ((TBEN == Zero)){}
            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
            Local0 = \_SB.PCI0.LPC0.EC0.HWAK
            RRBF = Local0
            If ((Local0 & 0x01)){}
            If ((Local0 & 0x02)){}
            If ((Local0 & 0x04))
            {
                Notify (\_SB.LID, 0x02) // Device Wake
            }

            If ((Local0 & 0x08))
            {
                Notify (\_SB.SLPB, 0x02) // Device Wake
            }

            If ((Local0 & 0x10))
            {
                Notify (\_SB.SLPB, 0x02) // Device Wake
            }

            If ((Local0 & 0x80))
            {
                Notify (\_SB.SLPB, 0x02) // Device Wake
            }

            \_SB.PCI0.LPC0.EC0.HWAK = 0x00
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x04)
    Name (UR2I, 0x03)
    Name (UR3I, 0x04)
    Name (UR4I, 0x0F)
    Name (IC0I, 0x0A)
    Name (IC1I, 0x0B)
    Name (IC2I, 0x04)
    Name (IC3I, 0x06)
    Name (IC4I, 0x0E)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
            I31E,   1, 
            I32E,   1, 
            I33E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
            UT4E,   1, 
            I30E,   1, 
                ,   1, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
                ,   1, 
            HFPE,   1, 
            HD0E,   1, 
            HD2E,   1, 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
            I31D,   1, 
            I32D,   1, 
            I33D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   1, 
            UT4D,   1, 
            I30D,   1, 
                ,   1, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            STD3,   1, 
                ,   1, 
            US4D,   1, 
            S03D,   1, 
            UT0O,   1, 
            UT1O,   1, 
            UT2O,   1, 
            UT3O,   1, 
            Offset (0x1C), 
            I30M,   1, 
            I31M,   1, 
            I32M,   1, 
            I33M,   1
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == 0x01))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (FUIO, 1, Serialized)
        {
            If ((IER0 == 0x01))
            {
                If ((WUR0 == Arg0))
                {
                    Return (0x00)
                }
            }

            If ((IER1 == 0x01))
            {
                If ((WUR1 == Arg0))
                {
                    Return (0x01)
                }
            }

            If ((IER2 == 0x01))
            {
                If ((WUR2 == Arg0))
                {
                    Return (0x02)
                }
            }

            If ((IER3 == 0x01))
            {
                If ((WUR3 == Arg0))
                {
                    Return (0x03)
                }
            }

            Return (0x0F)
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << 0x01)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << 0x01)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == 0x00))
                {
                    ADTD = 0x00
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x00))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (0x01 << Arg0)
            Local0 = (Arg0 << 0x01)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == 0x00))
                {
                    PG1A = One
                    ADTD = 0x00
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x00))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (HID0)
        {
            Name (_HID, "AMDI0063")  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HD0E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC13000,         // Address Base
                        0x00000200,         // Address Length
                        )
                    GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x00AB
                        }
                })
                Return (RBUF) /* \_SB_.HID0._CRS.RBUF */
            }
        }

        Device (HID2)
        {
            Name (_HID, "AMDI0063")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HD2E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC12000,         // Address Base
                        0x00000200,         // Address Length
                        )
                    GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x00AB
                        }
                })
                Return (RBUF) /* \_SB_.HID2._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }
        }

        Device (PPKG)
        {
            Name (_HID, "AMDI0052")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Method (MI2C, 3, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x00)
                {
                    Name (IIC0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, _Y09, Exclusive,
                            )
                    })
                    CreateWordField (IIC0, \_SB.MI2C._Y09._ADR, DAD0)  // _ADR: Address
                    CreateDWordField (IIC0, \_SB.MI2C._Y09._SPE, DSP0)  // _SPE: Speed
                    DAD0 = Arg1
                    DSP0 = Arg2
                    Return (IIC0) /* \_SB_.MI2C.IIC0 */
                }
                Case (0x01)
                {
                    Name (IIC1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CB",
                            0x00, ResourceConsumer, _Y0A, Exclusive,
                            )
                    })
                    CreateWordField (IIC1, \_SB.MI2C._Y0A._ADR, DAD1)  // _ADR: Address
                    CreateDWordField (IIC1, \_SB.MI2C._Y0A._SPE, DSP1)  // _SPE: Speed
                    DAD1 = Arg1
                    DSP1 = Arg2
                    Return (IIC1) /* \_SB_.MI2C.IIC1 */
                }
                Case (0x02)
                {
                    Name (IIC2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CC",
                            0x00, ResourceConsumer, _Y0B, Exclusive,
                            )
                    })
                    CreateWordField (IIC2, \_SB.MI2C._Y0B._ADR, DAD2)  // _ADR: Address
                    CreateDWordField (IIC2, \_SB.MI2C._Y0B._SPE, DSP2)  // _SPE: Speed
                    DAD2 = Arg1
                    DSP2 = Arg2
                    Return (IIC2) /* \_SB_.MI2C.IIC2 */
                }
                Case (0x03)
                {
                    Name (IIC3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CD",
                            0x00, ResourceConsumer, _Y0C, Exclusive,
                            )
                    })
                    CreateWordField (IIC3, \_SB.MI2C._Y0C._ADR, DAD3)  // _ADR: Address
                    CreateDWordField (IIC3, \_SB.MI2C._Y0C._SPE, DSP3)  // _SPE: Speed
                    DAD3 = Arg1
                    DSP3 = Arg2
                    Return (IIC3) /* \_SB_.MI2C.IIC3 */
                }
                Default
                {
                    Return (0x00)
                }

            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, _Y0D)
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.I2CA._CRS._Y0D._INT, IRQW)  // _INT: Interrupts
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (0x00)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (0x01)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC0D && IC0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, 0x00)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, 0x03)
                }
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, _Y0E)
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.I2CB._CRS._Y0E._INT, IRQW)  // _INT: Interrupts
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (0x00)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (0x01)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC1D && IC1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, 0x00)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, 0x03)
                }
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, _Y0F)
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.I2CC._CRS._Y0F._INT, IRQW)  // _INT: Interrupts
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (0x00)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (0x01)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC2D && IC2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, 0x00)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, 0x03)
                }
            }
        }
    }

    Scope (_SB.I2CA)
    {
        Device (TPNL)
        {
            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Name (HID2, 0x00)
            Name (EATX, 0x00)
            Name (EBTX, 0x00)
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.I2CA",
                    0x00, ResourceConsumer, _Y10, Exclusive,
                    )
            })
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, Exclusive, PullUp, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0020
                    }
            })
            CreateWordField (SBFB, \_SB.I2CA.TPNL._Y10._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.I2CA.TPNL._Y10._SPE, SPED)  // _SPE: Speed
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (((PNVD == 0x2A94) && (PNPD == 0xA819)))
                {
                    _HID = "GTCH7503"
                    HID2 = 0x01
                    BADR = 0x10
                    SPED = 0x00061A80
                    EATX = 0x01
                    Return (Zero)
                }

                If (((PNVD == 0x396E) && (PNPD == 0x415C)))
                {
                    _HID = "ELAN901C"
                    HID2 = 0x01
                    BADR = 0x10
                    SPED = 0x00061A80
                    EATX = 0x01
                    Return (Zero)
                }

                If ((PNVD == 0x04F3))
                {
                    _HID = "ELAN901C"
                    HID2 = 0x01
                    BADR = 0x10
                    SPED = 0x00061A80
                    EATX = 0x01
                    Return (Zero)
                }

                If (((PNVD == 0x1DA0) && (PNPD == 0x8001)))
                {
                    _HID = "PARA0818"
                    HID2 = 0x01
                    BADR = 0x24
                    SPED = 0x00061A80
                    EATX = 0x01
                    Return (Zero)
                }

                If (((PNVD == 0x29BD) && (PNPD == 0x9901)))
                {
                    _HID = "LXST2021"
                    HID2 = 0x01
                    BADR = 0x09
                    SPED = 0x00061A80
                    EATX = 0x01
                    Return (Zero)
                }

                If (((PNVD == 0x29BD) && (PNPD == 0x9902)))
                {
                    _HID = "LXST2021"
                    HID2 = 0x01
                    BADR = 0x09
                    SPED = 0x00061A80
                    EATX = 0x01
                    Return (Zero)
                }
            }

            Method (I2CM, 2, Serialized)
            {
                Name (IIC1, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, _Y11, Exclusive,
                        )
                })
                CreateWordField (IIC1, \_SB.I2CA.TPNL.I2CM._Y11._ADR, DAD0)  // _ADR: Address
                CreateDWordField (IIC1, \_SB.I2CA.TPNL.I2CM._Y11._SPE, DSP0)  // _SPE: Speed
                DAD0 = Arg0
                DSP0 = Arg1
                Return (IIC1) /* \_SB_.I2CA.TPNL.I2CM.IIC1 */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (ConcatenateResTemplate (I2CM (BADR, SPED), SBFG))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((PNVD == 0x00) || (PNPD == 0x00)))
                {
                    Return (0x00)
                }

                Return (0x0F)
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (0x01)
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (0x01)
                        {
                            Return (HID2) /* \_SB_.I2CA.TPNL.HID2 */
                        }
                        Default
                        {
                            Return (0x00)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.I2CB)
    {
        Device (TPDD)
        {
            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Name (HID2, 0x00)
            Name (EITX, 0x00)
            Name (ENTX, 0x00)
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.I2CB",
                    0x00, ResourceConsumer, _Y12, Exclusive,
                    )
            })
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0008
                    }
            })
            CreateWordField (SBFB, \_SB.I2CB.TPDD._Y12._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.I2CB.TPDD._Y12._SPE, SPED)  // _SPE: Speed
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (((TPVD == 0x06CB) && (TPPD == 0xCE67)))
                {
                    _HID = "SYNA8018"
                    HID2 = 0x20
                    BADR = 0x2C
                    SPED = 0x00061A80
                    EITX = 0x01
                    Return (Zero)
                }
                ElseIf (((TPVD == 0x06CB) && (TPPD == 0xCE68)))
                {
                    _HID = "SYNA8019"
                    HID2 = 0x20
                    BADR = 0x2C
                    SPED = 0x00061A80
                    EITX = 0x01
                    Return (Zero)
                }
                ElseIf (((TPVD == 0x06CB) && (TPPD == 0xCEC6)))
                {
                    _HID = "SYNA801A"
                    HID2 = 0x20
                    BADR = 0x2C
                    SPED = 0x00061A80
                    EITX = 0x01
                    Return (Zero)
                }
                ElseIf (((TPVD == 0x06CB) && (TPPD == 0xCEC7)))
                {
                    _HID = "SYNA801B"
                    HID2 = 0x20
                    BADR = 0x2C
                    SPED = 0x00061A80
                    EITX = 0x01
                    Return (Zero)
                }
                ElseIf (((TPVD == 0x04F3) && (TPPD == 0x3195)))
                {
                    _HID = "ELAN0678"
                    HID2 = 0x01
                    BADR = 0x15
                    SPED = 0x00061A80
                    EITX = 0x01
                    Return (Zero)
                }
                ElseIf (((TPVD == 0x04F3) && (TPPD == 0x3196)))
                {
                    _HID = "ELAN0679"
                    HID2 = 0x01
                    BADR = 0x15
                    SPED = 0x00061A80
                    EITX = 0x01
                    Return (Zero)
                }
                ElseIf (((TPVD == 0x04F3) && (TPPD == 0x320B)))
                {
                    _HID = "ELAN0688"
                    HID2 = 0x01
                    BADR = 0x15
                    SPED = 0x00061A80
                    EITX = 0x01
                    Return (Zero)
                }
                ElseIf (((TPVD == 0x04F3) && (TPPD == 0x320C)))
                {
                    _HID = "ELAN0689"
                    HID2 = 0x01
                    BADR = 0x15
                    SPED = 0x00061A80
                    EITX = 0x01
                    Return (Zero)
                }
            }

            Method (I2CM, 2, Serialized)
            {
                Name (IIC2, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, _Y13, Exclusive,
                        )
                })
                CreateWordField (IIC2, \_SB.I2CB.TPDD.I2CM._Y13._ADR, DAD0)  // _ADR: Address
                CreateDWordField (IIC2, \_SB.I2CB.TPDD.I2CM._Y13._SPE, DSP0)  // _SPE: Speed
                DAD0 = Arg0
                DSP0 = Arg1
                Return (IIC2) /* \_SB_.I2CB.TPDD.I2CM.IIC2 */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (ConcatenateResTemplate (I2CM (BADR, SPED), SBFG))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPVD == 0x00) || (TPPD == 0x00)))
                {
                    Return (0x00)
                }

                Return (0x0F)
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((SPSU == 0x04))
                {
                    Sleep (0x05DC)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (0x01)
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (0x01)
                        {
                            Return (HID2) /* \_SB_.I2CB.TPDD.HID2 */
                        }
                        Default
                        {
                            Return (0x00)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.I2CB)
    {
        Device (NFC1)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            Name (_HID, "NXP1001")  // _HID: Hardware ID
            Name (_DDN, "NXP NFC For Win10")  // _DDN: DOS Device Name
            Name (_UID, 0x01)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0029, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveHigh, Exclusive, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0054
                        }
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0005
                        }
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0068
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.NFC1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TPOS >= 0x60))
                {
                    If (((LM12 (0x69) == 0x00) && (NFCF == 0x00)))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }
        }
    }

    Scope (_SB.PCI0.GPP6.PXSX)
    {
        Method (MTDS, 0, Serialized)
        {
            Name (SAR1, Package (0x1F)
            {
                0x4D, 
                0x54, 
                0x44, 
                0x53, 
                0x01, 
                0x00, 
                0x02, 
                0x01, 
                0x1E, 
                0x1A, 
                0x1A, 
                0x1A, 
                0x1A, 
                0x1A, 
                0x1A, 
                0x1A, 
                0x1A, 
                0x1A, 
                0x1A, 
                0x02, 
                0x1E, 
                0x1A, 
                0x1A, 
                0x1A, 
                0x1A, 
                0x1A, 
                0x1A, 
                0x1A, 
                0x1A, 
                0x1A, 
                0x1A
            })
            Return (SAR1) /* \_SB_.PCI0.GPP6.PXSX.MTDS.SAR1 */
        }

        Method (MTGS, 0, Serialized)
        {
            Name (GEO1, Package (0x1C)
            {
                0x4D, 
                0x54, 
                0x47, 
                0x53, 
                0x01, 
                0x00, 
                0x03, 
                0x01, 
                0x1E, 
                0x00, 
                0x1A, 
                0x00, 
                0x1A, 
                0x00, 
                0x02, 
                0x1E, 
                0x00, 
                0x1A, 
                0x00, 
                0x1A, 
                0x00, 
                0x03, 
                0x1E, 
                0x00, 
                0x1A, 
                0x00, 
                0x1A, 
                0x00
            })
            Return (GEO1) /* \_SB_.PCI0.GPP6.PXSX.MTGS.GEO1 */
        }

        Method (MTCL, 0, Serialized)
        {
            Name (CL6G, Package (0x0C)
            {
                0x4D, 
                0x54, 
                0x43, 
                0x4C, 
                0x01, 
                0x01, 
                0xC1, 
                0xCC, 
                0x80, 
                0x18, 
                0x00, 
                0x00
            })
            Return (CL6G) /* \_SB_.PCI0.GPP6.PXSX.MTCL.CL6G */
        }
    }

    Scope (_SB.PCI0.GPP6.PXSX)
    {
        Name (PWLS, 0x00)
        Name (PWL0, Buffer (0x1E)
        {
            /* 0000 */  0x01, 0x01, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,  // ........
            /* 0008 */  0x3C, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34,  // <4444444
            /* 0010 */  0x34, 0x34, 0x34, 0x3C, 0x34, 0x34, 0x34, 0x34,  // 444<4444
            /* 0018 */  0x34, 0x34, 0x34, 0x34, 0x34, 0x34               // 444444
        })
        Name (PWL1, Buffer (0x1E)
        {
            /* 0000 */  0x01, 0x01, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,  // ........
            /* 0008 */  0x3C, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34,  // <4444444
            /* 0010 */  0x34, 0x34, 0x34, 0x3C, 0x34, 0x34, 0x34, 0x34,  // 444<4444
            /* 0018 */  0x34, 0x34, 0x34, 0x34, 0x34, 0x34               // 444444
        })
        Method (QPWL, 0, Serialized)
        {
            If ((PWLS == 0x00))
            {
                Return (PWL0) /* \_SB_.PCI0.GPP6.PXSX.PWL0 */
            }
            Else
            {
                Return (PWL1) /* \_SB_.PCI0.GPP6.PXSX.PWL1 */
            }
        }

        Method (QRO, 0, Serialized)
        {
            Name (RO, Buffer (0x13)
            {
                /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00                                 // ...
            })
            Return (RO) /* \_SB_.PCI0.GPP6.PXSX.QRO_.RO__ */
        }

        Method (QSGB, 0, Serialized)
        {
            Name (SGB, Buffer (0x20)
            {
                /* 0000 */  0xFF, 0xFF, 0xFF, 0xF7, 0xDD, 0xEF, 0xFF, 0xFE,  // ........
                /* 0008 */  0xFF, 0xFF, 0xFE, 0xEF, 0xFD, 0xEF, 0xFF, 0xF7,  // ........
                /* 0010 */  0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xC7,  // ........
                /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
            })
            Return (SGB) /* \_SB_.PCI0.GPP6.PXSX.QSGB.SGB_ */
        }
    }

    Scope (_SB.PCI0.LPC0.EC0.HKEY)
    {
        Name (FNTT, Package (0x1D)
        {
            Package (0x0C)
            {
                0x2E, 
                0x07, 
                0x06, 
                0x08, 
                0x20, 
                0x22, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x2C, 
                0x03
            }, 

            Package (0x0C)
            {
                0x4650, 
                0x5DC0, 
                0x6D60, 
                0x0A, 
                0x1999, 
                0x2900, 
                0x42, 
                0x2666, 
                0x0185, 
                0x0330, 
                0xF92B, 
                0x56
            }, 

            Package (0x0C)
            {
                0x36B0, 
                0x3E80, 
                0x4650, 
                0x0A, 
                0x1999, 
                0x2700, 
                0x42, 
                0x2666, 
                0x01D4, 
                0x02FD, 
                0xF914, 
                0x46
            }, 

            Package (0x0C)
            {
                0x59D8, 
                0x6D60, 
                0x7D00, 
                0x1E, 
                0x1999, 
                0x2A80, 
                0x42, 
                0x2666, 
                0x018A, 
                0x0221, 
                0x0138, 
                0x60
            }, 

            Package (0x0C)
            {
                0x4650, 
                0x5DC0, 
                0x6D60, 
                0x0A, 
                0x1999, 
                0x2900, 
                0x42, 
                0x2666, 
                0x0185, 
                0x0330, 
                0xF92B, 
                0x56
            }, 

            Package (0x0C)
            {
                0x36B0, 
                0x3E80, 
                0x4650, 
                0x0A, 
                0x1999, 
                0x2700, 
                0x42, 
                0x2666, 
                0x01D4, 
                0x02FD, 
                0xF914, 
                0x46
            }, 

            Package (0x0C)
            {
                0x4E20, 
                0x6978, 
                0x7D00, 
                0x0A, 
                0x1999, 
                0x2900, 
                0x42, 
                0x2666, 
                0x01F3, 
                0x0298, 
                0xF63E, 
                0x56
            }, 

            Package (0x0C)
            {
                0x3A98, 
                0x4650, 
                0x4E20, 
                0x0A, 
                0x1999, 
                0x2700, 
                0x42, 
                0x2666, 
                0x023C, 
                0x014F, 
                0xFDDE, 
                0x46
            }, 

            Package (0x0C)
            {
                0x61A8, 
                0x7D00, 
                0x9088, 
                0x1E, 
                0x1999, 
                0x2B00, 
                0x42, 
                0x2666, 
                0x01C4, 
                0x03BC, 
                0xEEB2, 
                0x60
            }, 

            Package (0x0C)
            {
                0x4E20, 
                0x6978, 
                0x7D00, 
                0x0A, 
                0x1999, 
                0x2900, 
                0x42, 
                0x2666, 
                0x01F3, 
                0x0298, 
                0xF63E, 
                0x56
            }, 

            Package (0x0C)
            {
                0x3A98, 
                0x4650, 
                0x4E20, 
                0x0A, 
                0x1999, 
                0x2700, 
                0x42, 
                0x2666, 
                0x023C, 
                0x014F, 
                0xFDDE, 
                0x46
            }, 

            Package (0x0C)
            {
                0x55F0, 
                0x7530, 
                0x7D00, 
                0x0A, 
                0x1999, 
                0x2980, 
                0x42, 
                0x2666, 
                0x01F0, 
                0x0226, 
                0xFA1B, 
                0x56
            }, 

            Package (0x0C)
            {
                0x3E80, 
                0x4E20, 
                0x55F0, 
                0x0A, 
                0x1999, 
                0x2700, 
                0x42, 
                0x2666, 
                0x020C, 
                0x02DD, 
                0xF381, 
                0x46
            }, 

            Package (0x0C)
            {
                0x7918, 
                0xA028, 
                0xC738, 
                0x1E, 
                0x1999, 
                0x2D00, 
                0x42, 
                0x2666, 
                0x01D4, 
                0x029D, 
                0xF78D, 
                0x60
            }, 

            Package (0x0C)
            {
                0x55F0, 
                0x7530, 
                0x7D00, 
                0x0A, 
                0x1999, 
                0x2980, 
                0x42, 
                0x2666, 
                0x01F0, 
                0x0226, 
                0xFA1B, 
                0x56
            }, 

            Package (0x0C)
            {
                0x6D60, 
                0x8CA0, 
                0x9C40, 
                0x1E, 
                0x1999, 
                0x2B00, 
                0x42, 
                0x2666, 
                0x01D4, 
                0x029D, 
                0xF78D, 
                0x60
            }, 

            Package (0x0C)
            {
                0x3E80, 
                0x4E20, 
                0x55F0, 
                0x0A, 
                0x1999, 
                0x2700, 
                0x42, 
                0x2666, 
                0x020C, 
                0x02DD, 
                0xF381, 
                0x46
            }, 

            Package (0x0C)
            {
                0x5208, 
                0x6590, 
                0x7530, 
                0x0A, 
                0x1999, 
                0x2900, 
                0x42, 
                0x2666, 
                0x018A, 
                0x0221, 
                0x0138, 
                0x56
            }, 

            Package (0x0C)
            {
                0x3E80, 
                0x3E80, 
                0x3E80, 
                0x0A, 
                0x1999, 
                0x2800, 
                0x42, 
                0x2666, 
                0x01D4, 
                0x02FD, 
                0xF914, 
                0x46
            }, 

            Package (0x0C)
            {
                0x6D60, 
                0x7D00, 
                0x9C40, 
                0x1E, 
                0x1999, 
                0x2C80, 
                0x42, 
                0x2666, 
                0x018A, 
                0x0221, 
                0x0138, 
                0x60
            }, 

            Package (0x0C)
            {
                0x5208, 
                0x6590, 
                0x7530, 
                0x0A, 
                0x1999, 
                0x2900, 
                0x42, 
                0x2666, 
                0x018A, 
                0x0221, 
                0x0138, 
                0x56
            }, 

            Package (0x0C)
            {
                0x5DC0, 
                0x7D00, 
                0x8CA0, 
                0x1E, 
                0x1999, 
                0x2B00, 
                0x42, 
                0x2666, 
                0x01D4, 
                0x029D, 
                0xF78D, 
                0x60
            }, 

            Package (0x0C)
            {
                0x3E80, 
                0x3E80, 
                0x3E80, 
                0x0A, 
                0x1999, 
                0x2800, 
                0x42, 
                0x2666, 
                0x01D4, 
                0x02FD, 
                0xF914, 
                0x46
            }, 

            Package (0x0C)
            {
                0x36B0, 
                0x3E80, 
                0x4650, 
                0x0A, 
                0x1999, 
                0x2900, 
                0x42, 
                0x2666, 
                0x0185, 
                0x0330, 
                0xF92B, 
                0x56
            }, 

            Package (0x0C)
            {
                0x3A98, 
                0x4650, 
                0x4E20, 
                0x0A, 
                0x1999, 
                0x2900, 
                0x42, 
                0x2666, 
                0x01F3, 
                0x0298, 
                0xF63E, 
                0x56
            }, 

            Package (0x0C)
            {
                0x4650, 
                0x61A8, 
                0x7D00, 
                0x1E, 
                0x1999, 
                0x2B00, 
                0x42, 
                0x2666, 
                0x01D4, 
                0x029D, 
                0xF78D, 
                0x60
            }, 

            Package (0x0C)
            {
                0x4650, 
                0x61A8, 
                0x7D00, 
                0x0A, 
                0x1999, 
                0x2980, 
                0x42, 
                0x2666, 
                0x01F0, 
                0x0226, 
                0xFA1B, 
                0x56
            }, 

            Package (0x0C)
            {
                0x4650, 
                0x61A8, 
                0x7530, 
                0x0A, 
                0x1999, 
                0x2900, 
                0x42, 
                0x2666, 
                0x018A, 
                0x0221, 
                0x0138, 
                0x56
            }, 

            Package (0x0C)
            {
                0x4650, 
                0x61A8, 
                0x7530, 
                0x1E, 
                0x1999, 
                0x2B00, 
                0x42, 
                0x2666, 
                0x01D4, 
                0x029D, 
                0xF78D, 
                0x60
            }
        })
        Method (FNTS, 1, NotSerialized)
        {
            Local6 = FNTT /* \_SB_.PCI0.LPC0.EC0_.HKEY.FNTT */
            Local0 = SizeOf (Local6 [0x00])
            Local1 = ((Local1 = (Local0 * 0x05)) + 0x02)
            Name (XX11, Buffer (Local1){})
            CreateWordField (XX11, 0x00, SSZE)
            SSZE = Local1
            Local2 = 0x01
            Local3 = 0x00
            Local4 = 0x00
            While ((Local3 < Local0))
            {
                XX11 [Local2 += 0x01] = DerefOf (DerefOf (Local6 [
                    0x00]) [Local3])
                Local4 = DerefOf (DerefOf (Local6 [Arg0]) [Local3])
                XX11 [Local2 += 0x01] = (Local4 & 0xFF)
                XX11 [Local2 += 0x01] = ((Local4 & 0xFF00) >> 
                    0x08)
                XX11 [Local2 += 0x01] = ((Local4 & 0x00FF0000) >> 
                    0x10)
                XX11 [Local2 += 0x01] = ((Local4 & 0xFF000000) >> 
                    0x18)
                Local3 += 0x01
            }

            ALIB (0x0C, XX11)
        }

        Method (FNID, 3, Serialized)
        {
            Local0 = Arg0
            If ((ToInteger (Arg1) == 0x03))
            {
                Switch (ToInteger (Local0))
                {
                    Case (0x04)
                    {
                        Local1 = 0x37
                    }
                    Case (0x02)
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x03)
                            {
                                Local1 = 0x3A
                            }
                            Case (0x05)
                            {
                                Local1 = 0x3B
                            }
                            Case (0x07)
                            {
                                Local1 = 0x3C
                            }
                            Case (0x08)
                            {
                                Local1 = 0x3D
                            }

                        }
                    }
                    Case (0x01)
                    {
                        Local1 = 0x38
                    }
                    Case (0x03)
                    {
                        Local1 = 0x39
                    }
                    Case (0x08)
                    {
                        Local1 = 0x36
                    }
                    Case (0x05)
                    {
                        Local1 = 0x34
                    }
                    Case (0x07)
                    {
                        Local1 = 0x35
                    }
                    Case (0x04)
                    {
                        Local1 = 0x37
                    }
                    Case (0x09)
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x05)
                            {
                                Local1 = 0x34
                            }
                            Case (0x07)
                            {
                                Local1 = 0x35
                            }

                        }
                    }

                }
            }
            ElseIf ((ToInteger (Arg1) == 0x02))
            {
                Switch (ToInteger (Local0))
                {
                    Case (0x04)
                    {
                        Local1 = 0x1A
                    }
                    Case (0x02)
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x03)
                            {
                                Local1 = 0x2C
                            }
                            Case (0x05)
                            {
                                Local1 = 0x2E
                            }
                            Case (0x07)
                            {
                                Local1 = 0x30
                            }
                            Case (0x08)
                            {
                                Local1 = 0x32
                            }

                        }
                    }
                    Case (0x01)
                    {
                        Local1 = 0x1C
                    }
                    Case (0x03)
                    {
                        Local1 = 0x1E
                    }
                    Case (0x08)
                    {
                        Local1 = 0x18
                    }
                    Case (0x05)
                    {
                        Local1 = 0x14
                    }
                    Case (0x07)
                    {
                        Local1 = 0x16
                    }
                    Case (0x04)
                    {
                        Local1 = 0x1A
                    }
                    Case (0x09)
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x05)
                            {
                                Local1 = 0x14
                            }
                            Case (0x07)
                            {
                                Local1 = 0x16
                            }

                        }
                    }

                }
            }
            ElseIf ((ToInteger (Arg1) == 0x01))
            {
                Switch (ToInteger (Local0))
                {
                    Case (0x04)
                    {
                        Local1 = 0x10
                    }
                    Case (0x02)
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x03)
                            {
                                Local1 = 0x28
                            }
                            Case (0x05)
                            {
                                Local1 = 0x26
                            }
                            Case (0x07)
                            {
                                Local1 = 0x2A
                            }

                        }
                    }
                    Case (0x01)
                    {
                        Local1 = 0x12
                    }
                    Case (0x03)
                    {
                        Local1 = 0x0C
                    }
                    Case (0x05)
                    {
                        Local1 = 0x0A
                    }
                    Case (0x07)
                    {
                        Local1 = 0x0E
                    }
                    Case (0x04)
                    {
                        Local1 = 0x10
                    }
                    Case (0x09)
                    {
                        Local1 = 0x0A
                    }

                }
            }
            Else
            {
                Switch (ToInteger (Local0))
                {
                    Case (0x04)
                    {
                        Local1 = 0x06
                    }
                    Case (0x02)
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x03)
                            {
                                Local1 = 0x22
                            }
                            Case (0x05)
                            {
                                Local1 = 0x20
                            }
                            Case (0x07)
                            {
                                Local1 = 0x24
                            }

                        }
                    }
                    Case (0x01)
                    {
                        Local1 = 0x08
                    }
                    Case (0x03)
                    {
                        Local1 = 0x02
                    }
                    Case (0x05)
                    {
                        Local1 = 0x00
                    }
                    Case (0x07)
                    {
                        Local1 = 0x04
                    }
                    Case (0x04)
                    {
                        Local1 = 0x06
                    }
                    Case (0x09)
                    {
                        Local1 = 0x00
                    }

                }
            }

            TTCI = Local1
        }

        Name (MSCB, 0x00)
        Method (DYTC, 1, Serialized)
        {
            Local0 = Arg0
            DYPR = Arg0
            Local1 = 0x00
            Switch (ToInteger ((Local0 & 0x01FF)))
            {
                Case (0x00)
                {
                    Local1 = 0x0100
                    Local1 |= 0x80000000
                    Local1 |= 0x00
                    Local1 |= 0x01
                }
                Case (0x01)
                {
                    Local2 = ((Local0 >> 0x0C) & 0x0F)
                    Local3 = ((Local0 >> 0x10) & 0x0F)
                    Local4 = ((Local0 >> 0x14) & 0x01)
                    If ((((FCAP >> Local2) & One) == Zero))
                    {
                        Local1 = 0x08
                        Return (Local1)
                    }

                    Switch (ToInteger (Local2))
                    {
                        Case (0x01)
                        {
                            If ((Local3 != 0x0F))
                            {
                                Local1 = 0x0A
                                Return (Local1)
                            }

                            If ((Local4 == 0x00))
                            {
                                If ((0x01 == VCQL))
                                {
                                    VCQL = 0x00
                                }
                            }
                            ElseIf (((VPSC == 0x01) && ((SPSC == 0x07) || (SPSC == 
                                0x08))))
                            {
                                VCQL = 0x01
                            }
                            Else
                            {
                                VCQL = 0x00
                                CQLS = 0x00
                            }
                        }
                        Case (0x04)
                        {
                            If ((Local3 != 0x0F))
                            {
                                Local1 = 0x0A
                                Return (Local1)
                            }

                            If ((Local4 == 0x00))
                            {
                                VSTP = 0x00
                            }
                            Else
                            {
                                VSTP = 0x01
                            }
                        }
                        Case (0x07)
                        {
                            If (((Local3 <= 0x07) && (Local3 >= 0x01)))
                            {
                                If ((Local4 != 0x01))
                                {
                                    Local1 = 0x0A
                                    Return (Local1)
                                }
                            }
                            ElseIf ((Local3 == 0x0F))
                            {
                                If ((Local4 != 0x00))
                                {
                                    Local1 = 0x0A
                                    Return (Local1)
                                }
                            }
                            Else
                            {
                                Local1 = 0x0A
                                Return (Local1)
                            }

                            If ((Local4 == 0x00))
                            {
                                VADM = 0x00
                                SADM = 0x00
                            }
                            Else
                            {
                                VADM = 0x01
                                SADM = Local3
                            }
                        }
                        Case (0x09)
                        {
                            If (((MTID != 0x01) && (MTID != 0x02)))
                            {
                                Local1 = 0x02
                                Return (Local1)
                            }

                            If ((Local3 != 0x0F))
                            {
                                Local1 = 0x0A
                                Return (Local1)
                            }

                            If ((Local4 == 0x00))
                            {
                                VTMS = 0x00
                            }
                            Else
                            {
                                VTMS = 0x01
                            }
                        }
                        Case (0x0A)
                        {
                            If ((Local3 != 0x0F))
                            {
                                Local1 = 0x0A
                                Return (Local1)
                            }

                            If ((Local4 == 0x00))
                            {
                                VDLS = 0x00
                            }
                            Else
                            {
                                VDLS = 0x01
                            }
                        }
                        Case (0x0C)
                        {
                            If ((Local3 != 0x0F))
                            {
                                Local1 = 0x0A
                                Return (Local1)
                            }

                            If ((Local4 == 0x00))
                            {
                                VMSC = 0x00
                            }
                            Else
                            {
                                VMSC = 0x01
                            }
                        }
                        Case (0x0D)
                        {
                            If (((Local3 <= 0x08) && (Local3 >= 0x01)))
                            {
                                If ((Local4 != 0x01))
                                {
                                    Local1 = 0x0A
                                    Return (Local1)
                                }
                            }
                            ElseIf ((Local3 == 0x0F))
                            {
                                If ((Local4 != 0x00))
                                {
                                    Local1 = 0x0A
                                    Return (Local1)
                                }
                            }
                            Else
                            {
                                Local1 = 0x0A
                                Return (Local1)
                            }

                            If ((Local4 == 0x00))
                            {
                                VPSC = 0x00
                                SPSC = 0x00
                            }
                            Else
                            {
                                VPSC = 0x01
                                SPSC = Local3
                                If (((SPSC != 0x07) && (SPSC != 0x08)))
                                {
                                    VCQL = 0x00
                                    CQLS = 0x00
                                }
                            }

                            ^^^^^FAN0.CRNF ()
                        }
                        Case (0x00)
                        {
                            If ((Local3 != 0x0F))
                            {
                                Local1 = 0x0A
                                Return (Local1)
                            }
                        }
                        Default
                        {
                            Local1 = 0x02
                            Return (Local1)
                        }

                    }

                    If ((MTID == 0x02))
                    {
                        If ((VSTP == 0x01))
                        {
                            CICF = 0x04
                            FNID (0x01, 0x03, 0x00)
                            FNTS (0x16)
                        }
                        ElseIf ((VMSC == 0x01))
                        {
                            CICF = 0x0C
                            FNID (0x04, 0x03, 0x00)
                        }
                        ElseIf ((VDLS == 0x01))
                        {
                            CICF = 0x0A
                            Local7 = SPSC /* \SPSC */
                            If ((VTMS == 0x01))
                            {
                                Switch (Local7)
                                {
                                    Case (Package (0x02)
                                        {
                                            0x07, 
                                            0x08
                                        }

)
                                    {
                                        FNID (0x02, 0x03, 0x08)
                                    }
                                    Case (Package (0x02)
                                        {
                                            0x03, 
                                            0x04
                                        }

)
                                    {
                                        FNID (0x02, 0x03, 0x05)
                                    }
                                    Case (Package (0x01)
                                        {
                                            0x02
                                        }

)
                                    {
                                        FNID (0x02, 0x03, 0x03)
                                    }
                                    Case (Package (0x02)
                                        {
                                            0x05, 
                                            0x06
                                        }

)
                                    {
                                        FNID (0x02, 0x03, 0x07)
                                    }

                                }
                            }
                            Else
                            {
                                Switch (Local7)
                                {
                                    Case (Package (0x02)
                                        {
                                            0x07, 
                                            0x08
                                        }

)
                                    {
                                        FNID (0x02, 0x03, 0x07)
                                    }
                                    Case (Package (0x03)
                                        {
                                            0x02, 
                                            0x03, 
                                            0x04
                                        }

)
                                    {
                                        FNID (0x02, 0x03, 0x03)
                                    }
                                    Case (Package (0x02)
                                        {
                                            0x05, 
                                            0x06
                                        }

)
                                    {
                                        FNID (0x02, 0x03, 0x05)
                                    }

                                }
                            }

                            If ((FDLS == 0x01))
                            {
                                FNTS (0x16)
                            }
                        }
                        ElseIf ((VCQL == 0x01))
                        {
                            CICF = 0x01
                            FNTS (0x11)
                        }
                        ElseIf ((VADM == 0x01))
                        {
                            CICF = 0x07
                            Local7 = SADM /* \SADM */
                            If ((VTMS == 0x01))
                            {
                                FNID (0x09, 0x03, 0x00)
                                FNTS (0x1C)
                            }
                            Else
                            {
                                FNID (0x09, 0x03, 0x00)
                                FNTS (0x1B)
                            }
                        }
                        ElseIf ((VPSC == 0x01))
                        {
                            CICF = 0x0D
                            Local7 = SPSC /* \SPSC */
                            Switch (Local7)
                            {
                                Case (Package (0x02)
                                    {
                                        0x07, 
                                        0x08
                                    }

)
                                {
                                    If ((VTMS == 0x01))
                                    {
                                        FNID (0x08, 0x03, 0x00)
                                        FNTS (0x13)
                                    }
                                    Else
                                    {
                                        FNID (0x07, 0x03, 0x00)
                                        FNTS (0x15)
                                    }
                                }
                                Case (Package (0x01)
                                    {
                                        0x02
                                    }

)
                                {
                                    FNID (0x03, 0x03, 0x00)
                                    FNTS (0x12)
                                }
                                Case (Package (0x02)
                                    {
                                        0x03, 
                                        0x04
                                    }

)
                                {
                                    If ((VTMS == 0x01))
                                    {
                                        FNID (0x05, 0x03, 0x00)
                                        FNTS (0x14)
                                    }
                                    Else
                                    {
                                        FNID (0x03, 0x03, 0x00)
                                        FNTS (0x12)
                                    }
                                }
                                Default
                                {
                                    If ((VTMS == 0x01))
                                    {
                                        FNID (0x07, 0x03, 0x00)
                                        FNTS (0x15)
                                    }
                                    Else
                                    {
                                        FNID (0x05, 0x03, 0x00)
                                        FNTS (0x14)
                                    }
                                }

                            }
                        }
                        Else
                        {
                            CICF = 0x00
                            If ((VTMS == 0x01))
                            {
                                FNID (0x07, 0x03, 0x00)
                                FNTS (0x15)
                            }
                            Else
                            {
                                FNID (0x05, 0x03, 0x00)
                                FNTS (0x14)
                            }
                        }
                    }
                    ElseIf ((MTID == 0x01))
                    {
                        If ((VSTP == 0x01))
                        {
                            CICF = 0x04
                            FNID (0x01, 0x02, 0x00)
                            FNTS (0x10)
                        }
                        ElseIf ((VMSC == 0x01))
                        {
                            CICF = 0x0C
                            FNID (0x04, 0x02, 0x00)
                        }
                        ElseIf ((VDLS == 0x01))
                        {
                            CICF = 0x0A
                            Local7 = SPSC /* \SPSC */
                            If ((VTMS == 0x01))
                            {
                                Switch (Local7)
                                {
                                    Case (Package (0x02)
                                        {
                                            0x07, 
                                            0x08
                                        }

)
                                    {
                                        FNID (0x02, 0x02, 0x08)
                                    }
                                    Case (Package (0x02)
                                        {
                                            0x03, 
                                            0x04
                                        }

)
                                    {
                                        FNID (0x02, 0x02, 0x05)
                                    }
                                    Case (Package (0x01)
                                        {
                                            0x02
                                        }

)
                                    {
                                        FNID (0x02, 0x02, 0x03)
                                    }
                                    Case (Package (0x02)
                                        {
                                            0x05, 
                                            0x06
                                        }

)
                                    {
                                        FNID (0x02, 0x02, 0x07)
                                    }

                                }
                            }
                            Else
                            {
                                Switch (Local7)
                                {
                                    Case (Package (0x02)
                                        {
                                            0x07, 
                                            0x08
                                        }

)
                                    {
                                        FNID (0x02, 0x02, 0x07)
                                    }
                                    Case (Package (0x03)
                                        {
                                            0x02, 
                                            0x03, 
                                            0x04
                                        }

)
                                    {
                                        FNID (0x02, 0x02, 0x03)
                                    }
                                    Case (Package (0x02)
                                        {
                                            0x05, 
                                            0x06
                                        }

)
                                    {
                                        FNID (0x02, 0x02, 0x05)
                                    }

                                }
                            }

                            If ((FDLS == 0x01))
                            {
                                FNTS (0x10)
                            }
                        }
                        ElseIf ((VCQL == 0x01))
                        {
                            CICF = 0x01
                            FNTS (0x0B)
                        }
                        ElseIf ((VADM == 0x01))
                        {
                            CICF = 0x07
                            Local7 = SADM /* \SADM */
                            If ((VTMS == 0x01))
                            {
                                FNID (0x09, 0x02, 0x00)
                                FNTS (0x19)
                            }
                            Else
                            {
                                FNID (0x09, 0x02, 0x00)
                                FNTS (0x1A)
                            }
                        }
                        ElseIf ((VPSC == 0x01))
                        {
                            CICF = 0x0D
                            Local7 = SPSC /* \SPSC */
                            Switch (Local7)
                            {
                                Case (Package (0x02)
                                    {
                                        0x07, 
                                        0x08
                                    }

)
                                {
                                    If ((VTMS == 0x01))
                                    {
                                        FNID (0x08, 0x02, 0x00)
                                        FNTS (0x0D)
                                    }
                                    Else
                                    {
                                        FNID (0x07, 0x02, 0x00)
                                        FNTS (0x0F)
                                    }
                                }
                                Case (Package (0x01)
                                    {
                                        0x02
                                    }

)
                                {
                                    FNID (0x03, 0x02, 0x00)
                                    FNTS (0x0C)
                                }
                                Case (Package (0x02)
                                    {
                                        0x03, 
                                        0x04
                                    }

)
                                {
                                    If ((VTMS == 0x01))
                                    {
                                        FNID (0x05, 0x02, 0x00)
                                        FNTS (0x0E)
                                    }
                                    Else
                                    {
                                        FNID (0x03, 0x02, 0x00)
                                        FNTS (0x0C)
                                    }
                                }
                                Default
                                {
                                    If ((VTMS == 0x01))
                                    {
                                        FNID (0x07, 0x02, 0x00)
                                        FNTS (0x0F)
                                    }
                                    Else
                                    {
                                        FNID (0x05, 0x02, 0x00)
                                        FNTS (0x0E)
                                    }
                                }

                            }
                        }
                        Else
                        {
                            CICF = 0x00
                            If ((VTMS == 0x01))
                            {
                                FNID (0x07, 0x02, 0x00)
                                FNTS (0x0F)
                            }
                            Else
                            {
                                FNID (0x05, 0x02, 0x00)
                                FNTS (0x0E)
                            }
                        }
                    }
                    ElseIf ((LM12 (0x04) == 0x01))
                    {
                        If ((VSTP == 0x01))
                        {
                            CICF = 0x04
                            FNID (0x01, 0x01, 0x00)
                            FNTS (0x0A)
                        }
                        ElseIf ((VMSC == 0x01))
                        {
                            CICF = 0x0C
                            FNID (0x04, 0x01, 0x00)
                        }
                        ElseIf ((VDLS == 0x01))
                        {
                            CICF = 0x0A
                            Local7 = SPSC /* \SPSC */
                            Switch (Local7)
                            {
                                Case (Package (0x02)
                                    {
                                        0x07, 
                                        0x08
                                    }

)
                                {
                                    FNID (0x02, 0x01, 0x07)
                                }
                                Case (Package (0x03)
                                    {
                                        0x02, 
                                        0x03, 
                                        0x04
                                    }

)
                                {
                                    FNID (0x02, 0x01, 0x03)
                                }
                                Case (Package (0x02)
                                    {
                                        0x05, 
                                        0x06
                                    }

)
                                {
                                    FNID (0x02, 0x01, 0x05)
                                }

                            }

                            If ((FDLS == 0x01))
                            {
                                FNTS (0x0A)
                            }
                        }
                        ElseIf ((VCQL == 0x01))
                        {
                            CICF = 0x01
                            FNTS (0x06)
                        }
                        ElseIf ((VADM == 0x01))
                        {
                            CICF = 0x07
                            Local7 = SADM /* \SADM */
                            FNID (0x09, 0x01, 0x00)
                            FNTS (0x18)
                        }
                        ElseIf ((VPSC == 0x01))
                        {
                            CICF = 0x0D
                            Local7 = SPSC /* \SPSC */
                            Switch (Local7)
                            {
                                Case (Package (0x02)
                                    {
                                        0x07, 
                                        0x08
                                    }

)
                                {
                                    FNID (0x07, 0x01, 0x00)
                                    FNTS (0x08)
                                }
                                Case (Package (0x03)
                                    {
                                        0x02, 
                                        0x03, 
                                        0x04
                                    }

)
                                {
                                    FNID (0x03, 0x01, 0x00)
                                    FNTS (0x07)
                                }
                                Default
                                {
                                    FNID (0x05, 0x01, 0x00)
                                    FNTS (0x09)
                                }

                            }
                        }
                        Else
                        {
                            CICF = 0x00
                            FNID (0x05, 0x01, 0x00)
                            FNTS (0x09)
                        }
                    }
                    ElseIf ((VSTP == 0x01))
                    {
                        CICF = 0x04
                        FNID (0x01, 0x00, 0x00)
                        FNTS (0x05)
                    }
                    ElseIf ((VMSC == 0x01))
                    {
                        CICF = 0x0C
                        FNID (0x04, 0x00, 0x00)
                    }
                    ElseIf ((VDLS == 0x01))
                    {
                        CICF = 0x0A
                        Local7 = SPSC /* \SPSC */
                        Switch (Local7)
                        {
                            Case (Package (0x02)
                                {
                                    0x07, 
                                    0x08
                                }

)
                            {
                                FNID (0x02, 0x00, 0x07)
                            }
                            Case (Package (0x03)
                                {
                                    0x02, 
                                    0x03, 
                                    0x04
                                }

)
                            {
                                FNID (0x02, 0x00, 0x03)
                            }
                            Case (Package (0x02)
                                {
                                    0x05, 
                                    0x06
                                }

)
                            {
                                FNID (0x02, 0x00, 0x05)
                            }

                        }

                        If ((FDLS == 0x01))
                        {
                            FNTS (0x05)
                        }
                    }
                    ElseIf ((VCQL == 0x01))
                    {
                        CICF = 0x01
                        FNTS (0x01)
                    }
                    ElseIf ((VADM == 0x01))
                    {
                        CICF = 0x07
                        Local7 = SADM /* \SADM */
                        FNID (0x09, 0x00, 0x00)
                        FNTS (0x17)
                    }
                    ElseIf ((VPSC == 0x01))
                    {
                        CICF = 0x0D
                        Local7 = SPSC /* \SPSC */
                        Switch (Local7)
                        {
                            Case (Package (0x02)
                                {
                                    0x07, 
                                    0x08
                                }

)
                            {
                                FNID (0x07, 0x00, 0x00)
                                FNTS (0x03)
                            }
                            Case (Package (0x03)
                                {
                                    0x02, 
                                    0x03, 
                                    0x04
                                }

)
                            {
                                FNID (0x03, 0x00, 0x00)
                                FNTS (0x02)
                            }
                            Default
                            {
                                FNID (0x05, 0x00, 0x00)
                                FNTS (0x04)
                            }

                        }
                    }
                    Else
                    {
                        CICF = 0x00
                        FNID (0x05, 0x00, 0x00)
                        FNTS (0x04)
                    }

                    Local5 = VSTD /* \VSTD */
                    Local5 |= (VCQL << 0x01)
                    Local5 |= (VSTP << 0x04)
                    Local5 |= (VADM << 0x07)
                    Local5 |= (VTMS << 0x09)
                    Local5 |= (VDLS << 0x0A)
                    Local5 |= (VMSC << 0x0C)
                    Local5 |= (VPSC << 0x0D)
                    Local1 = (CICF << 0x08)
                    If ((CICF == 0x03))
                    {
                        CICM = SMYH /* \SMYH */
                    }
                    ElseIf ((CICF == 0x0B))
                    {
                        CICM = SMMC /* \SMMC */
                    }
                    ElseIf ((CICF == 0x0D))
                    {
                        CICM = SPSC /* \SPSC */
                    }
                    ElseIf ((CICF == 0x0F))
                    {
                        CICM = SAMT /* \SAMT */
                    }
                    ElseIf ((CICF == 0x07))
                    {
                        CICM = SADM /* \SADM */
                    }
                    Else
                    {
                        CICM = 0x0F
                    }

                    Local1 |= (CICM << 0x0C)
                    Local1 |= (Local5 << 0x10)
                    Local1 |= 0x01
                    If (DHKC)
                    {
                        MHKQ (0x6032)
                    }
                }
                Case (0x08)
                {
                    Local1 = (VMMC << 0x08)
                    Local1 |= (SMMC << 0x0C)
                    Local1 |= 0x00020000
                    Local1 |= 0x01
                }
                Case (0x02)
                {
                    Local5 = VSTD /* \VSTD */
                    Local5 |= (VCQL << 0x01)
                    Local5 |= (VSTP << 0x04)
                    Local5 |= (VADM << 0x07)
                    Local5 |= (VTMS << 0x09)
                    Local5 |= (VDLS << 0x0A)
                    Local5 |= (VMSC << 0x0C)
                    Local5 |= (VPSC << 0x0D)
                    Local1 = (CICF << 0x08)
                    If ((CICF == 0x03))
                    {
                        CICM = SMYH /* \SMYH */
                    }
                    ElseIf ((CICF == 0x0B))
                    {
                        CICM = SMMC /* \SMMC */
                    }
                    ElseIf ((CICF == 0x0D))
                    {
                        CICM = SPSC /* \SPSC */
                    }
                    ElseIf ((CICF == 0x0F))
                    {
                        CICM = SAMT /* \SAMT */
                    }
                    ElseIf ((CICF == 0x07))
                    {
                        CICM = SADM /* \SADM */
                    }
                    Else
                    {
                        CICM = 0x0F
                    }

                    Local1 |= (CICM << 0x0C)
                    Local1 |= (Local5 << 0x10)
                    Local1 |= 0x01
                }
                Case (0x09)
                {
                    MSCB = 0x01
                    Local1 = 0x00
                    Local1 |= 0x01
                }
                Case (0x0A)
                {
                    If (((MTID == 0x01) || (MTID == 0x02)))
                    {
                        Local1 = 0x0100
                    }
                    Else
                    {
                        Local1 = 0x00
                    }

                    Local1 |= 0x01
                }
                Case (0x03)
                {
                    Local1 = (FCAP << 0x10)
                    Local1 |= 0x01
                }
                Case (0x04)
                {
                    Local1 = (MYHC << 0x10)
                    Local1 |= 0x01
                }
                Case (0x06)
                {
                    Local2 = ((Local0 >> 0x09) & 0x0F)
                    If ((Local2 != 0x01))
                    {
                        Local1 = (MMCC << 0x10)
                    }
                    Else
                    {
                        Local1 = 0x0200
                    }

                    Local1 |= 0x01
                }
                Case (0x05)
                {
                    If (0xFFFFFFFF)
                    {
                        Local1 = 0x0500
                        Local1 |= 0x10E00000
                    }

                    Local1 |= 0x01
                }
                Case (0x0B)
                {
                    Local1 = (FADM << 0x08)
                    Local1 |= 0x01
                }
                Case (0x0100)
                {
                    Local1 = 0x10010000
                    Local1 |= 0x01
                }
                Case (0x01FF)
                {
                    VCQL = 0x00
                    VTIO = 0x00
                    VMYH = 0x00
                    VSTP = 0x00
                    VLCM = 0x00
                    VDGM = 0x00
                    VADM = 0x00
                    VDMC = 0x00
                    VTMS = 0x00
                    VDLS = 0x00
                    VMMC = 0x00
                    VMSC = 0x00
                    VPSC = 0x00
                    VCSC = 0x00
                    VAMT = 0x00
                    SMYH = 0x00
                    SMMC = 0x00
                    SPSC = 0x00
                    SAMT = 0x00
                    SADM = 0x00
                    CICF = 0x00
                    CICM = 0x0F
                    Local5 = VSTD /* \VSTD */
                    Local5 |= (VCQL << 0x01)
                    Local5 |= (VSTP << 0x04)
                    Local5 |= (VADM << 0x07)
                    Local5 |= (VTMS << 0x09)
                    Local5 |= (VDLS << 0x0A)
                    Local5 |= (VMSC << 0x0C)
                    Local5 |= (VPSC << 0x0D)
                    Local1 = (CICF << 0x08)
                    Local1 |= (CICM << 0x0C)
                    Local1 |= (Local5 << 0x10)
                    Local1 |= 0x01
                }
                Default
                {
                    Local1 = 0x04
                }

            }

            Return (Local1)
        }
    }

    Scope (_SB.PCI0.LPC0.EC0)
    {
        Device (ITSD)
        {
            Name (_HID, EisaId ("LEN0100"))  // _HID: Hardware ID
            If (((MTID == 0x01) || (MTID == 0x02)))
            {
                _HID = 0x0201AE30
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_TZ)
    {
        ThermalZone (THM0)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (TCRT) /* \TCRT */
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (H8DR)
                {
                    Local0 = \_SB.PCI0.LPC0.EC0.TMP0
                    Local1 = \_SB.PCI0.LPC0.EC0.TSL2
                    Local2 = \_SB.PCI0.LPC0.EC0.TSL3
                }
                Else
                {
                    Local0 = RBEC (0x78)
                    Local1 = (RBEC (0x8A) & 0x7F)
                    Local2 = (RBEC (0x8B) & 0x7F)
                }

                If ((Local0 == 0x80))
                {
                    Local0 = 0x30
                }

                If (Local2)
                {
                    TSDL ()
                    Return (TCRT) /* \TCRT */
                }

                If (!\_SB.PCI0.LPC0.EC0.HKEY.DHKC)
                {
                    If (Local1)
                    {
                        TSDL ()
                        Return (TCRT) /* \TCRT */
                    }
                }

                Return (_C2K (Local0))
            }
        }

        Method (_C2K, 1, Serialized)
        {
            Local0 = ((Arg0 * 0x0A) + 0x0AAC)
            If ((Local0 <= 0x0AAC))
            {
                Local0 = 0x0C8C
            }
            ElseIf ((Local0 > 0x0FAC))
            {
                Local0 = 0x0C8C
            }

            Return (Local0)
        }
    }

    Scope (_SB.PCI0.LPC0.EC0)
    {
        Method (_Q40, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Notify (\_TZ.THM0, 0x80) // Thermal Status Change
            If (H8DR)
            {
                Local1 = TSL2 /* \_SB_.PCI0.LPC0.EC0_.TSL2 */
                Local2 = TSL1 /* \_SB_.PCI0.LPC0.EC0_.TSL1 */
            }
            Else
            {
                Local1 = (RBEC (0x8A) & 0x7F)
                Local2 = (RBEC (0x89) & 0x7F)
            }

            If ((Local2 & 0x76))
            {
                ^HKEY.DYTC (0x001F4001)
            }
            Else
            {
                ^HKEY.DYTC (0x000F4001)
            }

            If ((^HKEY.DHKC && Local1))
            {
                ^HKEY.MHKQ (0x6022)
            }

            If (!VIGD)
            {
                VTHR ()
            }
        }
    }

    Scope (_SB)
    {
        Device (FAN0)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Name (_STR, Unicode ("CPU fan"))  // _STR: Description String
            Name (LRPM, 0x00)
            Name (URPM, 0x2710)
            Name (GRAN, 0x64)
            Name (CRPM, 0x00)
            Name (TFST, Package (0x03)
            {
                0x00, 
                0x01, 
                0xFFFFFFFF
            })
            Method (SRPM, 1, Serialized)
            {
                CRPM = (Arg0 * GRAN) /* \_SB_.FAN0.GRAN */
            }

            Method (GRPM, 0, Serialized)
            {
                Local0 = 0x00
                If (((SPSC >= 0x05) && (SPSC <= 0x06)))
                {
                    Local0 = CRPM /* \_SB_.FAN0.CRPM */
                }

                Return (Local0)
            }

            Method (_FST, 0, NotSerialized)  // _FST: Fan Status
            {
                TFST [0x02] = GRPM ()
                Return (TFST) /* \_SB_.FAN0.TFST */
            }

            Method (CRNF, 0, Serialized)
            {
                Local0 = GRPM ()
                If (((Local0 > URPM) || (Local0 < LRPM)))
                {
                    Notify (FAN0, 0x80) // Status Change
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("a7611840-99fe-41ae-a488-35c75926c8eb") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Return (Buffer (0x01)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Case (0x01)
                        {
                            Return (GRAN) /* \_SB_.FAN0.GRAN */
                        }
                        Case (0x02)
                        {
                            LRPM = DerefOf (Arg3 [0x00])
                            URPM = DerefOf (Arg3 [0x01])
                            Return (0x00)
                        }
                        Case (0x03)
                        {
                            Return (Package (0x04)
                            {
                                0x03E8, 
                                0x07D0, 
                                0x1A2C, 
                                0x2710
                            })
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 00000114
[008h 0008 001h]                    Revision : 06
[009h 0009 001h]                    Checksum : 78
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-R23  "
[018h 0024 004h]                Oem Revision : 00001290
[01Ch 0028 004h]             Asl Compiler ID : "PTEC"
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 004h]                FACS Address : 77757000
[028h 0040 004h]                DSDT Address : 71369000
[02Ch 0044 001h]                       Model : 01
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B0
[034h 0052 001h]           ACPI Enable Value : A0
[035h 0053 001h]          ACPI Disable Value : A1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00000400
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000404
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00000800
[04Ch 0076 004h]      PM Timer Block Address : 00000408
[050h 0080 004h]          GPE0 Block Address : 00000420
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 08
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0064
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0000
[066h 0102 002h]          Cache Flush Stride : 0000
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0013
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 0020C5AD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 1

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 01 [Byte Access:8]
[078h 0120 008h]                     Address : 00000000000000B0

[080h 0128 001h]        Value to cause reset : CD
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 03
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 0000000071369000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 02 [Word Access:16]
[098h 0152 008h]                     Address : 0000000000000400

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 01 [SystemIO]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 02 [Word Access:16]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000000404

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 01 [SystemIO]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 02 [Word Access:16]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 0000000000000800

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000000408

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 40
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 03 [DWord Access:32]
[0E0h 0224 008h]                     Address : 0000000000000420

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 01 [SystemIO]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 03 [DWord Access:32]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 01 [SystemIO]
[0F5h 0245 001h]                   Bit Width : 08
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248 008h]                     Address : 0000000000000000

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 01 [SystemIO]
[101h 0257 001h]                   Bit Width : 08
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260 008h]                     Address : 0000000000000000

[10Ch 0268 008h]               Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 78 4C 45 4E 4F 56 4F  // FACP.....xLENOVO
    0010: 54 50 2D 52 32 33 20 20 90 12 00 00 50 54 45 43  // TP-R23  ....PTEC
    0020: 02 00 00 00 00 70 75 77 00 90 36 71 01 02 09 00  // .....puw..6q....
    0030: B0 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 00 08 00 00 08 04 00 00  // ................
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 64 00 E9 03 00 00 00 00 01 03 0D 00 32 13 00 00  // d...........2...
    0070: AD C5 20 00 01 08 00 01 B0 00 00 00 00 00 00 00  // .. .............
    0080: CD 00 00 03 00 00 00 00 00 00 00 00 00 90 36 71  // ..............6q
    0090: 00 00 00 00 01 20 00 02 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 00 08 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 40 00 03  // . ...........@..
    00E0: 20 04 00 00 00 00 00 00 01 00 00 03 00 00 00 00  //  ...............
    00F0: 00 00 00 00 01 08 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 01 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 777595F4
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 01
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 F4 95 75 77 00 00 00 00  // FACS@.....uw....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000034
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 14
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-R23  "
[018h 0024 004h]                Oem Revision : 00001290
[01Ch 0028 004h]             Asl Compiler ID : "PTEC"
[020h 0032 004h]       Asl Compiler Revision : 00000002


[024h 0036 002h]               Subtable Type : 0000
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]    FPDT Boot Record Address : 0000000076772000

Raw Table Data: Length 52 (0x34)

    0000: 46 50 44 54 34 00 00 00 01 14 4C 45 4E 4F 56 4F  // FPDT4.....LENOVO
    0010: 54 50 2D 52 32 33 20 20 90 12 00 00 50 54 45 43  // TP-R23  ....PTEC
    0020: 02 00 00 00 00 00 10 01 00 00 00 00 00 20 77 76  // ............. wv
    0030: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 17
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-R23  "
[018h 0024 004h]                Oem Revision : 00001290
[01Ch 0028 004h]             Asl Compiler ID : "PTEC"
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 004h]           Hardware Block ID : 43538210

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 08
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 02
[035h 0053 002h]         Minimum Clock Ticks : 0014
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 17 4C 45 4E 4F 56 4F  // HPET8.....LENOVO
    0010: 54 50 2D 52 32 33 20 20 90 12 00 00 50 54 45 43  // TP-R23  ....PTEC
    0020: 02 00 00 00 10 82 53 43 00 08 00 00 00 00 D0 FE  // ......SC........
    0030: 00 00 00 00 02 14 00 00                          // ........


IVRS
----
[000h 0000 004h]                   Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004 004h]                Table Length : 000001E4
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : 1B
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-R23  "
[018h 0024 004h]                Oem Revision : 00001290
[01Ch 0028 004h]             Asl Compiler ID : "PTEC"
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 004h]         Virtualization Info : 00203043
[028h 0040 008h]                    Reserved : 0000000000000000

[030h 0048 001h]               Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050 002h]                      Length : 0048
[034h 0052 002h]                    DeviceId : 0002
[036h 0054 002h]           Capability Offset : 0040
[038h 0056 008h]                Base Address : 00000000FE000000
[040h 0064 002h]           PCI Segment Group : 0000
[042h 0066 002h]         Virtualization Info : 0000
[044h 0068 004h]           Feature Reporting : 80048F6E

[048h 0072 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073 002h]                   Device ID : 0008
[04Bh 0075 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076 001h]               Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077 002h]                   Device ID : FFFE
[04Fh 0079 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081 002h]                   Device ID : FF00
[053h 0083 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084 001h]                    Reserved : 00
[055h 0085 002h]       Source Used Device ID : 00A5
[057h 0087 001h]                    Reserved : 00

[058h 0088 001h]               Subtable Type : 04 [Device Entry: End of Range]
[059h 0089 002h]                   Device ID : FFFF
[05Bh 0091 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[05Dh 0093 002h]                   Device ID : 0000
[05Fh 0095 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[060h 0096 001h]               Subtable Type : 48 [Device Entry: Special Device]
[061h 0097 002h]                   Device ID : 0000
[063h 0099 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[064h 0100 001h]                      Handle : 00
[065h 0101 002h]       Source Used Device ID : 00A0
[067h 0103 001h]                     Variety : 02

[068h 0104 001h]               Subtable Type : 48 [Device Entry: Special Device]
[069h 0105 002h]                   Device ID : 0000
[06Bh 0107 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[06Ch 0108 001h]                      Handle : 20
[06Dh 0109 002h]       Source Used Device ID : 00A0
[06Fh 0111 001h]                     Variety : 01

[070h 0112 001h]               Subtable Type : 48 [Device Entry: Special Device]
[071h 0113 002h]                   Device ID : 0000
[073h 0115 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[074h 0116 001h]                      Handle : 21
[075h 0117 002h]       Source Used Device ID : 0001
[077h 0119 001h]                     Variety : 01

[078h 0120 001h]               Subtable Type : 11 [Hardware Definition Block (IVHD)]
[079h 0121 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[07Ah 0122 002h]                      Length : 0058
[07Ch 0124 002h]                    DeviceId : 0002
[07Eh 0126 002h]           Capability Offset : 0040
[080h 0128 008h]                Base Address : 00000000FE000000
[088h 0136 002h]           PCI Segment Group : 0000
[08Ah 0138 002h]         Virtualization Info : 0000
[08Ch 0140 004h]                  Attributes : 00040200
[090h 0144 008h]                   EFR Image : 246577EFA2254AFA
[098h 0152 008h]                    Reserved : 0000000000000000

[0A0h 0160 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[0A1h 0161 002h]                   Device ID : 0008
[0A3h 0163 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0A5h 0165 002h]                   Device ID : FFFE
[0A7h 0167 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A8h 0168 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A9h 0169 002h]                   Device ID : FF00
[0ABh 0171 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0ACh 0172 001h]                    Reserved : 00
[0ADh 0173 002h]       Source Used Device ID : 00A5
[0AFh 0175 001h]                    Reserved : 00

[0B0h 0176 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0B1h 0177 002h]                   Device ID : FFFF
[0B3h 0179 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B4h 0180 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[0B5h 0181 002h]                   Device ID : 0000
[0B7h 0183 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B8h 0184 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185 002h]                   Device ID : 0000
[0BBh 0187 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0BCh 0188 001h]                      Handle : 00
[0BDh 0189 002h]       Source Used Device ID : 00A0
[0BFh 0191 001h]                     Variety : 02

[0C0h 0192 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193 002h]                   Device ID : 0000
[0C3h 0195 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0C4h 0196 001h]                      Handle : 20
[0C5h 0197 002h]       Source Used Device ID : 00A0
[0C7h 0199 001h]                     Variety : 01

[0C8h 0200 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C9h 0201 002h]                   Device ID : 0000
[0CBh 0203 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0CCh 0204 001h]                      Handle : 21
[0CDh 0205 002h]       Source Used Device ID : 0001
[0CFh 0207 001h]                     Variety : 01

[0D0h 0208 001h]               Subtable Type : 21 [Memory Definition Block (IVMD)]
[0D1h 0209 001h]       Flags (decoded below) : 08
                                       Unity : 0
                                    Readable : 0
                                   Writeable : 0
                             Exclusion Range : 1
[0D2h 0210 002h]                      Length : 0020
[0D4h 0212 002h]                    DeviceId : 0300
[0D6h 0214 002h]              Auxiliary Data : 0000
[0D8h 0216 008h]                    Reserved : 0000000000000000
[0E0h 0224 008h]               Start Address : 000000007132F000
[0E8h 0232 008h]               Memory Length : 0000000000026000

[0F0h 0240 001h]               Subtable Type : 40 [Hardware Definition Block - Mixed Format (IVHD)]
[0F1h 0241 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[0F2h 0242 002h]                      Length : 00D4
[0F4h 0244 002h]                    DeviceId : 0002
[0F6h 0246 002h]           Capability Offset : 0040
[0F8h 0248 008h]                Base Address : 00000000FE000000
[100h 0256 002h]           PCI Segment Group : 0000
[102h 0258 002h]         Virtualization Info : 0000
[104h 0260 004h]                  Attributes : 00040200
[108h 0264 008h]                   EFR Image : 246577EFA2254AFA
[110h 0272 008h]                    Reserved : 0000000000000000

[118h 0280 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[119h 0281 002h]                   Device ID : 0008
[11Bh 0283 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[11Ch 0284 001h]               Subtable Type : 04 [Device Entry: End of Range]
[11Dh 0285 002h]                   Device ID : FFFE
[11Fh 0287 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[120h 0288 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[121h 0289 002h]                   Device ID : FF00
[123h 0291 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[124h 0292 001h]                    Reserved : 00
[125h 0293 002h]       Source Used Device ID : 00A5
[127h 0295 001h]                    Reserved : 00

[128h 0296 001h]               Subtable Type : 04 [Device Entry: End of Range]
[129h 0297 002h]                   Device ID : FFFF
[12Bh 0299 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[12Ch 0300 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[12Dh 0301 002h]                   Device ID : 0000
[12Fh 0303 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[130h 0304 001h]               Subtable Type : 48 [Device Entry: Special Device]
[131h 0305 002h]                   Device ID : 0000
[133h 0307 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[134h 0308 001h]                      Handle : 00
[135h 0309 002h]       Source Used Device ID : 00A0
[137h 0311 001h]                     Variety : 02

[138h 0312 001h]               Subtable Type : 48 [Device Entry: Special Device]
[139h 0313 002h]                   Device ID : 0000
[13Bh 0315 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[13Ch 0316 001h]                      Handle : 20
[13Dh 0317 002h]       Source Used Device ID : 00A0
[13Fh 0319 001h]                     Variety : 01

[140h 0320 001h]               Subtable Type : 48 [Device Entry: Special Device]
[141h 0321 002h]                   Device ID : 0000
[143h 0323 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[144h 0324 001h]                      Handle : 21
[145h 0325 002h]       Source Used Device ID : 0001
[147h 0327 001h]                     Variety : 01

[148h 0328 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[149h 0329 002h]                   Device ID : 00A5
[14Bh 0331 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[14Ch 0332 008h]                    ACPI HID : "AMDI0020"
[154h 0340 008h]                    ACPI CID : 0000000000000000
[15Ch 0348 001h]                  UID Format : 02
[15Dh 0349 001h]                  UID Length : 09
[15Eh 0350 009h]                         UID : "\_SB.FUR0"

[167h 0359 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[168h 0360 002h]                   Device ID : 00A5
[16Ah 0362 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[16Bh 0363 008h]                    ACPI HID : "AMDI0020"
[173h 0371 008h]                    ACPI CID : 0000000000000000
[17Bh 0379 001h]                  UID Format : 02
[17Ch 0380 001h]                  UID Length : 09
[17Dh 0381 009h]                         UID : "\_SB.FUR1"

[186h 0390 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[187h 0391 002h]                   Device ID : 00A5
[189h 0393 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[18Ah 0394 008h]                    ACPI HID : "AMDI0020"
[192h 0402 008h]                    ACPI CID : 0000000000000000
[19Ah 0410 001h]                  UID Format : 02
[19Bh 0411 001h]                  UID Length : 09
[19Ch 0412 009h]                         UID : "\_SB.FUR2"

[1A5h 0421 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[1A6h 0422 002h]                   Device ID : 00A5
[1A8h 0424 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[1A9h 0425 008h]                    ACPI HID : "AMDI0020"
[1B1h 0433 008h]                    ACPI CID : 0000000000000000
[1B9h 0441 001h]                  UID Format : 02
[1BAh 0442 001h]                  UID Length : 09
[1BBh 0443 009h]                         UID : "\_SB.FUR3"

**** Unknown IVRS subtable type 0x51

Raw Table Data: Length 484 (0x1E4)

    0000: 49 56 52 53 E4 01 00 00 02 1B 4C 45 4E 4F 56 4F  // IVRS......LENOVO
    0010: 54 50 2D 52 32 33 20 20 90 12 00 00 50 54 45 43  // TP-R23  ....PTEC
    0020: 02 00 00 00 43 30 20 00 00 00 00 00 00 00 00 00  // ....C0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 00 FE 00 00 00 00  // ..H...@.........
    0040: 00 00 00 00 6E 8F 04 80 03 08 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 20 A0 00 01  // H.......H... ...
    0070: 48 00 00 00 21 01 00 01 11 B0 58 00 02 00 40 00  // H...!.....X...@.
    0080: 00 00 00 FE 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0090: FA 4A 25 A2 EF 77 65 24 00 00 00 00 00 00 00 00  // .J%..we$........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A5 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 20 A0 00 01 48 00 00 00 21 01 00 01  // H... ...H...!...
    00D0: 21 08 20 00 00 03 00 00 00 00 00 00 00 00 00 00  // !. .............
    00E0: 00 F0 32 71 00 00 00 00 00 60 02 00 00 00 00 00  // ..2q.....`......
    00F0: 40 B0 D4 00 02 00 40 00 00 00 00 FE 00 00 00 00  // @.....@.........
    0100: 00 00 00 00 00 02 04 00 FA 4A 25 A2 EF 77 65 24  // .........J%..we$
    0110: 00 00 00 00 00 00 00 00 03 08 00 00 04 FE FF 00  // ................
    0120: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0130: 48 00 00 00 00 A0 00 02 48 00 00 D7 20 A0 00 01  // H.......H... ...
    0140: 48 00 00 00 21 01 00 01 F0 A5 00 40 41 4D 44 49  // H...!......@AMDI
    0150: 30 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F  // 0020..........\_
    0160: 53 42 2E 46 55 52 30 F0 A5 00 40 41 4D 44 49 30  // SB.FUR0...@AMDI0
    0170: 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53  // 020..........\_S
    0180: 42 2E 46 55 52 31 F0 A5 00 40 41 4D 44 49 30 30  // B.FUR1...@AMDI00
    0190: 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42  // 20..........\_SB
    01A0: 2E 46 55 52 32 F0 A5 00 40 41 4D 44 49 30 30 32  // .FUR2...@AMDI002
    01B0: 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42 2E  // 0..........\_SB.
    01C0: 46 55 52 33 51 08 20 00 00 03 00 00 00 00 00 00  // FUR3Q. .........
    01D0: 00 00 00 00 00 F0 32 71 00 00 00 00 00 60 02 00  // ......2q.....`..
    01E0: 00 00 00 00                                      // ....


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 5C
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-R23  "
[018h 0024 004h]                Oem Revision : 00001290
[01Ch 0028 004h]             Asl Compiler ID : "PTEC"
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000E0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : FF
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 5C 4C 45 4E 4F 56 4F  // MCFG<....\LENOVO
    0010: 54 50 2D 52 32 33 20 20 90 12 00 00 50 54 45 43  // TP-R23  ....PTEC
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


MSDM
----
[000h 0000 004h]                   Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004 004h]                Table Length : 00000055
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 60
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-R23  "
[018h 0024 004h]                Oem Revision : 00001290
[01Ch 0028 004h]             Asl Compiler ID : "PTEC"
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 031h] Software Licensing Structure : 4D 53 44 4D 55 00 00 00 03 60 4C 45 4E 4F 56 4F /* MSDMU....`LENOVO */\
/* 034h 0052  16 */                            54 50 2D 52 32 33 20 20 90 12 00 00 50 54 45 43 /* TP-R23  ....PTEC */\
/* 044h 0068  16 */                            02 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 /* ................ */\
/* 054h 0084   1 */                            00                                              /* . */\

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 60 4C 45 4E 4F 56 4F  // MSDMU....`LENOVO
    0010: 54 50 2D 52 32 33 20 20 90 12 00 00 50 54 45 43  // TP-R23  ....PTEC
    0020: 02 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 54 52 4E 4D 42 2D 51 56  // ........TRNMB-QV
    0040: 46 48 44 2D 38 46 38 56 48 2D 37 32 50 56 34 2D  // FHD-8F8VH-72PV4-
    0050: 32 4B 43 32 54                                   // 2KC2T


SBST
----
[000h 0000 004h]                   Signature : "SBST"    [Smart Battery Specification Table]
[004h 0004 004h]                Table Length : 00000030
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 28
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-R23  "
[018h 0024 004h]                Oem Revision : 00001290
[01Ch 0028 004h]             Asl Compiler ID : "PTEC"
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 004h]               Warning Level : 00000000
[028h 0040 004h]                   Low Level : 00000000
[02Ch 0044 004h]              Critical Level : 00000000

Raw Table Data: Length 48 (0x30)

    0000: 53 42 53 54 30 00 00 00 01 28 4C 45 4E 4F 56 4F  // SBST0....(LENOVO
    0010: 54 50 2D 52 32 33 20 20 90 12 00 00 50 54 45 43  // TP-R23  ....PTEC
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "ACDC", 0x00000001)
{
    Scope (\_SB)
    {
        Device (ACDC)
        {
            Name (_HID, "ACPI000E" /* Time and Alarm Device */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                GpioInt (Edge, ActiveLow, SharedAndWake, PullUp, 0x0BB8,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0034
                    }
            })
            OperationRegion (CMOP, SystemMemory, 0xFED81D00, 0x0100)
            Field (CMOP, DWordAcc, NoLock, Preserve)
            {
                ATVE,   32, 
                AETP,   32, 
                ATED,   1, 
                ATWP,   1, 
                Offset (0x10), 
                DTVE,   32, 
                DETP,   32, 
                DTED,   1, 
                DTWP,   1, 
                Offset (0x20), 
                BUSY,   1, 
                Offset (0x21), 
                ATEE,   1, 
                DTEE,   1
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                ATEE = One
                DTEE = One
            }

            Method (AINT, 0, NotSerialized)
            {
                ATEE = One
            }

            Method (DINT, 0, NotSerialized)
            {
                DTEE = One
            }

            Method (_GCP, 0, NotSerialized)  // _GCP: Get Capabilities
            {
                Return (0xA7)
            }

            Method (_STP, 2, NotSerialized)  // _STP: Set Expired Timer Wake Policy
            {
                If ((Arg0 == 0x00))
                {
                    AETP = Arg1
                }
                Else
                {
                    DETP = Arg1
                }

                Return (0x00)
            }

            Method (_TIP, 1, NotSerialized)  // _TIP: Expired Timer Wake Policy
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = AETP /* \_SB_.ACDC.AETP */
                }
                Else
                {
                    Local0 = DETP /* \_SB_.ACDC.DETP */
                }

                Return (Local0)
            }

            Method (_STV, 2, NotSerialized)  // _STV: Set Timer Value
            {
                If ((Arg0 == 0x00))
                {
                    AINT ()
                    ATVE = Arg1
                }
                Else
                {
                    DINT ()
                    DTVE = Arg1
                }

                Return (0x00)
            }

            Method (_TIV, 1, NotSerialized)  // _TIV: Timer Values
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = ATVE /* \_SB_.ACDC.ATVE */
                }
                Else
                {
                    Local0 = DTVE /* \_SB_.ACDC.DTVE */
                }

                Return (Local0)
            }

            Method (_GWS, 1, NotSerialized)  // _GWS: Get Wake Status
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = (ATWP << 0x01)
                    Local0 |= ATED /* \_SB_.ACDC.ATED */
                }
                Else
                {
                    Local0 = (DTWP << 0x01)
                    Local0 |= DTED /* \_SB_.ACDC.DTED */
                }

                Return (Local0)
            }

            Method (_CWS, 1, NotSerialized)  // _CWS: Clear Wake Alarm Status
            {
                If ((Arg0 == 0x00))
                {
                    ATWP = 0x01
                }
                Else
                {
                    DTWP = 0x01
                }

                Return (0x00)
            }

            OperationRegion (PM00, SystemMemory, 0xFED80300, 0x0100)
            Field (PM00, AnyAcc, NoLock, Preserve)
            {
                Offset (0x56), 
                RCTL,   16
            }

            OperationRegion (RRTC, SystemIO, 0x72, 0x02)
            Field (RRTC, ByteAcc, NoLock, Preserve)
            {
                RTCI,   8, 
                RTCD,   8
            }

            OperationRegion (CMOM, SystemMemory, 0xFED80700, 0x0100)
            Field (CMOM, ByteAcc, NoLock, Preserve)
            {
                SECR,   8, 
                SECA,   8, 
                MINR,   8, 
                MINA,   8, 
                HONR,   8, 
                HONA,   8, 
                DYWR,   8, 
                DYMR,   8, 
                MONR,   8, 
                YARR,   8, 
                RTRA,   8, 
                RTRB,   8, 
                RTRC,   8, 
                RTDA,   8, 
                Offset (0x32), 
                RTAC,   8, 
                Offset (0x48), 
                RTCC,   8, 
                Offset (0x50), 
                ERAP,   8, 
                Offset (0x53), 
                ERDP,   8, 
                Offset (0x7E), 
                RTTC,   8, 
                RTRE,   8
            }

            Name (TZLI, 0xFF)
            Name (TZVL, 0xFF)
            Name (TZVH, 0xFF)
            Name (LIVR, 0xFF)
            Name (RBUF, Buffer (0x10)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Mutex (RTCL, 0x00)
            Method (_GRT, 0, Serialized)  // _GRT: Get Real Time
            {
                CreateWordField (RBUF, 0x00, YEAW)
                CreateByteField (RBUF, 0x02, MONB)
                CreateByteField (RBUF, 0x03, DAYB)
                CreateByteField (RBUF, 0x04, HOUB)
                CreateByteField (RBUF, 0x05, MINB)
                CreateByteField (RBUF, 0x06, SECB)
                CreateByteField (RBUF, 0x07, VALB)
                CreateWordField (RBUF, 0x08, MILW)
                CreateWordField (RBUF, 0x0A, TIMW)
                CreateByteField (RBUF, 0x0C, LIGB)
                Acquire (RTCL, 0xFFFF)
                FromBCD (SECR, SECB) /* \_SB_.ACDC._GRT.SECB */
                FromBCD (MINR, MINB) /* \_SB_.ACDC._GRT.MINB */
                FromBCD (HONR, HOUB) /* \_SB_.ACDC._GRT.HOUB */
                FromBCD (DYMR, DAYB) /* \_SB_.ACDC._GRT.DAYB */
                FromBCD (MONR, MONB) /* \_SB_.ACDC._GRT.MONB */
                FromBCD (YARR, YEAW) /* \_SB_.ACDC._GRT.YEAW */
                If ((((RTRA & 0x10) != 0x10) && ((RCTL & 
                    0x1000) == 0x1000)))
                {
                    FromBCD (RTAC, Local0)
                }
                ElseIf (((RTRA & 0x10) == 0x10))
                {
                    FromBCD (RTCC, Local0)
                }
                Else
                {
                    CopyObject (0x14, Local0)
                }

                Local0 *= 0x64
                YEAW += Local0 /* \_SB_.ACDC._GRT.YEAW */
                If ((TZLI != 0xFF))
                {
                    RTCI = TZVL /* \_SB_.ACDC.TZVL */
                    Local1 = RTCD /* \_SB_.ACDC.RTCD */
                    RTCI = TZVH /* \_SB_.ACDC.TZVH */
                    Local2 = (RTCD << 0x08)
                    Local2 |= Local1
                    RTCI = LIVR /* \_SB_.ACDC.LIVR */
                    Local3 = RTCD /* \_SB_.ACDC.RTCD */
                    TIMW = Local2
                    LIGB = Local3
                }
                Else
                {
                    TIMW = 0x07FF
                    LIGB = 0x00
                }

                MILW = 0x01
                VALB = 0x01
                Release (RTCL)
                Return (RBUF) /* \_SB_.ACDC.RBUF */
            }

            Method (_SRT, 1, Serialized)  // _SRT: Set Real Time
            {
                CreateWordField (Arg0, 0x00, YEAW)
                CreateByteField (Arg0, 0x02, MONB)
                CreateByteField (Arg0, 0x03, DAYB)
                CreateByteField (Arg0, 0x04, HOUB)
                CreateByteField (Arg0, 0x05, MINB)
                CreateByteField (Arg0, 0x06, SECB)
                CreateWordField (Arg0, 0x08, MILW)
                CreateWordField (Arg0, 0x0A, TIMW)
                CreateByteField (Arg0, 0x0C, LIGB)
                Acquire (RTCL, 0xFFFF)
                Local2 = RTRB /* \_SB_.ACDC.RTRB */
                RTRB |= 0x80
                ToBCD (SECB, SECR) /* \_SB_.ACDC.SECR */
                ToBCD (MINB, MINR) /* \_SB_.ACDC.MINR */
                ToBCD (HOUB, HONR) /* \_SB_.ACDC.HONR */
                ToBCD (DAYB, DYMR) /* \_SB_.ACDC.DYMR */
                ToBCD (MONB, MONR) /* \_SB_.ACDC.MONR */
                Divide (YEAW, 0x64, Local0, Local1)
                ToBCD (Local0, YARR) /* \_SB_.ACDC.YARR */
                If ((((RTRA & 0x10) != 0x10) && ((RCTL & 
                    0x1000) == 0x1000)))
                {
                    ToBCD (Local1, RTAC) /* \_SB_.ACDC.RTAC */
                }
                ElseIf (((RTRA & 0x10) == 0x10))
                {
                    ToBCD (Local1, RTCC) /* \_SB_.ACDC.RTCC */
                }

                RTRB = Local2
                If ((TZLI != 0xFF))
                {
                    Local3 = (TIMW >> 0x08)
                    RTCI = TZVH /* \_SB_.ACDC.TZVH */
                    RTCD = Local3
                    Local3 = (TIMW & 0xFFFF)
                    RTCI = TZVL /* \_SB_.ACDC.TZVL */
                    RTCD = Local3
                    RTCI = LIVR /* \_SB_.ACDC.LIVR */
                    RTCD = LIGB /* \_SB_.ACDC._SRT.LIGB */
                }

                Release (RTCL)
                Return (0x00)
            }
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R23  ", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M250, MethodObj)    // 5 Arguments
    External (M251, FieldUnitObj)
    External (M276, MethodObj)    // 0 Arguments
    External (M277, MethodObj)    // 0 Arguments
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)

    Name (M278, 0x01)
    Name (M279, 0x01)
    Name (M27A, 0x01)
    Name (M27B, 0x01)
    Name (APGE, 0x01)
    Name (ACGE, 0x01)
    Mutex (M27E, 0x00)
    Method (M27D, 0, NotSerialized)
    {
        M460 ("FEA-ASL-CpmAcpRemovePowerGating-Start\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        Local0 = M249 (0x00, 0x00, 0x00, 0x01240644)
        M460 ("  ACP_DSP_FUSION_RUNSTALL   = %d\n", Local0, 0x00, 0x00, 0x00, 0x00, 0x00)
        If ((Local0 == 0x00))
        {
            M250 (0x00, 0x00, 0x00, 0x01241A48, 0x01)
            M250 (0x00, 0x00, 0x00, 0x01241A24, 0x02)
            Local5 = 0x64
            Local1 = M249 (0x00, 0x00, 0x00, 0x01241A48)
            While ((Local1 != 0x0101))
            {
                Local1 = M249 (0x00, 0x00, 0x00, 0x01241A48)
                Local5--
                If ((Local5 == 0x00))
                {
                    M460 ("  Wait PGFSM status timeout", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Break
                }

                Stall (0x63)
            }
        }
        Else
        {
            M250 (0x00, 0x00, 0x00, 0x01241024, 0x07)
            Local5 = 0x64
            Local1 = M249 (0x00, 0x00, 0x00, 0x01241028)
            While ((Local1 != 0x00))
            {
                Local1 = M249 (0x00, 0x00, 0x00, 0x01241028)
                Local5--
                If ((Local5 == 0x00))
                {
                    M460 ("  Wait PGFSM status timeout", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Break
                }

                Stall (0x63)
            }
        }

        M460 ("FEA-ASL-CpmAcpRemovePowerGating-End\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
    }

    Method (M27C, 0, NotSerialized)
    {
        M460 ("FEA-ASL-CpmAcpApplyPowerGating-Start\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        Local0 = M249 (0x00, 0x00, 0x00, 0x01240644)
        M460 ("  ACP_DSP_FUSION_RUNSTALL   = %d\n", Local0, 0x00, 0x00, 0x00, 0x00, 0x00)
        If ((Local0 == 0x00))
        {
            M250 (0x00, 0x00, 0x00, 0x01241A48, 0x02)
            M250 (0x00, 0x00, 0x00, 0x01241A24, 0x02)
            Local5 = 0x64
            Local1 = M249 (0x00, 0x00, 0x00, 0x01241A48)
            While ((Local1 != 0x0202))
            {
                Local1 = M249 (0x00, 0x00, 0x00, 0x01241A48)
                Local5--
                If ((Local5 == 0x00))
                {
                    M460 ("  Wait mmACP_P1_FUTURE_REG_ACLK_1 status timeout", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Break
                }

                Stall (0x63)
            }
        }
        Else
        {
            M250 (0x00, 0x00, 0x00, 0x01241024, 0x06)
            Local5 = 0x64
            Local1 = M249 (0x00, 0x00, 0x00, 0x01241028)
            While ((Local1 != 0x0A))
            {
                Local1 = M249 (0x00, 0x00, 0x00, 0x01241028)
                Local5--
                If ((Local5 == 0x00))
                {
                    M460 ("  Wait PGFSM status timeout", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Break
                }

                Stall (0x63)
            }
        }

        M460 ("FEA-ASL-CpmAcpApplyPowerGating-End\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
    }

    Method (M276, 0, NotSerialized)
    {
        M460 ("FEA-ASL-CpmPowerGateOn-Start\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        M460 ("  CpmAcpPresentState    = %d\n", M278, 0x00, 0x00, 0x00, 0x00, 0x00)
        M460 ("  CpmAzaliaPresentState = %d\n", M279, 0x00, 0x00, 0x00, 0x00, 0x00)
        M460 ("  ACGE                  = %d\n", ACGE, 0x00, 0x00, 0x00, 0x00, 0x00)
        M460 ("  APGE                  = %d\n", APGE, 0x00, 0x00, 0x00, 0x00, 0x00)
        If (!(M278 ^ M279))
        {
            M460 ("FEA-ASL-CpmPowerGateOn-1-End\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            Return (Zero)
        }

        If ((ACGE == 0x01))
        {
            Local6 = \_SB.ALIB (0x16, 0xC8)
        }

        If ((APGE == 0x01))
        {
            M000 (0x0DB4)
            If ((M27A == 0x01))
            {
                Local0 = M017 (0x00, 0x08, 0x01, 0x19, 0x00, 0x08)
                Local1 = M019 (Local0, 0x00, 0x05, 0x00)
                If (((Local0 != 0x00) && (Local0 != 0xFF)))
                {
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        M27D ()
                    }
                }
            }
            ElseIf ((M27B == 0x01))
            {
                M250 (0x00, 0x00, 0x00, 0x0900E784, 0x0303)
                Local5 = 0x64
                Local4 = M249 (0x00, 0x00, 0x00, 0x0900E790)
                Local4 &= 0x0F
                While ((Local4 != 0x00))
                {
                    Local4 = M249 (0x00, 0x00, 0x00, 0x0900E790)
                    Local4 &= 0x0F
                    Local5--
                    If ((Local5 == 0x00))
                    {
                        M460 ("  Wait mmRSMU_PGFSM_STATUS_ACP status timeout", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                        Break
                    }

                    Stall (0x63)
                }
            }

            M000 (0x0DB5)
        }

        M460 ("FEA-ASL-CpmPowerGateOn-End\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
    }

    Method (M277, 0, NotSerialized)
    {
        M460 ("FEA-ASL-CpmPowerGateOff-Start\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        M460 ("  CpmAcpPresentState    = %d\n", M278, 0x00, 0x00, 0x00, 0x00, 0x00)
        M460 ("  CpmAzaliaPresentState = %d\n", M279, 0x00, 0x00, 0x00, 0x00, 0x00)
        M460 ("  APGE                  = %d\n", APGE, 0x00, 0x00, 0x00, 0x00, 0x00)
        M460 ("  ACGE                  = %d\n", ACGE, 0x00, 0x00, 0x00, 0x00, 0x00)
        If (!((M278 == 0x00) && (M279 == 0x00)))
        {
            M460 ("FEA-ASL-CpmPowerGateOff-1-End\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            Return (Zero)
        }

        If ((APGE == 0x01))
        {
            M000 (0x0DB6)
            If ((M27A == 0x01))
            {
                Local0 = M017 (0x00, 0x08, 0x01, 0x19, 0x00, 0x08)
                Local1 = M019 (Local0, 0x00, 0x05, 0x00)
                If (((Local0 != 0x00) && (Local0 != 0xFF)))
                {
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        M27C ()
                    }
                }
            }
            ElseIf ((M27B == 0x01))
            {
                M250 (0x00, 0x00, 0x00, 0x0900E784, 0x0301)
                Local5 = 0x64
                Local4 = M249 (0x00, 0x00, 0x00, 0x0900E790)
                Local4 &= 0x0F
                While ((Local4 != 0x0A))
                {
                    Local4 = M249 (0x00, 0x00, 0x00, 0x0900E790)
                    Local4 &= 0x0F
                    Local5--
                    If ((Local5 == 0x00))
                    {
                        M460 ("  Wait mmRSMU_PGFSM_STATUS_ACP status timeout", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                        Break
                    }

                    Stall (0x63)
                }
            }

            M000 (0x0DB7)
        }

        If ((ACGE == 0x01))
        {
            Local6 = \_SB.ALIB (0x16, 0x00)
        }

        M460 ("FEA-ASL-CpmPowerGateOff-End\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
    }

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            Acquire (\M27E, 0xFFFF)
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.ACP._PS0 CpmAcpPresentState = 1\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            M278 = 0x01
            M276 ()
            Release (\M27E)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            Acquire (\M27E, 0xFFFF)
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.ACP._PS3 CpmAcpPresentState = 0\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            M278 = 0x00
            M277 ()
            Release (\M27E)
        }

        Method (MSG0, 3, Serialized)
        {
            M460 ("FEA-ASL-MSG0-Start\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            M000 (0x5511)
            OperationRegion (VARM, SystemIO, 0x80, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            If ((Arg2 != 0x09))
            {
                M000 (0x5518)
                M250 (0x00, 0x00, 0x00, 0x00058A74, Arg0)
                M250 (0x00, 0x00, 0x00, 0x00058A54, Arg1)
                M250 (0x00, 0x00, 0x00, 0x00058A14, Arg2)
                Local0 = M249 (0x00, 0x00, 0x00, 0x00058A74)
                While ((Local0 == 0x00))
                {
                    Local0 = M249 (0x00, 0x00, 0x00, 0x00058A74)
                    If ((Local0 != 0x00))
                    {
                        Break
                    }
                }

                M000 (0x5519)
                Local1 = M249 (0x00, 0x00, 0x00, 0x00058A54)
                M460 ("FEA-ASL-MSG0-End-1-Return 0x%X\n", Local1, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (Local1)
            }

            Name (MBOX, Buffer (0x04){})
            Local0 = M249 (0x00, 0x00, 0x00, 0x03810570)
            VARR = Local0
            MBOX = Local0
            CreateWordField (MBOX, 0x00, STAS)
            CreateByteField (MBOX, 0x02, CMDI)
            CreateField (MBOX, 0x18, 0x05, RESV)
            CreateBitField (MBOX, 0x1D, RSET)
            CreateBitField (MBOX, 0x1E, RCOV)
            CreateBitField (MBOX, 0x1F, REDY)
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While (((REDY != 0x01) || (CMDI != 0x00)))
            {
                Local0 = M249 (0x00, 0x00, 0x00, 0x03810570)
                MBOX = Local0
                M000 (0x5516)
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            Local0 = 0x00
            MBOX = Local0
            REDY = 0x00
            CMDI = 0x33
            M000 (0x5514)
            Local0 = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            VARR = Local0
            M250 (0x00, 0x00, 0x00, 0x03810570, Local0)
            Sleep (0x01)
            M000 (0x5515)
            Local0 = M249 (0x00, 0x00, 0x00, 0x03810570)
            MBOX = Local0
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While ((CMDI != 0x00))
            {
                Local0 = M249 (0x00, 0x00, 0x00, 0x03810570)
                MBOX = Local0
                M000 (0x5517)
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            If ((STAS != 0x00))
            {
                M000 (0x5513)
                M460 ("FEA-ASL-MSG0-Command Fail\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            }

            M000 (0x5512)
            M460 ("FEA-ASL-MSG0-End-2-Return 0x%X\n", Local0, 0x00, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }
    }

    Scope (\_SB.PCI0.GP17.AZAL)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            Acquire (\M27E, 0xFFFF)
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.AZAL._PS0 CpmAzaliaPresentState = 1\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            M279 = 0x01
            M276 ()
            Release (\M27E)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            Acquire (\M27E, 0xFFFF)
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.AZAL._PS3 CpmAzaliaPresentState = 0\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            M279 = 0x00
            M277 ()
            Release (\M27E)
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R23  ", 0x00000001)
{
    External (_SB_.DAS3, FieldUnitObj)
    External (_SB_.PCI0.GPP8, DeviceObj)
    External (_SB_.PCI0.GPP8._ADR, IntObj)
    External (_SB_.PCI0.GPP8.PWDI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP8.PWEN, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPWD, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RPCF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SI3R, FieldUnitObj)
    External (_SB_.PCI0.SPCF, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.UPWD, MethodObj)    // 0 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (NLCK, FieldUnitObj)

    Scope (\_SB.PCI0.GPP8)
    {
        Name (SLPS, 0x01)
        Name (WD3C, 0x00)
        PowerResource (P0NV, 0x00, 0x0000)
        {
            Name (D0NV, 0x01)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                M000 (0x30AA)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP8.P0NV._STA\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (D0NV) /* \_SB_.PCI0.GPP8.P0NV.D0NV */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                M000 (0x30D0)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP8.P0NV._ON\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                If ((M4C0 != 0x00))
                {
                    If ((M049 (M4C0, 0x10) == 0x01))
                    {
                        If (CondRefOf (PWEN))
                        {
                            PWEN ()
                        }

                        If ((WD3C == 0x01))
                        {
                            If ((M049 (M4C0, 0x12) == 0x01))
                            {
                                RPCF ()
                                UPWD ()
                                WD3C = 0x00
                            }
                        }
                    }
                }

                If ((DAS3 == 0x00))
                {
                    If ((SI3R == 0x01))
                    {
                        RPCF ()
                        UPWD ()
                        SLPS = 0x01
                        SI3R = 0x00
                    }
                }

                D0NV = 0x01
                M000 (0x30D1)
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                M000 (0x30D3)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP8.P0NV._OFF\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                If ((M4C0 != 0x00))
                {
                    If ((M049 (M4C0, 0x10) == 0x01))
                    {
                        If (CondRefOf (PWDI))
                        {
                            PWDI ()
                        }

                        If ((M049 (M4C0, 0x12) == 0x01))
                        {
                            SPCF (_ADR)
                        }
                    }
                }

                If ((DAS3 == 0x00))
                {
                    If ((SLPS == 0x01))
                    {
                        SPCF (_ADR)
                        LPWD ()
                    }

                    SLPS = 0x00
                }

                D0NV = 0x00
                M000 (0x30D5)
            }
        }

        Device (NVME)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                P0NV
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                P0NV
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                P0NV
            })
            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                M000 (0x3050)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP8.NVME._PS0\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                M000 (0x3053)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP8.NVME._PS3\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "StorageD3Enable", 
                        0x01
                    }
                }
            })
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "TP-R23  ", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xE0000000)
        Name (ADBG, Buffer (0x0100){})
        Mutex (AM00, 0x00)
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0088 */  0x00, 0x00, 0x00, 0x10, 0x13, 0xFF, 0xFF, 0x00,  // ........
            /* 0090 */  0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0C,  // ........
            /* 00A0 */  0x0C, 0xFF, 0xFF, 0x01, 0x00, 0x02, 0x01, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x0F, 0x0F, 0xFF, 0xFF, 0x04,  // ........
            /* 00E0 */  0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A013)
                CreateWordField (Arg1, 0x02, A014)
                CreateDWordField (Arg1, 0x04, A015)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A016)
                A016 = A013 /* \_SB_.ALIB.A013 */
                CreateWordField (Local0, 0x02, A017)
                A017 = A014 /* \_SB_.ALIB.A014 */
                CreateDWordField (Local0, 0x04, A018)
                A018 = A015 /* \_SB_.ALIB.A015 */
                A018 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A018 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A019 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A022 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A023 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A024 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                Return (A025 (Arg1))
            }

            If ((Arg0 == 0x10))
            {
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A026)
                CreateDWordField (Local7, 0x04, A027)
                CreateDWordField (Local7, 0x08, A028)
                CreateDWordField (Local7, 0x0C, A029)
                CreateDWordField (Local7, 0x10, A030)
                CreateDWordField (Local7, 0x14, A031)
                A026 = 0x00
                A027 = 0x00
                A028 = 0x00
                A029 = 0x00
                A030 = 0x00
                A031 = 0x00
                A011 (0x28, Local7)
            }

            If ((Arg0 == 0x11))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A005)
                CreateDWordField (Local6, 0x04, A006)
                CreateDWordField (Local6, 0x08, A007)
                CreateDWordField (Local6, 0x0C, A008)
                CreateDWordField (Local6, 0x10, A009)
                CreateDWordField (Local6, 0x14, A010)
                A005 = 0x00
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                A011 (0x27, Local6)
            }

            If ((Arg0 == 0x12))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A032)
                CreateDWordField (Local6, 0x04, A033)
                CreateDWordField (Local6, 0x08, A034)
                CreateDWordField (Local6, 0x0C, A035)
                CreateDWordField (Local6, 0x10, A036)
                CreateDWordField (Local6, 0x14, A037)
                A032 = 0x40
                A033 = 0x00
                A034 = 0x00
                A035 = 0x00
                A036 = 0x00
                A037 = 0x00
                Local5 = 0x01
                Acquire (\_SB.AM00, 0xFFFF)
                Local0 = A038 /* \_SB_.A038 */
                Local1 = A039 /* \_SB_.A039 */
                Local2 = A040 /* \_SB_.A040 */
                Local3 = A041 /* \_SB_.A041 */
                Release (\_SB.AM00)
                If ((((Local0 & 0x3F) != 0x1F) && ((
                    Local0 & 0x3F) != 0x00)))
                {
                    If (((Local0 & 0x3F) != 0x08))
                    {
                        Local5 = 0x00
                    }
                }
                ElseIf ((((Local1 & 0x3F) != 0x1F) && (
                    (Local1 & 0x3F) != 0x00)))
                {
                    If (((Local1 & 0x3F) != 0x08))
                    {
                        Local5 = 0x00
                    }
                }
                ElseIf ((((Local2 & 0x3F) != 0x1F) && (
                    (Local2 & 0x3F) != 0x00)))
                {
                    If (((Local2 & 0x3F) != 0x08))
                    {
                        Local5 = 0x00
                    }
                }
                ElseIf ((((Local3 & 0x3F) != 0x1F) && (
                    (Local3 & 0x3F) != 0x00)))
                {
                    If (((Local3 & 0x3F) != 0x08))
                    {
                        Local5 = 0x00
                    }
                }

                If ((Local5 == 0x01))
                {
                    A011 (0x09, Local6)
                }
            }

            If ((Arg0 == 0x13))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A042)
                CreateDWordField (Local6, 0x04, A043)
                CreateDWordField (Local6, 0x08, A044)
                CreateDWordField (Local6, 0x0C, A045)
                CreateDWordField (Local6, 0x10, A046)
                CreateDWordField (Local6, 0x14, A047)
                A042 = 0x41
                A043 = 0x00
                A044 = 0x00
                A045 = 0x00
                A046 = 0x00
                A047 = 0x00
                Local5 = 0x01
                Acquire (\_SB.AM00, 0xFFFF)
                Local0 = A038 /* \_SB_.A038 */
                Local1 = A039 /* \_SB_.A039 */
                Local2 = A040 /* \_SB_.A040 */
                Local3 = A041 /* \_SB_.A041 */
                Release (\_SB.AM00)
                If ((((Local0 & 0x3F) != 0x08) && ((
                    Local0 & 0x3F) != 0x00)))
                {
                    Local5 = 0x00
                }
                ElseIf ((((Local1 & 0x3F) != 0x08) && (
                    (Local1 & 0x3F) != 0x00)))
                {
                    Local5 = 0x00
                }
                ElseIf ((((Local2 & 0x3F) != 0x08) && (
                    (Local2 & 0x3F) != 0x00)))
                {
                    Local5 = 0x00
                }
                ElseIf ((((Local3 & 0x3F) != 0x08) && (
                    (Local3 & 0x3F) != 0x00)))
                {
                    Local5 = 0x00
                }

                If ((Local5 == 0x01))
                {
                    A011 (0x09, Local6)
                }
            }

            If ((Arg0 == 0x14))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A048)
                CreateDWordField (Local6, 0x04, A049)
                CreateDWordField (Local6, 0x08, A050)
                CreateDWordField (Local6, 0x0C, A051)
                CreateDWordField (Local6, 0x10, A052)
                CreateDWordField (Local6, 0x14, A053)
                A048 = Arg1
                A049 = 0x00
                A050 = 0x00
                A051 = 0x00
                A052 = 0x00
                A053 = 0x00
                A011 (0x61, Local6)
            }

            If ((Arg0 == 0x15))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A054)
                CreateDWordField (Local6, 0x04, A055)
                CreateDWordField (Local6, 0x08, A056)
                CreateDWordField (Local6, 0x0C, A057)
                CreateDWordField (Local6, 0x10, A058)
                CreateDWordField (Local6, 0x14, A059)
                A054 = Arg1
                A055 = 0x00
                A056 = 0x00
                A057 = 0x00
                A058 = 0x00
                A059 = 0x00
                A011 (0x65, Local6)
            }

            If ((Arg0 == 0x16))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A060)
                CreateDWordField (Local6, 0x04, A061)
                CreateDWordField (Local6, 0x08, A062)
                CreateDWordField (Local6, 0x0C, A063)
                CreateDWordField (Local6, 0x10, A064)
                CreateDWordField (Local6, 0x14, A065)
                A060 = Arg1
                A061 = 0x00
                A062 = 0x00
                A063 = 0x00
                A064 = 0x00
                A065 = 0x00
                A011 (0x66, Local6)
            }

            If ((Arg0 == 0xAA))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A066)
                CreateDWordField (Local6, 0x04, A067)
                CreateDWordField (Local6, 0x08, A068)
                CreateDWordField (Local6, 0x0C, A069)
                CreateDWordField (Local6, 0x10, A070)
                CreateDWordField (Local6, 0x14, A071)
                A066 = 0x00
                A067 = 0x00
                A068 = 0x00
                A069 = 0x00
                A070 = 0x00
                A071 = 0x00
                A072 (Arg1)
            }

            Return (0x00)
        }

        Method (A022, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A123 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local2 = A124 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A016)
            CreateByteField (Local7, 0x02, A074)
            CreateByteField (Local7, 0x03, A125)
            A016 = 0x04
            A074 = 0x00
            If ((Local2 == 0x00))
            {
                A125 = 0x00
            }
            Else
            {
                A125 = 0x01
            }

            Return (Local7)
        }

        Method (A123, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A118 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A118 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A118 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A118 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A118 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A118 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A118 (Arg1))
            }
        }

        Method (A124, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A119 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A119 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A119 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A119 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A119 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A119 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A119 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A019, 1, NotSerialized)
        {
            AD00 = Arg0
            A004 ()
        }

        Method (A023, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A024, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A073, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A016)
            A016 = 0x03
            CreateByteField (Local7, 0x02, A074)
            A074 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A074 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A074 = 0x01
                Return (Local7)
            }

            A075 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A076 ()
            A074 = 0x02
            Return (Local7)
        }

        Method (A077, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A076 ()
        }

        Method (A078, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A079, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A080, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x0B))
                {
                    A081 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A076 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A082, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A075, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                If ((A083 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A084 (Local0)
                        A085 (Local0, Local1)
                    }
                    Else
                    {
                        A085 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A086, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A087 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A088, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A089 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A076, 0, NotSerialized)
        {
            A088 ()
            A086 ()
            If ((AP02 != AP01))
            {
                A012 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A087 (Local0)
                Local2 = A090 (Local0)
                If ((Local1 != Local2))
                {
                    A091 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A091 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A091, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A092 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A092 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A092 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A092 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A092 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A092 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A092 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A092 (Arg1))
            }
        }

        Method (A090, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A093 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A093 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A093 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A093 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A093 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A093 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A093 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A093 ())
            }
        }

        Method (A087, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A094 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A094 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A094 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A094 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A094 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A094 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A094 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A094 ())
            }
        }

        Method (A089, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A095 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A095 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A095 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A095 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A095 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A095 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A095 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A095 ())
            }
        }

        Method (A084, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A096 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A096 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A096 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A096 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A096 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A096 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A096 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A096 ())
            }
        }

        Method (A085, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A097 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A097 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A097 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A097 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A097 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A097 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A097 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A097 (Arg1))
            }
        }

        Method (A083, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A098 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A098 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A098 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A098 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A098 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A098 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A098 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A098 (Arg1))
            }
        }

        Method (A081, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A099 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A099 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A099 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A099 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A099 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A099 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A099 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A099 ())
            }
        }

        OperationRegion (A154, SystemMemory, AGRB, 0x1000)
        Field (A154, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A155,   32
        }

        BankField (A154, A155, 0x03B10528, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A153,   32
        }

        BankField (A154, A155, 0x03B10578, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A146,   32
        }

        BankField (A154, A155, 0x03B10998, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A147,   32
        }

        BankField (A154, A155, 0x03B1099C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A148,   32
        }

        BankField (A154, A155, 0x03B109A0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A149,   32
        }

        BankField (A154, A155, 0x03B109A4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A150,   32
        }

        BankField (A154, A155, 0x03B109A8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A151,   32
        }

        BankField (A154, A155, 0x03B109AC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A152,   32
        }

        BankField (A154, A155, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A128,   32
        }

        BankField (A154, A155, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A129,   32
        }

        BankField (A154, A155, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A130,   32
        }

        BankField (A154, A155, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A131,   32
        }

        BankField (A154, A155, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A132,   32
        }

        BankField (A154, A155, 0x11144280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A133,   32
        }

        BankField (A154, A155, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A134,   32
        }

        BankField (A154, A155, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A135,   32
        }

        BankField (A154, A155, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A136,   32
        }

        BankField (A154, A155, 0x11243280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A137,   32
        }

        BankField (A154, A155, 0x11244280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A138,   32
        }

        BankField (A154, A155, 0x11245280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A139,   32
        }

        BankField (A154, A155, 0x11140294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A038,   32
        }

        BankField (A154, A155, 0x11141294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A039,   32
        }

        BankField (A154, A155, 0x11142294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A040,   32
        }

        BankField (A154, A155, 0x11143294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A041,   32
        }

        Method (A126, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A107 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A107 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A107 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A107 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A107 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A107 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A107 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A107 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A107 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A107 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR0.ABRA.A107 (Arg1))
            }
        }

        Method (A127, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            If ((Arg1 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x07))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x08))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x09))
                {
                    Local0 = 0x000B0300
                }

                If ((Arg0 == 0x0A))
                {
                    Local0 = 0x000C0300
                }

                Local1 = A128 /* \_SB_.A128 */
                Local1 &= 0xFF00FCFF
                A128 = (Local0 | Local1)
                Local1 = A128 /* \_SB_.A128 */
                A128 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == 0x00))
            {
                If ((Arg0 == 0x00))
                {
                    Local1 = A129 /* \_SB_.A129 */
                    A129 = (0x00400000 | Local1)
                    Local1 = A129 /* \_SB_.A129 */
                    A129 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x01))
                {
                    Local1 = A130 /* \_SB_.A130 */
                    A130 = (0x00400000 | Local1)
                    Local1 = A130 /* \_SB_.A130 */
                    A130 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A131 /* \_SB_.A131 */
                    A131 = (0x00400000 | Local1)
                    Local1 = A131 /* \_SB_.A131 */
                    A131 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A132 /* \_SB_.A132 */
                    A132 = (0x00400000 | Local1)
                    Local1 = A132 /* \_SB_.A132 */
                    A132 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A133 /* \_SB_.A133 */
                    A133 = (0x00400000 | Local1)
                    Local1 = A133 /* \_SB_.A133 */
                    A133 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A134 /* \_SB_.A134 */
                    A134 = (0x00400000 | Local1)
                    Local1 = A134 /* \_SB_.A134 */
                    A134 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A135 /* \_SB_.A135 */
                    A135 = (0x00400000 | Local1)
                    Local1 = A135 /* \_SB_.A135 */
                    A135 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A136 /* \_SB_.A136 */
                    A136 = (0x00400000 | Local1)
                    Local1 = A136 /* \_SB_.A136 */
                    A136 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A137 /* \_SB_.A137 */
                    A137 = (0x00400000 | Local1)
                    Local1 = A137 /* \_SB_.A137 */
                    A137 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A138 /* \_SB_.A138 */
                    A138 = (0x00400000 | Local1)
                    Local1 = A138 /* \_SB_.A138 */
                    A138 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x0A))
                {
                    Local1 = A139 /* \_SB_.A139 */
                    A139 = (0x00400000 | Local1)
                    Local1 = A139 /* \_SB_.A139 */
                    A139 = (0xFFBFFFFF & Local1)
                }
            }

            Release (\_SB.AM00)
        }

        Method (A003, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A126 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    A127 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A011, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, 0x00, A140)
            CreateDWordField (Arg1, 0x04, A141)
            CreateDWordField (Arg1, 0x08, A142)
            CreateDWordField (Arg1, 0x0C, A143)
            CreateDWordField (Arg1, 0x10, A144)
            CreateDWordField (Arg1, 0x14, A145)
            A146 = 0x00
            While ((A146 != 0x00)){}
            A147 = A140 /* \_SB_.A011.A140 */
            A148 = A141 /* \_SB_.A011.A141 */
            A149 = A142 /* \_SB_.A011.A142 */
            A150 = A143 /* \_SB_.A011.A143 */
            A151 = A144 /* \_SB_.A011.A144 */
            A152 = A145 /* \_SB_.A011.A145 */
            A153 = Arg0
            While ((A146 == 0x00)){}
            Release (\_SB.AM00)
        }

        Method (A121, 5, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = Arg0
            A006 = Arg1
            A007 = Arg2
            A008 = Arg3
            A011 (0x09, Local7)
        }

        Method (AMNR, 1, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A154, A155, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xBC), 
                A156,   32
            }

            Release (\_SB.AM00)
            Return (A156) /* \_SB_.AMNR.A156 */
        }

        Method (AMNW, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A154, A155, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xBC), 
                A157,   32
            }

            A157 = Arg1
            Release (\_SB.AM00)
        }

        Method (A025, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A158)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            Local0 = 0x02
            While ((Local0 < A158))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A005 = 0x00
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                If ((Local1 == 0x01))
                {
                    A005 = Local2
                    A011 (0x18, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A005 = Local2
                    A011 (0x19, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A005 = Local2
                    A011 (0x14, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A005 = Local2
                    A011 (0x15, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A005 = Local2
                    A011 (0x16, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A005 = Local2
                    A011 (0x17, Local7)
                }

                If ((Local1 == 0x09))
                {
                    A005 = Local2
                    A011 (0x1F, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A005 = Local2
                    A011 (0x1A, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A005 = Local2
                    A011 (0x1C, Local7)
                }

                If ((Local1 == 0x0D))
                {
                    A005 = Local2
                    A011 (0x1E, Local7)
                }

                If ((Local1 == 0x0E))
                {
                    A005 = Local2
                    A011 (0x1B, Local7)
                }

                If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
                {
                    If ((Local1 == 0x10))
                    {
                        If ((Local2 == 0x00))
                        {
                            A011 (0x28, Local7)
                        }
                        Else
                        {
                            A011 (0x27, Local7)
                        }
                    }
                }

                If ((Local1 == 0x11))
                {
                    A005 = Local2
                    A011 (0x1D, Local7)
                }

                If ((Local1 == 0x12))
                {
                    A005 = Local2
                    A011 (0x54, Local7)
                }

                If ((Local1 == 0x13))
                {
                    A005 = Local2
                    A011 (0x23, Local7)
                }

                If ((Local1 == 0x20))
                {
                    A005 = Local2
                    A011 (0x31, Local7)
                }

                If ((Local1 == 0x21))
                {
                    A005 = Local2
                    A011 (0x32, Local7)
                }

                If ((Local1 == 0x22))
                {
                    A005 = Local2
                    A011 (0x33, Local7)
                }

                If ((Local1 == 0x23))
                {
                    A005 = Local2
                    A011 (0x34, Local7)
                }

                If ((Local1 == 0x24))
                {
                    A005 = Local2
                    A011 (0x35, Local7)
                }

                If ((Local1 == 0x25))
                {
                    A005 = Local2
                    A011 (0x36, Local7)
                }

                If ((Local1 == 0x26))
                {
                    A005 = Local2
                    A011 (0x37, Local7)
                }

                If ((Local1 == 0x27))
                {
                    A005 = Local2
                    A011 (0x38, Local7)
                }

                If ((Local1 == 0x28))
                {
                    A005 = Local2
                    A011 (0x39, Local7)
                }

                If ((Local1 == 0x29))
                {
                    A005 = Local2
                    A011 (0x3A, Local7)
                }

                If ((Local1 == 0x2A))
                {
                    A005 = Local2
                    A011 (0x3B, Local7)
                }

                If ((Local1 == 0x2B))
                {
                    A005 = Local2
                    A011 (0x3C, Local7)
                }

                If ((Local1 == 0x2C))
                {
                    A005 = Local2
                    A011 (0x3D, Local7)
                }

                If ((Local1 == 0x2D))
                {
                    A005 = Local2
                    A011 (0x3E, Local7)
                }

                If ((Local1 == 0x2E))
                {
                    A005 = Local2
                    A011 (0x4A, Local7)
                }

                If ((Local1 == 0x30))
                {
                    A005 = Local2
                    A011 (0x55, Local7)
                    Acquire (\_SB.AM00, 0xFFFF)
                    Local3 = Buffer (0x08){}
                    CreateDWordField (Local3, 0x00, A159)
                    CreateDWordField (Local3, 0x04, A160)
                    A159 = A147 /* \_SB_.A147 */
                    A160 = A148 /* \_SB_.A148 */
                    Release (\_SB.AM00)
                    Return (Local3)
                }

                If ((Local1 == 0x31))
                {
                    A005 = Local2
                    A011 (0x56, Local7)
                }

                If ((Local1 == 0x32))
                {
                    A005 = Local2
                    A011 (0x20, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A105,   8, 
                    A106,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A100, 0, NotSerialized)
                {
                    Local0 = A082 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A095, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A101, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A101 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A100 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A093, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A096, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A092, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A102 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A103 (0x00)
                    Name (A104, 0x00)
                    A103 (0x01)
                }

                Method (A097, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A105) && (Local0 <= A106)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A099, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A102, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A108, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A109 (Local0, 0x00)
                    Local2 = A109 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A109 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A109 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A110 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A110 (0x26, Local5, 0x00)
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A109 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A109 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A109 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A103, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A109 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A109 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A109 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A109, 2, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A109.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A107 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A104, 0x00)
                    Local2 = 0x00
                    A104 = A112 /* \_SB_.AWR0.ABR0.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A103 (0x00)
                        Local0 = A109 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A109 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A109 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A104 /* \_SB_.AWR0.ABR0.A119.A104 */
                    If ((A104 != 0x00))
                    {
                        A103 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A105,   8, 
                    A106,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A100, 0, NotSerialized)
                {
                    Local0 = A082 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A095, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A101, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A101 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A100 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A093, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A096, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A092, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A102 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A103 (0x00)
                    Name (A104, 0x00)
                    A103 (0x01)
                }

                Method (A097, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A105) && (Local0 <= A106)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A099, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A102, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A108, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A109 (Local0, 0x00)
                    Local2 = A109 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A109 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A109 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A110 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A110 (0x26, Local5, 0x00)
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A109 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A109 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A109 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A103, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A109 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A109 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A109 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A109, 2, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A109.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A107 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A104, 0x00)
                    Local2 = 0x00
                    A104 = A112 /* \_SB_.AWR0.ABR1.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A103 (0x00)
                        Local0 = A109 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A109 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A109 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A104 /* \_SB_.AWR0.ABR1.A119.A104 */
                    If ((A104 != 0x00))
                    {
                        A103 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A105,   8, 
                    A106,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A100, 0, NotSerialized)
                {
                    Local0 = A082 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A095, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A101, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A101 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A100 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A093, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A096, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A092, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A102 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A103 (0x00)
                    Name (A104, 0x00)
                    A103 (0x01)
                }

                Method (A097, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A105) && (Local0 <= A106)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A099, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A102, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A108, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A109 (Local0, 0x00)
                    Local2 = A109 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A109 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A109 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A110 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A110 (0x26, Local5, 0x00)
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A109 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A109 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A109 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A103, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A109 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A109 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A109 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A109, 2, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A109.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A107 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A104, 0x00)
                    Local2 = 0x00
                    A104 = A112 /* \_SB_.AWR0.ABR2.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A103 (0x00)
                        Local0 = A109 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A109 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A109 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A104 /* \_SB_.AWR0.ABR2.A119.A104 */
                    If ((A104 != 0x00))
                    {
                        A103 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A105,   8, 
                    A106,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A100, 0, NotSerialized)
                {
                    Local0 = A082 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A095, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A101, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A101 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A100 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A093, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A096, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A092, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A102 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A103 (0x00)
                    Name (A104, 0x00)
                    A103 (0x01)
                }

                Method (A097, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A105) && (Local0 <= A106)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A099, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A102, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A108, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A109 (Local0, 0x00)
                    Local2 = A109 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A109 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A109 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A110 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A110 (0x26, Local5, 0x00)
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A109 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A109 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A109 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A103, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A109 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A109 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A109 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A109, 2, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A109.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A107 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A104, 0x00)
                    Local2 = 0x00
                    A104 = A112 /* \_SB_.AWR0.ABR3.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A103 (0x00)
                        Local0 = A109 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A109 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A109 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A104 /* \_SB_.AWR0.ABR3.A119.A104 */
                    If ((A104 != 0x00))
                    {
                        A103 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A105,   8, 
                    A106,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A100, 0, NotSerialized)
                {
                    Local0 = A082 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A095, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A101, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A101 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A100 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A093, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A096, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A092, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A102 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A103 (0x00)
                    Name (A104, 0x00)
                    A103 (0x01)
                }

                Method (A097, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A105) && (Local0 <= A106)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A099, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A102, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A108, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A109 (Local0, 0x00)
                    Local2 = A109 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A109 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A109 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A110 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A110 (0x26, Local5, 0x00)
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A109 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A109 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A109 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A103, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A109 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A109 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A109 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A109, 2, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A109.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A107 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A104, 0x00)
                    Local2 = 0x00
                    A104 = A112 /* \_SB_.AWR0.ABR4.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A103 (0x00)
                        Local0 = A109 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A109 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A109 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A104 /* \_SB_.AWR0.ABR4.A119.A104 */
                    If ((A104 != 0x00))
                    {
                        A103 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A105,   8, 
                    A106,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A100, 0, NotSerialized)
                {
                    Local0 = A082 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A095, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A101, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A101 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A100 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A093, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A096, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A092, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A102 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A103 (0x00)
                    Name (A104, 0x00)
                    A103 (0x01)
                }

                Method (A097, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A105) && (Local0 <= A106)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A099, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A102, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A108, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A109 (Local0, 0x00)
                    Local2 = A109 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A109 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A109 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A110 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A110 (0x26, Local5, 0x00)
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A109 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A109 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A109 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A103, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A109 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A109 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A109 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A109, 2, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A109.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A107 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A104, 0x00)
                    Local2 = 0x00
                    A104 = A112 /* \_SB_.AWR0.ABR5.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A103 (0x00)
                        Local0 = A109 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A109 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A109 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A104 /* \_SB_.AWR0.ABR5.A119.A104 */
                    If ((A104 != 0x00))
                    {
                        A103 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A105,   8, 
                    A106,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A100, 0, NotSerialized)
                {
                    Local0 = A082 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A095, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A101, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A101 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A100 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A093, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A096, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A092, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A102 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A103 (0x00)
                    Name (A104, 0x00)
                    A103 (0x01)
                }

                Method (A097, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A105) && (Local0 <= A106)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A099, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A102, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A108, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A109 (Local0, 0x00)
                    Local2 = A109 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A109 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A109 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A110 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A110 (0x26, Local5, 0x00)
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A109 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A109 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A109 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A103, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A109 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A109 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A109 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A109, 2, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A109.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A107 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A104, 0x00)
                    Local2 = 0x00
                    A104 = A112 /* \_SB_.AWR0.ABR6.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A103 (0x00)
                        Local0 = A109 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A109 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A109 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A104 /* \_SB_.AWR0.ABR6.A119.A104 */
                    If ((A104 != 0x00))
                    {
                        A103 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A105,   8, 
                    A106,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A100, 0, NotSerialized)
                {
                    Local0 = A082 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A095, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A101, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A101 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A100 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A093, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A096, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A092, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A102 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A103 (0x00)
                    Name (A104, 0x00)
                    A103 (0x01)
                }

                Method (A097, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A105) && (Local0 <= A106)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A099, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A102, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A108, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A109 (Local0, 0x00)
                    Local2 = A109 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A109 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A109 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A110 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A110 (0x26, Local5, 0x00)
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A109 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A109 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A109 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A103, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A109 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A109 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A109 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A109, 2, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A109.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A107 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A104, 0x00)
                    Local2 = 0x00
                    A104 = A112 /* \_SB_.AWR0.ABR7.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A103 (0x00)
                        Local0 = A109 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A109 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A109 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A104 /* \_SB_.AWR0.ABR7.A119.A104 */
                    If ((A104 != 0x00))
                    {
                        A103 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A105,   8, 
                    A106,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A100, 0, NotSerialized)
                {
                    Local0 = A082 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }
                }

                Method (A095, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A101, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }

                    Local0 = A101 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A100 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A093, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR8.AB02 */
                }

                Method (A096, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                }

                Method (A092, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A102 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A103 (0x00)
                    Name (A104, 0x00)
                    A103 (0x01)
                }

                Method (A097, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A105) && (Local0 <= A106)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A099, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A102, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A108, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A109 (Local0, 0x00)
                    Local2 = A109 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A109 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A109 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A110 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A110 (0x26, Local5, 0x00)
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A109 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A109 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A109 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A103, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A109 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A109 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A109 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A109, 2, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR8.A109.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A107 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A104, 0x00)
                    Local2 = 0x00
                    A104 = A112 /* \_SB_.AWR0.ABR8.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A103 (0x00)
                        Local0 = A109 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A109 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A109 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A104 /* \_SB_.AWR0.ABR8.A119.A104 */
                    If ((A104 != 0x00))
                    {
                        A103 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A105,   8, 
                    A106,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A100, 0, NotSerialized)
                {
                    Local0 = A082 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }
                }

                Method (A095, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A101, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }

                    Local0 = A101 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A100 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A093, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR9.AB02 */
                }

                Method (A096, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                }

                Method (A092, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A102 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A103 (0x00)
                    Name (A104, 0x00)
                    A103 (0x01)
                }

                Method (A097, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A105) && (Local0 <= A106)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A099, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A102, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A108, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A109 (Local0, 0x00)
                    Local2 = A109 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A109 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A109 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A110 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A110 (0x26, Local5, 0x00)
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A109 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A109 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A109 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A103, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A109 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A109 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A109 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A109, 2, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR9.A109.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A107 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A104, 0x00)
                    Local2 = 0x00
                    A104 = A112 /* \_SB_.AWR0.ABR9.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A103 (0x00)
                        Local0 = A109 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A109 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A109 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A104 /* \_SB_.AWR0.ABR9.A119.A104 */
                    If ((A104 != 0x00))
                    {
                        A103 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A105,   8, 
                    A106,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A100, 0, NotSerialized)
                {
                    Local0 = A082 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABRA.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABRA.AB0E */
                    }
                }

                Method (A095, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A101, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABRA.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABRA.AB0E */
                    }

                    Local0 = A101 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A100 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A093, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABRA.AB02 */
                }

                Method (A096, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABRA.AB00 */
                }

                Method (A092, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A102 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A103 (0x00)
                    Name (A104, 0x00)
                    A103 (0x01)
                }

                Method (A097, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A105) && (Local0 <= A106)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A099, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A102, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A108, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A109 (Local0, 0x00)
                    Local2 = A109 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A109 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A109 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A110 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A110 (0x26, Local5, 0x00)
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A110 (0x28, 0x00, 0x00)
                                            A110 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A109 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A109 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A109 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A103, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A109 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A109 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A109 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A109, 2, Serialized)
                {
                    Local0 = (AGRB + (A106 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABRA.A109.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A107 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A104, 0x00)
                    Local2 = 0x00
                    A104 = A112 /* \_SB_.AWR0.ABRA.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A103 (0x00)
                        Local0 = A109 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A109 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A109 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A104 /* \_SB_.AWR0.ABRA.A119.A104 */
                    If ((A104 != 0x00))
                    {
                        A103 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A161, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
            {
                Local0 = 0x00
                While ((Local0 < 0x0B))
                {
                    A162 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A110, 3, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = Arg1
            A006 = Arg2
            A011 (Arg0, Local7)
        }

        Method (A162, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A108 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A108 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A108 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A108 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A108 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A108 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A108 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A108 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A108 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A108 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR0.ABRA.A108 (Arg1))
            }
        }

        Method (A072, 1, Serialized)
        {
            Local0 = 0x00
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A005 = 0x00
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            If ((Local1 == 0x00))
            {
                A005 = Local2
                A161 (0x00)
            }

            If ((Local1 == 0x01))
            {
                A005 = Local2
                A161 (0x01)
            }

            If ((Local1 == 0x02))
            {
                A005 = Local2
                A011 (0x27, Local7)
            }

            If ((Local1 == 0x03))
            {
                A005 = Local2
                A011 (0x28, Local7)
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A003 (Local0, Local1)
        }

        Method (A004, 0, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = 0x00
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            If ((AD00 == 0x00))
            {
                A011 (0x11, Local7)
            }
            Else
            {
                A011 (0x12, Local7)
            }
        }

        Method (A012, 2, NotSerialized)
        {
        }
    }
}



SSDT13
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R23  ", 0x00000001)
{
    External (_SB_.PLTF, DeviceObj)

    Scope (\_SB.PLTF)
    {
        Name (_LPI, Package (0x04)  // _LPI: Low Power Idle States
        {
            0x00, 
            0x00, 
            0x01, 
            Package (0x0A)
            {
                0x000F4240, 
                0xC350, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "S0i3"
            }
        })
    }
}



SSDT14
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "PID0Ssdt", 0x00000001)
{
    External (_SB_.PCI0.LPC0.EC0_, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_.HKEY, DeviceObj)

    Scope (\_SB.PCI0.LPC0.EC0)
    {
        Device (LHKF)
        {
            Name (_HID, EisaId ("LEN0130"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }
}



SSDT15
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R23  ", 0x00000001)
{
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (_SB_.PCI0.GP17.MP2C, DeviceObj)
    External (_SB_.PCI0.GP17.XHC0, DeviceObj)
    External (_SB_.PCI0.GP17.XHC1, DeviceObj)
    External (_SB_.PCI0.GPP3, DeviceObj)
    External (_SB_.PCI0.GPP4, DeviceObj)
    External (_SB_.PCI0.GPP6.PXSX, DeviceObj)
    External (_SB_.PCI0.GPP7, UnknownObj)
    External (_SB_.PCI0.GPP7.L850, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_.ACAT, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.ACIN, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPC0.EC0_.ACOU, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPC0.EC0_.HPLD, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.HWAK, FieldUnitObj)
    External (_SB_.PCI0.LPC0.EC0_.LIDC, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPC0.EC0_.LIDO, MethodObj)    // 0 Arguments
    External (_SB_.PWRB, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)

    Scope (\_SB.GPIO)
    {
        Method (_AEI, 0, NotSerialized)  // _AEI: ACPI Event Interrupts
        {
            Name (BUF0, ResourceTemplate ()
            {
                GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullDefault, 0x1388,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
                GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullDefault, 0x1388,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x002C
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003D
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003E
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003A
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003B
                    }
                GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0009
                    }
                GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0012
                    }
            })
            M460 ("OEM-ASL-\\_SB.GPIO._AEI\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            Return (BUF0) /* \_SB_.GPIO._AEI.BUF0 */
        }

        OperationRegion (ECRM, EmbeddedControl, 0x00, 0xFF)
        Field (ECRM, ByteAcc, NoLock, Preserve)
        {
            Offset (0xCC), 
            PBCN,   8
        }

        OperationRegion (CMS1, SystemIO, 0x72, 0x02)
        Field (CMS1, ByteAcc, NoLock, Preserve)
        {
            INDX,   8, 
            DATA,   8
        }

        IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x8F), 
            CM8G,   8
        }

        Method (_EVT, 1, Serialized)  // _EVT: Event
        {
            Name (HPDW, 0x01)
            M460 ("  OEM-ASL-\\_SB.GPIO._EVT-Start Case %d\n", ToInteger (Arg0), 0x00, 0x00, 0x00, 0x00, 0x00)
            Switch (ToInteger (Arg0))
            {
                Case (0x00)
                {
                    CM8G = 0xBB
                    Local0 = \_SB.PCI0.LPC0.EC0.HWAK /* External reference */
                    If (((Local0 & 0x04) == 0x04))
                    {
                        CM8G = 0xCC
                        Local0 &= 0xFFFB
                        \_SB.PCI0.LPC0.EC0.HWAK = Local0
                        \_SB.PCI0.LPC0.EC0.LIDO ()
                        Sleep (0x01F4)
                    }
                    ElseIf (((Local0 & 0x20) == 0x20))
                    {
                        CM8G = 0xC1
                        Local0 &= 0xFFDF
                        \_SB.PCI0.LPC0.EC0.HWAK = Local0
                        \_SB.PCI0.LPC0.EC0.LIDC ()
                        Sleep (0x01F4)
                    }
                    ElseIf (((Local0 & 0x40) == 0x40))
                    {
                        CM8G = 0xDD
                        Local0 &= 0xFFBF
                        \_SB.PCI0.LPC0.EC0.HWAK = Local0
                        If ((\_SB.PCI0.LPC0.EC0.ACAT == 0x01))
                        {
                            \_SB.PCI0.LPC0.EC0.ACIN ()
                            CM8G = 0xEE
                        }
                        Else
                        {
                            \_SB.PCI0.LPC0.EC0.ACOU ()
                            CM8G = 0xFF
                        }
                    }
                    Else
                    {
                        CM8G = 0x00
                        M000 (0x3900)
                        Local0 &= 0xFFEF
                        \_SB.PCI0.LPC0.EC0.HWAK = Local0
                        Notify (\_SB.PWRB, 0x80) // Status Change
                    }
                }
                Case (0x02)
                {
                    M000 (0x3902)
                }
                Case (0x09)
                {
                    M000 (0x3902)
                    M460 ("    Notify (\\_SB.PCI0.GPP7.L850, 0x02)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Notify (\_SB.PCI0.GPP7, 0x02) // Device Wake
                    Notify (\_SB.PCI0.GPP7.L850, 0x02) // Device Wake
                }
                Case (0x11)
                {
                    M000 (0x3911)
                }
                Case (0x12)
                {
                    M000 (0x3912)
                    M460 ("    Notify (\\_SB.PCI0.GPP6.PXSX, 0x02)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Notify (\_SB.PCI0.GPP6.PXSX, 0x02) // Device Wake
                }
                Case (0x18)
                {
                    M000 (0x3918)
                    M460 ("    Notify (\\_SB.PCI0.GPP3, 0x02)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
                }
                Case (0x36)
                {
                    M000 (0x3936)
                    M460 ("    Notify (\\_SB.PCI0.GP17.MP2C, 0x02)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Notify (\_SB.PCI0.GP17.MP2C, 0x02) // Device Wake
                    If (((HPDW == 0x01) && (\_SB.PCI0.LPC0.EC0.HPLD == 0x01)))
                    {
                        M460 ("    Notify (\\_SB.PCI0.GP17.MP2C(HPDW):PWRB 0x80)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                        Notify (\_SB.PWRB, 0x80) // Status Change
                    }
                }
                Case (0x3A)
                {
                    M000 (0x393A)
                    M460 ("    Notify (\\_SB.PCI0.GP17.XHC0, 0x02)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
                }
                Case (0x3B)
                {
                    M000 (0x393B)
                    M460 ("    Notify (\\_SB.PCI0.GP17.XHC1, 0x02)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
                }
                Case (0x2A)
                {
                    M000 (0x392A)
                    M460 ("    Notify (\\_SB.PCI0.GPP7, 0x00)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Notify (\_SB.PCI0.GPP7, 0x00) // Bus Check
                }
                Case (0x3D)
                {
                    M000 (0x393D)
                    M460 ("    Notify (\\_SB.PCI0.GP17.AZAL, 0x02)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Notify (\_SB.PCI0.GP17.AZAL, 0x02) // Device Wake
                }
                Case (0x3E)
                {
                    M000 (0x393D)
                    M460 ("    Notify (\\_SB.PCI0.GP17.ACP, 0x02)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Notify (\_SB.PCI0.GP17.ACP, 0x02) // Device Wake
                }

            }

            M460 ("  OEM-ASL-\\_SB.GPIO._EVT-End Case %d\n", ToInteger (Arg0), 0x00, 0x00, 0x00, 0x00, 0x00)
        }
    }
}



SSDT16
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R23  ", 0x00000001)
{
    External (_ADR, IntObj)
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.CK17, MethodObj)    // 0 Arguments
    External (_SB_.PCI0, UnknownObj)
    External (_SB_.PCI0.DADR, IntObj)
    External (_SB_.PCI0.EBUS, IntObj)
    External (_SB_.PCI0.GP11, DeviceObj)
    External (_SB_.PCI0.GP12, DeviceObj)
    External (_SB_.PCI0.GP19, DeviceObj)
    External (_SB_.PCI0.GP19.NHI0, DeviceObj)
    External (_SB_.PCI0.GP19.NHI1, DeviceObj)
    External (_SB_.PCI0.GP19.XHC2, DeviceObj)
    External (_SB_.PCI0.GP19.XHC3, DeviceObj)
    External (_SB_.PCI0.GP19.XHC3.RHUB.PRT2, DeviceObj)
    External (_SB_.PCI0.GP19.XHC4, DeviceObj)
    External (_SB_.PCI0.GP19.XHC4.RHUB.PRT2, DeviceObj)
    External (_SB_.PCI0.RPRM, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.SPCH, MethodObj)    // 2 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M045, MethodObj)    // 0 Arguments
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (SDSW, MethodObj)    // 3 Arguments
    External (SINI, MethodObj)    // 0 Arguments
    External (SREG, MethodObj)    // 2 Arguments
    External (SSTA, MethodObj)    // 0 Arguments

    Scope (\)
    {
        Name (P3D3, 0x55)
        Name (G0D3, 0x04)
        Name (G3D3, 0x04)
        Name (RCRS, 0x55)
        Name (G5D3, 0x04)
        Name (P4D3, 0x55)
        Name (H0D3, 0x04)
        Name (CIMS, 0xCC)
        Name (CPSX, 0x80)
        Name (DIMS, 0xCF)
        Name (DDEP, 0x55)
    }

    Scope (\_SB)
    {
        Method (CK19, 0, NotSerialized)
        {
            Local0 = \_SB.PCI0.GP19.RPRM ((\_SB.PCI0.GP19.DADR + 0x54), 0x02)
            \_SB.PCI0.GP19.WPRM ((\_SB.PCI0.GP19.DADR + 0x54), 0x02, (Local0 & 0x7FFC))
            Local1 = \_SB.PCI0.GP19.XHC2.RPRM ((\_SB.PCI0.GP19.XHC2.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP19.XHC3.RPRM ((\_SB.PCI0.GP19.XHC3.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP19.XHC4.RPRM ((\_SB.PCI0.GP19.XHC4.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP19.NHI0.RPRM ((\_SB.PCI0.GP19.NHI0.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP19.NHI1.RPRM ((\_SB.PCI0.GP19.NHI1.DADR + 0x54), 0x02)
            \_SB.PCI0.GP19.WPRM ((\_SB.PCI0.GP19.DADR + 0x54), 0x02, (Local0 & 0x7FFF))
            Local0 = \_SB.PCI0.GP11.RPRM ((\_SB.PCI0.GP11.DADR + 0x54), 0x02)
            Local0 = \_SB.PCI0.GP12.RPRM ((\_SB.PCI0.GP12.DADR + 0x54), 0x02)
        }

        Method (OPTS, 1, NotSerialized)
        {
            M460 ("  OEM-ASL-\\_SB.OPTS (0x%X) Start\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (\_SB.CK17))
            {
                \_SB.CK17 ()
            }

            \_SB.CK19 ()
            M460 ("  OEM-ASL-\\_SB.OPTS (0x%X) End\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (OWAK, 1, NotSerialized)
        {
            M460 ("  OEM-ASL-\\_SB.OWAK (0x%X) Start\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (\_SB.CK17))
            {
                \_SB.CK17 ()
            }

            \_SB.CK19 ()
            M460 ("  OEM-ASL-\\_SB.OWAK (0x%X) End\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
        }
    }

    Scope (\_SB.PCI0.GP19)
    {
        Method (YS0W, 0, Serialized)
        {
            Local0 = 0x00
            If ((\P3D3 != 0x55))
            {
                Local0 = \P3D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }

        Method (YPRW, 0, Serialized)
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            Return (Package (0x02)
            {
                0x1A, 
                0x03
            })
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, 0x00)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP19.RPRM.VARR */
            If ((Arg1 == 0x01))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == 0x01))
            {
                OperationRegion (VARA, SystemMemory, Local0, 0x01)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = 0x00
            Local0 = 0x00
            While ((Local0 <= 0x1F))
            {
                Local1 = 0x00
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != 0x00)))
                    {
                        Local2 |= (0x01 << Local0)
                    }
                    ElseIf ((Local1 == 0x00))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = 0x00
            Local1 = RPRM ((Arg0 + 0x34), 0x01)
            While ((Local1 != 0x00))
            {
                Local2 = RPRM ((DADR + Local1), 0x01)
                If (((Local2 == 0x00) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* External reference */
                    }
                    Else
                    {
                        DBUS = 0x00
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            0x01) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + 0x00), 0x04)
                    If (((Local1 == Local0) || (Local1 == 0x00)))
                    {
                        DSTA = 0x00
                        ESTA = 0x00
                        If ((DBUS != 0x00))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), 0x01)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            0x01) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            0x01) & 0x40) == 0x00))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == 0x00))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = 0x00
                    }
                }
                Else
                {
                    DSTA = 0x00
                    ESTA = 0xEE
                }
            }

            If (((PCSA == 0x01) && (PWST == 0xD3)))
            {
                PWST = 0xD0
            }

            If (((PCSA == 0x00) && (PWST == 0xD0)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP19.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + 0x00), 0x04)
            If (((Local1 == Local0) || (Local1 == 0x00)))
            {
                PCSA = 0x00
                PWST = 0xD3
            }
            Else
            {
                PCSA = 0x01
                PWST = 0xD0
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X\n", DADR, PCSA, PWST, 0x00, 0x00, 0x00)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == 0x01)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                    {
                        PCSA = 0x01
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == 0x00)))
            {
                PCSA = 0x00
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
        }
    }

    Scope (\_SB.PCI0.GP19.XHC2)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            Local0 = 0x00
            If ((\G0D3 != 0x55))
            {
                Local0 = \G0D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            Return (Package (0x02)
            {
                0x1A, 
                0x03
            })
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F01)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F03)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F05)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F06)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F08)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, 0x00)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, 0x00)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP19.XHC2.RPRM.VARR */
            If ((Arg1 == 0x01))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == 0x01))
            {
                OperationRegion (VARA, SystemMemory, Local0, 0x01)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = 0x00
            Local0 = 0x00
            While ((Local0 <= 0x1F))
            {
                Local1 = 0x00
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != 0x00)))
                    {
                        Local2 |= (0x01 << Local0)
                    }
                    ElseIf ((Local1 == 0x00))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = 0x00
            Local1 = RPRM ((Arg0 + 0x34), 0x01)
            While ((Local1 != 0x00))
            {
                Local2 = RPRM ((DADR + Local1), 0x01)
                If (((Local2 == 0x00) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP19.EBUS */
                    }
                    Else
                    {
                        DBUS = 0x00
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            0x01) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + 0x00), 0x04)
                    If (((Local1 == Local0) || (Local1 == 0x00)))
                    {
                        DSTA = 0x00
                        ESTA = 0x00
                        If ((DBUS != 0x00))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), 0x01)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            0x01) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            0x01) & 0x40) == 0x00))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == 0x00))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = 0x00
                    }
                }
                Else
                {
                    DSTA = 0x00
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == 0x01) && (PWST == 0xD3)) && (PW3S == 0x01)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == 0x00) && (PWST == 0xD0)) && (PW3S == 0x00)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP19.XHC2.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + 0x00), 0x04)
            If (((Local1 == Local0) || (Local1 == 0x00)))
            {
                PCSA = 0x00
                PWST = 0xD3
                PW3S = 0x00
            }
            Else
            {
                PCSA = 0x01
                PWST = 0xD0
                PW3S = 0x01
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, 0x00, 0x00)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == 0x01)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                    {
                        PCSA = 0x01
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == 0x00)))
            {
                PCSA = 0x00
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, 0x00)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (POWS))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP19.XHC2.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == 0x00))
                {
                    PW3S = 0x01
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == 0x01))
                {
                    PW3S = 0x00
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP19.XHC3)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F34)
            Local0 = 0x00
            If ((\G3D3 != 0x55))
            {
                Local0 = \G3D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            Return (Package (0x02)
            {
                0x1A, 
                0x03
            })
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F31)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3._PS0 ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F33)
            If ((CondRefOf (\_SB.PCI0.GP11.PCSA) && CondRefOf (\_SB.PCI0.GP19.NHI0.PCSA)))
            {
                M460 ("    GP11.PCSA = %d  XHC3.PCSA = %d  NHI0.PCSA = %d\n", \_SB.PCI0.GP11.PCSA, \_SB.PCI0.GP19.XHC3.PCSA, \_SB.PCI0.GP19.NHI0.PCSA, 0x00, 0x00, 0x00)
            }

            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3._PS3 ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F35)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3.PWRS._STA ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F36)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3.PWRS._ON ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F38)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3.PWRS._OFF ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, 0x00)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, 0x00)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP19.XHC3.RPRM.VARR */
            If ((Arg1 == 0x01))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == 0x01))
            {
                OperationRegion (VARA, SystemMemory, Local0, 0x01)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = 0x00
            Local0 = 0x00
            While ((Local0 <= 0x1F))
            {
                Local1 = 0x00
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != 0x00)))
                    {
                        Local2 |= (0x01 << Local0)
                    }
                    ElseIf ((Local1 == 0x00))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = 0x00
            Local1 = RPRM ((Arg0 + 0x34), 0x01)
            While ((Local1 != 0x00))
            {
                Local2 = RPRM ((DADR + Local1), 0x01)
                If (((Local2 == 0x00) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP19.EBUS */
                    }
                    Else
                    {
                        DBUS = 0x00
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            0x01) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + 0x00), 0x04)
                    If (((Local1 == Local0) || (Local1 == 0x00)))
                    {
                        DSTA = 0x00
                        ESTA = 0x00
                        If ((DBUS != 0x00))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), 0x01)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            0x01) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            0x01) & 0x40) == 0x00))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == 0x00))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = 0x00
                    }
                }
                Else
                {
                    DSTA = 0x00
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == 0x01) && (PWST == 0xD3)) && (PW3S == 0x01)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == 0x00) && (PWST == 0xD0)) && (PW3S == 0x00)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP19.XHC3.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + 0x00), 0x04)
            If (((Local1 == Local0) || (Local1 == 0x00)))
            {
                PCSA = 0x00
                PWST = 0xD3
                PW3S = 0x00
            }
            Else
            {
                PCSA = 0x01
                PWST = 0xD0
                PW3S = 0x01
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, 0x00, 0x00)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == 0x01)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                    {
                        PCSA = 0x01
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == 0x00)))
            {
                PCSA = 0x00
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, 0x00)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (POWS))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP19.XHC3.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == 0x00))
                {
                    PW3S = 0x01
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == 0x01))
                {
                    PW3S = 0x00
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP19.XHC3.RHUB.PRT2)
    {
        Method (_DEP, 0, Serialized)  // _DEP: Dependencies
        {
            If ((M046 == 0xAA))
            {
                Local0 = M045 ()
            }

            If (((\DDEP == 0x01) && (CondRefOf (\_SB.PCI0.GP19.NHI0) && (M046 < 0x0B))))
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3.RHUB.PRT2._DEP  Return Package (1) {\\_SB.PCI0.GP19.NHI0}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (Package (0x01)
                {
                    \_SB.PCI0.GP19.NHI0
                })
            }
            Else
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3.RHUB.PRT2._DEP  Return Package (1) {\\_SB.PCI0}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (Package (0x01)
                {
                    \_SB.PCI0
                })
            }
        }

        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
        {
            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
            Package (0x02)
            {
                Package (0x02)
                {
                    "usb4-host-interface", 
                    \_SB.PCI0.GP19.NHI0
                }, 

                Package (0x02)
                {
                    "usb4-port-number", 
                    0x01
                }
            }
        })
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("ce2ee385-00e6-48cb-9f05-2edb927c4899") /* USB Controller */))
            {
                CreateDWordField (Arg0, 0x00, UID0)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3.RHUB.PRT2._DSM (UUID 0x%X, 0x%X, 0x%X)\n", UID0, Arg1, Arg2, 0x00, 0x00, 0x00)
                Switch (Arg2)
                {
                    Case (0x00)
                    {
                        If ((M046 < 0x0B))
                        {
                            M460 ("    Return Buffer (1) {0x21}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                            Return (Buffer (0x01)
                            {
                                 0x21                                             // !
                            })
                        }
                        Else
                        {
                            M460 ("    Return Buffer (1) {0x00}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                            Return (Buffer (0x01)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Case (0x05)
                    {
                        If ((M046 < 0x0B))
                        {
                            M460 ("    Return Integer 0x01\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                            Return (0x01)
                        }
                        Else
                        {
                            M460 ("    Unsupported function\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                        }
                    }
                    Default
                    {
                        M460 ("    Unsupported function\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    }

                }
            }
            Else
            {
                M460 ("    Return Buffer (1) {0x00} (Unsupported UUID)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (\_SB.PCI0.GP19.XHC4)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F44)
            Local0 = 0x00
            If ((\G3D3 != 0x55))
            {
                Local0 = \G3D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            Return (Package (0x02)
            {
                0x1A, 
                0x03
            })
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F41)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4._PS0 ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F43)
            If ((CondRefOf (\_SB.PCI0.GP12.PCSA) && CondRefOf (\_SB.PCI0.GP19.NHI1.PCSA)))
            {
                M460 ("    GP12.PCSA = %d  XHC4.PCSA = %d  NHI1.PCSA = %d\n", \_SB.PCI0.GP12.PCSA, \_SB.PCI0.GP19.XHC4.PCSA, \_SB.PCI0.GP19.NHI1.PCSA, 0x00, 0x00, 0x00)
            }

            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4._PS3 ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F45)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4.PWRS._STA ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F46)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4.PWRS._ON ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F48)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4.PWRS._OFF ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, 0x00)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, 0x00)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP19.XHC4.RPRM.VARR */
            If ((Arg1 == 0x01))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == 0x01))
            {
                OperationRegion (VARA, SystemMemory, Local0, 0x01)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = 0x00
            Local0 = 0x00
            While ((Local0 <= 0x1F))
            {
                Local1 = 0x00
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != 0x00)))
                    {
                        Local2 |= (0x01 << Local0)
                    }
                    ElseIf ((Local1 == 0x00))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = 0x00
            Local1 = RPRM ((Arg0 + 0x34), 0x01)
            While ((Local1 != 0x00))
            {
                Local2 = RPRM ((DADR + Local1), 0x01)
                If (((Local2 == 0x00) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP19.EBUS */
                    }
                    Else
                    {
                        DBUS = 0x00
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            0x01) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + 0x00), 0x04)
                    If (((Local1 == Local0) || (Local1 == 0x00)))
                    {
                        DSTA = 0x00
                        ESTA = 0x00
                        If ((DBUS != 0x00))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), 0x01)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            0x01) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            0x01) & 0x40) == 0x00))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == 0x00))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = 0x00
                    }
                }
                Else
                {
                    DSTA = 0x00
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == 0x01) && (PWST == 0xD3)) && (PW3S == 0x01)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == 0x00) && (PWST == 0xD0)) && (PW3S == 0x00)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP19.XHC4.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + 0x00), 0x04)
            If (((Local1 == Local0) || (Local1 == 0x00)))
            {
                PCSA = 0x00
                PWST = 0xD3
                PW3S = 0x00
            }
            Else
            {
                PCSA = 0x01
                PWST = 0xD0
                PW3S = 0x01
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, 0x00, 0x00)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == 0x01)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                    {
                        PCSA = 0x01
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == 0x00)))
            {
                PCSA = 0x00
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, 0x00)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (POWS))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP19.XHC4.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == 0x00))
                {
                    PW3S = 0x01
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == 0x01))
                {
                    PW3S = 0x00
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP19.XHC4.RHUB.PRT2)
    {
        Method (_DEP, 0, Serialized)  // _DEP: Dependencies
        {
            If ((M046 == 0xAA))
            {
                Local0 = M045 ()
            }

            If (((\DDEP == 0x01) && (CondRefOf (\_SB.PCI0.GP19.NHI1) && (M046 < 0x0B))))
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4.RHUB.PRT2._DEP  Return Package (1) {\\_SB.PCI0.GP19.NHI1}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (Package (0x01)
                {
                    \_SB.PCI0.GP19.NHI1
                })
            }
            Else
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4.RHUB.PRT2._DEP  Return Package (1) {\\_SB.PCI0}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (Package (0x01)
                {
                    \_SB.PCI0
                })
            }
        }

        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
        {
            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
            Package (0x02)
            {
                Package (0x02)
                {
                    "usb4-host-interface", 
                    \_SB.PCI0.GP19.NHI1
                }, 

                Package (0x02)
                {
                    "usb4-port-number", 
                    0x02
                }
            }
        })
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("ce2ee385-00e6-48cb-9f05-2edb927c4899") /* USB Controller */))
            {
                CreateDWordField (Arg0, 0x00, UID0)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4.RHUB.PRT2._DSM (UUID 0x%X, 0x%X, 0x%X)\n", UID0, Arg1, Arg2, 0x00, 0x00, 0x00)
                Switch (Arg2)
                {
                    Case (0x00)
                    {
                        If ((M046 < 0x0B))
                        {
                            M460 ("    Return Buffer (1) {0x21}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                            Return (Buffer (0x01)
                            {
                                 0x21                                             // !
                            })
                        }
                        Else
                        {
                            M460 ("    Return Buffer (1) {0x00}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                            Return (Buffer (0x01)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Case (0x05)
                    {
                        If ((M046 < 0x0B))
                        {
                            M460 ("    Return Integer 0x01\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                            Return (0x01)
                        }
                        Else
                        {
                            M460 ("    Unsupported function\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                        }
                    }
                    Default
                    {
                        M460 ("    Unsupported function\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    }

                }
            }
            Else
            {
                M460 ("    Return Buffer (1) {0x00} (Unsupported UUID)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (\_SB.PCI0.GP19.NHI0)
    {
        Method (SDEP, 1, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0.SDEP (%d)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
            If ((\DDEP != 0x01))
            {
                Local1 = \DIMS
                M232 (Local1, Arg0, 0x00)
                \DDEP = 0x01
            }
        }

        Method (_RST, 0, Serialized)  // _RST: Device Reset
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0._RST Call \\_SB.ALIB (0x15, 0)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            \_SB.ALIB (0x15, 0x00)
        }

        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F54)
            Local0 = 0x00
            If ((\G5D3 != 0x55))
            {
                Local0 = \G5D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            Return (Package (0x03)
            {
                0x1A, 
                0x03, 
                PWRS
            })
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F51)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0._PS0 ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            If ((\P4D3 != 0x55))
            {
                If (CondRefOf (\_SB.PCI0.GP11.SWUS.PCSA))
                {
                    If ((\_SB.PCI0.GP11.SWUS.PCSA == 0x00))
                    {
                        Local1 = \CIMS
                        If (((\CPSX & 0x01) == 0x00))
                        {
                            \CPSX |= 0x01
                            Local2 = \CPSX
                            M232 (Local1, Local2, 0x00)
                        }
                    }
                }
            }
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F53)
            If ((CondRefOf (\_SB.PCI0.GP11.PCSA) && CondRefOf (\_SB.PCI0.GP19.XHC3.PCSA)))
            {
                M460 ("    GP11.PCSA = %d  XHC3.PCSA = %d  NHI0.PCSA = %d\n", \_SB.PCI0.GP11.PCSA, \_SB.PCI0.GP19.XHC3.PCSA, \_SB.PCI0.GP19.NHI0.PCSA, 0x00, 0x00, 0x00)
            }

            If ((\G5D3 == 0x04))
            {
                M460 ("    Call \\_SB.ALIB (0x14, 1) - Start\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_SB.ALIB (0x14, 0x01)
                M460 ("    Call \\_SB.ALIB (0x14, 1) - End\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            }

            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0._PS3 - End\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            If ((\P4D3 != 0x55))
            {
                Local1 = \CIMS
                If (((\CPSX & 0x01) == 0x01))
                {
                    \CPSX &= 0x7E
                    Local2 = \CPSX
                    M232 (Local1, Local2, 0x00)
                }
            }
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F55)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0.PWRS._STA ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F56)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0.PWRS.ON ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F58)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0.PWRS.OFF ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, 0x00)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, 0x00)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP19.NHI0.RPRM.VARR */
            If ((Arg1 == 0x01))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == 0x01))
            {
                OperationRegion (VARA, SystemMemory, Local0, 0x01)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = 0x00
            Local0 = 0x00
            While ((Local0 <= 0x1F))
            {
                Local1 = 0x00
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != 0x00)))
                    {
                        Local2 |= (0x01 << Local0)
                    }
                    ElseIf ((Local1 == 0x00))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = 0x00
            Local1 = RPRM ((Arg0 + 0x34), 0x01)
            While ((Local1 != 0x00))
            {
                Local2 = RPRM ((DADR + Local1), 0x01)
                If (((Local2 == 0x00) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP19.EBUS */
                    }
                    Else
                    {
                        DBUS = 0x00
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            0x01) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + 0x00), 0x04)
                    If (((Local1 == Local0) || (Local1 == 0x00)))
                    {
                        DSTA = 0x00
                        ESTA = 0x00
                        If ((DBUS != 0x00))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), 0x01)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            0x01) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            0x01) & 0x40) == 0x00))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == 0x00))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = 0x00
                    }
                }
                Else
                {
                    DSTA = 0x00
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == 0x01) && (PWST == 0xD3)) && (PW3S == 0x01)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == 0x00) && (PWST == 0xD0)) && (PW3S == 0x00)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP19.NHI0.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + 0x00), 0x04)
            If (((Local1 == Local0) || (Local1 == 0x00)))
            {
                PCSA = 0x00
                PWST = 0xD3
                PW3S = 0x00
            }
            Else
            {
                PCSA = 0x01
                PWST = 0xD0
                PW3S = 0x01
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, 0x00, 0x00)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == 0x01)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                    {
                        PCSA = 0x01
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == 0x00)))
            {
                PCSA = 0x00
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, 0x00)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (POWS))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP19.NHI0.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == 0x00))
                {
                    PW3S = 0x01
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == 0x01))
                {
                    PW3S = 0x00
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP19.NHI1)
    {
        Method (SDEP, 1, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1.SDEP (%d)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
            If ((\DDEP != 0x01))
            {
                Local1 = \DIMS
                M232 (Local1, Arg0, 0x00)
                \DDEP = 0x01
            }
        }

        Method (_RST, 0, Serialized)  // _RST: Device Reset
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1._RST Call \\_SB.ALIB (0x15, 1)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            \_SB.ALIB (0x15, 0x01)
        }

        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F64)
            Local0 = 0x00
            If ((\G5D3 != 0x55))
            {
                Local0 = \G5D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            Return (Package (0x03)
            {
                0x1A, 
                0x03, 
                PWRS
            })
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F61)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1._PS0 ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            If ((\P4D3 != 0x55))
            {
                If (CondRefOf (\_SB.PCI0.GP12.SWUS.PCSA))
                {
                    If ((\_SB.PCI0.GP12.SWUS.PCSA == 0x00))
                    {
                        Local1 = \CIMS
                        If (((\CPSX & 0x02) == 0x00))
                        {
                            \CPSX |= 0x02
                            Local2 = \CPSX
                            M232 (Local1, Local2, 0x00)
                        }
                    }
                }
            }
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F63)
            If ((CondRefOf (\_SB.PCI0.GP12.PCSA) && CondRefOf (\_SB.PCI0.GP19.XHC4.PCSA)))
            {
                M460 ("    GP12.PCSA = %d  XHC4.PCSA = %d  NHI1.PCSA = %d\n", \_SB.PCI0.GP12.PCSA, \_SB.PCI0.GP19.XHC4.PCSA, \_SB.PCI0.GP19.NHI1.PCSA, 0x00, 0x00, 0x00)
            }

            If ((\G5D3 == 0x04))
            {
                M460 ("    Call \\_SB.ALIB (0x14, 2) - Start\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_SB.ALIB (0x14, 0x02)
                M460 ("    Call \\_SB.ALIB (0x14, 2) - End\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            }

            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1._PS3 - End\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            If ((\P4D3 != 0x55))
            {
                Local1 = \CIMS
                If (((\CPSX & 0x02) == 0x02))
                {
                    \CPSX &= 0x7D
                    Local2 = \CPSX
                    M232 (Local1, Local2, 0x00)
                }
            }
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F65)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1.PWRS._STA ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F66)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1.PWRS.ON ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F68)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1.PWRS.OFF ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, 0x00)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, 0x00)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP19.NHI1.RPRM.VARR */
            If ((Arg1 == 0x01))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == 0x01))
            {
                OperationRegion (VARA, SystemMemory, Local0, 0x01)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = 0x00
            Local0 = 0x00
            While ((Local0 <= 0x1F))
            {
                Local1 = 0x00
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != 0x00)))
                    {
                        Local2 |= (0x01 << Local0)
                    }
                    ElseIf ((Local1 == 0x00))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = 0x00
            Local1 = RPRM ((Arg0 + 0x34), 0x01)
            While ((Local1 != 0x00))
            {
                Local2 = RPRM ((DADR + Local1), 0x01)
                If (((Local2 == 0x00) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP19.EBUS */
                    }
                    Else
                    {
                        DBUS = 0x00
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            0x01) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + 0x00), 0x04)
                    If (((Local1 == Local0) || (Local1 == 0x00)))
                    {
                        DSTA = 0x00
                        ESTA = 0x00
                        If ((DBUS != 0x00))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), 0x01)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            0x01) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            0x01) & 0x40) == 0x00))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == 0x00))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = 0x00
                    }
                }
                Else
                {
                    DSTA = 0x00
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == 0x01) && (PWST == 0xD3)) && (PW3S == 0x01)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == 0x00) && (PWST == 0xD0)) && (PW3S == 0x00)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP19.NHI1.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + 0x00), 0x04)
            If (((Local1 == Local0) || (Local1 == 0x00)))
            {
                PCSA = 0x00
                PWST = 0xD3
                PW3S = 0x00
            }
            Else
            {
                PCSA = 0x01
                PWST = 0xD0
                PW3S = 0x01
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, 0x00, 0x00)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == 0x01)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                    {
                        PCSA = 0x01
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == 0x00)))
            {
                PCSA = 0x00
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, 0x00)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (POWS))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP19.NHI1.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == 0x00))
                {
                    PW3S = 0x01
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == 0x01))
                {
                    PW3S = 0x00
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP11)
    {
        Method (_DEP, 0, Serialized)  // _DEP: Dependencies
        {
            If ((M046 == 0xAA))
            {
                Local0 = M045 ()
            }

            If (((\DDEP == 0x01) && (CondRefOf (\_SB.PCI0.GP19.NHI0) && (M046 < 0x0B))))
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11._DEP  Return Package (1) {\\_SB.PCI0.GP19.NHI0}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (Package (0x01)
                {
                    \_SB.PCI0.GP19.NHI0
                })
            }
            Else
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11._DEP  Return Package (1) {\\_SB.PCI0}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (Package (0x01)
                {
                    \_SB.PCI0
                })
            }
        }

        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F74)
            Local0 = 0x00
            If ((\P4D3 != 0x55))
            {
                Local0 = \P4D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11._PRW ()  Return Package (2) {0x1A, 0x04}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            Return (Package (0x03)
            {
                0x1A, 
                0x04, 
                PWRS
            })
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F71)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11._PS0 ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            If ((\P4D3 != 0x55))
            {
                Local1 = \CIMS
                If (((\CPSX & 0x01) == 0x01))
                {
                    \CPSX &= 0x7E
                    Local2 = \CPSX
                    M232 (Local1, Local2, 0x00)
                }
            }
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F73)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11._PS3 ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            If ((\P4D3 != 0x55))
            {
                If (CondRefOf (\_SB.PCI0.GP19.NHI0.PCSA))
                {
                    If ((\_SB.PCI0.GP19.NHI0.PCSA == 0x01))
                    {
                        Local1 = \CIMS
                        If (((\CPSX & 0x01) == 0x00))
                        {
                            \CPSX |= 0x01
                            Local2 = \CPSX
                            M232 (Local1, Local2, 0x00)
                        }
                    }
                }
            }
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F75)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11.PWRS._STA ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F76)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11.PWRS._ON ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F78)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11.PWRS._OFF ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, 0x00)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, 0x00)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP11.RPRM.VARR */
            If ((Arg1 == 0x01))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == 0x01))
            {
                OperationRegion (VARA, SystemMemory, Local0, 0x01)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = 0x00
            Local0 = 0x00
            While ((Local0 <= 0x1F))
            {
                Local1 = 0x00
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != 0x00)))
                    {
                        Local2 |= (0x01 << Local0)
                    }
                    ElseIf ((Local1 == 0x00))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = 0x00
            Local1 = RPRM ((Arg0 + 0x34), 0x01)
            While ((Local1 != 0x00))
            {
                Local2 = RPRM ((DADR + Local1), 0x01)
                If (((Local2 == 0x00) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* External reference */
                    }
                    Else
                    {
                        DBUS = 0x00
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            0x01) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + 0x00), 0x04)
                    If (((Local1 == Local0) || (Local1 == 0x00)))
                    {
                        DSTA = 0x00
                        ESTA = 0x00
                        If ((DBUS != 0x00))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), 0x01)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            0x01) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            0x01) & 0x40) == 0x00))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == 0x00))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = 0x00
                    }
                }
                Else
                {
                    DSTA = 0x00
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == 0x01) && (PWST == 0xD3)) && (PW3S == 0x01)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == 0x00) && (PWST == 0xD0)) && (PW3S == 0x00)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP11.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + 0x00), 0x04)
            If (((Local1 == Local0) || (Local1 == 0x00)))
            {
                PCSA = 0x00
                PWST = 0xD3
                PW3S = 0x00
            }
            Else
            {
                PCSA = 0x01
                PWST = 0xD0
                PW3S = 0x01
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, 0x00, 0x00)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == 0x01)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                    {
                        PCSA = 0x01
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == 0x00)))
            {
                PCSA = 0x00
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, 0x00)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (POWS))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP11.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == 0x00))
                {
                    PW3S = 0x01
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == 0x01))
                {
                    PW3S = 0x00
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
        Name (_DSD, Package (0x06)  // _DSD: Device-Specific Data
        {
            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
            Package (0x01)
            {
                Package (0x02)
                {
                    "HotPlugSupportInD3", 
                    0x01
                }
            }, 

            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
            Package (0x02)
            {
                Package (0x02)
                {
                    "ExternalFacingPort", 
                    0x01
                }, 

                Package (0x02)
                {
                    "UID", 
                    0x00
                }
            }, 

            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
            Package (0x02)
            {
                Package (0x02)
                {
                    "usb4-host-interface", 
                    \_SB.PCI0.GP19.NHI0
                }, 

                Package (0x02)
                {
                    "usb4-port-number", 
                    0x01
                }
            }
        })
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                CreateDWordField (Arg0, 0x00, UID0)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11._DSM (UUID 0x%X, 0x%X, 0x%X)\n", UID0, Arg1, Arg2, 0x00, 0x00, 0x00)
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Switch (Arg1)
                        {
                            Case (0x00)
                            {
                                M460 ("    Return 0x0\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                                Return (Buffer (0x01)
                                {
                                     0x00                                             // .
                                })
                            }
                            Case (0x01)
                            {
                                M460 ("    Return 0x21\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                                Return (Buffer (0x01)
                                {
                                     0x21                                             // !
                                })
                            }

                        }

                        M460 ("    Return 0x61\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                        Return (Buffer (0x01)
                        {
                             0x61                                             // a
                        })
                    }
                    Case (0x05)
                    {
                        If ((Arg1 >= 0x01))
                        {
                            Local0 = 0x00
                            If ((\RCRS != 0x55))
                            {
                                Local0 = \RCRS
                            }

                            M460 ("    Return %d\n", Local0, 0x00, 0x00, 0x00, 0x00, 0x00)
                            Return (Local0)
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            M460 ("    Return Package (4) {0x02, 0xC8, 0x02, 0xC8}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                            Return (Package (0x04)
                            {
                                0x02, 
                                0xC8, 
                                0x02, 
                                0xC8
                            })
                        }
                    }

                }
            }
        }

        Device (SWUS)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            Method (_RMV, 0, Serialized)  // _RMV: Removal Status
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._RMV ()  Return 0\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (0x00)
            }

            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
            {
                M000 (0x3F94)
                Local0 = 0x00
                If ((\H0D3 != 0x55))
                {
                    Local0 = \H0D3
                }

                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._S0W ()  Return %d\n", Local0, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (Local0)
            }

            Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._PRW ()  Return Package (2) {0x1A, 0x04}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (Package (0x02)
                {
                    0x1A, 
                    0x04
                })
            }

            Method (PPS0, 0, Serialized)
            {
                M000 (0x3F91)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._PS0 ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            }

            Method (PPS3, 0, Serialized)
            {
                M000 (0x3F93)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._PS3 ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            }

            Method (PSTA, 0, Serialized)
            {
                M000 (0x3F95)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS.PWRS._STA ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            }

            Method (P_ON, 0, Serialized)
            {
                M000 (0x3F96)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS.PWRS._ON ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            }

            Method (P_OF, 0, Serialized)
            {
                M000 (0x3F98)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS.PWRS._OFF ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            }

            Name (DADR, 0xEEEEEEEE)
            Name (DSTA, 0xEE)
            Name (DBUS, 0xEEEE)
            Name (PCSA, 0x00)
            Name (PWST, 0xD3)
            Name (ESTA, 0xEE)
            Name (EBUS, 0xEEEE)
            Name (PW3S, 0x00)
            Method (RPRM, 2, NotSerialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, AnyAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \_SB_.PCI0.GP11.SWUS.RPRM.VARR */
                If ((Arg1 == 0x01))
                {
                    Local1 &= 0xFF
                }
                ElseIf ((Arg1 == 0x02))
                {
                    Local1 &= 0xFFFF
                }
                ElseIf ((Arg1 == 0x03))
                {
                    Local1 &= 0x00FFFFFF
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
                Return (Local1)
            }

            Method (WPRM, 3, NotSerialized)
            {
                Local0 = Arg0
                If ((Arg1 == 0x01))
                {
                    OperationRegion (VARA, SystemMemory, Local0, 0x01)
                    Field (VARA, AnyAcc, NoLock, Preserve)
                    {
                        VARE,   8
                    }

                    VARE = Arg2
                }
                ElseIf ((Arg1 == 0x02))
                {
                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                    Field (VARB, AnyAcc, NoLock, Preserve)
                    {
                        VARF,   16
                    }

                    VARF = Arg2
                }
                ElseIf ((Arg1 == 0x03))
                {
                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                    Field (VARC, AnyAcc, NoLock, Preserve)
                    {
                        VARG,   24
                    }

                    VARG = Arg2
                }
                Else
                {
                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                    Field (VARD, AnyAcc, NoLock, Preserve)
                    {
                        VARH,   32
                    }

                    VARH = Arg2
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
            }

            Method (SPDP, 1, NotSerialized)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = 0x00
                Local0 = 0x00
                While ((Local0 <= 0x1F))
                {
                    Local1 = 0x00
                    While ((Local1 <= 0x07))
                    {
                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                            0x0F) & 0x000F8000))
                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                        Local4 = RPRM ((M083 + Local3), 0x04)
                        If (((Local4 != Local5) && (Local4 != 0x00)))
                        {
                            Local2 |= (0x01 << Local0)
                        }
                        ElseIf ((Local1 == 0x00))
                        {
                            Break
                        }

                        Local1++
                    }

                    Local0++
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
                Return (Local2)
            }

            Method (SPCH, 2, NotSerialized)
            {
                Local0 = 0x00
                Local1 = RPRM ((Arg0 + 0x34), 0x01)
                While ((Local1 != 0x00))
                {
                    Local2 = RPRM ((DADR + Local1), 0x01)
                    If (((Local2 == 0x00) || (Local2 == 0xFF)))
                    {
                        Break
                    }

                    If ((Local2 == Arg1))
                    {
                        Local0 = Local1
                        Break
                    }

                    Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
                Return (Local0)
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                {
                    If ((DBUS == 0xEEEE))
                    {
                        If (CondRefOf (^^EBUS))
                        {
                            DBUS = ^^EBUS /* \_SB_.PCI0.GP11.EBUS */
                        }
                        Else
                        {
                            DBUS = 0x00
                        }
                    }

                    If ((DBUS != 0xEEEE))
                    {
                        If ((DADR == 0xEEEEEEEE))
                        {
                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                0x01) & 0x000F8000))
                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                            DADR = (M083 + Local0)
                        }

                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + 0x00), 0x04)
                        If (((Local1 == Local0) || (Local1 == 0x00)))
                        {
                            DSTA = 0x00
                            ESTA = 0x00
                            If ((DBUS != 0x00))
                            {
                                Local2 = ^^SPCH (^^DADR, 0x10)
                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                    0x40) == 0x40))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                        }
                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                        {
                            EBUS = RPRM ((DADR + 0x19), 0x01)
                            Local2 = SPCH (DADR, 0x10)
                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                0x01) >> 0x04) & 0x0F) == 0x05))
                            {
                                If ((EBUS == 0x00))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                ElseIf ((SPDP (EBUS) == 0x00))
                                {
                                    DSTA = 0x00
                                    ESTA = 0x00
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                0x01) & 0x40) == 0x00))
                            {
                                If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                    0x40) == 0x00))
                                {
                                    DSTA = 0x00
                                    ESTA = 0x00
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                            ElseIf ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x00
                        }
                    }
                    Else
                    {
                        DSTA = 0x00
                        ESTA = 0xEE
                    }
                }

                If ((((PCSA == 0x01) && (PWST == 0xD3)) && (PW3S == 0x01)))
                {
                    PWST = 0xD0
                }

                If ((((PCSA == 0x00) && (PWST == 0xD0)) && (PW3S == 0x00)))
                {
                    PWST = 0xD3
                }

                If (CondRefOf (SSTA))
                {
                    SSTA ()
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                Return (DSTA) /* \_SB_.PCI0.GP11.SWUS.DSTA */
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                Local0 = 0x7FFFFFFF
                Local0 |= 0x80000000
                Local1 = RPRM ((DADR + 0x00), 0x04)
                If (((Local1 == Local0) || (Local1 == 0x00)))
                {
                    PCSA = 0x00
                    PWST = 0xD3
                    PW3S = 0x00
                }
                Else
                {
                    PCSA = 0x01
                    PWST = 0xD0
                    PW3S = 0x01
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, 0x00, 0x00)
                If (CondRefOf (SINI))
                {
                    SINI ()
                }
            }

            Method (_REG, 2, Serialized)  // _REG: Region Availability
            {
                If (((Arg0 == 0x02) && (Arg1 == 0x01)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                        {
                            PCSA = 0x01
                        }
                    }
                }

                If (((Arg0 == 0x02) && (Arg1 == 0x00)))
                {
                    PCSA = 0x00
                }

                If (CondRefOf (SREG))
                {
                    SREG (Arg0, Arg1)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
            }

            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If (CondRefOf (SDSW))
                {
                    SDSW (Arg0, Arg1, Arg2)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, 0x00)
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            PowerResource (PWRS, 0x00, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (POWS))
                    {
                        PSTA ()
                    }

                    Return (PW3S) /* \_SB_.PCI0.GP11.SWUS.PW3S */
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    If ((PW3S == 0x00))
                    {
                        PW3S = 0x01
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                        If (CondRefOf (P_ON))
                        {
                            P_ON ()
                        }
                    }
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    If ((PW3S == 0x01))
                    {
                        PW3S = 0x00
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                        If (CondRefOf (P_OF))
                        {
                            P_OF ()
                        }
                    }
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWRS
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWRS
            })
        }
    }

    Scope (\_SB.PCI0.GP12)
    {
        Method (_DEP, 0, Serialized)  // _DEP: Dependencies
        {
            If ((M046 == 0xAA))
            {
                Local0 = M045 ()
            }

            If (((\DDEP == 0x01) && (CondRefOf (\_SB.PCI0.GP19.NHI1) && (M046 < 0x0B))))
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12._DEP  Return Package (1) {\\_SB.PCI0.GP19.NHI1}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (Package (0x01)
                {
                    \_SB.PCI0.GP19.NHI1
                })
            }
            Else
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12._DEP  Return Package (1) {\\_SB.PCI0}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (Package (0x01)
                {
                    \_SB.PCI0
                })
            }
        }

        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F84)
            Local0 = 0x00
            If ((\P4D3 != 0x55))
            {
                Local0 = \P4D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12._PRW ()  Return Package (2) {0x1A, 0x04}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            Return (Package (0x03)
            {
                0x1A, 
                0x04, 
                PWRS
            })
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F81)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12._PS0 ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            If ((\P4D3 != 0x55))
            {
                Local1 = \CIMS
                If (((\CPSX & 0x02) == 0x02))
                {
                    \CPSX &= 0x7D
                    Local2 = \CPSX
                    M232 (Local1, Local2, 0x00)
                }
            }
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F83)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12._PS3 ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            If ((\P4D3 != 0x55))
            {
                If (CondRefOf (\_SB.PCI0.GP19.NHI1.PCSA))
                {
                    If ((\_SB.PCI0.GP19.NHI1.PCSA == 0x01))
                    {
                        Local1 = \CIMS
                        If (((\CPSX & 0x02) == 0x00))
                        {
                            \CPSX |= 0x02
                            Local2 = \CPSX
                            M232 (Local1, Local2, 0x00)
                        }
                    }
                }
            }
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F85)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12.PWRS._STA ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F86)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12.PWRS._ON ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F88)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12.PWRS._OFF ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, 0x00)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, 0x00)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP12.RPRM.VARR */
            If ((Arg1 == 0x01))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == 0x01))
            {
                OperationRegion (VARA, SystemMemory, Local0, 0x01)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = 0x00
            Local0 = 0x00
            While ((Local0 <= 0x1F))
            {
                Local1 = 0x00
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != 0x00)))
                    {
                        Local2 |= (0x01 << Local0)
                    }
                    ElseIf ((Local1 == 0x00))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = 0x00
            Local1 = RPRM ((Arg0 + 0x34), 0x01)
            While ((Local1 != 0x00))
            {
                Local2 = RPRM ((DADR + Local1), 0x01)
                If (((Local2 == 0x00) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* External reference */
                    }
                    Else
                    {
                        DBUS = 0x00
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            0x01) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + 0x00), 0x04)
                    If (((Local1 == Local0) || (Local1 == 0x00)))
                    {
                        DSTA = 0x00
                        ESTA = 0x00
                        If ((DBUS != 0x00))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), 0x01)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            0x01) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            0x01) & 0x40) == 0x00))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == 0x00))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = 0x00
                    }
                }
                Else
                {
                    DSTA = 0x00
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == 0x01) && (PWST == 0xD3)) && (PW3S == 0x01)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == 0x00) && (PWST == 0xD0)) && (PW3S == 0x00)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP12.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + 0x00), 0x04)
            If (((Local1 == Local0) || (Local1 == 0x00)))
            {
                PCSA = 0x00
                PWST = 0xD3
                PW3S = 0x00
            }
            Else
            {
                PCSA = 0x01
                PWST = 0xD0
                PW3S = 0x01
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, 0x00, 0x00)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == 0x01)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                    {
                        PCSA = 0x01
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == 0x00)))
            {
                PCSA = 0x00
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, 0x00)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (POWS))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP12.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == 0x00))
                {
                    PW3S = 0x01
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == 0x01))
                {
                    PW3S = 0x00
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
        Name (_DSD, Package (0x06)  // _DSD: Device-Specific Data
        {
            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
            Package (0x01)
            {
                Package (0x02)
                {
                    "HotPlugSupportInD3", 
                    0x01
                }
            }, 

            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
            Package (0x02)
            {
                Package (0x02)
                {
                    "ExternalFacingPort", 
                    0x01
                }, 

                Package (0x02)
                {
                    "UID", 
                    0x01
                }
            }, 

            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
            Package (0x02)
            {
                Package (0x02)
                {
                    "usb4-host-interface", 
                    \_SB.PCI0.GP19.NHI1
                }, 

                Package (0x02)
                {
                    "usb4-port-number", 
                    0x02
                }
            }
        })
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                CreateDWordField (Arg0, 0x00, UID0)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12._DSM (UUID 0x%X, 0x%X, 0x%X)\n", UID0, Arg1, Arg2, 0x00, 0x00, 0x00)
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Switch (Arg1)
                        {
                            Case (0x00)
                            {
                                M460 ("    Return 0x0\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                                Return (Buffer (0x01)
                                {
                                     0x00                                             // .
                                })
                            }
                            Case (0x01)
                            {
                                M460 ("    Return 0x21\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                                Return (Buffer (0x01)
                                {
                                     0x21                                             // !
                                })
                            }

                        }

                        M460 ("    Return 0x61\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                        Return (Buffer (0x01)
                        {
                             0x61                                             // a
                        })
                    }
                    Case (0x05)
                    {
                        If ((Arg1 >= 0x01))
                        {
                            Local0 = 0x00
                            If ((\RCRS != 0x55))
                            {
                                Local0 = \RCRS
                            }

                            M460 ("    Return %d\n", Local0, 0x00, 0x00, 0x00, 0x00, 0x00)
                            Return (Local0)
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            M460 ("    Return Package (4) {0x02, 0xC8, 0x02, 0xC8}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                            Return (Package (0x04)
                            {
                                0x02, 
                                0xC8, 
                                0x02, 
                                0xC8
                            })
                        }
                    }

                }
            }
        }

        Device (SWUS)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            Method (_RMV, 0, Serialized)  // _RMV: Removal Status
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._RMV ()  Return 0\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (0x00)
            }

            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
            {
                M000 (0x3FA4)
                Local0 = 0x00
                If ((\H0D3 != 0x55))
                {
                    Local0 = \H0D3
                }

                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._S0W ()  Return %d\n", Local0, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (Local0)
            }

            Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._PRW ()  Return Package (2) {0x1A, 0x04}\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (Package (0x02)
                {
                    0x1A, 
                    0x04
                })
            }

            Method (PPS0, 0, Serialized)
            {
                M000 (0x3FA1)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._PS0 ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            }

            Method (PPS3, 0, Serialized)
            {
                M000 (0x3FA3)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._PS3 ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            }

            Method (PSTA, 0, Serialized)
            {
                M000 (0x3FA5)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS.PWRS._STA ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            }

            Method (P_ON, 0, Serialized)
            {
                M000 (0x3FA6)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS.PWRS._ON ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            }

            Method (P_OF, 0, Serialized)
            {
                M000 (0x3FA8)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS.PWRS._OFF ()\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            }

            Name (DADR, 0xEEEEEEEE)
            Name (DSTA, 0xEE)
            Name (DBUS, 0xEEEE)
            Name (PCSA, 0x00)
            Name (PWST, 0xD3)
            Name (ESTA, 0xEE)
            Name (EBUS, 0xEEEE)
            Name (PW3S, 0x00)
            Method (RPRM, 2, NotSerialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, AnyAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \_SB_.PCI0.GP12.SWUS.RPRM.VARR */
                If ((Arg1 == 0x01))
                {
                    Local1 &= 0xFF
                }
                ElseIf ((Arg1 == 0x02))
                {
                    Local1 &= 0xFFFF
                }
                ElseIf ((Arg1 == 0x03))
                {
                    Local1 &= 0x00FFFFFF
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
                Return (Local1)
            }

            Method (WPRM, 3, NotSerialized)
            {
                Local0 = Arg0
                If ((Arg1 == 0x01))
                {
                    OperationRegion (VARA, SystemMemory, Local0, 0x01)
                    Field (VARA, AnyAcc, NoLock, Preserve)
                    {
                        VARE,   8
                    }

                    VARE = Arg2
                }
                ElseIf ((Arg1 == 0x02))
                {
                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                    Field (VARB, AnyAcc, NoLock, Preserve)
                    {
                        VARF,   16
                    }

                    VARF = Arg2
                }
                ElseIf ((Arg1 == 0x03))
                {
                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                    Field (VARC, AnyAcc, NoLock, Preserve)
                    {
                        VARG,   24
                    }

                    VARG = Arg2
                }
                Else
                {
                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                    Field (VARD, AnyAcc, NoLock, Preserve)
                    {
                        VARH,   32
                    }

                    VARH = Arg2
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
            }

            Method (SPDP, 1, NotSerialized)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = 0x00
                Local0 = 0x00
                While ((Local0 <= 0x1F))
                {
                    Local1 = 0x00
                    While ((Local1 <= 0x07))
                    {
                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                            0x0F) & 0x000F8000))
                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                        Local4 = RPRM ((M083 + Local3), 0x04)
                        If (((Local4 != Local5) && (Local4 != 0x00)))
                        {
                            Local2 |= (0x01 << Local0)
                        }
                        ElseIf ((Local1 == 0x00))
                        {
                            Break
                        }

                        Local1++
                    }

                    Local0++
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
                Return (Local2)
            }

            Method (SPCH, 2, NotSerialized)
            {
                Local0 = 0x00
                Local1 = RPRM ((Arg0 + 0x34), 0x01)
                While ((Local1 != 0x00))
                {
                    Local2 = RPRM ((DADR + Local1), 0x01)
                    If (((Local2 == 0x00) || (Local2 == 0xFF)))
                    {
                        Break
                    }

                    If ((Local2 == Arg1))
                    {
                        Local0 = Local1
                        Break
                    }

                    Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
                Return (Local0)
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                {
                    If ((DBUS == 0xEEEE))
                    {
                        If (CondRefOf (^^EBUS))
                        {
                            DBUS = ^^EBUS /* \_SB_.PCI0.GP12.EBUS */
                        }
                        Else
                        {
                            DBUS = 0x00
                        }
                    }

                    If ((DBUS != 0xEEEE))
                    {
                        If ((DADR == 0xEEEEEEEE))
                        {
                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                0x01) & 0x000F8000))
                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                            DADR = (M083 + Local0)
                        }

                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + 0x00), 0x04)
                        If (((Local1 == Local0) || (Local1 == 0x00)))
                        {
                            DSTA = 0x00
                            ESTA = 0x00
                            If ((DBUS != 0x00))
                            {
                                Local2 = ^^SPCH (^^DADR, 0x10)
                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                    0x40) == 0x40))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                        }
                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                        {
                            EBUS = RPRM ((DADR + 0x19), 0x01)
                            Local2 = SPCH (DADR, 0x10)
                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                0x01) >> 0x04) & 0x0F) == 0x05))
                            {
                                If ((EBUS == 0x00))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                ElseIf ((SPDP (EBUS) == 0x00))
                                {
                                    DSTA = 0x00
                                    ESTA = 0x00
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                0x01) & 0x40) == 0x00))
                            {
                                If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                    0x40) == 0x00))
                                {
                                    DSTA = 0x00
                                    ESTA = 0x00
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                            ElseIf ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x00
                        }
                    }
                    Else
                    {
                        DSTA = 0x00
                        ESTA = 0xEE
                    }
                }

                If ((((PCSA == 0x01) && (PWST == 0xD3)) && (PW3S == 0x01)))
                {
                    PWST = 0xD0
                }

                If ((((PCSA == 0x00) && (PWST == 0xD0)) && (PW3S == 0x00)))
                {
                    PWST = 0xD3
                }

                If (CondRefOf (SSTA))
                {
                    SSTA ()
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                Return (DSTA) /* \_SB_.PCI0.GP12.SWUS.DSTA */
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                Local0 = 0x7FFFFFFF
                Local0 |= 0x80000000
                Local1 = RPRM ((DADR + 0x00), 0x04)
                If (((Local1 == Local0) || (Local1 == 0x00)))
                {
                    PCSA = 0x00
                    PWST = 0xD3
                    PW3S = 0x00
                }
                Else
                {
                    PCSA = 0x01
                    PWST = 0xD0
                    PW3S = 0x01
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, 0x00, 0x00)
                If (CondRefOf (SINI))
                {
                    SINI ()
                }
            }

            Method (_REG, 2, Serialized)  // _REG: Region Availability
            {
                If (((Arg0 == 0x02) && (Arg1 == 0x01)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                        {
                            PCSA = 0x01
                        }
                    }
                }

                If (((Arg0 == 0x02) && (Arg1 == 0x00)))
                {
                    PCSA = 0x00
                }

                If (CondRefOf (SREG))
                {
                    SREG (Arg0, Arg1)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
            }

            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If (CondRefOf (SDSW))
                {
                    SDSW (Arg0, Arg1, Arg2)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, 0x00)
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            PowerResource (PWRS, 0x00, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (POWS))
                    {
                        PSTA ()
                    }

                    Return (PW3S) /* \_SB_.PCI0.GP12.SWUS.PW3S */
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    If ((PW3S == 0x00))
                    {
                        PW3S = 0x01
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                        If (CondRefOf (P_ON))
                        {
                            P_ON ()
                        }
                    }
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    If ((PW3S == 0x01))
                    {
                        PW3S = 0x00
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                        If (CondRefOf (P_OF))
                        {
                            P_OF ()
                        }
                    }
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWRS
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWRS
            })
        }
    }

    Scope (\_GPE)
    {
        Method (_L1A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("  OEM-ASL-\\_GPE._L1A\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (\_SB.PCI0.GP19))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19, 0x2)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Notify (\_SB.PCI0.GP19, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP19.NHI0))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19.NHI0, 0x2)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Notify (\_SB.PCI0.GP19.NHI0, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP19.NHI1))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19.NHI1, 0x2)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Notify (\_SB.PCI0.GP19.NHI1, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP19.XHC2))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19.XHC2, 0x2)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Notify (\_SB.PCI0.GP19.XHC2, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP19.XHC3))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19.XHC3, 0x2)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Notify (\_SB.PCI0.GP19.XHC3, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP19.XHC4))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19.XHC4, 0x2)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Notify (\_SB.PCI0.GP19.XHC4, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP11))
            {
                M460 ("    Notify (\\_SB.PCI0.GP11, 0x2)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Notify (\_SB.PCI0.GP11, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP11.SWUS))
            {
                M460 ("    Notify (\\_SB.PCI0.GP11.SWUS, 0x2)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Notify (\_SB.PCI0.GP11.SWUS, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP12))
            {
                M460 ("    Notify (\\_SB.PCI0.GP12, 0x2)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Notify (\_SB.PCI0.GP12, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP12.SWUS))
            {
                M460 ("    Notify (\\_SB.PCI0.GP12.SWUS, 0x2)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Notify (\_SB.PCI0.GP12.SWUS, 0x02) // Device Wake
            }
        }
    }
}



SSDT17
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R23  ", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.LID_._LID, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M012, MethodObj)    // 5 Arguments
    External (M013, MethodObj)    // 4 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M021, MethodObj)    // 4 Arguments
    External (M023, MethodObj)    // 3 Arguments
    External (M024, MethodObj)    // 3 Arguments
    External (M025, MethodObj)    // 4 Arguments
    External (M026, MethodObj)    // 3 Arguments
    External (M037, DeviceObj)
    External (M043, MethodObj)    // 3 Arguments
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M111, MethodObj)    // 2 Arguments
    External (M112, MethodObj)    // 2 Arguments
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)

    Scope (\_SB)
    {
        Name (MACO, 0x00)
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M189, Buffer (0x0100){})
        Name (M190, 0xFFFFFFFF)
        Name (M191, 0xFFFFFFFF)
        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (PX00 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            CreateWordField (M189, 0x00, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x00
            M158 = 0x00
            M160 = 0x00
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = 0x01
            M160 = M098 /* External reference */
            If (M098)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local0 = M019 (M095, M094, M093, 0x2C)
                Local1 = M019 (M095, M094, (M093 + 0x01), 0x2C)
                If ((Local0 != Local5))
                {
                    M190 = Local0
                }

                If ((Local1 != Local5))
                {
                    M191 = Local1
                }
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x0003FC80
            M162 = M099 /* External reference */
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & 0x01)
            Local7 = Buffer (0x05){}
            CreateWordField (Local7, 0x00, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = 0x00
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, 0x00)
            Local0 = M049 (M133, 0x11)
            Local6 = M113 (Local0)
            M023 (0x00, M091, M090)
            If ((M192 && Local6))
            {
                M000 (0x0D86)
                M112 (Local0, 0x00)
                M111 (Local0, 0x01)
                Sleep (0x20)
                M112 (Local0, 0x02)
                M112 (Local0, 0x01)
                M000 (0x0D87)
                HPOK = 0x00
                Sleep (0x14)
                M201 = 0x01
                Local6 = \_SB.ALIB (0x06, Local7)
                Local2 = 0x00
                While ((Local2 < 0x0F))
                {
                    M023 (0x00, M091, M090)
                    Local4 = 0x01
                    Local5 = 0xC8
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (0x00, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                        {
                            Local4 = 0x00
                        }
                        Else
                        {
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    If (!Local4)
                    {
                        Local5 = M024 (0x00, M091, M090)
                        If (Local5)
                        {
                            M026 (0x00, M091, M090)
                            Sleep (0x05)
                            Local2++
                        }
                        Else
                        {
                            Local0 = 0x00
                            If ((M025 (0x00, M091, M090, 0x00) == Ones))
                            {
                                Local0 = 0x01
                            }

                            If (Local0)
                            {
                                M111 (M049 (M133, 0x17), 0x01)
                                M111 (M049 (M133, 0x18), 0x01)
                                HPOK = 0x01
                                Local2 = 0x10
                            }
                            Else
                            {
                                HPOK = 0x00
                                Local2 = 0x10
                            }
                        }
                    }
                    Else
                    {
                        Local2 = 0x10
                    }
                }

                If (!HPOK)
                {
                    M000 (0x0D88)
                    Local1 = M019 (M095, M094, M093, 0x00)
                    Sleep (0x0A)
                    Local4 = 0x01
                    Local5 = 0x05
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (0x00, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                        {
                            Local4 = 0x00
                        }
                        Else
                        {
                            Local0 = M019 (M095, M094, M093, 0x00)
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    M201 = 0x00
                    \_SB.ALIB (0x06, Local7)
                }

                If ((M097 != 0x00))
                {
                    Local0 = M019 (0x00, M091, M090, 0x54)
                    M020 (0x00, M091, M090, 0x54, (Local0 & 0xFFFF7FFC))
                    M232 (M097, 0x00, 0x10)
                    M020 (0x00, M091, M090, 0x54, (Local0 & 0xFFFF7FFF))
                }

                M000 (0x0D89)
            }
            Else
            {
                M000 (0x0D8A)
                M201 = 0x00
                \_SB.ALIB (0x06, Local7)
                M000 (0x0D8B)
                M111 (M049 (M133, 0x17), 0x00)
                M111 (M049 (M133, 0x18), 0x00)
                M112 (Local0, 0x00)
                Sleep (0x0A)
                M111 (Local0, 0x00)
                M023 (0x00, M091, M090)
                Local1 = M019 (M095, M094, M093, 0x00)
                Sleep (0x0A)
                Local4 = 0x01
                Local5 = 0x05
                While ((Local4 && Local5))
                {
                    Local0 = M021 (0x00, M091, M090, 0xA5)
                    Local0 &= 0x7F
                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                    {
                        Local4 = 0x00
                    }
                    Else
                    {
                        Local1 = M019 (M095, M094, M093, 0x00)
                        Sleep (0x05)
                        Local5--
                    }
                }

                HPOK = 0x02
                M000 (0x0D8C)
            }

            If (HPOK)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local1 = M019 (0x00, M091, M090, 0x54)
                M020 (0x00, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                Local0 = M019 (M095, M094, M093, 0x00)
                If (((HPOK == 0x01) && (Local0 != Local5)))
                {
                    M020 (M095, M094, M093, 0x4C, M190)
                    Sleep (0x0A)
                    If ((M191 != Local5))
                    {
                        M020 (M095, M094, (M093 + 0x01), 0x4C, M191)
                    }

                    Sleep (0x0A)
                }

                M020 (0x00, M091, M090, 0x54, (Local1 & 0xFFFF7FFF))
            }
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & 0x01)
            If (M195)
            {
                M111 (M049 (M133, 0x17), 0x01)
            }
            Else
            {
                M111 (M049 (M133, 0x17), 0x00)
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & 0x01)
            If (M196)
            {
                M111 (M049 (M133, 0x18), 0x01)
            }
            Else
            {
                M111 (M049 (M133, 0x18), 0x00)
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, 0x00, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x19)
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX08.M157 */
            Local1 = 0x00
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x1A + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, 0x00, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x7E)
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX09.M157 */
            Local1 = 0x00
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x7F + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & 0x01)
            \_SB.MACO = (Arg0 & 0x01)
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & 0x01)
            Local2 = M162 /* \_SB_.PCI0.GP17.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                Local0 = M049 (M131, 0x10)
                Local1 = M049 (M131, 0x11)
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, 0x00, 0x01, Local2)
            }
        }

        Name (ATIB, Buffer (0x0100){})
        Method (ATIF, 2, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (AF00 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }

            If ((Arg0 == 0x17))
            {
                Return (AF23 ())
            }
            Else
            {
                CreateWordField (ATIB, 0x00, M157)
                CreateWordField (ATIB, 0x02, M158)
                CreateDWordField (ATIB, 0x04, M159)
                CreateDWordField (ATIB, 0x08, M160)
                M157 = 0x00
                M158 = 0x00
                M159 = 0x00
                M160 = 0x00
                Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
            }
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, 0x00, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = 0x01
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, 0x00, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            Local0 = (M103 & 0xFF000000)
            Local1 = (M103 & 0x03)
            If ((Local1 == 0x02))
            {
                M157 = 0x0B
                M161 = 0x03
                M162 = Local1
                M163 = Local0
            }
            Else
            {
                M157 = 0x0A
                M161 = 0x03
                M162 = M103 /* External reference */
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, 0x00)
        Name (M211, 0x00)
        Name (M212, 0x00)
        Name (M213, 0x00)
        Name (M214, 0x00)
        Name (M215, 0x00)
        Name (M303, 0x00)
        Name (M304, 0x00)
        Name (SSDM, 0x0A)
        Name (SCDY, 0x00)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, 0x00, M165)
            CreateBitField (M164, 0x01, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, 0x00, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            M157 = 0x12
            M174 = M164 /* \_SB_.PCI0.GP17.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GP17.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GP17.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GP17.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GP17.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GP17.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GP17.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GP17.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, 0x00, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, 0x00)
            M187 = M049 (M133, 0xBF)
            Local1 = 0x00
            While ((Local1 < M187))
            {
                Local2 = M049 (M133, (0xC0 + Local1))
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GP17.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GP17.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local2 &= 0xFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GP17.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = 0x00
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GP17.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, 0x00, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = 0x00
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local1 = (Local0 ^ 0x01)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            Local0 = M013 (M133, 0xD4, 0x00, 0x10)
            If (Local0)
            {
                Local1 = 0x00
                While ((Local1 < Local0))
                {
                    Local2 = M049 (M133, (0xD4 + Local1))
                    ATIB [Local1] = Local2
                    Local1++
                }
            }
            Else
            {
                Local3 = M043 (0x00, Arg0, 0x00)
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [0x00] = 0x05
                    ATIB [0x01] = 0x00
                    ATIB [0x02] = 0x00
                    ATIB [0x03] = 0x00
                    ATIB [0x04] = 0x02
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF23, 0, NotSerialized)
        {
            ATIB = M449 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            If ((M101 & 0x01))
            {
                CreateBitField (M164, 0x00, M165)
                M165 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN1, 1, Serialized)
        {
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, 0x01, M166)
                M166 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN2, 2, Serialized)
        {
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN3, 2, Serialized)
        {
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN4, 1, Serialized)
        {
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M215 = Local0
                If ((Local0 == Local1)){}
                Else
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    Notify (VGA, 0x81) // Information Change
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN6, 0, Serialized)
        {
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN7, 1, Serialized)
        {
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN8, 0, Serialized)
        {
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
            }
        }

        Method (AFNC, 2, Serialized)
        {
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & 0xFFFFFFFF)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                Notify (VGA, 0x81) // Information Change
            }
        }
    }
}



SSDT18
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R23  ", 0x00000001)
{
    External (__9_, UnknownObj)
    External (____, UnknownObj)
    External (_SB_.LID_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.GPP5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPC0.EC0_, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_.EMBF, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPC0.EC0_.ESLP, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.ESLS, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.FNKC, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.HFNE, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.HFNS, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.HKEY.DYTC, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPC0.EC0_.HKEY.MSCB, IntObj)
    External (_SB_.PCI0.LPC0.EC0_.HPLD, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.HWFN, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.HWLO, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.KBLH, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.KBLL, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.LED_, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.LPC0.EC0_.LKBD, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPC0.EC0_.S03F, UnknownObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M045, MethodObj)    // 0 Arguments
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M250, MethodObj)    // 5 Arguments
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (SPSU, IntObj)
    External (TPOS, UnknownObj)

    Scope (\_SB.PCI0)
    {
        Name (_DEP, Package (0x01)  // _DEP: Dependencies
        {
            \_SB.PEP
        })
    }

    Scope (\_SB)
    {
        Device (PEP)
        {
            Name (_HID, "AMDI0007")  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (DEV1, Package (0x03)
            {
                0x00, 
                0x29, 
                Package (0x29)
                {
                    Package (0x04)
                    {
                        0x00, 
                        "\\_SB.PCI0.GP11", 
                        0x00, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x00, 
                        "\\_SB.PCI0.GP12", 
                        0x00, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x00, 
                        "\\_SB.PCI0.GP17", 
                        0x00, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x00, 
                        "\\_SB.PCI0.GP19", 
                        0x00, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GPP6", 
                        0x02, 
                        0x01
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GPP7", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GPP5.RTL8", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GPP5.RUSB", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GPP6.PXSX", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GPP7.L850", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GPP8.NVME", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP17.VGA", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP17.AZAL", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP17.ACP", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP17.HDAU", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP17.XHC0", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP17.XHC1", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP17.XHC0.RHUB.HS02.HS01", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP17.XHC0.RHUB.HS03", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP18.SATA", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP19.XHC2", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP19.XHC3", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP19.XHC4", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP19.NHI0", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP19.NHI1", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C000", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C001", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C002", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C003", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C004", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C005", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C006", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C007", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C008", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C009", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C00A", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C00B", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C00C", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C00D", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C00E", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C00F", 
                        0x01, 
                        0x03
                    }
                }
            })
            Name (DEV2, Package (0x03)
            {
                0x00, 
                0x29, 
                Package (0x29)
                {
                    Package (0x04)
                    {
                        0x00, 
                        "\\_SB.PCI0.GP11", 
                        0x00, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x00, 
                        "\\_SB.PCI0.GP12", 
                        0x00, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x00, 
                        "\\_SB.PCI0.GP17", 
                        0x00, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x00, 
                        "\\_SB.PCI0.GP19", 
                        0x02, 
                        0x01
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GPP6", 
                        0x02, 
                        0x01
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GPP7", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GPP5.RTL8", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GPP5.RUSB", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GPP6.PXSX", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GPP7.L850", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GPP8.NVME", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP17.VGA", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP17.AZAL", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP17.ACP", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP17.HDAU", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP17.XHC0", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP17.XHC1", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP17.XHC0.RHUB.HS02.HS01", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP17.XHC0.RHUB.HS03", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP18.SATA", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP19.XHC2", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP19.XHC3", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP19.XHC4", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP19.NHI0", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PCI0.GP19.NHI1", 
                        0x00, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C000", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C001", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C002", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C003", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C004", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C005", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C006", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C007", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C008", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C009", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C00A", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C00B", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C00C", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C00D", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C00E", 
                        0x01, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x01, 
                        "\\_SB.PLTF.C00F", 
                        0x01, 
                        0x03
                    }
                }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (M045 ())
                {
                    M460 ("  OEM-ASL-\\_SB.PEP._STA = 0xF\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Return (0x0F)
                }
                Else
                {
                    M460 ("  OEM-ASL-\\_SB.PEP._STA = 0x0\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Return (0x00)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e3f32452-febc-43ce-9039-932122d37721") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (0x00)
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (0x01)
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (0x02)
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x3F                                             // ?
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (0x01)
                        {
                            If ((M046 == 0xAA))
                            {
                                Local0 = M045 ()
                            }

                            If ((M046 < 0x0B))
                            {
                                Return (DEV2) /* \_SB_.PEP_.DEV2 */
                            }
                            Else
                            {
                                Return (DEV1) /* \_SB_.PEP_.DEV1 */
                            }
                        }
                        Case (0x02)
                        {
                            \_SB.PCI0.LPC0.EC0.ESLS = 0x01
                            \_SB.PCI0.LPC0.EC0.HWLO = 0x01
                            \_SB.PCI0.LPC0.EC0.ESLP = 0x01
                            \_SB.PCI0.LPC0.EC0.HWFN = 0x01
                            Stall (0x64)
                            \_SB.PCI0.LPC0.EC0.LED (0x00, 0xA0)
                            Sleep (0xC8)
                            \_SB.PCI0.LPC0.EC0.LED (0x0A, 0xA0)
                            If ((\_SB.PCI0.LPC0.EC0.HKEY.MSCB == 0x01))
                            {
                                \_SB.PCI0.LPC0.EC0.HKEY.DYTC (0x001FC001)
                            }

                            M000 (0x3E04)
                            Return (0x00)
                        }
                        Case (0x03)
                        {
                            Sleep (0x64)
                            \_SB.PCI0.LPC0.EC0.ESLS = 0x00
                            \_SB.PCI0.LPC0.EC0.ESLP = 0x00
                            \_SB.PCI0.LPC0.EC0.EMBF (0x64)
                            Stall (0x64)
                            \_SB.PCI0.LPC0.EC0.LED (0x00, 0x80)
                            Sleep (0x012C)
                            \_SB.PCI0.LPC0.EC0.LED (0x0A, 0x80)
                            If (\_SB.PCI0.LPC0.EC0.HPLD)
                            {
                                Notify (\_SB.LID (), 0x80) // Status Change
                            }

                            Notify (\_SB.PCI0.GPP5 (), 0x02) // Device Wake
                            \_SB.PCI0.LPC0.EC0.ESLP = 0x00
                            Sleep (0x64)
                            \_SB.PCI0.LPC0.EC0.LED (0x0A, 0x80)
                            If ((\_SB.PCI0.LPC0.EC0.HKEY.MSCB == 0x01))
                            {
                                \_SB.PCI0.LPC0.EC0.HKEY.DYTC (0x000FC001)
                            }

                            \_SB.PCI0.LPC0.EC0.EMBF (0x64)
                            \_SB.PCI0.LPC0.EC0.LKBD ()
                            M000 (0x3E05)
                            Return (0x00)
                        }
                        Case (0x04)
                        {
                            M000 (0x3E02)
                            Return (0x00)
                        }
                        Case (0x05)
                        {
                            M000 (0x3E03)
                            Return (0x00)
                        }
                        Default
                        {
                            Return (0x00)
                        }

                    }
                }
                ElseIf ((Arg0 == ToUUID ("11e00d56-ce64-47ce-837b-1f898f9aa461") /* Unknown UUID */))
                {
                    M460 ("  OEM-ASL-\\_SB.PEP._DSM 11E00D56 Case %d\n", ToInteger (Arg2), 0x00, 0x00, 0x00, 0x00, 0x00)
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (0x00)
                                {
                                    Return (Buffer (0x02)
                                    {
                                         0xF9, 0x01                                       // ..
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (0x03)
                        {
                            If ((\_SB.PCI0.LPC0.EC0.HKEY.MSCB == 0x00))
                            {
                                \_SB.PCI0.LPC0.EC0.ESLS = 0x01
                            }

                            M000 (0x3E03)
                            \_SB.PCI0.LPC0.EC0.EMBF (0x64)
                            Return (0x00)
                        }
                        Case (0x04)
                        {
                            If ((\_SB.PCI0.LPC0.EC0.HKEY.MSCB == 0x00))
                            {
                                \_SB.PCI0.LPC0.EC0.ESLS = 0x00
                            }

                            \_SB.PCI0.LPC0.EC0.LED (0x00, 0x80)
                            Sleep (0x64)
                            \_SB.PCI0.LPC0.EC0.LED (0x0A, 0x80)
                            \_SB.PCI0.LPC0.EC0.LKBD ()
                            \_SB.PCI0.LPC0.EC0.EMBF (0x64)
                            If ((\_SB.PCI0.LPC0.EC0.HKEY.MSCB == 0x01))
                            {
                                \_SB.PCI0.LPC0.EC0.HKEY.DYTC (0x000FC001)
                            }

                            \_SB.PCI0.LPC0.EC0.EMBF (0x64)
                            M000 (0x3E04)
                            Return (0x00)
                        }
                        Case (0x05)
                        {
                            M000 (0x3E05)
                            Return (0x00)
                        }
                        Case (0x06)
                        {
                            M000 (0x3E06)
                            Return (0x00)
                        }
                        Case (0x07)
                        {
                            \SPSU = 0x03
                            \_SB.PCI0.LPC0.EC0.HWLO = 0x01
                            \_SB.PCI0.LPC0.EC0.ESLS = 0x01
                            \_SB.PCI0.LPC0.EC0.ESLP = 0x01
                            \_SB.PCI0.LPC0.EC0.HWFN = 0x01
                            Stall (0x64)
                            \_SB.PCI0.LPC0.EC0.LED (0x00, 0xA0)
                            Sleep (0xC8)
                            \_SB.PCI0.LPC0.EC0.LED (0x0A, 0xA0)
                            If ((\_SB.PCI0.LPC0.EC0.HKEY.MSCB == 0x01))
                            {
                                \_SB.PCI0.LPC0.EC0.HKEY.DYTC (0x001FC001)
                            }

                            Local0 = M249 (0x00, 0x00, 0x00, 0x13F01308)
                            Local0 |= 0x01
                            M250 (0x00, 0x00, 0x00, 0x13F01308, Local0)
                            \_SB.PCI0.LPC0.EC0.S03F = 0x53
                            M000 (0x3E07)
                            Return (0x00)
                        }
                        Case (0x08)
                        {
                            \_SB.PCI0.LPC0.EC0.S03F = 0x00
                            M000 (0x3E08)
                            Sleep (0x64)
                            \_SB.PCI0.LPC0.EC0.ESLS = 0x00
                            \_SB.PCI0.LPC0.EC0.ESLP = 0x00
                            Stall (0x64)
                            \_SB.PCI0.LPC0.EC0.LED (0x00, 0x80)
                            Sleep (0x012C)
                            \_SB.PCI0.LPC0.EC0.LED (0x0A, 0x80)
                            If (\_SB.PCI0.LPC0.EC0.HPLD)
                            {
                                Notify (\_SB.LID (), 0x80) // Target object type does not support notifies
                            }

                            Notify (\_SB.PCI0.GPP5 (), 0x02) // Device Wake
                            \_SB.PCI0.LPC0.EC0.ESLP = 0x00
                            Sleep (0x64)
                            \_SB.PCI0.LPC0.EC0.LED (0x0A, 0x80)
                            If ((\_SB.PCI0.LPC0.EC0.HKEY.MSCB == 0x01))
                            {
                                \_SB.PCI0.LPC0.EC0.HKEY.DYTC (0x000FC001)
                            }

                            Local0 = M249 (0x00, 0x00, 0x00, 0x13F01308)
                            Local0 &= 0xFFFFFFFE
                            M250 (0x00, 0x00, 0x00, 0x13F01308, Local0)
                            M000 (0x3E08)
                            Return (0x00)
                        }
                        Default
                        {
                            Return (0x00)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }
}



SSDT19
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "TP-R23  ", 0x00000001)
{
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000A8D
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000A8D
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000A8D
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000A8D
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000A8D
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000A8D
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000A8D
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000A8D
        })
    }

    Scope (\_SB.PLTF.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C008.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000A8D
        })
    }

    Scope (\_SB.PLTF.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C009.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000A8D
        })
    }

    Scope (\_SB.PLTF.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000A8D
        })
    }

    Scope (\_SB.PLTF.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000A8D
        })
    }

    Scope (\_SB.PLTF.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000A8D
        })
    }

    Scope (\_SB.PLTF.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000A8D
        })
    }

    Scope (\_SB.PLTF.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000A8D
        })
    }

    Scope (\_SB.PLTF.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000A8C, 
                0x00000CA8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000A8D
        })
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "UsbCTabl", 0x00000001)
{
    External (_SB_.PCI0.LPC0.EC0_, DeviceObj)
    External (SPSU, IntObj)

    Scope (\_SB)
    {
        OperationRegion (SUSC, SystemMemory, 0xFEEC2100, 0x30)
        Field (SUSC, ByteAcc, Lock, Preserve)
        {
            SCMD,   8, 
            CCI0,   8, 
            CCI1,   8, 
            CCI2,   8, 
            CCI3,   8, 
            CTL0,   8, 
            CTL1,   8, 
            CTL2,   8, 
            CTL3,   8, 
            CTL4,   8, 
            CTL5,   8, 
            CTL6,   8, 
            CTL7,   8, 
            MGI0,   8, 
            MGI1,   8, 
            MGI2,   8, 
            MGI3,   8, 
            MGI4,   8, 
            MGI5,   8, 
            MGI6,   8, 
            MGI7,   8, 
            MGI8,   8, 
            MGI9,   8, 
            MGIA,   8, 
            MGIB,   8, 
            MGIC,   8, 
            MGID,   8, 
            MGIE,   8, 
            MGIF,   8, 
            MGO0,   8, 
            MGO1,   8, 
            MGO2,   8, 
            MGO3,   8, 
            MGO4,   8, 
            MGO5,   8, 
            MGO6,   8, 
            MGO7,   8, 
            MGO8,   8, 
            MGO9,   8, 
            MGOA,   8, 
            MGOB,   8, 
            MGOC,   8, 
            MGOD,   8, 
            MGOE,   8, 
            MGOF,   8, 
            Offset (0x2E), 
            Offset (0x2F), 
            Offset (0x30)
        }

        Device (UBTC)
        {
            Name (_HID, EisaId ("USBC000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0CA0"))  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "USB Type C")  // _DDN: DOS Device Name
            Name (_ADR, Zero)  // _ADR: Address
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PCI0.LPC0.EC0
            })
            Device (CR01)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (Package (0x04)
                    {
                        0xFF, 
                        0x09, 
                        0x00, 
                        0x00
                    })
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00,  // ........
                            /* 0008 */  0x51, 0x04, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00,  // Q.......
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                }
            }

            Device (CR02)
            {
                Name (_ADR, 0x01)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (Package (0x04)
                    {
                        0xFF, 
                        0x09, 
                        0x00, 
                        0x00
                    })
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x59, 0x04, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00,  // Y.......
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x77766000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.UBTC._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            OperationRegion (USBC, SystemMemory, 0x77766000, 0x30)
            Field (USBC, ByteAcc, Lock, Preserve)
            {
                VER1,   8, 
                VER2,   8, 
                RSV1,   8, 
                RSV2,   8, 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8, 
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8, 
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8
            }

            Mutex (UBSY, 0x00)
            Method (SECM, 1, Serialized)
            {
                Local0 = 0x64
                While (((\_SB.SCMD != 0x00) && (Local0 != 0x00)))
                {
                    Sleep (0x01)
                    Local0--
                }

                \_SB.SCMD = Arg0
                If ((Arg0 == 0x02))
                {
                    Local0 = 0x64
                    While (((\_SB.SCMD != 0x00) && (Local0 != 0x00)))
                    {
                        Sleep (0x01)
                        Local0--
                    }
                }
            }

            Method (ECWR, 0, Serialized)
            {
                Acquire (UBSY, 0xFFFF)
                If ((\SPSU == 0x04))
                {
                    \_SB.MGO0 = MGO0 /* \_SB_.UBTC.MGO0 */
                    Sleep (0x01)
                    \_SB.MGO1 = MGO1 /* \_SB_.UBTC.MGO1 */
                    Sleep (0x01)
                    \_SB.MGO2 = MGO2 /* \_SB_.UBTC.MGO2 */
                    Sleep (0x01)
                    \_SB.MGO3 = MGO3 /* \_SB_.UBTC.MGO3 */
                    Sleep (0x01)
                    \_SB.MGO4 = MGO4 /* \_SB_.UBTC.MGO4 */
                    Sleep (0x01)
                    \_SB.MGO5 = MGO5 /* \_SB_.UBTC.MGO5 */
                    Sleep (0x01)
                    \_SB.MGO6 = MGO6 /* \_SB_.UBTC.MGO6 */
                    Sleep (0x01)
                    \_SB.MGO7 = MGO7 /* \_SB_.UBTC.MGO7 */
                    Sleep (0x01)
                    \_SB.MGO8 = MGO8 /* \_SB_.UBTC.MGO8 */
                    Sleep (0x01)
                    \_SB.MGO9 = MGO9 /* \_SB_.UBTC.MGO9 */
                    Sleep (0x01)
                    \_SB.MGOA = MGOA /* \_SB_.UBTC.MGOA */
                    Sleep (0x01)
                    \_SB.MGOB = MGOB /* \_SB_.UBTC.MGOB */
                    Sleep (0x01)
                    \_SB.MGOC = MGOC /* \_SB_.UBTC.MGOC */
                    Sleep (0x01)
                    \_SB.MGOD = MGOD /* \_SB_.UBTC.MGOD */
                    Sleep (0x01)
                    \_SB.MGOE = MGOE /* \_SB_.UBTC.MGOE */
                    Sleep (0x01)
                    \_SB.MGOF = MGOF /* \_SB_.UBTC.MGOF */
                    Sleep (0x01)
                    \_SB.CTL0 = CTL0 /* \_SB_.UBTC.CTL0 */
                    Sleep (0x01)
                    \_SB.CTL1 = CTL1 /* \_SB_.UBTC.CTL1 */
                    Sleep (0x01)
                    \_SB.CTL2 = CTL2 /* \_SB_.UBTC.CTL2 */
                    Sleep (0x01)
                    \_SB.CTL3 = CTL3 /* \_SB_.UBTC.CTL3 */
                    Sleep (0x01)
                    \_SB.CTL4 = CTL4 /* \_SB_.UBTC.CTL4 */
                    Sleep (0x01)
                    \_SB.CTL5 = CTL5 /* \_SB_.UBTC.CTL5 */
                    Sleep (0x01)
                    \_SB.CTL6 = CTL6 /* \_SB_.UBTC.CTL6 */
                    Sleep (0x01)
                    \_SB.CTL7 = CTL7 /* \_SB_.UBTC.CTL7 */
                    Sleep (0x19)
                    SECM (0x01)
                }
                Else
                {
                    \_SB.MGO0 = MGO0 /* \_SB_.UBTC.MGO0 */
                    \_SB.MGO1 = MGO1 /* \_SB_.UBTC.MGO1 */
                    \_SB.MGO2 = MGO2 /* \_SB_.UBTC.MGO2 */
                    \_SB.MGO3 = MGO3 /* \_SB_.UBTC.MGO3 */
                    \_SB.MGO4 = MGO4 /* \_SB_.UBTC.MGO4 */
                    \_SB.MGO5 = MGO5 /* \_SB_.UBTC.MGO5 */
                    \_SB.MGO6 = MGO6 /* \_SB_.UBTC.MGO6 */
                    \_SB.MGO7 = MGO7 /* \_SB_.UBTC.MGO7 */
                    \_SB.MGO8 = MGO8 /* \_SB_.UBTC.MGO8 */
                    \_SB.MGO9 = MGO9 /* \_SB_.UBTC.MGO9 */
                    \_SB.MGOA = MGOA /* \_SB_.UBTC.MGOA */
                    \_SB.MGOB = MGOB /* \_SB_.UBTC.MGOB */
                    \_SB.MGOC = MGOC /* \_SB_.UBTC.MGOC */
                    \_SB.MGOD = MGOD /* \_SB_.UBTC.MGOD */
                    \_SB.MGOE = MGOE /* \_SB_.UBTC.MGOE */
                    \_SB.MGOF = MGOF /* \_SB_.UBTC.MGOF */
                    \_SB.CTL0 = CTL0 /* \_SB_.UBTC.CTL0 */
                    \_SB.CTL1 = CTL1 /* \_SB_.UBTC.CTL1 */
                    \_SB.CTL2 = CTL2 /* \_SB_.UBTC.CTL2 */
                    \_SB.CTL3 = CTL3 /* \_SB_.UBTC.CTL3 */
                    \_SB.CTL4 = CTL4 /* \_SB_.UBTC.CTL4 */
                    \_SB.CTL5 = CTL5 /* \_SB_.UBTC.CTL5 */
                    \_SB.CTL6 = CTL6 /* \_SB_.UBTC.CTL6 */
                    \_SB.CTL7 = CTL7 /* \_SB_.UBTC.CTL7 */
                    Sleep (0x19)
                    SECM (0x01)
                }

                Release (UBSY)
            }

            Method (ECRD, 0, Serialized)
            {
                Acquire (UBSY, 0xFFFF)
                If ((\SPSU == 0x04))
                {
                    SECM (0x02)
                    Sleep (0x19)
                    MGI0 = \_SB.MGI0
                    Sleep (0x01)
                    MGI1 = \_SB.MGI1
                    Sleep (0x01)
                    MGI2 = \_SB.MGI2
                    Sleep (0x01)
                    MGI3 = \_SB.MGI3
                    Sleep (0x01)
                    MGI4 = \_SB.MGI4
                    Sleep (0x01)
                    MGI5 = \_SB.MGI5
                    Sleep (0x01)
                    MGI6 = \_SB.MGI6
                    Sleep (0x01)
                    MGI7 = \_SB.MGI7
                    Sleep (0x01)
                    MGI8 = \_SB.MGI8
                    Sleep (0x01)
                    MGI9 = \_SB.MGI9
                    Sleep (0x01)
                    MGIA = \_SB.MGIA
                    Sleep (0x01)
                    MGIB = \_SB.MGIB
                    Sleep (0x01)
                    MGIC = \_SB.MGIC
                    Sleep (0x01)
                    MGID = \_SB.MGID
                    Sleep (0x01)
                    MGIE = \_SB.MGIE
                    Sleep (0x01)
                    MGIF = \_SB.MGIF
                    Sleep (0x01)
                    CCI0 = \_SB.CCI0
                    Sleep (0x01)
                    CCI1 = \_SB.CCI1
                    Sleep (0x01)
                    CCI2 = \_SB.CCI2
                    Sleep (0x01)
                    CCI3 = \_SB.CCI3
                }
                Else
                {
                    SECM (0x02)
                    Sleep (0x19)
                    MGI0 = \_SB.MGI0
                    MGI1 = \_SB.MGI1
                    MGI2 = \_SB.MGI2
                    MGI3 = \_SB.MGI3
                    MGI4 = \_SB.MGI4
                    MGI5 = \_SB.MGI5
                    MGI6 = \_SB.MGI6
                    MGI7 = \_SB.MGI7
                    MGI8 = \_SB.MGI8
                    MGI9 = \_SB.MGI9
                    MGIA = \_SB.MGIA
                    MGIB = \_SB.MGIB
                    MGIC = \_SB.MGIC
                    MGID = \_SB.MGID
                    MGIE = \_SB.MGIE
                    MGIF = \_SB.MGIF
                    CCI0 = \_SB.CCI0
                    CCI1 = \_SB.CCI1
                    CCI2 = \_SB.CCI2
                    CCI3 = \_SB.CCI3
                }

                Release (UBSY)
            }

            Method (NTFY, 0, Serialized)
            {
                ECRD ()
                Sleep (0x01)
                Notify (\_SB.UBTC, 0x80) // Status Change
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("6f8398c2-7ca4-11e4-ad36-631042b5008f") /* Unknown UUID */))
                {
                    If ((ToInteger (Arg2) == 0x00))
                    {
                        Return (Buffer (0x01)
                        {
                             0x0F                                             // .
                        })
                    }
                    ElseIf ((ToInteger (Arg2) == 0x01))
                    {
                        ECWR ()
                    }
                    ElseIf ((ToInteger (Arg2) == 0x02))
                    {
                        ECRD ()
                    }
                }

                Return (0x00)
            }
        }
    }

    Scope (\_SB.PCI0.LPC0.EC0)
    {
        Method (_Q4F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            \_SB.UBTC.NTFY ()
        }
    }
}



SSDT20
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R23  ", 0x00000001)
{
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)

}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R23  ", 0x00000001)
{
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)

    Scope (\_SB)
    {
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            Name (MSDB, One)
            Zero
            Name (U4PC, 0xFF)
            CreateDWordField (Arg0, 0x00, UID0)
            CreateDWordField (Arg3, 0x00, CDW1)
            If ((Arg2 >= 0x02))
            {
                CreateDWordField (Arg3, 0x04, CDW2)
            }

            If ((Arg2 >= 0x03))
            {
                CreateDWordField (Arg3, 0x08, CDW3)
            }

            If ((Arg2 == 0x01))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X\n", UID0, CDW1, 0x00, 0x00, 0x00, 0x00)
            }
            ElseIf ((Arg2 == 0x02))
            {
                Local2 = CDW2 /* \_SB_._OSC.CDW2 */
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, 0x00, 0x00, 0x00)
            }
            Else
            {
                Local3 = CDW3 /* \_SB_._OSC.CDW3 */
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, 0x00, 0x00)
            }

            If ((Arg0 == ToUUID ("23a0d13a-26ab-486c-9c5f-0ffa525a575a") /* USB4 Capabilities */))
            {
                If ((U4PC != 0xFF))
                {
                    Local3 &= 0xFFFFFFF0
                    Local3 |= U4PC /* \_SB_._OSC.U4PC */
                }

                If ((Local3 != CDW3))
                {
                    CDW3 = Local3
                    CDW1 |= 0x10
                }
            }
            ElseIf ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    Local2 |= 0x04
                    If ((MSDB == 0x01))
                    {
                        Local2 &= 0xFFFFFF7F
                    }

                    If ((U4PC != 0xFF))
                    {
                        Local2 |= 0x00040000
                    }

                    If ((Local2 != CDW2))
                    {
                        CDW2 = Local2
                        CDW1 |= 0x10
                    }
                }
                Else
                {
                    CDW1 |= 0x08
                }
            }
            Else
            {
                CDW1 |= 0x04
            }

            If ((Arg2 == 0x01))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X\n", UID0, CDW1, 0x00, 0x00, 0x00, 0x00)
            }
            ElseIf ((Arg2 == 0x02))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, 0x00, 0x00, 0x00)
            }
            Else
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, 0x00, 0x00)
            }

            Return (Arg3)
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R23  ", 0x00000001)
{
    External (_ADR, IntObj)
    External (_SB_.PCI0.DADR, IntObj)
    External (_SB_.PCI0.EBUS, IntObj)
    External (_SB_.PCI0.GP17, DeviceObj)
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (_SB_.PCI0.GP17.HDAU, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.XHC0, DeviceObj)
    External (_SB_.PCI0.GP17.XHC1, DeviceObj)
    External (_SB_.PCI0.RPRM, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.SPCH, MethodObj)    // 2 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (P_OF, MethodObj)    // 0 Arguments
    External (P_ON, MethodObj)    // 0 Arguments
    External (PPS0, MethodObj)    // 0 Arguments
    External (PPS3, MethodObj)    // 0 Arguments
    External (PSTA, MethodObj)    // 0 Arguments
    External (SDSW, MethodObj)    // 3 Arguments
    External (SINI, MethodObj)    // 0 Arguments
    External (SREG, MethodObj)    // 2 Arguments
    External (SSTA, MethodObj)    // 0 Arguments

    Scope (\)
    {
        Name (P1D3, 0x55)
        Name (F0D3, 0x04)
        Name (F3D3, 0x04)
        Name (F1D3, 0x04)
        Name (F5D3, 0x04)
        Name (F6D3, 0x04)
        Name (F5WV, 0x01)
    }

    Scope (\_SB)
    {
        Method (CK17, 0, NotSerialized)
        {
            Local0 = \_SB.PCI0.GP17.RPRM ((\_SB.PCI0.GP17.DADR + 0x54), 0x02)
            \_SB.PCI0.GP17.WPRM ((\_SB.PCI0.GP17.DADR + 0x54), 0x02, (Local0 & 0x7FFC))
            Local1 = \_SB.PCI0.GP17.VGA.RPRM ((\_SB.PCI0.GP17.VGA.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP17.HDAU.RPRM ((\_SB.PCI0.GP17.HDAU.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP17.XHC0.RPRM ((\_SB.PCI0.GP17.XHC0.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP17.XHC1.RPRM ((\_SB.PCI0.GP17.XHC1.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP17.ACP.RPRM ((\_SB.PCI0.GP17.ACP.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP17.AZAL.RPRM ((\_SB.PCI0.GP17.AZAL.DADR + 0x54), 0x02)
            \_SB.PCI0.GP17.WPRM ((\_SB.PCI0.GP17.DADR + 0x54), 0x02, (Local0 & 0x7FFF))
        }
    }

    Scope (\_SB.PCI0.GP17)
    {
        Method (ZS0W, 0, Serialized)
        {
            Local0 = 0x00
            If ((\P1D3 != 0x55))
            {
                Local0 = \P1D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }

        Method (ZPRW, 0, Serialized)
        {
            Return (Package (0x02)
            {
                0x19, 
                0x03
            })
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, 0x00)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, 0x00)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP17.RPRM.VARR */
            If ((Arg1 == 0x01))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == 0x01))
            {
                OperationRegion (VARA, SystemMemory, Local0, 0x01)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = 0x00
            Local0 = 0x00
            While ((Local0 <= 0x1F))
            {
                Local1 = 0x00
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != 0x00)))
                    {
                        Local2 |= (0x01 << Local0)
                    }
                    ElseIf ((Local1 == 0x00))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = 0x00
            Local1 = RPRM ((Arg0 + 0x34), 0x01)
            While ((Local1 != 0x00))
            {
                Local2 = RPRM ((DADR + Local1), 0x01)
                If (((Local2 == 0x00) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* External reference */
                    }
                    Else
                    {
                        DBUS = 0x00
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            0x01) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + 0x00), 0x04)
                    If (((Local1 == Local0) || (Local1 == 0x00)))
                    {
                        DSTA = 0x00
                        ESTA = 0x00
                        If ((DBUS != 0x00))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), 0x01)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            0x01) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            0x01) & 0x40) == 0x00))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == 0x00))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = 0x00
                    }
                }
                Else
                {
                    DSTA = 0x00
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == 0x01) && (PWST == 0xD3)) && (PW3S == 0x01)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == 0x00) && (PWST == 0xD0)) && (PW3S == 0x00)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP17.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + 0x00), 0x04)
            If (((Local1 == Local0) || (Local1 == 0x00)))
            {
                PCSA = 0x00
                PWST = 0xD3
                PW3S = 0x00
            }
            Else
            {
                PCSA = 0x01
                PWST = 0xD0
                PW3S = 0x01
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, 0x00, 0x00)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == 0x01)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                    {
                        PCSA = 0x01
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == 0x00)))
            {
                PCSA = 0x00
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, 0x00)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (POWS))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP17.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == 0x00))
                {
                    PW3S = 0x01
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == 0x01))
                {
                    PW3S = 0x00
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            Local0 = 0x00
            If ((\F0D3 != 0x55))
            {
                Local0 = \F0D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, 0x00)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, 0x00)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP17.VGA_.RPRM.VARR */
            If ((Arg1 == 0x01))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == 0x01))
            {
                OperationRegion (VARA, SystemMemory, Local0, 0x01)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = 0x00
            Local0 = 0x00
            While ((Local0 <= 0x1F))
            {
                Local1 = 0x00
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != 0x00)))
                    {
                        Local2 |= (0x01 << Local0)
                    }
                    ElseIf ((Local1 == 0x00))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = 0x00
            Local1 = RPRM ((Arg0 + 0x34), 0x01)
            While ((Local1 != 0x00))
            {
                Local2 = RPRM ((DADR + Local1), 0x01)
                If (((Local2 == 0x00) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP17.EBUS */
                    }
                    Else
                    {
                        DBUS = 0x00
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            0x01) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + 0x00), 0x04)
                    If (((Local1 == Local0) || (Local1 == 0x00)))
                    {
                        DSTA = 0x00
                        ESTA = 0x00
                        If ((DBUS != 0x00))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), 0x01)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            0x01) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            0x01) & 0x40) == 0x00))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == 0x00))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = 0x00
                    }
                }
                Else
                {
                    DSTA = 0x00
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == 0x01) && (PWST == 0xD3)) && (PW3S == 0x01)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == 0x00) && (PWST == 0xD0)) && (PW3S == 0x00)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP17.VGA_.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + 0x00), 0x04)
            If (((Local1 == Local0) || (Local1 == 0x00)))
            {
                PCSA = 0x00
                PWST = 0xD3
                PW3S = 0x00
            }
            Else
            {
                PCSA = 0x01
                PWST = 0xD0
                PW3S = 0x01
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, 0x00, 0x00)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == 0x01)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                    {
                        PCSA = 0x01
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == 0x00)))
            {
                PCSA = 0x00
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, 0x00)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (POWS))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP17.VGA_.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == 0x00))
                {
                    PW3S = 0x01
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == 0x01))
                {
                    PW3S = 0x00
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP17.HDAU)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            Local0 = 0x00
            If ((\F1D3 != 0x55))
            {
                Local0 = \F1D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, 0x00)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, 0x00)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP17.HDAU.RPRM.VARR */
            If ((Arg1 == 0x01))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == 0x01))
            {
                OperationRegion (VARA, SystemMemory, Local0, 0x01)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = 0x00
            Local0 = 0x00
            While ((Local0 <= 0x1F))
            {
                Local1 = 0x00
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != 0x00)))
                    {
                        Local2 |= (0x01 << Local0)
                    }
                    ElseIf ((Local1 == 0x00))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = 0x00
            Local1 = RPRM ((Arg0 + 0x34), 0x01)
            While ((Local1 != 0x00))
            {
                Local2 = RPRM ((DADR + Local1), 0x01)
                If (((Local2 == 0x00) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP17.EBUS */
                    }
                    Else
                    {
                        DBUS = 0x00
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            0x01) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + 0x00), 0x04)
                    If (((Local1 == Local0) || (Local1 == 0x00)))
                    {
                        DSTA = 0x00
                        ESTA = 0x00
                        If ((DBUS != 0x00))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), 0x01)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            0x01) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            0x01) & 0x40) == 0x00))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == 0x00))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = 0x00
                    }
                }
                Else
                {
                    DSTA = 0x00
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == 0x01) && (PWST == 0xD3)) && (PW3S == 0x01)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == 0x00) && (PWST == 0xD0)) && (PW3S == 0x00)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP17.HDAU.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + 0x00), 0x04)
            If (((Local1 == Local0) || (Local1 == 0x00)))
            {
                PCSA = 0x00
                PWST = 0xD3
                PW3S = 0x00
            }
            Else
            {
                PCSA = 0x01
                PWST = 0xD0
                PW3S = 0x01
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, 0x00, 0x00)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == 0x01)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                    {
                        PCSA = 0x01
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == 0x00)))
            {
                PCSA = 0x00
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, 0x00)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (POWS))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP17.HDAU.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == 0x00))
                {
                    PW3S = 0x01
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == 0x01))
                {
                    PW3S = 0x00
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP17.XHC0)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            Local0 = 0x00
            If ((\F3D3 != 0x55))
            {
                Local0 = \F3D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x19, 0x04}\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            Return (Package (0x02)
            {
                0x19, 
                0x03
            })
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3C01)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3C03)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3C05)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3C06)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3C08)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, 0x00)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, 0x00)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP17.XHC0.RPRM.VARR */
            If ((Arg1 == 0x01))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == 0x01))
            {
                OperationRegion (VARA, SystemMemory, Local0, 0x01)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = 0x00
            Local0 = 0x00
            While ((Local0 <= 0x1F))
            {
                Local1 = 0x00
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != 0x00)))
                    {
                        Local2 |= (0x01 << Local0)
                    }
                    ElseIf ((Local1 == 0x00))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = 0x00
            Local1 = RPRM ((Arg0 + 0x34), 0x01)
            While ((Local1 != 0x00))
            {
                Local2 = RPRM ((DADR + Local1), 0x01)
                If (((Local2 == 0x00) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP17.EBUS */
                    }
                    Else
                    {
                        DBUS = 0x00
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            0x01) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + 0x00), 0x04)
                    If (((Local1 == Local0) || (Local1 == 0x00)))
                    {
                        DSTA = 0x00
                        ESTA = 0x00
                        If ((DBUS != 0x00))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), 0x01)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            0x01) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            0x01) & 0x40) == 0x00))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == 0x00))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = 0x00
                    }
                }
                Else
                {
                    DSTA = 0x00
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == 0x01) && (PWST == 0xD3)) && (PW3S == 0x01)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == 0x00) && (PWST == 0xD0)) && (PW3S == 0x00)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP17.XHC0.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + 0x00), 0x04)
            If (((Local1 == Local0) || (Local1 == 0x00)))
            {
                PCSA = 0x00
                PWST = 0xD3
                PW3S = 0x00
            }
            Else
            {
                PCSA = 0x01
                PWST = 0xD0
                PW3S = 0x01
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, 0x00, 0x00)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == 0x01)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                    {
                        PCSA = 0x01
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == 0x00)))
            {
                PCSA = 0x00
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, 0x00)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (POWS))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP17.XHC0.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == 0x00))
                {
                    PW3S = 0x01
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == 0x01))
                {
                    PW3S = 0x00
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP17.XHC1)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            Local0 = 0x00
            If ((\F3D3 != 0x55))
            {
                Local0 = \F3D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x19, 0x04}\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            Return (Package (0x02)
            {
                0x19, 
                0x03
            })
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3D01)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3D03)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3D05)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3D06)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3D08)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, 0x00)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, 0x00)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP17.XHC1.RPRM.VARR */
            If ((Arg1 == 0x01))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == 0x01))
            {
                OperationRegion (VARA, SystemMemory, Local0, 0x01)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = 0x00
            Local0 = 0x00
            While ((Local0 <= 0x1F))
            {
                Local1 = 0x00
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != 0x00)))
                    {
                        Local2 |= (0x01 << Local0)
                    }
                    ElseIf ((Local1 == 0x00))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = 0x00
            Local1 = RPRM ((Arg0 + 0x34), 0x01)
            While ((Local1 != 0x00))
            {
                Local2 = RPRM ((DADR + Local1), 0x01)
                If (((Local2 == 0x00) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP17.EBUS */
                    }
                    Else
                    {
                        DBUS = 0x00
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            0x01) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + 0x00), 0x04)
                    If (((Local1 == Local0) || (Local1 == 0x00)))
                    {
                        DSTA = 0x00
                        ESTA = 0x00
                        If ((DBUS != 0x00))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), 0x01)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            0x01) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            0x01) & 0x40) == 0x00))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == 0x00))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = 0x00
                    }
                }
                Else
                {
                    DSTA = 0x00
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == 0x01) && (PWST == 0xD3)) && (PW3S == 0x01)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == 0x00) && (PWST == 0xD0)) && (PW3S == 0x00)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP17.XHC1.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + 0x00), 0x04)
            If (((Local1 == Local0) || (Local1 == 0x00)))
            {
                PCSA = 0x00
                PWST = 0xD3
                PW3S = 0x00
            }
            Else
            {
                PCSA = 0x01
                PWST = 0xD0
                PW3S = 0x01
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, 0x00, 0x00)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == 0x01)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                    {
                        PCSA = 0x01
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == 0x00)))
            {
                PCSA = 0x00
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, 0x00)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (POWS))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP17.XHC1.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == 0x00))
                {
                    PW3S = 0x01
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == 0x01))
                {
                    PW3S = 0x00
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            Local0 = 0x00
            If ((\F5D3 != 0x55))
            {
                Local0 = \F5D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, 0x00)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, 0x00)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP17.ACP_.RPRM.VARR */
            If ((Arg1 == 0x01))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == 0x01))
            {
                OperationRegion (VARA, SystemMemory, Local0, 0x01)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = 0x00
            Local0 = 0x00
            While ((Local0 <= 0x1F))
            {
                Local1 = 0x00
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != 0x00)))
                    {
                        Local2 |= (0x01 << Local0)
                    }
                    ElseIf ((Local1 == 0x00))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = 0x00
            Local1 = RPRM ((Arg0 + 0x34), 0x01)
            While ((Local1 != 0x00))
            {
                Local2 = RPRM ((DADR + Local1), 0x01)
                If (((Local2 == 0x00) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP17.EBUS */
                    }
                    Else
                    {
                        DBUS = 0x00
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            0x01) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + 0x00), 0x04)
                    If (((Local1 == Local0) || (Local1 == 0x00)))
                    {
                        DSTA = 0x00
                        ESTA = 0x00
                        If ((DBUS != 0x00))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), 0x01)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            0x01) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            0x01) & 0x40) == 0x00))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == 0x00))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = 0x00
                    }
                }
                Else
                {
                    DSTA = 0x00
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == 0x01) && (PWST == 0xD3)) && (PW3S == 0x01)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == 0x00) && (PWST == 0xD0)) && (PW3S == 0x00)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP17.ACP_.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + 0x00), 0x04)
            If (((Local1 == Local0) || (Local1 == 0x00)))
            {
                PCSA = 0x00
                PWST = 0xD3
                PW3S = 0x00
            }
            Else
            {
                PCSA = 0x01
                PWST = 0xD0
                PW3S = 0x01
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, 0x00, 0x00)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == 0x01)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                    {
                        PCSA = 0x01
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == 0x00)))
            {
                PCSA = 0x00
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (POWS))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP17.ACP_.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == 0x00))
                {
                    PW3S = 0x01
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == 0x01))
                {
                    PW3S = 0x00
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP17.AZAL)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            Local0 = 0x00
            If ((\F6D3 != 0x55))
            {
                Local0 = \F6D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, 0x00)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, 0x00)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP17.AZAL.RPRM.VARR */
            If ((Arg1 == 0x01))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, 0x00, 0x00)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == 0x01))
            {
                OperationRegion (VARA, SystemMemory, Local0, 0x01)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, 0x00, 0x00)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = 0x00
            Local0 = 0x00
            While ((Local0 <= 0x1F))
            {
                Local1 = 0x00
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != 0x00)))
                    {
                        Local2 |= (0x01 << Local0)
                    }
                    ElseIf ((Local1 == 0x00))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, 0x00, 0x00, 0x00)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = 0x00
            Local1 = RPRM ((Arg0 + 0x34), 0x01)
            While ((Local1 != 0x00))
            {
                Local2 = RPRM ((DADR + Local1), 0x01)
                If (((Local2 == 0x00) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + 0x01)), 0x01)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, 0x00, 0x00)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP17.EBUS */
                    }
                    Else
                    {
                        DBUS = 0x00
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            0x01) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + 0x00), 0x04)
                    If (((Local1 == Local0) || (Local1 == 0x00)))
                    {
                        DSTA = 0x00
                        ESTA = 0x00
                        If ((DBUS != 0x00))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), 0x01)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            0x01) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == 0x00))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            0x01) & 0x40) == 0x00))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), 0x01) & 
                                0x40) == 0x00))
                            {
                                DSTA = 0x00
                                ESTA = 0x00
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == 0x00))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = 0x00
                    }
                }
                Else
                {
                    DSTA = 0x00
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == 0x01) && (PWST == 0xD3)) && (PW3S == 0x01)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == 0x00) && (PWST == 0xD0)) && (PW3S == 0x00)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP17.AZAL.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + 0x00), 0x04)
            If (((Local1 == Local0) || (Local1 == 0x00)))
            {
                PCSA = 0x00
                PWST = 0xD3
                PW3S = 0x00
            }
            Else
            {
                PCSA = 0x01
                PWST = 0xD0
                PW3S = 0x01
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, 0x00, 0x00)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == 0x01)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), 0x01) & 0xFC) == 0x04))
                    {
                        PCSA = 0x01
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == 0x00)))
            {
                PCSA = 0x00
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, 0x00, 0x00)
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                If (CondRefOf (POWS))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP17.AZAL.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == 0x00))
                {
                    PW3S = 0x01
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == 0x01))
                {
                    PW3S = 0x00
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_GPE)
    {
        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("  OEM-ASL-\\_GPE._L19\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (\_SB.PCI0.GP17))
            {
                M460 ("    Notify (\\_SB.PCI0.GP17, 0x2)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP17.XHC0))
            {
                M460 ("    Notify (\\_SB.PCI0.GP17.XHC0, 0x2)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP17.XHC1))
            {
                M460 ("    Notify (\\_SB.PCI0.GP17.XHC1, 0x2)\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R23  ", 0x00000001)
{
    External (_GPE, DeviceObj)
    External (_GPE.AIE0, MethodObj)    // 0 Arguments
    External (_GPE.AIE1, MethodObj)    // 0 Arguments
    External (_GPE.AIE2, MethodObj)    // 0 Arguments
    External (_GPE.AIE3, MethodObj)    // 0 Arguments
    External (_GPE.BIE0, MethodObj)    // 0 Arguments
    External (_GPE.BIE1, MethodObj)    // 0 Arguments
    External (_GPE.BIE2, MethodObj)    // 0 Arguments
    External (_GPE.BIE3, MethodObj)    // 0 Arguments
    External (_GPE.PTS0, MethodObj)    // 1 Arguments
    External (_GPE.PTS1, MethodObj)    // 1 Arguments
    External (_GPE.PTS2, MethodObj)    // 1 Arguments
    External (_GPE.PTS3, MethodObj)    // 1 Arguments
    External (_GPE.SP00, MethodObj)    // 0 Arguments
    External (_GPE.SP01, MethodObj)    // 0 Arguments
    External (_GPE.SP02, MethodObj)    // 0 Arguments
    External (_GPE.SP03, MethodObj)    // 0 Arguments
    External (_GPE.SP04, MethodObj)    // 0 Arguments
    External (_GPE.SP05, MethodObj)    // 0 Arguments
    External (_GPE.SP06, MethodObj)    // 0 Arguments
    External (_GPE.SP07, MethodObj)    // 0 Arguments
    External (_GPE.SP10, MethodObj)    // 0 Arguments
    External (_GPE.SP11, MethodObj)    // 0 Arguments
    External (_GPE.SP12, MethodObj)    // 0 Arguments
    External (_GPE.SP13, MethodObj)    // 0 Arguments
    External (_GPE.SP14, MethodObj)    // 0 Arguments
    External (_GPE.SP15, MethodObj)    // 0 Arguments
    External (_GPE.SP16, MethodObj)    // 0 Arguments
    External (_GPE.SP17, MethodObj)    // 0 Arguments
    External (_GPE.SP20, MethodObj)    // 0 Arguments
    External (_GPE.SP21, MethodObj)    // 0 Arguments
    External (_GPE.SP22, MethodObj)    // 0 Arguments
    External (_GPE.SP23, MethodObj)    // 0 Arguments
    External (_GPE.SP24, MethodObj)    // 0 Arguments
    External (_GPE.SP25, MethodObj)    // 0 Arguments
    External (_GPE.SP26, MethodObj)    // 0 Arguments
    External (_GPE.SP27, MethodObj)    // 0 Arguments
    External (_GPE.SP30, MethodObj)    // 0 Arguments
    External (_GPE.SP31, MethodObj)    // 0 Arguments
    External (_GPE.SP32, MethodObj)    // 0 Arguments
    External (_GPE.SP33, MethodObj)    // 0 Arguments
    External (_GPE.SP34, MethodObj)    // 0 Arguments
    External (_GPE.SP35, MethodObj)    // 0 Arguments
    External (_GPE.SP36, MethodObj)    // 0 Arguments
    External (_GPE.SP37, MethodObj)    // 0 Arguments
    External (_GPE.SP40, MethodObj)    // 0 Arguments
    External (_GPE.SP41, MethodObj)    // 0 Arguments
    External (_GPE.SP42, MethodObj)    // 0 Arguments
    External (_GPE.SP43, MethodObj)    // 0 Arguments
    External (_GPE.SP44, MethodObj)    // 0 Arguments
    External (_GPE.SP45, MethodObj)    // 0 Arguments
    External (_GPE.SP46, MethodObj)    // 0 Arguments
    External (_GPE.SP47, MethodObj)    // 0 Arguments
    External (_GPE.SP50, MethodObj)    // 0 Arguments
    External (_GPE.SP51, MethodObj)    // 0 Arguments
    External (_GPE.SP52, MethodObj)    // 0 Arguments
    External (_GPE.SP53, MethodObj)    // 0 Arguments
    External (_GPE.SP54, MethodObj)    // 0 Arguments
    External (_GPE.SP55, MethodObj)    // 0 Arguments
    External (_GPE.SP56, MethodObj)    // 0 Arguments
    External (_GPE.SP57, MethodObj)    // 0 Arguments
    External (_GPE.SP60, MethodObj)    // 0 Arguments
    External (_GPE.SP61, MethodObj)    // 0 Arguments
    External (_GPE.SP62, MethodObj)    // 0 Arguments
    External (_GPE.SP63, MethodObj)    // 0 Arguments
    External (_GPE.SP64, MethodObj)    // 0 Arguments
    External (_GPE.SP65, MethodObj)    // 0 Arguments
    External (_GPE.SP66, MethodObj)    // 0 Arguments
    External (_GPE.SP67, MethodObj)    // 0 Arguments
    External (_GPE.SP70, MethodObj)    // 0 Arguments
    External (_GPE.SP71, MethodObj)    // 0 Arguments
    External (_GPE.SP72, MethodObj)    // 0 Arguments
    External (_GPE.SP73, MethodObj)    // 0 Arguments
    External (_GPE.SP74, MethodObj)    // 0 Arguments
    External (_GPE.SP75, MethodObj)    // 0 Arguments
    External (_GPE.SP76, MethodObj)    // 0 Arguments
    External (_GPE.SP77, MethodObj)    // 0 Arguments
    External (_GPE.WAK0, MethodObj)    // 1 Arguments
    External (_GPE.WAK1, MethodObj)    // 1 Arguments
    External (_GPE.WAK2, MethodObj)    // 1 Arguments
    External (_GPE.WAK3, MethodObj)    // 1 Arguments
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.AM00, MutexObj)
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.OPTS, MethodObj)    // 1 Arguments
    External (_SB_.OWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M127, DeviceObj)
    External (MOEM, MethodObj)    // 3 Arguments
    External (NFPC, MethodObj)    // 0 Arguments

    OperationRegion (CPNV, SystemMemory, 0x77767018, 0x000100F7)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72, 
        M453,   32, 
        M454,   16, 
        M455,   8, 
        M456,   8, 
        M457,   8, 
        M449,   72, 
        M4C0,   32, 
        M23A,   8, 
        M31C,   32, 
        M4F0,   32
    }

    Name (CTMR, Zero)
    Name (M285, Buffer (0x04)
    {
         0x01, 0x03, 0x80, 0x00                           // ....
    })
    Method (M000, 1, Serialized)
    {
        CreateByteField (M285, 0x00, M286)
        CreateByteField (M285, 0x01, M287)
        CreateWordField (M285, 0x02, M288)
        Name (M450, Buffer (0x05)
        {
             0x00, 0x96, 0x05, 0x00, 0x00                     // .....
        })
        CreateDWordField (M450, 0x00, M452)
        CreateByteField (M450, 0x04, M451)
        Local0 = (Arg0 + 0xB0000000)
        If ((ToInteger (M286) == 0x01))
        {
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == 0x01))
            {
                OperationRegion (VARO, SystemIO, Local1, 0x01)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }

        If ((ToInteger (M451) == 0x01))
        {
            Local2 = ToInteger (M452)
            M250 (0x00, 0x00, 0x00, Local2, Local0)
        }

        OperationRegion (VARP, SystemMemory, 0xFED80808, 0x04)
        Field (VARP, DWordAcc, NoLock, Preserve)
        {
            VARU,   32
        }

        Local1 = VARU /* \M000.VARU */
        If ((Local1 >= CTMR))
        {
            Local2 = (Local1 - CTMR) /* \CTMR */
        }
        Else
        {
            Local2 = (Local1 + ((0xFFFFFFFE - CTMR) + 0x01))
        }

        Divide (Local2, 0x19, Local3, Local2)
        Divide ((Local2 * 0x07), 0x03E8, Local3, Local2)
        If ((Local3 >= 0x64))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.%d ms\n", Local0, Local1, Local2, Local3, 0x00, 0x00)
        }
        ElseIf ((Local3 >= 0x0A))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.0%d ms\n", Local0, Local1, Local2, Local3, 0x00, 0x00)
        }
        Else
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.00%d ms\n", Local0, Local1, Local2, Local3, 0x00, 0x00)
        }

        CTMR = Local1
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, 0x00, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, 0x00, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, 0x00, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, 0x00, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, 0x00, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = 0x00
        If ((Arg0 == 0x15))
        {
            Local0 = 0x01
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == 0x00))
        {
            If ((Arg1 == 0x00))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x00)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x00)
            }

            If ((Arg1 == 0x01))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFDFFF, 0x00)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFDFD, 0x00)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x00)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x00)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFF7FFF, 0x00)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFF7F7, 0x00)
            }

            Sleep (0x01)
        }

        If ((Arg0 == 0x01))
        {
            If ((Arg1 == 0x00))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == 0x01))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (0x01)
        }

        If ((Arg0 == 0x00))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > 0x00) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (0x01)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (0x00, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (0x00, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, 0x01)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (0x01)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (0x00, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x01)
        M020 (0x00, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, 0x00)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (0x01)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                        If ((Local3 != 0x00))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, 0x00, 0x08)
                            If ((Local4 == 0x00))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                If ((Arg1 == 0x00))
                                {
                                    M000 (0x0DD8)
                                }
                                Else
                                {
                                    M000 (0x0DDB)
                                }
                            }

                            If ((Local4 == 0x01))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                                If ((Arg1 == 0x00))
                                {
                                    M000 (0x0DD9)
                                }
                                Else
                                {
                                    M000 (0x0DDC)
                                }
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                                If ((Arg1 == 0x00))
                                {
                                    M000 (0x0DDA)
                                }
                                Else
                                {
                                    M000 (0x0DDD)
                                }
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                }
            }
        }
    }

    Method (M470, 2, Serialized)
    {
        Local7 = 0x00
        If ((Arg0 != 0x00))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x02, 0x00, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                        If (((Local3 == 0x00) && (Local4 != 0x00)))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = 0x01
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                }
            }
        }

        Return (Local7)
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, 0x00, 0x08)
                        If ((Local4 == 0x00))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 ((Local5 & 0xFF00FFFF), Local6)
                        }

                        If ((Local4 == 0x01))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = 0x00
                    Local2 = 0x01
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                        Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, 0x00, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == 0x00))
                                {
                                    Local3 = 0x00
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == 0x01))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (0x00, M013 ((Local0 + Local1), 0x05, 0x00, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, 0x00, 0x08), 0x19, 0x00, 0x08)
                                        If ((M265 (Local6, 0x00, 0x00) == 0x01))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                Local3 = 0x01
                                            }
                                        }
                                        ElseIf ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    Local3 = 0x03
                                }
                                Else
                                {
                                    Local3 = 0x0F
                                }

                                If ((M085 >= 0x04))
                                {
                                    If ((M085 == 0x08))
                                    {
                                        If (((Local7 & 0x0FF00000) > 0x00))
                                        {
                                            Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << 0x01)))
                                            Local6 |= (Local3 << (Local2 << 0x01))
                                            M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                                0x03) << 0x01), 0x02, Local3)
                                        }
                                    }
                                    ElseIf (((Local7 >> 0x1C) == 0x02))
                                    {
                                        M012 ((M084 + 0x1300), (Local2 >> 0x02), ((Local2 & 
                                            0x03) << 0x01), 0x02, Local3)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                            0x03) << 0x01), 0x02, Local3)
                                    }
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 >> 0x01), ((Local2 & 
                                        0x01) << 0x02), 0x04, Local3)
                                }

                                If ((Arg1 == 0x00))
                                {
                                    M000 (0x0DE0)
                                }

                                If ((Arg1 == 0x01))
                                {
                                    M000 (0x0DE1)
                                }

                                If ((Arg1 == 0x02))
                                {
                                    M000 (0x0DE2)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = 0x01
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                    Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, 0x00, 0x08)
                            If ((Local4 == 0x00))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == 0x01))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                Local7 = M009 ((Local5 & 0xFF00FFFF))
                                Local4 = 0x03F2
                                While (((Local4 > 0x00) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - 0x01)
                                    Stall (0x63)
                                    Local7 = M009 ((Local5 & 0xFF00FFFF))
                                }
                            }

                            If ((Local3 == 0x00))
                            {
                                M000 (0x0DD5)
                            }

                            If ((Local3 == 0x01))
                            {
                                M000 (0x0DD6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                            M000 (0x0DD7)
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = 0x00
        If ((Arg0 != 0x00))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = 0x01
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                    Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = 0x01
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = M108 /* \M108 */
            Local7 = 0x01
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = 0x01
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                        If ((Local3 == 0x00))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x01))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, 0x00, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, 0x00, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, 0x00, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, 0x00, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, 0x00, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, 0x00, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, 0x00, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, 0x00, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, 0x00, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, 0x00, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, 0x00, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, 0x00, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0E
                    }
                }
            }
        }
        Else
        {
            Local7 = 0x00
        }

        If (Local7)
        {
            Local7 = 0x01
        }

        Return (Local7)
    }

    Name (M046, 0xAA)
    Method (M045, 0, Serialized)
    {
        Local0 = 0x00
        If ((M046 == 0xAA))
        {
            M046 = 0x00
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2021"))
                {
                    M046 = 0x0B
                    M460 ("  KER-ASL-_OSI = Windows 11\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                }
                ElseIf (\_OSI ("Windows 2020"))
                {
                    M046 = 0x0A
                    M460 ("  KER-ASL-_OSI = Windows 10, version 2004\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                }
                ElseIf (\_OSI ("Windows 2019"))
                {
                    M046 = 0x09
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1903\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                }
                ElseIf (\_OSI ("Windows 2018.2"))
                {
                    M046 = 0x08
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1809\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                }
                ElseIf (\_OSI ("Windows 2018"))
                {
                    M046 = 0x07
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1803\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                }
                ElseIf (\_OSI ("Windows 2017.2"))
                {
                    M046 = 0x06
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1709\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                }
                ElseIf (\_OSI ("Windows 2017"))
                {
                    M046 = 0x05
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1703\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                }
                ElseIf (\_OSI ("Windows 2016"))
                {
                    M046 = 0x04
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1607\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                }
                ElseIf (\_OSI ("Windows 2015"))
                {
                    M046 = 0x03
                    M460 ("  KER-ASL-_OSI = Windows 10\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                }
                ElseIf (\_OSI ("Windows 2013"))
                {
                    M046 = 0x02
                    M460 ("  KER-ASL-_OSI = Windows 8.1\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                }
                ElseIf (\_OSI ("Windows 2012"))
                {
                    M046 = 0x01
                    M460 ("  KER-ASL-_OSI = Windows 8, Win Server 2012\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                }
            }
        }

        If ((M046 >= 0x01))
        {
            Local0 = 0x01
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        M460 ("  KER-ASL-CpmTriggerSmi (0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, 0x00, 0x00, 0x00)
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > 0x00))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (0x00)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (0x00)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M458, 1, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                THRM,   8, 
                Offset (0x14), 
                LSRM,   8, 
                Offset (0x18), 
                MSRM,   8
            }

            Local1 = 0x001E8480
            While (((Local1 > 0x00) && ((LSRM & 0x60) != 0x60)))
            {
                Local1 -= 0x01
            }

            If ((M457 != 0x00))
            {
                Local2 = 0x001E8480
                While (((Local2 > 0x00) && ((MSRM & 0x10) != 0x10)))
                {
                    Local2 -= 0x01
                }
            }

            If ((Local1 != 0x00))
            {
                THRM = Arg0
                Return (0x00)
            }
        }
        ElseIf ((Local0 > 0x00))
        {
            CreateWordField (M285, 0x02, M288)
            OperationRegion (VARN, SystemIO, Local0, 0x08)
            Field (VARN, ByteAcc, NoLock, Preserve)
            {
                THRI,   8, 
                Offset (0x05), 
                LSRI,   8
            }

            Local1 = 0x001E8480
            If ((ToInteger (M288) != Local0))
            {
                While (((Local1 > 0x00) && ((LSRI & 0x60) != 0x60)))
                {
                    Local1 -= 0x01
                }
            }

            If ((Local1 != 0x00))
            {
                THRI = Arg0
                Return (0x00)
            }
        }

        Return (0xFF)
    }

    Method (M459, 2, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 == 0x00))
        {
            Return (0xFF)
        }
        ElseIf ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = 0x00
                FCRM = M456 /* \M456 */
                DLHM = 0x00
                MCRM = 0x00
            }
        }

        Local0 = SizeOf (Arg0)
        ToInteger (Arg1, Local1)
        Local2 = 0x00
        ToBuffer (Arg0, Local3)
        If ((Local0 != 0x00))
        {
            While (((Local0 > Local1) && (Local2 == 0x00)))
            {
                Local2 = M458 (DerefOf (Local3 [Local1]))
                Local1 += 0x01
            }
        }

        Return (Local2)
    }

    Method (M460, 7, Serialized)
    {
        CreateWordField (M285, 0x02, M288)
        ToInteger (M453, Local7)
        If ((Local7 == 0x00))
        {
            Return (0xFF)
        }
        ElseIf ((Local7 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local7, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = 0x00
                FCRM = M456 /* \M456 */
                DLHM = 0x00
                MCRM = 0x00
            }
        }
        ElseIf ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARS, SystemIO, Local7, 0x04)
            Field (VARS, DWordAcc, NoLock, Preserve)
            {
                VART,   32
            }

            VART = 0x5F535452
        }

        Local0 = SizeOf (Arg0)
        Local1 = 0x00
        Local2 = 0x00
        Local5 = 0x01
        ToBuffer (Arg0, Local3)
        If ((Local0 != 0x00))
        {
            While (((Local0 > Local1) && (Local2 == 0x00)))
            {
                Local4 = DerefOf (Local3 [Local1])
                If (((Local4 == 0x25) && (0x07 > Local5)))
                {
                    If ((Local5 == 0x01))
                    {
                        Local6 = Arg1
                    }
                    ElseIf ((Local5 == 0x02))
                    {
                        Local6 = Arg2
                    }
                    ElseIf ((Local5 == 0x03))
                    {
                        Local6 = Arg3
                    }
                    ElseIf ((Local5 == 0x04))
                    {
                        Local6 = Arg4
                    }
                    ElseIf ((Local5 == 0x05))
                    {
                        Local6 = Arg5
                    }
                    ElseIf ((Local5 == 0x06))
                    {
                        Local6 = Arg6
                    }

                    Local5 += 0x01
                    Local1 += 0x01
                    Local4 = DerefOf (Local3 [Local1])
                    If (((Local4 == 0x58) || (Local4 == 0x78)))
                    {
                        Local2 = M459 (ToHexString (Local6), 0x02)
                    }
                    ElseIf (((Local4 == 0x44) || (Local4 == 0x64)))
                    {
                        Local2 = M459 (ToDecimalString (Local6), 0x00)
                    }
                    ElseIf (((Local4 == 0x53) || (Local4 == 0x73)))
                    {
                        Local2 = M459 (Local6, 0x00)
                    }
                    Else
                    {
                        Local2 = M458 (0x25)
                        Local5 -= 0x01
                        Local1 -= 0x01
                    }
                }
                ElseIf ((Local4 == 0x0A))
                {
                    Local2 = M458 (0x0D)
                    Local2 = M458 (0x0A)
                }
                Else
                {
                    Local2 = M458 (Local4)
                }

                Local1 += 0x01
            }
        }

        If ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARU, SystemIO, Local7, 0x04)
            Field (VARU, DWordAcc, NoLock, Preserve)
            {
                VARV,   32
            }

            VARV = 0x5F454E44
        }

        Return (Local2)
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > 0x00) || (Arg1 > 0x00)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 >>= Local1
                    Local0 &= 0x03
                }
                Else
                {
                    Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                        Local1 & 0x07), 0x02)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                Local0 = M011 ((M084 + 0x1300), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 >> 0x01), (
                (Arg4 & 0x01) << 0x02), 0x04)
        }

        M460 ("  KER-ASL-CpmReadClkReq  (%d, %d, %d, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Arg4, Local0)
        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteClkReq (%d, %d, %d, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > 0x00) || (Arg1 > 0x00)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 &= (0xFFFFFFFF ^ (0x03 << Local1))
                    Local0 |= (Arg5 << Local1)
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
                Else
                {
                    M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                        ), 0x02, Arg5)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                M012 ((M084 + 0x1300), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 >> 0x01), ((Arg4 & 
                0x01) << 0x02), 0x04, Arg5)
        }
    }

    Method (MPTS, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MPTS (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
        M000 (0x0DE7)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TPTS (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TPTS (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TPTS (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != 0x00))
        {
            If (CondRefOf (\_SB.M263))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_PTS (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != 0x00))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x21)
            If (((Local0 != 0x00) && (Local1 != 0x00)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.IPTS (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_SB.IPTS (Arg0)
                }
            }
        }

        If ((M4F0 != 0x00))
        {
            If (CondRefOf (\_GPE.PTS0))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS0 (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_GPE.PTS0 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS1))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS1 (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_GPE.PTS1 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS2))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS2 (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_GPE.PTS2 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS3))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS3 (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_GPE.PTS3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OPTS))
        {
            M460 ("    KER-ASL-Call \\_SB.OPTS (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
            \_SB.OPTS (Arg0)
        }

        M000 (0x0DE8)
    }

    Method (MWAK, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MWAK (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
        M000 (0x0DE9)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TWAK (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TWAK (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TWAK (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != 0x00))
        {
            If (CondRefOf (\_SB.M264))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_WAK (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != 0x00))
        {
            If (CondRefOf (\_SB.M284))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmLowPowerEthernet_WAK (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != 0x00))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x21)
            If (((Local0 != 0x00) && (Local1 != 0x00)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.IWAK (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_SB.IWAK (Arg0)
                }
            }
        }

        If ((M4F0 != 0x00))
        {
            If (CondRefOf (\_GPE.WAK0))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK0 (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_GPE.WAK0 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK1))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK1 (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_GPE.WAK1 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK2))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK2 (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_GPE.WAK2 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK3))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK3 (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_GPE.WAK3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OWAK))
        {
            M460 ("    KER-ASL-Call \\_SB.OWAK (0x%X)\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
            \_SB.OWAK (Arg0)
        }

        M000 (0x0DEA)
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, 0x00, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, 0x00, 0x20, Arg4)
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        M460 ("  KER-ASL-CpmReadPcieRegister  (0x%X, 0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local0, 0x00)
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWritePcieRegister (0x%X, 0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, 0x00)
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, 0x01, 0x00)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, 0x01, 0x01)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, 0x01, 0x00)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, 0x00, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, 0x01, 0x01)
        Local1 = 0x64
        Local2 = 0x01
        While ((Local1 && Local2))
        {
            Sleep (0x01)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = 0x00
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, 0x01, 0x00)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, 0x00, 0x00, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0xFF
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M011 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, 0x00, 0x00, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = 0x00
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
        While ((Local1 != 0x00))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
            If (((Local2 == 0x00) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, 0x01)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, 0x01)
                If (((Local3 == 0x01) && (Local4 == 0x01)))
                {
                    Local0 = 0x01
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x01), 0x00, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = 0x00
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
        While ((Local1 != 0x00))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
            If (((Local2 == 0x00) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x01), 0x00, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = 0x00
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
        While ((Local1 != 0x00))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
            If (((Local2 == 0x00) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x00, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x01), 0x00, 0x08)
        }

        M460 ("  KER-ASL-CpmGetPcieAspm (0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Local0, 0x00, 0x00)
        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        M460 ("  KER-ASL-CpmSetPcieAspm (0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, 0x00, 0x00)
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
        While (((Local1 != 0x00) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
            If (((Local2 == 0x00) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x00, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x01), 0x00, 0x08)
        }
    }

    Method (M114, 4, Serialized)
    {
        Local7 = 0x00
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, 0x00, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = 0x00
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == 0x00))
            {
                If ((Arg3 != 0x01))
                {
                    M120 = 0x00
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != 0x01))
                {
                    M120 = 0x01
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (0x00, Arg0, Arg1, 0x19, 0x00, 0x08)
                If (((Local0 != 0x00) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, 0x00, 0x00, 0x00)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != 0x00) && (Local1 != Local2)))
                    {
                        Local7 = 0x01
                    }
                }
            }
        }
        ElseIf ((Arg2 == 0x00))
        {
            M002 (0x01, Arg1)
        }
        Else
        {
            M002 (0x00, Arg1)
            Local0 = M017 (0x00, Arg0, Arg1, 0x19, 0x00, 0x08)
            If (((Local0 != 0x00) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, 0x00, 0x00, 0x00)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != 0x00) && (Local1 != Local2)))
                {
                    Local7 = 0x01
                }
            }
        }

        Return (Local7)
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == 0x00))
            {
                Return (M017 (0x00, 0x07, 0x01, 0x19, 0x00, 0x08))
            }
            Else
            {
                Return (M017 (0x00, 0x08, 0x01, 0x19, 0x00, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (0x00, 0x08, (Arg0 + 0x01), 0x19, 0x00, 0x08))
            }
            ElseIf ((Arg0 == 0x00))
            {
                Return (M017 (0x00, 0x07, 0x01, 0x19, 0x00, 0x08))
            }
            Else
            {
                Return (M017 (0x00, 0x08, Arg0, 0x19, 0x00, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == 0x00))
            {
                Return (M017 (0x00, 0x08, 0x01, 0x19, 0x00, 0x08))
            }
            Else
            {
                Return (M017 (0x00, 0x08, 0x02, 0x19, 0x00, 0x08))
            }
        }
        Else
        {
            Return (0x00)
        }
    }

    Method (M401, 3, Serialized)
    {
        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local3 = (0x06 - Arg0)
            }
            Else
            {
                Local3 = 0x06
            }
        }
        Else
        {
            Local3 = 0x03
        }

        Local3 = (0x14001000 + (Local3 << 0x14))
        Local0 = (Arg1 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg2 & 0x07))
        Local1 = 0x00
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x09
        }
        ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            Local2 = 0x16
        }
        ElseIf ((M085 == 0x0D))
        {
            Local2 = 0x0D
        }
        ElseIf ((M085 == 0x0E))
        {
            Local2 = 0x0A
        }
        ElseIf ((M085 == 0x0F))
        {
            Local2 = 0x10
        }
        Else
        {
            Local2 = 0x12
        }

        Local4 = M249 (0x00, 0x00, 0x00, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (0x00, 0x00, 0x00, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M471, 3, Serialized)
    {
        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local5 = (0x04 - Arg0)
            }
            Else
            {
                Local5 = 0x04
            }
        }
        Else
        {
            Local5 = (Arg0 + 0x01)
        }

        ToInteger (Arg1, Local4)
        If (((M085 >= 0x0D) && (M085 <= 0x0E)))
        {
            If ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += 0x01
            }
        }
        ElseIf ((M085 == 0x0F))
        {
            If ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x03
            }
            ElseIf ((Local4 == 0x0B))
            {
                Local4 -= 0x0B
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += 0x01
            }
        }
        ElseIf ((Local4 >= 0x08))
        {
            Local4 -= 0x08
            If (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                Local5 += 0x04
            }
            Else
            {
                Local5 += 0x01
            }
        }

        Local6 = (0x11000000 + (Local5 << 0x14))
        Local6 += (Arg2 << 0x10)
        If (((Arg2 == 0x00) || (Arg2 == 0x04)))
        {
            Local6 += (Local4 << 0x0C)
        }

        Return (Local6)
    }

    Method (M402, 3, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local7 = (M471 (Arg0, Local4, 0x08) + 0x0188)
                Local0 = M249 (0x00, 0x00, 0x00, Local7)
                Local0 &= 0xFFFFDFFF
                M250 (0x00, 0x00, 0x00, Local7, (Local0 | 0x2000))
            }

            Local1 = (M019 (0x00, 0x00, 0x00, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg1 << 0x13) | (Arg2 << 0x10))
            Local1 |= Local2
            M020 (0x00, 0x00, 0x00, 0x84, (Local1 | 0x0100))
            M020 (0x00, 0x00, 0x00, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (0x00, 0x00, 0x00, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > 0x00) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - 0x01)
                    Stall (0x63)
                    Local3 = M019 (0x00, 0x00, 0x00, 0x84)
                }
            }

            Local6 = (M471 (Arg0, Local4, 0x04) + 0x0294)
            Local3 = M249 (0x00, 0x00, 0x00, Local6)
            Local5 = 0x4EEA
            While (((Local5 > 0x00) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - 0x01)
                Stall (0x63)
                Local3 = M249 (0x00, 0x00, 0x00, Local6)
            }

            M020 (0x00, 0x00, 0x00, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (0x00, 0x00, 0x00, Local7, Local0)
            }
        }
    }

    Method (M403, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local2 = (M471 (Arg0, Local4, 0x04) + 0x0280)
            Local0 = M249 (0x00, 0x00, 0x00, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg3
            Local0 |= (Local1 << 0x16)
            M250 (0x00, 0x00, 0x00, Local2, Local0)
        }
    }

    Method (M472, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local7 = (M471 (Arg0, Local4, 0x08) + 0x0428)
            If (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local4 -= 0x08
            }

            Local0 = M249 (0x00, 0x00, 0x00, Local7)
            Local1 = (0x01 << Local4)
            Local2 = (Arg3 << Local4)
            If (((Local0 & Local1) != Local2))
            {
                Local3 = (Local0 & (0xFFFFFFFF ^ Local1))
                M250 (0x00, 0x00, 0x00, Local7, (Local3 | Local2))
            }
        }
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == 0x00))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        M460 ("  KER-ASL-CpmReadBxbSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, 0x00)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != 0x00))
        {
            M460 ("  KER-ASL-CpmWriteBxbSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, 0x00)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == 0x00))
        {
            Local0 = 0x00
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == 0xFFFFFFFF))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        If (CondRefOf (\_SB.AM00))
        {
            Acquire (\_SB.AM00, 0xFFFF)
        }
        Else
        {
            Acquire (M253, 0xFFFF)
        }

        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        If (CondRefOf (\_SB.AM00))
        {
            Release (\_SB.AM00)
        }
        Else
        {
            Release (M253)
        }

        M460 ("  KER-ASL-CpmReadSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, 0x00)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == 0x00))
        {
            Local0 = 0x00
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != 0xFFFFFFFF))
        {
            M460 ("  KER-ASL-CpmWriteSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, 0x00)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            If (CondRefOf (\_SB.AM00))
            {
                Acquire (\_SB.AM00, 0xFFFF)
            }
            Else
            {
                Acquire (M253, 0xFFFF)
            }

            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            If (CondRefOf (\_SB.AM00))
            {
                Release (\_SB.AM00)
            }
            Else
            {
                Release (M253)
            }
        }
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem32  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, 0x00)
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem32 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, 0x00)
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x01)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem8  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, 0x00)
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem8 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, 0x00)
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x01)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = 0x00
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), 0x00, 0x00, 0x08)
                    Local3 = M011 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, 0x00, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (0xFFFFFFFF)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = 0x00
        If ((Arg0 != 0x00))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x01)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            Local0 = VARR /* \M049.VARR */
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = 0x00
        If ((Arg0 != 0x00))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            Local0 = VARR /* \M04A.VARR */
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = 0x00
        If ((Arg0 != 0x00))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local0 = VARR /* \M04B.VARR */
        }

        Return (Local0)
    }

    Method (M04C, 3, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x01)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            VARR = Arg2
        }
    }

    Method (M04D, 3, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            VARR = Arg2
        }
    }

    Method (M04E, 3, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            VARR = Arg2
        }
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= 0x01
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= 0x01
        Return (Local5)
    }

    Method (M4E3, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= 0x01
        Return (Local5)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= 0x01
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, (((Local2 + 0x01) * 0x01
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (0x01 << Local4))
        Local5 |= ((Arg1 & 0x01) << Local4)
        If ((Local5 != Local6))
        {
            M410 (Local0, Local1, (((Local2 + 0x01) * 0x01) + Local3
                ), Local5)
        }
    }

    Method (M4E4, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, (((Local2 + 0x01) * 0x01
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (0x01 << Local4))
        Local5 |= ((Arg1 & 0x01) << Local4)
        If ((Local5 != Local6))
        {
            M4E2 (Local0, Local1, (((Local2 + 0x01) * 0x01) + Local3
                ), Local5)
        }
    }

    Method (M440, 1, Serialized)
    {
        M012 (0xFEC30000, 0x00, Arg0, 0x01, 0x00)
        Local0 = M011 (0xFEC30000, 0x04, Arg0, 0x01)
        Return (Local0)
    }

    Method (M441, 2, Serialized)
    {
        M012 (0xFEC30000, 0x00, Arg0, 0x01, 0x01)
        M012 (0xFEC30000, 0x08, Arg0, 0x01, Arg1)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = 0x00
        If (((Local0 == 0x00) || (Local0 == 0x01)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == 0x00))
                {
                    If ((Local0 == 0x00))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), 0x00, 
                            0x01)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), 0x00, 
                            0x01)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= 0x01
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == 0x00))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= 0x01
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, 0x01)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= 0x01
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= 0x01
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == 0x01))
            {
                Local2 = M038 ((Local1 + 0x08))
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Arg0)
        }
        ElseIf ((Local0 == 0x07))
        {
            Local2 = M4E3 (Arg0)
        }

        M460 ("  KER-ASL-CpmReadGpio  (0x%X) = 0x%X\n", Arg0, Local2, 0x00, 0x00, 0x00, 0x00)
        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        M460 ("  KER-ASL-CpmWriteGpio (0x%X, 0x%X)\n", Arg0, Arg1, 0x00, 0x00, 0x00, 0x00)
        If (((Local0 == 0x00) || (Local0 == 0x01)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == 0x00))
                {
                    If ((Local0 == 0x00))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= 0x01
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == 0x00))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, 0x01, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, 0x01, 0x00)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= 0x01
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == 0x01))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Arg0, Arg1)
        }
        ElseIf ((Local0 == 0x07))
        {
            M4E4 (Arg0, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, 0x01))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), 0x00, 0x01))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, 0x00, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), 0x01))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, 0x00, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), 0x01, Arg1)
    }

    Method (M477, 2, Serialized)
    {
        If ((Arg1 == 0x00))
        {
            Return (0x00)
        }

        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        Local0 = Arg1
        While ((Local0 > 0x00))
        {
            SMB8 |= 0x40
            If ((Local0 < 0x00FFFFFF))
            {
                If ((Local0 > 0x05))
                {
                    Local0 = (Local0 - 0x05)
                }
                Else
                {
                    Local0 = 0x00
                }
            }

            Stall (0x05)
            Local1 = SMB8 /* \M477.SMB8 */
            If (((Local1 & 0x50) == 0x40))
            {
                Return (0x00)
            }
        }

        Return (0x01)
    }

    Method (M478, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        SMB8 |= 0x80
    }

    Method (M479, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x03)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8
        }

        Local0 = Arg1
        While ((Local0 > 0x00))
        {
            Local1 = 0x64
            Local2 = 0x01
            While (((Local1 > 0x00) && ((Local2 & 0x01) != 0x00)))
            {
                SMB0 = 0x1F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = 0x00
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M479.SMB0 */
            }

            If (((Local2 & 0x01) != 0x00))
            {
                SMB2 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB0 & 0x01) != 0x00))
        {
            Return (0x01)
        }

        While ((Local0 > 0x00))
        {
            Local1 = 0x64
            Local2 = 0x01
            While (((Local1 > 0x00) && ((Local2 & 0x01) != 0x00)))
            {
                SMB1 = 0x3F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = 0x00
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB1 /* \M479.SMB1 */
            }

            If (((Local2 & 0x01) != 0x00))
            {
                SMB1 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB1 & 0x01) != 0x00))
        {
            Return (0x01)
        }

        Return (0x00)
    }

    Mutex (M408, 0x00)
    Method (M47A, 6, Serialized)
    {
        Local0 = Buffer (0x22){}
        CreateByteField (Local0, 0x00, STAT)
        CreateByteField (Local0, 0x01, LEN)
        CreateByteField (Local0, 0x02, DATB)
        CreateWordField (Local0, 0x02, DATW)
        CreateField (Local0, 0x10, 0x0100, DTBF)
        STAT = 0xFF
        LEN = 0x00
        DTBF = 0x00
        M000 (0x0DE5)
        M460 ("  KER-ASL-CpmSmbusExecutor (Port%d, isRead %d, Potcl %d, DevAddr 0x%X, Cmd 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, 0x00)
        If (((Arg0 != 0x00) && (Arg0 != 0x01)))
        {
            STAT = 0x80
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x80\n", 0x00)
            Return (Local0)
        }

        If (((Arg1 != 0x00) && (Arg1 != 0x01)))
        {
            STAT = 0x81
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x81\n", 0x00)
            Return (Local0)
        }

        Name (VALP, Package (0x05)
        {
            0x00, 
            0x01, 
            0x02, 
            0x03, 
            0x05
        })
        If ((Match (VALP, MEQ, Arg2, MTR, 0x00, 0x00) == Ones))
        {
            STAT = 0x82
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x82\n", 0x00)
            Return (Local0)
        }

        If (((Arg1 == 0x00) && (Arg2 == 0x05)))
        {
            Local7 = Arg5
            Local2 = DerefOf (Local7 [0x00])
            If (((Local2 < 0x01) || (Local2 > 0x20)))
            {
                STAT = 0x83
                M460 ("  KER-ASL-CpmSmbusExecutor return 0x83, Length %d\n", Local2, 0x00, 0x00, 0x00, 0x00, 0x00)
                Return (Local0)
            }
        }

        Acquire (M408, 0xFFFF)
        Local4 = (M414 + (Arg0 << 0x05))
        If ((Local4 == 0x00))
        {
            Release (M408)
            STAT = 0x84
            M460 ("  KER-ASL-CpmSmbusExecutor return 0x84, Local4 %d\n", Local4, 0x00, 0x00, 0x00, 0x00, 0x00)
            Return (Local0)
        }

        OperationRegion (VARM, SystemIO, Local4, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, 0x00, 0x08)
        M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, (Local5 | 0x01))
        If ((Arg0 == 0x01))
        {
            Local6 = SMB2 /* \M47A.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        If (M477 (Local4, 0x4E20))
        {
            If ((Arg0 == 0x01))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
            Release (M408)
            STAT = 0x85
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x85\n", 0x00)
            Return (Local0)
        }

        If (M479 (Local4, 0x4E20))
        {
            If ((Arg0 == 0x01))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
            M478 (Local4)
            Release (M408)
            STAT = 0x86
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x86\n", 0x00)
            Return (Local0)
        }

        Local7 = Arg5
        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg3 << 0x01) | Arg1)
            SMB3 = Arg4
            SMB2 = (Arg2 << 0x02)
            Local1 = SMB2 /* \M47A.SMB2 */
            If ((Arg1 == 0x00))
            {
                If (((Arg2 == 0x01) || (Arg2 == 0x02)))
                {
                    SMB5 = DerefOf (Local7 [0x01])
                }

                If ((Arg2 == 0x03))
                {
                    SMB6 = DerefOf (Local7 [0x02])
                    SMB5 = DerefOf (Local7 [0x01])
                }

                If ((Arg2 == 0x05))
                {
                    Local2 = DerefOf (Local7 [0x00])
                    SMB5 = Local2
                    Local1 = 0x01
                    While ((Local1 <= Local2))
                    {
                        SMB7 = DerefOf (Local7 [Local1])
                        Local1++
                    }
                }
            }
            ElseIf ((Arg2 == 0x05))
            {
                Local2 = DerefOf (Local7 [0x00])
                SMB5 = Local2
            }

            SMB2 = ((Arg2 << 0x02) | 0x40)
            If ((Arg2 == 0x05))
            {
                Local1 = 0x1B58
            }
            Else
            {
                Local1 = 0x03E8
            }

            Local2 = 0x01
            While (((Local1 > 0x00) && ((Local2 & 0x0E) == 0x00)))
            {
                If (((Local2 & 0x01) == 0x00))
                {
                    Break
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M47A.SMB0 */
            }

            If (((Local1 == 0x00) && ((Local2 & 0x01) != 0x00)))
            {
                SMB2 = 0x02
                If ((Arg0 == 0x01))
                {
                    SMB2 = Local6
                }

                M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
                M478 (Local4)
                Release (M408)
                STAT = 0x87
                M459 ("  KER-ASL-CpmSmbusExecutor return 0x87\n", 0x00)
                Return (Local0)
            }

            If (((Local2 & 0x04) != 0x00))
            {
                Local3 = 0x00
            }
            ElseIf (((Local2 & 0x08) != 0x00))
            {
                SMB0 = 0x08
                Local3--
            }
            Else
            {
                Local3 = 0x00
                STAT = 0x00
                If ((Arg1 != 0x00))
                {
                    If (((Arg2 == 0x01) || (Arg2 == 0x02)))
                    {
                        DATB = SMB5 /* \M47A.SMB5 */
                        LEN = 0x01
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 [0x03] = SMB6 /* \M47A.SMB6 */
                        Local0 [0x02] = SMB5 /* \M47A.SMB5 */
                        LEN = 0x02
                    }

                    If ((Arg2 == 0x05))
                    {
                        Local2 = SMB2 /* \M47A.SMB2 */
                        Local2 = SMB5 /* \M47A.SMB5 */
                        If ((Local2 > 0x20))
                        {
                            Local2 = 0x20
                        }

                        LEN = Local2
                        Local1 = 0x02
                        Local2 += 0x02
                        While ((Local1 < Local2))
                        {
                            Local0 [Local1] = 0xCC
                            Local0 [Local1] = SMB7 /* \M47A.SMB7 */
                            Local1++
                        }
                    }
                }
            }
        }

        Local1 = (SMB0 & 0x1D)
        STAT = Local1
        SMB0 = 0x1F
        If ((Arg0 == 0x01))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
        M478 (Local4)
        Release (M408)
        M460 ("  KER-ASL-CpmSmbusExecutor return St: 0x%X, Len %d, Data: 0x%X, 0x%X, 0x%X, 0x%X ...\n", STAT, LEN, DerefOf (Local0 [0x02]), DerefOf (Local0 [
            0x03]), DerefOf (Local0 [0x04]), DerefOf (Local0 [0x05]))
        M000 (0x0DE6)
        Return (Local0)
    }

    Method (M47B, 3, Serialized)
    {
        Local0 = M47A (Arg0, Arg1, 0x00, Arg2, 0x00, 0x00)
        Return (DerefOf (Local0 [0x00]))
    }

    Method (M47C, 4, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, 0x00, LEN)
        CreateByteField (Local0, 0x01, DATB)
        LEN = 0x01
        DATB = Arg3
        Local1 = M47A (Arg0, Arg1, 0x01, Arg2, 0x00, Local0)
        Return (Local1)
    }

    Method (M47D, 5, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, 0x00, LEN)
        CreateByteField (Local0, 0x01, DATB)
        LEN = 0x01
        DATB = Arg4
        Local1 = M47A (Arg0, Arg1, 0x02, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47E, 5, Serialized)
    {
        Local0 = Buffer (0x03){}
        CreateByteField (Local0, 0x00, LEN)
        CreateByteField (Local0, 0x01, DATL)
        CreateByteField (Local0, 0x02, DATH)
        LEN = 0x02
        DATL = (Arg4 & 0xFF)
        DATH = ((Arg4 >> 0x08) & 0xFF)
        Local1 = M47A (Arg0, Arg1, 0x03, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47F, 5, Serialized)
    {
        Local1 = M47A (Arg0, Arg1, 0x05, Arg2, Arg3, Arg4)
        Return (Local1)
    }

    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, 0x00, 0x08)
        M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, (Local5 | 0x01))
        If ((Arg0 == 0x01))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = 0x00
        Local2 = 0x64
        While (((Local2 > 0x00) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - 0x01)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            Local1 = 0x01
            Local2 = 0x64
            While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - 0x01)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == 0x00))
            {
                SMB2 = 0x02
                Local3 = (Local3 - 0x01)
            }
            Else
            {
                Local3 = 0x00
            }
        }

        If (((Local2 == 0x00) && (Local3 == 0x00)))
        {
            If ((Arg0 == 0x01))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, 0x00, 0x00, 0x00)
            Return (0x00)
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            Local1 = 0x01
            Local2 = 0x64
            While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - 0x01)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == 0x00))
            {
                SMB1 = 0x02
                Local3 = (Local3 - 0x01)
            }
            Else
            {
                Local3 = 0x00
            }
        }

        If (((Local2 == 0x00) && (Local3 == 0x00)))
        {
            If ((Arg0 == 0x01))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, 0x00, 0x00, 0x00)
            Return (0x00)
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << 0x01) | 0x01)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = 0x48
            Local1 = 0x01
            Local4 = 0x03E8
            While (((Local4 > 0x00) && ((Local1 & 0x0E) == 0x00)))
            {
                Local2 = 0x03E8
                While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
                {
                    Local2 = (Local2 - 0x01)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == 0x00))
                {
                    SMB2 = 0x02
                    If ((Arg0 == 0x01))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
                    Release (M408)
                    M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, 0x00, 0x00, 0x00)
                    Return (0x00)
                }

                Local4 = (Local4 - 0x01)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != 0x00))
            {
                Local3 = 0x00
                Local4 = 0x00
            }
            ElseIf (((Local1 & 0x08) != 0x00))
            {
                SMB0 = 0x08
                Local3 = (Local3 - 0x01)
                Local4 = 0x00
            }
            Else
            {
                Local3 = 0x00
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == 0x01))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
        Release (M408)
        M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0x%X Success\n", Arg0, Arg1, Arg2, Local4, 0x00, 0x00)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, 0x00, 0x08)
        M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, (Local5 | 0x01))
        If ((Arg0 == 0x01))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = 0x00
        Local2 = 0x64
        While (((Local2 > 0x00) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - 0x01)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            Local1 = 0x01
            Local2 = 0x64
            While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - 0x01)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == 0x00))
            {
                SMB2 = 0x02
                Local3 = (Local3 - 0x01)
            }
            Else
            {
                Local3 = 0x00
            }
        }

        If (((Local2 == 0x00) && (Local3 == 0x00)))
        {
            If ((Arg0 == 0x01))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
            Release (M408)
            Return (0x00)
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            Local1 = 0x01
            Local2 = 0x64
            While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - 0x01)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == 0x00))
            {
                SMB1 = 0x02
                Local3 = (Local3 - 0x01)
            }
            Else
            {
                Local3 = 0x00
            }
        }

        If (((Local2 == 0x00) && (Local3 == 0x00)))
        {
            If ((Arg0 == 0x01))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
            Release (M408)
            Return (0x00)
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << 0x01)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = 0x48
            Local1 = 0x01
            Local4 = 0x03E8
            While (((Local4 > 0x00) && ((Local1 & 0x0E) == 0x00)))
            {
                Local2 = 0x03E8
                While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
                {
                    Local2 = (Local2 - 0x01)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == 0x00))
                {
                    SMB2 = 0x02
                    If ((Arg0 == 0x01))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
                    Release (M408)
                    Return (0x00)
                }

                Local4 = (Local4 - 0x01)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != 0x00))
            {
                Local3 = 0x00
                Local4 = 0x00
            }
            ElseIf (((Local1 & 0x08) != 0x00))
            {
                SMB0 = 0x08
                Local3 = (Local3 - 0x01)
                Local4 = 0x00
            }
            Else
            {
                Local3 = 0x00
                Local4 = 0x00
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == 0x01))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (M4F1, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) Start\n", Arg0, 0x00, 0x00, 0x00, 0x00, 0x00)
        Local5 = 0x00
        If (((Arg0 >= 0x00) && (Arg0 <= 0x03)))
        {
            Local0 = M4F0 /* \M4F0 */
            If ((Local0 != 0x00))
            {
                Local0 += 0x10
                Local0 += (Arg0 * 0x26)
                If ((M049 (Local0, 0x00) == Arg0))
                {
                    Local1 = M049 (Local0, 0x15)
                    Local2 = M049 (Local0, 0x16)
                    Local3 = M049 (Local0, 0x1E)
                    Local4 = M409 (Local1, Local2, 0x00)
                    M000 ((Local4 + (Arg0 << 0x0C)))
                    M04C (Local0, 0x1E, Local4)
                    Local4 ^= Local3
                    Local4 &= M049 (Local0, 0x1C)
                    Local4 |= M049 (Local0, 0x1D)
                    If ((M049 (Local0, 0x17) >= 0x01))
                    {
                        Local3 = M049 (Local0, 0x25)
                        Local5 = M409 (Local1, Local2, 0x01)
                        M000 (((Local5 + 0x0100) + (Arg0 << 0x0C)))
                        M04C (Local0, 0x25, Local5)
                        Local5 ^= Local3
                        Local5 &= M049 (Local0, 0x23)
                        Local5 |= M049 (Local0, 0x24)
                        Local5 <<= 0x08
                    }

                    Local5 |= Local4
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) = 0x%X End\n", Arg0, Local5, 0x00, 0x00, 0x00, 0x00)
        Return (Local5)
    }

    Mutex (M4E5, 0x00)
    Name (M4E7, 0x5A)
    Name (M4E8, 0x5A)
    Name (M4E9, 0x5A)
    Name (M4EA, 0x5A5A5A5A)
    Name (M4EB, 0x5A5A5A5A)
    Name (M4EC, Package (0x04)
    {
        0x03, 
        Package (0x05)
        {
            0x0F, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                0x00, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                0x00, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                0x01, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                0x01, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x05)
        {
            0x10, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                0x00, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                0x00, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                0x01, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                0x01, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x07)
        {
            0x11, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                0x01, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                0x01, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x95, 
                0x96, 
                0x01, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x97, 
                0x98, 
                0x01, 
                0xFED81E50, 
                0xFEDC5000
            }, 

            Package (0x06)
            {
                "I2C4", 
                0x0D, 
                0x0E, 
                0x00, 
                0xFED81E52, 
                0xFEDC6000
            }, 

            Package (0x06)
            {
                "I2C5", 
                0x13, 
                0x14, 
                0x00, 
                0xFED81E54, 
                0xFEDCB000
            }
        }
    })
    Method (M4E6, 1, Serialized)
    {
        Local0 = M085 /* \M085 */
        Local1 = DerefOf (M4EC [0x00])
        Local2 = 0x01
        While ((Local2 <= Local1))
        {
            Local3 = DerefOf (M4EC [Local2])
            Local4 = DerefOf (Local3 [0x00])
            If ((Local4 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (0x00)
        }

        Local2 = 0x01
        Local1 = SizeOf (Local3)
        Switch (ToInteger (Arg0))
        {
            Case (0x00)
            {
                Local0 = "I2C0"
            }
            Case (0x01)
            {
                Local0 = "I2C1"
            }
            Case (0x02)
            {
                Local0 = "I2C2"
            }
            Case (0x03)
            {
                Local0 = "I2C3"
            }
            Case (0x04)
            {
                Local0 = "I2C4"
            }
            Case (0x05)
            {
                Local0 = "I2C5"
            }

        }

        While ((Local2 <= Local1))
        {
            Local4 = DerefOf (Local3 [Local2])
            Local5 = DerefOf (Local4 [0x00])
            If ((Local5 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (0x00)
        }

        M4E7 = DerefOf (Local4 [0x01])
        M4E8 = DerefOf (Local4 [0x02])
        M4E9 = DerefOf (Local4 [0x03])
        M4EA = DerefOf (Local4 [0x04])
        M4EB = DerefOf (Local4 [0x05])
        Return (0x01)
    }

    Method (M4E0, 5, Serialized)
    {
        Local0 = M4E6 (Arg0)
        If ((Local0 == 0x00))
        {
            Return (0xFF00)
        }

        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Local0 = M4EA /* \M4EA */
        Local1 = M4EB /* \M4EB */
        OperationRegion (VAR0, SystemMemory, Local0, 0x02)
        Field (VAR0, ByteAcc, NoLock, Preserve)
        {
            ADTD,   2, 
            ADPS,   1, 
            ADPD,   1, 
            ADSO,   1, 
            ADSC,   1, 
            ADSR,   1, 
            ADIS,   1, 
            ADDS,   3
        }

        OperationRegion (VAR1, SystemMemory, Local1, 0x0100)
        Field (VAR1, DWordAcc, NoLock, Preserve)
        {
            IC00,   32, 
            IC04,   32, 
            Offset (0x10), 
            IC10,   32, 
            IC14,   32, 
            IC18,   32, 
            IC1C,   32, 
            IC20,   32, 
            Offset (0x30), 
            IC30,   32, 
            IC34,   32, 
            IC38,   32, 
            IC3C,   32, 
            IC40,   32, 
            IC44,   32, 
            IC48,   32, 
            Offset (0x54), 
            IC54,   32, 
            Offset (0x6C), 
            IC6C,   32, 
            IC70,   32, 
            IC74,   32, 
            IC78,   32, 
            IC7C,   32, 
            IC80,   32, 
            Offset (0x9C), 
            IC9C,   32, 
            Offset (0xF4), 
            ICF4,   32
        }

        Name (BUFF, Buffer (0x03)
        {
             0x00, 0x00, 0x00                                 // ...
        })
        CreateByteField (BUFF, 0x00, AOAC)
        CreateByteField (BUFF, 0x01, ISCL)
        CreateByteField (BUFF, 0x02, ISDA)
        Acquire (M4E5, 0xFFFF)
        Local1 = 0x000186A0
        Local0 = 0x00
        AOAC = ADTD /* \M4E0.ADTD */
        ISCL = M011 (0xFED80D00, M4E7, 0x00, 0x08)
        ISDA = M011 (0xFED80D00, M4E8, 0x00, 0x08)
        M012 (0xFED80D00, M4E7, 0x00, 0x08, M4E9)
        M012 (0xFED80D00, M4E8, 0x00, 0x08, M4E9)
        Local2 = AOAC /* \M4E0.AOAC */
        If ((Local2 == 0x03))
        {
            ADTD = 0x00
            ADPD = 0x01
            Local3 = ADDS /* \M4E0.ADDS */
            While ((Local3 != 0x07))
            {
                Local1--
                Stall (0x0A)
                Local3 = ADDS /* \M4E0.ADDS */
                If ((Local1 == 0x00))
                {
                    Local0 = 0xFF01
                    Break
                }
            }
        }

        If ((Local0 == 0x00))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == 0x00))
                {
                    M460 ("  I2cTimeout for IDE : (0x%X)\n", Local2, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Local0 = 0xFF02
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == 0x00))
        {
            IC6C = 0x00
            Local2 = IC9C /* \M4E0.IC9C */
            While ((0x00 != (Local2 & 0x01)))
            {
                If ((Local1 == 0x00))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Local0 = 0xFF03
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == 0x00))
        {
            IC00 = 0x65
            IC04 = Arg1
            IC1C = 0x87
            IC20 = 0xF0
            IC7C = 0x00300030
            IC38 = 0x00
            IC34 = 0x00
            IC30 = 0x00
            Local2 = IC40 /* \M4E0.IC40 */
            Local2 = IC54 /* \M4E0.IC54 */
        }

        If ((Local0 == 0x00))
        {
            IC6C = 0x01
            Local2 = IC9C /* \M4E0.IC9C */
            While ((0x00 == (Local2 & 0x01)))
            {
                If ((Local1 == 0x00))
                {
                    M460 ("  I2cTimeout for I2cEnable : (0x%X)\n", Local2, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Local0 = 0xFF04
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == 0x00))
        {
            Local3 = Arg3
            Local4 = Arg2
            Local5 = 0x00
            Local6 = 0x00
            Local7 = 0x02
            While (((Local3 + Local4) > 0x00))
            {
                If ((Local1 == 0x00))
                {
                    M460 ("  I2cTimeout for TxRx: (0x%X, 0x%X)\n", Local3, Local4, 0x00, 0x00, 0x00, 0x00)
                    Local0 = 0xFF06
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                If (((Local2 & 0x08) != 0x00))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                Local2 = IC74 /* \M4E0.IC74 */
                If ((Local2 != 0x00))
                {
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                If ((Local3 > 0x01))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == 0x01) && (Local4 != 0x00)))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == 0x01) && (Local4 == 0x00)))
                {
                    IC10 = ((ToInteger (DerefOf (Arg4 [Local5])) & 0xFF
                        ) | 0x0200)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == 0x00) && (Local4 > 0x01)))
                {
                    IC10 = 0x0100
                    Local6 = 0x01
                    Local4--
                }
                ElseIf (((Local3 == 0x00) && (Local4 == 0x01)))
                {
                    IC10 = 0x0300
                    Local6 = 0x01
                    Local4--
                }

                Local1--
                Stall (0x0A)
                Local2 = IC34 /* \M4E0.IC34 */
                If ((0x00 != (Local2 & 0x40)))
                {
                    Local7 = IC54 /* \M4E0.IC54 */
                    Local2 = IC80 /* \M4E0.IC80 */
                    M460 ("  I2cTX Abrt Source: (0x%X)\n", Local2, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Local0 = 0xFF05
                    Break
                }

                If ((Local6 != 0x00))
                {
                    Local2 = IC70 /* \M4E0.IC70 */
                    While (((Local2 & 0x08) != 0x08))
                    {
                        Local2 = IC70 /* \M4E0.IC70 */
                        If ((Local1 == 0x00))
                        {
                            M460 ("  I2cTimeout for Rx : (0x%X)\n", Local2, 0x00, 0x00, 0x00, 0x00, 0x00)
                            Local0 = 0xFF07
                            Break
                        }

                        Local1--
                        Stall (0x0A)
                    }
                }

                If ((Local6 != 0x00))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    RTFF [Local7] = Local2
                    Local1--
                    Stall (0x14)
                    Local6 = 0x00
                }
            }
        }

        Release (M4E5)
        If ((Local0 == 0x00))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == 0x00))
                {
                    M460 ("  I2cTimeout for IDE2 : (0x%X)\n", Local2, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Local0 = 0xFF08
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If (((Local0 > 0xFF04) && (Local0 < 0xFF08)))
        {
            IC6C = 0x00
            Local2 = IC9C /* \M4E0.IC9C */
            While ((0x00 != (Local2 & 0x01)))
            {
                If ((Local1 == 0x00))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Local0 = 0xFF09
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        Local3 = AOAC /* \M4E0.AOAC */
        If ((Local3 == 0x03))
        {
            ADPD = 0x00
            Local2 = ADDS /* \M4E0.ADDS */
            While ((Local2 != 0x00))
            {
                If ((Local1 == 0x00))
                {
                    M460 ("  I2cTimeout for AOAC Off : (0x%X)\n", Local2, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Local0 = 0xFF10
                    Break
                }

                Local1--
                Stall (0x0A)
                Local2 = ADDS /* \M4E0.ADDS */
            }

            ADTD = 0x03
        }

        M012 (0xFED80D00, M4E7, 0x00, 0x08, ISCL)
        M012 (0xFED80D00, M4E8, 0x00, 0x08, ISDA)
        CreateWordField (RTFF, 0x00, STAT)
        STAT = Local0
        Return (RTFF) /* \M4E0.RTFF */
    }

    Method (M4E1, 3, Serialized)
    {
        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Name (WRFF, Buffer (0x01)
        {
             0x00                                             // .
        })
        CreateByteField (WRFF, 0x00, WDAT)
        WDAT = Arg2
        RTFF = M4E0 (Arg0, Arg1, 0x01, 0x01, WRFF)
        CreateWordField (RTFF, 0x00, STAT)
        CreateByteField (RTFF, 0x02, RDAT)
        Local0 = STAT /* \M4E1.STAT */
        Local1 = RDAT /* \M4E1.RDAT */
        M460 ("  Read I2C Byte (0x%X, 0x%X)\n", Local0, Local1, 0x00, 0x00, 0x00, 0x00)
        If ((Local0 == 0x00))
        {
            Return ((RDAT & 0xFF))
        }

        Return (0x00)
    }

    Method (M4E2, 4, Serialized)
    {
        Name (WRFF, Buffer (0x02)
        {
             0x00, 0x00                                       // ..
        })
        CreateByteField (WRFF, 0x00, WDA1)
        CreateByteField (WRFF, 0x01, WDA2)
        WDA1 = Arg2
        WDA2 = (Arg3 & 0xFF)
        Local0 = M4E0 (Arg0, Arg1, 0x00, 0x02, WRFF)
        CreateWordField (Local0, 0x00, STAT)
        Local1 = STAT /* \M4E2.STAT */
        M460 ("  Write I2C Byte(0x%X)\n", Local1, 0x00, 0x00, 0x00, 0x00, 0x00)
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            M460 ("  KER-ASL-\\_SB.GPIO._INI Start\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            If ((M4F0 != 0x00))
            {
                Local0 = M4F1 (0x00)
                Local0 = M4F1 (0x01)
                Local0 = M4F1 (0x02)
                Local0 = M4F1 (0x03)
            }

            M460 ("  KER-ASL-\\_SB.GPIO._INI End\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }
    }

    Scope (\_GPE)
    {
        Method (SIE0, 0, NotSerialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE0 Start\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (\_GPE.BIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE0\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_GPE.BIE0 ()
            }

            Local0 = M4F1 (0x00)
            If (((Local0 & 0x01) == 0x01))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP00\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP00 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP01\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP01 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP02\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP02 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP03\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP03 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP04\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP04 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP05\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP05 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP06\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP06 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP07\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP07 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP10))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP10\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP10 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP11))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP11\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP11 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP12))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP12\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP12 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP13))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP13\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP13 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP14))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP14\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP14 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP15))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP15\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP15 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP16))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP16\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP16 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP17))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP17\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP17 ()
                }
            }

            If (CondRefOf (\_GPE.AIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE0\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_GPE.AIE0 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE0 End\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (SIE1, 0, NotSerialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE1 Start\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (\_GPE.BIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE1\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_GPE.BIE1 ()
            }

            Local0 = M4F1 (0x01)
            If (((Local0 & 0x01) == 0x01))
            {
                If (CondRefOf (\_GPE.SP20))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP20\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP20 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP21))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP21\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP21 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP22))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP22\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP22 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP23))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP23\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP23 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP24))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP24\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP24 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP25))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP25\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP25 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP26))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP26\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP26 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP27))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP27\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP27 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP30))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP30\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP30 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP31))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP31\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP31 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP32))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP32\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP32 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP33))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP33\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP33 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP34))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP34\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP34 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP35))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP35\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP35 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP36))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP36\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP36 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP37))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP37\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP37 ()
                }
            }

            If (CondRefOf (\_GPE.AIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE1\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_GPE.AIE1 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE1 End\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (SIE2, 0, NotSerialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE2 Start\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (\_GPE.BIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE2\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_GPE.BIE2 ()
            }

            Local0 = M4F1 (0x02)
            If (((Local0 & 0x01) == 0x01))
            {
                If (CondRefOf (\_GPE.SP40))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP40\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP40 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP41))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP41\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP41 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP42))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP42\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP42 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP43))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP43\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP43 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP44))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP44\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP44 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP45))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP45\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP45 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP46))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP46\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP46 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP47))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP47\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP47 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP50))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP50\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP50 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP51))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP51\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP51 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP52))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP52\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP52 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP53))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP53\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP53 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP54))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP54\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP54 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP55))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP55\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP55 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP56))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP56\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP56 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP57))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP57\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP57 ()
                }
            }

            If (CondRefOf (\_GPE.AIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE2\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_GPE.AIE2 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE2 End\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Method (SIE3, 0, NotSerialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE3 Start\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
            If (CondRefOf (\_GPE.BIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE3\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_GPE.BIE3 ()
            }

            Local0 = M4F1 (0x03)
            If (((Local0 & 0x01) == 0x01))
            {
                If (CondRefOf (\_GPE.SP60))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP60\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP60 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP61))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP61\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP61 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP62))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP62\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP62 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP63))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP63\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP63 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP64))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP64\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP64 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP65))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP65\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP65 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP66))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP66\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP66 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP67))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP67\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP67 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP70))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP70\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP70 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP71))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP71\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP71 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP72))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP72\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP72 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP73))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP73\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP73 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP74))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP74\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP74 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP75))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP75\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP75 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP76))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP76\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP76 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP77))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP77\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    \_GPE.SP77 ()
                }
            }

            If (CondRefOf (\_GPE.AIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE3\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                \_GPE.AIE3 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE3 End\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
        }

        Name (M4D2, Buffer (0x08){})
        Method (XL0B, 0, NotSerialized)
        {
            Local3 = Buffer (0x08){}
            CreateWordField (Local3, 0x00, M254)
            CreateByteField (Local3, 0x02, M255)
            CreateDWordField (Local3, 0x03, M256)
            M256 = 0x00
            M254 = 0x07
            M255 = 0x30
            If (CondRefOf (\_SB.ALIB))
            {
                M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, 0x00, 0x00, 0x00, 0x00, 0x00)
                Local4 = \_SB.ALIB (0x0C, Local3)
                M4D2 = Local4
                CreateDWordField (M4D2, 0x00, M4D0)
                CreateDWordField (M4D2, 0x04, M4D1)
                ToInteger (M4D0, Local0)
                ToInteger (M4D1, Local1)
                M460 ("  KER-ASL-ALIB Return Data (0x%X, 0x%X)\n", Local0, Local1, 0x00, 0x00, 0x00, 0x00)
                If ((Local0 == 0x00))
                {
                    If (CondRefOf (\_SB.APAD))
                    {
                        \_SB.APAD.M446 [0x01] = Local1
                        M460 ("  KER-ASL-Notify \\_SB.APAD 0x80\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                        Notify (\_SB.APAD, 0x80) // Status Change
                    }
                }
                ElseIf ((Local0 == 0x01))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x84\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                }
                ElseIf ((Local0 == 0x02))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x85\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    If (CondRefOf (NFPC))
                    {
                        NFPC ()
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                0x01, 
                0x00
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M04A (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0xF\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                        Return (0x0F)
                    }
                    Else
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0x0\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                        Return (0x00)
                    }
                }
                Else
                {
                    M460 ("  KER-ASL-1-\\_SB.APAD._STA = 0x0\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                    Return (0x00)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                M460 ("  KER-ASL-\\_SB.APAD._INI\n", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
                Local0 = M04A (M128, 0x91)
                If ((((Local0 & 0xC0) == 0xC0) && ((Local0 & 
                    0xFF00) != 0xFF00)))
                {
                    Local3 = Buffer (0x08){}
                    CreateWordField (Local3, 0x00, M254)
                    CreateByteField (Local3, 0x02, M255)
                    CreateDWordField (Local3, 0x03, M256)
                    M256 = (Local0 >> 0x08)
                    M254 = 0x07
                    M255 = 0x31
                    If (CondRefOf (\_SB.ALIB))
                    {
                        M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, 0x00, 0x00, 0x00, 0x00, 0x00)
                        \_SB.ALIB (0x0C, Local3)
                    }
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                ToInteger (DerefOf (M446 [0x00]), Local0)
                ToInteger (DerefOf (M446 [0x01]), Local1)
                M460 ("  KER-ASL-\\_SB.APAD._PUR Return Package (2) (0x%X, 0x%X) to OSPM\n", Local0, Local1, 0x00, 0x00, 0x00, 0x00)
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R23  ", 0x00000001)
{
    External (_SB_.PCI0.LPC0.EC0_.DIEH, FieldUnitObj)
    External (_SB_.PCI0.LPC0.EC0_.OKEC, IntObj)
    External (_SB_.PCI0.LPC0.EC0_.Z009, MutexObj)
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)

    Scope (\_TZ)
    {
        ThermalZone (TZ01)
        {
            Name (CRTT, 0x6E)
            Name (PSVT, 0x32)
            Name (TSPS, 0x14)
            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = 0x0B74
                If (CondRefOf (\_SB.PCI0.LPC0.EC0.OKEC))
                {
                    If ((\_SB.PCI0.LPC0.EC0.OKEC == 0x01))
                    {
                        If (CondRefOf (\_SB.PCI0.LPC0.EC0.Z009))
                        {
                            Acquire (\_SB.PCI0.LPC0.EC0.Z009, 0xFFFF)
                            If (CondRefOf (\_SB.PCI0.LPC0.EC0.DIEH))
                            {
                                Local0 = \_SB.PCI0.LPC0.EC0.DIEH /* External reference */
                                Local0 = (0x0AAC + (Local0 * 0x0A))
                            }

                            Release (\_SB.PCI0.LPC0.EC0.Z009)
                        }
                    }
                }

                Return (Local0)
            }

            Method (_PSL, 0, Serialized)  // _PSL: Passive List
            {
                Return (Package (0x10)
                {
                    \_SB.PLTF.C000, 
                    \_SB.PLTF.C001, 
                    \_SB.PLTF.C002, 
                    \_SB.PLTF.C003, 
                    \_SB.PLTF.C004, 
                    \_SB.PLTF.C005, 
                    \_SB.PLTF.C006, 
                    \_SB.PLTF.C007, 
                    \_SB.PLTF.C008, 
                    \_SB.PLTF.C009, 
                    \_SB.PLTF.C00A, 
                    \_SB.PLTF.C00B, 
                    \_SB.PLTF.C00C, 
                    \_SB.PLTF.C00D, 
                    \_SB.PLTF.C00E, 
                    \_SB.PLTF.C00F
                })
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Local0 = (0x0AAC + (CRTT * 0x0A))
                Return (Local0)
            }

            Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
            {
                Return (0x01)
            }

            Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
            {
                Return (0x02)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (TSPS) /* \_TZ_.TZ01.TSPS */
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R23  ", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M207, Buffer (0xFF){})
        Name (M208, Buffer (0x03){})
        Name (M204, 0x01)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                M000 (0x0D60)
                ATC0 ()
                M000 (0x0D70)
            }

            If ((Arg0 == 0x01))
            {
                M000 (0x0D61)
                ATC1 ()
                M000 (0x0D71)
            }

            If ((Arg0 == 0x02))
            {
                M000 (0x0D62)
                ATC2 (Arg1)
                M000 (0x0D72)
            }

            If ((Arg0 == 0x03))
            {
                M000 (0x0D63)
                ATC3 ()
                M000 (0x0D73)
            }

            If ((Arg0 == 0x04))
            {
                M000 (0x0D64)
                ATC4 (Arg1)
                M000 (0x0D74)
            }

            If ((Arg0 == 0x06))
            {
                M000 (0x0D66)
                ATC6 (Arg1)
                M000 (0x0D76)
            }

            If ((Arg0 == 0x07))
            {
                M000 (0x0D67)
                ATC7 (Arg1)
                M000 (0x0D77)
            }

            If ((Arg0 == 0x08))
            {
                M000 (0x0D68)
                ATC8 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x03]), DerefOf (
                    Arg1 [0x04]), DerefOf (Arg1 [0x05]))
                M000 (0x0D78)
            }

            If ((Arg0 == 0x09))
            {
                M000 (0x0D69)
                ATC9 ()
                M000 (0x0D79)
            }

            If ((Arg0 == 0x0A))
            {
                M000 (0x0D6A)
                ATCA (Arg1)
                M000 (0x0D7A)
            }

            Return (M207) /* \_SB_.PCI0.GP17.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = 0x01
            M160 = M100 /* External reference */
            M207 = \_SB.ALIB (0x00, M207)
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, 0x01, M203)
            M157 = 0x0A
            M161 = 0x01
            M162 = M100 /* External reference */
            Local0 = M049 (M133, 0x15)
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & 0x01)
            }
            ElseIf ((Local0 & 0x7F))
            {
                M204 = M113 (Local0)
            }

            M203 = M204 /* \_SB_.PCI0.GP17.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = 0x01
            M207 = \_SB.ALIB (0x02, Arg0)
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, 0x00, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = 0x01
            M197 = 0x03
            M206 = 0x01
            M207 = \_SB.ALIB (0x03, M208)
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = 0x01
            M207 = \_SB.ALIB (0x04, Arg0)
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235, 0x00, 0x01)
        }

        Method (ATC8, 4, Serialized)
        {
            Local0 = Buffer (0x05){}
            CreateWordField (Local0, 0x00, M157)
            CreateByteField (Local0, 0x02, M425)
            CreateWordField (Local0, 0x03, M426)
            M157 = 0x05
            Local1 = Arg0
            Local2 = Arg1
            M426 = ((Local2 << 0x08) + Local1)
            Local3 = Arg2
            Local4 = Arg3
            If (((Local3 == 0x00) && (Local4 == 0x00)))
            {
                M425 = 0x01
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == 0x00) && (Local4 == 0x01)))
            {
                M425 = 0x00
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == 0x03) && (Local4 == 0x01)))
            {
                M425 = 0x03
                \_SB.ALIB (0xAA, Local0)
            }
        }

        Method (ATC9, 0, Serialized)
        {
            M207 = M444 /* External reference */
        }

        Method (ATCA, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, M157)
            CreateWordField (Arg0, 0x02, M240)
            M232 (M23A, M240, 0x01)
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN0))
        {
            \_SB.PCI0.GP17.VGA.AFN0 ()
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN1))
        {
            \_SB.PCI0.GP17.VGA.AFN1 (Arg0)
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN2))
        {
            \_SB.PCI0.GP17.VGA.AFN2 (Arg0, Arg1)
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN3))
        {
            \_SB.PCI0.GP17.VGA.AFN3 (Arg0, Arg1)
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN4))
        {
            \_SB.PCI0.GP17.VGA.AFN4 (Arg0)
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN5))
        {
            \_SB.PCI0.GP17.VGA.AFN5 ()
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN6))
        {
            \_SB.PCI0.GP17.VGA.AFN6 ()
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN7))
        {
            \_SB.PCI0.GP17.VGA.AFN7 (Arg0)
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN8))
        {
            \_SB.PCI0.GP17.VGA.AFN8 ()
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GP17.VGA.AFNC))
        {
            \_SB.PCI0.GP17.VGA.AFNC (Arg0, Arg1)
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R23  ", 0x00000001)
{


SSDT9
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "STD3", 0x00000001)
{
    External (_SB_.PCI0.GP18.SATA, DeviceObj)

    OperationRegion (PM00, SystemMemory, 0xFED80300, 0x0100)
    Field (PM00, AnyAcc, NoLock, Preserve)
    {
        Offset (0x6A), 
        SWSP,   8
    }

    OperationRegion (SWRG, SystemIO, SWSP, 0x02)
    Field (SWRG, AnyAcc, NoLock, Preserve)
    {
        SWCP,   8, 
        SWDP,   8
    }

    Scope (\_SB)
    {
        Name (STDS, 0x01)
        Name (STDD, 0x01)
        Name (SCPD, 0xD5)
        Name (SCPU, 0xD6)
    }

    Scope (\_SB.PCI0.GP18.SATA)
    {
        Name (D0S0, 0x01)
        Name (D3S0, 0x01)
        PowerResource (P0S0, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D0S0) /* \_SB_.PCI0.GP18.SATA.D0S0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D0S0 = 0x01
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D0S0 = 0x00
            }
        }

        PowerResource (P3S0, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D3S0) /* \_SB_.PCI0.GP18.SATA.D3S0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D3S0 = 0x01
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D3S0 = 0x00
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0S0
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3S0
        })
        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
        {
            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
            Package (0x01)
            {
                Package (0x02)
                {
                    "StorageD3Enable", 
                    0x01
                }
            }
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If ((STDS == One))
            {
                Return (0x04)
            }
            Else
            {
                Return (0x00)
            }
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((STDS == One))
            {
                If ((STDD == Zero))
                {
                    SWDP = 0x00
                    SWCP = SCPU /* \_SB_.SCPU */
                }
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((STDS == One))
            {
                If ((STDD == Zero))
                {
                    SWDP = 0x00
                    SWCP = SCPD /* \_SB_.SCPD */
                }
            }
        }
    }
}



UEFI
----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 0000009E
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 51
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-R23  "
[018h 0024 004h]                Oem Revision : 00001290
[01Ch 0028 004h]             Asl Compiler ID : "PTEC"
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 010h]             UUID Identifier : 0D9FB197-CEFC-4E91-ACB1-2535D9E5A844
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 158 (0x9E)

    0000: 55 45 46 49 9E 00 00 00 01 51 4C 45 4E 4F 56 4F  // UEFI.....QLENOVO
    0010: 54 50 2D 52 32 33 20 20 90 12 00 00 50 54 45 43  // TP-R23  ....PTEC
    0020: 02 00 00 00 97 B1 9F 0D FC CE 91 4E AC B1 25 35  // ...........N..%5
    0030: D9 E5 A8 44 36 00 05 00 00 00 10 00 00 00 D1 00  // ...D6...........
    0040: 00 00 11 00 00 00 12 00 00 00 E9 00 00 00 03 25  // ...............%
    0050: 05 FF F9 1A EB 4A 83 C4 C2 D4 CE B1 0C A3 16 29  // .....J.........)
    0060: EA 81 A0 F9 15 41 83 85 1A 86 4E 2F 30 9C 52 24  // .....A....N/0.R$
    0070: F3 E3 BC FE CE 43 90 39 93 21 22 D3 77 22 52 24  // .....C.9.!".w"R$
    0080: F3 E3 BC FE CE 43 90 39 93 21 22 D3 77 23 58 DC  // .....C.9.!".w#X.
    0090: AF D8 22 6E F8 42 99 66 36 FF 78 8C 9C AF        // .."n.B.f6.x...


VFCT
----
[000h 0000 004h]                   Signature : "VFCT"    
[004h 0004 004h]                Table Length : 0000AE84
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : FD
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-R23  "
[018h 0024 004h]                Oem Revision : 00001290
[01Ch 0028 004h]             Asl Compiler ID : "PTEC"
[020h 0032 004h]       Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 44676 (0xAE84)

    0000: 56 46 43 54 84 AE 00 00 01 FD 4C 45 4E 4F 56 4F  // VFCT......LENOVO
    0010: 54 50 2D 52 32 33 20 20 90 12 00 00 50 54 45 43  // TP-R23  ....PTEC
    0020: 02 00 00 00 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // ....2..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 81 16 00 00 00 00  // ................
    0060: 01 00 00 00 00 AE 00 00 55 AA 57 E9 5E 23 00 00  // ........U.W.^#..
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: BC 01 00 00 00 00 49 42 4D 32 34 A1 00 00 00 00  // ......IBM24.....
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 90 01 00 00 00 00 00 00 30 34 2F 31 32 2F 32 32  // ........04/12/22
    00C0: 2C 30 36 3A 32 31 3A 32 35 00 00 00 E9 93 24 00  // ,06:21:25.....$.
    00D0: E9 9D 24 00 00 00 70 00 31 31 33 2D 52 45 4D 42  // ..$...p.113-REMB
    00E0: 52 41 4E 44 54 2D 58 33 37 00 52 45 4D 42 52 41  // RANDT-X37.REMBRA
    00F0: 4E 44 54 00 50 43 49 5F 45 58 50 52 45 53 53 00  // NDT.PCI_EXPRESS.
    0100: 30 00 0D 0A 52 65 6D 62 72 61 6E 64 74 20 47 65  // 0...Rembrandt Ge
    0110: 6E 65 72 69 63 20 56 42 49 4F 53 20 20 20 20 20  // neric VBIOS     
    0120: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0130: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0140: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0150: 0D 0A 00 0D 0A 20 0D 0A 00 28 43 29 20 31 39 38  // ..... ...(C) 198
    0160: 38 2D 32 30 32 30 2C 20 41 64 76 61 6E 63 65 64  // 8-2020, Advanced
    0170: 20 4D 69 63 72 6F 20 44 65 76 69 63 65 73 2C 20  //  Micro Devices, 
    0180: 49 6E 63 2E 00 41 54 4F 4D 42 49 4F 53 42 4B 2D  // Inc..ATOMBIOSBK-
    0190: 41 4D 44 20 56 45 52 30 33 32 2E 30 31 37 2E 30  // AMD VER032.017.0
    01A0: 30 30 2E 30 35 35 2E 30 30 30 30 30 30 00 52 6D  // 00.055.000000.Rm
    01B0: 62 47 65 6E 65 72 69 63 56 62 00 32 33 38 39 36  // bGenericVb.23896
    01C0: 35 31 20 00 36 30 36 33 36 38 20 20 00 20 20 20  // 51 .606368  .   
    01D0: 20 20 20 20 20 00 41 4D 44 5F 52 45 4D 42 52 41  //      .AMD_REMBRA
    01E0: 4E 44 54 5F 47 45 4E 45 52 49 43 5C 63 6F 6E 66  // NDT_GENERIC\conf
    01F0: 69 67 2E 68 00 00 00 90 2C 00 02 03 41 54 4F 4D  // ig.h....,...ATOM
    0200: 00 C0 66 24 46 01 E1 01 9A 00 D8 24 00 00 00 00  // ..f$F......$....
    0210: 02 10 02 10 BC 01 80 A4 14 02 00 00 00 00 00 00  // ................
    0220: 00 02 03 00 50 43 49 52 02 10 81 16 00 00 18 00  // ....PCIR........
    0230: 00 00 00 03 57 00 11 20 00 80 00 00 41 4D 44 20  // ....W.. ....AMD 
    0240: 41 54 4F 4D 42 49 4F 53 00 F7 5F 3D B3 00 00 00  // ATOMBIOS.._=....
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 4A 00 02 01  // ............J...
    0280: 00 00 00 00 00 00 2C 20 60 02 9C 21 CC 02 1C 03  // ......, `..!....
    0290: 18 05 00 00 00 00 34 05 40 05 D0 21 94 05 00 00  // ......4.@..!....
    02A0: 00 00 74 22 00 00 00 00 00 00 00 00 94 22 24 20  // ..t"........."$ 
    02B0: 00 00 C0 0A 00 00 EC 05 00 00 00 00 C0 06 00 00  // ................
    02C0: 00 00 00 00 00 00 00 00 6C 00 03 04 37 00 11 20  // ........l...7.. 
    02D0: 20 4E 00 00 20 4E 00 00 01 00 00 00 00 00 00 00  //  N.. N..........
    02E0: 4C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // L...............
    02F0: F4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 00 00 00 00 00 00 00 00 08 00 00  // ................
    0320: 61 42 E0 00 00 00 00 80 80 8D 5B 00 00 00 00 00  // aB........[.....
    0330: 00 00 00 00 50 00 03 01 E2 04 00 00 00 00 00 00  // ....P...........
    0340: 00 00 00 00 7D 3C 3C 03 FF 00 00 00 00 00 00 00  // ....}<<.........
    0350: 00 00 00 00 00 00 00 00 E2 04 00 00 00 00 00 00  // ................
    0360: 00 00 00 00 7D 3C 3C 03 FF 00 00 00 00 00 00 00  // ....}<<.........
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 FC 01 05 04 10 00 38 00 4C 00 60 01  // ..........8.L.`.
    0390: 9B 01 48 00 30 75 00 00 0C 00 1F 05 39 50 00 00  // ..H.0u......9P..
    03A0: 40 9C 00 00 0C 00 1F 05 3E 00 00 00 FF FF FF 00  // @.......>.......
    03B0: 0C 00 1F 05 6F A1 00 00 00 00 00 00 FF FF FF 00  // ....o...........
    03C0: 0C 00 1F 02 3E 00 00 00 00 00 00 00 00 00 00 00  // ....>...........
    03D0: 48 3F 00 00 1F 00 44 00 00 16 00 00 00 05 01 1F  // H?....D.........
    03E0: 00 00 00 05 02 2C 00 00 00 05 03 3E 00 00 00 05  // .....,.....>....
    03F0: 08 1B 50 00 00 05 09 25 60 00 00 05 0A 35 90 00  // ..P....%`....5..
    0400: 00 05 10 21 B0 00 00 05 11 2F F0 00 00 05 18 2A  // ...!...../.....*
    0410: 40 01 00 05 78 69 00 00 1F 00 44 00 00 16 00 00  // @...xi....D.....
    0420: 00 05 01 1F 00 00 00 05 02 2C 00 00 00 05 03 3E  // .........,.....>
    0430: 00 00 00 05 08 1B 50 00 00 05 09 25 60 00 00 05  // ......P....%`...
    0440: 0A 35 90 00 00 05 10 21 B0 00 00 05 11 2F F0 00  // .5.....!...../..
    0450: 00 05 18 2A 40 01 00 05 F0 D2 00 00 1F 00 44 00  // ...*@.........D.
    0460: 00 1D 00 00 00 05 01 26 00 00 00 05 02 30 00 00  // .......&.....0..
    0470: 00 05 03 3E 00 00 00 05 08 22 40 00 00 05 09 2C  // ...>....."@....,
    0480: 60 00 00 05 0A 37 70 00 00 05 10 27 90 00 00 05  // `....7p....'....
    0490: 11 32 C0 00 00 05 18 2E 00 01 00 05 68 3C 01 00  // .2..........h<..
    04A0: 1F 00 44 00 00 1D 00 00 00 05 01 26 00 00 00 05  // ..D........&....
    04B0: 02 30 00 00 00 05 03 3E 00 00 00 05 08 22 40 00  // .0.....>....."@.
    04C0: 00 05 09 2C 60 00 00 05 0A 37 70 00 00 05 10 27  // ...,`....7p....'
    04D0: 90 00 00 05 11 32 C0 00 00 05 18 2E 00 01 00 05  // .....2..........
    04E0: 00 00 00 00 00 01 02 03 00 01 02 03 00 07 05 00  // ................
    04F0: 00 01 02 03 00 01 02 03 00 07 05 00 00 01 02 03  // ................
    0500: 00 01 02 03 00 07 05 00 00 01 02 03 00 01 02 03  // ................
    0510: 00 07 05 00 01 02 03 00 01 02 03 00 07 05 00 08  // ................
    0520: 30 00 00 87 00 00 00 07 30 00 00 B2 25 00 00 08  // 0.......0...%...
    0530: 31 00 00 87 00 00 00 07 31 00 00 B2 25 00 00 08  // 1.......1...%...
    0540: 32 00 00 87 00 00 00 07 32 00 00 B2 25 00 00 08  // 2.......2...%...
    0550: 33 00 00 87 00 00 00 07 33 00 00 B2 25 00 00 5A  // 3.......3...%..Z
    0560: 00 00 00 05 00 00 00 47 00 00 00 30 00 00 00 54  // .......G...0...T
    0570: 00 00 00 30 00 00 00 FF FF FF FF 00 00 00 00 00  // ...0............
    0580: 1C 00 03 01 00 0D 00 00 00 00 00 00 77 01 00 00  // ............w...
    0590: 10 27 00 00 FF 00 FF 00 FF 00 00 00 0C 00 02 01  // .'..............
    05A0: 00 00 00 00 00 00 00 00 54 00 02 01 B5 5D 00 00  // ........T....]..
    05B0: 00 00 01 00 B5 5D 00 00 08 08 02 00 B5 5D 00 00  // .....].......]..
    05C0: 10 10 03 00 B5 5D 00 00 18 14 04 00 B5 5D 00 00  // .....].......]..
    05D0: 1A 18 05 00 91 5D 00 00 08 08 90 00 95 5D 00 00  // .....].......]..
    05E0: 08 08 91 00 99 5D 00 00 08 08 92 00 9D 5D 00 00  // .....].......]..
    05F0: 08 08 93 00 A1 5D 00 00 08 08 94 00 58 00 02 06  // .....]......X...
    0600: 03 0A 01 00 04 01 02 02 64 C0 00 00 65 C0 00 00  // ........d...e...
    0610: 66 C0 00 00 67 C0 00 00 E8 C0 00 00 A0 21 00 00  // f...g........!..
    0620: 26 6A 01 00 10 27 00 00 04 02 01 00 00 00 00 00  // &j...'..........
    0630: 9F 0F 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0650: 00 00 00 00 D4 00 04 04 40 00 00 00 80 38 01 00  // ........@....8..
    0660: 60 09 60 09 00 00 00 00 00 00 00 00 5E 01 4E 0C  // `.`.........^.N.
    0670: 01 01 00 00 55 00 00 00 60 09 4D 16 01 03 04 01  // ....U...`.M.....
    0680: 00 05 05 00 00 00 00 00 00 46 C3 23 00 00 00 00  // .........F.#....
    0690: 00 00 00 00 00 00 00 00 54 00 01 00 00 00 03 0C  // ........T.......
    06A0: 00 00 00 00 00 00 00 00 10 11 3D 10 4D 1C 02 00  // ..........=.M...
    06B0: 00 45 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .E..............
    06C0: 00 00 AA 0A 22 22 02 00 AA F2 01 00 00 00 00 00  // ....""..........
    06D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0720: 00 00 00 00 00 00 00 00 00 04 02 02 00 00 00 00  // ................
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 77 01 00 00  // ............w...
    0740: 00 00 23 04 00 00 00 00 E2 04 00 00 00 00 00 00  // ..#.............
    0750: 00 00 00 00 00 3C 3C 00 00 00 00 00 00 00 00 00  // .....<<.........
    0760: 00 00 00 00 00 00 00 00 E2 04 00 00 00 00 00 00  // ................
    0770: 00 00 00 00 00 3C 3C 00 00 00 00 00 00 00 00 00  // .....<<.........
    0780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07A0: 00 00 00 00 00 00 00 00 8C 00 01 01 00 00 00 00  // ................
    07B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 10 01  // ................
    07C0: 14 31 00 00 00 00 E4 00 00 00 00 00 00 02 30 02  // .1............0.
    07D0: 0C 33 01 01 00 00 E4 00 00 00 00 1E 08 00 10 02  // .3..............
    07E0: 13 31 02 02 00 00 E4 00 00 01 30 00 80 00 20 02  // .1........0... .
    07F0: 13 32 03 03 00 00 E4 00 00 01 30 00 00 00 00 00  // .2........0.....
    0800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0890: 00 00 00 00 00 00 00 00 01 00 00 00 01 00 00 00  // ................
    08A0: 01 00 00 00 01 02 00 00 00 00 00 00 00 00 00 00  // ................
    08B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B20: 00 00 00 00 00 00 00 00 FC 13 01 00 00 1F 00 00  // ................
    0B30: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 16  // ....H?..........
    0B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B50: 00 1F 01 00 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    0B60: 03 00 00 1F 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B70: 00 00 00 00 00 1F 02 00 00 00 00 00 48 3F 00 00  // ............H?..
    0B80: 05 02 00 07 03 00 00 2C 00 00 00 00 00 00 00 00  // .......,........
    0B90: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
    0BA0: 48 3F 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // H?.........>....
    0BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 00  // ................
    0BC0: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 1B  // ....H?..........
    0BD0: 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BE0: 00 1F 09 00 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    0BF0: 03 00 00 25 06 00 00 00 00 00 00 00 00 00 00 00  // ...%............
    0C00: 00 00 00 00 00 1F 0A 00 00 00 00 00 48 3F 00 00  // ............H?..
    0C10: 05 02 00 07 03 00 00 35 09 00 00 00 00 00 00 00  // .......5........
    0C20: 00 00 00 00 00 00 00 00 00 1F 10 00 00 00 00 00  // ................
    0C30: 48 3F 00 00 05 02 00 07 03 00 00 21 0B 00 00 00  // H?.........!....
    0C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
    0C50: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 2F  // ....H?........./
    0C60: 0F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C70: 00 1F 18 00 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    0C80: 03 00 00 2A 14 00 00 00 00 00 00 00 00 00 00 00  // ...*............
    0C90: 00 00 00 00 00 1F 00 00 00 00 00 00 78 69 00 00  // ............xi..
    0CA0: 05 02 00 07 03 00 00 16 00 00 00 00 00 00 00 00  // ................
    0CB0: 00 00 00 00 00 00 00 00 00 1F 01 00 00 00 00 00  // ................
    0CC0: 78 69 00 00 05 02 00 07 03 00 00 1F 00 00 00 00  // xi..............
    0CD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
    0CE0: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 2C  // ....xi.........,
    0CF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D00: 00 1F 03 00 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    0D10: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    0D20: 00 00 00 00 00 1F 08 00 00 00 00 00 78 69 00 00  // ............xi..
    0D30: 05 02 00 07 03 00 00 1B 05 00 00 00 00 00 00 00  // ................
    0D40: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
    0D50: 78 69 00 00 05 02 00 07 03 00 00 25 06 00 00 00  // xi.........%....
    0D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 00  // ................
    0D70: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 35  // ....xi.........5
    0D80: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D90: 00 1F 10 00 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    0DA0: 03 00 00 21 0B 00 00 00 00 00 00 00 00 00 00 00  // ...!............
    0DB0: 00 00 00 00 00 1F 11 00 00 00 00 00 78 69 00 00  // ............xi..
    0DC0: 05 02 00 07 03 00 00 2F 0F 00 00 00 00 00 00 00  // ......./........
    0DD0: 00 00 00 00 00 00 00 00 00 1F 18 00 00 00 00 00  // ................
    0DE0: 78 69 00 00 05 02 00 07 03 00 00 2A 14 00 00 00  // xi.........*....
    0DF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 00 00  // ................
    0E00: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 1D  // ................
    0E10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E20: 00 1F 01 00 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    0E30: 03 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00  // ...&............
    0E40: 00 00 00 00 00 1F 02 00 00 00 00 00 F0 D2 00 00  // ................
    0E50: 05 02 00 07 03 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0E60: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
    0E70: F0 D2 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // ...........>....
    0E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 00  // ................
    0E90: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 22  // ..............."
    0EA0: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EB0: 00 1F 09 00 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    0EC0: 03 00 00 2C 06 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    0ED0: 00 00 00 00 00 1F 0A 00 00 00 00 00 F0 D2 00 00  // ................
    0EE0: 05 02 00 07 03 00 00 37 07 00 00 00 00 00 00 00  // .......7........
    0EF0: 00 00 00 00 00 00 00 00 00 1F 10 00 00 00 00 00  // ................
    0F00: F0 D2 00 00 05 02 00 07 03 00 00 27 09 00 00 00  // ...........'....
    0F10: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
    0F20: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 32  // ...............2
    0F30: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F40: 00 1F 18 00 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    0F50: 03 00 00 2E 10 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F60: 00 00 00 00 00 1F 00 00 00 00 00 00 68 3C 01 00  // ............h<..
    0F70: 05 02 00 07 03 00 00 1D 00 00 00 00 00 00 00 00  // ................
    0F80: 00 00 00 00 00 00 00 00 00 1F 01 00 00 00 00 00  // ................
    0F90: 68 3C 01 00 05 02 00 07 03 00 00 26 00 00 00 00  // h<.........&....
    0FA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
    0FB0: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 30  // ....h<.........0
    0FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FD0: 00 1F 03 00 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    0FE0: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    0FF0: 00 00 00 00 00 1F 08 00 00 00 00 00 68 3C 01 00  // ............h<..
    1000: 05 02 00 07 03 00 00 22 04 00 00 00 00 00 00 00  // ......."........
    1010: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
    1020: 68 3C 01 00 05 02 00 07 03 00 00 2C 06 00 00 00  // h<.........,....
    1030: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 00  // ................
    1040: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 37  // ....h<.........7
    1050: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1060: 00 1F 10 00 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    1070: 03 00 00 27 09 00 00 00 00 00 00 00 00 00 00 00  // ...'............
    1080: 00 00 00 00 00 1F 11 00 00 00 00 00 68 3C 01 00  // ............h<..
    1090: 05 02 00 07 03 00 00 32 0C 00 00 00 00 00 00 00  // .......2........
    10A0: 00 00 00 00 00 00 00 00 00 1F 18 00 00 00 00 00  // ................
    10B0: 68 3C 01 00 05 02 00 07 03 00 00 2E 10 00 00 00  // h<..............
    10C0: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 00 00  // ................
    10D0: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 00 3E  // ...............>
    10E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    10F0: 08 1F 01 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    1100: 03 00 00 38 06 00 00 00 00 00 00 00 00 00 00 00  // ...8............
    1110: 00 00 00 00 08 1F 02 00 00 00 00 00 A0 86 01 00  // ................
    1120: 05 02 00 07 03 00 00 33 0B 00 00 00 00 00 00 00  // .......3........
    1130: 00 00 00 00 00 00 00 00 08 1F 03 00 00 00 00 00  // ................
    1140: A0 86 01 00 05 02 00 07 03 00 00 30 0E 00 00 00  // ...........0....
    1150: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 04 00  // ................
    1160: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 00 2B  // ...............+
    1170: 13 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1180: 08 1F 05 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    1190: 03 00 03 3B 00 00 00 00 00 00 00 00 00 00 00 00  // ...;............
    11A0: 00 00 00 00 08 1F 06 00 00 00 00 00 A0 86 01 00  // ................
    11B0: 05 02 00 07 03 00 03 35 06 00 00 00 00 00 00 00  // .......5........
    11C0: 00 00 00 00 00 00 00 00 08 1F 07 00 00 00 00 00  // ................
    11D0: A0 86 01 00 05 02 00 07 03 00 03 31 0A 00 00 00  // ...........1....
    11E0: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 08 00  // ................
    11F0: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 03 2D  // ...............-
    1200: 0E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1210: 08 1F 09 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    1220: 03 00 03 2A 11 00 00 00 00 00 00 00 00 00 00 00  // ...*............
    1230: 00 00 00 00 08 1F 0A 00 00 00 00 00 A0 86 01 00  // ................
    1240: 05 02 00 07 03 00 06 38 00 00 00 00 00 00 00 00  // .......8........
    1250: 00 00 00 00 00 00 00 00 08 1F 0B 00 00 00 00 00  // ................
    1260: A0 86 01 00 05 02 00 07 03 00 06 32 06 00 00 00  // ...........2....
    1270: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 0C 00  // ................
    1280: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 06 2F  // .............../
    1290: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    12A0: 08 1F 0D 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    12B0: 03 00 06 2B 0D 00 00 00 00 00 00 00 00 00 00 00  // ...+............
    12C0: 00 00 00 00 08 1F 0E 00 00 00 00 00 A0 86 01 00  // ................
    12D0: 05 02 00 07 03 00 0A 33 00 00 00 00 00 00 00 00  // .......3........
    12E0: 00 00 00 00 00 00 00 00 08 1F 0F 00 00 00 00 00  // ................
    12F0: A0 86 01 00 05 02 00 07 03 00 03 22 03 00 00 00  // ..........."....
    1300: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 00 00  // ................
    1310: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 1E  // ....`T..........
    1320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1330: 00 1F 01 00 00 00 00 00 60 54 00 00 05 02 00 07  // ........`T......
    1340: 03 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00  // ...&............
    1350: 00 00 00 00 00 1F 02 00 00 00 00 00 60 54 00 00  // ............`T..
    1360: 05 02 00 07 03 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1370: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
    1380: 60 54 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // `T.........>....
    1390: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 00  // ................
    13A0: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 22  // ....`T........."
    13B0: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    13C0: 00 1F 09 00 00 00 00 00 60 54 00 00 05 02 00 07  // ........`T......
    13D0: 03 00 00 2C 06 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    13E0: 00 00 00 00 00 1F 0A 00 00 00 00 00 60 54 00 00  // ............`T..
    13F0: 05 02 00 07 03 00 00 37 07 00 00 00 00 00 00 00  // .......7........
    1400: 00 00 00 00 00 00 00 00 00 1F 10 00 00 00 00 00  // ................
    1410: 60 54 00 00 05 02 00 07 03 00 00 27 09 00 00 00  // `T.........'....
    1420: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
    1430: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 32  // ....`T.........2
    1440: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1450: 00 1F 18 00 00 00 00 00 60 54 00 00 05 02 00 07  // ........`T......
    1460: 03 00 00 2E 10 00 00 00 00 00 00 00 00 00 00 00  // ................
    1470: 00 00 00 00 00 1F 00 00 00 00 00 00 EC 5E 00 00  // .............^..
    1480: 05 02 00 07 03 00 00 1E 00 00 00 00 00 00 00 00  // ................
    1490: 00 00 00 00 00 00 00 00 00 1F 01 00 00 00 00 00  // ................
    14A0: EC 5E 00 00 05 02 00 07 03 00 00 26 00 00 00 00  // .^.........&....
    14B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
    14C0: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 30  // .....^.........0
    14D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    14E0: 00 1F 03 00 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
    14F0: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    1500: 00 00 00 00 00 1F 08 00 00 00 00 00 EC 5E 00 00  // .............^..
    1510: 05 02 00 07 03 00 00 22 04 00 00 00 00 00 00 00  // ......."........
    1520: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
    1530: EC 5E 00 00 05 02 00 07 03 00 00 2C 06 00 00 00  // .^.........,....
    1540: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 00  // ................
    1550: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 37  // .....^.........7
    1560: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1570: 00 1F 10 00 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
    1580: 03 00 00 27 09 00 00 00 00 00 00 00 00 00 00 00  // ...'............
    1590: 00 00 00 00 00 1F 11 00 00 00 00 00 EC 5E 00 00  // .............^..
    15A0: 05 02 00 07 03 00 00 32 0C 00 00 00 00 00 00 00  // .......2........
    15B0: 00 00 00 00 00 00 00 00 00 1F 18 00 00 00 00 00  // ................
    15C0: EC 5E 00 00 05 02 00 07 03 00 00 2E 10 00 00 00  // .^..............
    15D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 00 00  // ................
    15E0: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 1E  // .....~..........
    15F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1600: 00 1F 01 00 00 00 00 00 90 7E 00 00 05 02 00 07  // .........~......
    1610: 03 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00  // ...&............
    1620: 00 00 00 00 00 1F 02 00 00 00 00 00 90 7E 00 00  // .............~..
    1630: 05 02 00 07 03 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1640: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
    1650: 90 7E 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // .~.........>....
    1660: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 00  // ................
    1670: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 22  // .....~........."
    1680: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1690: 00 1F 09 00 00 00 00 00 90 7E 00 00 05 02 00 07  // .........~......
    16A0: 03 00 00 2C 06 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    16B0: 00 00 00 00 00 1F 0A 00 00 00 00 00 90 7E 00 00  // .............~..
    16C0: 05 02 00 07 03 00 00 37 07 00 00 00 00 00 00 00  // .......7........
    16D0: 00 00 00 00 00 00 00 00 00 1F 10 00 00 00 00 00  // ................
    16E0: 90 7E 00 00 05 02 00 07 03 00 00 27 09 00 00 00  // .~.........'....
    16F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
    1700: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 32  // .....~.........2
    1710: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1720: 00 1F 18 00 00 00 00 00 90 7E 00 00 05 02 00 07  // .........~......
    1730: 03 00 00 2E 10 00 00 00 00 00 00 00 00 00 00 00  // ................
    1740: 00 00 00 00 00 1F 00 00 00 00 00 00 C0 A8 00 00  // ................
    1750: 05 02 00 07 03 00 00 1E 00 00 00 00 00 00 00 00  // ................
    1760: 00 00 00 00 00 00 00 00 00 1F 01 00 00 00 00 00  // ................
    1770: C0 A8 00 00 05 02 00 07 03 00 00 26 00 00 00 00  // ...........&....
    1780: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
    1790: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 30  // ...............0
    17A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17B0: 00 1F 03 00 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
    17C0: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    17D0: 00 00 00 00 00 1F 08 00 00 00 00 00 C0 A8 00 00  // ................
    17E0: 05 02 00 07 03 00 00 22 04 00 00 00 00 00 00 00  // ......."........
    17F0: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
    1800: C0 A8 00 00 05 02 00 07 03 00 00 2C 06 00 00 00  // ...........,....
    1810: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 00  // ................
    1820: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 37  // ...............7
    1830: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1840: 00 1F 10 00 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
    1850: 03 00 00 27 09 00 00 00 00 00 00 00 00 00 00 00  // ...'............
    1860: 00 00 00 00 00 1F 11 00 00 00 00 00 C0 A8 00 00  // ................
    1870: 05 02 00 07 03 00 00 32 0C 00 00 00 00 00 00 00  // .......2........
    1880: 00 00 00 00 00 00 00 00 00 1F 18 00 00 00 00 00  // ................
    1890: C0 A8 00 00 05 02 00 07 03 00 00 2E 10 00 00 00  // ................
    18A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 00 00  // ................
    18B0: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 1E  // .... ...........
    18C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18D0: 00 1F 01 00 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
    18E0: 03 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00  // ...&............
    18F0: 00 00 00 00 00 1F 02 00 00 00 00 00 20 FD 00 00  // ............ ...
    1900: 05 02 00 07 03 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1910: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
    1920: 20 FD 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  //  ..........>....
    1930: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 00  // ................
    1940: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 22  // .... .........."
    1950: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1960: 00 1F 09 00 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
    1970: 03 00 00 2C 06 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    1980: 00 00 00 00 00 1F 0A 00 00 00 00 00 20 FD 00 00  // ............ ...
    1990: 05 02 00 07 03 00 00 37 07 00 00 00 00 00 00 00  // .......7........
    19A0: 00 00 00 00 00 00 00 00 00 1F 10 00 00 00 00 00  // ................
    19B0: 20 FD 00 00 05 02 00 07 03 00 00 27 09 00 00 00  //  ..........'....
    19C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
    19D0: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 32  // .... ..........2
    19E0: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19F0: 00 1F 18 00 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
    1A00: 03 00 00 2E 10 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A10: 00 00 00 00 00 1F 00 00 00 00 00 00 AC 07 01 00  // ................
    1A20: 05 02 00 07 03 00 00 1E 00 00 00 00 00 00 00 00  // ................
    1A30: 00 00 00 00 00 00 00 00 00 1F 01 00 00 00 00 00  // ................
    1A40: AC 07 01 00 05 02 00 07 03 00 00 26 00 00 00 00  // ...........&....
    1A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
    1A60: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 30  // ...............0
    1A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A80: 00 1F 03 00 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
    1A90: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    1AA0: 00 00 00 00 00 1F 08 00 00 00 00 00 AC 07 01 00  // ................
    1AB0: 05 02 00 07 03 00 00 22 04 00 00 00 00 00 00 00  // ......."........
    1AC0: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
    1AD0: AC 07 01 00 05 02 00 07 03 00 00 2C 06 00 00 00  // ...........,....
    1AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 00  // ................
    1AF0: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 37  // ...............7
    1B00: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B10: 00 1F 10 00 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
    1B20: 03 00 00 27 09 00 00 00 00 00 00 00 00 00 00 00  // ...'............
    1B30: 00 00 00 00 00 1F 11 00 00 00 00 00 AC 07 01 00  // ................
    1B40: 05 02 00 07 03 00 00 32 0C 00 00 00 00 00 00 00  // .......2........
    1B50: 00 00 00 00 00 00 00 00 00 1F 18 00 00 00 00 00  // ................
    1B60: AC 07 01 00 05 02 00 07 03 00 00 2E 10 00 00 00  // ................
    1B70: 00 00 00 00 00 00 00 00 00 00 00 00 02 1F 00 00  // ................
    1B80: 00 00 00 00 30 75 00 00 05 02 00 07 03 00 00 3E  // ....0u.........>
    1B90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BA0: 02 1F 00 00 00 00 00 00 40 9C 00 00 05 02 00 07  // ........@.......
    1BB0: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    1BC0: 00 00 00 00 02 1F 00 00 00 00 00 00 60 EA 00 00  // ............`...
    1BD0: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    1BE0: 00 00 00 00 00 00 00 00 03 1F 00 00 00 00 00 00  // ................
    1BF0: 30 75 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // 0u.........>....
    1C00: 00 00 00 00 00 00 00 00 00 00 00 00 03 1F 00 00  // ................
    1C10: 00 00 00 00 40 9C 00 00 05 02 00 07 03 00 00 3E  // ....@..........>
    1C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C30: 03 1F 00 00 00 00 00 00 60 EA 00 00 05 02 00 07  // ........`.......
    1C40: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    1C50: 00 00 00 00 04 1F 00 00 00 00 00 00 30 75 00 00  // ............0u..
    1C60: 05 02 00 07 03 00 05 31 08 00 00 00 00 00 00 00  // .......1........
    1C70: 00 00 00 00 00 00 00 00 04 1F 01 00 00 00 00 00  // ................
    1C80: 30 75 00 00 05 02 00 07 03 00 05 2F 0A 00 00 00  // 0u........./....
    1C90: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 02 00  // ................
    1CA0: 00 00 00 00 30 75 00 00 05 02 00 07 03 00 05 2C  // ....0u.........,
    1CB0: 0D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CC0: 04 1F 03 00 00 00 00 00 30 75 00 00 05 02 00 07  // ........0u......
    1CD0: 03 00 05 29 10 00 00 00 00 00 00 00 00 00 00 00  // ...)............
    1CE0: 00 00 00 00 04 1F 00 00 00 00 00 00 60 EA 00 00  // ............`...
    1CF0: 05 02 00 07 03 00 05 31 08 00 00 00 00 00 00 00  // .......1........
    1D00: 00 00 00 00 00 00 00 00 04 1F 01 00 00 00 00 00  // ................
    1D10: 60 EA 00 00 05 02 00 07 03 00 05 2F 0A 00 00 00  // `........../....
    1D20: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 02 00  // ................
    1D30: 00 00 00 00 60 EA 00 00 05 02 00 07 03 00 05 2C  // ....`..........,
    1D40: 0D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D50: 04 1F 03 00 00 00 00 00 60 EA 00 00 05 02 00 07  // ........`.......
    1D60: 03 00 05 29 10 00 00 00 00 00 00 00 00 00 00 00  // ...)............
    1D70: 00 00 00 00 04 1F 00 00 00 00 00 00 80 38 01 00  // .............8..
    1D80: 05 02 00 07 03 00 05 31 08 00 00 00 00 00 00 00  // .......1........
    1D90: 00 00 00 00 00 00 00 00 04 1F 01 00 00 00 00 00  // ................
    1DA0: 80 38 01 00 05 02 00 07 03 00 05 2F 0A 00 00 00  // .8........./....
    1DB0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 02 00  // ................
    1DC0: 00 00 00 00 80 38 01 00 05 02 00 07 03 00 05 2C  // .....8.........,
    1DD0: 0D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DE0: 04 1F 03 00 00 00 00 00 80 38 01 00 05 02 00 07  // .........8......
    1DF0: 03 00 05 29 10 00 00 00 00 00 00 00 00 00 00 00  // ...)............
    1E00: 00 00 00 00 04 1F 00 00 00 00 00 00 A0 86 01 00  // ................
    1E10: 05 02 00 07 03 00 05 31 08 00 00 00 00 00 00 00  // .......1........
    1E20: 00 00 00 00 00 00 00 00 04 1F 01 00 00 00 00 00  // ................
    1E30: A0 86 01 00 05 02 00 07 03 00 05 2F 0A 00 00 00  // .........../....
    1E40: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 02 00  // ................
    1E50: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 05 2C  // ...............,
    1E60: 0D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E70: 04 1F 03 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    1E80: 03 00 05 29 10 00 00 00 00 00 00 00 00 00 00 00  // ...)............
    1E90: 00 00 00 00 04 1F 00 00 00 00 00 00 C0 D4 01 00  // ................
    1EA0: 05 02 00 07 03 00 05 31 08 00 00 00 00 00 00 00  // .......1........
    1EB0: 00 00 00 00 00 00 00 00 04 1F 01 00 00 00 00 00  // ................
    1EC0: C0 D4 01 00 05 02 00 07 03 00 05 2F 0A 00 00 00  // .........../....
    1ED0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 02 00  // ................
    1EE0: 00 00 00 00 C0 D4 01 00 05 02 00 07 03 00 05 2C  // ...............,
    1EF0: 0D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F00: 04 1F 03 00 00 00 00 00 C0 D4 01 00 05 02 00 07  // ................
    1F10: 03 00 05 29 10 00 00 00 00 00 00 00 00 00 00 00  // ...)............
    1F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2080: 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01 01  // ................
    2090: 00 00 00 00 70 01 02 01 D6 09 80 02 A0 00 E0 01  // ....p...........
    20A0: 2D 00 10 00 60 00 0A 00 02 00 00 00 00 00 08 08  // -...`...........
    20B0: 06 00 12 3C A0 0F 20 03 00 01 58 02 1C 00 28 00  // ...<.. ...X...(.
    20C0: 80 00 01 00 04 00 00 00 00 00 00 00 00 00 6A 3C  // ..............j<
    20D0: 64 19 00 04 40 01 00 03 26 00 18 00 88 00 03 00  // d...@...&.......
    20E0: 06 00 00 00 00 00 00 00 06 00 55 3C 01 1D 00 05  // ..........U<....
    20F0: 72 01 D0 02 1E 00 6E 00 28 00 05 00 05 00 00 00  // r.....n.(.......
    2100: 00 00 00 00 00 00 E8 3C 30 2A 00 05 08 02 C0 03  // .......<0*......
    2110: 28 00 60 00 70 00 01 00 03 00 00 00 00 00 00 00  // (.`.p...........
    2120: 00 00 E9 3C 30 2A 00 05 98 01 00 04 2A 00 30 00  // ...<0*......*.0.
    2130: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 EA 3C  // p..............<
    2140: 66 21 56 05 AA 01 00 03 1E 00 46 00 8F 00 03 00  // f!V.......F.....
    2150: 03 00 00 00 00 00 00 00 02 00 ED 3C 8F 2F 78 05  // ...........<./x.
    2160: D0 01 1A 04 27 00 58 00 90 00 03 00 04 00 00 00  // ....'.X.........
    2170: 00 00 00 00 02 00 EB 3C 48 3F 40 06 30 02 B0 04  // .......<H?@.0...
    2180: 32 00 40 00 C0 00 01 00 03 00 00 00 00 00 00 00  // 2.@.............
    2190: 00 00 EC 3C 02 3A 80 07 18 01 38 04 2D 00 58 00  // ...<.:....8.-.X.
    21A0: 2C 00 04 00 05 00 00 00 00 00 00 00 02 00 F3 3C  // ,..............<
    21B0: 7D 4B 80 07 A0 02 B0 04 2D 00 88 00 C8 00 03 00  // }K......-.......
    21C0: 06 00 00 00 00 00 00 00 02 00 F0 3C 68 5B 80 07  // ...........<h[..
    21D0: A8 02 A0 05 3C 00 80 00 D0 00 01 00 03 00 00 00  // ....<...........
    21E0: 00 00 00 00 02 00 F1 3C 32 96 00 0A B0 03 40 06  // .......<2.....@.
    21F0: 3A 00 C0 00 18 01 03 00 06 00 00 00 00 00 00 00  // :...............
    2200: 02 00 F2 3C 34 00 02 01 00 00 00 00 00 2A 00 2A  // ...<4........*.*
    2210: 00 00 2A 2A 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A  // ..***..*.**..***
    2220: 15 15 15 15 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F  // .....?.?..???..?
    2230: 15 3F 3F 3F 15 3F 3F 3F A4 00 01 01 10 01 06 12  // .???.???........
    2240: 11 01 16 12 21 01 0A 12 13 01 06 6A 14 01 16 6A  // ....!......j...j
    2250: 22 01 0A 6A 16 01 06 55 17 01 16 55 23 01 0A 55  // "..j...U...U#..U
    2260: 63 01 16 E8 64 01 0A E8 65 01 16 E9 66 01 0A E9  // c...d...e...f...
    2270: 19 01 06 EA 1A 01 16 EA 24 01 0A EA 47 01 16 ED  // ........$...G...
    2280: 48 01 0A ED 45 01 16 EB 46 01 0A EB 75 01 16 EC  // H...E...F...u...
    2290: 76 01 0A EC A5 01 16 F3 A6 01 0A F3 A0 01 16 F0  // v...............
    22A0: A1 01 0A F0 A2 01 16 F1 A3 01 0A F1 A4 01 16 F2  // ................
    22B0: A5 01 0A F2 D2 01 16 70 D4 01 0A 70 D8 01 16 71  // .......p...p...q
    22C0: D9 01 0A 71 E2 01 16 72 E4 01 0A 72 E8 01 16 73  // ...q...r...r...s
    22D0: E9 01 0A 73 F5 01 16 74 F6 01 0A 74 20 00 02 02  // ...s...t...t ...
    22E0: 02 00 00 02 08 00 80 00 00 04 20 00 00 08 40 00  // .......... ...@.
    22F0: 01 00 04 00 10 00 00 01 FF FF FF FF CD 00 01 04  // ................
    2300: 8A 02 06 00 14 31 68 00 1E 21 00 00 95 00 00 00  // .....1h..!......
    2310: 02 00 00 00 0C 33 71 00 1E 22 00 00 9C 00 00 00  // .....3q.."......
    2320: 00 02 00 00 13 31 7A 00 20 21 00 00 A3 00 00 00  // .....1z. !......
    2330: 08 00 00 00 13 32 83 00 20 22 00 00 AA 00 00 00  // .....2.. "......
    2340: 80 00 00 00 00 00 8C 00 21 21 00 00 B1 00 00 00  // ........!!......
    2350: 00 00 00 00 03 71 B8 00 00 00 00 00 00 00 00 00  // .....q..........
    2360: 00 00 00 00 01 04 90 00 02 04 01 00 FF 01 04 91  // ................
    2370: 00 02 04 02 00 FF 01 04 92 00 02 04 03 00 FF 01  // ................
    2380: 04 93 00 02 04 04 00 FF 01 04 94 00 02 04 00 00  // ................
    2390: FF 14 06 0F 00 00 00 FF 14 06 0F 1E 00 00 FF 14  // ................
    23A0: 06 3F 01 00 00 FF 14 06 3F 01 00 00 FF 14 06 3F  // .?......?......?
    23B0: 1F 00 00 FF 10 0A 01 02 03 04 05 00 00 00 11 0A  // ................
    23C0: 90 91 92 93 94 00 00 00 FF 00 00 00 1E 06 66 50  // ..............fP
    23D0: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F A3 14  // fQfRfSfUfVfW....
    23E0: 00 8C 0E 08 00 B2 20 E8 A6 1E 0B C0 75 14 A2 02  // ...... .....u...
    23F0: 00 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    2400: 1F CB E8 C0 1F E8 F8 00 E8 8F 1D 32 D2 8D 3E 90  // ...........2..>.
    2410: 01 89 55 16 E8 0C 0D E8 CF 0C E8 01 1C 75 19 E8  // ..U..........u..
    2420: 1A 0E E8 EF 02 E8 67 18 0B C0 74 0C E8 39 00 E8  // ......g...t..9..
    2430: BE 45 E8 C6 0C E8 0D 46 E8 A9 00 B4 80 E8 84 1D  // .E.....F........
    2440: 8A C7 66 C1 E0 10 8A E3 B0 20 66 A3 34 A1 E8 EF  // ..f...... f.4...
    2450: 02 E8 D9 0C E8 B1 1F 66 5F 66 5E 66 5D 66 5B 66  // .......f_f^f]f[f
    2460: 5A 66 59 66 58 07 1F CB 2E 8B 1E 08 00 83 3E 78  // ZfYfX.........>x
    2470: 24 00 75 04 89 1E 76 24 1E 2E 8E 1E 6E 24 9C FA  // $.u...v$....n$..
    2480: 66 C7 06 08 01 65 F0 00 F0 C7 06 40 00 D8 24 89  // f....e.....@..$.
    2490: 1E 42 00 C7 06 B4 01 D8 24 89 1E B6 01 C7 06 7C  // .B......$......|
    24A0: 00 16 6F 89 1E 7E 00 C7 06 0C 01 29 73 89 1E 0E  // ..o..~.....)s...
    24B0: 01 C7 06 A8 04 4E 69 89 1E AA 04 2E 8E 1E 76 24  // .....Ni.......v$
    24C0: 8B C3 A3 50 69 A3 60 69 A3 72 69 9D 1F C3 50 4D  // ...Pi.`i.ri...PM
    24D0: 49 44 D8 24 80 59 00 00 00 A0 00 B0 00 B8 00 C0  // ID.$.Y..........
    24E0: 00 00 00 00 BB 00 00 E8 2C 0C 66 C1 E8 10 A3 C2  // ........,.f.....
    24F0: 01 BB 0B 00 E8 1F 0C 8D 3E 90 01 66 89 45 18 C3  // ........>..f.E..
    2500: 66 50 66 52 51 56 66 B8 52 54 53 5F BA 80 00 66  // fPfRQVf.RTS_...f
    2510: EF B0 56 EE B0 42 EE B0 49 EE B0 4F EE B0 53 EE  // ..V..B..I..O..S.
    2520: B0 20 EE BE 2C 01 B9 19 00 AC E6 80 E2 FB 66 B8  // . ..,.........f.
    2530: 44 4E 45 5F BA 80 00 66 EF 5E 59 66 5A 66 58 C3  // DNE_...f.^YfZfX.
    2540: E8 A0 1E 80 FC A0 75 05 E8 3D 00 EB 11 80 FC 4F  // ......u..=.....O
    2550: 75 05 E8 B9 33 EB 07 E8 0E 39 EB 02 B4 01 E8 A7  // u...3....9......
    2560: 1E CF E8 7E 1E E8 20 00 EB 02 B4 01 E8 99 1E CB  // ...~.. .........
    2570: E8 70 1E 80 FC 4F 75 05 E8 93 33 EB 07 E8 E8 38  // .p...Ou...3....8
    2580: EB 02 B4 01 E8 81 1E CB 1E 06 66 50 66 51 66 52  // ..........fPfQfR
    2590: 66 53 66 55 66 56 66 57 0E 1F 3C 04 75 29 2E A1  // fSfUfVfW..<.u)..
    25A0: 1A 00 66 C1 E0 10 2E A1 18 00 8D 36 9B 00 8A 3C  // ..f........6...<
    25B0: 80 EF 30 B3 02 8B EC 89 5E 0C 89 46 04 66 C1 E8  // ..0.....^..F.f..
    25C0: 10 89 46 00 E9 2B 01 3C 05 75 18 E8 F6 1B E8 C9  // ..F..+.<.u......
    25D0: 1B 2E A1 08 00 8B EC 89 56 10 89 46 00 89 5E 04  // ........V..F..^.
    25E0: E9 0F 01 3C 06 75 32 E8 14 0B 66 D1 E0 8B EC 89  // ...<.u2...f.....
    25F0: 46 14 BB 02 00 E8 1E 0B 88 46 18 E8 08 0B 66 89  // F........F....f.
    2600: 46 0C BB 09 00 E8 0E 0B 33 C0 66 89 46 00 2E 8B  // F.......3.f.F...
    2610: 16 C2 01 89 56 10 E9 D9 00 3C 0B 75 24 0A DB 75  // ....V....<.u$..u
    2620: 11 B9 80 00 BB 02 00 8B EC 89 5E 0C 89 4E 14 E9  // ..........^..N..
    2630: C0 00 8A C7 E8 D3 00 E8 38 01 0F 84 AC 00 E9 B1  // ........8.......
    2640: 00 3C 17 75 1D E8 9B 0D 74 06 E8 8D 09 E8 9E 12  // .<.u....t.......
    2650: E8 13 07 E8 82 0A 33 C9 8B C8 8B EC 89 4E 14 E9  // ......3......N..
    2660: 90 00 3C 18 75 45 0A FF 75 10 E8 22 0D 8B EC 89  // ..<.uE..u.."....
    2670: 46 0C E8 4F 07 89 4E 10 EB 78 E8 66 0D 75 6B BB  // F..O..N..x.f.uk.
    2680: 00 4C E8 FC 1C 66 0B C0 74 60 23 C9 74 5C E8 3A  // .L...f..t`#.t\.:
    2690: 0D BE 00 4C E8 AC 0A 74 51 BE 00 4C B0 40 E8 FB  // ...L...tQ..L.@..
    26A0: 0A E8 EB 0C 8B EC 89 46 0C EB 47 3C 82 75 1A 80  // .......F..G<.u..
    26B0: FB 05 75 15 0A FF 75 0A E8 30 0C 8B EC 89 46 14  // ..u...u..0....F.
    26C0: EB 30 E8 0D 0C 74 1B EB 29 3C 8E 75 15 80 FF 01  // .0...t..)<.u....
    26D0: 74 08 80 FF 02 75 0B 80 C1 02 80 C1 02 E8 57 0C  // t....u........W.
    26E0: EB 10 8B EC C6 46 19 02 EB 0F 8B EC C6 46 19 01  // .....F.......F..
    26F0: EB 07 32 E4 8B EC 88 66 19 66 5F 66 5E 66 5D 66  // ..2....f.f_f^f]f
    2700: 5B 66 5A 66 59 66 58 07 1F C3 51 8A C8 B8 01 00  // [fZfYfX...Q.....
    2710: D3 E0 59 C3 E8 17 1D C3 0C 01 C3 00 50 51 B0 B6  // ..Y.........PQ..
    2720: E6 43 B0 33 E6 42 B0 05 E6 42 E4 61 8A E0 0C 03  // .C.3.B...B.a....
    2730: E6 61 8A C4 B9 C8 00 E8 6D 18 E6 61 59 58 C3 00  // .a......m..aYX..
    2740: 1E 56 0E 1F 80 3E 02 00 80 76 05 C6 06 02 00 80  // .V...>...v......
    2750: 8A 0E 02 00 C1 E1 09 FC C6 06 21 00 00 33 F6 32  // ..........!..3.2
    2760: E4 AC 02 E0 E2 FB F6 D4 FE C4 88 26 21 00 5E 1F  // ...........&!.^.
    2770: C3 00 57 0B C0 75 0F E8 28 08 74 25 E8 24 00 F6  // ..W..u..(.t%.$..
    2780: C3 04 74 F3 EB 11 8B C8 E8 04 15 23 C1 74 12 E8  // ..t........#.t..
    2790: 11 00 F6 C3 04 74 0A 5F 8D 5C 28 E8 91 05 0B F6  // .....t._.\(.....
    27A0: C3 5F C3 50 E8 DD 07 E8 56 14 0A C9 74 11 E8 DA  // ._.P....V...t...
    27B0: 11 3C 00 75 1F E8 CB 01 8A EB F6 C5 04 74 15 8D  // .<.u.........t..
    27C0: 9C A6 00 E8 BB 1B 0A C0 74 0A E8 88 04 74 05 33  // ........t....t.3
    27D0: C9 E8 51 05 E8 AC 01 58 C3 51 B9 5F 00 E8 76 17  // ..Q....X.Q._..v.
    27E0: 59 C3 51 E8 1A 00 75 14 E8 69 01 3C 01 75 0D B9  // Y.Q...u..i.<.u..
    27F0: 20 00 E8 27 00 75 05 80 C9 01 EB 02 33 C9 59 C3  //  ..'.u......3.Y.
    2800: 53 E8 7D 1B 66 3D 00 FF FF FF 75 0E 83 C3 04 E8  // S.}.f=....u.....
    2810: 6F 1B 66 3D FF FF FF 00 75 00 5B C3 50 52 32 D2  // o.f=....u.[.PR2.
    2820: E8 5E 1B 02 D0 02 D4 66 C1 E8 10 02 D0 02 D4 83  // .^.....f........
    2830: C3 04 E2 EC 0A D2 5A 58 C3 E8 48 07 8D 9C A4 01  // ......ZX..H.....
    2840: E8 E9 00 A9 DD 0F 74 52 E8 38 01 F6 C3 08 74 0C  // ......tR.8....t.
    2850: 8D 5C 28 E8 DD 00 75 04 E8 62 00 C3 B5 02 E8 FC  // .\(...u..b......
    2860: 00 E8 1F 01 F6 C3 04 74 21 8D 5C 28 E8 22 01 E8  // .......t!.\(."..
    2870: 6D 03 74 05 B5 03 E8 E4 00 E8 41 04 E8 FA 00 80  // m.t.......A.....
    2880: FD 00 75 38 B5 02 E8 E6 00 C3 8D 9C C0 01 B8 00  // ..u8............
    2890: 55 E8 73 0D B5 02 E8 D6 00 C3 A9 02 00 74 1D B5  // U.s..........t..
    28A0: 04 E8 B9 00 E8 DC 00 8D 5C 28 E8 E4 00 E8 67 18  // ........\(....g.
    28B0: E8 BC 00 8D 5C 28 E8 D8 00 E8 01 04 C3 B5 01 E8  // ....\(..........
    28C0: 9B 00 B5 02 E8 A8 00 E8 B9 00 F6 C3 04 75 10 8D  // .............u..
    28D0: 9C C0 01 B8 00 55 E8 2E 0D B5 02 E8 17 00 C3 E8  // .....U..........
    28E0: AF 00 B5 02 8D 5C 28 E8 57 00 75 02 B5 01 E8 04  // .....\(.W.u.....
    28F0: 00 E8 C9 03 C3 8D 9C AC 02 B1 02 E8 27 1A B5 02  // ............'...
    2900: E8 6C 00 C3 8D 9C A4 01 E8 21 00 E8 75 00 F6 C3  // .l.......!..u...
    2910: 04 74 12 8D 5C 28 E8 78 00 E8 5D 00 E8 63 07 8D  // .t..\(.x..]..c..
    2920: 5C 28 E8 FE 17 B8 02 00 E8 0E FF C3 B9 48 00 E8  // \(...........H..
    2930: 24 16 C3 53 81 C3 05 01 E8 46 1A 24 06 3C 02 5B  // $..S.....F.$.<.[
    2940: C3 E8 10 00 3D 01 04 75 0A 53 83 C3 18 E8 31 1A  // ....=..u.S....1.
    2950: 5B A8 01 C3 53 83 C3 12 E8 26 1A 5B C3 8D 9C AC  // [...S....&.[....
    2960: 02 32 C9 E8 BF 19 C3 8D 9C AC 02 E8 13 1A C3 8D  // .2..............
    2970: 9C AC 02 B1 01 E8 AD 19 C3 8D 9C AC 02 B1 01 E8  // ................
    2980: BB 19 C3 66 50 8D 9C A0 01 E8 F5 19 8A D8 66 58  // ...fP.........fX
    2990: C3 55 57 51 B9 08 00 BD 00 00 BB 08 00 2B D9 D1  // .UWQ.........+..
    29A0: E3 8D 58 4E E8 DA 19 E8 E3 01 E2 EE 8D 5C 4B E8  // ..XN.........\K.
    29B0: CF 19 B9 03 00 8B D0 BF 09 2A 85 55 06 74 17 66  // .........*.U.t.f
    29C0: 8B 05 8D 9A 4C 02 E8 18 19 8B 45 04 8D 9A 50 02  // ....L.....E...P.
    29D0: E8 26 19 83 C5 08 83 C7 08 E2 DF 8D 7C 5E B9 04  // .&..........|^..
    29E0: 00 33 ED 8B DF E8 99 19 0B C0 74 09 E8 5D 01 E8  // .3........t..]..
    29F0: 97 00 83 C5 1C 83 C7 12 E2 E9 55 32 ED E8 6F FF  // ..........U2..o.
    2A00: 8D 5C 28 E8 4E FF 3D 01 04 75 10 83 C3 14 E8 70  // .\(.N.=..u.....p
    2A10: 19 24 70 C0 E8 04 8A E8 E8 54 FF 5D 8D 9C A6 00  // .$p......T.]....
    2A20: E8 5E 19 0A C0 74 46 8D 9C A8 00 E8 53 19 3C 02  // .^...tF.....S.<.
    2A30: 75 3B 66 C1 E8 10 3C 04 72 33 8D 9C A8 00 32 E4  // u;f...<.r3....2.
    2A40: 03 D8 8B FB B9 04 00 8B DF E8 35 19 0B C0 74 15  // ..........5...t.
    2A50: E8 F9 00 A9 80 00 75 0D E8 2E 00 83 C5 1C 55 58  // ......u.......UX
    2A60: 83 F8 70 73 08 83 C7 12 49 0B C9 75 DA 59 5F 5D  // ..ps....I..u.Y_]
    2A70: C3 20 03 58 02 3C 00 01 00 00 04 00 03 3C 00 00  // . .X.<.......<..
    2A80: 08 80 02 E0 01 3C 00 20 00 51 8D 1D E8 F2 18 8D  // .....<. .Q......
    2A90: 9A C0 01 E8 63 18 8D 5D 02 E8 E5 18 8D 9A C2 01  // ....c..]........
    2AA0: E8 89 00 8D 5D 05 E8 D8 18 8D 9A C6 01 E8 7C 00  // ....].........|.
    2AB0: 8D 5D 08 E8 CB 18 8B C8 8A DC 66 C1 C8 10 8A D0  // .]........f.....
    2AC0: 80 E2 0F 8A F0 C0 EE 04 8A EC C0 ED 06 8A FC C0  // ................
    2AD0: EF 04 80 E7 03 80 E4 0F C0 E4 04 0A D4 80 E2 3F  // ...............?
    2AE0: 80 E4 C0 C0 EC 02 0A F4 8B C3 8D 9A CC 01 E8 08  // ................
    2AF0: 18 8D 9A CA 01 8B C1 E8 FF 17 8D 9A CE 01 33 C0  // ..............3.
    2B00: 8A C6 E8 F4 17 8D 9A D0 01 33 C0 8A C2 E8 E9 17  // .........3......
    2B10: 8D 5D 0C E8 6B 18 8D 9A D2 01 E8 0F 00 8D 5D 0F  // .]..k.........].
    2B20: E8 5E 18 8D 9A D6 01 E8 CF 17 59 C3 8B C8 8A D4  // .^........Y.....
    2B30: 66 C1 C8 10 8A F0 80 E6 0F 8A E8 C0 ED 04 8B C1  // f...............
    2B40: E8 B6 17 83 C3 02 8B C2 E8 AE 17 C3 8D 5D 11 E8  // .............]..
    2B50: 2F 18 8A E0 BA 06 00 C0 E8 07 74 03 80 CA 80 8A  // /.........t.....
    2B60: C4 C0 E8 03 24 03 3C 02 75 03 80 CA 40 3C 03 75  // ....$.<.u...@<.u
    2B70: 12 8A C4 D0 E8 A8 01 74 03 80 E2 FD A8 02 74 03  // .......t......t.
    2B80: 80 E2 FB 8B C2 8D 9A D8 01 E8 6D 17 C3 3C 01 74  // ..........m..<.t
    2B90: 3D 8B D0 0F B6 C6 24 3F 04 3C 8D 9A 50 02 E8 58  // =.....$?.<..P..X
    2BA0: 17 0F B6 C2 83 C0 1F C1 E0 03 8D 9A 4C 02 E8 48  // ............L..H
    2BB0: 17 0F B6 DE C1 EB 06 C1 E3 02 2E F7 A7 69 2B 2E  // .............i+.
    2BC0: F7 B7 67 2B 8D 9A 4E 02 E8 2E 17 83 C5 08 C3 10  // ..g+..N.........
    2BD0: 00 0A 00 04 00 03 00 05 00 04 00 10 00 09 00 8D  // ................
    2BE0: 9C A6 00 E8 9B 17 0A C0 74 1F 8D 9C A8 00 51 B1  // ........t.....Q.
    2BF0: 03 E8 18 00 59 0B DB 74 10 E8 85 17 32 C0 66 3D  // ....Y..t....2.f=
    2C00: 00 03 0C 00 75 03 0B DB C3 33 DB C3 66 50 52 E8  // ....u....3..fPR.
    2C10: 6F 17 3C 02 75 39 80 FC 03 72 34 66 C1 E8 10 32  // o.<.u9...r4f...2
    2C20: E4 3C 04 76 2A 03 C3 8B D0 83 C3 04 3B DA 73 1F  // .<.v*.......;.s.
    2C30: E8 4E 17 8A E0 80 E4 E0 C0 EC 05 24 1F 38 CC 74  // .N.........$.8.t
    2C40: 08 32 E4 FE C0 03 D8 EB E3 0B DB 5A 66 58 C3 33  // .2.........ZfX.3
    2C50: DB 5A 66 58 C3 51 8D 9C A6 00 E8 24 17 0A C0 74  // .ZfX.Q.....$...t
    2C60: 1B 8D 9C A8 00 B1 12 E8 18 00 74 10 E8 12 17 66  // ..........t....f
    2C70: C1 E8 10 80 E4 07 75 04 B0 01 EB 02 32 C0 0A C0  // ......u.....2...
    2C80: 59 C3 66 50 52 E8 F9 16 3C 70 75 2B 66 C1 E8 10  // Y.fPR...<pu+f...
    2C90: 32 E4 83 C3 05 03 C3 8B D0 3B DA 73 1A E8 E1 16  // 2........;.s....
    2CA0: 38 C8 74 0D 66 C1 E8 10 32 E4 83 C0 03 03 D8 EB  // 8.t.f...2.......
    2CB0: E8 0B DB 5A 66 58 C3 33 DB 5A 66 58 C3 57 66 51  // ...ZfX.3.ZfX.WfQ
    2CC0: 8D 9C C0 01 8B FB 8B DF E8 3D 00 0B C9 74 0B 66  // .........=...t.f
    2CD0: 8B D1 E8 E0 0B 83 C7 1C EB EC 66 59 5F C3 50 53  // ..........fY_.PS
    2CE0: 51 B9 07 00 53 8B DA E8 97 16 83 F8 00 5B 74 09  // Q...S........[t.
    2CF0: 66 C1 E3 10 8B DA E8 72 12 59 5B 58 C3 51 53 B9  // f......r.Y[X.QS.
    2D00: 07 00 E8 7F 12 5B 59 C3 66 50 53 83 C3 06 E8 70  // .....[Y.fPS....p
    2D10: 16 5B 8B C8 66 C1 E1 10 53 83 C3 02 E8 62 16 8B  // .[..f...S....b..
    2D20: C8 5B 66 58 C3 8D 9C A0 01 32 C9 E8 F7 15 C3 57  // .[fX.....2.....W
    2D30: B9 20 00 E8 5A 12 5F C3 53 51 E8 19 00 32 E4 8A  // . ..Z._.SQ...2..
    2D40: C5 C1 E0 02 59 8D 9C 78 01 03 D8 E8 33 16 5B C3  // ....Y..x....3.[.
    2D50: B1 02 E8 07 00 C3 B1 01 E8 01 00 C3 53 8D 9C 98  // ............S...
    2D60: 01 E8 D9 15 5B C3 33 C9 E8 B3 12 75 3C 66 BA 22  // ....[.3....u<f."
    2D70: F0 FF FF 66 33 C0 E8 46 03 33 C0 E8 24 02 74 1C  // ...f3..F.3..$.t.
    2D80: A9 DD 0F 74 F6 E8 1B FA F6 C3 04 75 05 F6 C3 18  // ...t.......u....
    2D90: 74 E9 E8 1F 00 50 E8 A0 FA 58 EB DF E8 0B 00 75  // t....P...X.....u
    2DA0: 08 E8 20 00 8B C1 E8 90 FA C3 66 50 E8 29 03 8B  // .. .......fP.)..
    2DB0: C8 66 58 C3 66 52 66 BA FF FF FF FF 33 D0 E8 FE  // .fX.fRf.....3...
    2DC0: 02 66 5A C3 50 53 52 E8 E0 FF 75 13 B9 08 00 E8  // .fZ.PSR...u.....
    2DD0: BD 0E 23 C8 75 19 33 C0 E8 C7 01 8B C8 EB 10 83  // ..#.u.3.........
    2DE0: F9 02 74 0B E8 7B 06 80 FB 01 75 03 83 E1 FD 5A  // ..t..{....u....Z
    2DF0: 5B 58 C3 56 66 33 C0 66 BA 00 F0 FF FF E8 9E 05  // [X.Vf3.f........
    2E00: 66 C1 E6 10 E8 A8 01 0B C0 74 03 E8 05 00 E8 7E  // f........t.....~
    2E10: 05 5E C3 50 51 E8 6C 01 50 32 C0 E8 90 02 E8 CC  // .^.PQ.l.P2......
    2E20: 00 E8 7F 00 8D 9C 08 03 E8 56 15 38 E8 74 0A 8A  // .........V.8.t..
    2E30: C5 E8 AD 14 B0 02 E8 75 02 58 E8 79 00 66 51 8D  // .......u.X.y.fQ.
    2E40: 9C A4 01 E8 3B 15 66 8B C8 8B D3 8D 9C D0 02 E8  // ....;.f.........
    2E50: 2F 15 66 3B C1 75 16 53 8D 9C AA 01 E8 22 15 8B  // /.f;.u.S....."..
    2E60: C8 8D 9C D6 02 E8 19 15 3B C1 5B 74 05 B0 02 E8  // ........;.[t....
    2E70: 3C 02 66 59 E8 67 FE E8 FF 01 66 25 FF 0F 00 00  // <.fY.g....f%....
    2E80: 59 58 66 BA FF FF FF FF 33 D0 E8 11 05 33 D2 C3  // YXf.....3....3..
    2E90: 53 66 50 8D 9C C8 02 E8 E7 14 8A C4 E8 42 14 66  // SfP..........B.f
    2EA0: 58 5B C3 53 66 50 8D 9C C8 02 E8 D4 14 8A E0 E8  // X[.SfP..........
    2EB0: 2F 14 66 58 5B C3 8D 9C C8 02 E8 C4 14 32 C0 E8  // /.fX[........2..
    2EC0: 1F 14 C3 66 52 52 32 ED 83 C1 02 B8 06 00 F7 E1  // ...fRR2.........
    2ED0: 66 33 C9 8B C8 5A 51 66 8B C2 8A CF 66 F7 E1 66  // f3...ZQf....f..f
    2EE0: C1 E0 03 59 66 F7 F1 66 8B C8 66 5A C3 53 E8 48  // ...Yf..f..fZ.S.H
    2EF0: 01 66 C1 E2 10 E8 36 01 8D 9C 98 01 E8 82 14 8A  // .f....6.........
    2F00: E8 8D 9C AC 02 E8 79 14 8A C8 E8 9E 0B 8A EB 5B  // ......y........[
    2F10: C3 57 53 53 E8 D6 FF E8 14 01 5B E8 B0 0B 74 61  // .WSS......[...ta
    2F20: 80 FD 00 75 29 53 E8 0F FE 66 8B D0 E8 4A FA 8A  // ...u)S...f...J..
    2F30: CD 51 E8 1B FE 8A FD 59 E8 88 FF 5B E8 42 14 66  // .Q.....Y...[.B.f
    2F40: 25 FF FF 00 00 66 3B C8 73 34 32 DB EB 33 80 FD  // %....f;.s42..3..
    2F50: 02 75 11 E8 2C 01 8D 1F E8 26 14 3D 74 40 76 1E  // .u..,....&.=t@v.
    2F60: 32 DB EB 1D 80 FD 03 75 15 53 E8 C1 00 B3 03 E8  // 2......u.S......
    2F70: 18 0B 5B E8 0B 14 3B C2 76 04 32 DB EB 03 80 CB  // ..[...;.v.2.....
    2F80: 01 5B 5F C3 53 8B F0 E8 05 0D 23 F0 74 09 8B C6  // .[_.S.....#.t...
    2F90: E8 89 0B 8B F3 0B DB 5B C3 51 E8 27 FE E8 0F 00  // .......[.Q.'....
    2FA0: 59 C3 51 50 E8 E8 0C 8B C8 58 E8 02 00 59 C3 57  // Y.QP.....X...Y.W
    2FB0: 53 E8 97 0E 0B C0 74 09 8B 1D 83 C7 02 3B C3 75  // S.....t......;.u
    2FC0: F7 8B 1D 83 FB FF 74 0B 83 C7 02 85 D9 74 F2 8B  // ......t......t..
    2FD0: C3 EB 02 33 C0 0B C0 5B 5F C3 33 C0 E8 C3 FF 74  // ...3...[_.3....t
    2FE0: 13 E8 A0 FF 8B DE B9 00 01 E8 6A 0F 83 C6 08 E8  // ..........j.....
    2FF0: 4D 0C EB E8 BB F0 46 B8 5A A5 E8 FC 12 C3 53 66  // M.....F.Z.....Sf
    3000: 50 8D 9C 08 03 E8 79 13 8A E8 66 58 5B C3 53 66  // P.....y...fX[.Sf
    3010: 50 8D 9C C8 02 E8 69 13 8A C8 66 58 5B C3 53 66  // P.....i...fX[.Sf
    3020: 50 8D 9C C9 02 E8 59 13 8A C8 66 58 5B C3 53 8D  // P.....Y...fX[.S.
    3030: 5C 14 E8 4C 13 8B D0 5B C3 53 66 50 8D 5C 16 E8  // \..L...[.SfP.\..
    3040: 3F 13 8B D0 66 58 5B C3 53 66 50 8D 9C 18 03 E8  // ?...fX[.SfP.....
    3050: 2F 13 66 8B D0 66 58 5B C3 53 66 50 8D 9C 1C 03  // /.f..fX[.SfP....
    3060: E8 1E 13 66 8B D0 66 58 5B C3 53 66 50 8D 5C 10  // ...f..fX[.SfP.\.
    3070: E8 0E 13 8B C8 66 58 5B C3 53 8D 5C 08 E8 01 13  // .....fX[.S.\....
    3080: 5B C3 53 66 50 8D 5C 0C E8 F6 12 8B D0 66 58 5B  // [.SfP.\......fX[
    3090: C3 8D 5C 04 E8 EA 12 C3 51 8D 5C 04 32 C9 E8 84  // ..\.....Q.\.2...
    30A0: 12 59 C3 8D 9C 18 03 66 8B C2 E8 34 12 C3 53 51  // .Y.....f...4..SQ
    30B0: 8A E8 E8 DC FF 24 FD 0A E8 E8 DC FF 59 5B C3 53  // .....$......Y[.S
    30C0: 66 50 51 66 8B C8 BB 00 00 E8 2C 0A 23 C2 0B C1  // fPQf......,.#...
    30D0: E8 2E 0A 59 66 58 5B C3 BB 00 00 E8 1A 0A 66 25  // ...YfX[.......f%
    30E0: DF 0F 00 00 C3 80 FA 14 C3 E8 48 0E E8 D6 0D E8  // ..........H.....
    30F0: B4 0D 75 06 E8 AA 0B E8 B8 0D C3 B0 01 C3 55 B3  // ..u...........U.
    3100: 01 E8 3B 10 5D C3 66 53 66 BB 04 00 00 00 E8 05  // ..;.].fSf.......
    3110: 00 33 C0 66 5B C3 55 66 C1 E3 10 BB 00 00 E8 1E  // .3.f[.Uf........
    3120: 10 5D C3 E8 D6 0E BB 0A 00 E8 D5 09 C3 BB 0A 00  // .]..............
    3130: E8 C5 09 66 8B C8 E8 C3 0E BB 0A 00 66 2B C1 E8  // ...f........f+..
    3140: BF 09 C3 E8 29 00 0B C9 74 22 E8 A6 FC E8 2A 07  // ....)...t"....*.
    3150: 66 51 66 8B C8 BB 07 00 E8 9D 09 66 25 00 FE 00  // fQf........f%...
    3160: 00 66 0B C1 E8 9A 09 66 59 0C 01 C3 32 C0 C3 E8  // .f.....fY...2...
    3170: 49 02 0B C9 75 06 E8 4B FC E8 4F 02 51 E8 44 FC  // I...u..K..O.Q.D.
    3180: 66 C1 E6 10 33 C0 E8 10 FE 74 09 E8 F4 02 75 F6  // f...3....t....u.
    3190: 33 C8 EB F2 58 23 C8 66 C1 EE 10 C3 A8 10 75 63  // 3...X#.f......uc
    31A0: E8 E9 06 66 C1 E6 10 33 C0 E8 F6 FD 74 35 E8 D3  // ...f...3....t5..
    31B0: FD 50 51 8B C8 E8 D7 01 85 C1 59 58 74 0D 50 E8  // .PQ.......YXt.P.
    31C0: CF FE 24 03 3C 03 58 75 E0 EB 0C 50 E8 C2 FE A8  // ..$.<.Xu...P....
    31D0: 01 58 74 D5 E8 CC FC 50 E8 91 07 58 B5 00 E8 B7  // .Xt....P...X....
    31E0: FE EB C6 E8 A9 01 E8 9B FD E8 13 01 B1 00 E8 4B  // ...............K
    31F0: 07 66 C1 EE 10 E8 8D 06 A8 20 75 3B A8 40 75 03  // .f....... u;.@u.
    3200: E8 1F 08 E8 74 06 0A C0 75 00 E8 82 01 E8 74 FD  // ....t...u.....t.
    3210: E8 6F FE E8 CF FE 75 14 E8 47 02 0A DB 74 0D E8  // .o....u..G...t..
    3220: 81 FC E8 47 07 B5 00 E8 6E FE EB 08 E8 2E 07 B5  // ...G....n.......
    3230: 01 E8 64 FE E8 CE 00 C3 E8 54 0A C3 E8 9B FD E8  // ..d......T......
    3240: AC 06 33 C9 E8 84 01 66 33 D2 66 33 C0 E8 6F FE  // ..3....f3.f3..o.
    3250: E8 83 07 E8 52 00 B1 FF E8 77 00 33 C0 E8 42 FD  // ....R....w.3..B.
    3260: 74 0A E8 1F FD 50 E8 21 07 58 EB F1 32 C9 E8 A6  // t....P.!.X..2...
    3270: 01 E8 1B 0A 0B C0 C3 E8 60 FD E8 71 06 66 33 C0  // ........`..q.f3.
    3280: 66 BA 00 F0 FF FF E8 15 01 51 B1 01 E8 6E 01 59  // f........Q...n.Y
    3290: E8 56 07 33 C0 E8 0A FD 74 0A E8 E7 FC 50 E8 DA  // .V.3....t....P..
    32A0: 06 58 EB F1 E8 00 07 C3 B8 02 00 E8 D6 FC 74 21  // .X............t!
    32B0: B8 02 00 E8 ED F4 F6 C3 04 75 0A E8 D1 09 83 E0  // .........u......
    32C0: FD E8 D4 09 C3 66 B8 02 00 00 00 E8 F1 FD E8 33  // .....f.........3
    32D0: F6 C3 E8 35 08 74 13 BB 02 00 E8 1B 08 8A E1 E8  // ...5.t..........
    32E0: 1F 08 E8 DA 06 0C 01 C3 0C 01 C3 51 E8 1B 08 74  // ...........Q...t
    32F0: 0C 8A CC BB 02 00 E8 FF 07 8A C4 8A E1 59 C3 B0  // .............Y..
    3300: 01 E8 16 06 C3 B0 00 E8 10 06 C3 E8 10 0D 75 18  // ..............u.
    3310: E8 7C 00 E8 6E FC 80 F9 01 75 0E 51 E8 3E 06 B5  // .|..n....u.Q.>..
    3320: 01 E8 74 FD 59 E8 DD FF C3 E8 D3 FF 51 E8 4B 06  // ..t.Y.......Q.K.
    3330: B5 00 E8 63 FD 59 C3 B8 02 00 E8 47 FC 74 03 E8  // ...c.Y.....G.t..
    3340: 6F 06 C3 E8 D3 04 3B C1 7C 35 8B C1 E8 13 05 E8  // o.....;.|5......
    3350: 29 07 8B C8 51 E8 43 05 E8 07 05 59 E8 1C 07 3B  // )...Q.C....Y...;
    3360: C8 72 02 8B C1 8D 5C 04 E8 8E 0F 32 C9 E8 DD 0B  // .r....\....2....
    3370: FE C1 38 C1 72 F7 8D 5C 04 E8 05 10 0B C0 C3 33  // ..8.r..\.......3
    3380: C0 C3 BB 00 48 33 C0 8A C2 C1 E0 02 03 D8 C3 53  // ....H3.........S
    3390: BB 03 00 E8 62 07 66 25 FF 0F 00 00 5B C3 53 66  // ....b.f%....[.Sf
    33A0: 50 66 51 66 8B C8 BB 03 00 E8 4C 07 66 23 C2 66  // PfQf......L.f#.f
    33B0: 0B C1 E8 4C 07 66 59 66 58 5B C3 66 50 BB 05 00  // ...L.fYfX[.fP...
    33C0: E8 35 07 25 FF 0F 8B C8 66 58 C3 E8 C1 08 23 C8  // .5.%....fX....#.
    33D0: 66 50 BB 05 00 E8 20 07 25 00 F0 0B C1 E8 21 07  // fP.... .%.....!.
    33E0: 66 58 C3 66 50 53 BB 06 00 E8 0C 07 A8 10 75 09  // fX.fPS........u.
    33F0: BB F0 46 E8 8B 0F 3D 5A A5 5B 66 58 C3 66 50 53  // ..F...=Z.[fX.fPS
    3400: BB 06 00 E8 F2 06 80 F1 01 C0 E1 04 24 EF 0A C1  // ............$...
    3410: E8 EE 06 5B 66 58 C3 53 66 50 BB F8 46 E8 61 0F  // ...[fX.SfP..F.a.
    3420: 8A C1 E8 BC 0E 66 58 5B C3 53 BB F8 46 E8 51 0F  // .....fX[.S..F.Q.
    3430: 83 E0 01 5B C3 53 66 50 BB 07 00 E8 BA 06 F6 C4  // ...[.SfP........
    3440: 01 66 58 B0 06 74 02 B0 08 5B C3 53 BB 07 00 E8  // .fX..t...[.S....
    3450: A6 06 80 E4 FE 80 FD 06 74 03 80 CC 01 E8 A1 06  // ........t.......
    3460: 5B C3 66 50 BB 06 00 E8 8E 06 24 40 C0 E8 06 8A  // [.fP......$@....
    3470: D8 66 58 C3 B3 81 E8 BB 0C 75 04 83 C8 01 C3 33  // .fX......u.....3
    3480: C0 C3 50 66 51 E8 FC FA 83 EC 04 8B EC 66 33 C0  // ..PfQ........f3.
    3490: 66 89 46 00 33 D2 8D BC C0 01 8D 1D E8 E2 0E 0B  // f.F.3...........
    34A0: C0 74 3D 8B DF B0 00 E8 2D 01 74 2F 8B DF E8 57  // .t=.....-.t/...W
    34B0: F8 66 8B 46 00 3B C8 7F 10 72 20 66 C1 C8 10 66  // .f.F.;...r f...f
    34C0: C1 C9 10 3B C8 7F 0E EB 12 66 C1 C8 10 66 C1 C9  // ...;.....f...f..
    34D0: 10 3B C8 72 06 8B D7 66 89 4E 00 83 C7 1C EB BA  // .;.r...f.N......
    34E0: 0B D2 74 0A 8D 9C A4 01 E8 F3 F7 E9 88 00 66 33  // ..t...........f3
    34F0: C0 66 89 46 00 8D BC 4C 02 33 D2 8D 1D E8 81 0E  // .f.F...L.3......
    3500: 0B C0 74 58 66 50 E8 5E F4 3C 01 66 58 74 05 3D  // ..tXfP.^.<.fXt.=
    3510: 40 06 73 43 66 52 66 8B D0 8D 5D 04 E8 62 0E E8  // @.sCfRf...]..b..
    3520: 5D 00 8B CA 66 5A 74 2F 56 8D 9C A4 01 8B F1 E8  // ]...fZt/V.......
    3530: CB F7 5E B0 00 E8 9F 00 74 1D 8D 1D E8 42 0E 8B  // ..^.....t....B..
    3540: D9 8B 47 06 66 C1 E0 10 8B 47 02 66 3B 46 00 72  // ..G.f....G.f;F.r
    3550: 06 8B D1 66 89 46 00 83 C7 08 EB 9F 0B D2 74 16  // ...f.F........t.
    3560: 56 8D 9C A4 01 8B F2 E8 93 F7 5E 53 8D 9C BA 01  // V.........^S....
    3570: 33 C0 E8 84 0D 5B 83 C4 04 0B D2 66 59 58 C3 57  // 3....[.....fYX.W
    3580: 53 51 E8 ED 08 3B 55 02 75 18 66 C1 CA 10 8B DA  // SQ...;U.u.f.....
    3590: 66 C1 CA 10 3B 5D 06 75 09 0A C0 74 0E 3A 45 1B  // f...;].u...t.:E.
    35A0: 74 09 83 C7 1C E2 DE 33 D2 EB 02 8B D7 0B D2 59  // t......3.......Y
    35B0: 5B 5F C3 51 66 52 E8 B9 08 3A 65 1A 75 09 0A C0  // [_.QfR...:e.u...
    35C0: 74 0E 3A 45 1B 74 09 83 C7 1C E2 ED 33 FF EB 00  // t.:E.t......3...
    35D0: 0B FF 66 5A 59 C3 C3 66 51 66 52 53 53 66 C1 CE  // ..fZY..fQfRSSf..
    35E0: 10 8B DE 66 C1 CE 10 E8 97 0D 5B 66 8B D0 E8 17  // ...f......[f....
    35F0: F7 3B CA 72 0A 66 3B CA 72 05 E8 14 F9 75 02 32  // .;.r.f;.r....u.2
    3600: C0 5B 66 5A 66 59 C3 56 57 E8 A7 FF 8B F7 E8 EC  // .[fZfY.VW.......
    3610: F6 5F 5E C3 66 50 53 66 51 52 57 56 51 8B DE B9  // ._^.fPSfQRWVQ...
    3620: 08 00 E8 31 09 59 8D 5C 08 8B C1 66 C1 E0 10 8A  // ...1.Y.\...f....
    3630: C2 E8 AD 0C F6 C2 03 75 24 8B C1 24 7F BF F7 36  // .......u$..$...6
    3640: 80 3D FF 0F 84 0F 01 3A 05 75 0D 66 8B 45 01 66  // .=.....:.u.f.E.f
    3650: B9 00 05 02 00 E9 96 00 83 C7 05 EB E3 F6 C2 01  // ................
    3660: 74 25 8B C1 E8 70 01 0F 84 EB 00 33 C9 8A CC 8A  // t%...p.....3....
    3670: D0 0A C0 75 12 8D 5C 08 66 25 FF FF 00 00 66 C1  // ...u..\.f%....f.
    3680: E0 08 E8 5C 0C EB B2 8A E1 8A CA 80 E1 0C C0 E9  // ...\............
    3690: 02 80 E2 F0 C0 EA 04 8A EA 80 FC 70 72 2A 80 FC  // ...........pr*..
    36A0: 75 73 25 80 EC 70 8A C4 32 E4 50 E8 30 02 8B D8  // us%..p..2.P.0...
    36B0: 58 38 D8 72 05 33 C0 E9 9C 00 E8 28 02 E8 C1 0C  // X8.r.3.....(....
    36C0: 0B C0 0F 84 90 00 EB 1B 32 C0 E8 E6 FE 0F 84 85  // ........2.......
    36D0: 00 8D 5C 16 8B 05 E8 20 0C 8B 45 06 66 C1 E0 10  // ..\.... ..E.f...
    36E0: 8B 45 02 50 E8 94 03 66 C1 E1 10 8B C8 58 8D 1C  // .E.P...f.....X..
    36F0: E8 EE 0B 66 50 8D 5C 04 66 8B C1 E8 E3 0B 66 58  // ...fP.\.f.....fX
    3700: 66 C1 E8 10 66 81 E1 FF FF 00 00 66 F7 E1 66 50  // f...f......f..fP
    3710: 8D 5C 06 E8 6B 0C 8B C8 66 58 66 D3 E0 66 C1 E8  // .\..k...fXf..f..
    3720: 10 40 8D 5C 14 E8 D1 0B BF 57 37 83 F9 01 74 11  // .@.\.....W7...t.
    3730: BF 5F 37 81 F9 01 01 74 08 BF 67 37 83 F9 02 75  // ._7....t..g7...u
    3740: 15 8D 5C 0C 66 8B 05 E8 97 0B 8D 5C 10 66 8B 45  // ..\.f......\.f.E
    3750: 04 E8 8D 0B 0B DB 5E 5F 5A 66 59 5B 66 58 C3 00  // ......^_ZfY[fX..
    3760: 40 01 90 01 01 40 01 90 01 02 80 02 90 01 03 80  // @....@..........
    3770: 02 90 01 04 40 01 90 01 05 40 01 90 01 06 80 02  // ....@....@......
    3780: 90 01 07 D0 02 5E 01 0D 40 01 90 01 0E 80 02 90  // .....^..@.......
    3790: 01 0F 80 02 5E 01 10 80 02 5E 01 11 80 02 E0 01  // ....^....^......
    37A0: 12 80 02 E0 01 13 80 02 90 01 23 20 04 90 01 32  // ..........# ...2
    37B0: 20 04 B0 02 33 20 04 C0 02 62 80 02 E0 01 FF 05  //  ...3 ...b......
    37C0: 0A 05 05 05 00 00 00 05 0B 06 05 05 00 00 00 08  // ................
    37D0: 10 08 08 08 00 00 00 56 E8 2D 09 80 E4 01 3B 04  // .......V.-....;.
    37E0: 74 09 83 C6 04 E2 F7 33 C0 EB 05 8B 44 02 0B C0  // t......3....D...
    37F0: 5E C3 57 53 50 E8 10 09 83 E9 0A E8 E0 00 83 F8  // ^.WSP...........
    3800: 05 76 03 B8 05 00 D1 E0 03 C8 FB A5 83 C6 02 E2  // .v..............
    3810: FA B8 FF FF AB 58 5B 5F C3 66 53 51 66 52 E8 41  // .....X[_.fSQfR.A
    3820: 00 E8 77 00 66 C1 E8 10 66 0F B7 D8 66 B8 00 00  // ..w.f...f...f...
    3830: 00 03 66 D3 E8 66 33 D2 66 F7 F3 E8 3D 02 66 5A  // ..f..f3.f...=.fZ
    3840: 59 66 5B C3 53 66 50 BB 07 00 E8 AB 02 0A C0 66  // Yf[.SfP........f
    3850: 58 5B C3 53 66 50 BB 07 00 E8 9C 02 A8 01 66 58  // X[.SfP........fX
    3860: 5B C3 53 66 50 8D 5C 06 E8 16 0B 8A C8 66 58 5B  // [.SfP.\......fX[
    3870: C3 51 B9 08 00 E8 F3 06 59 C3 53 8D 5C 08 E8 00  // .Q......Y.S.\...
    3880: 0B 24 03 5B C3 8D 5C 09 E8 F6 0A C3 51 53 B1 01  // .$.[..\.....QS..
    3890: 8A E8 8D 5C 08 E8 8D 0A 5B 59 C3 53 8D 1C E8 E0  // ...\....[Y.S....
    38A0: 0A 5B C3 53 8D 5C 04 E8 D7 0A 5B C3 53 8D 5C 16  // .[.S.\....[.S.\.
    38B0: E8 CE 0A 5B C3 53 66 52 33 C0 E8 C2 FC 66 5A 75  // ...[.SfR3....fZu
    38C0: 1B E8 34 00 74 16 E8 15 00 40 83 F8 05 73 0D E8  // ..4.t....@...s..
    38D0: 0F 0A 48 E8 0F 00 66 8B C2 E8 05 0A 5B C3 BB 00  // ..H...f.....[...
    38E0: 4E E8 9D 0A C3 BB 08 4E C1 E0 03 03 D8 C3 BB 00  // N......N........
    38F0: 4E B9 32 00 E8 5F 06 C3 51 E8 E2 FF 0B C0 74 12  // N.2.._..Q.....t.
    3900: 8B C8 BB 08 4E E8 79 0A 66 3B C2 74 07 83 C3 08  // ....N.y.f;.t....
    3910: E2 F3 0B DB 59 C3 C3 00 C3 00 8A E8 BB 20 DF 3C  // ....Y........ .<
    3920: 01 74 02 32 DB E8 45 2A E8 E3 F6 66 B8 80 06 00  // .t.2..E*...f....
    3930: 08 66 33 DB 8A D9 8A CD E8 B8 00 C3 66 51 66 52  // .f3.........fQfR
    3940: 66 57 66 B8 80 05 00 08 66 BB 00 4C 00 00 66 33  // fWf.....f..L..f3
    3950: C9 8B CE E8 9D 00 66 5F 66 5A 66 59 C3 66 B8 80  // ......f_fZfY.f..
    3960: 07 00 04 66 33 DB 8B DE E8 88 00 C3 66 B8 80 08  // ...f3.......f...
    3970: 00 04 66 33 DB 8B DE E8 79 00 C3 66 B8 80 09 00  // ..f3....y..f....
    3980: 04 66 33 DB 8B DE E8 6A 00 C3 C3 66 B8 80 0A 00  // .f3....j...f....
    3990: 04 66 33 DB 8B DE E8 5A 00 E8 E7 EF F6 C3 02 74  // .f3....Z.......t
    39A0: 03 B0 00 C3 B0 01 C3 66 B8 80 0D 00 00 E8 43 00  // .......f......C.
    39B0: C3 66 B8 80 0F 00 04 66 33 DB 8A D9 E8 34 00 66  // .f.....f3....4.f
    39C0: B8 80 0F 00 04 66 33 DB 56 E8 76 04 03 74 04 8B  // .....f3.V.v..t..
    39D0: 1C 5E E8 1E 00 C3 66 B8 00 00 00 00 E8 14 00 66  // .^....f........f
    39E0: B8 80 0C 00 04 E8 0B 00 C3 66 B8 00 01 00 00 E8  // .........f......
    39F0: 01 00 C3 83 EC 1C 8B EC 66 89 46 00 66 89 5E 04  // ........f.F.f.^.
    3A00: 66 89 4E 08 66 89 56 0C 66 89 7E 10 66 89 76 14  // f.N.f.V.f.~.f.v.
    3A10: 8C D0 66 C1 E0 10 8B C4 BB 42 00 E8 67 04 83 C4  // ..f......B..g...
    3A20: 1C C3 51 8D 5C 14 E8 58 09 66 C1 E0 10 E8 02 00  // ..Q.\..X.f......
    3A30: 59 C3 83 EC 10 8B EC 66 3D F0 FF FF 03 76 06 66  // Y......f=....v.f
    3A40: B8 F0 FF FF 03 66 8B C8 66 33 C0 66 89 46 04 66  // .....f..f3.f.F.f
    3A50: 89 46 00 66 89 46 08 B0 01 88 46 09 66 B8 00 00  // .F.f.F....F.f...
    3A60: 00 D0 66 0B C1 66 89 46 0C 8C D0 66 C1 E0 10 8B  // ..f..f.F...f....
    3A70: C4 BB 35 00 E8 0E 04 83 C4 10 C3 3D C0 7F 76 04  // ..5........=..v.
    3A80: B8 C0 7F C3 83 C0 3F 24 C0 C3 53 51 66 50 B9 68  // ......?$..SQfP.h
    3A90: 74 80 FB 03 74 0B B9 A0 8C 80 FB 00 75 03 B9 78  // t...t.......u..x
    3AA0: 69 66 33 D2 8B D1 66 58 59 5B C3 66 52 B3 00 66  // if3...fXY[.fR..f
    3AB0: F7 C2 00 00 FF FF 75 13 80 FD 13 74 0E 80 FD 14  // ......u....t....
    3AC0: 74 09 B3 03 80 F9 03 74 02 B3 02 66 5A C3 E8 B0  // t......t...fZ...
    3AD0: 08 66 C1 E8 10 0B C0 74 1C 53 83 C3 06 E8 A1 08  // .f.....t.S......
    3AE0: 5B 3D E0 01 72 0F 53 83 C3 18 E8 94 08 5B A8 80  // [=..r.S......[..
    3AF0: 75 03 0C 01 C3 32 C0 C3 53 83 C3 4C E8 50 08 5B  // u....2..S..L.P.[
    3B00: C3 53 83 C3 4C E8 A2 07 5B C3 56 E8 34 03 83 C6  // .S..L...[.V.4...
    3B10: 04 8A 64 10 8A 44 10 83 3C 00 5E C3 BB 00 50 83  // ..d..D..<.^...P.
    3B20: F8 02 74 32 BB 00 54 83 F8 08 74 2A BB 00 58 3D  // ..t2..T...t*..X=
    3B30: 80 00 74 22 BB 00 5C 3D 00 02 74 1A BB 00 60 3D  // ..t"..\=..t...`=
    3B40: 00 04 74 12 BB 00 64 3D 00 08 74 0A BB 00 68 83  // ..t...d=..t...h.
    3B50: F8 40 74 02 33 DB C3 57 E8 56 00 74 0A 8B 5D 02  // .@t.3..W.V.t..].
    3B60: E8 08 00 0B DB 5F C3 33 DB 5F C3 52 51 0B DB 74  // ....._.3._.RQ..t
    3B70: 1B 56 E8 B4 02 03 DE 5E 33 C9 8A 4F 01 80 3F FF  // .V.....^3..O..?.
    3B80: 74 08 3A 07 74 06 03 D9 EB F0 33 DB 0B DB 59 5A  // t.:.t.....3...YZ
    3B90: C3 56 51 E8 93 02 32 C9 8D 7C 08 3B 5D 04 74 0C  // .VQ...2..|.;].t.
    3BA0: 83 C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E  // .....:L.r.3...Y^
    3BB0: C3 56 51 E8 73 02 32 C9 8D 7C 08 3B 1D 74 0C 83  // .VQ.s.2..|.;.t..
    3BC0: C7 10 FE C1 3A 4C 06 72 F2 33 FF 0B FF 59 5E C3  // ....:L.r.3...Y^.
    3BD0: 56 51 E8 54 02 32 C9 8D 7C 08 3B 45 0C 74 0C 83  // VQ.T.2..|.;E.t..
    3BE0: C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3  // ....:L.r.3...Y^.
    3BF0: 57 50 E8 DB FF 8A C3 8B 5D 02 E8 6E FF 58 5F C3  // WP......]..n.X_.
    3C00: 53 32 C9 B3 01 E8 E8 FF 74 03 8A 4F 02 0A C9 5B  // S2......t..O...[
    3C10: C3 53 32 ED B3 02 E8 D7 FF 74 03 8A 6F 02 0A ED  // .S2......t..o...
    3C20: 5B C3 50 57 8B DA E8 68 FF 75 04 33 DB EB 0D B0  // [.PW...h.u.3....
    3C30: 14 8B 5D 08 E8 34 FF 74 F2 8B 5F 02 5F 58 C3 66  // ..]..4.t.._._X.f
    3C40: 50 53 51 57 8D 1C 66 25 FF FF 00 00 E8 92 06 8B  // PSQW..f%........
    3C50: D8 E8 3B 00 23 C3 74 31 E8 75 FF 0B FF 74 2A 66  // ..;.#.t1.u...t*f
    3C60: 50 66 8B 45 04 8D 5C 0C E8 76 06 66 33 C0 8B 05  // Pf.E..\..v.f3...
    3C70: 8D 5C 04 E8 6B 06 66 58 E8 85 FF E8 93 FF 8D 5C  // .\..k.fX.......\
    3C80: 08 66 33 C0 8B C1 E8 58 06 5F 59 5B 66 58 C3 56  // .f3....X._Y[fX.V
    3C90: E8 96 01 8B 44 04 5E C3 56 E8 8D 01 89 44 04 5E  // ....D.^.V....D.^
    3CA0: C3 E8 B3 01 8B F7 83 C6 38 BB 00 70 B9 23 00 E8  // ........8..p.#..
    3CB0: D2 02 E8 01 00 C3 51 66 57 56 E8 6C 01 66 33 FF  // ......QfWV.l.f3.
    3CC0: 8D 7C 08 33 C0 E8 D0 FF 32 C9 8B 15 B8 00 70 23  // .|.3....2.....p#
    3CD0: C2 3D 00 30 75 54 80 FA 15 74 0B E8 B1 FF 0B 45  // .=.0uT...t.....E
    3CE0: 0C E8 B4 FF EB 44 E8 5E 00 89 45 0C 0B C0 75 04  // .....D.^..E...u.
    3CF0: 89 05 EB 36 E8 98 FF 0B 45 0C E8 9B FF 83 7D 06  // ...6....E.....}.
    3D00: 00 74 16 E8 4A 00 89 45 06 0B C0 74 0C 83 7D 06  // .t..J..E...t..}.
    3D10: 00 74 06 8B 5C 0A E8 A0 00 E8 40 00 89 05 8B 5D  // .t..\.....@....]
    3D20: 02 E8 95 00 8B 5D 08 E8 B0 00 83 C7 10 FE C1 3A  // .....].........:
    3D30: 4C 06 72 96 5E 66 5F 59 C3 08 00 80 00 00 02 00  // L.r.^f_Y........
    3D40: 04 00 08 40 00 00 00 53 E8 3D 00 E8 33 06 5B C3  // ...@...S.=..3.[.
    3D50: 53 E8 34 00 83 C3 08 E8 27 06 5B C3 53 57 52 E8  // S.4.....'.[.SWR.
    3D60: 26 00 83 C3 04 E8 19 06 8B D0 5A 5F 5B C3 E8 EB  // &.........Z_[...
    3D70: FF 66 C1 E8 10 B4 11 E8 25 00 C3 E8 DE FF 66 C1  // .f......%.....f.
    3D80: E8 18 B4 10 E8 18 00 C3 51 52 33 C9 8A CE 80 E1  // ........QR3.....
    3D90: 07 49 B8 10 00 F7 E1 BB 14 70 03 D8 5A 59 C3 57  // .I.......p..ZY.W
    3DA0: 53 51 33 C9 8A C8 8A C4 BB 03 71 E8 A9 FD 83 C3  // SQ3.......q.....
    3DB0: 02 03 D9 8A 07 59 5B 5F C3 50 53 B0 01 E8 AB FD  // .....Y[_.PS.....
    3DC0: 74 15 E8 A9 FF 88 47 02 5B 53 B0 02 E8 9C FD 74  // t.....G.[S.....t
    3DD0: 06 E8 A7 FF 88 47 02 5B 58 C3 51 50 B0 14 E8 8A  // .....G.[X.QP....
    3DE0: FD 74 3A 53 E8 A1 FF 83 C3 0C E8 94 05 8B C8 5B  // .t:S...........[
    3DF0: F6 C1 01 74 05 66 83 67 02 FD F6 C1 80 74 05 66  // ...t.f.g.....t.f
    3E00: 83 67 02 F7 F7 C1 00 01 74 08 66 81 4F 02 00 01  // .g......t.f.O...
    3E10: 00 00 F7 C1 00 02 74 05 66 83 67 02 FB 58 59 C3  // ......t.f.g..XY.
    3E20: BF B0 01 8B 3D 8B 7D 0C C3 BE B0 01 8B 34 8B 74  // ....=.}......4.t
    3E30: 30 C3 1E 0E 1F BF B0 01 8B 3D 8B 7D 0E 83 C7 04  // 0........=.}....
    3E40: 1F C3 BE B0 01 8B 34 8B 74 10 C3 BF B0 01 8B 3D  // ......4.t......=
    3E50: 8B 7D 26 83 C7 04 C3 BF B0 01 8B 3D 8B 7D 40 C3  // .}&........=.}@.
    3E60: BE B0 01 8B 34 8B 74 1A C3 BE B0 01 8B 34 8B 74  // ....4.t......4.t
    3E70: 3A C3 BF B0 01 8B 3D 8B 7D 0A 83 C7 04 B9 0D 00  // :.....=.}.......
    3E80: C3 E8 01 00 CB 83 EC 06 8B EC 89 46 00 66 33 C0  // ...........F.f3.
    3E90: C6 46 04 00 89 46 02 06 52 8A D3 8B C5 E8 4F 17  // .F...F..R.....O.
    3EA0: 5A 07 83 C4 06 C3 E8 77 FF 66 F7 45 10 01 00 00  // Z......w.f.E....
    3EB0: 00 C3 50 E8 6A FF B8 01 00 09 45 10 58 C3 E8 5F  // ..P.j.....E.X.._
    3EC0: FF 88 45 10 C3 66 53 83 EC 48 8B EC 66 89 5E 00  // ..E..fS..H..f.^.
    3ED0: 66 89 4E 04 8C D0 66 C1 E0 10 8B C4 BB 00 00 E8  // f.N...f.........
    3EE0: A3 FF 83 C4 48 66 5B E8 49 01 E8 83 01 E8 0E 00  // ....Hf[.I.......
    3EF0: BB 04 00 E8 02 FC 66 C1 E8 10 E8 C1 FF C3 83 EC  // ......f.........
    3F00: 0C 8B EC 8C D0 66 C1 E0 10 8B C4 BB 16 00 E8 74  // .....f.........t
    3F10: FF 66 BB 00 00 00 00 83 C4 0C E8 03 FF 66 8B C3  // .f...........f..
    3F20: 66 C1 E8 08 66 89 45 28 66 8B C3 66 C1 E0 18 66  // f...f.E(f..f...f
    3F30: 89 45 2C C3 E8 E9 FE 66 8B 5D 08 66 8B 4D 0C C3  // .E,....f.].f.M..
    3F40: 56 E8 25 FF 66 8B 44 08 5E C3 B0 05 C3 B0 01 C3  // V.%.f.D.^.......
    3F50: B0 04 C3 B0 08 C3 53 66 50 66 33 C0 E8 82 03 83  // ......SfPf3.....
    3F60: C3 04 E2 F8 66 58 5B C3 32 C0 C3 FC E8 12 04 66  // ....fX[.2......f
    3F70: C1 CB 10 E8 6B 03 66 C1 CB 10 66 81 C3 04 00 04  // ....k.f...f.....
    3F80: 00 E2 E9 C3 FC 66 AD E8 57 03 83 C3 04 E2 F6 C3  // .....f..W.......
    3F90: FC E8 ED 03 66 AB 83 C3 04 E2 F6 C3 66 50 B8 30  // ....f.......fP.0
    3FA0: 00 E8 10 00 66 58 C3 66 50 B8 C0 5D D1 E1 E8 03  // ....fX.fP..]....
    3FB0: 00 66 58 C3 52 F7 E1 8B CA E8 DE 01 66 53 8B D9  // .fX.R.......fS..
    3FC0: 66 C1 E3 10 8B D8 66 B8 98 A8 05 00 B2 00 66 EF  // f.....f.......f.
    3FD0: B2 04 66 ED 33 C9 66 03 D8 73 0A 66 ED 66 A9 00  // ..f.3.f..s.f.f..
    3FE0: 00 00 80 75 F6 66 ED 66 3B C3 73 0C 66 C1 E8 10  // ...u.f.f;.s.f...
    3FF0: 3B C1 72 04 8B C8 EB ED 66 5B 5A C3 66 52 E8 99  // ;.r.....f[Z.fR..
    4000: 01 66 B8 98 A8 05 00 B2 00 66 EF B2 04 66 ED 66  // .f.......f...f.f
    4010: 33 D2 66 BB 30 00 00 00 66 F7 F3 66 5A C3 66 50  // 3.f.0...f..fZ.fP
    4020: 53 BB 07 00 E8 D1 FA 25 00 02 35 00 02 0B C0 5B  // S......%..5....[
    4030: 66 58 C3 66 51 B3 01 E8 05 01 E8 23 FE 66 33 C9  // fX.fQ......#.f3.
    4040: 8B 4C 08 66 C1 E0 0A 0B C9 75 03 B9 00 08 66 2B  // .L.f.....u....f+
    4050: C1 E8 0C FE 66 89 44 04 89 4C 08 66 59 C3 56 1E  // ....f.D..L.fY.V.
    4060: 0E 1F E8 FB FD 66 8B 44 04 66 C1 E0 0A 1F 5E C3  // .....f.D.f....^.
    4070: E8 C0 FF 06 E8 E0 FD 0E 07 66 BB 00 F8 1A 00 E8  // .........f......
    4080: DC FF 66 03 D8 E8 B8 03 66 3B 05 75 0F B9 00 01  // ..f.....f;.u....
    4090: FC E8 AC 03 66 AB 66 83 C3 04 E2 F5 E8 B8 FD BE  // ....f.f.........
    40A0: B0 01 8B 34 8B 74 14 8B 45 14 89 44 0C E8 92 FD  // ...4.t..E..D....
    40B0: 0B F6 74 2B 57 56 83 C7 20 83 C6 04 B9 02 00 8B  // ..t+WV.. .......
    40C0: 05 89 04 8B 45 02 89 44 02 8A 45 0C 88 44 0C 8A  // ....E..D..E..D..
    40D0: 45 0D 88 44 0D 8A 45 0E 88 44 0E 47 46 E2 E0 5E  // E..D..E..D.GF..^
    40E0: 5F E8 85 FD 0B F6 74 1E 8A 85 06 01 88 44 2F BB  // _.....t......D/.
    40F0: 04 71 B0 09 E8 60 FA 74 0D 57 81 C7 80 00 8A 85  // .q...`.t.W......
    4100: 85 00 88 47 04 5F 07 C3 BE B0 01 8B 34 8B 74 1E  // ...G._......4.t.
    4110: 83 C6 04 B9 28 00 C3 56 E8 27 FD 83 C6 04 8A 6C  // ....(..V.'.....l
    4120: 0F 5E C3 56 E8 1B FD 80 FD 00 74 06 83 C6 04 88  // .^.V......t.....
    4130: 6C 0F 5E C3 32 C0 C3 E8 1D FD 66 8B 45 08 C3 66  // l.^.2.....f.E..f
    4140: 53 83 EC 04 8B EC 8C D0 66 C1 E0 10 8B C4 66 89  // S.......f.....f.
    4150: 5E 00 BB 06 00 E8 2D FD 8B EC 66 8B 46 00 83 C4  // ^.....-...f.F...
    4160: 04 66 5B C3 83 EC 0C 8B EC 8C D0 66 C1 E0 10 8B  // .f[........f....
    4170: C4 BB 16 00 E8 0E FD 8B EC 66 8B 5E 00 66 8B 4E  // .........f.^.f.N
    4180: 00 66 8B 56 08 83 C4 0C C3 66 B8 00 00 00 00 C3  // .f.V.....f......
    4190: BF B0 01 8B 3D 8B 7D 12 C3 00 66 50 8C C8 3D 00  // ....=.}...fP..=.
    41A0: C0 75 0C BA C3 03 EC 8A F0 0A F6 74 02 EB 0E 53  // .u.........t...S
    41B0: 2E 8B 1E 14 00 B2 20 E8 D6 00 8A F4 5B 32 D2 66  // ...... .....[2.f
    41C0: ED 66 58 C3 2E 8B 1E 14 00 C3 0B C9 75 1A 4B 74  // .fX.........u.Kt
    41D0: 16 43 3B DA 77 09 8B C8 8B C2 2B D2 F7 F3 91 F7  // .C;.w.....+.....
    41E0: F3 8B DA 8B D1 2B C9 C3 3B CA 72 1A 75 10 3B D8  // .....+..;.r.u.;.
    41F0: 77 0C 2B C3 8B D8 2B C9 2B D2 B8 01 00 C3 2B C9  // w.+...+.+.....+.
    4200: 2B DB 93 87 CA C3 55 56 2B F6 8B EE 03 DB 13 C9  // +.....UV+.......
    4210: 72 11 45 3B CA 72 F5 77 04 3B D8 76 EF F8 13 F6  // r.E;.r.w.;.v....
    4220: 4D 78 20 D1 D9 D1 DB 2B C3 1B D1 F5 72 F0 03 F6  // Mx ....+....r...
    4230: 4D 78 0C D1 E9 D1 DB 03 C3 13 D1 73 F1 EB DF 03  // Mx.........s....
    4240: C3 13 D1 8B D8 8B CA 8B C6 33 D2 5E 5D C3 93 50  // .........3.^]..P
    4250: 92 0B C0 74 02 F7 E2 91 0B C0 74 04 F7 E3 03 C8  // ...t......t.....
    4260: 58 F7 E3 03 D1 C3 52 66 50 B4 80 8A C7 66 C1 E0  // X.....RfP....f..
    4270: 10 8A E3 8A C2 24 FC BA F8 0C 66 EF 66 58 5A C3  // .....$....f.fXZ.
    4280: 52 BA FC 0C 66 ED 5A C3 52 BA FC 0C 66 EF 5A C3  // R...f.Z.R...f.Z.
    4290: E8 31 FF 9C FA E8 CE FF E8 E5 FF 9D C3 E8 24 FF  // .1............$.
    42A0: 9C FA E8 C1 FF E8 E0 FF 9D C3 52 66 53 66 50 E8  // ..........RfSfP.
    42B0: 06 00 66 58 66 5B 5A C3 66 C1 E3 10 66 C1 EB 0E  // ..fXf[Z.f...f...
    42C0: E8 D7 FE E8 BF 01 C3 66 50 66 C1 E3 10 66 C1 EB  // .......fPf...f..
    42D0: 10 E8 8A FD 66 03 D8 66 81 CB 00 00 00 80 66 58  // ....f..f......fX
    42E0: C3 52 66 53 E8 04 00 66 5B 5A C3 66 50 E8 AA FE  // .RfS...f[Z.fP...
    42F0: E8 D4 FF E8 8F 01 66 58 C3 52 51 66 53 66 50 8A  // ......fX.RQfSfP.
    4300: CB 80 E3 FC 80 E1 03 C0 E1 03 E8 8D FE E8 B7 FF  // ................
    4310: E8 59 01 66 D3 C8 58 50 66 D3 C0 E8 67 01 66 58  // .Y.f..XPf...g.fX
    4320: 66 5B 59 5A C3 66 50 51 C0 E1 03 E8 53 00 66 D3  // f[YZ.fPQ....S.f.
    4330: C8 8A C5 66 D3 C0 E8 A8 FF 59 66 58 C3 66 50 51  // ...f.....YfX.fPQ
    4340: C0 E1 03 E8 3B 00 66 D3 C8 59 8A E8 66 58 C3 E8  // ....;.f..Y..fX..
    4350: 5F 00 C3 E8 44 FE 66 C1 E3 10 66 C1 EB 0E E8 0B  // _...D.f...f.....
    4360: 01 C3 E8 35 FE 66 C1 E3 02 E8 00 01 C3 52 66 53  // ...5.f.......RfS
    4370: E8 04 00 66 5B 5A C3 E8 20 FE E8 4A FF E8 EC 00  // ...f[Z.. ..J....
    4380: C3 51 66 52 8A EB 8A CB 80 E1 03 C0 E1 03 80 E3  // .QfR............
    4390: FC E8 D9 FF 80 F9 00 74 14 66 8B D0 83 C3 04 E8  // .......t.f......
    43A0: CB FF 83 EB 04 66 92 66 0F AD D0 8A DD 66 5A 59  // .....f.f.....fZY
    43B0: C3 52 66 53 E8 9C FF 66 5B 5A C3 52 66 53 E8 A1  // .RfS...f[Z.RfS..
    43C0: FF 66 5B 5A C3 66 50 55 52 66 50 8B EC 8B 56 0C  // .f[Z.fPURfP...V.
    43D0: 89 56 08 E8 C4 FD B2 00 66 ED 66 89 46 0A 66 58  // .V......f.f.F.fX
    43E0: 5A 5D C3 66 50 55 52 66 50 8B EC 8B 56 0C 89 56  // Z].fPURfP...V..V
    43F0: 08 E8 A6 FD 2E A1 01 02 B2 18 EF B2 00 66 ED 66  // .............f.f
    4400: 89 46 0A 66 58 5A 5D C3 66 50 55 52 8B EC E8 89  // .F.fXZ].fPUR....
    4410: FD B2 00 66 8B 46 0A 66 EF 8B 56 08 89 56 0C 66  // ...f.F.f..V..V.f
    4420: 8B 46 04 66 89 46 08 5A 5D 66 58 66 58 C3 66 50  // .F.f.F.Z]fXfX.fP
    4430: 52 E8 66 FD B2 18 66 ED 2E A3 01 02 5A 66 58 C3  // R.f...f.....ZfX.
    4440: 66 52 66 53 E8 53 FD 66 81 CB 00 00 00 80 E8 1B  // fRfS.S.f........
    4450: 00 66 5B 66 5A C3 66 52 66 53 E8 3D FD 66 81 CB  // .f[fZ.fRfS.=.f..
    4460: 00 00 00 80 E8 1E 00 66 5B 66 5A C3 66 81 FB FF  // .......f[fZ.f...
    4470: 00 00 00 77 04 8A D3 EB 09 66 8B C3 B2 00 66 EF  // ...w.....f....f.
    4480: B2 04 66 ED C3 66 81 FB FF 00 00 00 77 04 8A D3  // ..f..f......w...
    4490: EB 0A 66 93 B2 00 66 EF 66 93 B2 04 66 EF C3 C3  // ..f...f.f...f...
    44A0: C3 55 8B EC 53 51 8B F0 26 8B 5C 14 26 8B 4C 16  // .U..SQ..&.\.&.L.
    44B0: E8 28 00 8D 66 FC 59 5B 5D C3 53 51 8B F0 26 8B  // .(..f.Y[].SQ..&.
    44C0: 5C 24 33 C9 E8 14 00 59 5B C3 55 8B EC 53 51 8B  // \$3....Y[.U..SQ.
    44D0: F0 26 8B 5C 08 26 8B 4C 0A EB D5 52 56 57 C8 06  // .&.\.&.L...RVW..
    44E0: 00 00 8B F0 89 4E FE 8C D0 8E C0 26 8B 7C 26 8A  // .....N.....&.|&.
    44F0: 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3 06  // E.2.. .+........
    4500: D1 EA D1 D8 E2 FA 8A 4D 03 32 ED 8B FA E3 06 D1  // .......M.2......
    4510: E0 D1 D7 E2 FA F7 D0 F7 D7 26 21 44 1C 26 21 7C  // .........&!D.&!|
    4520: 1E 8C D0 8E C0 26 8B 7C 26 8A 4D 01 32 ED B8 20  // .....&.|&.M.2.. 
    4530: 00 2B C1 8B C8 66 C7 46 FA FF FF FF FF E3 08 D1  // .+...f.F........
    4540: 6E FC D1 5E FA E2 F8 8A 4D 02 32 ED 8B C3 8B 56  // n..^....M.2....V
    4550: FE E3 06 D1 EA D1 D8 E2 FA 23 46 FA 23 56 FC 8A  // .........#F.#V..
    4560: 4D 03 32 ED E3 06 D1 E0 D1 D2 E2 FA 26 09 44 1C  // M.2.........&.D.
    4570: 26 09 54 1E C9 5F 5E 5A C3 55 8B EC 53 51 52 57  // &.T.._^Z.U..SQRW
    4580: 50 8B D8 26 8B 7F 26 8A 45 01 32 E4 B9 20 00 2B  // P..&..&.E.2.. .+
    4590: C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D  // ...............M
    45A0: 02 88 4E F6 C6 46 F7 00 8B FA 8B 4E F6 E3 06 D1  // ..N..F.....N....
    45B0: E0 D1 D7 E2 FA 26 09 47 1C 26 09 7F 1E 8D 66 F8  // .....&.G.&....f.
    45C0: 5F 5A E9 F1 FE 53 51 52 57 8B D8 8C D0 8E C0 26  // _Z...SQRW......&
    45D0: 8B 77 26 8A 4C 01 32 ED B8 20 00 2B C1 8B C8 BE  // .w&.L.2.. .+....
    45E0: FF FF 8B D6 E3 06 D1 EA D1 DE E2 FA 26 8B 7F 26  // ............&..&
    45F0: 8A 4D 02 32 ED 8B C6 E3 06 D1 E0 D1 D2 E2 FA F7  // .M.2............
    4600: D0 F7 D2 26 21 47 1C 26 21 57 1E 5F E9 CC 05 53  // ...&!G.&!W._...S
    4610: 56 8B D8 8C D2 8E C2 26 8B 77 26 80 3C 00 74 73  // V......&.w&.<.ts
    4620: 80 3C 01 75 58 8A 44 01 32 E4 26 83 7F 1E 00 75  // .<.uX.D.2.&....u
    4630: 4C 26 3B 47 1C 75 46 8A 04 6B F0 03 8A 84 68 A2  // L&;G.uF..k....h.
    4640: 26 01 47 26 8C D0 8E C0 26 8B 77 26 80 3C 09 74  // &.G&....&.w&.<.t
    4650: 17 8A 04 32 E4 6B F0 03 8B C3 FF 94 66 A2 26 8B  // ...2.k......f.&.
    4660: 77 26 8A 04 32 E4 EB D1 8B 44 01 26 29 47 26 26  // w&..2....D.&)G&&
    4670: FF 47 26 26 8B 47 1C 26 8B 77 1E EB 1A 26 8B 77  // .G&&.G.&.w...&.w
    4680: 26 8A 04 32 E4 6B F0 03 8A 84 68 A2 26 01 47 26  // &..2.k....h.&.G&
    4690: E9 80 FF 33 C0 33 F6 8B D6 5E 5B C3 53 51 52 56  // ...3.3...^[.SQRV
    46A0: 8B D8 8D 77 35 26 8B 54 02 26 89 57 14 26 C7 47  // ...w5&.T.&.W.&.G
    46B0: 16 00 00 8B F0 26 8B 47 20 33 D2 26 01 47 14 26  // .....&.G 3.&.G.&
    46C0: 11 54 16 8C D1 8E C1 26 F6 47 2F 06 0F 85 0A 05  // .T.....&.G/.....
    46D0: 26 80 7F 34 00 75 22 26 8B 77 16 26 0B 77 14 75  // &..4.u"&.w.&.w.u
    46E0: 10 26 D1 67 08 26 D1 57 0A 26 D1 67 08 26 D1 57  // .&.g.&.W.&.g.&.W
    46F0: 0A 8B C3 E8 79 11 E9 E1 04 26 8A 47 34 32 E4 05  // ....y....&.G42..
    4700: 80 00 99 26 89 47 1C 26 89 57 1E 8B C3 E8 FF FE  // ...&.G.&.W......
    4710: E9 C7 04 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4  // ...SV...w5&.D.2.
    4720: C1 E0 02 26 8B 37 26 8B 34 03 F0 26 8B 47 08 26  // ...&.7&.4..&.G.&
    4730: 8B 5F 0A 26 89 04 26 89 5C 02 5E 5B C3 53 52 56  // ._.&..&.\.^[.SRV
    4740: 8B D8 8C D0 8D 77 35 8E C0 26 8A 54 02 80 FA 40  // .....w5..&.T...@
    4750: 73 21 26 8B 77 02 32 F6 C1 E2 02 26 8B 74 04 03  // s!&.w.2....&.t..
    4760: F2 26 8B 57 08 26 8B 47 0A 26 89 14 26 89 44 02  // .&.W.&.G.&..&.D.
    4770: E9 7F 00 80 FA 41 75 12 26 8B 47 08 26 8B 57 0A  // .....Au.&.G.&.W.
    4780: 26 89 47 10 26 89 57 12 EB 68 80 FA 40 75 12 26  // &.G.&.W..h..@u.&
    4790: 8B 47 08 26 8B 57 0A 26 89 47 0C 26 89 57 0E EB  // .G.&.W.&.G.&.W..
    47A0: 51 80 FA 42 75 0A 26 8B 47 08 26 89 47 22 EB 42  // Q..Bu.&.G.&.G".B
    47B0: 80 FA 43 75 0A 26 8A 47 08 26 88 47 33 EB 33 80  // ..Cu.&.G.&.G3.3.
    47C0: FA 46 75 12 26 8B 57 08 26 8B 47 0A 26 89 57 18  // .Fu.&.W.&.G.&.W.
    47D0: 26 89 47 1A EB 1C 80 FA 47 75 0A 26 8B 47 08 26  // &.G.....Gu.&.G.&
    47E0: 89 47 24 EB 0D 80 FA 48 75 08 26 8B 47 08 26 89  // .G$....Hu.&.G.&.
    47F0: 47 20 5E 5A 5B C3 53 56 8B D8 8D 77 35 26 8A 44  // G ^Z[.SV...w5&.D
    4800: 02 32 E4 26 89 47 14 26 C7 47 16 00 00 5E 5B C3  // .2.&.G.&.G...^[.
    4810: 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 04 32 E4  // SV..&.w.&.t...2.
    4820: 26 89 47 14 26 C7 47 16 00 00 26 8B 5F 02 26 FF  // &.G.&.G...&._.&.
    4830: 47 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74  // G.^[.SV..&.w.&.t
    4840: 02 8B 34 26 89 77 14 26 C7 47 16 00 00 26 8B 5F  // ..4&.w.&.G...&._
    4850: 02 26 83 47 02 02 5E 5B C3 53 56 8B D8 26 8B 77  // .&.G..^[.SV..&.w
    4860: 02 26 8B 74 02 8B 04 8B 74 02 26 89 47 14 26 89  // .&.t....t.&.G.&.
    4870: 77 16 26 8B 5F 02 26 83 47 02 04 5E 5B C3 53 52  // w.&._.&.G..^[.SR
    4880: 56 8B D8 E8 70 FF 8B F3 26 8B 47 18 26 8B 57 1A  // V...p...&.G.&.W.
    4890: D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16  // ........&.G.&.T.
    48A0: 8B C3 E8 2B 10 E9 4A FF 53 8B D8 26 8B 5F 02 26  // ...+..J.S..&._.&
    48B0: FF 47 02 5B C3 53 8B D8 26 8B 5F 02 26 83 47 02  // .G.[.S..&._.&.G.
    48C0: 02 5B C3 53 56 8B D8 E8 6B FF 8B F3 26 8B 57 20  // .[.SV...k...&.W 
    48D0: 33 C0 26 01 57 14 26 11 44 16 8C D2 8E C2 26 8B  // 3.&.W.&.D.....&.
    48E0: 47 2E 32 C0 80 E4 06 3D 00 02 75 07 32 E4 33 D2  // G.2....=..u.2.3.
    48F0: 5E 5B C3 26 8B 47 2E 32 C0 80 E4 06 3D 00 04 74  // ^[.&.G.2....=..t
    4900: EB 26 80 7F 34 00 75 08 8B C3 E8 2F 0F 5E 5B C3  // .&..4.u..../.^[.
    4910: 26 8A 47 34 32 E4 26 89 47 1C 26 C7 47 1E 00 00  // &.G42.&.G.&.G...
    4920: 8B C3 E8 EA FC 5E 5B C3 53 8B D8 E8 E2 FE 26 8B  // .....^[.S.....&.
    4930: 47 14 C1 E0 02 26 8B 1F 26 8B 1F 03 D8 26 8B 07  // G....&..&....&..
    4940: 26 8B 57 02 5B C3 4C 49 41 49 57 49 A6 49 5D 49  // &.W.[.LIAIWI.I]I
    4950: 75 49 8F 49 9A 49 A0 49 53 51 56 8B D8 E8 B0 FE  // uI.I.I.ISQV.....
    4960: 8C D2 8E C2 26 83 7F 16 00 75 22 26 83 7F 14 40  // ....&....u"&...@
    4970: 73 1B 26 8B 77 02 26 8B 5F 14 C1 E3 02 26 8B 44  // s.&.w.&._....&.D
    4980: 04 03 D8 26 8B 07 26 8B 57 02 E9 7B 05 26 8B 77  // ...&..&.W..{.&.w
    4990: 14 26 8B 47 16 83 C6 C0 83 D0 FF 75 71 83 FE 08  // .&.G.......uq...
    49A0: 77 6C 03 F6 2E FF A4 DE 48 26 8B 47 10 26 8B 57  // wl......H&.G.&.W
    49B0: 12 E9 54 05 26 8B 47 0C 26 8B 57 0E E9 49 05 26  // ..T.&.G.&.W..I.&
    49C0: 8B 47 22 EB 4B 26 8A 4F 33 32 ED BB 01 00 33 D2  // .G".K&.O32....3.
    49D0: E3 06 D1 E3 D1 D2 E2 FA 8B C3 E9 2B 05 26 8A 4F  // ...........+.&.O
    49E0: 33 32 ED B8 01 00 33 D2 E3 06 D1 E0 D1 D2 E2 FA  // 32....3.........
    49F0: F7 D0 F7 D2 E9 11 05 26 8B 47 18 26 8B 57 1A E9  // .......&.G.&.W..
    4A00: 06 05 26 8B 47 24 EB 08 26 8B 47 20 EB 02 33 C0  // ..&.G$..&.G ..3.
    4A10: 33 D2 E9 F3 04 53 56 8B D8 E8 F4 FD 8B F3 26 8B  // 3....SV.......&.
    4A20: 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01  // G.&.W.........&.
    4A30: 47 14 26 11 54 16 8B C3 E8 16 0E 5E 5B C3 33 C0  // G.&.T......^[.3.
    4A40: 33 D2 C3 53 56 8B D8 E8 EB FD 26 8B 77 14 26 03  // 3..SV.....&.w.&.
    4A50: 77 22 8B 04 8B 54 02 5E 5B C3 53 8B D8 26 C6 47  // w"...T.^[.S..&.G
    4A60: 2B 04 E8 AB FD 26 8B 47 14 26 8B 57 16 5B C3 53  // +....&.G.&.W.[.S
    4A70: 8B D8 26 C6 47 2B 01 E8 BB FD EB E9 53 8B D8 26  // ..&.G+......S..&
    4A80: C6 47 2B 00 E8 D2 FD EB DC 53 8B D8 83 C3 35 26  // .G+......S....5&
    4A90: 8A 5F 01 C0 EB 03 80 E3 07 32 FF 03 DB FF 97 F6  // ._.......2......
    4AA0: A1 5B C3 53 52 56 8B D8 26 8A 47 2C 32 E4 8B F0  // .[.SRV..&.G,2...
    4AB0: 03 F0 8B C3 FF 94 12 A2 26 89 47 08 26 89 57 0A  // ........&.G.&.W.
    4AC0: 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 2A A2  // &.G-2.........*.
    4AD0: 26 89 47 04 26 89 57 06 E9 17 FD 53 51 56 8B D8  // &.G.&.W....SQV..
    4AE0: 26 8A 4F 2B 32 ED 8B F1 8A 8C 5A A2 E3 0A 26 D1  // &.O+2.....Z...&.
    4AF0: 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1  // o.&._...&.O+2...
    4B00: C1 E6 02 8B 8C 3A A2 8B B4 3C A2 26 21 4F 04 26  // .....:...<.&!O.&
    4B10: 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 62 A2 E3  // !w.&.O*2.....b..
    4B20: 0A 26 D1 67 04 26 D1 57 06 E2 F6 26 8B 4F 08 26  // .&.g.&.W...&.O.&
    4B30: 8B 77 0A 26 89 4F 14 26 89 77 16 E9 CA 03 53 51  // .w.&.O.&.w....SQ
    4B40: 52 56 57 8B D8 8C D0 8E C0 26 8A 47 2B 32 E4 8B  // RVW......&.G+2..
    4B50: F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 62 A2 32 ED  // ....&.G*....b.2.
    4B60: 8B 84 3A A2 8B 94 3C A2 E3 06 D1 E0 D1 D2 E2 FA  // ..:...<.........
    4B70: F7 D0 F7 D2 26 21 47 14 26 21 57 16 26 8A 47 2A  // ....&!G.&!W.&.G*
    4B80: 32 E4 8B F0 8A 8C 62 A2 32 ED E3 0A 26 D1 6F 0A  // 2.....b.2...&.o.
    4B90: 26 D1 5F 08 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B  // &._...&.G+......
    4BA0: 84 3A A2 8B 94 3C A2 26 21 47 08 26 21 57 0A 26  // .:...<.&!G.&!W.&
    4BB0: 8A 47 2A 32 E4 8B F0 8A 8C 62 A2 32 ED E3 0A 26  // .G*2.....b.2...&
    4BC0: D1 67 08 26 D1 57 0A E2 F6 26 8B 47 14 26 8B 57  // .g.&.W...&.G.&.W
    4BD0: 16 26 09 47 08 26 09 57 0A 5F 5E 5A 59 5B C3 53  // .&.G.&.W._^ZY[.S
    4BE0: 51 56 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C 5A A2  // QV..&.O+2.....Z.
    4BF0: E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B  // ..&.o.&._...&.O+
    4C00: 32 ED 8B F1 C1 E6 02 8B 8C 3A A2 8B B4 3C A2 26  // 2........:...<.&
    4C10: 21 4F 04 26 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A  // !O.&!w.&.O*2....
    4C20: 8C 62 A2 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26  // .b...&.o.&._...&
    4C30: 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 3A A2 8B B4  // .O+2........:...
    4C40: 3C A2 26 21 4F 08 26 21 77 0A E9 BB 02 51 52 57  // <.&!O.&!w....QRW
    4C50: 8B D8 8C D0 8E C0 26 80 7F 2B 00 74 1A 26 8A 47  // ......&..+.t.&.G
    4C60: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 12 A2 26 89 47  // ,2...........&.G
    4C70: 08 26 89 57 0A EB 10 26 8A 47 2C 32 E4 8B F0 03  // .&.W...&.G,2....
    4C80: F0 8B C3 FF 94 1E A2 26 8A 47 2D 32 E4 8B F0 03  // .......&.G-2....
    4C90: F0 8B C3 FF 94 2A A2 26 89 47 04 26 89 57 06 8C  // .....*.&.G.&.W..
    4CA0: D2 8E C2 26 80 7F 2B 00 74 4A 26 8A 47 2B 32 E4  // ...&..+.tJ&.G+2.
    4CB0: 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 62 A2 32  // .....&.G*....b.2
    4CC0: ED 8B 84 3A A2 8B 94 3C A2 E3 06 D1 E0 D1 D2 E2  // ...:...<........
    4CD0: FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A 8B C3 E8  // .....&!G.&!W....
    4CE0: F9 FD 26 8B 47 04 26 8B 57 06 26 09 47 08 26 09  // ..&.G.&.W.&.G.&.
    4CF0: 57 0A EB 10 26 8B 57 04 26 8B 47 06 26 89 57 08  // W...&.W.&.G.&.W.
    4D00: 26 89 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // &.G.&.G,2.......
    4D10: FF 94 06 A2 5F 5A 59 C3 53 51 52 56 57 8B D8 26  // ...._ZY.SQRVW..&
    4D20: 8A 47 2A 32 E4 8B F0 8A 8C 62 A2 32 ED E3 0A 26  // .G*2.....b.2...&
    4D30: D1 67 04 26 D1 57 06 E2 F6 8C D0 8E C0 26 8A 47  // .g.&.W.......&.G
    4D40: 2B 32 E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D  // +2......&.G*....
    4D50: 62 A2 32 ED 8B 84 3A A2 8B 94 3C A2 E3 06 D1 E0  // b.2...:...<.....
    4D60: D1 D2 E2 FA F7 D0 F7 D2 26 09 47 04 26 09 57 06  // ........&.G.&.W.
    4D70: 26 8B 47 04 26 8B 57 06 26 21 47 08 26 21 57 0A  // &.G.&.W.&!G.&!W.
    4D80: E9 56 FE 55 8B EC 51 52 50 8B D8 26 8A 47 2C 32  // .V.U..QRP..&.G,2
    4D90: E4 8B F0 03 F0 8B C3 FF 94 12 A2 26 89 47 08 26  // ...........&.G.&
    4DA0: 89 57 0A 26 8A 47 2B 88 46 FA 8B C3 E8 DA FC 26  // .W.&.G+.F......&
    4DB0: 89 47 04 26 89 57 06 26 8A 4F 2D 32 ED 8B F1 03  // .G.&.W.&.O-2....
    4DC0: F1 8B C3 FF 94 2A A2 26 89 47 14 26 89 57 16 8B  // .....*.&.G.&.W..
    4DD0: C3 E8 44 FF 8A 46 FA 32 E4 8B F0 8A 8C 5A A2 E3  // ..D..F.2.....Z..
    4DE0: 0A 26 D1 6F 16 26 D1 5F 14 E2 F6 26 8A 57 2B 32  // .&.o.&._...&.W+2
    4DF0: F6 8B F2 C1 E6 02 8B 84 3A A2 8B 94 3C A2 26 21  // ........:...<.&!
    4E00: 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C  // G.&!W.&.G*2.....
    4E10: 62 A2 32 ED E3 0A 26 D1 67 14 26 D1 57 16 E2 F6  // b.2...&.g.&.W...
    4E20: 26 8B 47 14 26 8B 57 16 26 09 47 08 26 09 57 0A  // &.G.&.W.&.G.&.W.
    4E30: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 06 A2  // &.G,2...........
    4E40: 8D 66 FC 5A 59 5D C3 51 8B D8 E8 56 FC 26 8A 4F  // .f.ZY].Q...V.&.O
    4E50: 2B 32 ED 8B F1 8A 8C 5A A2 E3 0A 26 D1 6F 06 26  // +2.....Z...&.o.&
    4E60: D1 5F 04 E2 F6 8B C3 E8 AE FE 26 8A 4F 2C 32 ED  // ._........&.O,2.
    4E70: 8B F1 03 F1 8B C3 FF 94 06 A2 59 C3 8B D8 E8 22  // ..........Y...."
    4E80: FC 8B C3 E8 55 FC 26 8B 47 04 26 8B 77 06 26 09  // ....U.&.G.&.w.&.
    4E90: 47 08 26 09 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0  // G.&.w.&.G,2.....
    4EA0: 8B C3 FF 94 06 A2 C3 53 56 8B D8 E8 F5 FB 8B C3  // .......SV.......
    4EB0: E8 28 FC 26 8B 47 04 26 8B 77 06 26 31 47 08 26  // .(.&.G.&.w.&1G.&
    4EC0: 31 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // 1w.&.G,2........
    4ED0: 94 06 A2 5E 5B C3 53 51 56 8B D8 E8 C5 FB 8B C3  // ...^[.SQV.......
    4EE0: E8 F8 FB 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57  // ...&.O...&.g.&.W
    4EF0: 0A E2 F6 8B C3 E8 46 FC 26 8A 4F 2C 32 ED 8B F1  // ......F.&.O,2...
    4F00: 03 F1 8B C3 FF 94 06 A2 5E 59 5B C3 53 51 56 8B  // ........^Y[.SQV.
    4F10: D8 E8 8F FB 8B C3 E8 C2 FB 26 8B 4F 04 E3 0A 26  // .........&.O...&
    4F20: D1 6F 0A 26 D1 5F 08 E2 F6 EB C8 52 8B D8 E8 72  // .o.&._.....R...r
    4F30: FB 8B C3 E8 A5 FB 8B F3 26 8B 47 04 26 8B 57 06  // ........&.G.&.W.
    4F40: 26 01 47 08 26 11 54 0A 8B C3 E8 F1 FB 26 8A 47  // &.G.&.T......&.G
    4F50: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 06 A2 5A C3 52  // ,2...........Z.R
    4F60: 8B D8 E8 3E FB 8B C3 E8 71 FB 8B F3 26 8B 47 04  // ...>....q...&.G.
    4F70: 26 8B 57 06 26 29 47 08 26 19 54 0A EB CA 51 52  // &.W.&)G.&.T...QR
    4F80: 8B F0 E8 1E FB 8B C6 E8 55 FC 26 8B 44 08 26 8B  // ........U.&.D.&.
    4F90: 54 0A 26 8B 5C 04 26 8B 4C 06 E8 B1 F2 26 89 44  // T.&.\.&.L....&.D
    4FA0: 0C 26 89 54 0E 5A 59 C3 52 8B D0 E8 F5 FA 8B C2  // .&.T.ZY.R.......
    4FB0: E8 2C FC 8B C2 E8 5C 08 5A C3 51 52 57 8B F0 E8  // .,....\.Z.QRW...
    4FC0: E1 FA 8B C6 E8 18 FC 26 8B 44 08 26 8B 54 0A 26  // .......&.D.&.T.&
    4FD0: 8B 5C 04 26 8B 4C 06 E8 F0 F1 26 89 44 0C 26 89  // .\.&.L....&.D.&.
    4FE0: 54 0E 8C D7 8E C7 26 8B 44 08 26 8B 54 0A 26 8B  // T.....&.D.&.T.&.
    4FF0: 5C 04 26 8B 4C 06 E8 D1 F1 26 89 5C 10 26 89 4C  // \.&.L....&.\.&.L
    5000: 12 E9 10 FD 52 8B D0 E8 99 FA 8B C2 E8 D0 FB 8B  // ....R...........
    5010: C2 E8 D3 07 5A C3 51 52 8B D8 E8 86 FA 8B C3 E8  // ....Z.QR........
    5020: BD FB 8C D1 8E C1 26 8B 47 08 26 8B 57 0A 26 3B  // ......&.G.&.W.&;
    5030: 57 06 75 0E 26 3B 47 04 75 08 26 C6 47 30 01 5A  // W.u.&;G.u.&.G0.Z
    5040: 59 C3 8B D0 26 8B 47 0A 26 3B 47 06 72 08 75 0A  // Y...&.G.&;G.r.u.
    5050: 26 3B 57 04 73 04 33 C0 EB 03 B8 02 00 26 88 47  // &;W.s.3......&.G
    5060: 30 5A 59 C3 51 52 57 8B D8 26 8A 47 2C 32 E4 8B  // 0ZY.QRW..&.G,2..
    5070: F0 03 F0 8B C3 FF 94 12 A2 26 89 47 08 26 89 57  // .........&.G.&.W
    5080: 0A 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02  // .....&.G+2......
    5090: 8B F8 8A 8D 5A A2 32 ED 8B 84 3A A2 8B 94 3C A2  // ....Z.2...:...<.
    50A0: E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 08  // ............&!G.
    50B0: 26 21 57 0A E9 4D FC 55 8B EC 51 52 57 83 EC 06  // &!W..M.U..QRW...
    50C0: 8B D8 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A  // ..&.G+2.........
    50D0: 8D 5A A2 32 ED 8B 84 3A A2 89 46 F4 8B 84 3C A2  // .Z.2...:..F...<.
    50E0: 89 46 F6 E3 08 D1 66 F4 D1 56 F6 E2 F8 8B 7E F4  // .F....f..V....~.
    50F0: 8B 46 F6 89 46 F8 26 8A 47 2C 32 E4 8B F0 03 F0  // .F..F.&.G,2.....
    5100: 8B C3 FF 94 12 A2 26 89 47 08 26 89 57 0A 8B C3  // ......&.G.&.W...
    5110: E8 47 F9 26 89 47 04 26 89 57 06 8B C7 F7 D0 8B  // .G.&.G.&.W......
    5120: 56 F6 F7 D2 26 23 47 08 26 23 57 0A 26 89 47 14  // V...&#G.&#W.&.G.
    5130: 26 89 57 16 26 21 7F 08 8B 46 F6 26 21 47 0A 8C  // &.W.&!...F.&!G..
    5140: D1 8D 77 35 8E C1 26 80 3C 19 73 12 26 8B 4F 04  // ..w5..&.<.s.&.O.
    5150: E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 EB 10 26 8B  // ..&.g.&.W.....&.
    5160: 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 21  // O...&.o.&._...&!
    5170: 7F 08 8B 46 F8 26 21 47 0A 26 8B 57 14 26 8B 47  // ...F.&!G.&.W.&.G
    5180: 16 26 09 57 08 26 09 47 0A 26 8A 47 2C 32 E4 8B  // .&.W.&.G.&.G,2..
    5190: F0 03 F0 8B C3 FF 94 06 A2 8D 66 FA 5F E9 A3 FC  // ..........f._...
    51A0: 52 8B D8 E8 FD F8 8B C3 E8 34 FA 26 8B 47 08 26  // R........4.&.G.&
    51B0: 8B 57 0A 26 85 57 06 75 06 26 85 47 04 74 05 B8  // .W.&.W.u.&.G.t..
    51C0: 03 00 EB 03 B8 01 00 26 88 47 30 5A C3 53 51 52  // .......&.G0Z.SQR
    51D0: 56 8B D8 26 8A 4F 2D 32 ED 8B F1 03 F1 FF 94 2A  // V..&.O-2.......*
    51E0: A2 26 89 47 04 26 89 57 06 26 8A 47 2B 32 E4 8B  // .&.G.&.W.&.G+2..
    51F0: F0 8A 8C 5A A2 E3 0A 26 D1 6F 06 26 D1 5F 04 E2  // ...Z...&.o.&._..
    5200: F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 3A A2 8B 94  // .&.G+.......:...
    5210: 3C A2 26 21 47 04 26 21 57 06 E9 BD F9 52 8B D8  // <.&!G.&!W....R..
    5220: E8 AA FF 26 8B 47 04 26 8B 57 06 26 89 47 18 26  // ...&.G.&.W.&.G.&
    5230: 89 57 1A 5A C3 51 52 8B D8 E8 91 FF 8C D0 8E C0  // .W.Z.QR.........
    5240: 26 8B 77 02 26 8B 74 02 81 3C 5A 5A 74 5B 26 8B  // &.w.&.t..<ZZt[&.
    5250: 77 02 26 8B 74 02 80 3C 63 75 E1 26 8B 77 02 26  // w.&.t..<cu.&.w.&
    5260: FF 44 02 8B C3 E8 21 F8 26 89 47 08 26 89 57 0A  // .D....!.&.G.&.W.
    5270: 8B C3 E8 FA F7 26 89 47 14 26 89 57 16 8C D1 8E  // .....&.G.&.W....
    5280: C1 26 8B 57 04 26 8B 47 06 26 3B 47 0A 75 AD 26  // .&.W.&.G.&;G.u.&
    5290: 3B 57 08 75 A7 26 8B 77 02 26 8B 04 26 03 47 14  // ;W.u.&.w.&..&.G.
    52A0: 8B DE 26 89 47 02 5A 59 C3 26 8B 5F 02 26 83 47  // ..&.G.ZY.&._.&.G
    52B0: 02 02 5A 59 C3 52 57 8B D8 8C D0 8E C0 26 8B 77  // ..ZY.RW......&.w
    52C0: 02 26 8B 74 02 8A 54 01 84 D2 75 08 26 C7 47 22  // .&.t..T...u.&.G"
    52D0: 00 00 EB 2F 80 FA FF 75 14 26 8B 77 02 26 8B 3F  // .../...u.&.w.&.?
    52E0: 26 8B 34 26 2B 75 02 26 89 77 22 EB 16 26 8B 07  // &.4&+u.&.w"..&..
    52F0: E8 E3 02 8B F0 8A C2 32 E4 03 C0 03 F0 8B 04 26  // .......2.......&
    5300: 89 47 22 26 8B 5F 02 26 83 47 02 02 5F 5A C3 8B  // .G"&._.&.G.._Z..
    5310: D8 26 80 67 2F F9 26 8B 77 02 26 8B 74 02 8A 44  // .&.g/.&.w.&.t..D
    5320: 01 26 88 47 34 26 8B 5F 02 26 83 47 02 03 C3 8B  // .&.G4&._.&.G....
    5330: D8 26 8B 77 02 26 8B 74 02 8B 74 01 26 89 77 20  // .&.w.&.t..t.&.w 
    5340: EB E3 53 8B D8 26 8A 47 2C 32 E4 24 03 26 80 67  // ..S..&.G,2.$.&.g
    5350: 2F F9 C1 E0 09 26 09 47 2E E9 4F F5 8B D8 26 8B  // /....&.G..O...&.
    5360: 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26  // w.&.t..D.2.&.G.&
    5370: C7 47 06 00 00 8B C3 E8 40 04 26 8B 5F 02 26 83  // .G......@.&._.&.
    5380: 47 02 02 C3 8B D8 26 8B 77 02 26 8B 74 02 8A 44  // G.....&.w.&.t..D
    5390: 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8  // .2.&.G.&.G......
    53A0: 08 04 EB D6 53 56 8B D8 26 8B 77 02 26 8B 74 02  // ....SV..&.w.&.t.
    53B0: 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B  // .D.2.&.G.&.G....
    53C0: C3 E8 06 04 E9 86 F4 53 56 8B D8 26 8B 77 02 26  // .......SV..&.w.&
    53D0: 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06  // .t..D.2.&.G.&.G.
    53E0: 00 00 8B C3 E8 F0 03 E9 63 F4 53 56 8B D8 26 8B  // ........c.SV..&.
    53F0: 77 02 8B DE 26 8B 5F 02 8B 5F 01 83 C3 03 26 01  // w...&._.._....&.
    5400: 5C 02 5E 5B C3 51 52 8B D8 26 8B 77 02 26 83 44  // \.^[.QR..&.w.&.D
    5410: 02 02 26 8B 07 E8 A0 01 8B C8 26 8B 77 28 8A 44  // ..&.......&.w(.D
    5420: 01 32 E4 03 C0 8B F1 03 F0 83 3C 00 74 4F 26 8B  // .2........<.tO&.
    5430: 77 28 8A 54 01 32 F6 8B C3 E8 B0 01 26 88 47 31  // w(.T.2......&.G1
    5440: 26 8B 77 02 26 8B 34 8B 44 04 C1 E8 08 32 E4 24  // &.w.&.4.D....2.$
    5450: 7F C1 E8 02 32 E4 24 1F 26 80 67 2F 07 C1 E0 0B  // ....2.$.&.g/....
    5460: 26 09 47 2E 26 8B 37 26 8B 47 2E C1 E8 0B C1 E0  // &.G.&.7&.G......
    5470: 02 26 01 04 26 C6 47 32 01 26 89 4F 28 5A 59 C3  // .&..&.G2.&.O(ZY.
    5480: 53 8B D8 26 C6 47 32 82 5B C3 57 8B D8 8C D6 8E  // S..&.G2.[.W.....
    5490: C6 26 80 7F 2C 05 74 0A 26 8A 47 2C 26 3A 47 30  // .&..,.t.&.G,&:G0
    54A0: 75 1E 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B  // u.&.w.&.t.&...&.
    54B0: 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F C3  // =.t...&._.&.w._.
    54C0: 26 8B 5F 02 26 83 47 02 03 5F C3 53 56 57 8B D8  // &._.&.G.._.SVW..
    54D0: 8C D6 8E C6 26 80 7F 30 01 74 0A 26 8A 47 30 26  // ....&..0.t.&.G0&
    54E0: 3A 47 2C 75 20 26 8B 77 02 26 8B 74 02 26 8B 7F  // :G,u &.w.&.t.&..
    54F0: 02 26 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77  // .&.=.t...&._.&.w
    5500: 02 5F 5E 5B C3 26 8B 5F 02 26 83 47 02 03 EB F1  // ._^[.&._.&.G....
    5510: 53 56 57 8B D8 8C D0 8E C0 26 80 7F 30 01 74 E5  // SVW......&..0.t.
    5520: EB C3 55 8B EC 53 51 52 57 8B D8 26 8B 77 02 26  // ..U..SQRW..&.w.&
    5530: 8B 74 02 8A 04 26 C6 47 3D 00 8C D1 8E C1 26 80  // .t...&.G=.....&.
    5540: 7F 3D 08 73 20 26 8B 77 02 26 8A 57 3D 32 F6 26  // .=.s &.w.&.W=2.&
    5550: 8B 7C 02 03 FA 8B F3 03 F2 8A 15 26 88 54 35 26  // .|.........&.T5&
    5560: FE 47 3D EB D5 26 8B 7F 02 8A D0 32 F6 8B F2 C1  // .G=..&.....2....
    5570: E6 02 8A 94 87 A2 26 01 55 02 26 8B 7F 28 8A 55  // ......&.U.&..(.U
    5580: 01 80 E2 07 26 88 57 2D 26 8B 7F 28 8A 55 01 C0  // ....&.W-&..(.U..
    5590: EA 03 80 E2 07 26 88 57 2B 26 8B 7F 28 8A 55 01  // .....&.W+&..(.U.
    55A0: C0 EA 06 26 88 57 2A 8A 94 86 A2 26 88 57 2C 8D  // ...&.W*....&.W,.
    55B0: 66 F8 5F 5A 59 5B 5D C3 53 56 8B D8 26 8B 77 02  // f._ZY[].SV..&.w.
    55C0: 8B C6 8B 74 48 03 F0 8B D8 8B 74 1E 8B C6 03 C3  // ...tH.....t.....
    55D0: 83 C0 04 5E 5B C3 53 56 8B D8 26 8B 77 02 8B C6  // ...^[.SV..&.w...
    55E0: 8B 74 48 03 F0 8B D8 8B 74 20 EB E0 8A C2 C3 16  // .tH.....t ......
    55F0: 07 55 8B EC 53 51 56 57 83 EC 40 8B F8 89 46 B8  // .U..SQVW..@...F.
    5600: E8 D3 FF 8B D8 89 46 E0 26 8B 45 02 8B 5F 2E 03  // ......F.&.E.._..
    5610: D8 89 5E DE 83 46 DE 04 8B C7 E8 9B FF 89 46 E0  // ..^..F........F.
    5620: 32 F6 8D 46 B8 E8 C4 FF 8A D0 32 F6 03 D2 8B 5E  // 2..F......2....^
    5630: E0 03 DA 83 3F 00 0F 84 65 01 88 46 E9 80 66 E7  // ....?...e..F..f.
    5640: F9 C6 46 EC 00 C7 46 D8 00 00 66 C7 46 D0 00 00  // ..F...F...f.F...
    5650: 00 00 C7 46 F6 00 00 C6 46 EA 01 EB 06 3C 01 0F  // ...F....F....<..
    5660: 85 8C 00 8A 56 E9 8A C2 32 E4 03 C0 8B 5E E0 03  // ....V...2....^..
    5670: D8 83 3F 00 74 75 26 8B 45 02 8B 1F 03 D8 8B 47  // ..?.tu&.E......G
    5680: 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE 83 F9 00  // .2......2.......
    5690: 74 07 D1 E9 33 C0 50 E2 FD 8B C4 8B D8 89 46 BA  // t...3.P.......F.
    56A0: 85 C0 74 41 83 C0 08 26 89 47 04 8A C2 32 E4 03  // ..tA...&.G...2..
    56B0: C0 8B 5E E0 03 D8 26 8B 45 02 03 07 8B 5E BA 26  // ..^...&.E....^.&
    56C0: 89 07 8B 5E BA 26 8B 07 83 C0 06 26 89 47 02 8B  // ...^.&.....&.G..
    56D0: 5E BA 8B 76 F6 26 89 77 06 8B 5E BA 89 5E F6 C6  // ^..v.&.w..^..^..
    56E0: 46 EA 00 EB 0A C6 46 EA 87 EB 04 C6 46 EA 83 8A  // F.....F.....F...
    56F0: 46 EA 32 E4 83 F8 10 0F 8F 99 00 88 66 EA 8A 46  // F.2.........f..F
    5700: EA 32 E4 85 C0 0F 8F 83 00 8C D0 8B 5E BA 8E C0  // .2..........^...
    5710: 26 8B 5F 02 89 5E E0 8B 5E BA 26 8B 5F 02 80 3F  // &._..^..^.&._..?
    5720: 5B 75 4A C6 46 EA 10 8B 5E BA 26 8B 5F 06 89 5E  // [uJ.F...^.&._..^
    5730: F6 8B 5E BA 26 8B 1F 8B 47 04 32 E4 8B C8 83 C1  // ..^.&...G.2.....
    5740: 09 32 ED 80 E1 FE 03 E1 8B 5E F6 89 5E BA 85 DB  // .2.......^..^...
    5750: 74 AC 26 8B 1F 8B 47 04 C1 E8 08 32 E4 24 7F C1  // t.&...G....2.$..
    5760: E8 02 C1 E0 02 8B 5E B8 26 29 07 EB 91 8D 46 B8  // ......^.&)....F.
    5770: E8 AF FD 8A D0 8D 46 B8 E8 2E 00 8A DA 32 FF C1  // ......F......2..
    5780: E3 02 8D 46 B8 FF 97 84 A2 E9 72 FF 83 7E F6 00  // ...F......r..~..
    5790: 0F 85 C9 FE 80 7E EA 10 74 05 8A 46 EA EB 02 32  // .....~..t..F...2
    57A0: C0 8D 66 F8 5F 5E E9 0B FE C3 53 51 8B D8 26 8A  // ..f._^....SQ..&.
    57B0: 4F 04 32 ED E8 E5 E7 59 5B C3 53 51 8B D8 26 8A  // O.2....Y[.SQ..&.
    57C0: 4F 04 32 ED E8 E0 E7 59 5B C3 53 8B D8 26 8A 47  // O.2....Y[.S..&.G
    57D0: 04 32 E4 E6 80 5B C3 53 51 8B D8 26 8A 4F 04 32  // .2...[.SQ..&.O.2
    57E0: ED E8 34 E1 59 5B C3 53 8B D8 66 50 66 52 66 51  // ..4.Y[.S..fPfRfQ
    57F0: 66 26 8B 47 08 66 26 8B 57 10 66 26 8B 4F 04 66  // f&.G.f&.W.f&.O.f
    5800: F7 F1 66 26 89 47 0C 66 26 89 57 10 66 59 66 5A  // ..f&.G.f&.W.fYfZ
    5810: 66 58 5B C3 53 8B D8 66 50 66 52 66 51 66 26 8B  // fX[.S..fPfRfQf&.
    5820: 47 08 66 26 8B 4F 04 66 F7 E1 66 26 89 47 0C 66  // G.f&.O.f..f&.G.f
    5830: 26 89 57 10 66 59 66 5A 66 58 5B C3 53 57 8B D8  // &.W.fYfZfX[.SW..
    5840: 26 8B 5F 14 E8 0C EB 8B D0 66 C1 E8 10 92 5F 5B  // &._......f...._[
    5850: C3 53 57 8B D8 26 8B 47 14 26 8B 57 16 8B D8 87  // .SW..&.G.&.W....
    5860: D3 66 C1 E3 10 8B DA C1 E3 02 E8 0A EB EB D8 53  // .f.............S
    5870: 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0  // RW..&.G.&.W..f..
    5880: 10 8B C2 26 8B 5F 14 E8 2E EA 5F 5A 5B C3 53 52  // ...&._...._Z[.SR
    5890: 8B D8 26 8B 47 1C 26 8B 57 1E 92 66 C1 E0 10 8B  // ..&.G.&.W..f....
    58A0: C2 26 8B 5F 26 8B 5F 01 E8 0D EA 5A 5B C3 53 52  // .&._&._....Z[.SR
    58B0: 56 8B F0 26 8B 5C 26 8B 5F 01 E8 96 EA 8B D0 66  // V..&.\&._......f
    58C0: C1 E8 10 92 26 89 44 1C 26 89 54 1E 5E 5A 5B C3  // ....&.D.&.T.^Z[.
    58D0: 53 51 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66  // SQRW..&.G.&.W..f
    58E0: C1 E0 10 8B C2 8B C8 26 8B 47 14 26 8B 57 16 8B  // .......&.G.&.W..
    58F0: D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 8B C1 E8 EA  // ...f............
    5900: E9 5F 5A 59 5B C3 8B D0 66 C1 E8 10 92 C3 1E 06  // ._ZY[...f.......
    5910: 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F  // fPfQfRfSfUfVfW..
    5920: 0A C0 75 06 E8 07 01 E9 A8 00 3C 01 75 06 E8 37  // ..u.......<.u..7
    5930: 01 E9 9E 00 3C 02 75 06 E8 5F 02 E9 94 00 3C 03  // ....<.u.._....<.
    5940: 75 0B E8 91 03 8B EC 89 5E 0C E9 85 00 3C 04 75  // u.......^....<.u
    5950: 02 EB 7D 3C 05 75 0A E8 0E 04 8B EC 89 56 10 EB  // ..}<.u.......V..
    5960: 71 3C 06 75 10 E8 8C 03 8B EC 89 5E 0C 89 4E 14  // q<.u.......^..N.
    5970: 89 56 10 EB 5D 3C 07 75 02 EB 55 3C 08 75 0A E8  // .V..]<.u..U<.u..
    5980: D0 03 8B EC 88 7E 0D EB 49 3C 09 75 02 EB 41 3C  // .....~..I<.u..A<
    5990: 0A 75 10 E8 65 04 8B EC 89 4E 14 89 7E 00 8C 46  // .u..e....N..~..F
    59A0: 1C EB 2F 3C 0B 75 02 EB 27 3C 10 75 0A E8 5A 04  // ../<.u..'<.u..Z.
    59B0: 8B EC 89 5E 0C EB 1B 3C 11 75 02 EB 13 3C 15 75  // ...^...<.u...<.u
    59C0: 0F E8 80 04 8B EC 89 5E 0C EB 07 B8 4F 01 EB 02  // .......^....O...
    59D0: 32 C0 8B EC 89 46 18 66 5F 66 5E 66 5D 66 5B 66  // 2....F.f_f^f]f[f
    59E0: 5A 66 59 66 58 07 1F C3 50 1E 2E 8E 1E 76 24 8C  // ZfYfX...P....v$.
    59F0: D8 A3 50 69 A3 60 69 A3 72 69 2E 8E 1E 6E 24 A3  // ..Pi.`i.ri...n$.
    5A00: AA 04 1F 58 CB 00 30 31 2E 30 30 00 56 45 53 41  // ...X..01.00.VESA
    5A10: 00 03 D4 01 00 00 01 00 00 00 00 00 00 00 00 03  // ................
    5A20: 11 20 F1 00 00 00 82 00 00 00 9E 59 00 00 B9 3F  // . .........Y...?
    5A30: 00 8B DF 83 C7 04 FC 66 33 C0 F3 66 AB 8B FB BE  // .......f3..f....
    5A40: A4 59 B9 22 00 F3 A4 06 1F 8C 4F 08 8C 47 10 8C  // .Y."......O..G..
    5A50: 4F 18 8C 4F 1C 8C 4F 20 83 C7 22 89 7F 0E 0E 1F  // O..O..O ..".....
    5A60: E8 8F DD B0 4F 32 E4 C3 56 51 57 B9 10 00 66 33  // ....O2..VQW...f3
    5A70: C0 F3 66 AB 5F 59 8C DB 06 1F C7 05 BB 00 C6 45  // ..f._Y.........E
    5A80: 02 07 C7 45 04 40 00 C7 45 06 40 00 C6 45 1B 06  // ...E.@..E.@..E..
    5A90: C6 45 18 01 C6 45 1A 01 C6 45 1E 01 66 C7 45 3E  // .E...E...E..f.E>
    5AA0: 00 84 D7 17 8E DB E8 5D D6 66 0B C0 0F 84 E1 00  // .......].f......
    5AB0: 06 1F 66 89 45 28 8C C8 66 C1 E0 10 B8 5D 5D 66  // ..f.E(..f....]]f
    5AC0: 89 45 0C 81 F9 FF 81 0F 84 C2 00 80 E5 03 B2 01  // .E..............
    5AD0: 53 8E DB BE 80 4C E8 3B DB 5B 06 1F 0F 84 B1 00  // S....L.;.[......
    5AE0: 53 E8 B7 DD 66 89 45 12 C7 45 16 08 10 8D 5C 0C  // S...f.E..E....\.
    5AF0: E8 8E E8 66 89 45 1F 66 89 45 36 8D 5C 10 E8 80  // ...f.E.f.E6.\...
    5B00: E8 66 89 45 23 66 89 45 3A 8D 5C 08 E8 72 E8 0A  // .f.E#f.E:.\..r..
    5B10: C0 75 03 5B EB 7B E8 82 DD 66 C1 E8 10 3D 58 02  // .u.[.{...f...=X.
    5B20: 74 0D 3D 5E 01 74 08 77 0A C6 45 17 08 EB 04 C6  // t.=^.t.w..E.....
    5B30: 45 17 0E 2E A1 70 24 89 45 08 8D 5C 04 E8 41 E8  // E....p$.E..\..A.
    5B40: 66 8B C8 66 C1 E9 10 D3 E0 89 45 10 89 45 32 B0  // f..f......E..E2.
    5B50: 08 D2 E0 88 45 19 8D 5C 14 E8 25 E8 5B 3D 00 03  // ....E..\..%.[=..
    5B60: 77 2F 53 8B D8 B8 00 03 33 D2 F7 F3 5B FE C8 88  // w/S.....3...[...
    5B70: 45 1D 88 45 35 88 45 34 8E DB 57 53 BE 80 4C E8  // E..E5.E4..WS..L.
    5B80: ED D5 5B 5F 0B C9 75 05 06 1F 83 25 FE 32 E4 EB  // ..[_..u....%.2..
    5B90: 02 B4 03 B0 4F 8E DB 5E C3 00 81 FB FF 81 74 68  // ....O..^......th
    5BA0: 0A FF 75 04 8B C3 EB 21 F6 C7 08 75 61 8B CB B2  // ..u....!...ua...
    5BB0: 01 BE 20 4C E8 5D DA 74 55 E8 BE DC 0A C0 75 0E  // .. L.].tU.....u.
    5BC0: 66 C1 E8 10 80 E7 80 0A C7 E8 D5 02 EB 3A E8 12  // f............:..
    5BD0: D8 74 06 E8 A1 D6 E8 8D D1 BE 20 4C E8 64 D5 74  // .t........ L.d.t
    5BE0: 2D E8 A5 00 E8 2C 00 66 BB 20 4C 00 4C E8 81 DC  // -....,.f. L.L...
    5BF0: BE 00 4C E8 84 DC 66 C1 E8 10 8B D8 32 C0 F6 C7  // ..L...f.....2...
    5C00: 80 74 02 B0 40 E8 94 D5 B0 4F 32 E4 EB 04 B0 4F  // .t..@....O2....O
    5C10: B4 03 C3 56 06 33 C0 8E C0 BE 20 4C E8 7C DC 8B  // ...V.3.... L.|..
    5C20: C8 66 C1 E8 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1  // .f........&..J..
    5C30: EA 04 FE CA 26 88 16 84 04 26 C6 06 51 04 00 26  // ....&....&..Q..&
    5C40: C6 06 50 04 00 26 C6 06 49 04 62 26 C7 06 4C 04  // ..P..&..I.b&..L.
    5C50: 00 A0 26 C6 06 85 04 10 26 C7 06 0C 01 29 73 8C  // ..&.....&....)s.
    5C60: C8 26 A3 0E 01 07 5E C3 01 0F 00 0A 00 00 00 00  // .&....^.........
    5C70: 00 40 05 0F FF 00 01 02 03 04 05 06 07 08 09 0A  // .@..............
    5C80: 0B 0C 0D 0E 0F 01 00 0F 00 FC BA C4 03 B8 00 01  // ................
    5C90: EF B9 04 00 B4 01 BE 00 5C AC 86 E0 EF 8A E0 FE  // ........\.......
    5CA0: C4 E2 F6 B8 00 03 EF B9 09 00 BA CE 03 32 E4 BE  // .............2..
    5CB0: 04 5C 8A C4 EE AC 42 EE 4A FE C4 E2 F5 BA DA 03  // .\....B.J.......
    5CC0: EC B9 14 00 BA C0 03 32 E4 BE 0D 5C 8A C4 EE AC  // .......2...\....
    5CD0: EE FE C4 E2 F7 C3 BE 00 4C E8 9E DB 66 C1 E8 10  // ........L...f...
    5CE0: 8B D8 E8 6E DB 75 05 E8 5A DB 75 04 B8 4F 00 C3  // ...n.u..Z.u..O..
    5CF0: B8 4F 03 C3 E8 5C DB 74 53 BE 00 4C 80 FB 00 74  // .O...\.tS..L...t
    5D00: 18 80 FB 01 75 05 E8 9A DB EB 1D 80 FB 02 75 10  // ....u.........u.
    5D10: 8B C1 E8 4D DB D3 E8 8B C8 E8 27 D6 74 2E EB 08  // ...M......'.t...
    5D20: 80 FB 03 75 24 E8 F1 DA E8 37 DB 8B D8 D3 E3 50  // ...u$....7.....P
    5D30: 33 C0 BA 00 03 3B DA 77 05 BA FF FF EB 04 F7 F3  // 3....;.w........
    5D40: 8B D0 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03  // ..X...O..2...O..
    5D50: C3 00 0A DB 75 07 8A EF E8 F0 D6 EB 05 E8 D5 D6  // ....u...........
    5D60: 8A F8 B0 4F 32 E4 C3 00 E8 E8 DA 74 2C BE 00 4C  // ...O2......t,..L
    5D70: E8 07 DB 66 C1 E8 10 F6 C4 40 75 1D 0A FF 75 05  // ...f.....@u...u.
    5D80: E8 1E 00 EB 0F 80 FF 01 75 14 BB 13 00 E8 BF E5  // ........u.......
    5D90: D1 E8 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0  // .....O2...O...2.
    5DA0: C3 52 53 66 50 81 E2 FF 02 D1 E2 8B C2 40 66 C1  // .RSfP........@f.
    5DB0: E0 10 8B C2 BB 13 00 E8 F0 E4 BB 12 00 E8 EA E4  // ................
    5DC0: 66 58 5B 5A C3 9C 1E 06 66 50 66 51 66 52 66 53  // fX[Z....fPfQfRfS
    5DD0: 66 55 66 56 66 57 0E 1F E8 08 E6 E8 8A FF E8 27  // fUfVfW.........'
    5DE0: E6 8B EC 89 56 10 89 46 18 66 5F 66 5E 66 5D 66  // ....V..F.f_f^f]f
    5DF0: 5B 66 5A 66 59 66 58 07 1F 9D CB 0E 07 BF 2C A1  // [fZfYfX.......,.
    5E00: 2E 8B 0E 2A A1 B8 4F 00 C3 00 0A DB 75 06 B7 04  // ...*..O.....u...
    5E10: B3 10 EB 26 80 FB 01 75 14 E8 C7 D5 75 21 53 B1  // ...&...u....u!S.
    5E20: 01 0A FF 74 02 B1 00 E8 E1 D4 5B EB 0D 80 FB 02  // ...t......[.....
    5E30: 75 0D E8 F4 D5 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8  // u..........O2...
    5E40: 4F 03 C3 00 80 E3 01 0A DB 75 05 BB 02 01 EB 0E  // O........u......
    5E50: E8 90 D5 75 0E 33 C0 53 E8 17 C9 5B 74 05 B0 4F  // ...u.3.S...[t..O
    5E60: 32 E4 C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD 42 C3  // 2...O......r..B.
    5E70: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
    5E80: 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 4A 5E  // ..P.......X...J^
    5E90: 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F  // f_f^f]f[fZfYfX..
    5EA0: C3 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 4A  // ...P.......X...J
    5EB0: 5E C3 84 5E 94 97 AD 97 CA 97 77 5F CD 8E FF 8E  // ^..^......w_....
    5EC0: 72 8F F5 8F 83 91 87 91 90 94 61 95 E4 95 4B 96  // r.........a...K.
    5ED0: E6 97 48 98 F1 9A 90 61 38 9F 38 5E 38 5E 38 5E  // ..H....a8.8^8^8^
    5EE0: 38 5E 38 5E 38 5E 08 A0 0B 84 5F 85 2E 8E 1E 6E  // 8^8^8^...._....n
    5EF0: 24 80 26 87 04 F3 50 8A E0 80 E4 7F E8 C4 01 3B  // $.&...P........;
    5F00: D3 75 02 58 C3 BA CC 03 EC B2 B4 B1 30 26 F6 47  // .u.X........0&.G
    5F10: 09 01 74 0C B2 D4 B1 20 A8 01 75 49 B5 09 EB 06  // ..t.... ..uI....
    5F20: A8 01 74 41 B5 0B 53 E8 6A 41 0A FF 5B 75 0B 80  // ..tA..S.jA..[u..
    5F30: 26 88 04 F0 08 2E 88 04 EB 2B 58 80 0E 87 04 08  // &........+X.....
    5F40: 80 26 10 04 CF 08 0E 10 04 89 16 63 04 C7 06 85  // .&.........c....
    5F50: 04 08 00 C6 06 84 04 18 C7 06 0C 01 16 6B 8C 0E  // .............k..
    5F60: 0E 01 CD 42 C3 80 26 10 04 CF 08 0E 10 04 58 53  // ...B..&.......XS
    5F70: 50 0E 1F 33 C9 8A C8 E8 69 D4 74 06 E8 F8 D2 E8  // P..3....i.t.....
    5F80: E4 CD B2 08 BE 40 4C E8 8A D6 BE 40 4C E8 B3 D1  // .....@L....@L...
    5F90: 58 5B 0F 84 6E FF 2E 8E 1E 6E 24 0E 07 E8 13 29  // X[..n....n$....)
    5FA0: 0E 1F 53 66 BB 40 4C 00 4C E8 C5 D8 BE 00 4C B0  // ..Sf.@L.L.....L.
    5FB0: 20 E8 E8 D1 5B 2E 8E 1E 6E 24 0E 07 E8 1C 2E E8  //  ...[...n$......
    5FC0: 24 00 E8 28 3D E8 D1 01 E8 8E 01 E8 AE 3E 0E 1F  // $..(=........>..
    5FD0: BE 00 4C B0 10 E8 C4 D1 E8 F7 2D E8 EF 2D C3 8B  // ..L.......-..-..
    5FE0: EC C6 46 1B 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8  // ..F..../........
    5FF0: 52 00 E8 5C 0A C3 53 83 C3 0A 8B 16 63 04 B9 19  // R..\..S.....c...
    6000: 00 B8 11 30 EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7  // ...0.2.&.'.C....
    6010: 5B 80 C2 06 32 C0 EE C3 53 BA C4 03 83 C3 05 B9  // [...2...S.......
    6020: 04 00 B0 01 26 8A 27 3C 01 75 03 80 CC 20 EF 43  // ....&.'<.u... .C
    6030: FE C0 E2 F0 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8  // ....[&.G........
    6040: 00 03 EF C3 8B F3 83 C6 23 BA DA 03 26 F6 47 09  // ........#...&.G.
    6050: 01 75 02 B2 BA F6 06 89 04 08 74 1D 83 C6 10 EC  // .u........t.....
    6060: B9 04 00 B4 10 B2 C0 80 FC 11 74 07 8A C4 EE 26  // ..........t....&
    6070: 8A 04 EE 46 FE C4 E2 EF C3 53 EC 8B DE B9 14 00  // ...F.....S......
    6080: 32 E4 B2 C0 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4  // 2........&...C..
    6090: 8A C4 EE 32 C0 EE 1E 06 E8 49 2D 0B ED 74 09 1F  // ...2.....I-..t..
    60A0: 1E B9 10 00 F3 A4 46 A4 07 1F 5B C3 53 83 C3 37  // ......F...[.S..7
    60B0: B9 09 00 32 C0 BA CE 03 26 8A 27 EF 43 FE C0 E2  // ...2....&.'.C...
    60C0: F7 5B C3 BB 4E 63 0E 07 8B D3 0A E4 7D 01 C3 E8  // .[..Nc......}...
    60D0: 01 00 C3 33 F6 80 FC 03 7F 3C 4A F6 06 89 04 10  // ...3.....<J.....
    60E0: 75 20 A0 88 04 24 0F 3C 02 7E 24 3C 08 74 20 3C  // u ...$.<.~$<.t <
    60F0: 06 74 1C 3C 07 74 18 B0 40 F6 E4 03 D8 81 C3 00  // .t.<.t..@.......
    6100: 04 C3 B0 40 D0 EC F6 E4 03 D8 81 C3 80 04 C3 B0  // ...@............
    6110: 40 F6 E4 03 D8 C3 80 FC 07 75 11 F6 06 89 04 10  // @........u......
    6120: 75 05 81 C3 00 01 C3 81 C3 00 05 C3 BF D0 60 BE  // u.............`.
    6130: F1 60 33 C9 E8 4E 00 C3 04 80 00 05 80 00 06 C0  // .`3..N..........
    6140: 00 0D 80 02 0E C0 02 0F 80 03 10 C0 03 11 40 05  // ..............@.
    6150: 12 80 05 13 C0 05 62 40 01 53 8A 1E 49 04 80 FB  // ......b@.S..I...
    6160: 07 7F 10 32 FF D1 E3 2E 8B 87 0D 61 A2 65 04 88  // ...2.......a.e..
    6170: 26 66 04 5B C3 2C 30 28 30 2D 30 29 30 2A 30 2E  // &f.[.,0(0-0)0*0.
    6180: 30 1E 3F 29 30 2E 38 25 75 07 2E 03 5D 01 33 F6  // 0.?)0.8%u...].3.
    6190: C3 83 C7 03 3B FE 75 ED C3 1E 06 2E 8E 1E 6E 24  // ....;.u.......n$
    61A0: F6 06 87 04 80 75 49 83 3E 4C 04 00 74 42 A0 49  // .....uI.>L..tB.I
    61B0: 04 B9 00 20 2E 8B 3E 74 24 26 F6 47 33 01 75 0E  // ... ..>t$&.G3.u.
    61C0: 26 F6 47 09 01 75 1B 2E 8B 3E 72 24 EB 14 3C 06  // &.G..u...>r$..<.
    61D0: 7E 0B 2E 8B 3E 70 24 26 8A 67 37 B5 40 66 33 C0  // ~...>p$&.g7.@f3.
    61E0: EB 06 66 B8 20 07 20 07 8E C7 66 33 FF F3 66 AB  // ..f. . ...f3..f.
    61F0: 80 26 87 04 7F 07 1F C3 2E 8E 1E 6E 24 80 FB 10  // .&.........n$...
    6200: 75 03 E9 7A 01 80 FB 20 75 03 E9 9B 01 80 FB 32  // u..z... u......2
    6210: 75 1F BA CC 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9  // u......u........
    6220: F3 00 FE C8 0F 85 F3 00 EC 24 FD B2 C2 EE E9 E4  // .........$......
    6230: 00 80 FB 35 75 28 3C 80 75 08 80 0E 89 04 40 E9  // ...5u(<.u.....@.
    6240: D3 00 F6 06 89 04 40 0F 84 D0 00 0A C0 0F 84 CA  // ......@.........
    6250: 00 FE C8 75 06 E8 98 07 E9 BA 00 E9 BD 00 80 FB  // ...u............
    6260: 30 74 03 E9 96 00 50 E8 2A 3E 8A EF BA CC 03 EC  // 0t....P.*>......
    6270: 8A C8 58 0A C0 75 30 B7 08 F6 C1 01 75 12 0A ED  // ..X..u0.....u...
    6280: 75 0B A0 10 04 24 30 3C 30 75 10 B7 02 E9 8B 00  // u....$0<0u......
    6290: A0 10 04 24 30 3C 30 75 02 B7 02 80 26 89 04 6F  // ...$0<0u....&..o
    62A0: 80 0E 89 04 80 EB 36 3C 01 75 41 80 26 89 04 6F  // ......6<.uA.&..o
    62B0: B7 09 F6 C1 01 75 15 B7 0B A0 10 04 24 30 3C 30  // .....u......$0<0
    62C0: 74 1B B7 09 0A ED 74 15 B7 05 EB 11 A0 10 04 24  // t.....t........$
    62D0: 30 3C 30 75 08 B7 0B 0A ED 74 02 B7 03 8A 1E 88  // 0<0u.....t......
    62E0: 04 80 E3 F0 0A DF 88 1E 88 04 EB 29 3C 02 75 2B  // ...........)<.u+
    62F0: 80 26 89 04 6F 80 0E 89 04 10 EB B4 80 FB 31 75  // .&..o.........1u
    6300: 1B 0A C0 74 0B 3C 01 75 0C 80 0E 89 04 08 EB 05  // ...t.<.u........
    6310: 80 26 89 04 F7 8B EC C6 46 1A 12 C3 80 FB 33 75  // .&......F.....3u
    6320: 16 3C 00 74 0B 3C 01 75 EC 80 26 89 04 FD EB E5  // .<.t.<.u..&.....
    6330: 80 0E 89 04 02 EB DE 80 FB 34 75 17 3C 00 75 07  // .........4u.<.u.
    6340: 80 26 87 04 FE EB CE 3C 01 75 07 80 0E 87 04 01  // .&.....<.u......
    6350: EB C3 C3 80 FB 36 75 26 BB 20 FF 3C 01 74 09 BB  // .....6u&. .<.t..
    6360: 00 DF 3C 00 74 02 EB AD E8 02 00 EB A8 9C FA BA  // ..<.t...........
    6370: C4 03 B0 01 EE 42 EC 22 C7 0A C3 EE 9D C3 C3 B3  // .....B."........
    6380: 03 B7 00 BA CC 03 EC A8 01 75 02 B7 01 A0 88 04  // .........u......
    6390: 8A E0 B1 04 D2 EC 25 0F 0F 8B C8 8B EC 89 5E 0E  // ......%.......^.
    63A0: 89 4E 16 C6 46 1A 12 C3 9C FA C7 06 14 00 F8 88  // .N..F...........
    63B0: 8C 0E 16 00 9D C3 28 18 08 00 08 09 03 00 02 63  // ......(........c
    63C0: 2D 27 28 90 2B A0 BF 1F 00 C7 06 07 00 00 00 00  // -'(.+...........
    63D0: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 06  // ................
    63E0: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  // ................
    63F0: 00 00 10 0E 00 FF 50 18 08 00 10 01 03 00 02 63  // ......P........c
    6400: 5F 4F 50 82 55 81 BF 1F 00 C7 06 07 00 00 00 00  // _OP.U...........
    6410: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 06  // ...(............
    6420: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  // ................
    6430: 00 00 10 0E 00 FF 28 18 08 00 40 09 03 00 02 63  // ......(...@....c
    6440: 2D 27 28 90 2B 80 BF 1F 00 C1 00 00 00 00 00 00  // -'(.+...........
    6450: 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15 17 02 04 06  // ................
    6460: 07 10 11 12 13 14 15 16 17 01 00 03 00 00 00 00  // ................
    6470: 00 00 30 0F 00 FF 50 18 08 00 40 01 01 00 06 63  // ..0...P...@....c
    6480: 5F 4F 50 82 54 80 BF 1F 00 C1 00 00 00 00 00 00  // _OP.T...........
    6490: 9C 8E 8F 28 00 96 B9 C2 FF 00 17 17 17 17 17 17  // ...(............
    64A0: 17 17 17 17 17 17 17 17 17 01 00 01 00 00 00 00  // ................
    64B0: 00 00 00 0D 00 FF 50 18 0E 00 10 00 03 00 03 A6  // ......P.........
    64C0: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  // _OP.U....M......
    64D0: 83 85 5D 28 0D 63 BA A3 FF 00 08 08 08 08 08 08  // ..](.c..........
    64E0: 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00  // ................
    64F0: 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 0A E3  // ......P.........
    6500: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    6510: EA 8C DF 50 00 E7 04 E3 FF 00 01 02 03 04 05 06  // ...P............
    6520: 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 10 00 00  // ................
    6530: 00 00 40 05 0F FF 00 05 11 1C 08 0B 14 28 0E 18  // ..@..........(..
    6540: 2D 32 20 24 38 3F 00 05 08 0B 0E 11 14 18 1C 20  // -2 $8?......... 
    6550: 24 28 2D 32 38 3F 07 0C 10 15 1A 18 16 15 13 1C  // $(-28?..........
    6560: 25 2F 38 33 2E 2A 25 27 29 2A 2C 23 19 10 23 25  // %/83.*%')*,#..#%
    6570: 27 2A 2C 2B 2A 29 29 2D 32 37 3B 39 37 34 32 33  // '*,+*))-27;97423
    6580: 34 35 35 31 2C 27 2F 30 32 33 34 34 33 33 32 35  // 4551,'/023443325
    6590: 38 3A 3D 3C 3A 39 38 38 39 39 3A 37 34 31 03 05  // 8:=<:98899:741..
    65A0: 07 09 0B 0B 0A 09 08 0D 11 15 19 17 15 13 11 11  // ................
    65B0: 12 13 14 0F 0B 07 10 10 12 13 14 13 13 13 12 14  // ................
    65C0: 16 18 1A 19 18 17 16 17 17 17 18 15 14 11 15 15  // ................
    65D0: 16 17 17 17 17 17 16 18 19 1A 1B 1B 1A 19 19 19  // ................
    65E0: 19 19 1A 18 17 16 02 03 04 05 07 06 06 05 05 07  // ................
    65F0: 0A 0C 0E 0D 0C 0B 09 0A 0A 0B 0B 09 06 04 09 09  // ................
    6600: 0A 0B 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D  // ................
    6610: 0D 0D 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D  // ................
    6620: 0E 0F 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C 00 00  // ................
    6630: 00 00 00 00 00 00 28 18 08 00 20 09 0F 00 06 63  // ......(... ....c
    6640: 2D 27 28 90 2B 80 BF 1F 00 C0 00 00 00 00 00 00  // -'(.+...........
    6650: 9C 8E 8F 14 00 96 B9 E3 FF 00 01 02 03 04 05 06  // ................
    6660: 07 10 11 12 13 14 15 16 17 01 00 0F 00 00 00 00  // ................
    6670: 00 00 00 05 0F FF 50 18 08 00 40 01 0F 00 06 63  // ......P...@....c
    6680: 5F 4F 50 82 54 80 BF 1F 00 C0 00 00 00 00 00 00  // _OP.T...........
    6690: 9C 8E 8F 28 00 96 B9 E3 FF 00 01 02 03 04 05 06  // ...(............
    66A0: 07 10 11 12 13 14 15 16 17 01 00 0F 00 00 00 00  // ................
    66B0: 00 00 00 05 0F FF 00 05 11 1C 08 0B 25 28 02 07  // ............%(..
    66C0: 1B 20 0F 14 28 2C 0C 11 25 2A 14 1E 32 36 0F 13  // . ..(,..%*..26..
    66D0: 27 2C 1B 20 34 39 06 0B 1F 24 13 18 2C 30 09 0D  // ',. 49...$..,0..
    66E0: 21 26 15 1A 2E 33 13 17 2B 30 1F 24 38 3D 0E 18  // !&...3..+0.$8=..
    66F0: 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05  // -2 $8?..........
    6700: 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18  // ........-2 $8?..
    6710: 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05  // -2 $8?..........
    6720: 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18  // ........-2 $8?..
    6730: 2D 32 20 24 38 3F 50 18 0E 00 80 01 0F 00 06 A2  // -2 $8?P.........
    6740: 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00  // _OP.T....@......
    6750: 83 85 5D 28 0F 63 BA E3 FF 00 08 00 00 18 18 00  // ..](.c..........
    6760: 00 00 08 00 00 00 18 00 00 0B 00 05 00 00 00 00  // ................
    6770: 00 00 00 05 05 FF 50 18 0E 00 80 01 0F 00 06 A3  // ......P.........
    6780: 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00  // _OP.T....@......
    6790: 83 85 5D 28 0F 63 BA E3 FF 00 01 02 03 04 05 14  // ..](.c..........
    67A0: 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00  // .89:;<=>?.......
    67B0: 00 00 00 05 0F FF 28 18 0E 00 08 09 03 00 02 A3  // ......(.........
    67C0: 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00  // -'(.+....M......
    67D0: 83 85 5D 14 1F 63 BA A3 FF 00 01 02 03 04 05 14  // ..]..c..........
    67E0: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  // .89:;<=>?.......
    67F0: 00 00 10 0E 00 FF 50 18 0E 00 10 01 03 00 02 A3  // ......P.........
    6800: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  // _OP.U....M......
    6810: 83 85 5D 28 1F 63 BA A3 FF 00 01 02 03 04 05 14  // ..](.c..........
    6820: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  // .89:;<=>?.......
    6830: 00 00 10 0E 00 FF 28 18 10 00 08 08 03 00 02 67  // ......(........g
    6840: 2D 27 28 90 2B A0 BF 1F 00 4F 0D 0E 00 00 00 00  // -'(.+....O......
    6850: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 14  // ................
    6860: 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00  // .89:;<=>?.......
    6870: 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00 02 67  // ......P........g
    6880: 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00  // _OP.U....O......
    6890: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 14  // ...(............
    68A0: 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00  // .89:;<=>?.......
    68B0: 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00 02 66  // ......P........f
    68C0: 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00  // _OP.U....O......
    68D0: 9C 8E 8F 28 0F 96 B9 A3 FF 00 08 08 08 08 08 08  // ...(............
    68E0: 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00  // ................
    68F0: 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 06 E3  // ......P.........
    6900: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    6910: EA 8C DF 28 00 E7 04 C3 FF 00 3F 3F 3F 3F 3F 3F  // ...(......??????
    6920: 3F 3F 3F 3F 3F 3F 3F 3F 3F 01 00 0F 00 00 00 00  // ?????????.......
    6930: 00 00 00 05 01 FF 50 1D 10 00 A0 01 0F 00 06 E3  // ......P.........
    6940: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    6950: EA 8C DF 28 00 E7 04 E3 FF 00 01 02 03 04 05 14  // ...(............
    6960: 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00  // .89:;<=>?.......
    6970: 00 00 00 05 0F FF 28 18 08 00 20 01 0F 00 0E 63  // ......(... ....c
    6980: 5F 4F 50 82 54 80 BF 1F 00 41 00 00 00 00 00 00  // _OP.T....A......
    6990: 9C 8E 8F 28 40 96 B9 A3 FF 00 01 02 03 04 05 06  // ...(@...........
    69A0: 07 08 09 0A 0B 0C 0D 0E 0F 41 00 0F 00 00 00 00  // .........A......
    69B0: 00 00 40 05 0F FF 4E 63 00 C0 00 00 00 00 00 00  // ..@...Nc........
    69C0: 00 00 00 00 00 00 6E 69 00 C0 00 00 00 00 00 00  // ......ni........
    69D0: 00 00 00 00 00 00 1A 00 06 A1 00 C0 00 00 00 00  // ................
    69E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    69F0: 1E E8 10 00 2E 8E 1E 6E 24 E8 F8 36 E8 CF 36 E8  // .......n$..6..6.
    6A00: 70 1A 1F C3 2E 8E 1E 6E 24 C7 06 87 04 60 F9 C6  // p......n$....`..
    6A10: 06 8A 04 0B A0 89 04 0C 11 24 17 A2 89 04 B4 01  // .........$......
    6A20: E8 6D 1E A0 89 04 80 26 10 04 CF 80 0E 10 04 20  // .m.....&....... 
    6A30: C7 06 63 04 D4 03 0E 1F E8 89 C3 F7 C1 02 00 75  // ..c............u
    6A40: 03 E8 22 C3 C3 1E 2E 8E 1E 6E 24 0E 07 EB 00 1F  // .."......n$.....
    6A50: C3 F6 06 89 04 08 74 01 C3 53 BA C8 03 EC B0 FF  // ......t..S......
    6A60: B2 C6 EE B2 C8 80 3E 63 04 B4 75 2F BE CA 6A B9  // ......>c..u/..j.
    6A70: 40 00 33 DB 9C FA 8A C3 EE 8B FB C1 EF 03 83 E7  // @.3.............
    6A80: 03 03 FE 2E 8A 05 42 EE 2E 8A 45 04 EE 2E 8A 45  // ......B...E....E
    6A90: 08 EE FE C3 4A E2 DF 9D E9 85 00 26 8A 47 2B F6  // ....J......&.G+.
    6AA0: 06 89 04 06 74 31 B9 F8 00 BF CE 64 3C 08 74 11  // ....t1.....d<.t.
    6AB0: B9 40 00 BF 4E 66 3C 38 74 07 3C 3F 74 03 BF 8E  // .@..Nf<8t.<?t...
    6AC0: 66 33 DB 9C FA 8A C3 EE 2E 8A 01 42 EE EE EE FE  // f3.........B....
    6AD0: C3 4A E2 F1 9D EB 49 3C 08 74 25 3C 38 74 2E 3C  // .J....I<.t%<8t.<
    6AE0: 3F 74 2A B9 08 00 33 DB 51 E8 46 D3 B9 08 00 F7  // ?t*...3.Q.F.....
    6AF0: C3 10 00 74 03 83 C7 18 E8 67 00 59 E2 EA EB 20  // ...t.....g.Y... 
    6B00: E8 2F D3 B9 10 00 33 DB E8 57 00 EB 13 B9 40 00  // ./....3..W....@.
    6B10: 33 DB 51 E8 28 00 8A C3 E8 B7 2F FE C3 59 E2 F2  // 3.Q.(...../..Y..
    6B20: 5B C3 00 2A 00 2A 00 2A 00 2A 15 3F 15 3F 15 3F  // [..*.*.*.*.?.?.?
    6B30: 15 3F 00 2A 00 3F 00 2A 00 3F 00 2A 00 3F 8B FB  // .?.*.?.*.?.*.?..
    6B40: C1 EF 02 83 E7 0F 2E 8A B5 BA 6A 8B FB D1 EF 83  // ..........j.....
    6B50: E7 0F 2E 8A AD BA 6A 8B FB 83 E7 0F 2E 8A 8D BA  // ......j.........
    6B60: 6A C3 9C 8A C3 FA EE 2E 8A 05 42 EE 47 2E 8A 05  // j.........B.G...
    6B70: EE 47 2E 8A 05 EE 47 FE C3 4A E2 E7 9D C3 00 00  // .G....G..J......
    6B80: 00 00 00 00 00 00 7E 81 A5 81 BD 99 81 7E 7C FE  // ......~......~|.
    6B90: D6 BA C6 FE 7C 00 C6 EE FE FE 7C 38 10 00 10 38  // ....|.....|8...8
    6BA0: 7C FE 7C 38 10 00 10 38 10 EE EE 10 38 00 38 7C  // |.|8...8....8.8|
    6BB0: FE FE 6C 10 38 00 00 18 3C 7E 3C 18 00 00 FF E7  // ..l.8...<~<.....
    6BC0: C3 81 C3 E7 FF FF 00 18 3C 66 66 3C 18 00 FF E7  // ........<ff<....
    6BD0: C3 99 99 C3 E7 FF 1E 0E 1E 36 78 CC CC 78 7E C3  // .........6x..x~.
    6BE0: C3 7E 18 7E 18 18 1E 1A 1E 18 18 70 F0 60 3E 3E  // .~.~.......p.`>>
    6BF0: 36 36 F6 66 1E 0C DB 3C 66 E7 66 3C DB 00 80 C0  // 66.f...<f.f<....
    6C00: F0 F8 F0 C0 80 00 02 06 1E 3E 1E 06 02 00 18 3C  // .........>.....<
    6C10: 7E 18 7E 3C 18 00 66 66 66 66 66 00 66 00 7F DB  // ~.~<..fffff.f...
    6C20: 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C 38 CC 78 00 00  // {;....<f8ll8.x..
    6C30: 00 00 FE FE FE 00 18 3C 7E 18 7E 3C 18 7E 18 3C  // .......<~.~<.~.<
    6C40: 7E 18 18 18 18 00 18 18 18 18 7E 3C 18 00 00 18  // ~.........~<....
    6C50: 1C FE 1C 18 00 00 00 30 70 FE 70 30 00 00 00 00  // .......0p.p0....
    6C60: C0 C0 C0 FE 00 00 00 24 66 FF 66 24 00 00 00 10  // .......$f.f$....
    6C70: 38 7C 7C FE 00 00 00 FE 7C 7C 38 10 00 00 00 00  // 8||.....||8.....
    6C80: 00 00 00 00 00 00 18 3C 3C 18 18 00 18 00 6C 6C  // .......<<.....ll
    6C90: 6C 00 00 00 00 00 6C 6C FE 6C FE 6C 6C 00 18 7E  // l.....ll.l.ll..~
    6CA0: C0 7C 06 FC 18 00 00 C6 0C 18 30 60 C6 00 38 6C  // .|........0`..8l
    6CB0: 38 76 CC CC 76 00 18 18 30 00 00 00 00 00 18 30  // 8v..v...0......0
    6CC0: 60 60 60 30 18 00 60 30 18 18 18 30 60 00 00 EE  // ```0..`0...0`...
    6CD0: 7C FE 7C EE 00 00 00 18 18 7E 18 18 00 00 00 00  // |.|......~......
    6CE0: 00 00 18 18 30 00 00 00 00 FE 00 00 00 00 00 00  // ....0...........
    6CF0: 00 00 00 38 38 00 06 0C 18 30 60 C0 80 00 7C C6  // ...88....0`...|.
    6D00: CE DE F6 E6 7C 00 18 78 18 18 18 18 7E 00 7C C6  // ....|..x....~.|.
    6D10: 0C 18 30 66 FE 00 7C C6 06 3C 06 C6 7C 00 0C 1C  // ..0f..|..<..|...
    6D20: 3C 6C FE 0C 0C 00 FE C0 FC 06 06 C6 7C 00 7C C6  // <l..........|.|.
    6D30: C0 FC C6 C6 7C 00 FE C6 06 0C 18 18 18 00 7C C6  // ....|.........|.
    6D40: C6 7C C6 C6 7C 00 7C C6 C6 7E 06 C6 7C 00 00 1C  // .|..|.|..~..|...
    6D50: 1C 00 00 1C 1C 00 00 18 18 00 00 18 18 30 0C 18  // .............0..
    6D60: 30 60 30 18 0C 00 00 00 FE 00 00 FE 00 00 60 30  // 0`0...........`0
    6D70: 18 0C 18 30 60 00 7C C6 06 0C 18 00 18 00 7C C6  // ...0`.|.......|.
    6D80: C6 DE DC C0 7E 00 38 6C C6 C6 FE C6 C6 00 FC 66  // ....~.8l.......f
    6D90: 66 7C 66 66 FC 00 3C 66 C0 C0 C0 66 3C 00 F8 6C  // f|ff..<f...f<..l
    6DA0: 66 66 66 6C F8 00 FE C2 C0 F8 C0 C2 FE 00 FE 62  // fffl...........b
    6DB0: 60 7C 60 60 F0 00 7C C6 C0 C0 DE C6 7C 00 C6 C6  // `|``..|.....|...
    6DC0: C6 FE C6 C6 C6 00 3C 18 18 18 18 18 3C 00 3C 18  // ......<.....<.<.
    6DD0: 18 18 D8 D8 70 00 C6 CC D8 F0 D8 CC C6 00 F0 60  // ....p..........`
    6DE0: 60 60 60 62 FE 00 C6 EE FE D6 D6 C6 C6 00 C6 E6  // ```b............
    6DF0: E6 F6 DE CE C6 00 7C C6 C6 C6 C6 C6 7C 00 FC 66  // ......|.....|..f
    6E00: 66 7C 60 60 F0 00 7C C6 C6 C6 C6 D6 7C 06 FC C6  // f|``..|.....|...
    6E10: C6 FC D8 CC C6 00 7C C6 C0 7C 06 C6 7C 00 7E 5A  // ......|..|..|.~Z
    6E20: 18 18 18 18 3C 00 C6 C6 C6 C6 C6 C6 7C 00 C6 C6  // ....<.......|...
    6E30: C6 C6 6C 38 10 00 C6 C6 D6 D6 FE EE C6 00 C6 6C  // ..l8...........l
    6E40: 38 38 38 6C C6 00 66 66 66 3C 18 18 3C 00 FE 86  // 888l..fff<..<...
    6E50: 0C 18 30 62 FE 00 7C 60 60 60 60 60 7C 00 C0 60  // ..0b..|`````|..`
    6E60: 30 18 0C 06 02 00 7C 0C 0C 0C 0C 0C 7C 00 10 38  // 0.....|.....|..8
    6E70: 6C C6 00 00 00 00 00 00 00 00 00 00 00 FF 30 30  // l.............00
    6E80: 18 00 00 00 00 00 00 00 78 0C 7C CC 7E 00 E0 60  // ........x.|.~..`
    6E90: 7C 66 66 66 FC 00 00 00 7C C6 C0 C6 7C 00 1C 0C  // |fff....|...|...
    6EA0: 7C CC CC CC 7E 00 00 00 7C C6 FE C0 7C 00 1C 36  // |...~...|...|..6
    6EB0: 30 FC 30 30 78 00 00 00 76 CE C6 7E 06 7C E0 60  // 0.00x...v..~.|.`
    6EC0: 7C 66 66 66 E6 00 18 00 38 18 18 18 3C 00 0C 00  // |fff....8...<...
    6ED0: 1C 0C 0C 0C CC 78 E0 60 66 6C 78 6C E6 00 18 18  // .....x.`flxl....
    6EE0: 18 18 18 18 1C 00 00 00 6C FE D6 D6 C6 00 00 00  // ........l.......
    6EF0: DC 66 66 66 66 00 00 00 7C C6 C6 C6 7C 00 00 00  // .ffff...|...|...
    6F00: DC 66 66 7C 60 F0 00 00 76 CC CC 7C 0C 1E 00 00  // .ff|`...v..|....
    6F10: DC 66 60 60 F0 00 00 00 7C C0 7C 06 7C 00 30 30  // .f``....|.|.|.00
    6F20: FC 30 30 36 1C 00 00 00 CC CC CC CC 76 00 00 00  // .006........v...
    6F30: C6 C6 6C 38 10 00 00 00 C6 C6 D6 FE 6C 00 00 00  // ..l8........l...
    6F40: C6 6C 38 6C C6 00 00 00 C6 C6 CE 76 06 7C 00 00  // .l8l.......v.|..
    6F50: FC 98 30 64 FC 00 0E 18 18 70 18 18 0E 00 18 18  // ..0d.....p......
    6F60: 18 00 18 18 18 00 70 18 18 0E 18 18 70 00 76 DC  // ......p.....p.v.
    6F70: 00 00 00 00 00 00 00 10 38 38 6C 6C FE 00 3C 66  // ........88ll..<f
    6F80: C0 66 3C 18 CC 78 00 C6 00 C6 C6 CE 76 00 0E 00  // .f<..x......v...
    6F90: 7C C6 FE C0 7C 00 7C C6 78 0C 7C CC 7E 00 C6 00  // |...|.|.x.|.~...
    6FA0: 78 0C 7C CC 7E 00 E0 00 78 0C 7C CC 7E 00 38 38  // x.|.~...x.|.~.88
    6FB0: 78 0C 7C CC 7E 00 00 00 7C C0 7C 18 6C 38 7C C6  // x.|.~...|.|.l8|.
    6FC0: 7C C6 FE C0 7C 00 C6 00 7C C6 FE C0 7C 00 E0 00  // |...|...|...|...
    6FD0: 7C C6 FE C0 7C 00 66 00 38 18 18 18 3C 00 7C C6  // |...|.f.8...<.|.
    6FE0: 38 18 18 18 3C 00 00 00 38 18 18 18 3C 00 C6 38  // 8...<...8...<..8
    6FF0: 6C C6 FE C6 C6 00 38 38 00 7C C6 FE C6 00 0E 00  // l.....88.|......
    7000: FE C0 F8 C0 FE 00 00 00 6C 9A 7E D8 6E 00 7E D8  // ........l.~.n.~.
    7010: D8 FE D8 D8 DE 00 7C C6 00 7C C6 C6 7C 00 00 C6  // ......|..|..|...
    7020: 00 7C C6 C6 7C 00 00 E0 00 7C C6 C6 7C 00 7C C6  // .|..|....|..|.|.
    7030: 00 C6 C6 CE 76 00 00 E0 00 C6 C6 CE 76 00 18 00  // ....v.......v...
    7040: 3C 18 18 18 3C 00 C6 38 6C C6 C6 6C 38 00 C6 00  // <...<..8l..l8...
    7050: C6 C6 C6 C6 7C 00 00 18 7E D8 D8 7E 18 00 38 6C  // ....|...~..~..8l
    7060: 60 F0 66 F6 6C 00 C3 66 3C 7E 18 3C 18 00 3E 63  // `.f.l..f<~.<..>c
    7070: 38 0E 63 3E 00 1C 00 3E 61 3C 86 7C 00 1C 0E 00  // 8.c>...>a<.|....
    7080: 78 0C 7C CC 7E 00 1C 00 38 18 18 18 3C 00 00 0E  // x.|.~...8...<...
    7090: 00 7C C6 C6 7C 00 00 0E 00 CC CC DC 76 00 00 FC  // .|..|.......v...
    70A0: 00 BC 66 66 E6 00 FE 00 C6 E6 F6 CE C6 00 3E 00  // ..ff..........>.
    70B0: 3E 60 67 63 3D 00 3E 00 76 CE C6 7E 06 7C 18 00  // >`gc=.>.v..~.|..
    70C0: 18 30 60 66 3C 00 00 00 00 7C 60 60 00 00 00 00  // .0`f<....|``....
    70D0: 00 7C 0C 0C 00 00 C0 CC D8 30 7C 36 0C 3E C0 CC  // .|.......0|6.>..
    70E0: D8 30 6C 3C 7E 0C 18 00 18 18 3C 3C 18 00 00 36  // .0l<~.....<<...6
    70F0: 6C D8 6C 36 00 00 00 D8 6C 36 6C D8 00 00 22 88  // l.l6....l6l...".
    7100: 22 88 22 88 22 88 55 AA 55 AA 55 AA 55 AA DD 77  // ".".".U.U.U.U..w
    7110: DD 77 DD 77 DD 77 18 18 18 18 18 18 18 18 18 18  // .w.w.w..........
    7120: 18 18 F8 18 18 18 18 18 F8 18 F8 18 18 18 36 36  // ..............66
    7130: 36 36 F6 36 36 36 00 00 00 00 FE 36 36 36 00 00  // 66.666.....666..
    7140: F8 18 F8 18 18 18 36 36 F6 06 F6 36 36 36 36 36  // ......66...66666
    7150: 36 36 36 36 36 36 00 00 FE 06 F6 36 36 36 36 36  // 666666.....66666
    7160: F6 06 FE 00 00 00 36 36 36 36 FE 00 00 00 18 18  // ......6666......
    7170: F8 18 F8 00 00 00 00 00 00 00 F8 18 18 18 18 18  // ................
    7180: 18 18 1F 00 00 00 18 18 18 18 FF 00 00 00 00 00  // ................
    7190: 00 00 FF 18 18 18 18 18 18 18 1F 18 18 18 00 00  // ................
    71A0: 00 00 FF 00 00 00 18 18 18 18 FF 18 18 18 18 18  // ................
    71B0: 1F 18 1F 18 18 18 36 36 36 36 37 36 36 36 36 36  // ......6666766666
    71C0: 37 30 3F 00 00 00 00 00 3F 30 37 36 36 36 36 36  // 70?.....?0766666
    71D0: F7 00 FF 00 00 00 00 00 FF 00 F7 36 36 36 36 36  // ...........66666
    71E0: 37 30 37 36 36 36 00 00 FF 00 FF 00 00 00 36 36  // 707666........66
    71F0: F7 00 F7 36 36 36 18 18 FF 00 FF 00 00 00 36 36  // ...666........66
    7200: 36 36 FF 00 00 00 00 00 FF 00 FF 18 18 18 00 00  // 66..............
    7210: 00 00 FF 36 36 36 36 36 36 36 3F 00 00 00 18 18  // ...6666666?.....
    7220: 1F 18 1F 00 00 00 00 00 1F 18 1F 18 18 18 00 00  // ................
    7230: 00 00 3F 36 36 36 36 36 36 36 FF 36 36 36 18 18  // ..?6666666.666..
    7240: FF 18 FF 18 18 18 18 18 18 18 F8 00 00 00 00 00  // ................
    7250: 00 00 1F 18 18 18 FF FF FF FF FF FF FF FF 00 00  // ................
    7260: 00 00 FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 0F 0F  // ................
    7270: 0F 0F 0F 0F 0F 0F FF FF FF FF 00 00 00 00 00 00  // ................
    7280: 66 DC D8 DC 66 00 00 78 CC F8 CC C6 CC 00 00 FE  // f...f..x........
    7290: 62 60 60 60 E0 00 00 FE 6C 6C 6C 6C 6C 00 FE C6  // b```....lllll...
    72A0: 60 30 60 C6 FE 00 00 7E D8 CC CC D8 70 00 00 66  // `0`....~....p..f
    72B0: 66 66 66 7C C0 00 00 76 DC 18 18 18 38 00 FE 38  // fff|...v....8..8
    72C0: 6C C6 6C 38 FE 00 38 6C C6 FE C6 6C 38 00 38 6C  // l.l8..8l...l8.8l
    72D0: C6 C6 6C 6C EE 00 3E 60 38 66 C6 CC 78 00 00 00  // ..ll..>`8f..x...
    72E0: 7E DB DB 7E 00 00 06 7C DE F6 E6 7C C0 00 38 60  // ~..~...|...|..8`
    72F0: C0 F8 C0 60 38 00 7C C6 C6 C6 C6 C6 C6 00 00 FE  // ...`8.|.........
    7300: 00 FE 00 FE 00 00 18 18 7E 18 18 00 7E 00 30 18  // ........~...~.0.
    7310: 0C 18 30 00 7E 00 0C 18 30 18 0C 00 7E 00 0C 1E  // ..0.~...0...~...
    7320: 18 18 18 18 18 18 18 18 18 18 18 78 30 00 00 00  // ...........x0...
    7330: 18 00 7E 00 18 00 00 76 DC 00 76 DC 00 00 7C C6  // ..~....v..v...|.
    7340: C6 7C 00 00 00 00 00 00 00 18 18 00 00 00 00 00  // .|..............
    7350: 00 00 18 00 00 00 1F 18 18 18 F8 38 18 00 D8 6C  // ...........8...l
    7360: 6C 6C 00 00 00 00 70 D8 30 F8 00 00 00 00 00 00  // ll....p.0.......
    7370: 7C 7C 7C 7C 00 00 00 00 00 00 00 00 00 00 1D 00  // ||||............
    7380: 00 00 00 24 66 FF 66 24 00 00 00 00 00 00 00 10  // ...$f.f$........
    7390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    73A0: 00 00 00 7E 81 A5 81 81 BD 99 81 81 7E 00 00 00  // ...~........~...
    73B0: 00 00 00 7C FE FE D6 FE FE BA C6 FE 7C 00 00 00  // ...|........|...
    73C0: 00 00 00 00 6C EE FE FE FE FE 7C 38 10 00 00 00  // ....l.....|8....
    73D0: 00 00 00 00 10 38 7C FE 7C 38 10 00 00 00 00 00  // .....8|.|8......
    73E0: 00 00 00 00 10 38 38 10 6C EE 6C 10 38 00 00 00  // .....88.l.l.8...
    73F0: 00 00 00 10 38 7C 7C FE FE FE 6C 10 38 00 00 00  // ....8||...l.8...
    7400: 00 00 00 00 00 00 18 3C 3C 3C 18 00 00 00 00 00  // .......<<<......
    7410: 00 FF FF FF FF FF E7 C3 C3 C3 E7 FF FF FF FF FF  // ................
    7420: FF 00 00 00 00 18 3C 66 66 66 3C 18 00 00 00 00  // ......<fff<.....
    7430: 00 FF FF FF FF E7 C3 99 99 99 C3 E7 FF FF FF FF  // ................
    7440: FF 00 00 1E 0E 1E 36 78 CC CC CC CC 78 00 00 00  // ......6x....x...
    7450: 00 00 00 3C 66 66 66 3C 18 7E 18 18 18 00 00 00  // ...<fff<.~......
    7460: 00 00 00 1E 1A 1E 18 18 18 18 78 F8 70 00 00 00  // ..........x.p...
    7470: 00 00 00 3E 36 3E 36 36 76 F6 66 0E 1E 0C 00 00  // ...>6>66v.f.....
    7480: 00 00 00 18 DB 7E 3C 66 66 3C 7E DB 18 00 00 00  // .....~<ff<~.....
    7490: 00 00 00 00 80 E0 F0 FC FE FC F0 E0 80 00 00 00  // ................
    74A0: 00 00 00 00 02 0E 3E 7E FE 7E 3E 0E 02 00 00 00  // ......>~.~>.....
    74B0: 00 00 00 18 3C 7E 18 18 18 18 7E 3C 18 00 00 00  // ....<~....~<....
    74C0: 00 00 00 66 66 66 66 66 66 66 00 66 66 00 00 00  // ...fffffff.ff...
    74D0: 00 00 00 7F DB DB DB DB 7B 1B 1B 1B 1B 00 00 00  // ........{.......
    74E0: 00 00 00 7C C6 C6 60 7C F6 DE 7C 0C C6 C6 7C 00  // ...|..`|..|...|.
    74F0: 00 00 00 00 00 00 00 00 00 FE FE FE FE 00 00 00  // ................
    7500: 00 00 00 18 3C 7E 18 18 18 7E 3C 18 7E 00 00 00  // ....<~...~<.~...
    7510: 00 00 00 18 3C 7E 18 18 18 18 18 18 18 00 00 00  // ....<~..........
    7520: 00 00 00 18 18 18 18 18 18 18 7E 3C 18 00 00 00  // ..........~<....
    7530: 00 00 00 00 00 00 0C 0E FF 0E 0C 00 00 00 00 00  // ................
    7540: 00 00 00 00 00 00 30 70 FE 70 30 00 00 00 00 00  // ......0p.p0.....
    7550: 00 00 00 00 00 00 00 C0 C0 C0 FE 00 00 00 00 00  // ................
    7560: 00 00 00 00 00 00 24 66 FF 66 24 00 00 00 00 00  // ......$f.f$.....
    7570: 00 00 00 00 10 38 38 38 7C 7C FE FE 00 00 00 00  // .....888||......
    7580: 00 00 00 00 FE FE 7C 7C 7C 38 38 10 00 00 00 00  // ......|||88.....
    7590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    75A0: 00 00 00 18 3C 3C 3C 3C 18 18 00 18 18 00 00 00  // ....<<<<........
    75B0: 00 00 36 36 36 36 14 00 00 00 00 00 00 00 00 00  // ..6666..........
    75C0: 00 00 00 6C 6C 6C FE 6C 6C FE 6C 6C 6C 00 00 00  // ...lll.ll.lll...
    75D0: 00 00 00 18 18 7C C6 C0 78 3C 06 C6 7C 18 18 00  // .....|..x<..|...
    75E0: 00 00 00 00 00 00 62 66 0C 18 30 66 C6 00 00 00  // ......bf..0f....
    75F0: 00 00 00 38 6C 38 30 76 7E CC CC CC 76 00 00 00  // ...8l80v~...v...
    7600: 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00 00 00  // ................
    7610: 00 00 00 0C 18 30 30 30 30 30 30 18 0C 00 00 00  // .....000000.....
    7620: 00 00 00 30 18 0C 0C 0C 0C 0C 0C 18 30 00 00 00  // ...0........0...
    7630: 00 00 00 00 00 00 6C 38 FE 38 6C 00 00 00 00 00  // ......l8.8l.....
    7640: 00 00 00 00 00 00 18 18 7E 18 18 00 00 00 00 00  // ........~.......
    7650: 00 00 00 00 00 00 00 00 00 00 0C 0C 0C 18 00 00  // ................
    7660: 00 00 00 00 00 00 00 00 FE 00 00 00 00 00 00 00  // ................
    7670: 00 00 00 00 00 00 00 00 00 00 00 18 18 00 00 00  // ................
    7680: 00 00 00 00 00 02 06 0C 18 30 60 C0 80 00 00 00  // .........0`.....
    7690: 00 00 00 7C C6 C6 CE DE F6 E6 C6 C6 7C 00 00 00  // ...|........|...
    76A0: 00 00 00 18 78 18 18 18 18 18 18 18 7E 00 00 00  // ....x.......~...
    76B0: 00 00 00 7C C6 C6 06 0C 18 30 60 C6 FE 00 00 00  // ...|.....0`.....
    76C0: 00 00 00 7C C6 06 06 3C 06 06 06 C6 7C 00 00 00  // ...|...<....|...
    76D0: 00 00 00 0C 1C 3C 6C CC CC FE 0C 0C 1E 00 00 00  // .....<l.........
    76E0: 00 00 00 FE C0 C0 C0 FC 06 06 06 C6 7C 00 00 00  // ............|...
    76F0: 00 00 00 7C C6 C0 C0 FC C6 C6 C6 C6 7C 00 00 00  // ...|........|...
    7700: 00 00 00 FE C6 06 0C 18 30 30 30 30 30 00 00 00  // ........00000...
    7710: 00 00 00 7C C6 C6 C6 7C C6 C6 C6 C6 7C 00 00 00  // ...|...|....|...
    7720: 00 00 00 7C C6 C6 C6 C6 7E 06 06 C6 7C 00 00 00  // ...|....~...|...
    7730: 00 00 00 00 00 00 0C 0C 00 00 0C 0C 00 00 00 00  // ................
    7740: 00 00 00 00 00 00 0C 0C 00 00 0C 0C 0C 18 00 00  // ................
    7750: 00 00 00 00 0C 18 30 60 C0 60 30 18 0C 00 00 00  // ......0`.`0.....
    7760: 00 00 00 00 00 00 00 FE 00 FE 00 00 00 00 00 00  // ................
    7770: 00 00 00 00 60 30 18 0C 06 0C 18 30 60 00 00 00  // ....`0.....0`...
    7780: 00 00 00 7C C6 C6 0C 18 18 18 00 18 18 00 00 00  // ...|............
    7790: 00 00 00 7C C6 C6 C6 DE DE DE DC C0 7E 00 00 00  // ...|........~...
    77A0: 00 00 00 38 6C C6 C6 C6 FE C6 C6 C6 C6 00 00 00  // ...8l...........
    77B0: 00 00 00 FC 66 66 66 7C 66 66 66 66 FC 00 00 00  // ....fff|ffff....
    77C0: 00 00 00 3C 66 C2 C0 C0 C0 C0 C2 66 3C 00 00 00  // ...<f......f<...
    77D0: 00 00 00 F8 6C 66 66 66 66 66 66 6C F8 00 00 00  // ....lffffffl....
    77E0: 00 00 00 FE 66 60 64 7C 64 60 60 66 FE 00 00 00  // ....f`d|d``f....
    77F0: 00 00 00 FE 66 60 64 7C 64 60 60 60 F0 00 00 00  // ....f`d|d```....
    7800: 00 00 00 7C C6 C6 C0 C0 C0 CE C6 C6 7C 00 00 00  // ...|........|...
    7810: 00 00 00 C6 C6 C6 C6 FE C6 C6 C6 C6 C6 00 00 00  // ................
    7820: 00 00 00 3C 18 18 18 18 18 18 18 18 3C 00 00 00  // ...<........<...
    7830: 00 00 00 3C 18 18 18 18 18 18 D8 D8 70 00 00 00  // ...<........p...
    7840: 00 00 00 C6 C6 CC D8 F0 F0 D8 CC C6 C6 00 00 00  // ................
    7850: 00 00 00 F0 60 60 60 60 60 60 62 66 FE 00 00 00  // ....``````bf....
    7860: 00 00 00 C6 C6 EE EE FE D6 D6 D6 C6 C6 00 00 00  // ................
    7870: 00 00 00 C6 C6 E6 E6 F6 DE CE CE C6 C6 00 00 00  // ................
    7880: 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ...|........|...
    7890: 00 00 00 FC 66 66 66 66 7C 60 60 60 F0 00 00 00  // ....ffff|```....
    78A0: 00 00 00 7C C6 C6 C6 C6 C6 C6 D6 D6 7C 06 00 00  // ...|........|...
    78B0: 00 00 00 FC 66 66 66 7C 78 6C 66 66 E6 00 00 00  // ....fff|xlff....
    78C0: 00 00 00 7C C6 C0 C0 70 1C 06 06 C6 7C 00 00 00  // ...|...p....|...
    78D0: 00 00 00 7E 5A 18 18 18 18 18 18 18 3C 00 00 00  // ...~Z.......<...
    78E0: 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ............|...
    78F0: 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C 38 10 00 00 00  // ..........l8....
    7900: 00 00 00 C6 C6 C6 D6 D6 D6 FE EE C6 C6 00 00 00  // ................
    7910: 00 00 00 C6 C6 C6 6C 38 38 6C C6 C6 C6 00 00 00  // ......l88l......
    7920: 00 00 00 66 66 66 66 66 3C 18 18 18 3C 00 00 00  // ...fffff<...<...
    7930: 00 00 00 FE C6 86 0C 18 30 60 C2 C6 FE 00 00 00  // ........0`......
    7940: 00 00 00 7C 60 60 60 60 60 60 60 60 7C 00 00 00  // ...|````````|...
    7950: 00 00 00 00 00 80 C0 60 30 18 0C 06 02 00 00 00  // .......`0.......
    7960: 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C 0C 7C 00 00 00  // ...|........|...
    7970: 00 00 10 38 6C C6 00 00 00 00 00 00 00 00 00 00  // ...8l...........
    7980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00  // ................
    7990: 00 00 18 18 18 0C 00 00 00 00 00 00 00 00 00 00  // ................
    79A0: 00 00 00 00 00 00 78 0C 7C CC CC DC 76 00 00 00  // ......x.|...v...
    79B0: 00 00 00 E0 60 60 7C 66 66 66 66 66 FC 00 00 00  // ....``|fffff....
    79C0: 00 00 00 00 00 00 7C C6 C0 C0 C0 C6 7C 00 00 00  // ......|.....|...
    79D0: 00 00 00 1C 0C 0C 7C CC CC CC CC CC 7E 00 00 00  // ......|.....~...
    79E0: 00 00 00 00 00 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ......|.....|...
    79F0: 00 00 00 1C 36 30 30 FC 30 30 30 30 78 00 00 00  // ....600.0000x...
    7A00: 00 00 00 00 00 00 76 CE C6 C6 CE 76 06 C6 7C 00  // ......v....v..|.
    7A10: 00 00 00 E0 60 60 7C 66 66 66 66 66 E6 00 00 00  // ....``|fffff....
    7A20: 00 00 00 18 18 00 38 18 18 18 18 18 3C 00 00 00  // ......8.....<...
    7A30: 00 00 00 0C 0C 00 1C 0C 0C 0C 0C 0C CC CC 78 00  // ..............x.
    7A40: 00 00 00 E0 60 60 66 66 6C 78 6C 66 E6 00 00 00  // ....``fflxlf....
    7A50: 00 00 00 18 18 18 18 18 18 18 18 18 1C 00 00 00  // ................
    7A60: 00 00 00 00 00 00 6C FE D6 D6 C6 C6 C6 00 00 00  // ......l.........
    7A70: 00 00 00 00 00 00 DC 66 66 66 66 66 66 00 00 00  // .......ffffff...
    7A80: 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ......|.....|...
    7A90: 00 00 00 00 00 00 DC 66 66 66 66 7C 60 60 F0 00  // .......ffff|``..
    7AA0: 00 00 00 00 00 00 76 CC CC CC CC 7C 0C 0C 1E 00  // ......v....|....
    7AB0: 00 00 00 00 00 00 DC 66 60 60 60 60 F0 00 00 00  // .......f````....
    7AC0: 00 00 00 00 00 00 7C C6 C0 7C 06 C6 7C 00 00 00  // ......|..|..|...
    7AD0: 00 00 00 30 30 30 FC 30 30 30 30 36 1C 00 00 00  // ...000.00006....
    7AE0: 00 00 00 00 00 00 CC CC CC CC CC CC 76 00 00 00  // ............v...
    7AF0: 00 00 00 00 00 00 C6 C6 C6 C6 6C 38 10 00 00 00  // ..........l8....
    7B00: 00 00 00 00 00 00 C6 C6 D6 D6 D6 FE 6C 00 00 00  // ............l...
    7B10: 00 00 00 00 00 00 C6 C6 6C 38 6C C6 C6 00 00 00  // ........l8l.....
    7B20: 00 00 00 00 00 00 C6 C6 C6 C6 CE 76 06 C6 7C 00  // ...........v..|.
    7B30: 00 00 00 00 00 00 FE 86 0C 18 30 62 FE 00 00 00  // ..........0b....
    7B40: 00 00 00 0E 18 18 18 70 18 18 18 18 0E 00 00 00  // .......p........
    7B50: 00 00 00 18 18 18 18 00 18 18 18 18 18 00 00 00  // ................
    7B60: 00 00 00 70 18 18 18 0E 18 18 18 18 70 00 00 00  // ...p........p...
    7B70: 00 00 00 76 DC 00 00 00 00 00 00 00 00 00 00 00  // ...v............
    7B80: 00 00 00 00 00 00 10 38 38 6C 6C FE 00 00 00 00  // .......88ll.....
    7B90: 00 00 00 3C 66 C0 C0 C0 C6 66 3C 18 0C CC 38 00  // ...<f....f<...8.
    7BA0: 00 00 00 C6 00 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ............v...
    7BB0: 00 00 0C 18 30 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ....0.|.....|...
    7BC0: 00 00 30 78 CC 00 78 0C 7C CC CC DC 76 00 00 00  // ..0x..x.|...v...
    7BD0: 00 00 00 CC 00 00 78 0C 7C CC CC DC 76 00 00 00  // ......x.|...v...
    7BE0: 00 00 60 30 18 00 78 0C 7C CC CC DC 76 00 00 00  // ..`0..x.|...v...
    7BF0: 00 00 38 6C 38 00 78 0C 7C CC CC DC 76 00 00 00  // ..8l8.x.|...v...
    7C00: 00 00 00 00 00 7C C6 C0 C0 C6 7C 18 0C 6C 38 00  // .....|....|..l8.
    7C10: 00 00 30 78 CC 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ..0x..|.....|...
    7C20: 00 00 00 CC 00 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ......|.....|...
    7C30: 00 00 30 18 0C 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ..0...|.....|...
    7C40: 00 00 00 66 00 00 38 18 18 18 18 18 3C 00 00 00  // ...f..8.....<...
    7C50: 00 00 18 3C 66 00 38 18 18 18 18 18 3C 00 00 00  // ...<f.8.....<...
    7C60: 00 00 00 00 00 00 38 18 18 18 18 18 3C 00 00 00  // ......8.....<...
    7C70: 00 00 C6 00 38 6C C6 C6 C6 FE C6 C6 C6 00 00 00  // ....8l..........
    7C80: 00 38 6C 38 00 38 6C C6 C6 FE C6 C6 C6 00 00 00  // .8l8.8l.........
    7C90: 00 0C 18 30 00 FE 60 60 7C 60 60 60 FE 00 00 00  // ...0..``|```....
    7CA0: 00 00 00 00 00 66 DB 1B 7F D8 D8 DF 76 00 00 00  // .....f......v...
    7CB0: 00 00 00 7E D8 D8 D8 D8 FE D8 D8 D8 DE 00 00 00  // ...~............
    7CC0: 00 00 30 78 CC 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ..0x..|.....|...
    7CD0: 00 00 00 C6 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ......|.....|...
    7CE0: 00 00 30 18 0C 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ..0...|.....|...
    7CF0: 00 00 30 78 CC 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ..0x........v...
    7D00: 00 00 60 30 18 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ..`0........v...
    7D10: 00 00 18 00 3C 18 18 18 18 18 18 18 3C 00 00 00  // ....<.......<...
    7D20: 00 00 C6 00 7C C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ....|.......|...
    7D30: 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ............|...
    7D40: 00 00 00 18 18 7C C6 C0 C0 C6 7C 18 18 00 00 00  // .....|....|.....
    7D50: 00 00 38 6C 60 60 F0 60 60 60 66 F6 6C 00 00 00  // ..8l``.```f.l...
    7D60: 00 00 66 66 66 66 3C 18 7E 18 3C 18 18 00 00 00  // ..ffff<.~.<.....
    7D70: 00 00 00 3E 63 63 30 1C 06 63 63 3E 00 1C 00 00  // ...>cc0..cc>....
    7D80: 00 00 00 00 00 00 3E 63 38 0E 63 3E 00 1C 00 00  // ......>c8.c>....
    7D90: 00 00 0C 18 30 00 78 0C 7C CC CC DC 76 00 00 00  // ....0.x.|...v...
    7DA0: 00 00 0C 18 30 00 38 18 18 18 18 18 3C 00 00 00  // ....0.8.....<...
    7DB0: 00 00 0C 18 30 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ....0.|.....|...
    7DC0: 00 00 18 30 60 00 CC CC CC CC CC DC 76 00 00 00  // ...0`.......v...
    7DD0: 00 00 00 76 DC 00 BC 66 66 66 66 66 E6 00 00 00  // ...v...fffff....
    7DE0: 00 00 76 DC 00 C6 C6 E6 F6 DE CE C6 C6 00 00 00  // ..v.............
    7DF0: 00 00 21 1E 00 1E 33 60 60 67 63 33 1D 00 00 00  // ..!...3``gc3....
    7E00: 00 00 42 3C 00 3B 66 66 66 3E 06 66 3C 00 00 00  // ..B<.;fff>.f<...
    7E10: 00 00 00 30 30 00 30 30 30 60 C6 C6 7C 00 00 00  // ...00.000`..|...
    7E20: 00 00 00 00 00 00 00 00 7E 60 60 60 00 00 00 00  // ........~```....
    7E30: 00 00 00 00 00 00 00 00 7E 06 06 06 00 00 00 00  // ........~.......
    7E40: 00 00 60 60 62 66 6C 18 30 60 DC 36 0C 18 3E 00  // ..``bfl.0`.6..>.
    7E50: 00 00 60 60 62 66 6C 18 36 6E DE 36 7E 06 06 00  // ..``bfl.6n.6~...
    7E60: 00 00 00 18 18 00 18 18 3C 3C 3C 3C 18 00 00 00  // ........<<<<....
    7E70: 00 00 00 00 00 00 36 6C D8 6C 36 00 00 00 00 00  // ......6l.l6.....
    7E80: 00 00 00 00 00 00 D8 6C 36 6C D8 00 00 00 00 00  // .......l6l......
    7E90: 00 11 44 11 44 11 44 11 44 11 44 11 44 11 44 11  // ..D.D.D.D.D.D.D.
    7EA0: 44 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA  // D.U.U.U.U.U.U.U.
    7EB0: 55 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD  // U.w.w.w.w.w.w.w.
    7EC0: 77 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // w...............
    7ED0: 18 18 18 18 18 18 18 18 F8 18 18 18 18 18 18 18  // ................
    7EE0: 18 18 18 18 18 18 F8 18 F8 18 18 18 18 18 18 18  // ................
    7EF0: 18 36 36 36 36 36 36 36 F6 36 36 36 36 36 36 36  // .6666666.6666666
    7F00: 36 00 00 00 00 00 00 00 FE 36 36 36 36 36 36 36  // 6........6666666
    7F10: 36 00 00 00 00 00 F8 18 F8 18 18 18 18 18 18 18  // 6...............
    7F20: 18 36 36 36 36 36 F6 06 F6 36 36 36 36 36 36 36  // .66666...6666666
    7F30: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    7F40: 36 00 00 00 00 00 FE 06 F6 36 36 36 36 36 36 36  // 6........6666666
    7F50: 36 36 36 36 36 36 F6 06 FE 00 00 00 00 00 00 00  // 666666..........
    7F60: 00 36 36 36 36 36 36 36 FE 00 00 00 00 00 00 00  // .6666666........
    7F70: 00 18 18 18 18 18 F8 18 F8 00 00 00 00 00 00 00  // ................
    7F80: 00 00 00 00 00 00 00 00 F8 18 18 18 18 18 18 18  // ................
    7F90: 18 18 18 18 18 18 18 18 1F 00 00 00 00 00 00 00  // ................
    7FA0: 00 18 18 18 18 18 18 18 FF 00 00 00 00 00 00 00  // ................
    7FB0: 00 00 00 00 00 00 00 00 FF 18 18 18 18 18 18 18  // ................
    7FC0: 18 18 18 18 18 18 18 18 1F 18 18 18 18 18 18 18  // ................
    7FD0: 18 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    7FE0: 00 18 18 18 18 18 18 18 FF 18 18 18 18 18 18 18  // ................
    7FF0: 18 18 18 18 18 18 1F 18 1F 18 18 18 18 18 18 18  // ................
    8000: 18 36 36 36 36 36 36 36 37 36 36 36 36 36 36 36  // .666666676666666
    8010: 36 36 36 36 36 36 37 30 3F 00 00 00 00 00 00 00  // 66666670?.......
    8020: 00 00 00 00 00 00 3F 30 37 36 36 36 36 36 36 36  // ......?076666666
    8030: 36 36 36 36 36 36 F7 00 FF 00 00 00 00 00 00 00  // 666666..........
    8040: 00 00 00 00 00 00 FF 00 F7 36 36 36 36 36 36 36  // .........6666666
    8050: 36 36 36 36 36 36 37 30 37 36 36 36 36 36 36 36  // 6666667076666666
    8060: 36 00 00 00 00 00 FF 00 FF 00 00 00 00 00 00 00  // 6...............
    8070: 00 36 36 36 36 36 F7 00 F7 36 36 36 36 36 36 36  // .66666...6666666
    8080: 36 18 18 18 18 18 FF 00 FF 00 00 00 00 00 00 00  // 6...............
    8090: 00 36 36 36 36 36 36 36 FF 00 00 00 00 00 00 00  // .6666666........
    80A0: 00 00 00 00 00 00 FF 00 FF 18 18 18 18 18 18 18  // ................
    80B0: 18 00 00 00 00 00 00 00 FF 36 36 36 36 36 36 36  // .........6666666
    80C0: 36 36 36 36 36 36 36 36 3F 00 00 00 00 00 00 00  // 66666666?.......
    80D0: 00 18 18 18 18 18 1F 18 1F 00 00 00 00 00 00 00  // ................
    80E0: 00 00 00 00 00 00 1F 18 1F 18 18 18 18 18 18 18  // ................
    80F0: 18 00 00 00 00 00 00 00 3F 36 36 36 36 36 36 36  // ........?6666666
    8100: 36 36 36 36 36 36 36 36 FF 36 36 36 36 36 36 36  // 66666666.6666666
    8110: 36 18 18 18 18 18 FF 18 FF 18 18 18 18 18 18 18  // 6...............
    8120: 18 18 18 18 18 18 18 18 F8 00 00 00 00 00 00 00  // ................
    8130: 00 00 00 00 00 00 00 00 1F 18 18 18 18 18 18 18  // ................
    8140: 18 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    8150: FF 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF  // ................
    8160: FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    8170: F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    8180: 0F FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00  // ................
    8190: 00 00 00 00 00 76 DC D8 D8 D8 D8 DC 76 00 00 00  // .....v......v...
    81A0: 00 00 00 78 CC CC D8 FC C6 C6 C6 C6 CC 00 00 00  // ...x............
    81B0: 00 00 00 FE 66 62 60 60 60 60 60 60 60 00 00 00  // ....fb```````...
    81C0: 00 00 00 00 00 00 FE 6C 6C 6C 6C 6C 6C 00 00 00  // .......llllll...
    81D0: 00 00 00 FE C6 62 30 18 18 30 62 C6 FE 00 00 00  // .....b0..0b.....
    81E0: 00 00 00 00 00 00 7E D8 CC CC CC D8 70 00 00 00  // ......~.....p...
    81F0: 00 00 00 00 00 66 66 66 66 66 7C 60 C0 80 00 00  // .....fffff|`....
    8200: 00 00 00 00 00 00 76 DC 18 18 18 18 18 00 00 00  // ......v.........
    8210: 00 00 00 FE 38 38 6C C6 C6 6C 38 38 FE 00 00 00  // ....88l..l88....
    8220: 00 00 00 00 38 6C C6 C6 FE C6 C6 6C 38 00 00 00  // ....8l.....l8...
    8230: 00 00 00 38 6C C6 C6 C6 C6 6C 6C 6C EE 00 00 00  // ...8l....lll....
    8240: 00 00 00 3E 60 60 3C 66 C6 C6 C6 CC 78 00 00 00  // ...>``<f....x...
    8250: 00 00 00 00 00 00 7E DB DB DB 7E 00 00 00 00 00  // ......~...~.....
    8260: 00 00 00 02 06 7C CE DE F6 F6 7C 60 C0 00 00 00  // .....|....|`....
    8270: 00 00 00 00 1C 30 60 60 7C 60 60 30 1C 00 00 00  // .....0``|``0....
    8280: 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 C6 00 00 00  // ...|............
    8290: 00 00 00 00 00 FE 00 00 FE 00 00 FE 00 00 00 00  // ................
    82A0: 00 00 00 00 00 18 18 7E 18 18 00 00 7E 00 00 00  // .......~....~...
    82B0: 00 00 00 30 18 0C 06 0C 18 30 00 00 7E 00 00 00  // ...0.....0..~...
    82C0: 00 00 00 0C 18 30 60 30 18 0C 00 00 7E 00 00 00  // .....0`0....~...
    82D0: 00 00 00 00 00 0C 1E 1A 18 18 18 18 18 18 18 18  // ................
    82E0: 18 18 18 18 18 18 18 18 18 18 18 58 78 30 00 00  // ...........Xx0..
    82F0: 00 00 00 00 00 18 18 00 7E 00 18 18 00 00 00 00  // ........~.......
    8300: 00 00 00 00 00 00 00 76 DC 00 76 DC 00 00 00 00  // .......v..v.....
    8310: 00 00 00 78 CC CC 78 00 00 00 00 00 00 00 00 00  // ...x..x.........
    8320: 00 00 00 00 00 00 00 00 18 18 00 00 00 00 00 00  // ................
    8330: 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00  // ................
    8340: 00 00 00 1F 18 18 18 18 18 D8 D8 78 38 18 00 00  // ...........x8...
    8350: 00 00 00 D8 6C 6C 6C 6C 6C 00 00 00 00 00 00 00  // ....lllll.......
    8360: 00 00 00 70 D8 18 30 60 F8 00 00 00 00 00 00 00  // ...p..0`........
    8370: 00 00 00 00 00 00 7E 7E 7E 7E 7E 7E 00 00 00 00  // ......~~~~~~....
    8380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    8390: 00 1D 00 00 00 00 00 24 66 FF 66 24 00 00 00 00  // .......$f.f$....
    83A0: 00 00 2F 00 00 00 01 03 06 0C 18 30 60 C0 80 00  // ../........0`...
    83B0: 00 00 00 30 00 00 7E C3 C3 C3 DB DB C3 C3 C3 7E  // ...0..~........~
    83C0: 00 00 00 00 4D 00 00 C3 C3 E7 FF FF DB DB C3 C3  // ....M...........
    83D0: C3 00 00 00 00 54 00 00 FF 99 18 18 18 18 18 18  // .....T..........
    83E0: 18 3C 00 00 00 00 56 00 00 C3 C3 C3 C3 C3 C3 C3  // .<....V.........
    83F0: 66 3C 18 00 00 00 00 57 00 00 C3 C3 C3 C3 DB DB  // f<.....W........
    8400: DB DB FF 66 00 00 00 00 58 00 00 C3 C3 C3 66 3C  // ...f....X.....f<
    8410: 3C 66 C3 C3 C3 00 00 00 00 59 00 00 C3 C3 C3 C3  // <f.......Y......
    8420: 66 3C 18 18 18 3C 00 00 00 00 5C 00 00 00 80 C0  // f<...<....\.....
    8430: 60 30 18 0C 06 03 01 00 00 00 00 6D 00 00 00 00  // `0.........m....
    8440: 00 66 FF DB DB DB C3 C3 00 00 00 00 76 00 00 00  // .f..........v...
    8450: 00 00 C3 C3 C3 C3 66 3C 18 00 00 00 00 77 00 00  // ......f<.....w..
    8460: 00 00 00 C3 C3 DB DB DB FF 66 00 00 00 00 00 00  // .........f......
    8470: 29 73 C3 0B DB 74 03 E9 46 01 57 32 C0 B9 40 00  // )s...t..F.W2..@.
    8480: F3 AA 5F BB F6 A0 26 89 1D 26 8C 4D 02 2E 8E 1E  // .._...&..&.M....
    8490: 6E 24 57 BE 49 04 B9 1E 00 83 C7 04 FC 8A 04 26  // n$W.I..........&
    84A0: 88 05 46 47 E2 F7 5F A0 84 04 FE C0 26 88 45 22  // ..FG.._.....&.E"
    84B0: A1 85 04 26 89 45 23 57 E8 D9 1B 5F 26 88 5D 25  // ...&.E#W..._&.]%
    84C0: 26 88 7D 26 8A 1E 49 04 E8 FC 05 74 05 80 FB 13  // &.}&..I....t....
    84D0: 7F 1D 32 FF D1 E3 2E 8A 87 CE A0 32 E4 0A C0 74  // ..2........2...t
    84E0: 01 40 26 89 45 27 2E 8A 87 CF A0 26 88 45 29 A1  // .@&.E'.....&.E).
    84F0: 85 04 8A 16 84 04 FE C2 F6 E2 B2 00 3D C8 00 7E  // ............=..~
    8500: 15 B2 01 3D 5E 01 7E 0E B2 02 3D 90 01 7E 07 B2  // ...=^.~...=..~..
    8510: 03 3D E0 01 7E 00 26 88 55 2A 8A 26 87 04 8A C4  // .=..~.&.U*.&....
    8520: 24 01 C0 E0 04 80 E4 02 D0 E4 0A E0 80 F4 10 A0  // $...............
    8530: 89 04 24 0A 0A E0 E8 94 08 B2 C0 B0 30 EE 42 EC  // ..$.........0.B.
    8540: 24 08 C0 E0 02 0A C4 0C 01 26 88 45 2D B0 03 26  // $........&.E-..&
    8550: 88 45 31 E8 77 08 1E 06 32 D2 C4 1E A8 04 8C C1  // .E1.w...2.......
    8560: 8C CE 3B CE 74 34 26 C5 77 04 8C D9 0B F1 74 03  // ..;.t4&.w.....t.
    8570: 80 CA 10 26 C5 77 0C 8C D9 0B F1 74 03 80 CA 08  // ...&.w.....t....
    8580: 26 C5 77 08 8C D9 0B F1 74 03 80 CA 04 26 C5 77  // &.w.....t....&.w
    8590: 10 8C D9 0B F1 74 03 80 CA 01 07 1F 26 88 55 32  // .....t......&.U2
    85A0: B0 03 BA C4 03 E8 E4 04 8A E0 C0 EC 02 8A D4 8A  // ................
    85B0: F2 D0 EE 81 E2 04 04 25 03 03 0B C2 26 89 45 2B  // .......%....&.E+
    85C0: 8B EC C6 46 1A 1B C3 0A C0 74 0F FE C8 74 36 FE  // ...F.....t...t6.
    85D0: C8 74 56 8B EC C6 46 1A 00 C3 B8 20 00 F6 C1 01  // .tV...F.... ....
    85E0: 74 03 83 C0 60 F6 C1 02 74 03 83 C0 3A F6 C1 04  // t...`...t...:...
    85F0: 74 03 05 03 03 83 C0 3F C1 E8 06 8B EC 89 46 0E  // t......?......F.
    8600: C6 46 1A 1C C3 8B FB 83 C7 20 F6 C1 01 74 03 E8  // .F....... ...t..
    8610: 85 00 F6 C1 02 74 03 E8 EF 00 F6 C1 04 74 03 E8  // .....t.......t..
    8620: F8 01 8B EC C6 46 1A 1C C3 F6 C1 01 74 06 E8 16  // .....F......t...
    8630: 15 E8 25 01 F6 C1 02 74 03 E8 85 01 F6 C1 04 74  // ..%....t.......t
    8640: 03 E8 12 02 EB DC 8A C4 EE 42 EC AA FE C4 4A E2  // .........B....J.
    8650: F5 C3 E8 6B 04 BD C0 03 B9 15 00 32 E4 EC 87 EA  // ...k.......2....
    8660: 8A C4 EE 42 EC AA FE C4 4A 87 EA E2 F0 EC 87 EA  // ...B....J.......
    8670: B0 20 EE C3 26 8A 05 88 04 47 46 E2 F7 C3 26 8A  // . ..&....GF...&.
    8680: 25 EF 47 FE C0 E2 F7 C3 B2 C0 8A C4 EE 26 8A 05  // %.G..........&..
    8690: 47 FE C4 EE E2 F4 C3 9C FA 51 57 8B C7 2B C3 26  // G........QW..+.&
    86A0: 89 07 8B F7 E8 0A 04 EC 26 88 44 01 26 89 54 41  // ........&.D.&.TA
    86B0: B2 CE EC 26 88 44 02 B2 CC EC 26 88 44 09 B2 CA  // ...&.D....&.D...
    86C0: EC 26 88 44 04 B2 C4 EC 26 88 04 83 C7 05 B9 04  // .&.D....&.......
    86D0: 00 B4 01 E8 70 FF 26 8A 04 EE 8B FE 83 C7 0A 26  // ....p.&........&
    86E0: 8B 54 41 32 E4 B9 19 00 E8 5B FF 26 8A 44 01 EE  // .TA2.....[.&.D..
    86F0: E8 5F FF B2 CE 32 E4 B9 09 00 E8 49 FF 26 8A 44  // ._...2.....I.&.D
    8700: 02 EE 5F 59 83 C7 60 9D C3 9C FA 8B C7 2B C3 26  // .._Y..`......+.&
    8710: 89 47 02 51 57 2E 8E 1E 6E 24 A0 10 04 24 30 AA  // .G.QW...n$...$0.
    8720: BE 49 04 B9 1E 00 F3 A4 BE 84 04 B1 07 F3 A4 BE  // .I..............
    8730: A8 04 B1 04 F3 A4 BE 14 00 B1 04 F3 A4 BE 74 00  // ..............t.
    8740: B1 04 F3 A4 BE 7C 00 B1 04 F3 A4 BE 0C 01 B1 04  // .....|..........
    8750: F3 A4 5F 59 83 C7 3A 9D C3 9C FA 26 8B 3F 03 FB  // .._Y..:....&.?..
    8760: 8B F7 51 8B FE 83 C7 05 BA C4 03 B8 00 01 EF B0  // ..Q.............
    8770: 01 B9 04 00 E8 07 FF 47 B2 C2 26 8A 44 09 EE B2  // .......G..&.D...
    8780: C4 B8 00 03 EF 26 8A 04 EE 26 8B 54 41 B8 11 00  // .....&...&.TA...
    8790: EF B1 19 32 C0 E8 E6 FE 26 8A 44 01 EE 80 C2 06  // ...2....&.D.....
    87A0: 26 8A 44 04 EE EC B1 15 32 E4 E8 DB FE B0 20 EE  // &.D.....2..... .
    87B0: B1 09 32 C0 B2 CE E8 C5 FE 26 8A 44 02 EE 59 9D  // ..2......&.D..Y.
    87C0: C3 9C FA 26 8B 7F 02 03 FB 06 51 2E 8E 1E 6E 24  // ...&......Q...n$
    87D0: 26 8A 05 80 26 10 04 CF 08 06 10 04 47 BE 49 04  // &...&.......G.I.
    87E0: B9 1E 00 E8 8E FE BE 84 04 B1 07 E8 86 FE BE A8  // ................
    87F0: 04 B1 04 E8 7E FE BE 14 00 B1 04 E8 76 FE BE 74  // ....~.......v..t
    8800: 00 B1 04 E8 6E FE BE 7C 00 B1 04 E8 66 FE BE 0C  // ....n..|....f...
    8810: 01 B1 04 E8 5E FE 59 07 9D C3 9C FA 8B C7 2B C3  // ....^.Y.......+.
    8820: 26 89 47 04 E8 A6 05 B2 C0 B0 34 EE 42 EC 26 88  // &.G.......4.B.&.
    8830: 05 BA C8 03 EC 26 88 45 01 50 4A 4A EC 26 88 45  // .....&.E.PJJ.&.E
    8840: 02 83 C7 03 B9 00 03 42 32 C0 EE 42 42 EC AA E2  // .......B2..BB...
    8850: FC 58 4A EE 9D C3 9C FA 26 8B 77 04 03 F3 E8 6C  // .XJ.....&.w....l
    8860: 05 B2 C0 B0 34 EE 26 8A 04 EE BA C6 03 26 8A 44  // ....4.&......&.D
    8870: 02 EE 56 42 42 83 C6 03 32 C0 EE 42 B9 00 03 26  // ..VBB...2..B...&
    8880: 8A 04 EE 46 E2 F9 5E FE CA 26 8A 44 01 EE 9D C3  // ...F..^..&.D....
    8890: BA CC 03 EC 24 FE 0A C4 B2 C2 EE C3 E8 A8 12 B2  // ....$...........
    88A0: C0 86 C4 EE EB 00 EB 00 86 C4 EE EB 00 EB 00 B0  // ................
    88B0: 20 EE C3 50 8A E0 80 E4 80 80 26 87 04 7F 08 26  //  ..P......&....&
    88C0: 87 04 24 7F 8A E0 3C 07 7E 1E 26 F6 47 33 01 75  // ..$...<.~.&.G3.u
    88D0: 17 3C 23 74 13 3C 32 74 0F 3C 33 74 0B B4 03 26  // .<#t.<2t.<3t...&
    88E0: F6 47 09 01 75 02 B4 07 88 26 49 04 BA B4 03 80  // .G..u....&I.....
    88F0: 0E 87 04 02 26 F6 47 09 01 74 07 B2 D4 80 26 87  // ....&.G..t....&.
    8900: 04 FD 89 16 63 04 C7 06 4E 04 00 00 C6 06 62 04  // ....c...N.....b.
    8910: 00 B9 08 00 BF 50 04 FC 06 1E 07 33 C0 F3 AB 07  // .....P.....3....
    8920: 26 8A 07 32 E4 A3 4A 04 26 8A 47 01 A2 84 04 26  // &..2..J.&.G....&
    8930: 8A 47 02 A3 85 04 26 8B 47 03 A3 4C 04 26 8B 47  // .G....&.G..L.&.G
    8940: 14 86 C4 A3 60 04 58 C3 52 32 E4 33 D2 B0 0D CD  // ....`.X.R2.3....
    8950: 17 F6 C4 29 75 08 32 E4 33 D2 B0 0A CD 17 5A C3  // ...)u.2.3.....Z.
    8960: 06 1E 60 2E 8E 1E 6E 24 2E 83 0E 78 24 00 75 6E  // ..`...n$...x$.un
    8970: 80 3E 00 05 01 74 67 C6 06 00 05 01 8A 1E 62 04  // .>...tg.......b.
    8980: 32 FF D1 E3 8B FB 8B 85 50 04 8A 3E 62 04 50 32  // 2.......P..>b.P2
    8990: F6 8A 0E 84 04 32 ED 41 51 8B 0E 4A 04 32 D2 E8  // .....2.AQ..J.2..
    89A0: A6 FF F6 C4 29 75 3D 51 52 89 95 50 04 B4 08 E8  // ....)u=QR..P....
    89B0: B6 D4 0A C0 75 02 B0 20 33 D2 32 E4 CD 17 F6 C4  // ....u.. 3.2.....
    89C0: 29 75 1F 5A FE C2 59 E2 DE FE C6 59 E2 CA E8 77  // )u.Z..Y....Y...w
    89D0: FF 32 C0 A2 00 05 58 89 85 50 04 E8 AF 03 61 1F  // .2....X..P....a.
    89E0: 07 CF 5A 59 59 B0 FF EB EA 52 2A F5 38 C6 7D 02  // ..ZYY....R*.8.}.
    89F0: 32 C0 2E 8E 06 70 24 5A C3 A0 85 04 F6 E3 8A F7  // 2....p$Z........
    8A00: 8B D8 8B CA BA C4 03 B8 02 0F EF B4 02 E8 6D 00  // ..............m.
    8A10: 8B D1 32 ED 8A E6 8A C6 F3 AA 03 FD 8A CA 4B 75  // ..2...........Ku
    8A20: F7 32 E4 E8 57 00 C3 53 8A 1E 62 04 0B C0 75 04  // .2..W..S..b...u.
    8A30: 0A DB 74 03 E8 35 03 5B 8B F8 2B D1 81 C2 01 01  // ..t..5.[..+.....
    8A40: 8A C3 32 E4 C3 8A C6 32 F6 2B EA 0A DB 74 2A 2A  // ..2....2.+...t**
    8A50: C3 F6 26 85 04 8B C8 52 B4 01 E8 20 00 B2 C4 B8  // ..&....R... ....
    8A60: 02 0F EF 5A 1E 06 1F 8B C1 8B CA F3 A4 03 F5 03  // ...Z............
    8A70: FD 48 75 F5 1F E8 81 FF C3 8A D8 EB F8 BA CE 03  // .Hu.............
    8A80: B0 05 EE 42 EC 24 FC 0A C4 EE 4A C3 9C FA EE 42  // ...B.$....J....B
    8A90: EB 00 EC 4A 9D C3 1E 2E 8E 1E 6E 24 8B 16 63 04  // ...J......n$..c.
    8AA0: 80 C2 06 1F C3 1E 2E 8E 1E 6E 24 8B 16 63 04 1F  // .........n$..c..
    8AB0: C3 50 BA CC 03 EC B2 D4 A8 01 75 02 B2 B4 58 C3  // .P........u...X.
    8AC0: E8 EE FF 80 C2 06 C3 1E 2E 8E 1E 6E 24 80 3E 49  // ...........n$.>I
    8AD0: 04 03 74 13 80 3E 49 04 02 74 0C 80 3E 49 04 01  // ..t..>I..t..>I..
    8AE0: 74 05 80 3E 49 04 00 1F C3 50 2E 8E 06 72 24 A0  // t..>I....P...r$.
    8AF0: 10 04 24 30 3C 30 74 05 2E 8E 06 74 24 58 0B C0  // ..$0<0t....t$X..
    8B00: 74 03 E8 E1 01 03 06 4E 04 81 C2 01 01 2B D1 32  // t......N.....+.2
    8B10: ED 8B 2E 4A 04 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1  // ...J............
    8B20: E5 0A DB 75 02 8A DE 38 F3 7E 02 8A DE C3 FC 8A  // ...u...8.~......
    8B30: D8 8B C1 E8 B3 FF 03 F0 3A 16 4A 04 74 06 06 1F  // ........:.J.t...
    8B40: E8 1B 00 C3 06 1F E8 40 00 C3 FC 8A D8 8A C1 8A  // .......@........
    8B50: E6 E8 95 FF F7 DD 2B F0 06 1F E8 01 00 C3 53 8A  // ......+.......S.
    8B60: CE 2A CB 32 ED 32 F6 2B EA 2B EA E3 0E 8A E1 8B  // .*.2.2.+.+......
    8B70: CA F3 A5 03 F5 03 FD FE CC 75 F4 58 B0 20 8A CA  // .........u.X. ..
    8B80: F3 AB 03 FD FE CB 75 F6 C3 53 8A C6 2A C3 74 06  // ......u..S..*.t.
    8B90: F6 E2 8B C8 F3 A5 58 8B C8 F6 E2 91 B0 20 F3 AB  // ......X...... ..
    8BA0: C3 8B D8 E8 2E 00 2E 8E 1E 74 24 8A C3 22 DF D3  // .........t$.."..
    8BB0: E3 A8 80 74 03 30 1C C3 F6 D7 8A 34 22 F7 0A DE  // ...t.0.....4"...
    8BC0: 88 1C C3 8A FC E8 0C 00 2E 8E 1E 74 24 8A 04 D2  // ...........t$...
    8BD0: E8 22 C7 C3 B0 28 F6 E2 F6 C2 01 74 03 05 D8 1F  // ."...(.....t....
    8BE0: 8B F1 C1 EE 02 80 FF 05 7F 0C 03 F0 F6 D1 80 E1  // ................
    8BF0: 03 D0 E1 B7 03 C3 D1 EE 03 F0 F6 D1 80 E1 07 B7  // ................
    8C00: 01 C3 FC 8A D8 2E 8E 06 74 24 8B C1 E8 86 00 75  // ........t$.....u
    8C10: 02 8A DE 03 F0 E8 24 00 C3 FC 8A D8 2E 8E 06 74  // ......$........t
    8C20: 24 8A C1 8A E6 E8 6D 00 75 02 8A DE F7 DD 81 C6  // $.....m.u.......
    8C30: F0 00 81 C7 F0 00 2B F0 E8 01 00 C3 8A CE 2A CB  // ......+.......*.
    8C40: E3 2C 51 8A CA 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A  // .,Q..VW.........
    8C50: CA 2B F1 2B F9 81 C6 00 20 81 C7 00 20 D1 E9 F3  // .+.+.... ... ...
    8C60: A5 13 C9 F3 A4 5F 5E 03 F5 03 FD 59 E2 D4 8A C7  // ....._^....Y....
    8C70: 8A E7 8A CA 57 D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B  // ....W..........+
    8C80: F9 81 C7 00 20 D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD  // .... ........_..
    8C90: FE CB 75 DE C3 E8 B0 00 81 C2 01 01 2B D1 38 F3  // ..u.........+.8.
    8CA0: 76 02 32 DB 51 B1 02 D2 E6 D2 E3 59 32 ED BD 50  // v.2.Q......Y2..P
    8CB0: 00 80 3E 49 04 06 74 04 D0 E2 D1 E0 06 1F 8B F8  // ..>I..t.........
    8CC0: 8B F0 B0 50 F6 E3 0A DB C3 52 53 8A DF 32 FF D1  // ...P.....RS..2..
    8CD0: E3 8B 87 50 04 E8 0E 00 50 D1 EB A1 4C 04 F7 E3  // ...P....P...L...
    8CE0: 5B 03 C3 5B 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6  // [..[Z.R...J...2.
    8CF0: 03 C2 D1 E0 5A C3 8B E8 83 E5 0F 2E 8A A6 A6 8C  // ....Z...........
    8D00: 8B E8 C1 ED 04 83 E5 0F 2E 8A 86 A6 8C C3 00 03  // ................
    8D10: 0C 0F 30 33 3C 3F C0 C3 CC CF F0 F3 FC FF 26 8B  // ..03<?........&.
    8D20: 04 86 E0 BA 00 80 F6 C4 C0 74 02 0A D6 D0 EE C1  // .........t......
    8D30: E0 02 75 F2 88 56 00 45 C3 8B 16 63 04 8A C5 86  // ..u..V.E...c....
    8D40: E0 EF 8A E1 FE C0 EF C3 52 8B D0 8A C4 F6 26 4A  // ........R.....&J
    8D50: 04 C1 E0 02 32 F6 03 C2 5A C3 53 8A DF 32 FF D1  // ....2...Z.S..2..
    8D60: E3 8B 87 50 04 D1 EB E8 02 00 5B C3 52 8B D0 32  // ...P......[.R..2
    8D70: F6 52 8A C4 F6 26 85 04 F7 26 4A 04 5A 03 C2 0A  // .R...&...&J.Z...
    8D80: DB 74 08 03 06 4C 04 FE CB 75 F8 5A C3 52 8B D0  // .t...L...u.Z.R..
    8D90: A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 03 06 4E 04 D1  // .J...2.......N..
    8DA0: F8 8B C8 B4 0E E8 91 FF 5A C3 8B C2 F7 26 4A 04  // ........Z....&J.
    8DB0: 8B F9 C1 EF 03 03 F8 0A FF 74 0A 8A C7 32 E4 F7  // .........t...2..
    8DC0: 26 4C 04 03 F8 80 E1 07 B4 80 D2 EC C3 E8 F0 FC  // &L..............
    8DD0: EC C3 E8 F8 FF B2 C0 B0 20 EE C3 E8 EF FF B2 C0  // ........ .......
    8DE0: 32 C0 EE C3 C4 3E A8 04 26 C4 7D 04 8C C5 0B EF  // 2....>..&.}.....
    8DF0: C3 53 B0 0E E8 95 FC 8A E0 B0 0F E8 8E FC 8B D8  // .S..............
    8E00: B8 0E AA EF B8 0F 55 EF B0 0E E8 7F FC 3C AA 74  // ......U......<.t
    8E10: 0D B0 0F E8 76 FC 3C 55 74 04 32 C0 5B C3 B0 0E  // ....v.<Ut.2.[...
    8E20: 8A E7 EF FE C0 8A E3 EF B0 01 0A C0 5B C3 8A EE  // ............[...
    8E30: 8A 36 85 04 06 1F 0A DB 74 25 8A C5 2A C3 F6 E6  // .6......t%..*...
    8E40: 8B C8 52 32 F6 C1 E2 02 8B C2 D1 E2 2B D5 51 8B  // ..R2........+.Q.
    8E50: C8 F3 A5 2B FA 2B F2 59 E2 F4 5A E8 05 00 C3 8A  // ...+.+.Y..Z.....
    8E60: DD EB F8 8A C6 F6 E3 8B C8 8A C7 8A E0 32 F6 C1  // .............2..
    8E70: E2 02 8B DA D1 E2 8B F1 2B D5 8B CB F3 AB 2B FA  // ........+.....+.
    8E80: 4E 75 F7 C3 2E 8E 1E 6E 24 89 0E 60 04 8A C5 24  // Nu.....n$..`...$
    8E90: 60 A8 20 74 06 B9 00 1E E9 94 00 F6 06 87 04 01  // `. t............
    8EA0: 0F 85 8B 00 80 3E 49 04 07 74 06 E8 19 FC 74 01  // .....>I..t....t.
    8EB0: C3 F6 06 87 04 08 74 03 CD 42 C3 8A 36 85 04 8A  // ......t..B..6...
    8EC0: D6 FE CA 38 CD 7E 1F 0A C9 74 64 8A E9 8A CE FE  // ...8.~...td.....
    8ED0: C9 EB 5C 38 D1 74 58 8A CE 80 FD 03 7C 04 8A E9  // ..\8.tX.....|...
    8EE0: D0 ED FE C9 EB 49 80 F9 03 7E 44 8A E1 2A E5 0A  // .....I...~D..*..
    8EF0: E4 75 0A 38 CA 74 38 FE CA 38 CA 74 32 8A C5 0A  // .u.8.t8..8.t2...
    8F00: C1 38 F0 7E 0A 80 FC 02 7E 12 80 FD 02 7F C8 80  // .8.~....~.......
    8F10: FC 03 7D BF 8A D6 FE CA 38 D1 74 13 8A CE FE C9  // ..}.....8.t.....
    8F20: FE C9 8A E9 2A EC 80 FE 08 7F 04 FE C1 FE C5 B4  // ....*...........
    8F30: 0A E8 05 FE C3 2E 8E 1E 6E 24 A2 62 04 32 E4 8B  // ........n$.b.2..
    8F40: F0 F7 26 4C 04 A3 4E 04 8B C8 E8 7A FB 74 07 80  // ..&L..N....z.t..
    8F50: 3E 49 04 07 77 02 D1 F9 B4 0C E8 DC FD D1 E6 8B  // >I..w...........
    8F60: 84 50 04 E8 27 FE C3 2E 8E 1E 6E 24 8A 26 49 04  // .P..'.....n$.&I.
    8F70: E8 D1 A8 74 07 C7 06 50 04 00 00 C3 E8 48 FB 74  // ...t...P.....H.t
    8F80: 0B 80 FC 07 74 06 77 08 E8 77 FC C3 E8 9F FB C3  // ....t.w..w......
    8F90: 80 FC 13 7C 03 74 1F C3 E8 4E FA 8A D8 8B C1 E8  // ...|.t...N......
    8FA0: 85 FA 8B 2E 4A 04 52 F6 26 85 04 F7 E5 8B F7 03  // ....J.R.&.......
    8FB0: F0 5A E8 90 FA C3 E8 30 FA 8A D8 8B C1 E8 67 FA  // .Z.....0......g.
    8FC0: C1 E7 03 52 8B 2E 4A 04 C1 E5 03 F7 26 85 04 F7  // ...R..J.....&...
    8FD0: E5 8B F7 03 F0 5A E8 55 FE C3 2E 8E 1E 6E 24 8A  // .....Z.U.....n$.
    8FE0: 26 49 04 E8 E1 FA 74 0C 80 FC 07 74 07 77 40 80  // &I....t....t.w@.
    8FF0: FC 03 7F 04 E8 53 FB C3 E8 1E FC C3 E8 EA F9 8A  // .....S..........
    9000: D8 8A C1 8A E6 FE C4 E8 1D FA 2B 3E 4A 04 C1 E7  // ..........+>J...
    9010: 03 52 F7 26 85 04 F7 26 4A 04 C1 E0 03 8B F7 2B  // .R.&...&J......+
    9020: F0 5A 8B 2E 4A 04 C1 E5 03 F7 DD E8 00 FE C3 80  // .Z..J...........
    9030: FC 13 7C 03 74 C6 C3 E8 AF F9 8A D8 8A C1 8A E6  // ..|.t...........
    9040: FE C4 E8 E2 F9 52 8B 2E 4A 04 F7 26 85 04 F7 E5  // .....R..J..&....
    9050: 2B FD 8B F7 2B F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E  // +...+.Z.........
    9060: 6E 24 2E 8E 06 74 24 E8 5D FA 74 11 80 3E 49 04  // n$...t$.].t..>I.
    9070: 07 7C 18 2E 8E 06 72 24 74 03 E9 B1 00 E8 49 FC  // .|....r$t.....I.
    9080: 8B D8 26 8B 07 8B EC 89 46 1A C3 A1 50 04 E8 B7  // ..&.....F...P...
    9090: FC 8B F0 BB 08 00 2B E3 8B EC 80 3E 49 04 06 75  // ......+....>I..u
    90A0: 1F B9 04 00 26 8A 04 88 46 00 45 26 8A 84 00 20  // ....&...F.E&... 
    90B0: 88 46 00 45 83 C6 50 E2 EB B8 00 02 B2 80 EB 17  // .F.E..P.........
    90C0: D1 E6 B9 04 00 E8 56 FC 81 C6 00 20 E8 4F FC 81  // ......V.... .O..
    90D0: EE B0 1F E2 F0 EB E2 2B EB C4 3E 0C 01 32 F6 80  // .......+..>..2..
    90E0: FB 0E 75 09 26 83 7D FE 10 75 02 B6 80 16 1F 8B  // ..u.&.}..u......
    90F0: F5 8B CB F6 C6 80 74 01 47 56 57 F3 A6 5F 5E 74  // ......t.GVW.._^t
    9100: 23 FE C0 03 FB F6 C6 80 74 01 47 FE CA 75 E2 FE  // #.......t.G..u..
    9110: CC 74 0F 2E 8E 1E 6E 24 C4 3E 7C 00 B0 80 B2 80  // .t....n$.>|.....
    9120: EB CB 32 C0 8B E5 03 E3 8B EC 89 46 1A C3 80 3E  // ..2........F...>
    9130: 49 04 13 7C 05 75 02 EB 5A C3 2E 8E 06 70 24 E8  // I..|.u..Z....p$.
    9140: 18 FC 8B F0 8B 1E 85 04 2B E3 8B EC B8 05 08 B9  // ........+.......
    9150: 05 00 BA CE 03 80 3E 49 04 0F 72 1A F6 06 87 04  // ......>I..r.....
    9160: 60 75 13 B4 0A F7 C6 01 00 75 02 B4 05 B0 07 EF  // `u.......u......
    9170: B8 05 18 B9 05 01 EF 51 8B CB 26 8A 04 F6 D0 88  // .......Q..&.....
    9180: 46 00 45 03 36 4A 04 E2 F1 58 EF B8 00 01 32 D2  // F.E.6J...X....2.
    9190: E9 44 FF 2E 8E 06 70 24 A1 50 04 8B D0 32 F6 52  // .D....p$.P...2.R
    91A0: 8A C4 32 E4 F7 26 4A 04 F7 26 85 04 5A 03 C2 8B  // ..2..&J..&..Z...
    91B0: F0 8B 1E 85 04 2B E3 8B EC 53 8B 3E 4A 04 4F C1  // .....+...S.>J.O.
    91C0: E7 03 C1 E6 03 B9 08 00 32 E4 26 8A 04 D0 E4 0A  // ........2.&.....
    91D0: C0 74 03 80 CC 01 46 E2 F1 88 66 00 45 03 F7 4B  // .t....F...f.E..K
    91E0: 75 E3 5B B8 00 01 32 D2 E9 EC FE 33 ED EB 03 BD  // u.[...2....3....
    91F0: 01 00 2E 8E 1E 6E 24 2E 8E 06 74 24 8A 26 49 04  // .....n$...t$.&I.
    9200: E8 C4 F8 74 0F 2E 8E 06 72 24 80 FC 07 74 05 7C  // ...t....r$...t.|
    9210: 3D E9 0B 02 8A E3 8B F0 8A DF 32 FF D1 E3 8B 87  // =.........2.....
    9220: 50 04 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 8B F8 D1  // P....J...2......
    9230: E7 0A DB 74 0B D0 EB A1 4C 04 03 F8 FE CB 75 FA  // ...t....L.....u.
    9240: 8B C6 0B ED 75 03 F3 AB C3 AA 47 E2 FC C3 50 2E  // ....u.....G...P.
    9250: 8E 06 74 24 A1 50 04 E8 EE FA 8B F8 A0 50 04 8A  // ..t$.P.......P..
    9260: 26 4A 04 8B E8 58 A8 80 74 08 24 7F C5 36 7C 00  // &J...X..t.$..6|.
    9270: EB 04 C5 36 0C 01 8A FC 32 E4 C1 E0 03 03 F0 80  // ...6....2.......
    9280: FF 06 74 69 D1 E7 8A F3 B0 55 80 E3 03 F6 E3 8A  // ..ti.....U......
    9290: D8 8A F8 8B C5 50 B2 04 F6 C6 80 75 27 AC E8 55  // .....P.....u'..U
    92A0: FA 23 C3 AB AC E8 4E FA 23 C3 26 89 85 FE 1F 83  // .#....N.#.&.....
    92B0: C7 4E FE CA 75 E7 83 EE 08 81 EF 3E 01 58 E8 72  // .N..u......>.X.r
    92C0: 00 E2 D2 C3 AC E8 2E FA 23 C3 26 31 05 AC E8 25  // ........#.&1...%
    92D0: FA 23 C3 26 31 85 00 20 83 C7 50 FE CA 75 E5 83  // .#.&1.. ..P..u..
    92E0: EE 08 81 EF 3E 01 58 E8 49 00 E2 A9 C3 8B C5 50  // ....>.X.I......P
    92F0: B2 04 F6 C3 80 74 1F AC 26 30 05 AC 26 30 85 00  // .....t..&0..&0..
    9300: 20 83 C7 50 FE CA 7F EF 83 EE 08 81 EF 3F 01 58  //  ..P.........?.X
    9310: E8 20 00 E2 DA C3 AC AA AC 26 88 85 FF 1F 83 C7  // . .......&......
    9320: 4F FE CA 7F F1 83 EE 08 81 EF 3F 01 58 E8 03 00  // O.........?.X...
    9330: E2 BD C3 FE C0 38 E0 72 06 32 C0 81 C7 F0 00 C3  // .....8.r.2......
    9340: 8A 16 85 04 F6 E2 8B F0 32 F6 8B EA 66 0F B6 06  // ........2...f...
    9350: 51 04 F6 E2 66 0F B7 16 4A 04 83 FA 64 75 03 BA  // Q...f...J...du..
    9360: 68 00 83 FA 5A 75 03 BA 60 00 81 FA AF 00 75 03  // h...Zu..`.....u.
    9370: BA B0 00 52 F7 E2 66 0F B7 F8 66 0F B6 06 50 04  // ...R..f...f...P.
    9380: 66 03 F8 66 C1 CF 10 03 FA 66 C1 C7 03 81 CF 00  // f..f.....f......
    9390: FF 66 C1 C7 10 5A 8A E2 4A C1 E2 03 A0 50 04 50  // .f...Z..J....P.P
    93A0: C5 06 0C 01 03 F0 2E 8E 06 70 24 58 57 51 50 9C  // .........p$XWQP.
    93B0: FC 8B CD E8 3B 00 B5 08 AC 8A E0 8A C7 D0 E4 73  // ....;..........s
    93C0: 02 8A C3 26 88 05 66 47 FE CD 75 EF 66 03 FA E2  // ...&..fG..u.f...
    93D0: E2 9D 58 59 5F 83 C7 08 FE C0 38 E0 72 0E 51 32  // ..XY_.....8.r.Q2
    93E0: C0 8B CD 49 03 FA 83 C7 08 E2 F9 59 2B F5 E2 BC  // ...I.......Y+...
    93F0: C3 06 52 33 C0 8E C0 66 C1 C7 10 8B C7 66 C1 C7  // ..R3...f.....f..
    9400: 10 E8 40 A4 74 16 38 E0 74 12 0F B6 D0 E8 91 C9  // ..@.t.8.t.......
    9410: 8A E0 66 C1 C7 10 8B F8 66 C1 C7 10 5A 07 C3 80  // ..f.....f...Z...
    9420: FC 13 7C 0B 0F 84 18 FF 80 FC 62 0F 84 11 FF E8  // ..|.......b.....
    9430: 01 00 C3 80 FC 11 75 06 80 E3 80 80 CB 0F 50 53  // ......u.......PS
    9440: 8A DF 32 FF D1 E3 8B 97 50 04 5B 2E 8E 06 70 24  // ..2.....P.[...p$
    9450: E8 07 F9 8B F8 8B 2E 85 04 58 32 F6 52 8B 36 4A  // .........X2.R.6J
    9460: 04 56 8A 26 85 04 C5 36 0C 01 80 FC 0E 75 09 83  // .V.&...6.....u..
    9470: 7C FE 10 75 03 B4 10 46 F6 E4 03 F0 B6 03 F6 C3  // |..u...F........
    9480: 80 75 6D B2 C4 B8 02 0F EF 5A 58 50 52 4A 8A E0  // .um......ZXPRJ..
    9490: 57 51 51 57 8B CD 32 C0 AA 03 FA E2 FB 5F 47 FE  // WQQW..2......_G.
    94A0: C4 38 D4 76 0A 32 E4 8B CD 49 03 FA 47 E2 FB 59  // .8.v.2...I..G..Y
    94B0: E2 E0 59 5F BA C4 03 B0 02 8A E3 EF 5B 4B 5A 51  // ..Y_........[KZQ
    94C0: 57 8B CD AC 26 8A 25 AA 03 FB E2 F7 5F 47 2B F5  // W...&.%....._G+.
    94D0: 42 3B D3 76 0A 33 D2 8B CD 49 03 FB 47 E2 FB 59  // B;.v.3...I..G..Y
    94E0: E2 DD BA CE 03 B8 03 00 EF B2 C4 B8 02 0F EF C3  // ................
    94F0: B2 CE B8 03 18 EF EB BC 2E 8E 1E 6E 24 80 3E 63  // ...........n$.>c
    9500: 04 B4 74 0B BA CC 03 EC A8 01 75 04 CD 42 C3 C3  // ..t.......u..B..
    9510: E8 D1 F8 0A FF 75 1C 8A E3 80 E4 1F 80 26 66 04  // .....u.......&f.
    9520: E0 08 26 66 04 E8 2D 00 8A 1E 66 04 80 E3 20 B1  // ..&f..-...f... .
    9530: 05 D2 EB E8 91 F5 74 19 A0 66 04 24 DF 80 E3 01  // ......t..f.$....
    9540: 74 02 0C 20 A2 66 04 24 10 0C 02 0A D8 E8 53 00  // t.. .f.$......S.
    9550: C3 E8 7E F8 C3 53 50 80 E3 0F 8A FB D0 E3 81 E3  // ..~..SP.........
    9560: 10 07 0A DF E8 60 F5 74 0E B4 00 8A C3 E8 2C F3  // .....`.t......,.
    9570: 0B ED 74 03 26 88 1D 8A C3 E8 0B 00 0B ED 74 04  // ..t.&.........t.
    9580: 26 88 5D 10 58 5B C3 8A E0 1E 2E 8E 1E 6E 24 80  // &.].X[.......n$.
    9590: 3E 49 04 33 1F 7F 08 8A C4 B4 11 E8 FE F2 C3 E8  // >I.3............
    95A0: 30 F8 C3 9C FA E8 9F 05 B2 C0 B9 03 00 B4 01 8A  // 0...............
    95B0: C4 EE 8A C3 EE 0B ED 74 04 47 26 88 1D FE C4 80  // .......t.G&.....
    95C0: C3 02 E2 EB B0 20 EE 9D C3 2E 8E 1E 6E 24 8A 26  // ..... ......n$.&
    95D0: 49 04 E8 F2 F4 74 0A 80 FC 07 77 06 74 03 E8 C0  // I....t....w.t...
    95E0: F5 C3 80 FC 13 7C 03 74 4C C3 8A D8 E8 BB F7 BA  // .....|.tL.......
    95F0: CE 03 B0 08 EF 2E 8E 1E 70 24 F6 C3 80 75 1C B2  // ........p$...u..
    9600: C4 B8 02 FF EF 8A 25 C6 05 00 8A E3 EF 8A 25 B4  // ......%.......%.
    9610: FF 88 25 EF B2 CE B8 08 FF EF C3 B8 03 18 EF B2  // ..%.............
    9620: C4 B0 02 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8  // .......%...%....
    9630: 03 00 EF EB E1 50 2E 8E 06 70 24 A1 4A 04 C1 E0  // .....P...p$.J...
    9640: 03 F7 E2 03 C1 8B F8 58 26 88 05 C3 2E 8E 1E 6E  // .......X&......n
    9650: 24 8A 26 49 04 E8 6F F4 74 0F 80 FC 07 77 0B 74  // $.&I..o.t....w.t
    9660: 08 E8 5F F5 8B EC 89 46 1A C3 80 FC 13 7C 03 74  // .._....F.....|.t
    9670: 29 C3 E8 35 F7 8A CC 2E 8E 1E 70 24 BA CE 03 32  // )..5......p$...2
    9680: FF B8 04 03 EF D0 E7 8A 1D 22 D9 74 03 80 CF 01  // .........".t....
    9690: FE CC 7D F0 8B EC 88 7E 1A C3 A1 4A 04 C1 E0 03  // ..}....~...J....
    96A0: F7 E2 03 C1 8B F8 2E 8E 1E 70 24 8A 05 8B EC 88  // .........p$.....
    96B0: 46 1A C3 2E 8E 1E 6E 24 8A 3E 62 04 8A CF D0 E1  // F.....n$.>b.....
    96C0: 32 ED BE 50 04 03 F1 8B 14 8A 0E 49 04 3C 0D 76  // 2..P.......I.<.v
    96D0: 4A 2E 8E 06 74 24 E8 EE F3 75 33 8A 1E 4A 04 8A  // J...t$...u3..J..
    96E0: F8 8A C6 F6 E3 8A CA 03 C8 D1 E1 03 0E 4E 04 8B  // .............N..
    96F0: F9 8A C7 AA D1 E9 41 FE C2 38 DA 73 59 89 14 8B  // ......A..8.sY...
    9700: 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF C3 2E 8E  // .c..............
    9710: 06 72 24 80 F9 07 74 C3 E9 83 00 75 04 32 D2 EB  // .r$...t....u.2..
    9720: 0F 3C 0A 75 1D 3A 36 84 04 75 03 E9 93 00 FE C6  // .<.u.:6..u......
    9730: 89 14 E8 92 F3 75 05 80 F9 07 7F 05 8B C2 E8 4C  // .....u.........L
    9740: F6 C3 3C 07 75 04 E8 D3 8F C3 3C 08 75 83 0A D2  // ..<.u.....<.u...
    9750: 74 DE FE CA EB DA 32 FF 32 D2 2B CB 3A 36 84 04  // t.....2.2.+.:6..
    9760: 74 06 FE C6 03 CB EB 95 89 14 8B 16 63 04 B0 0E  // t...........c...
    9770: 8A E5 EF 8A E1 FE C0 EF 2B FB 2B FB 26 8A 65 02  // ........+.+.&.e.
    9780: 50 8B 3E 4E 04 8B F3 D1 E6 03 F7 A0 84 04 F6 E3  // P.>N............
    9790: 8B C8 06 1F F3 A5 8B CB 58 B0 20 F3 AB C3 B9 01  // ........X. .....
    97A0: 00 B4 0A E8 C2 C6 FE C2 3A 16 4A 04 74 03 89 14  // ........:.J.t...
    97B0: C3 32 FF 32 D2 89 14 3A 36 84 04 74 2E FE C6 EB  // .2.2...:6..t....
    97C0: ED 89 14 2E 8E 06 74 24 E8 FC F2 74 0E 2E 8E 06  // ......t$...t....
    97D0: 72 24 80 F9 07 74 04 32 FF EB 10 8B C2 E8 AD F5  // r$...t.2........
    97E0: 8B F9 D1 E7 4F 8B 1E 4A 04 EB 91 33 C9 8A 36 84  // ....O..J...3..6.
    97F0: 04 8A 16 4A 04 FE CA B0 01 E9 70 F7 2E 8E 1E 6E  // ...J......p....n
    9800: 24 F6 06 87 04 08 74 03 CD 42 C3 E8 76 F6 8B EC  // $.....t..B..v...
    9810: C6 46 1B 00 C3 2E 8E 1E 6E 24 8A DF 32 FF D1 E3  // .F......n$..2...
    9820: 89 97 50 04 D0 EB 38 1E 62 04 75 05 8B C2 E8 5C  // ..P...8.b.u....\
    9830: F5 C3 2E 8E 1E 6E 24 8A DF 32 FF D1 E3 8B 97 50  // .....n$..2.....P
    9840: 04 8B 0E 60 04 8B EC 89 4E 16 89 56 12 C3 2E 8E  // ...`....N..V....
    9850: 1E 6E 24 A0 87 04 24 80 0A 06 49 04 8A 26 4A 04  // .n$...$...I..&J.
    9860: F6 06 87 04 08 75 2D E8 5D F2 74 07 80 3E 49 04  // .....u-.].t..>I.
    9870: 07 7F 21 51 8A CC 8A 2E 84 04 BE 3F 98 81 FE 48  // ..!Q.......?...H
    9880: 98 74 10 2E 3B 0C 74 05 83 C6 03 EB F0 24 80 2E  // .t..;.t......$..
    9890: 0A 44 02 59 8A 3E 62 04 8B EC 89 46 1A 89 5E 0E  // .D.Y.>b....F..^.
    98A0: 89 4E 16 89 56 12 C3 84 18 23 84 2B 33 84 2A 32  // .N..V....#.+3.*2
    98B0: 2E 8E 1E 6E 24 3C 04 7F 1B 50 52 BA CC 03 EC A8  // ...n$<...PR.....
    98C0: 01 5A 58 74 08 80 3E 63 04 D4 74 08 C3 80 3E 63  // .ZXt..>c..t...>c
    98D0: 04 B4 75 F8 3C 1C 73 F4 32 E4 8B E8 D1 E5 2E FF  // ..u.<.s.2.......
    98E0: A6 7B 98 B3 98 D3 98 E5 98 1A 99 64 98 64 98 64  // .{.........d.d.d
    98F0: 98 3F 99 57 99 5B 99 64 98 64 98 64 98 64 98 64  // .?.W.[.d.d.d.d.d
    9900: 98 64 98 89 99 64 98 8D 99 A8 99 64 98 E7 99 64  // .d...d.....d...d
    9910: 98 F5 99 10 9A 17 9A 23 9A 47 9A 80 3E 49 04 13  // .......#.G..>I..
    9920: 74 15 E8 BF F4 8B C3 86 E0 E8 70 EF 0B ED 74 07  // t.........p...t.
    9930: 8A C7 32 FF 26 88 01 E8 93 F4 C3 E8 A6 F4 8A C7  // ..2.&...........
    9940: E8 44 FC 0B ED 74 F0 26 88 7D 11 EB EA 80 3E 49  // .D...t.&.}....>I
    9950: 04 13 74 E3 06 E8 8C F4 1F 0B ED 74 07 8B F2 B9  // ..t........t....
    9960: 11 00 F3 A4 8B F2 E8 DE 01 32 E4 B9 10 00 B2 C0  // .........2......
    9970: 9C FA 8A C4 EE AC EE 9D FE C4 E2 F4 AC E8 07 FC  // ................
    9980: EB B5 80 FB 01 77 B0 E8 43 F4 B2 C0 B0 30 E8 FB  // .....w..C....0..
    9990: F0 24 F7 80 26 65 04 DF 80 FB 00 74 07 0C 08 80  // .$..&e.....t....
    99A0: 0E 65 04 20 EE EB 90 E8 9D 01 8A C3 B2 C0 E8 DB  // .e. ............
    99B0: F0 8B C8 EE B0 20 EE 8B EC 88 4E 0F E9 78 FF B3  // ..... ....N..x..
    99C0: 11 EB E4 8B FA E8 05 F4 B9 10 00 32 E4 B2 C0 8A  // ...........2....
    99D0: C4 9C FA EE 42 EC 26 88 05 FE C4 4A EE 9D 47 E2  // ....B.&....J..G.
    99E0: EE 9C FA B0 11 EE 42 EC 9D 26 88 05 E8 E3 F3 EB  // ......B..&......
    99F0: 5A E8 CE 00 C3 8B FA 51 8B C3 26 8A 35 26 8A 6D  // Z......Q..&.5&.m
    9A00: 01 26 8A 4D 02 E8 CA 00 83 C7 03 43 59 E2 E8 C3  // .&.M.......CY...
    9A10: 0A DB 75 1A E8 B6 F3 B2 C0 B0 30 E8 6E F0 24 7F  // ..u.......0.n.$.
    9A20: F6 C7 01 74 02 0C 80 B4 30 E8 70 EE EB 1D FE CB  // ...t....0.p.....
    9A30: 75 1C E8 98 F3 B2 C0 B0 30 E8 50 F0 EE A8 80 75  // u.......0.P....u
    9A40: 03 C0 E7 02 B4 34 8A C7 E8 51 EE E8 7F F3 C3 8A  // .....4...Q......
    9A50: C3 E8 D1 00 8B EC 89 4E 16 88 76 13 C3 8B FA 51  // .......N..v....Q
    9A60: 8B C3 E8 C3 00 26 88 35 26 88 6D 01 26 88 4D 02  // .....&.5&.m.&.M.
    9A70: 83 C7 03 43 59 E2 E8 C3 BA C6 03 8A C3 EE C3 BA  // ...CY...........
    9A80: C6 03 EC 32 E4 8B EC 89 46 0E C3 E8 3F F3 B2 C0  // ...2....F...?...
    9A90: B0 34 E8 F7 EF 8A F8 EE B0 30 E8 EF EF B3 01 A8  // .4.......0......
    9AA0: 80 75 05 B3 00 C0 EF 02 8B EC 89 5E 0E EB 9C 51  // .u.........^...Q
    9AB0: 8B C3 E8 73 00 E8 2A 00 8A C3 E8 52 00 43 59 E2  // ...s..*....R.CY.
    9AC0: EE C3 F6 06 89 04 02 74 03 E8 16 00 8A C3 E8 39  // .......t.......9
    9AD0: 00 C3 F6 06 89 04 02 74 03 E8 06 00 8A C3 E8 2E  // .......t........
    9AE0: 00 C3 50 B0 1E F6 E6 50 B0 3B F6 E5 50 B0 0B F6  // ..P....P.;..P...
    9AF0: E1 59 03 C1 59 03 C1 B1 64 F6 F1 80 FC 32 7C 02  // .Y..Y...d....2|.
    9B00: FE C0 8A F0 8A E8 8A C8 58 C3 52 E8 39 00 5A 53  // ........X.R.9.ZS
    9B10: 8B DA BA C8 03 9C FA EE 42 8A C7 EE 8A C5 EE 8A  // ........B.......
    9B20: C1 EE 9D 5B C3 E8 1F 00 53 9C FA BA C7 03 EE 42  // ...[....S......B
    9B30: 42 EC 8A F8 EB 00 EB 00 EC 8A E8 EB 00 EB 00 EC  // B...............
    9B40: 8A C8 8A F7 9D 5B C3 50 51 E8 81 F2 B9 FF 7F EC  // .....[.PQ.......
    9B50: A8 08 75 02 E2 F9 59 58 C3 2E 8E 1E 6E 24 8B F8  // ..u...YX....n$..
    9B60: 24 0F 81 E7 F0 00 C1 EF 03 83 FF 06 7F 18 2E FF  // $...............
    9B70: A5 0B 9B 13 9B 28 9B C6 9B 22 9C 3C 03 74 08 3C  // .....(...".<.t.<
    9B80: 04 7F 03 E8 CF 01 C3 BA C4 03 B0 03 8A E3 EF C3  // ................
    9B90: 3C 04 77 F2 50 53 50 52 8B 16 63 04 B0 07 E8 EB  // <.w.PSPR..c.....
    9BA0: EE 8A E0 D0 EC 80 E4 01 A8 40 74 03 80 CC 02 B0  // .........@t.....
    9BB0: 12 E8 D8 EE 40 A3 85 04 B0 09 E8 CF EE A8 80 74  // ....@..........t
    9BC0: 04 D1 2E 85 04 A1 85 04 8B D0 3D F4 01 73 1B BA  // ..........=..s..
    9BD0: E0 01 3D C2 01 73 13 BA 90 01 3D 7C 01 73 0B BA  // ..=..s....=|.s..
    9BE0: 5E 01 3D 4A 01 73 03 BA C8 00 89 16 85 04 5A 58  // ^.=J.s........ZX
    9BF0: C6 06 84 04 FF E8 5D 01 5B 58 8A DF 32 FF 0A C0  // ......].[X..2...
    9C00: 74 0E B3 0E 3C 01 74 08 B3 08 3C 02 74 02 B3 10  // t...<.t...<.t...
    9C10: 8A CB 8A E9 81 E9 01 02 80 F9 08 7E 04 81 E9 01  // ...........~....
    9C20: 01 87 1E 85 04 53 E8 5B F2 5B E8 85 02 C3 0A C0  // .....S.[.[......
    9C30: 74 11 FE C8 74 1A FE C8 74 38 FE C8 74 3C FE C8  // t...t...t8..t<..
    9C40: 74 40 C3 89 2E 7C 00 8C 06 7E 00 C3 8C C8 8E C0  // t@...|...~......
    9C50: FE CA 0A DB 74 07 32 FF 2E 8A 97 06 9C 89 0E 85  // ....t.2.........
    9C60: 04 88 16 84 04 89 2E 0C 01 8C 06 0E 01 C3 00 0D  // ................
    9C70: 18 2A E8 09 03 B9 0E 00 EB D6 BD 16 6B B9 08 00  // .*..........k...
    9C80: EB CA BD 29 73 B9 10 00 EB C2 0A C0 75 BD 8B 0E  // ...)s.......u...
    9C90: 85 04 8A 16 84 04 80 FF 07 77 35 80 FF 01 77 10  // .........w5...w.
    9CA0: 0A FF 75 06 C4 2E 7C 00 EB 26 C4 2E 0C 01 EB 20  // ..u...|..&..... 
    9CB0: 80 FF 02 75 0B 8C CD 8E C5 2E 8B 2E 08 84 EB 10  // ...u............
    9CC0: 0E 07 8A DF 32 FF 80 EB 02 D1 E3 2E 8B AF 79 9C  // ....2.........y.
    9CD0: 8B C5 8B EC 89 4E 16 89 56 12 89 46 0A 8C 46 1E  // .....N..V..F..F.
    9CE0: C3 29 73 16 6B 16 6F 16 73 29 73 29 83 53 06 8A  // .)s.k.o.s)s).S..
    9CF0: 26 49 04 E8 CD C3 26 8A 47 02 26 8A 67 33 F6 C4  // &I....&.G.&.g3..
    9D00: 01 74 22 BD 29 73 3C 10 7D 0E E8 71 02 8C 06 0E  // .t".)s<.}..q....
    9D10: 01 3C 0E 7D 07 BD 16 6B 8C 0E 0E 01 89 2E 0C 01  // .<.}...k........
    9D20: E8 10 01 EB 2D B4 84 3C 10 7D 13 B4 81 3C 0E 74  // ....-..<.}...<.t
    9D30: 0D 7F 15 B4 02 3C 08 74 05 80 CC 80 EB 0A 26 F6  // .....<.t......&.
    9D40: 47 05 01 74 03 80 E4 7F 86 C4 32 DB E8 06 00 E8  // G..t......2.....
    9D50: C9 01 07 5B C3 8B F8 8B F2 BA CE 03 EC B8 05 00  // ...[............
    9D60: EF B8 06 04 EF B2 C4 EC B8 02 04 EF B8 04 07 EF  // ................
    9D70: 8B D6 8B C7 50 24 7F 0A C0 74 22 0E 07 33 D2 B9  // ....P$...t"..3..
    9D80: 00 01 3C 04 75 07 B7 10 BD 29 73 EB 10 FE C8 75  // ..<.u....)s....u
    9D90: 07 B7 0E E8 E8 01 EB 05 B7 08 BD 16 6B E8 2D 00  // ............k.-.
    9DA0: 58 A8 80 74 00 BA C4 03 B8 02 03 EF B8 04 02 EF  // X..t............
    9DB0: B2 CC EC A8 01 B8 06 0E 75 02 B4 0A B2 CE 50 EC  // ........u.....P.
    9DC0: 58 EF B0 04 EE 32 C0 EE B8 05 10 EF C3 FC 0B C9  // X....2..........
    9DD0: 75 01 C3 80 FF 0E 75 0A 26 83 7E FE 10 75 03 80  // u.....u.&.~..u..
    9DE0: CD 80 1E 06 1F 2E 8E 06 70 24 8B FA C1 E7 05 B0  // ........p$......
    9DF0: 40 53 80 E3 03 F6 E3 5B F6 C3 04 74 02 04 20 86  // @S.....[...t.. .
    9E00: E0 8B D0 03 FA 8B F5 E3 28 32 C0 86 FB 32 FF 51  // ........(2...2.Q
    9E10: F6 C5 80 74 01 46 8B CB F3 A4 83 FB 20 74 07 B9  // ...t.F...... t..
    9E20: 20 00 2B CB F3 AA 59 F6 C5 80 74 01 46 FE C9 75  //  .+...Y...t.F..u
    9E30: DE 1F C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4  // ....&I.P.W.>..&.
    9E40: 7D 0C 8C C5 0B EF 74 30 8B EF 83 C7 07 26 8A 05  // }.....t0.....&..
    9E50: 3C FF 74 24 38 E0 74 03 47 EB F2 8B FD 26 8A 05  // <.t$8.t.G....&..
    9E60: FE C8 A2 84 04 26 8B 45 01 A3 85 04 26 C4 7D 03  // .....&.E....&.}.
    9E70: 89 3E 0C 01 8C 06 0E 01 5F 07 58 C3 26 F6 47 33  // .>......_.X.&.G3
    9E80: 01 74 01 C3 C4 1E A8 04 26 C4 5F 08 8C C0 0B C3  // .t......&._.....
    9E90: 74 1F BF 0B 00 26 8A 01 3C FF 74 15 47 38 06 49  // t....&..<.t.G8.I
    9EA0: 04 75 F2 26 8A 07 32 E4 87 06 85 04 8B D8 E8 01  // .u.&..2.........
    9EB0: 00 C3 8B 16 63 04 8A 26 85 04 FE CC 80 E4 1F 9C  // ....c..&........
    9EC0: FA 80 FA D4 74 0B B0 14 EE 42 EC 24 E0 0A C4 EE  // ....t....B.$....
    9ED0: 4A B0 09 EE 42 EC 24 E0 0A C4 EE 9D 8A C8 8B C3  // J...B.$.........
    9EE0: 8A 16 85 04 F6 F2 80 3E 84 04 FF 75 07 A2 84 04  // .......>...u....
    9EF0: FE 0E 84 04 F6 E2 F6 C1 80 74 02 D1 E0 48 8A E0  // .........t...H..
    9F00: B0 12 8B 16 63 04 EF A0 4A 04 8A 26 84 04 FE C4  // ....c...J..&....
    9F10: F6 E4 D1 E0 05 00 01 A3 4C 04 C3 8A 26 49 04 50  // ........L...&I.P
    9F20: 06 57 C4 3E A8 04 26 C4 7D 08 8C C5 0B EF 74 4A  // .W.>..&.}.....tJ
    9F30: 8B EF 83 C7 0B 26 8A 05 3C FF 74 3E 38 E0 74 03  // .....&..<.t>8.t.
    9F40: 47 EB F2 8B FD 26 8A 3D 26 8A 5D 01 26 8B 4D 02  // G....&.=&.].&.M.
    9F50: 26 8B 55 04 26 8A 45 0A 3C FF 74 02 FE C8 50 A0  // &.U.&.E.<.t...P.
    9F60: 84 04 FE C0 F6 26 85 04 A3 85 04 58 A2 84 04 26  // .....&.....X...&
    9F70: C4 7D 06 8B EF 32 C0 E8 DB FD 5F 07 58 C3 50 53  // .}...2...._.X.PS
    9F80: 51 52 2E A1 78 24 0B C0 74 09 2E 8B 2E 08 84 0E  // QR..x$..t.......
    9F90: 07 EB 08 B8 30 11 B7 02 E8 CD BE 5A 59 5B 58 C3  // ....0......ZY[X.
    9FA0: 3C 04 7C 01 C3 E3 FD 53 2E 8E 1E 6E 24 86 FB 32  // <.|....S...n$..2
    9FB0: FF D1 E3 8B FB 81 C7 50 04 8B 35 5B 89 15 56 8B  // .......P..5[..V.
    9FC0: F0 51 53 26 8A 46 00 45 3C 0D 7F 1F 75 04 32 D2  // .QS&.F.E<...u.2.
    9FD0: EB 40 3C 0A 74 32 3C 07 75 05 E8 3F 87 EB 62 3C  // .@<.t2<.u..?..b<
    9FE0: 08 75 08 0A D2 74 5A FE CA EB 27 F7 C6 02 00 74  // .u...tZ...'....t
    9FF0: 05 26 8A 5E 00 45 B9 01 00 B4 09 E8 6A BE FE C2  // .&.^.E......j...
    A000: 3A 16 4A 04 72 0C 32 D2 89 15 3A 36 84 04 73 06  // :.J.r.2...:6..s.
    A010: FE C6 89 15 EB 2B 50 E8 AD EA 75 08 B8 00 08 E8  // .....+P...u.....
    A020: 46 BE EB 09 80 3E 49 04 07 74 F1 32 E4 86 3E 62  // F....>I..t.2..>b
    A030: 04 53 8A FC 55 E8 25 00 5D 5B 86 3E 62 04 58 8B  // .S..U.%.][.>b.X.
    A040: 15 5B 59 E2 15 5A F7 C6 01 00 75 02 89 15 8B 05  // .[Y..Z....u.....
    A050: 3A 3E 62 04 75 03 E8 34 ED C3 E9 64 FF 33 C9 8A  // :>b.u..4...d.3..
    A060: 36 84 04 8A 16 4A 04 FE CA B8 01 06 E8 F9 BD C3  // 6....J..........
    A070: 2E 8E 1E 6E 24 0A C0 75 0D E8 18 00 8B EC 89 5E  // ...n$..u.......^
    A080: 0E C6 46 1A 1A C3 3C 01 75 09 E8 41 00 8B EC C6  // ..F...<.u..A....
    A090: 46 1A 1A C3 A0 8A 04 BF 06 A1 2E 3A 05 72 04 BB  // F..........:.r..
    A0A0: FF FF C3 32 E4 D1 E0 03 F8 2E 8B 5D 04 0A DB 74  // ...2.......]...t
    A0B0: 05 0A FF 75 04 C3 86 FB C3 A0 10 04 24 30 3C 30  // ...u........$0<0
    A0C0: 74 06 F6 C3 01 75 EF C3 F6 C3 01 74 E9 C3 BF 06  // t....u.....t....
    A0D0: A1 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D 74 12 86 FB  // ....2.....;.t...
    A0E0: 2E 3B 1D 74 0B 83 C7 02 FE C0 38 C8 7E EB B0 FF  // .;.t......8.~...
    A0F0: A2 8A 04 C3 BB 08 00 F6 06 89 04 02 74 0E BB 07  // ............t...
    A100: 00 BA CC 03 EC A8 01 74 18 BB 08 00 BA B4 03 E8  // .......t........
    A110: DF EC 74 21 B7 01 E8 8C E9 80 FA D4 74 17 86 FB  // ..t!........t...
    A120: C3 BA D4 03 E8 CA EC 74 0C B7 02 E8 77 E9 80 FA  // .......t....w...
    A130: B4 74 02 86 FB C3 0F 08 0F 08 0F 08 0F 08 03 01  // .t..............
    A140: 03 01 01 01 00 08 01 01 01 01 01 01 01 01 0F 01  // ................
    A150: 0F 08 0F 04 00 02 0F 02 01 01 0F 01 FF 01 FF E0  // ................
    A160: 0F 00 00 00 00 07 02 08 FF 0E 00 00 3F 00 10 01  // ............?...
    A170: 08 00 00 00 00 01 00 02 02 01 00 04 04 01 00 05  // ................
    A180: 02 05 00 06 01 06 05 06 00 08 01 08 00 07 02 07  // ................
    A190: 06 07 CA 00 34 00 90 00 96 00 00 00 00 00 00 00  // ....4...........
    A1A0: 5F 57 C3 90 50 66 52 E8 F4 FF FF FF 81 EF 10 00  // _W..PfR.........
    A1B0: 00 00 2E 8B 07 66 BA F8 0C EF 66 BA FC 0C ED 32  // .....f....f....2
    A1C0: C0 66 8B F8 66 5A 58 C3 66 B8 4F 03 66 52 66 56  // .f..fZX.f.O.fRfV
    A1D0: 53 57 50 0A FF 75 44 E8 C8 FF FF FF 66 33 F6 66  // SWP..uD.....f3.f
    A1E0: BB 53 00 E8 48 00 00 00 C1 E8 10 F6 C4 40 75 2B  // .S..H........@u+
    A1F0: 66 81 E2 FF 02 66 D1 E2 66 8B C2 66 40 C1 E0 10  // f....f..f..f@...
    A200: 66 8B C2 66 BB 13 00 E8 30 00 00 00 66 BB 12 00  // f..f....0...f...
    A210: E8 27 00 00 00 66 58 32 E4 66 50 58 5F 5B 66 5E  // .'...fX2.fPX_[f^
    A220: 66 5A C3 90 66 B8 4F 03 C3 90 66 B8 4F 03 C3 90  // fZ..f.O...f.O...
    A230: 66 52 E8 11 00 00 00 ED 66 5A C3 90 66 52 E8 05  // fR......fZ..fR..
    A240: 00 00 00 EF 66 5A C3 90 66 8B D7 50 33 C0 66 8B  // ....fZ..f..P3.f.
    A250: C3 66 03 C6 C1 E0 02 EF 66 83 C2 04 58 C3 14 4A  // .f......f...X..J
    A260: 07 4A 07 4A 07 4A F2 49 F2 49 F2 49 F2 49 34 46  // .J.J.J.I.I.I.I4F
    A270: AB 46 D5 46 16 48 15 48 15 48 5B 48 C0 48 F0 48  // .F.F.H.H.H[H.H.H
    A280: AD 49 D6 49 D6 49 4D 48 40 48 40 48 40 48 40 48  // .I.I.IMH@H@H@H@H
    A290: 40 48 5B 48 C0 48 F0 48 AD 49 DB 49 21 4A D6 49  // @H[H.H.H.I.I!J.I
    A2A0: D6 49 FF FF FF FF FF FF 00 00 FF FF 00 00 FF FF  // .I..............
    A2B0: 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00 FF 00  // ................
    A2C0: 00 00 00 00 08 10 00 08 10 18 00 08 10 18 38 44  // ..............8D
    A2D0: 01 38 44 02 46 58 03 26 58 03 5D 45 03 11 45 03  // .8D.FX.&X.]E..E.
    A2E0: 39 44 04 52 44 04 62 44 04 38 44 03 00 00 00 00  // 9D.RD.bD.8D.....
    A2F0: E5 4B 00 02 E5 4B 01 02 E5 4B 02 02 E5 4B 03 02  // .K...K...K...K..
    A300: E5 4B 04 02 E5 4B 05 02 DF 4D 00 02 DF 4D 01 02  // .K...K...M...M..
    A310: DF 4D 02 02 DF 4D 03 02 DF 4D 04 02 DF 4D 05 02  // .M...M...M...M..
    A320: 14 4E 00 02 14 4E 01 02 14 4E 02 02 14 4E 03 02  // .N...N...N...N..
    A330: 14 4E 04 02 14 4E 05 02 4F 50 00 02 4F 50 01 02  // .N...N..OP..OP..
    A340: 4F 50 02 02 4F 50 03 02 4F 50 04 02 4F 50 05 02  // OP..OP..OP..OP..
    A350: 4F 50 00 02 4F 50 01 02 4F 50 02 02 4F 50 03 02  // OP..OP..OP..OP..
    A360: 4F 50 04 02 4F 50 05 02 16 4F 00 02 16 4F 01 02  // OP..OP...O...O..
    A370: 16 4F 02 02 16 4F 03 02 16 4F 04 02 16 4F 05 02  // .O...O...O...O..
    A380: 52 4F 00 02 52 4F 01 02 52 4F 02 02 52 4F 03 02  // RO..RO..RO..RO..
    A390: 52 4F 04 02 52 4F 05 02 C3 4E 00 02 C3 4E 01 02  // RO..RO...N...N..
    A3A0: C3 4E 02 02 C3 4E 03 02 C3 4E 04 02 C3 4E 05 02  // .N...N...N...N..
    A3B0: F7 4E 00 02 F7 4E 01 02 F7 4E 02 02 F7 4E 03 02  // .N...N...N...N..
    A3C0: F7 4E 04 02 F7 4E 05 02 A7 52 00 00 DA 52 01 00  // .N...N...R...R..
    A3D0: DA 52 02 00 C7 52 00 00 B5 51 00 02 AE 4F 00 02  // .R...R...Q...O..
    A3E0: AE 4F 01 02 AE 4F 02 02 AE 4F 03 02 AE 4F 04 02  // .O...O...O...O..
    A3F0: AE 4F 05 02 CD 51 00 02 22 54 05 00 22 54 01 00  // .O...Q.."T.."T..
    A400: 22 54 00 00 22 54 02 00 63 54 00 00 63 54 02 00  // "T.."T..cT..cT..
    A410: A8 54 00 00 38 51 00 02 38 51 01 02 38 51 02 02  // .T..8Q..8Q..8Q..
    A420: 38 51 03 02 38 51 04 02 38 51 05 02 F4 52 00 00  // 8Q..8Q..8Q...R..
    A430: 1C 53 00 00 9D 53 00 00 18 54 00 00 FC 4F 00 02  // .S...S...T...O..
    A440: FC 4F 01 02 FC 4F 02 02 FC 4F 03 02 FC 4F 04 02  // .O...O...O...O..
    A450: FC 4F 05 02 17 54 00 01 17 54 00 01 1B 4D 00 02  // .O...T...T...M..
    A460: 1B 4D 01 02 1B 4D 02 02 1B 4D 03 02 1B 4D 04 02  // .M...M...M...M..
    A470: 1B 4D 05 02 3C 53 00 00 18 54 00 00 18 54 00 00  // .M..<S...T...T..
    A480: 18 54 00 00 4D 52 00 00 3F 4E 00 02 3F 4E 01 02  // .T..MR..?N..?N..
    A490: 3F 4E 02 02 3F 4E 03 02 3F 4E 04 02 3F 4E 05 02  // ?N..?N..?N..?N..
    A4A0: 6E 4E 00 02 6E 4E 01 02 6E 4E 02 02 6E 4E 03 02  // nN..nN..nN..nN..
    A4B0: 6E 4E 04 02 6E 4E 05 02 A4 4E 00 02 A4 4E 01 02  // nN..nN...N...N..
    A4C0: A4 4E 02 02 A4 4E 03 02 A4 4E 04 02 A4 4E 05 02  // .N...N...N...N..
    A4D0: 5F 53 00 00 82 53 00 00 40 4F 01 02 40 4F 02 02  // _S...S..@O..@O..
    A4E0: 9C 4F 01 02 9C 4F 02 02 A6 00 02 01 26 A5 00 00  // .O...O......&...
    A4F0: 00 00 00 00 00 00 00 00 5A A5 00 00 00 00 00 00  // ........Z.......
    A500: 00 00 00 00 00 00 F8 AA 00 00 00 00 00 00 00 00  // ................
    A510: 00 00 CE A5 00 00 00 00 A6 A5 00 00 00 00 00 00  // ................
    A520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 66 AB  // ..............f.
    A540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A550: 00 00 00 00 00 00 24 AD 00 00 00 00 00 00 00 00  // ......$.........
    A560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A570: 22 A6 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // "...............
    A580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 33 00  // ..............3.
    A590: 02 01 00 08 37 00 00 52 0D 03 00 41 E3 0D 33 05  // ....7..R...A..3.
    A5A0: 41 01 00 00 00 1B 05 41 0B 01 02 06 00 41 0D 25  // A......A.....A.%
    A5B0: 20 0E 03 0D 25 05 0C 02 0D 05 53 00 00 02 00 00  //  ...%.....S.....
    A5C0: 5B 00 4B 00 01 01 00 00 37 00 00 42 21 00 63 00  // [.K.....7..B!.c.
    A5D0: 1F 00 63 01 39 00 63 03 3F 00 63 02 45 00 5A 5A  // ..c.9.c.?.c.E.ZZ
    A5E0: 5B 03 05 40 00 00 05 04 2D 19 40 00 15 05 40 02  // [..@....-.@...@.
    A5F0: 01 02 0C 00 40 02 00 00 0D 00 5B 02 00 00 E3 0D  // ....@.....[.....
    A600: 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D 5B 00 28 00  // [.....[.....[.(.
    A610: 02 01 00 00 37 00 00 01 05 00 00 EC A8 01 00 02  // ....7...........
    A620: 00 00 01 00 02 01 01 00 01 05 00 00 ED A8 01 00  // ................
    A630: 02 00 02 01 00 5B 54 00 01 02 00 00 37 00 00 01  // .....[T.....7...
    A640: 05 00 00 9B 62 01 00 54 00 01 00 01 05 00 00 93  // ....b..T........
    A650: 62 01 00 01 01 01 00 01 56 00 41 03 09 41 00 01  // b.......V.A..A..
    A660: 05 00 00 83 62 01 00 01 02 01 00 41 01 05 00 00  // ....b......A....
    A670: 9B 62 01 00 3C 25 01 00 00 44 36 00 01 05 00 00  // .b..<%...D6.....
    A680: 93 62 01 00 02 00 01 01 00 5B D5 04 01 02 04 00  // .b.......[......
    A690: 37 00 00 3D 25 00 00 44 05 01 4A 05 A3 36 02 00  // 7..=%..D..J..6..
    A6A0: 00 00 44 D4 04 03 05 00 32 00 00 00 03 00 40 97  // ..D.....2.....@.
    A6B0: 36 03 00 41 96 36 03 05 46 00 31 00 00 04 02 04  // 6..A.6..F.1.....
    A6C0: 40 3E 02 41 40 49 42 00 04 02 05 40 03 03 41 05  // @>.A@IB....@..A.
    A6D0: 3E 02 41 40 48 5C 00 33 02 40 41 03 03 41 06 33  // >.A@H\.3.@A..A.3
    A6E0: 02 41 40 43 60 00 33 02 41 40 3E 05 41 00 00 00  // .A@C`.3.A@>.A...
    A6F0: 00 44 80 00 33 05 00 01 00 00 00 3E 05 00 00 00  // .D..3......>....
    A700: 00 00 44 D4 04 51 14 43 22 00 03 03 40 05 03 02  // ..D..Q.C"...@...
    A710: 41 40 2D 05 40 00 00 00 00 03 02 46 40 04 01 00  // A@-.@......F@...
    A720: 00 04 01 01 01 04 01 02 02 04 01 03 03 04 01 04  // ................
    A730: 04 04 01 05 05 04 01 06 06 2D 05 41 40 00 00 00  // .........-.A@...
    A740: 3E 05 41 00 20 00 00 45 C7 00 27 05 41 00 20 00  // >.A. ..E..'.A. .
    A750: 00 03 05 46 00 31 00 00 04 02 05 41 01 02 96 36  // ...F.1.....A...6
    A760: 41 03 05 00 80 1A 06 00 03 00 41 97 36 03 00 40  // A.........A.6..@
    A770: 96 36 3E 02 41 40 44 D4 04 33 05 00 01 00 00 00  // .6>.A@D..3......
    A780: 3E 05 00 00 00 00 00 44 D4 04 51 14 43 DE 00 01  // >......D..Q.C...
    A790: 05 0C 00 6C A8 05 00 3C 05 0D 00 00 0F A4 00 49  // ...l...<.......I
    A7A0: F7 01 3D 65 00 01 44 58 01 4A 05 B6 36 00 00 01  // ..=e..DX.J..6...
    A7B0: 00 49 58 01 4A 05 C0 36 01 00 00 00 44 58 01 01  // .IX.J..6....DX..
    A7C0: 05 0C 00 84 09 81 03 01 05 0D 00 00 00 06 00 01  // ................
    A7D0: 05 0C 00 84 09 81 03 3C 05 0D 00 00 00 00 80 49  // .......<.......I
    A7E0: 4D 01 4A 05 C0 36 01 00 00 00 49 F7 01 01 05 B8  // M.J..6....I.....
    A7F0: 36 00 00 02 10 03 05 41 0A 00 00 00 33 05 41 01  // 6......A....3.A.
    A800: 00 00 00 3E 05 41 00 00 00 00 44 B5 01 51 0A 3C  // ...>.A....D..Q.<
    A810: 05 B8 36 00 00 02 00 49 72 01 03 05 41 04 00 00  // ..6....Ir...A...
    A820: 00 51 0A 33 05 41 01 00 00 00 3E 05 41 00 00 00  // .Q.3.A....>.A...
    A830: 00 44 B5 01 3C 05 AA 36 AD DE AD DE 49 97 01 01  // .D..<..6....I...
    A840: 05 B8 36 00 00 00 00 0D 05 C0 36 01 00 00 00 07  // ..6.......6.....
    A850: 05 B6 36 FF FF FE FF 0D 05 02 38 00 01 00 00 51  // ..6.......8....Q
    A860: 0A 01 05 97 36 00 00 00 00 01 05 96 36 00 00 00  // ....6.......6...
    A870: 00 01 05 A3 36 00 00 00 00 07 05 02 38 FF FE FF  // ....6.......8...
    A880: FF 66 0B 03 04 00 04 00 02 02 04 00 15 05 00 0A  // .f..............
    A890: 1A 05 04 16 01 05 0C 00 6C A8 05 00 3C 05 0D 00  // ........l...<...
    A8A0: 00 0F A4 00 49 61 02 02 05 00 00 00 00 00 02 02  // ....Ia..........
    A8B0: 01 00 2C 05 01 00 00 02 00 55 00 02 02 89 02 04  // ..,......U......
    A8C0: 02 05 03 00 00 05 D0 52 35 02 05 00 00 00 00 00  // .......R5.......
    A8D0: 02 02 01 00 2C 05 01 00 00 00 00 55 00 02 02 89  // ....,......U....
    A8E0: 02 04 02 05 03 00 20 00 D0 52 35 66 16 3E 0D 42  // ...... ..R5f.>.B
    A8F0: 00 00 44 D4 02 56 00 41 03 0C 41 00 00 2D 05 41  // ..D..V.A..A..-.A
    A900: 0F 00 00 00 09 05 41 F0 FF 00 00 2D 0A 41 42 03  // ......A....-.AB.
    A910: 05 46 00 84 00 00 56 08 42 04 04 00 00 00 2D 05  // .F....V.B.....-.
    A920: 46 04 00 00 00 2D 05 42 04 00 00 00 3E 02 42 41  // F....-.B....>.BA
    A930: 45 8F 02 02 05 00 00 84 00 00 2C 02 00 00 02 02  // E.........,.....
    A940: 01 00 2C 05 01 00 00 02 00 02 89 02 04 02 09 02  // ..,.............
    A950: 04 02 05 03 00 00 00 40 02 0A 03 41 52 35 52 16  // .......@...AR5R.
    A960: 02 01 02 00 14 05 00 18 1A 05 02 08 01 05 0C 00  // ................
    A970: 6C A8 05 00 3C 05 0D 00 00 0F A4 00 49 B9 03 03  // l...<.......I...
    A980: 02 41 00 2D 05 41 00 00 02 00 2D 01 41 00 01 02  // .A.-.A....-.A...
    A990: 7B 36 41 03 01 40 04 2D 01 40 02 01 02 7C 36 40  // {6A..@.-.@...|6@
    A9A0: 01 05 68 36 00 00 00 03 01 05 70 36 FF FF 01 83  // ..h6......p6....
    A9B0: 03 02 41 00 2D 05 41 00 00 04 00 2D 01 41 00 01  // ..A.-.A....-.A..
    A9C0: 02 7D 36 41 03 01 40 04 2D 01 40 02 01 02 7E 36  // .}6A..@.-.@...~6
    A9D0: 40 01 05 69 36 00 00 00 04 01 05 71 36 FF FF 00  // @..i6......q6...
    A9E0: 84 03 02 41 00 2D 05 41 00 00 05 00 2D 01 41 00  // ...A.-.A....-.A.
    A9F0: 01 02 7F 36 41 03 01 40 04 2D 01 40 02 01 02 80  // ...6A..@.-.@....
    AA00: 36 40 01 05 6A 36 00 00 00 05 01 05 72 36 FF FF  // 6@..j6......r6..
    AA10: 00 85 03 02 41 00 2D 05 41 00 00 06 00 2D 01 41  // ....A.-.A....-.A
    AA20: 00 01 02 81 36 41 03 01 40 04 2D 01 40 02 01 02  // ....6A..@.-.@...
    AA30: 82 36 40 01 05 6B 36 00 00 00 06 01 05 73 36 FF  // .6@..k6......s6.
    AA40: FF 00 86 03 05 46 00 31 00 00 03 02 41 00 2D 05  // .....F.1....A.-.
    AA50: 41 00 00 00 00 2D 01 41 00 03 01 40 04 2D 01 40  // A....-.A...@.-.@
    AA60: 02 04 02 00 41 04 02 01 40 04 05 04 00 00 00 00  // ....A...@.......
    AA70: 04 05 05 00 00 00 00 04 05 06 00 20 00 00 01 05  // ........... ....
    AA80: 0C 00 6C A8 05 00 3C 05 0D 00 00 0F A4 00 49 39  // ..l...<.......I9
    AA90: 04 01 05 94 36 00 00 00 80 01 05 95 36 00 20 00  // ....6.......6. .
    AAA0: 00 01 02 56 36 41 01 02 57 36 40 01 05 61 36 FF  // ...V6A..W6@..a6.
    AAB0: FF 00 80 01 05 97 36 00 00 00 00 01 05 96 36 00  // ......6.......6.
    AAC0: 00 00 00 4A 25 48 00 01 44 49 04 0D 05 B1 36 08  // ...J%H..DI....6.
    AAD0: 00 00 00 01 05 0C 00 6C A8 05 00 3C 05 0D 00 00  // .......l...<....
    AAE0: 0F A4 00 49 98 04 5C 05 B6 36 00 FF FF FF C6 00  // ...I..\..6......
    AAF0: 09 00 07 05 C0 36 FE FF FF FF 03 05 41 50 C3 00  // .....6......AP..
    AB00: 00 4A 05 A3 36 02 00 00 00 49 95 04 51 14 33 05  // .J..6....I..Q.3.
    AB10: 41 01 00 00 00 3E 05 41 00 00 00 00 49 77 04 43  // A....>.A....Iw.C
    AB20: D4 04 07 05 B1 36 FF FE FF FF 02 05 00 80 19 00  // .....6..........
    AB30: 00 02 05 01 00 00 00 00 02 05 02 00 00 00 00 02  // ................
    AB40: 05 03 00 00 00 00 02 05 04 00 00 00 00 02 05 05  // ................
    AB50: 00 00 00 00 02 05 06 00 00 00 00 43 10 00 5B 00  // ...........C..[.
    AB60: 6D 00 02 01 00 04 37 00 00 66 16 03 0C 41 04 00  // m.....7..f...A..
    AB70: 4C 0D 41 02 00 44 1D 00 0D A5 4C 00 02 52 16 01  // L.A..D....L..R..
    AB80: 01 35 39 02 01 01 36 39 03 01 05 00 00 D7 A8 01  // .59...69........
    AB90: 00 01 00 37 39 01 00 03 01 41 01 15 05 41 18 01  // ...79....A...A..
    ABA0: 02 C4 00 41 03 01 41 01 1B 05 41 08 01 02 C9 00  // ...A..A...A.....
    ABB0: 41 03 00 41 37 39 01 02 3B 39 41 03 01 40 03 33  // A..A79..;9A..@.3
    ABC0: 01 40 02 2D 02 40 41 01 02 3C 39 40 5B 00 BD 01  // .@.-.@A..<9@[...
    ABD0: 03 01 04 00 37 00 00 66 08 03 05 46 C0 12 00 00  // ....7..f...F....
    ABE0: 3D A5 00 02 49 1E 00 02 02 00 46 5B 03 05 40 0C  // =...I.....F[..@.
    ABF0: 00 00 00 21 21 40 00 66 FF 2D 0D 42 81 01 2D 0A  // ...!!@.f.-.B..-.
    AC00: 42 40 03 04 40 00 00 03 04 41 04 00 03 04 00 08  // B@..@....A......
    AC10: 00 01 02 00 00 40 03 88 40 01 00 03 18 40 01 00  // .....@..@....@..
    AC20: 09 8D 40 FF 01 3E 8D 40 00 00 49 99 00 01 02 00  // ..@..>.@..I.....
    AC30: 00 41 03 00 40 01 00 09 05 40 FF 01 00 00 3E 0D  // .A..@....@....>.
    AC40: 40 00 00 49 82 00 03 05 46 00 71 02 00 43 BC 00  // @..I....F.q..C..
    AC50: 21 02 40 46 03 00 41 01 00 09 05 41 00 1E 00 00  // !.@F..A....A....
    AC60: 1B 05 41 09 43 B4 00 7C 02 40 46 7E 05 40 00 00  // ..A.C..|.@F~.@..
    AC70: 01 00 03 00 41 01 00 09 05 41 00 F0 00 00 1B 05  // ....A....A......
    AC80: 41 0C 75 02 40 41 03 02 46 40 3D A5 00 01 49 C8  // A.u.@A..F@=...I.
    AC90: 00 02 02 00 46 5B 3D E5 00 00 49 0B 01 56 00 40  // ....F[=...I..V.@
    ACA0: 03 29 40 00 21 0D 40 09 00 03 02 41 00 2D 02 40  // .)@.!.@....A.-.@
    ACB0: 41 01 02 00 00 40 03 00 41 01 00 09 05 41 00 00  // A....@..A....A..
    ACC0: F0 07 1B 05 41 14 02 E2 00 41 3D E5 00 00 49 0B  // ....A....A=...I.
    ACD0: 01 02 05 00 00 46 C3 23 5B 56 00 40 03 39 40 00  // .....F.#[V.@.9@.
    ACE0: 55 38 00 66 FF 2D 0D 42 59 01 3E 0C 40 02 00 47  // U8.f.-.BY.>.@..G
    ACF0: 2C 01 2D 0D 42 08 00 43 1C 01 33 0C 40 04 00 21  // ,.-.B..C..3.@..!
    AD00: 0C 40 06 00 2D 0C 40 00 00 03 09 42 00 55 00 00  // .@..-.@....B.U..
    AD10: 02 0A 00 40 7C 05 46 40 42 0F 00 7E 01 40 00 02  // ...@|.F@B..~.@..
    AD20: 02 00 40 5B 7A 64 00 FF FF 07 00 00 00 00 00 C8  // ..@[zd..........
    AD30: 00 3F 00 08 00 19 00 40 06 5F 00 40 00 32 00 80  // .?.....@._.@.2..
    AD40: 0C 7E 00 60 00 64 00 00 32 7F 00 7F 00 64 00 37  // .~.`.d..2....d.7
    AD50: 6C 01 00 00 6C 01 00 66 6C 01 00 37 6E 01 00 00  // l...l..fl..7n...
    AD60: 6E 01 00 66 6E 01 00 00 00 00 00 00 00 00 00 00  // n..fn...........
    AD70: 00 00 00 37 70 01 00 00 70 01 00 66 70 01 00 37  // ...7p...p..fp..7
    AD80: 72 01 00 00 72 01 00 66 72 01 00 00 D5 00 03 03  // r...r..fr.......
    AD90: 0C 00 37 00 00 66 04 03 04 46 28 00 3E 05 46 00  // ..7..f...F(.>.F.
    ADA0: 00 00 00 49 3C 00 03 01 00 00 03 01 01 01 03 01  // ...I<...........
    ADB0: 02 02 52 16 03 01 46 00 1B 05 46 08 02 02 00 00  // ..R...F...F.....
    ADC0: 02 02 01 01 02 02 02 02 3D 65 02 00 49 47 00 2C  // ........=e..IG.,
    ADD0: 22 02 46 3D E5 02 00 49 52 00 2C A2 02 46 03 01  // ".F=...IR.,..F..
    ADE0: 40 03 09 05 40 00 00 00 FC 3E 05 40 00 00 00 D0  // @...@....>.@....
    ADF0: 49 75 00 01 05 63 C0 00 00 00 40 55 20 02 43 79  // Iu...c....@U .Cy
    AE00: 00 54 00 63 C0 01 01 64 C0 00 56 00 40 03 21 40  // .T.c...d..V.@.!@
    AE10: 02 01 02 65 C0 40 01 01 66 C0 01 03 31 40 02 01  // ...e.@..f...1@..
    AE20: 02 67 C0 40 01 01 E8 C0 03 3D 65 02 01 44 CC 00  // .g.@.....=e..D..
    AE30: 3D E5 02 01 44 CC 00 51 02 56 00 40 4A E5 A0 21  // =...D..Q.V.@J..!
    AE40: 80 44 D4 00 51 14 2D 05 40 01 00 00 00 3E 05 40  // .D..Q.-.@....>.@
    AE50: A0 86 01 00 45 B0 00 5B 4A E5 A0 21 80 49 CC 00  // ....E..[J..!.I..
    AE60: 5B FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // [...............
    AE70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AE80: 00 00 00 00                                      // ....


WSMT
----
[000h 0000 004h]                   Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 1A
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TP-R23  "
[018h 0024 004h]                Oem Revision : 00001290
[01Ch 0028 004h]             Asl Compiler ID : "PTEC"
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 004h]            Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 1A 4C 45 4E 4F 56 4F  // WSMT(.....LENOVO
    0010: 54 50 2D 52 32 33 20 20 90 12 00 00 50 54 45 43  // TP-R23  ....PTEC
    0020: 02 00 00 00 07 00 00 00                          // ........


