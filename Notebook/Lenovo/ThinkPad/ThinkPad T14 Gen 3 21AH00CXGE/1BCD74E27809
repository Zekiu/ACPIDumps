
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200925
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00003203  0x02  "LENOVO"  "DptfTabl"  0x00001000  "INTL"   0x20200717
 02)  MCFG  0x0000003C  0x01  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 03)  APIC  0x000001DC  0x05  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 04)  ECDT  0x00000053  0x01  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 05)  SSDT  0x00005D2C  0x02  "LENOVO"  "CpuSsdt "  0x00003000  "INTL"   0x20200717
 06)  TPM2  0x0000004C  0x04  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 07)  BATB  0x0000004A  0x02  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 08)  SSDT  0x00000144  0x02  "LENOVO"  "ADebTabl"  0x00001000  "INTL"   0x20200717
 09)  SSDT  0x00002B22  0x02  "LENOVO"  "SaSsdt  "  0x00003000  "INTL"   0x20200717
 10)  NHLT  0x00001B64  0x00  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 11)  SSDT  0x0000129A  0x02  "LENOVO"  "SocGpe  "  0x00003000  "INTL"   0x20200717
 12)  UEFI  0x00000076  0x01  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 13)  DSDT  0x00049587  0x02  "LENOVO"  "ICL     "  0x00000002  "    "   0x01000013
 14)  SSDT  0x00000083  0x02  "LENOVO"  "PID0Ssdt"  0x00000010  "INTL"   0x20200717
 15)  WSMT  0x00000028  0x01  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 16)  SSDT  0x000026B4  0x02  "LENOVO"  "TbtTypeC"  0x00000000  "INTL"   0x20200717
 17)  LPIT  0x000000CC  0x01  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 18)  SSDT  0x0000060E  0x02  "LENOVO"  "Tpm2Tabl"  0x00001000  "INTL"   0x20200717
 19)  DBG2  0x00000054  0x00  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 20)  SSDT  0x000035CE  0x02  "LENOVO"  "IgfxSsdt"  0x00003000  "INTL"   0x20200717
 21)  SSDT  0x0000059B  0x02  "LENOVO"  "CtdpB   "  0x00001000  "INTL"   0x20200717
 22)  DMAR  0x00000088  0x02  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 23)  FACP  0x00000114  0x06  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 24)  FPDT  0x00000034  0x01  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00001150
 25)  PHAT  0x00000598  0x01  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 26)  SSDT  0x0000038C  0x02  "LENOVO"  "Pmax_Dev"  0x00000001  "INTL"   0x20200717
 27)  SSDT  0x000001AB  0x02  "PmRef "  "Cpu0Psd "  0x00003000  "INTL"   0x20200717
 28)  MSDM  0x00000055  0x03  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 29)  SSDT  0x000039DA  0x02  "LENOVO"  "SocCmn  "  0x00003000  "INTL"   0x20200717
 30)  SSDT  0x00003F55  0x02  "LENOVO"  "ProjSsdt"  0x00000010  "INTL"   0x20200717
 31)  DBGP  0x00000034  0x01  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 32)  SSDT  0x00000E54  0x02  "LENOVO"  "UsbCTabl"  0x00001000  "INTL"   0x20200717
 33)  HPET  0x00000038  0x01  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 34)  SSDT  0x00002588  0x02  "LENOVO"  "AdlP_Rvp"  0x00001000  "INTL"   0x20200717
 35)  FACS  0x00000040  0x02
 36)  BGRT  0x00000038  0x01  "LENOVO"  "TP-N3M  "  0x00001150  "PTEC"   0x00000002
 37)  SSDT  0x0000D676  0x02  "LENOVO"  "TcssSsdt"  0x00001000  "INTL"   0x20200717
 38)  SSDT  0x00000394  0x02  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20200717
 39)  SSDT  0x00000FBB  0x02  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20200717
 40)  SSDT  0x00001038  0x02  "PmRef "  "ApHwp   "  0x00003000  "INTL"   0x20200717
 41)  SSDT  0x000004BA  0x02  "PmRef "  "Cpu0Hwp "  0x00003000  "INTL"   0x20200717
 42)  SSDT  0x00000605  0x02  "PmRef "  "Cpu0Ist "  0x00003000  "INTL"   0x20200717
 43)  SSDT  0x00001349  0x02  "PmRef "  "ApPsd   "  0x00003000  "INTL"   0x20200717
 44)  SSDT  0x00001BAF  0x02  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20200717

Found 44 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 000001DC
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : 95
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 08
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 09
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 04
[04Fh 0079   1]                Local Apic ID : 10
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 12
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 06
[05Fh 0095   1]                Local Apic ID : 14
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 16
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 08
[06Fh 0111   1]                Local Apic ID : 18
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 09
[077h 0119   1]                Local Apic ID : 1A
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0A
[07Fh 0127   1]                Local Apic ID : 1C
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0B
[087h 0135   1]                Local Apic ID : 1E
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0C
[08Fh 0143   1]                Local Apic ID : FF
[090h 0144   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0D
[097h 0151   1]                Local Apic ID : FF
[098h 0152   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0E
[09Fh 0159   1]                Local Apic ID : FF
[0A0h 0160   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : FF
[0A8h 0168   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 10
[0AFh 0175   1]                Local Apic ID : FF
[0B0h 0176   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 11
[0B7h 0183   1]                Local Apic ID : FF
[0B8h 0184   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 12
[0BFh 0191   1]                Local Apic ID : FF
[0C0h 0192   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 13
[0C7h 0199   1]                Local Apic ID : FF
[0C8h 0200   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 14
[0CFh 0207   1]                Local Apic ID : FF
[0D0h 0208   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 15
[0D7h 0215   1]                Local Apic ID : FF
[0D8h 0216   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 16
[0DFh 0223   1]                Local Apic ID : FF
[0E0h 0224   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 17
[0E7h 0231   1]                Local Apic ID : FF
[0E8h 0232   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 18
[0EFh 0239   1]                Local Apic ID : FF
[0F0h 0240   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 19
[0F7h 0247   1]                Local Apic ID : FF
[0F8h 0248   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 1A
[0FFh 0255   1]                Local Apic ID : FF
[100h 0256   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 1B
[107h 0263   1]                Local Apic ID : FF
[108h 0264   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 1C
[10Fh 0271   1]                Local Apic ID : FF
[110h 0272   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1D
[117h 0279   1]                Local Apic ID : FF
[118h 0280   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1E
[11Fh 0287   1]                Local Apic ID : FF
[120h 0288   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 1F
[127h 0295   1]                Local Apic ID : FF
[128h 0296   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 01 [I/O APIC]
[12Dh 0301   1]                       Length : 0C
[12Eh 0302   1]                  I/O Apic ID : 02
[12Fh 0303   1]                     Reserved : 00
[130h 0304   4]                      Address : FEC00000
[134h 0308   4]                    Interrupt : 00000000

[138h 0312   1]                Subtable Type : 02 [Interrupt Source Override]
[139h 0313   1]                       Length : 0A
[13Ah 0314   1]                          Bus : 00
[13Bh 0315   1]                       Source : 00
[13Ch 0316   4]                    Interrupt : 00000002
[140h 0320   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[142h 0322   1]                Subtable Type : 02 [Interrupt Source Override]
[143h 0323   1]                       Length : 0A
[144h 0324   1]                          Bus : 00
[145h 0325   1]                       Source : 09
[146h 0326   4]                    Interrupt : 00000009
[14Ah 0330   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[14Ch 0332   1]                Subtable Type : 04 [Local APIC NMI]
[14Dh 0333   1]                       Length : 06
[14Eh 0334   1]                 Processor ID : 01
[14Fh 0335   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[151h 0337   1]         Interrupt Input LINT : 01

[152h 0338   1]                Subtable Type : 04 [Local APIC NMI]
[153h 0339   1]                       Length : 06
[154h 0340   1]                 Processor ID : 02
[155h 0341   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[157h 0343   1]         Interrupt Input LINT : 01

[158h 0344   1]                Subtable Type : 04 [Local APIC NMI]
[159h 0345   1]                       Length : 06
[15Ah 0346   1]                 Processor ID : 03
[15Bh 0347   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[15Dh 0349   1]         Interrupt Input LINT : 01

[15Eh 0350   1]                Subtable Type : 04 [Local APIC NMI]
[15Fh 0351   1]                       Length : 06
[160h 0352   1]                 Processor ID : 04
[161h 0353   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[163h 0355   1]         Interrupt Input LINT : 01

[164h 0356   1]                Subtable Type : 04 [Local APIC NMI]
[165h 0357   1]                       Length : 06
[166h 0358   1]                 Processor ID : 05
[167h 0359   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[169h 0361   1]         Interrupt Input LINT : 01

[16Ah 0362   1]                Subtable Type : 04 [Local APIC NMI]
[16Bh 0363   1]                       Length : 06
[16Ch 0364   1]                 Processor ID : 06
[16Dh 0365   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[16Fh 0367   1]         Interrupt Input LINT : 01

[170h 0368   1]                Subtable Type : 04 [Local APIC NMI]
[171h 0369   1]                       Length : 06
[172h 0370   1]                 Processor ID : 07
[173h 0371   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[175h 0373   1]         Interrupt Input LINT : 01

[176h 0374   1]                Subtable Type : 04 [Local APIC NMI]
[177h 0375   1]                       Length : 06
[178h 0376   1]                 Processor ID : 08
[179h 0377   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[17Bh 0379   1]         Interrupt Input LINT : 01

[17Ch 0380   1]                Subtable Type : 04 [Local APIC NMI]
[17Dh 0381   1]                       Length : 06
[17Eh 0382   1]                 Processor ID : 09
[17Fh 0383   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[181h 0385   1]         Interrupt Input LINT : 01

[182h 0386   1]                Subtable Type : 04 [Local APIC NMI]
[183h 0387   1]                       Length : 06
[184h 0388   1]                 Processor ID : 0A
[185h 0389   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[187h 0391   1]         Interrupt Input LINT : 01

[188h 0392   1]                Subtable Type : 04 [Local APIC NMI]
[189h 0393   1]                       Length : 06
[18Ah 0394   1]                 Processor ID : 0B
[18Bh 0395   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[18Dh 0397   1]         Interrupt Input LINT : 01

[18Eh 0398   1]                Subtable Type : 04 [Local APIC NMI]
[18Fh 0399   1]                       Length : 06
[190h 0400   1]                 Processor ID : 0C
[191h 0401   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[193h 0403   1]         Interrupt Input LINT : 01

[194h 0404   1]                Subtable Type : 04 [Local APIC NMI]
[195h 0405   1]                       Length : 06
[196h 0406   1]                 Processor ID : 0D
[197h 0407   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[199h 0409   1]         Interrupt Input LINT : 01

[19Ah 0410   1]                Subtable Type : 04 [Local APIC NMI]
[19Bh 0411   1]                       Length : 06
[19Ch 0412   1]                 Processor ID : 0E
[19Dh 0413   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[19Fh 0415   1]         Interrupt Input LINT : 01

[1A0h 0416   1]                Subtable Type : 04 [Local APIC NMI]
[1A1h 0417   1]                       Length : 06
[1A2h 0418   1]                 Processor ID : 0F
[1A3h 0419   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1A5h 0421   1]         Interrupt Input LINT : 01

[1A6h 0422   1]                Subtable Type : 04 [Local APIC NMI]
[1A7h 0423   1]                       Length : 06
[1A8h 0424   1]                 Processor ID : 10
[1A9h 0425   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1ABh 0427   1]         Interrupt Input LINT : 01

[1ACh 0428   1]                Subtable Type : 04 [Local APIC NMI]
[1ADh 0429   1]                       Length : 06
[1AEh 0430   1]                 Processor ID : 11
[1AFh 0431   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1B1h 0433   1]         Interrupt Input LINT : 01

[1B2h 0434   1]                Subtable Type : 04 [Local APIC NMI]
[1B3h 0435   1]                       Length : 06
[1B4h 0436   1]                 Processor ID : 12
[1B5h 0437   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1B7h 0439   1]         Interrupt Input LINT : 01

[1B8h 0440   1]                Subtable Type : 04 [Local APIC NMI]
[1B9h 0441   1]                       Length : 06
[1BAh 0442   1]                 Processor ID : 13
[1BBh 0443   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1BDh 0445   1]         Interrupt Input LINT : 01

[1BEh 0446   1]                Subtable Type : 04 [Local APIC NMI]
[1BFh 0447   1]                       Length : 06
[1C0h 0448   1]                 Processor ID : 14
[1C1h 0449   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1C3h 0451   1]         Interrupt Input LINT : 01

[1C4h 0452   1]                Subtable Type : 04 [Local APIC NMI]
[1C5h 0453   1]                       Length : 06
[1C6h 0454   1]                 Processor ID : 15
[1C7h 0455   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1C9h 0457   1]         Interrupt Input LINT : 01

[1CAh 0458   1]                Subtable Type : 04 [Local APIC NMI]
[1CBh 0459   1]                       Length : 06
[1CCh 0460   1]                 Processor ID : 16
[1CDh 0461   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1CFh 0463   1]         Interrupt Input LINT : 01

[1D0h 0464   1]                Subtable Type : 04 [Local APIC NMI]
[1D1h 0465   1]                       Length : 06
[1D2h 0466   1]                 Processor ID : 17
[1D3h 0467   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1D5h 0469   1]         Interrupt Input LINT : 01

[1D6h 0470   1]                Subtable Type : 04 [Local APIC NMI]
[1D7h 0471   1]                       Length : 06
[1D8h 0472   1]                 Processor ID : 00
[1D9h 0473   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1DBh 0475   1]         Interrupt Input LINT : 01

Raw Table Data: Length 476 (0x1DC)

    0000: 41 50 49 43 DC 01 00 00 05 95 4C 45 4E 4F 56 4F  // APIC......LENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 08  // ................
    0040: 01 00 00 00 00 08 03 09 01 00 00 00 00 08 04 10  // ................
    0050: 01 00 00 00 00 08 05 12 01 00 00 00 00 08 06 14  // ................
    0060: 01 00 00 00 00 08 07 16 01 00 00 00 00 08 08 18  // ................
    0070: 01 00 00 00 00 08 09 1A 01 00 00 00 00 08 0A 1C  // ................
    0080: 01 00 00 00 00 08 0B 1E 01 00 00 00 00 08 0C FF  // ................
    0090: 00 00 00 00 00 08 0D FF 00 00 00 00 00 08 0E FF  // ................
    00A0: 00 00 00 00 00 08 0F FF 00 00 00 00 00 08 10 FF  // ................
    00B0: 00 00 00 00 00 08 11 FF 00 00 00 00 00 08 12 FF  // ................
    00C0: 00 00 00 00 00 08 13 FF 00 00 00 00 00 08 14 FF  // ................
    00D0: 00 00 00 00 00 08 15 FF 00 00 00 00 00 08 16 FF  // ................
    00E0: 00 00 00 00 00 08 17 FF 00 00 00 00 00 08 18 FF  // ................
    00F0: 00 00 00 00 00 08 19 FF 00 00 00 00 00 08 1A FF  // ................
    0100: 00 00 00 00 00 08 1B FF 00 00 00 00 00 08 1C FF  // ................
    0110: 00 00 00 00 00 08 1D FF 00 00 00 00 00 08 1E FF  // ................
    0120: 00 00 00 00 00 08 1F FF 00 00 00 00 01 0C 02 00  // ................
    0130: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0140: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 01 05  // ................
    0150: 00 01 04 06 02 05 00 01 04 06 03 05 00 01 04 06  // ................
    0160: 04 05 00 01 04 06 05 05 00 01 04 06 06 05 00 01  // ................
    0170: 04 06 07 05 00 01 04 06 08 05 00 01 04 06 09 05  // ................
    0180: 00 01 04 06 0A 05 00 01 04 06 0B 05 00 01 04 06  // ................
    0190: 0C 05 00 01 04 06 0D 05 00 01 04 06 0E 05 00 01  // ................
    01A0: 04 06 0F 05 00 01 04 06 10 05 00 01 04 06 11 05  // ................
    01B0: 00 01 04 06 12 05 00 01 04 06 13 05 00 01 04 06  // ................
    01C0: 14 05 00 01 04 06 15 05 00 01 04 06 16 05 00 01  // ................
    01D0: 04 06 17 05 00 01 04 06 00 05 00 01              // ............


BATB
----
[000h 0000   4]                    Signature : "BATB"    
[004h 0004   4]                 Table Length : 0000004A
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 15
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [BATB]


Raw Table Data: Length 74 (0x4A)

    0000: 42 41 54 42 4A 00 00 00 02 15 4C 45 4E 4F 56 4F  // BATBJ.....LENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 E8 63 95 D2 E1 CF 41 4D 8E 54 DA 43  // .....c....AM.T.C
    0030: 22 FE DE 5C 36 00 00 40 B1 92 00 00 00 00 00 00  // "..\6..@........
    0040: B0 92 00 00 00 00 00 00 01 00                    // ..........


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E1
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 000000008798B018
[030h 0048   4]                Image OffsetX : 00000240
[034h 0052   4]                Image OffsetY : 0000014A

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 E1 4C 45 4E 4F 56 4F  // BGRT8.....LENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 01 00 01 00 18 B0 98 87 00 00 00 00  // ................
    0030: 40 02 00 00 4A 01 00 00                          // @...J...


DBG2
----
[000h 0000   4]                    Signature : "DBG2"    [Debug Port table type 2]
[004h 0004   4]                 Table Length : 00000054
[008h 0008   1]                     Revision : 00
[009h 0009   1]                     Checksum : E3
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]                  Info Offset : 0000002C
[028h 0040   4]                   Info Count : 00000001

[02Ch 0044   1]                     Revision : 00
[02Dh 0045   2]                       Length : 0028
[02Fh 0047   1]               Register Count : 01
[030h 0048   2]              Namepath Length : 0002
[032h 0050   2]              Namepath Offset : 0026
[034h 0052   2]              OEM Data Length : 0000 [Optional field not present]
[036h 0054   2]              OEM Data Offset : 0000 [Optional field not present]
[038h 0056   2]                    Port Type : 8000
[03Ah 0058   2]                 Port Subtype : 0001
[03Ch 0060   2]                     Reserved : 0000
[03Eh 0062   2]          Base Address Offset : 0016
[040h 0064   2]          Address Size Offset : 0022

[042h 0066  12]        Base Address Register : [Generic Address Structure]
[042h 0066   1]                     Space ID : 01 [SystemIO]
[043h 0067   1]                    Bit Width : 08
[044h 0068   1]                   Bit Offset : 00
[045h 0069   1]         Encoded Access Width : 00 [Undefined/Legacy]
[046h 0070   8]                      Address : 00000000000003F8

[04Eh 0078   4]                 Address Size : 00000020

[052h 0082   2]                     Namepath : "."

Raw Table Data: Length 84 (0x54)

    0000: 44 42 47 32 54 00 00 00 00 E3 4C 45 4E 4F 56 4F  // DBG2T.....LENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 2C 00 00 00 01 00 00 00 00 28 00 01  // ....,........(..
    0030: 02 00 26 00 00 00 00 00 00 80 01 00 00 00 16 00  // ..&.............
    0040: 22 00 01 08 00 00 F8 03 00 00 00 00 00 00 20 00  // "............. .
    0050: 00 00 2E 00                                      // ....


DBGP
----
[000h 0000   4]                    Signature : "DBGP"    [Debug Port table]
[004h 0004   4]                 Table Length : 00000034
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 69
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   1]               Interface Type : 00
[025h 0037   3]                     Reserved : 000000

[028h 0040  12]          Debug Port Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 01 [SystemIO]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000000003F8


Raw Table Data: Length 52 (0x34)

    0000: 44 42 47 50 34 00 00 00 01 69 4C 45 4E 4F 56 4F  // DBGP4....iLENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 00 00 00 00 01 08 00 00 F8 03 00 00  // ................
    0030: 00 00 00 00                                      // ....


DMAR
----
[000h 0000   4]                    Signature : "DMAR"    [DMA Remapping table]
[004h 0004   4]                 Table Length : 00000088
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 9D
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   1]           Host Address Width : 26
[025h 0037   1]                        Flags : 05
[026h 0038  10]                     Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048   2]                Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050   2]                       Length : 0018

[034h 0052   1]                        Flags : 00
[035h 0053   1]                     Reserved : 00
[036h 0054   2]           PCI Segment Number : 0000
[038h 0056   8]        Register Base Address : 00000000FED90000

[040h 0064   1]            Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065   1]                 Entry Length : 08
[042h 0066   2]                     Reserved : 0000
[044h 0068   1]               Enumeration ID : 00
[045h 0069   1]               PCI Bus Number : 00

[046h 0070   2]                     PCI Path : 02,00


[048h 0072   2]                Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074   2]                       Length : 0020

[04Ch 0076   1]                        Flags : 01
[04Dh 0077   1]                     Reserved : 00
[04Eh 0078   2]           PCI Segment Number : 0000
[050h 0080   8]        Register Base Address : 00000000FED91000

[058h 0088   1]            Device Scope Type : 03 [IOAPIC Device]
[059h 0089   1]                 Entry Length : 08
[05Ah 0090   2]                     Reserved : 0000
[05Ch 0092   1]               Enumeration ID : 02
[05Dh 0093   1]               PCI Bus Number : 00

[05Eh 0094   2]                     PCI Path : 1E,07


[060h 0096   1]            Device Scope Type : 04 [Message-capable HPET Device]
[061h 0097   1]                 Entry Length : 08
[062h 0098   2]                     Reserved : 0000
[064h 0100   1]               Enumeration ID : 00
[065h 0101   1]               PCI Bus Number : 00

[066h 0102   2]                     PCI Path : 1E,06


[068h 0104   2]                Subtable Type : 0001 [Reserved Memory Region]
[06Ah 0106   2]                       Length : 0020

[06Ch 0108   2]                     Reserved : 0000
[06Eh 0110   2]           PCI Segment Number : 0000
[070h 0112   8]                 Base Address : 000000009C000000
[078h 0120   8]          End Address (limit) : 00000000A07FFFFF

[080h 0128   1]            Device Scope Type : 01 [PCI Endpoint Device]
[081h 0129   1]                 Entry Length : 08
[082h 0130   2]                     Reserved : 0000
[084h 0132   1]               Enumeration ID : 00
[085h 0133   1]               PCI Bus Number : 00

[086h 0134   2]                     PCI Path : 02,00


Raw Table Data: Length 136 (0x88)

    0000: 44 4D 41 52 88 00 00 00 02 9D 4C 45 4E 4F 56 4F  // DMAR......LENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 26 05 00 00 00 00 00 00 00 00 00 00  // ....&...........
    0030: 00 00 18 00 00 00 00 00 00 00 D9 FE 00 00 00 00  // ................
    0040: 01 08 00 00 00 00 02 00 00 00 20 00 01 00 00 00  // .......... .....
    0050: 00 10 D9 FE 00 00 00 00 03 08 00 00 02 00 1E 07  // ................
    0060: 04 08 00 00 00 00 1E 06 01 00 20 00 00 00 00 00  // .......... .....
    0070: 00 00 00 9C 00 00 00 00 FF FF 7F A0 00 00 00 00  // ................
    0080: 01 08 00 00 00 00 02 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "LENOVO", "ICL     ", 0x00000002)
{
    /*
     * iASL Warning: There were 250 external control methods found during
     * disassembly, but only 506 were resolved (4294967040 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_GPE.AL6F, MethodObj)    // 0 Arguments
    External (_GPE.DTIN, MethodObj)    // 0 Arguments
    External (_GPE.SL61, MethodObj)    // 0 Arguments
    External (_GPE.SL66, MethodObj)    // 0 Arguments
    External (_GPE.SL69, MethodObj)    // 0 Arguments
    External (_GPE.SL6D, MethodObj)    // 0 Arguments
    External (_GPE.SL6F, MethodObj)    // 0 Arguments
    External (_PR_.POWS, UnknownObj)
    External (_SB_.AWAC, DeviceObj)
    External (_SB_.AWAC.WAST, IntObj)
    External (_SB_.BGIA, UnknownObj)
    External (_SB_.BGMA, UnknownObj)
    External (_SB_.BGMS, UnknownObj)
    External (_SB_.BTRK, MethodObj)    // 1 Arguments
    External (_SB_.CFGD, UnknownObj)
    External (_SB_.CLVL, UnknownObj)
    External (_SB_.CPPC, IntObj)
    External (_SB_.FAN0.CRNF, MethodObj)    // 0 Arguments
    External (_SB_.GBTR, MethodObj)    // 0 Arguments
    External (_SB_.GGIV, MethodObj)    // 1 Arguments
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.GPC0, MethodObj)    // 1 Arguments
    External (_SB_.IETM, DeviceObj)
    External (_SB_.IETM.DPTE, IntObj)
    External (_SB_.NVDR._DSM, MethodObj)    // 4 Arguments
    External (_SB_.NVDR.NVD1._DSM, MethodObj)    // 4 Arguments
    External (_SB_.NVDR.NVD1._LSI, MethodObj)    // 0 Arguments
    External (_SB_.NVDR.NVD1._LSR, MethodObj)    // 2 Arguments
    External (_SB_.NVDR.NVD1._LSW, MethodObj)    // 3 Arguments
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.B0D4.NPCC, PkgObj)
    External (_SB_.PC00.CNVW.CRFI, UnknownObj)
    External (_SB_.PC00.CNVW.PRRS, UnknownObj)
    External (_SB_.PC00.CNVW.RSTT, UnknownObj)
    External (_SB_.PC00.CTCD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.CTCN, MethodObj)    // 0 Arguments
    External (_SB_.PC00.DPOF, UnknownObj)
    External (_SB_.PC00.GFX0.AINT, MethodObj)    // 2 Arguments
    External (_SB_.PC00.GFX0.ALSI, UnknownObj)
    External (_SB_.PC00.GFX0.CBLV, UnknownObj)
    External (_SB_.PC00.GFX0.CDCK, UnknownObj)
    External (_SB_.PC00.GFX0.CLID, UnknownObj)
    External (_SB_.PC00.GFX0.DD1F, DeviceObj)
    External (_SB_.PC00.GFX0.DD2F, DeviceObj)
    External (_SB_.PC00.GFX0.DRDY, UnknownObj)
    External (_SB_.PC00.GFX0.GSSE, UnknownObj)
    External (_SB_.PC00.GFX0.IUEH, MethodObj)    // 1 Arguments
    External (_SB_.PC00.GFX0.STAT, UnknownObj)
    External (_SB_.PC00.GFX0.TCHE, UnknownObj)
    External (_SB_.PC00.GFX0.VLOC, MethodObj)    // 1 Arguments
    External (_SB_.PC00.HDAS.PPMS, MethodObj)    // 1 Arguments
    External (_SB_.PC00.HDAS.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HDAS.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HIDW, MethodObj)    // 4 Arguments
    External (_SB_.PC00.HIWC, MethodObj)    // 1 Arguments
    External (_SB_.PC00.ITSP, UnknownObj)
    External (_SB_.PC00.LPCB.EC__.BATM, MutexObj)
    External (_SB_.PC00.LPCB.EC__.DPRS, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.EC__.HKEY.ANGN, UnknownObj)
    External (_SB_.PC00.LPCB.EC__.HKEY.BFWM, MutexObj)
    External (_SB_.PC00.LPCB.EC__.HKEY.DYTC, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.EC__.HKEY.MSCB, IntObj)
    External (_SB_.PC00.LPCB.EC__.HKEY.NDPT, UnknownObj)
    External (_SB_.PC00.LPCB.EC__.HKEY.NVST, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.EC__.HKEY.SCPF, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.EC__.HKEY.TSSS, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.EC__.HKEY.WGFL, IntObj)
    External (_SB_.PC00.LPCB.EC__.TTCI, UnknownObj)
    External (_SB_.PC00.M32B, UnknownObj)
    External (_SB_.PC00.M32L, UnknownObj)
    External (_SB_.PC00.M64B, UnknownObj)
    External (_SB_.PC00.M64L, UnknownObj)
    External (_SB_.PC00.PAUD.PUAM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PC2M, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PEG0, DeviceObj)
    External (_SB_.PC00.PEG0.CPRA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PEGP.BCCX, UnknownObj)
    External (_SB_.PC00.PEG0.PEGP.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PEGP.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PEGP.PIXX, UnknownObj)
    External (_SB_.PC00.PEG0.PEGP.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PEGP.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PEGP.SCCX, UnknownObj)
    External (_SB_.PC00.PEG0.PEGP.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PEGP.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PRMV, IntObj)
    External (_SB_.PC00.PEG0.PRTP, IntObj)
    External (_SB_.PC00.PEG0.RD3C, IntObj)
    External (_SB_.PC00.PEG0.SLOT, IntObj)
    External (_SB_.PC00.PEG1, DeviceObj)
    External (_SB_.PC00.PEG1.CBLV, UnknownObj)
    External (_SB_.PC00.PEG1.CLID, UnknownObj)
    External (_SB_.PC00.PEG1.CPRA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.DGCE, IntObj)
    External (_SB_.PC00.PEG1.DHDW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PEGP.BCCX, UnknownObj)
    External (_SB_.PC00.PEG1.PEGP.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PEGP.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PEGP.PEGB.PEGE.DEDP, DeviceObj)
    External (_SB_.PC00.PEG1.PEGP.PIXX, UnknownObj)
    External (_SB_.PC00.PEG1.PEGP.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PEGP.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PEGP.SCCX, UnknownObj)
    External (_SB_.PC00.PEG1.PEGP.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PEGP.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PRMV, IntObj)
    External (_SB_.PC00.PEG1.PRTP, IntObj)
    External (_SB_.PC00.PEG1.RD3C, IntObj)
    External (_SB_.PC00.PEG1.SLOT, IntObj)
    External (_SB_.PC00.PEG2, DeviceObj)
    External (_SB_.PC00.PEG2.CPRA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PEGP.BCCX, UnknownObj)
    External (_SB_.PC00.PEG2.PEGP.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PEGP.NVDN, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PEGP.NVFE, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PEGP.NVST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PEGP.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PEGP.PIXX, UnknownObj)
    External (_SB_.PC00.PEG2.PEGP.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PEGP.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PEGP.RQTC, UnknownObj)
    External (_SB_.PC00.PEG2.PEGP.SCCX, UnknownObj)
    External (_SB_.PC00.PEG2.PEGP.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PEGP.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PRMV, IntObj)
    External (_SB_.PC00.PEG2.PRTP, IntObj)
    External (_SB_.PC00.PEG2.RD3C, IntObj)
    External (_SB_.PC00.PEG2.SLOT, IntObj)
    External (_SB_.PC00.PEG3.CPRA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PL1E, UnknownObj)
    External (_SB_.PC00.PPL1, UnknownObj)
    External (_SB_.PC00.PTDP, UnknownObj)
    External (_SB_.PC00.PTHT.THEN, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01, DeviceObj)
    External (_SB_.PC00.RP01.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP01.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PRMV, IntObj)
    External (_SB_.PC00.RP01.PRTP, IntObj)
    External (_SB_.PC00.RP01.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP01.PXSX.CRFI, UnknownObj)
    External (_SB_.PC00.RP01.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP01.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP01.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.RD3C, IntObj)
    External (_SB_.PC00.RP01.SLOT, IntObj)
    External (_SB_.PC00.RP01.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP01.VDID, FieldUnitObj)
    External (_SB_.PC00.RP02, DeviceObj)
    External (_SB_.PC00.RP02.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP02.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PRMV, IntObj)
    External (_SB_.PC00.RP02.PRTP, IntObj)
    External (_SB_.PC00.RP02.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP02.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP02.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP02.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.RD3C, IntObj)
    External (_SB_.PC00.RP02.SLOT, IntObj)
    External (_SB_.PC00.RP02.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP02.VDID, FieldUnitObj)
    External (_SB_.PC00.RP03, DeviceObj)
    External (_SB_.PC00.RP03.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP03.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PRMV, IntObj)
    External (_SB_.PC00.RP03.PRTP, IntObj)
    External (_SB_.PC00.RP03.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP03.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP03.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP03.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.RD3C, IntObj)
    External (_SB_.PC00.RP03.SLOT, IntObj)
    External (_SB_.PC00.RP03.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP03.VDID, FieldUnitObj)
    External (_SB_.PC00.RP04, DeviceObj)
    External (_SB_.PC00.RP04.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP04.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PRMV, IntObj)
    External (_SB_.PC00.RP04.PRTP, IntObj)
    External (_SB_.PC00.RP04.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP04.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP04.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP04.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.RD3C, IntObj)
    External (_SB_.PC00.RP04.SLOT, IntObj)
    External (_SB_.PC00.RP04.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP04.VDID, FieldUnitObj)
    External (_SB_.PC00.RP05, DeviceObj)
    External (_SB_.PC00.RP05.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP05.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PRMV, IntObj)
    External (_SB_.PC00.RP05.PRTP, IntObj)
    External (_SB_.PC00.RP05.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP05.PXSX.CRFI, UnknownObj)
    External (_SB_.PC00.RP05.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP05.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP05.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.RD3C, IntObj)
    External (_SB_.PC00.RP05.SLOT, IntObj)
    External (_SB_.PC00.RP05.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP05.VDID, FieldUnitObj)
    External (_SB_.PC00.RP06, DeviceObj)
    External (_SB_.PC00.RP06.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP06.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PRMV, IntObj)
    External (_SB_.PC00.RP06.PRTP, IntObj)
    External (_SB_.PC00.RP06.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP06.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP06.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP06.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.RD3C, IntObj)
    External (_SB_.PC00.RP06.SLOT, IntObj)
    External (_SB_.PC00.RP06.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP06.VDID, FieldUnitObj)
    External (_SB_.PC00.RP07, DeviceObj)
    External (_SB_.PC00.RP07.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP07.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PRMV, IntObj)
    External (_SB_.PC00.RP07.PRTP, IntObj)
    External (_SB_.PC00.RP07.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP07.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP07.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP07.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.RD3C, IntObj)
    External (_SB_.PC00.RP07.SLOT, IntObj)
    External (_SB_.PC00.RP07.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP07.VDID, FieldUnitObj)
    External (_SB_.PC00.RP08, DeviceObj)
    External (_SB_.PC00.RP08.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP08.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PRMV, IntObj)
    External (_SB_.PC00.RP08.PRTP, IntObj)
    External (_SB_.PC00.RP08.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP08.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP08.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP08.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.RD3C, IntObj)
    External (_SB_.PC00.RP08.SLOT, IntObj)
    External (_SB_.PC00.RP08.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP08.VDID, FieldUnitObj)
    External (_SB_.PC00.RP09, DeviceObj)
    External (_SB_.PC00.RP09.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP09.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PRMV, IntObj)
    External (_SB_.PC00.RP09.PRTP, IntObj)
    External (_SB_.PC00.RP09.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.RD3C, IntObj)
    External (_SB_.PC00.RP09.SLOT, IntObj)
    External (_SB_.PC00.RP09.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP09.VDID, FieldUnitObj)
    External (_SB_.PC00.RP10, DeviceObj)
    External (_SB_.PC00.RP10.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP10.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PRMV, IntObj)
    External (_SB_.PC00.RP10.PRTP, IntObj)
    External (_SB_.PC00.RP10.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.RD3C, IntObj)
    External (_SB_.PC00.RP10.SLOT, IntObj)
    External (_SB_.PC00.RP10.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP10.VDID, FieldUnitObj)
    External (_SB_.PC00.RP11, DeviceObj)
    External (_SB_.PC00.RP11.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP11.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PRMV, IntObj)
    External (_SB_.PC00.RP11.PRTP, IntObj)
    External (_SB_.PC00.RP11.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP11.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP11.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP11.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.RD3C, IntObj)
    External (_SB_.PC00.RP11.SLOT, IntObj)
    External (_SB_.PC00.RP11.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP11.VDID, FieldUnitObj)
    External (_SB_.PC00.RP12, DeviceObj)
    External (_SB_.PC00.RP12.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP12.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PRMV, IntObj)
    External (_SB_.PC00.RP12.PRTP, IntObj)
    External (_SB_.PC00.RP12.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.RD3C, IntObj)
    External (_SB_.PC00.RP12.SLOT, IntObj)
    External (_SB_.PC00.RP12.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP12.VDID, FieldUnitObj)
    External (_SB_.PC00.RP13, DeviceObj)
    External (_SB_.PC00.RP13.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP13.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.PRMV, IntObj)
    External (_SB_.PC00.RP13.PRTP, IntObj)
    External (_SB_.PC00.RP13.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP13.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP13.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP13.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.RD3C, IntObj)
    External (_SB_.PC00.RP13.SLOT, IntObj)
    External (_SB_.PC00.RP13.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP13.VDID, FieldUnitObj)
    External (_SB_.PC00.RP14, DeviceObj)
    External (_SB_.PC00.RP14.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP14.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.PRMV, IntObj)
    External (_SB_.PC00.RP14.PRTP, IntObj)
    External (_SB_.PC00.RP14.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP14.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP14.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP14.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.RD3C, IntObj)
    External (_SB_.PC00.RP14.SLOT, IntObj)
    External (_SB_.PC00.RP14.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP14.VDID, FieldUnitObj)
    External (_SB_.PC00.RP15, DeviceObj)
    External (_SB_.PC00.RP15.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP15.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.PRMV, IntObj)
    External (_SB_.PC00.RP15.PRTP, IntObj)
    External (_SB_.PC00.RP15.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP15.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP15.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP15.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.RD3C, IntObj)
    External (_SB_.PC00.RP15.SLOT, IntObj)
    External (_SB_.PC00.RP15.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP15.VDID, FieldUnitObj)
    External (_SB_.PC00.RP16, DeviceObj)
    External (_SB_.PC00.RP16.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP16.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.PRMV, IntObj)
    External (_SB_.PC00.RP16.PRTP, IntObj)
    External (_SB_.PC00.RP16.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP16.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP16.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP16.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.RD3C, IntObj)
    External (_SB_.PC00.RP16.SLOT, IntObj)
    External (_SB_.PC00.RP16.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP16.VDID, FieldUnitObj)
    External (_SB_.PC00.RP17, DeviceObj)
    External (_SB_.PC00.RP17.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP17.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.PRMV, IntObj)
    External (_SB_.PC00.RP17.PRTP, IntObj)
    External (_SB_.PC00.RP17.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP17.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP17.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP17.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.RD3C, IntObj)
    External (_SB_.PC00.RP17.SLOT, IntObj)
    External (_SB_.PC00.RP17.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP17.VDID, FieldUnitObj)
    External (_SB_.PC00.RP18, DeviceObj)
    External (_SB_.PC00.RP18.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP18.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.PRMV, IntObj)
    External (_SB_.PC00.RP18.PRTP, IntObj)
    External (_SB_.PC00.RP18.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP18.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP18.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP18.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.RD3C, IntObj)
    External (_SB_.PC00.RP18.SLOT, IntObj)
    External (_SB_.PC00.RP18.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP18.VDID, FieldUnitObj)
    External (_SB_.PC00.RP19, DeviceObj)
    External (_SB_.PC00.RP19.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP19.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.PRMV, IntObj)
    External (_SB_.PC00.RP19.PRTP, IntObj)
    External (_SB_.PC00.RP19.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP19.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP19.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP19.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.RD3C, IntObj)
    External (_SB_.PC00.RP19.SLOT, IntObj)
    External (_SB_.PC00.RP19.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP19.VDID, FieldUnitObj)
    External (_SB_.PC00.RP20, DeviceObj)
    External (_SB_.PC00.RP20.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP20.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.PRMV, IntObj)
    External (_SB_.PC00.RP20.PRTP, IntObj)
    External (_SB_.PC00.RP20.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP20.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP20.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP20.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.RD3C, IntObj)
    External (_SB_.PC00.RP20.SLOT, IntObj)
    External (_SB_.PC00.RP20.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP20.VDID, FieldUnitObj)
    External (_SB_.PC00.RP21, DeviceObj)
    External (_SB_.PC00.RP21.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP21.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.PRMV, IntObj)
    External (_SB_.PC00.RP21.PRTP, IntObj)
    External (_SB_.PC00.RP21.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP21.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP21.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP21.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.RD3C, IntObj)
    External (_SB_.PC00.RP21.SLOT, IntObj)
    External (_SB_.PC00.RP21.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP21.VDID, FieldUnitObj)
    External (_SB_.PC00.RP22, DeviceObj)
    External (_SB_.PC00.RP22.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP22.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.PRMV, IntObj)
    External (_SB_.PC00.RP22.PRTP, IntObj)
    External (_SB_.PC00.RP22.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP22.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP22.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP22.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.RD3C, IntObj)
    External (_SB_.PC00.RP22.SLOT, IntObj)
    External (_SB_.PC00.RP22.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP22.VDID, FieldUnitObj)
    External (_SB_.PC00.RP23, DeviceObj)
    External (_SB_.PC00.RP23.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP23.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.PRMV, IntObj)
    External (_SB_.PC00.RP23.PRTP, IntObj)
    External (_SB_.PC00.RP23.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP23.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP23.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP23.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.RD3C, IntObj)
    External (_SB_.PC00.RP23.SLOT, IntObj)
    External (_SB_.PC00.RP23.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP23.VDID, FieldUnitObj)
    External (_SB_.PC00.RP24, DeviceObj)
    External (_SB_.PC00.RP24.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP24.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.PRMV, IntObj)
    External (_SB_.PC00.RP24.PRTP, IntObj)
    External (_SB_.PC00.RP24.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP24.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP24.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP24.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.RD3C, IntObj)
    External (_SB_.PC00.RP24.SLOT, IntObj)
    External (_SB_.PC00.RP24.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP24.VDID, FieldUnitObj)
    External (_SB_.PC00.RP25, DeviceObj)
    External (_SB_.PC00.RP25.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP25.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP25.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP25.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP25.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP25.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP25.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP25.PRMV, IntObj)
    External (_SB_.PC00.RP25.PRTP, IntObj)
    External (_SB_.PC00.RP25.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP25.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP25.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP25.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP25.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP25.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP25.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP25.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP25.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP25.RD3C, IntObj)
    External (_SB_.PC00.RP25.SLOT, IntObj)
    External (_SB_.PC00.RP25.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP25.VDID, FieldUnitObj)
    External (_SB_.PC00.RP26, DeviceObj)
    External (_SB_.PC00.RP26.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP26.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP26.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP26.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP26.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP26.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP26.PRMV, IntObj)
    External (_SB_.PC00.RP26.PRTP, IntObj)
    External (_SB_.PC00.RP26.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP26.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP26.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP26.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP26.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP26.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP26.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP26.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP26.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP26.RD3C, IntObj)
    External (_SB_.PC00.RP26.SLOT, IntObj)
    External (_SB_.PC00.RP26.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP26.VDID, FieldUnitObj)
    External (_SB_.PC00.RP27, DeviceObj)
    External (_SB_.PC00.RP27.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP27.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP27.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP27.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP27.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP27.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP27.PRMV, IntObj)
    External (_SB_.PC00.RP27.PRTP, IntObj)
    External (_SB_.PC00.RP27.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP27.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP27.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP27.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP27.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP27.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP27.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP27.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP27.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP27.RD3C, IntObj)
    External (_SB_.PC00.RP27.SLOT, IntObj)
    External (_SB_.PC00.RP27.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP27.VDID, FieldUnitObj)
    External (_SB_.PC00.RP28, DeviceObj)
    External (_SB_.PC00.RP28.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP28.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP28.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP28.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP28.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP28.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP28.PRMV, IntObj)
    External (_SB_.PC00.RP28.PRTP, IntObj)
    External (_SB_.PC00.RP28.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP28.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP28.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP28.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP28.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP28.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP28.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP28.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP28.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP28.RD3C, IntObj)
    External (_SB_.PC00.RP28.SLOT, IntObj)
    External (_SB_.PC00.RP28.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP28.VDID, FieldUnitObj)
    External (_SB_.PC00.SAT0.PRIM, DeviceObj)
    External (_SB_.PC00.SAT0.PRIM.GTME, IntObj)
    External (_SB_.PC00.SAT0.PRT0, DeviceObj)
    External (_SB_.PC00.SAT0.PRT0.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT0.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT0.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT1, DeviceObj)
    External (_SB_.PC00.SAT0.PRT1.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT1.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT1.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT2, DeviceObj)
    External (_SB_.PC00.SAT0.PRT2.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT2.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT2.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT3, DeviceObj)
    External (_SB_.PC00.SAT0.PRT3.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT3.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT3.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT4, DeviceObj)
    External (_SB_.PC00.SAT0.PRT4.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT4.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT4.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT5, DeviceObj)
    External (_SB_.PC00.SAT0.PRT5.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT5.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT5.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT6, DeviceObj)
    External (_SB_.PC00.SAT0.PRT6.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT6.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT6.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT7, DeviceObj)
    External (_SB_.PC00.SAT0.PRT7.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT7.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT7.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.SATC, MethodObj)    // 1 Arguments
    External (_SB_.PC00.SAT0.SATD, MethodObj)    // 4 Arguments
    External (_SB_.PC00.SAT0.SCND, DeviceObj)
    External (_SB_.PC00.SAT0.SCND.GTME, IntObj)
    External (_SB_.PC00.SAT0.SCND.MSTR, DeviceObj)
    External (_SB_.PC00.SWAK, MethodObj)    // 2 Arguments
    External (_SB_.PC00.TDM0, DeviceObj)
    External (_SB_.PC00.TDM0._STA, UnknownObj)
    External (_SB_.PC00.TDM0.SCME, UnknownObj)
    External (_SB_.PC00.TDM0.STCM, MethodObj)    // 2 Arguments
    External (_SB_.PC00.TDM1, DeviceObj)
    External (_SB_.PC00.TDM1._STA, UnknownObj)
    External (_SB_.PC00.TDM1.SCME, UnknownObj)
    External (_SB_.PC00.TDM1.STCM, MethodObj)    // 2 Arguments
    External (_SB_.PC00.THC0, DeviceObj)
    External (_SB_.PC00.THC1, DeviceObj)
    External (_SB_.PC00.TXHC, DeviceObj)
    External (_SB_.PC00.XHCI.DUAM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.PSLI, MethodObj)    // 1 Arguments
    External (_SB_.PC00.XHCI.PSLP, MethodObj)    // 1 Arguments
    External (_SB_.PC00.XHCI.RHUB.HS10.RDLY, UnknownObj)
    External (_SB_.PC00.XHCI.RHUB.HS14.RDLY, UnknownObj)
    External (_SB_.PC00.XHCI.RHUB.INIR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS2X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.PTHH.THEN, MethodObj)    // 0 Arguments
    External (_SB_.PWRB, DeviceObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.SPC0, MethodObj)    // 2 Arguments
    External (_SB_.TCWK, MethodObj)    // 1 Arguments
    External (_SB_.TPM_.PTS_, MethodObj)    // 1 Arguments
    External (_SB_.TRPD, UnknownObj)
    External (_SB_.TRPF, UnknownObj)
    External (_SB_.UBTC.NTFY, MethodObj)    // 0 Arguments
    External (_SB_.WFDE, DeviceObj)
    External (_TZ_.ETMD, IntObj)
    External (_TZ_.TZ00, DeviceObj)
    External (ADBG, MethodObj)    // 1 Arguments
    External (AL6D, FieldUnitObj)
    External (BGIA, IntObj)
    External (BGMA, IntObj)
    External (BGMS, IntObj)
    External (BPNT, MethodObj)    // 0 Arguments
    External (CFGD, UnknownObj)
    External (CLVL, IntObj)
    External (CNMT, UnknownObj)
    External (DDMS, MethodObj)    // 0 Arguments
    External (DGBA, UnknownObj)
    External (DGDX, UnknownObj)
    External (DIDX, UnknownObj)
    External (DIDY, UnknownObj)
    External (DME0, UnknownObj)
    External (DME1, UnknownObj)
    External (DPMS, FieldUnitObj)
    External (DPN2, UnknownObj)
    External (DPNT, UnknownObj)
    External (DTCM, MethodObj)    // 2 Arguments
    External (DTFS, UnknownObj)
    External (DTRT, UnknownObj)
    External (DUWS, UnknownObj)
    External (EPTU, FieldUnitObj)
    External (ESPC, UnknownObj)
    External (GPRV, MethodObj)    // 2 Arguments
    External (HBCL, FieldUnitObj)
    External (HBPL, FieldUnitObj)
    External (HGMD, UnknownObj)
    External (ISAR, MethodObj)    // 4 Arguments
    External (ITSP, IntObj)
    External (M32B, IntObj)
    External (M32L, IntObj)
    External (M64B, IntObj)
    External (M64L, IntObj)
    External (MDBG, MethodObj)    // 1 Arguments
    External (ODBG, MethodObj)    // 1 Arguments
    External (ODV0, UnknownObj)
    External (ODV1, UnknownObj)
    External (ODV2, UnknownObj)
    External (ODV3, UnknownObj)
    External (ODV4, UnknownObj)
    External (ODV5, UnknownObj)
    External (ODV6, UnknownObj)
    External (ODV7, UnknownObj)
    External (ODV8, UnknownObj)
    External (ODV9, UnknownObj)
    External (ODVA, UnknownObj)
    External (ODVB, UnknownObj)
    External (ODVC, UnknownObj)
    External (ODVD, UnknownObj)
    External (ODVE, UnknownObj)
    External (ODVF, UnknownObj)
    External (ODVG, UnknownObj)
    External (ODVH, UnknownObj)
    External (ODVI, UnknownObj)
    External (ODVJ, UnknownObj)
    External (ODVK, UnknownObj)
    External (P0WK, UnknownObj)
    External (P1WK, UnknownObj)
    External (P2WK, UnknownObj)
    External (P3WK, UnknownObj)
    External (PCRA, MethodObj)    // 3 Arguments
    External (PF00, IntObj)
    External (PF01, UnknownObj)
    External (PF02, UnknownObj)
    External (PF03, UnknownObj)
    External (PF04, UnknownObj)
    External (PF05, UnknownObj)
    External (PF06, UnknownObj)
    External (PF07, UnknownObj)
    External (PG3S, UnknownObj)
    External (PIN_.OFF_, MethodObj)    // 1 Arguments
    External (PIN_.ON__, MethodObj)    // 1 Arguments
    External (PINP.OFF_, MethodObj)    // 1 Arguments
    External (PINP.ON__, MethodObj)    // 1 Arguments
    External (PINP.STA_, MethodObj)    // 1 Arguments
    External (PMRL, FieldUnitObj)
    External (PMSA, FieldUnitObj)
    External (PSON, UnknownObj)
    External (PTHM, FieldUnitObj)
    External (PTTB, UnknownObj)
    External (PU2C, UnknownObj)
    External (PU3C, UnknownObj)
    External (RPN0, IntObj)
    External (RPN1, IntObj)
    External (RPS0, IntObj)
    External (RPS1, IntObj)
    External (RTD3, FieldUnitObj)
    External (S0ID, UnknownObj)
    External (SIME, UnknownObj)
    External (SPNT, MethodObj)    // 0 Arguments
    External (SPTS, MethodObj)    // 1 Arguments
    External (STD3, FieldUnitObj)
    External (STDV, UnknownObj)
    External (SWAK, MethodObj)    // 2 Arguments
    External (TBPE, IntObj)
    External (TCPN, UnknownObj)
    External (TDCE, UnknownObj)
    External (THCE, UnknownObj)
    External (TLAC, MethodObj)    // 1 Arguments
    External (TOFF, IntObj)
    External (TPTS, MethodObj)    // 1 Arguments
    External (TRE0, UnknownObj)
    External (TRE1, UnknownObj)
    External (TRE2, UnknownObj)
    External (TRE3, UnknownObj)
    External (TVCF, MethodObj)    // 4 Arguments
    External (UF0E, UnknownObj)
    External (UF1E, UnknownObj)
    External (ULTR, MethodObj)    // 1 Arguments
    External (UPMC, UnknownObj)
    External (VDSD, IntObj)
    External (VMCP, UnknownObj)
    External (VMDE, FieldUnitObj)
    External (VMR1, UnknownObj)
    External (VMR2, UnknownObj)
    External (VMR3, UnknownObj)
    External (VMR4, UnknownObj)
    External (XBAS, UnknownObj)

    Name (MBUF, Buffer (0x4000) {})
    OperationRegion (MDBR, SystemMemory, 0x93645018, 0x00004008)
    Field (MDBR, AnyAcc, Lock, Preserve)
    {
        ASLD,   1, 
        LDBG,   7, 
        BUFN,   16, 
        Offset (0x04), 
        MDG0,   131072
    }

    Method (DX2H, 2, Serialized)
    {
        If (ASLD)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    DB2H (Arg1)
                }
                Case (One)
                {
                    DW2H (Arg1)
                }
                Case (0x02)
                {
                    DD2H (Arg1)
                }

            }
        }
    }

    Method (DB2H, 1, Serialized)
    {
        SHOW (Arg0)
        MDGC (0x20)
        MDG0 = MBUF /* \MBUF */
    }

    Method (DW2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x08)
        Local0 &= 0xFF
        Local1 &= 0xFF
        DB2H (Local1)
        BUFN--
        DB2H (Local0)
    }

    Method (DD2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x10)
        Local0 &= 0xFFFF
        Local1 &= 0xFFFF
        DW2H (Local1)
        BUFN--
        DW2H (Local0)
    }

    Method (MBGS, 1, Serialized)
    {
        If (ASLD)
        {
            Local0 = SizeOf (Arg0)
            Name (BUFS, Buffer (Local0) {})
            BUFS = Arg0
            MDGC (0x20)
            While (Local0)
            {
                MDGC (DerefOf (BUFS [(SizeOf (Arg0) - Local0)]))
                Local0--
            }

            MDG0 = MBUF /* \MBUF */
        }
    }

    Method (SHOW, 1, Serialized)
    {
        MDGC (NTOC ((Arg0 >> 0x04)))
        MDGC (NTOC (Arg0))
    }

    Method (LINE, 0, Serialized)
    {
        Local0 = BUFN /* \BUFN */
        Local0 &= 0x0F
        While (Local0)
        {
            MDGC (Zero)
            Local0++
            Local0 &= 0x0F
        }
    }

    Method (MDGC, 1, Serialized)
    {
        MBUF [BUFN] = Arg0
        BUFN += One
        If ((BUFN > 0x3FFF))
        {
            BUFN = Zero
        }
    }

    Method (UP_L, 1, Serialized)
    {
        Local2 = Arg0
        Local2 <<= 0x04
        MOVE (Local2)
        Local3 = (0x4000 - Local2)
        While (Local2)
        {
            MBUF [Local3] = Zero
            Local3++
            Local2--
        }
    }

    Method (MOVE, 1, Serialized)
    {
        Local4 = Arg0
        BUFN = Zero
        Local5 = (0x4000 - Local4)
        While (Local5)
        {
            Local5--
            MBUF [BUFN] = DerefOf (MBUF [Local4])
            BUFN++
            Local4++
        }
    }

    Method (NTOC, 1, Serialized)
    {
        Local0 = (Arg0 & 0x0F)
        If ((Local0 < 0x0A))
        {
            Local0 += 0x30
        }
        Else
        {
            Local0 += 0x37
        }

        Return (Local0)
    }

    Name (SANB, 0x936C6418)
    Name (SANL, 0x01B6)
    OperationRegion (SANV, SystemMemory, SANB, SANL)
    Field (SANV, AnyAcc, Lock, Preserve)
    {
        ASLB,   32, 
        IMON,   8, 
        IGDS,   8, 
        IBTT,   8, 
        IPAT,   8, 
        IPSC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        IF1E,   8, 
        HVCO,   8, 
        GSMI,   8, 
        PAVP,   8, 
        CADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        DID9,   32, 
        DIDA,   32, 
        DIDB,   32, 
        DIDC,   32, 
        DIDD,   32, 
        DIDE,   32, 
        DIDF,   32, 
        DIDX,   32, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        NXDX,   32, 
        LIDS,   8, 
        KSV0,   32, 
        KSV1,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        ALFP,   8, 
        IPTP,   8, 
        EDPV,   8, 
        HGMD,   8, 
        HGFL,   8, 
        SGGP,   8, 
        HRE0,   8, 
        HRG0,   32, 
        HRA0,   8, 
        PWE0,   8, 
        PWG0,   32, 
        PWA0,   8, 
        P1GP,   8, 
        HRE1,   8, 
        HRG1,   32, 
        HRA1,   8, 
        PWE1,   8, 
        PWG1,   32, 
        PWA1,   8, 
        P2GP,   8, 
        HRE2,   8, 
        HRG2,   32, 
        HRA2,   8, 
        PWE2,   8, 
        PWG2,   32, 
        PWA2,   8, 
        P3GP,   8, 
        HRE3,   8, 
        HRG3,   32, 
        HRA3,   8, 
        PWE3,   8, 
        PWG3,   32, 
        PWA3,   8, 
        P3WK,   32, 
        DLPW,   16, 
        DLHR,   16, 
        EECP,   8, 
        XBAS,   32, 
        GBAS,   16, 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        LTRX,   8, 
        OBFX,   8, 
        LTRY,   8, 
        OBFY,   8, 
        LTRZ,   8, 
        OBFZ,   8, 
        LTRW,   8, 
        OBFA,   8, 
        SMSL,   16, 
        SNSL,   16, 
        M64B,   64, 
        M64L,   64, 
        CPEX,   32, 
        M32B,   32, 
        M32L,   32, 
        P0WK,   32, 
        P1WK,   32, 
        P2WK,   32, 
        VTDS,   8, 
        VTB1,   32, 
        VTB2,   32, 
        VTB3,   32, 
        VTB4,   32, 
        VTB5,   32, 
        VTB6,   32, 
        VTB7,   32, 
        VE1V,   16, 
        VE2V,   16, 
        RPIN,   8, 
        RPBA,   32, 
        CTHM,   8, 
        SIME,   8, 
        THCE,   8, 
        TDCE,   8, 
        DME0,   8, 
        DME1,   8, 
        TRE0,   8, 
        TRE1,   8, 
        TRE2,   8, 
        TRE3,   8, 
        TPA0,   32, 
        TPA1,   32, 
        TPA2,   32, 
        TPA3,   32, 
        TCDS,   32, 
        TCIT,   8, 
        TCIR,   8, 
        TRTD,   8, 
        ITM0,   32, 
        ITM1,   32, 
        LTE0,   8, 
        LTE1,   8, 
        LTE2,   8, 
        LTE3,   8, 
        PSL0,   16, 
        PSL1,   16, 
        PSL2,   16, 
        PSL3,   16, 
        PNS0,   16, 
        PNS1,   16, 
        PNS2,   16, 
        PNS3,   16, 
        IMRY,   8, 
        TIVS,   8, 
        PG0E,   8, 
        PG1E,   8, 
        PG2E,   8, 
        PG3E,   8, 
        VMDE,   8, 
        DIDY,   32, 
        NXDY,   32, 
        SLTS,   8, 
        VMR1,   8, 
        VMR2,   8, 
        VMR3,   8, 
        VMR4,   8, 
        VMS0,   8, 
        VMCP,   8, 
        CPRT,   8, 
        CSLU,   32, 
        CSSP,   32, 
        MPGN,   8, 
        CMBM,   8, 
        DPMS,   8, 
        PMSA,   64, 
        PMRL,   64, 
        PBR1,   8, 
        PBR2,   8, 
        PBR3,   8, 
        PPA0,   32, 
        PPA1,   32, 
        PPA2,   32, 
        PPA3,   32, 
        REGO,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, Zero)
    Name (SS4, One)
    OperationRegion (GNVS, SystemMemory, 0x936A4000, 0x0CE1)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        REVN,   8, 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        MEFE,   8, 
        DSTS,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        IDEM,   8, 
        PLID,   8, 
        BTYP,   8, 
        OSCC,   8, 
        NEXP,   8, 
        SBV1,   8, 
        SBV2,   8, 
        ECON,   8, 
        DSEN,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        VFN2,   8, 
        VFN3,   8, 
        VFN4,   8, 
        VFN5,   8, 
        VFN6,   8, 
        VFN7,   8, 
        VFN8,   8, 
        VFN9,   8, 
        PNHM,   32, 
        TBAL,   32, 
        TBAH,   32, 
        TSOD,   8, 
        PFLV,   8, 
        BREV,   16, 
        PAMT,   8, 
        AC0F,   8, 
        AC1F,   8, 
        XTUB,   32, 
        XTUS,   32, 
        XMPB,   32, 
        DDRF,   8, 
        RTD3,   8, 
        PEP0,   8, 
        PEP3,   8, 
        DPTF,   8, 
        DCFE,   16, 
        SADE,   8, 
        FND1,   8, 
        AMBD,   8, 
        AMAT,   8, 
        AMPT,   8, 
        AMCT,   8, 
        AMHT,   8, 
        SKDE,   8, 
        SKAT,   8, 
        SKPT,   8, 
        SKCT,   8, 
        SKHT,   8, 
        EFDE,   8, 
        EFAT,   8, 
        EFPT,   8, 
        EFCT,   8, 
        EFHT,   8, 
        VRDE,   8, 
        VRAT,   8, 
        VRPT,   8, 
        VRCT,   8, 
        VRHT,   8, 
        DPAP,   8, 
        DPPP,   8, 
        DPCP,   8, 
        PIDE,   8, 
        PPSZ,   32, 
        Offset (0x9C), 
        CHEN,   8, 
        S0ID,   8, 
        CTDB,   8, 
        DKSM,   8, 
        SIO1,   16, 
        SIO2,   16, 
        SPBA,   16, 
        Offset (0x1F3), 
        PG3S,   8, 
        PWRE,   8, 
        Offset (0x1F7), 
        PPPR,   16, 
        PBPE,   8, 
        VSPE,   8, 
        RFIM,   8, 
        Offset (0x203), 
        XHPR,   8, 
        RIC0,   8, 
        GBSX,   8, 
        IUBE,   8, 
        IUCE,   8, 
        IUDE,   8, 
        ECNO,   8, 
        AUDD,   16, 
        IC0D,   16, 
        IC1D,   16, 
        IC1S,   16, 
        VRRD,   16, 
        PSCP,   8, 
        I20D,   16, 
        I21D,   16, 
        RCG0,   16, 
        RCG1,   16, 
        P2ME,   8, 
        P2MK,   8, 
        SSH0,   16, 
        SSL0,   16, 
        SSD0,   16, 
        FMH0,   16, 
        FML0,   16, 
        FMD0,   16, 
        FPH0,   16, 
        FPL0,   16, 
        FPD0,   16, 
        HSH0,   16, 
        HSL0,   16, 
        HSD0,   16, 
        Offset (0x23D), 
        SSH1,   16, 
        SSL1,   16, 
        SSD1,   16, 
        FMH1,   16, 
        FML1,   16, 
        FMD1,   16, 
        FPH1,   16, 
        FPL1,   16, 
        FPD1,   16, 
        HSH1,   16, 
        HSL1,   16, 
        HSD1,   16, 
        Offset (0x256), 
        SSH2,   16, 
        SSL2,   16, 
        SSD2,   16, 
        FMH2,   16, 
        FML2,   16, 
        FMD2,   16, 
        FPH2,   16, 
        FPL2,   16, 
        FPD2,   16, 
        HSH2,   16, 
        HSL2,   16, 
        HSD2,   16, 
        Offset (0x26F), 
        SSH3,   16, 
        SSL3,   16, 
        SSD3,   16, 
        FMH3,   16, 
        FML3,   16, 
        FMD3,   16, 
        FPH3,   16, 
        FPL3,   16, 
        FPD3,   16, 
        HSH3,   16, 
        HSL3,   16, 
        HSD3,   16, 
        Offset (0x288), 
        SSH4,   16, 
        SSL4,   16, 
        SSD4,   16, 
        FMH4,   16, 
        FML4,   16, 
        FMD4,   16, 
        FPH4,   16, 
        FPL4,   16, 
        FPD4,   16, 
        HSH4,   16, 
        HSL4,   16, 
        HSD4,   16, 
        Offset (0x2A1), 
        SSH5,   16, 
        SSL5,   16, 
        SSD5,   16, 
        FMH5,   16, 
        FML5,   16, 
        FMD5,   16, 
        FPH5,   16, 
        FPL5,   16, 
        FPD5,   16, 
        HSH5,   16, 
        HSL5,   16, 
        HSD5,   16, 
        Offset (0x2BA), 
        M0C0,   16, 
        M1C0,   16, 
        M0C1,   16, 
        M1C1,   16, 
        M0C2,   16, 
        M1C2,   16, 
        M0C3,   16, 
        M1C3,   16, 
        M0C4,   16, 
        M1C4,   16, 
        M0C5,   16, 
        M1C5,   16, 
        M0C6,   16, 
        M1C6,   16, 
        M0C7,   16, 
        M1C7,   16, 
        M0C8,   16, 
        M1C8,   16, 
        Offset (0x2DF), 
        M0C9,   16, 
        M1C9,   16, 
        M0CA,   16, 
        M1CA,   16, 
        M0CB,   16, 
        M1CB,   16, 
        Offset (0x2EC), 
        GIRQ,   32, 
        DMTP,   8, 
        DMTD,   8, 
        DMSH,   8, 
        SHSB,   8, 
        PLCS,   8, 
        PLVL,   16, 
        WWSD,   8, 
        CVSD,   8, 
        SSDD,   8, 
        INLD,   8, 
        IFAT,   8, 
        IFPT,   8, 
        IFCT,   8, 
        IFHT,   8, 
        USBH,   8, 
        BCV4,   8, 
        WTV0,   8, 
        WTV1,   8, 
        APFU,   8, 
        Offset (0x30A), 
        PEPC,   64, 
        VRSD,   16, 
        PB1E,   8, 
        GNID,   8, 
        Offset (0x320), 
        AUPL,   32, 
        Offset (0x327), 
        CHGE,   8, 
        AMC3,   8, 
        SKC3,   8, 
        EFC3,   8, 
        VRC3,   8, 
        IFC3,   8, 
        WGC3,   8, 
        ESPC,   8, 
        BATR,   8, 
        IN34,   8, 
        ECLP,   8, 
        MEMS,   8, 
        S1DE,   8, 
        S2DE,   8, 
        S3DE,   8, 
        S4DE,   8, 
        S5DE,   8, 
        S1S3,   8, 
        S2S3,   8, 
        S3S3,   8, 
        S4S3,   8, 
        S5S3,   8, 
        PSME,   8, 
        PDT1,   8, 
        PLM1,   32, 
        PTW1,   32, 
        DDT1,   8, 
        DDP1,   8, 
        DLI1,   16, 
        DPL1,   16, 
        DTW1,   32, 
        DMI1,   16, 
        DMA1,   16, 
        DMT1,   16, 
        WIFE,   8, 
        DOM1,   8, 
        LIM1,   16, 
        TIM1,   32, 
        TRD0,   8, 
        TRL0,   8, 
        TRD1,   8, 
        TRL1,   8, 
        WDM1,   8, 
        CID1,   16, 
        Offset (0x3FA), 
        APPE,   8, 
        SDS0,   8, 
        SDS1,   8, 
        SDS2,   8, 
        SDS3,   8, 
        SDS4,   8, 
        SDS5,   8, 
        SDS6,   8, 
        SDS7,   8, 
        SDS8,   8, 
        SDS9,   8, 
        SDSA,   8, 
        TPLT,   8, 
        TPLM,   8, 
        TPLB,   8, 
        TPLH,   16, 
        TPLS,   8, 
        TPDT,   8, 
        TPDM,   8, 
        TPDB,   8, 
        TPDH,   16, 
        TPDS,   8, 
        FPTT,   8, 
        FPTM,   8, 
        WTVX,   8, 
        WITX,   8, 
        GPTD,   8, 
        GDBT,   16, 
        UTKX,   8, 
        SPTD,   8, 
        Offset (0x42A), 
        ATLB,   32, 
        SDM0,   8, 
        SDM1,   8, 
        SDM2,   8, 
        SDM3,   8, 
        SDM4,   8, 
        SDM5,   8, 
        SDM6,   8, 
        SDM7,   8, 
        SDM8,   8, 
        SDM9,   8, 
        SDMA,   8, 
        SDMB,   8, 
        Offset (0x43B), 
        USTP,   8, 
        Offset (0x465), 
        GFPS,   32, 
        GFPI,   32, 
        WBBR,   32, 
        GBTK,   32, 
        GBTI,   32, 
        GPDI,   32, 
        GPLI,   32, 
        CL00,   8, 
        CL01,   8, 
        CL02,   8, 
        CL03,   8, 
        CL04,   8, 
        CL05,   8, 
        L0EN,   8, 
        L1EN,   8, 
        L2EN,   8, 
        L3EN,   8, 
        L4EN,   8, 
        L5EN,   8, 
        CDIV,   8, 
        C0VE,   8, 
        C0TP,   8, 
        C0CV,   8, 
        C0IC,   32, 
        C0GP,   8, 
        C0IB,   8, 
        C0IA,   16, 
        C0P0,   8, 
        C0P1,   8, 
        C0P2,   8, 
        C0P3,   8, 
        C0P4,   8, 
        C0P5,   8, 
        C0G0,   8, 
        C0G1,   8, 
        C0G2,   8, 
        C0G3,   8, 
        C0G4,   8, 
        C0G5,   8, 
        C0F0,   8, 
        C0F1,   8, 
        C0F2,   8, 
        C0F3,   8, 
        C0F4,   8, 
        C0F5,   8, 
        C0A0,   8, 
        C0A1,   8, 
        C0A2,   8, 
        C0A3,   8, 
        C0A4,   8, 
        C0A5,   8, 
        C0I0,   8, 
        C0I1,   8, 
        C0I2,   8, 
        C0I3,   8, 
        C0I4,   8, 
        C0I5,   8, 
        C0PL,   8, 
        C0W0,   8, 
        C0W1,   8, 
        C0W2,   8, 
        C0W3,   8, 
        C0SP,   8, 
        C0W4,   8, 
        C0W5,   8, 
        C0CS,   8, 
        C1VE,   8, 
        C1TP,   8, 
        C1CV,   8, 
        C1IC,   32, 
        C1GP,   8, 
        C1IB,   8, 
        C1IA,   16, 
        C1P0,   8, 
        C1P1,   8, 
        C1P2,   8, 
        C1P3,   8, 
        C1P4,   8, 
        C1P5,   8, 
        C1G0,   8, 
        C1G1,   8, 
        C1G2,   8, 
        C1G3,   8, 
        C1G4,   8, 
        C1G5,   8, 
        C1F0,   8, 
        C1F1,   8, 
        C1F2,   8, 
        C1F3,   8, 
        C1F4,   8, 
        C1F5,   8, 
        C1A0,   8, 
        C1A1,   8, 
        C1A2,   8, 
        C1A3,   8, 
        C1A4,   8, 
        C1A5,   8, 
        C1I0,   8, 
        C1I1,   8, 
        C1I2,   8, 
        C1I3,   8, 
        C1I4,   8, 
        C1I5,   8, 
        C1PL,   8, 
        C1W0,   8, 
        C1W1,   8, 
        C1W2,   8, 
        C1W3,   8, 
        C1SP,   8, 
        C1W4,   8, 
        C1W5,   8, 
        C1CS,   8, 
        C2VE,   8, 
        C2TP,   8, 
        C2CV,   8, 
        C2IC,   32, 
        C2GP,   8, 
        C2IB,   8, 
        C2IA,   16, 
        C2P0,   8, 
        C2P1,   8, 
        C2P2,   8, 
        C2P3,   8, 
        C2P4,   8, 
        C2P5,   8, 
        C2G0,   8, 
        C2G1,   8, 
        C2G2,   8, 
        C2G3,   8, 
        C2G4,   8, 
        C2G5,   8, 
        C2F0,   8, 
        C2F1,   8, 
        C2F2,   8, 
        C2F3,   8, 
        C2F4,   8, 
        C2F5,   8, 
        C2A0,   8, 
        C2A1,   8, 
        C2A2,   8, 
        C2A3,   8, 
        C2A4,   8, 
        C2A5,   8, 
        C2I0,   8, 
        C2I1,   8, 
        C2I2,   8, 
        C2I3,   8, 
        C2I4,   8, 
        C2I5,   8, 
        C2PL,   8, 
        C2W0,   8, 
        C2W1,   8, 
        C2W2,   8, 
        C2W3,   8, 
        C2SP,   8, 
        C2W4,   8, 
        C2W5,   8, 
        C2CS,   8, 
        C3VE,   8, 
        C3TP,   8, 
        C3CV,   8, 
        C3IC,   32, 
        C3GP,   8, 
        C3IB,   8, 
        C3IA,   16, 
        C3P0,   8, 
        C3P1,   8, 
        C3P2,   8, 
        C3P3,   8, 
        C3P4,   8, 
        C3P5,   8, 
        C3G0,   8, 
        C3G1,   8, 
        C3G2,   8, 
        C3G3,   8, 
        C3G4,   8, 
        C3G5,   8, 
        C3F0,   8, 
        C3F1,   8, 
        C3F2,   8, 
        C3F3,   8, 
        C3F4,   8, 
        C3F5,   8, 
        C3A0,   8, 
        C3A1,   8, 
        C3A2,   8, 
        C3A3,   8, 
        C3A4,   8, 
        C3A5,   8, 
        C3I0,   8, 
        C3I1,   8, 
        C3I2,   8, 
        C3I3,   8, 
        C3I4,   8, 
        C3I5,   8, 
        C3PL,   8, 
        C3W0,   8, 
        C3W1,   8, 
        C3W2,   8, 
        C3W3,   8, 
        C3SP,   8, 
        C3W4,   8, 
        C3W5,   8, 
        C3CS,   8, 
        C4VE,   8, 
        C4TP,   8, 
        C4CV,   8, 
        C4IC,   32, 
        C4GP,   8, 
        C4IB,   8, 
        C4IA,   16, 
        C4P0,   8, 
        C4P1,   8, 
        C4P2,   8, 
        C4P3,   8, 
        C4P4,   8, 
        C4P5,   8, 
        C4G0,   8, 
        C4G1,   8, 
        C4G2,   8, 
        C4G3,   8, 
        C4G4,   8, 
        C4G5,   8, 
        C4F0,   8, 
        C4F1,   8, 
        C4F2,   8, 
        C4F3,   8, 
        C4F4,   8, 
        C4F5,   8, 
        C4A0,   8, 
        C4A1,   8, 
        C4A2,   8, 
        C4A3,   8, 
        C4A4,   8, 
        C4A5,   8, 
        C4I0,   8, 
        C4I1,   8, 
        C4I2,   8, 
        C4I3,   8, 
        C4I4,   8, 
        C4I5,   8, 
        C4PL,   8, 
        C4W0,   8, 
        C4W1,   8, 
        C4W2,   8, 
        C4W3,   8, 
        C4SP,   8, 
        C4W4,   8, 
        C4W5,   8, 
        C4CS,   8, 
        C5VE,   8, 
        C5TP,   8, 
        C5CV,   8, 
        C5IC,   32, 
        C5GP,   8, 
        C5IB,   8, 
        C5IA,   16, 
        C5P0,   8, 
        C5P1,   8, 
        C5P2,   8, 
        C5P3,   8, 
        C5P4,   8, 
        C5P5,   8, 
        C5G0,   8, 
        C5G1,   8, 
        C5G2,   8, 
        C5G3,   8, 
        C5G4,   8, 
        C5G5,   8, 
        C5F0,   8, 
        C5F1,   8, 
        C5F2,   8, 
        C5F3,   8, 
        C5F4,   8, 
        C5F5,   8, 
        C5A0,   8, 
        C5A1,   8, 
        C5A2,   8, 
        C5A3,   8, 
        C5A4,   8, 
        C5A5,   8, 
        C5I0,   8, 
        C5I1,   8, 
        C5I2,   8, 
        C5I3,   8, 
        C5I4,   8, 
        C5I5,   8, 
        C5PL,   8, 
        C5W0,   8, 
        C5W1,   8, 
        C5W2,   8, 
        C5W3,   8, 
        C5SP,   8, 
        C5W4,   8, 
        C5W5,   8, 
        C5CS,   8, 
        L0SM,   8, 
        L0H0,   8, 
        L0H1,   8, 
        L0H2,   8, 
        L0H3,   8, 
        L0H4,   8, 
        L0H5,   8, 
        L0H6,   8, 
        L0H7,   8, 
        L0H8,   8, 
        L0PL,   8, 
        L0M0,   8, 
        L0M1,   8, 
        L0M2,   8, 
        L0M3,   8, 
        L0M4,   8, 
        L0M5,   8, 
        L0M6,   8, 
        L0M7,   8, 
        L0M8,   8, 
        L0M9,   8, 
        L0MA,   8, 
        L0MB,   8, 
        L0MC,   8, 
        L0MD,   8, 
        L0ME,   8, 
        L0MF,   8, 
        L0DI,   8, 
        L0BS,   8, 
        L0A0,   16, 
        L0A1,   16, 
        L0A2,   16, 
        L0A3,   16, 
        L0A4,   16, 
        L0A5,   16, 
        L0A6,   16, 
        L0A7,   16, 
        L0A8,   16, 
        L0A9,   16, 
        L0AA,   16, 
        L0AB,   16, 
        L0D0,   8, 
        L0D1,   8, 
        L0D2,   8, 
        L0D3,   8, 
        L0D4,   8, 
        L0D5,   8, 
        L0D6,   8, 
        L0D7,   8, 
        L0D8,   8, 
        L0D9,   8, 
        L0DA,   8, 
        L0DB,   8, 
        L0DV,   8, 
        L0CV,   8, 
        L0LU,   8, 
        L0NL,   8, 
        L0EE,   8, 
        L0VC,   8, 
        L0FS,   8, 
        L0LE,   8, 
        L0DG,   8, 
        L0CK,   32, 
        L0CL,   8, 
        L0PP,   8, 
        L0VR,   8, 
        L0FD,   8, 
        L1SM,   8, 
        L1H0,   8, 
        L1H1,   8, 
        L1H2,   8, 
        L1H3,   8, 
        L1H4,   8, 
        L1H5,   8, 
        L1H6,   8, 
        L1H7,   8, 
        L1H8,   8, 
        L1PL,   8, 
        L1M0,   8, 
        L1M1,   8, 
        L1M2,   8, 
        L1M3,   8, 
        L1M4,   8, 
        L1M5,   8, 
        L1M6,   8, 
        L1M7,   8, 
        L1M8,   8, 
        L1M9,   8, 
        L1MA,   8, 
        L1MB,   8, 
        L1MC,   8, 
        L1MD,   8, 
        L1ME,   8, 
        L1MF,   8, 
        L1DI,   8, 
        L1BS,   8, 
        L1A0,   16, 
        L1A1,   16, 
        L1A2,   16, 
        L1A3,   16, 
        L1A4,   16, 
        L1A5,   16, 
        L1A6,   16, 
        L1A7,   16, 
        L1A8,   16, 
        L1A9,   16, 
        L1AA,   16, 
        L1AB,   16, 
        L1D0,   8, 
        L1D1,   8, 
        L1D2,   8, 
        L1D3,   8, 
        L1D4,   8, 
        L1D5,   8, 
        L1D6,   8, 
        L1D7,   8, 
        L1D8,   8, 
        L1D9,   8, 
        L1DA,   8, 
        L1DB,   8, 
        L1DV,   8, 
        L1CV,   8, 
        L1LU,   8, 
        L1NL,   8, 
        L1EE,   8, 
        L1VC,   8, 
        L1FS,   8, 
        L1LE,   8, 
        L1DG,   8, 
        L1CK,   32, 
        L1CL,   8, 
        L1PP,   8, 
        L1VR,   8, 
        L1FD,   8, 
        L2SM,   8, 
        L2H0,   8, 
        L2H1,   8, 
        L2H2,   8, 
        L2H3,   8, 
        L2H4,   8, 
        L2H5,   8, 
        L2H6,   8, 
        L2H7,   8, 
        L2H8,   8, 
        L2PL,   8, 
        L2M0,   8, 
        L2M1,   8, 
        L2M2,   8, 
        L2M3,   8, 
        L2M4,   8, 
        L2M5,   8, 
        L2M6,   8, 
        L2M7,   8, 
        L2M8,   8, 
        L2M9,   8, 
        L2MA,   8, 
        L2MB,   8, 
        L2MC,   8, 
        L2MD,   8, 
        L2ME,   8, 
        L2MF,   8, 
        L2DI,   8, 
        L2BS,   8, 
        L2A0,   16, 
        L2A1,   16, 
        L2A2,   16, 
        L2A3,   16, 
        L2A4,   16, 
        L2A5,   16, 
        L2A6,   16, 
        L2A7,   16, 
        L2A8,   16, 
        L2A9,   16, 
        L2AA,   16, 
        L2AB,   16, 
        L2D0,   8, 
        L2D1,   8, 
        L2D2,   8, 
        L2D3,   8, 
        L2D4,   8, 
        L2D5,   8, 
        L2D6,   8, 
        L2D7,   8, 
        L2D8,   8, 
        L2D9,   8, 
        L2DA,   8, 
        L2DB,   8, 
        L2DV,   8, 
        L2CV,   8, 
        L2LU,   8, 
        L2NL,   8, 
        L2EE,   8, 
        L2VC,   8, 
        L2FS,   8, 
        L2LE,   8, 
        L2DG,   8, 
        L2CK,   32, 
        L2CL,   8, 
        L2PP,   8, 
        L2VR,   8, 
        L2FD,   8, 
        L3SM,   8, 
        L3H0,   8, 
        L3H1,   8, 
        L3H2,   8, 
        L3H3,   8, 
        L3H4,   8, 
        L3H5,   8, 
        L3H6,   8, 
        L3H7,   8, 
        L3H8,   8, 
        L3PL,   8, 
        L3M0,   8, 
        L3M1,   8, 
        L3M2,   8, 
        L3M3,   8, 
        L3M4,   8, 
        L3M5,   8, 
        L3M6,   8, 
        L3M7,   8, 
        L3M8,   8, 
        L3M9,   8, 
        L3MA,   8, 
        L3MB,   8, 
        L3MC,   8, 
        L3MD,   8, 
        L3ME,   8, 
        L3MF,   8, 
        L3DI,   8, 
        L3BS,   8, 
        L3A0,   16, 
        L3A1,   16, 
        L3A2,   16, 
        L3A3,   16, 
        L3A4,   16, 
        L3A5,   16, 
        L3A6,   16, 
        L3A7,   16, 
        L3A8,   16, 
        L3A9,   16, 
        L3AA,   16, 
        L3AB,   16, 
        L3D0,   8, 
        L3D1,   8, 
        L3D2,   8, 
        L3D3,   8, 
        L3D4,   8, 
        L3D5,   8, 
        L3D6,   8, 
        L3D7,   8, 
        L3D8,   8, 
        L3D9,   8, 
        L3DA,   8, 
        L3DB,   8, 
        L3DV,   8, 
        L3CV,   8, 
        L3LU,   8, 
        L3NL,   8, 
        L3EE,   8, 
        L3VC,   8, 
        L3FS,   8, 
        L3LE,   8, 
        L3DG,   8, 
        L3CK,   32, 
        L3CL,   8, 
        L3PP,   8, 
        L3VR,   8, 
        L3FD,   8, 
        L4SM,   8, 
        L4H0,   8, 
        L4H1,   8, 
        L4H2,   8, 
        L4H3,   8, 
        L4H4,   8, 
        L4H5,   8, 
        L4H6,   8, 
        L4H7,   8, 
        L4H8,   8, 
        L4PL,   8, 
        L4M0,   8, 
        L4M1,   8, 
        L4M2,   8, 
        L4M3,   8, 
        L4M4,   8, 
        L4M5,   8, 
        L4M6,   8, 
        L4M7,   8, 
        L4M8,   8, 
        L4M9,   8, 
        L4MA,   8, 
        L4MB,   8, 
        L4MC,   8, 
        L4MD,   8, 
        L4ME,   8, 
        L4MF,   8, 
        L4DI,   8, 
        L4BS,   8, 
        L4A0,   16, 
        L4A1,   16, 
        L4A2,   16, 
        L4A3,   16, 
        L4A4,   16, 
        L4A5,   16, 
        L4A6,   16, 
        L4A7,   16, 
        L4A8,   16, 
        L4A9,   16, 
        L4AA,   16, 
        L4AB,   16, 
        L4D0,   8, 
        L4D1,   8, 
        L4D2,   8, 
        L4D3,   8, 
        L4D4,   8, 
        L4D5,   8, 
        L4D6,   8, 
        L4D7,   8, 
        L4D8,   8, 
        L4D9,   8, 
        L4DA,   8, 
        L4DB,   8, 
        L4DV,   8, 
        L4CV,   8, 
        L4LU,   8, 
        L4NL,   8, 
        L4EE,   8, 
        L4VC,   8, 
        L4FS,   8, 
        L4LE,   8, 
        L4DG,   8, 
        L4CK,   32, 
        L4CL,   8, 
        L4PP,   8, 
        L4VR,   8, 
        L4FD,   8, 
        L5SM,   8, 
        L5H0,   8, 
        L5H1,   8, 
        L5H2,   8, 
        L5H3,   8, 
        L5H4,   8, 
        L5H5,   8, 
        L5H6,   8, 
        L5H7,   8, 
        L5H8,   8, 
        L5PL,   8, 
        L5M0,   8, 
        L5M1,   8, 
        L5M2,   8, 
        L5M3,   8, 
        L5M4,   8, 
        L5M5,   8, 
        L5M6,   8, 
        L5M7,   8, 
        L5M8,   8, 
        L5M9,   8, 
        L5MA,   8, 
        L5MB,   8, 
        L5MC,   8, 
        L5MD,   8, 
        L5ME,   8, 
        L5MF,   8, 
        L5DI,   8, 
        L5BS,   8, 
        L5A0,   16, 
        L5A1,   16, 
        L5A2,   16, 
        L5A3,   16, 
        L5A4,   16, 
        L5A5,   16, 
        L5A6,   16, 
        L5A7,   16, 
        L5A8,   16, 
        L5A9,   16, 
        L5AA,   16, 
        L5AB,   16, 
        L5D0,   8, 
        L5D1,   8, 
        L5D2,   8, 
        L5D3,   8, 
        L5D4,   8, 
        L5D5,   8, 
        L5D6,   8, 
        L5D7,   8, 
        L5D8,   8, 
        L5D9,   8, 
        L5DA,   8, 
        L5DB,   8, 
        L5DV,   8, 
        L5CV,   8, 
        L5LU,   8, 
        L5NL,   8, 
        L5EE,   8, 
        L5VC,   8, 
        L5FS,   8, 
        L5LE,   8, 
        L5DG,   8, 
        L5CK,   32, 
        L5CL,   8, 
        L5PP,   8, 
        L5VR,   8, 
        L5FD,   8, 
        F0FM,   8, 
        F0MS,   8, 
        F0M0,   8, 
        F0M1,   8, 
        F0M2,   8, 
        F0M3,   8, 
        F0M4,   8, 
        F0M5,   8, 
        F0M6,   8, 
        F0M7,   8, 
        F0M8,   8, 
        F0M9,   8, 
        F0MA,   8, 
        F0MB,   8, 
        F0MC,   8, 
        F0MD,   8, 
        F0ME,   8, 
        F0MF,   8, 
        F0BS,   8, 
        F0AB,   16, 
        F0GP,   8, 
        F0GG,   16, 
        F0AV,   8, 
        F0IV,   8, 
        F0OM,   8, 
        F1FM,   8, 
        F1MS,   8, 
        F1M0,   8, 
        F1M1,   8, 
        F1M2,   8, 
        F1M3,   8, 
        F1M4,   8, 
        F1M5,   8, 
        F1M6,   8, 
        F1M7,   8, 
        F1M8,   8, 
        F1M9,   8, 
        F1MA,   8, 
        F1MB,   8, 
        F1MC,   8, 
        F1MD,   8, 
        F1ME,   8, 
        F1MF,   8, 
        F1BS,   8, 
        F1AB,   16, 
        F1GP,   8, 
        F1GG,   16, 
        F1AV,   8, 
        F1IV,   8, 
        F1OM,   8, 
        F2FM,   8, 
        F2MS,   8, 
        F2M0,   8, 
        F2M1,   8, 
        F2M2,   8, 
        F2M3,   8, 
        F2M4,   8, 
        F2M5,   8, 
        F2M6,   8, 
        F2M7,   8, 
        F2M8,   8, 
        F2M9,   8, 
        F2MA,   8, 
        F2MB,   8, 
        F2MC,   8, 
        F2MD,   8, 
        F2ME,   8, 
        F2MF,   8, 
        F2BS,   8, 
        F2AB,   16, 
        F2GP,   8, 
        F2GG,   16, 
        F2AV,   8, 
        F2IV,   8, 
        F2OM,   8, 
        F3FM,   8, 
        F3MS,   8, 
        F3M0,   8, 
        F3M1,   8, 
        F3M2,   8, 
        F3M3,   8, 
        F3M4,   8, 
        F3M5,   8, 
        F3M6,   8, 
        F3M7,   8, 
        F3M8,   8, 
        F3M9,   8, 
        F3MA,   8, 
        F3MB,   8, 
        F3MC,   8, 
        F3MD,   8, 
        F3ME,   8, 
        F3MF,   8, 
        F3BS,   8, 
        F3AB,   16, 
        F3GP,   8, 
        F3GG,   16, 
        F3AV,   8, 
        F3IV,   8, 
        F3OM,   8, 
        F4FM,   8, 
        F4MS,   8, 
        F4M0,   8, 
        F4M1,   8, 
        F4M2,   8, 
        F4M3,   8, 
        F4M4,   8, 
        F4M5,   8, 
        F4M6,   8, 
        F4M7,   8, 
        F4M8,   8, 
        F4M9,   8, 
        F4MA,   8, 
        F4MB,   8, 
        F4MC,   8, 
        F4MD,   8, 
        F4ME,   8, 
        F4MF,   8, 
        F4BS,   8, 
        F4AB,   16, 
        F4GP,   8, 
        F4GG,   16, 
        F4AV,   8, 
        F4IV,   8, 
        F4OM,   8, 
        F5FM,   8, 
        F5MS,   8, 
        F5M0,   8, 
        F5M1,   8, 
        F5M2,   8, 
        F5M3,   8, 
        F5M4,   8, 
        F5M5,   8, 
        F5M6,   8, 
        F5M7,   8, 
        F5M8,   8, 
        F5M9,   8, 
        F5MA,   8, 
        F5MB,   8, 
        F5MC,   8, 
        F5MD,   8, 
        F5ME,   8, 
        F5MF,   8, 
        F5BS,   8, 
        F5AB,   16, 
        F5GP,   8, 
        F5GG,   16, 
        F5AV,   8, 
        F5IV,   8, 
        F5OM,   8, 
        ECR1,   8, 
        I2SC,   8, 
        I2SI,   32, 
        I2SB,   8, 
        ODV0,   8, 
        ODV1,   8, 
        ODV2,   8, 
        ODV3,   8, 
        ODV4,   8, 
        ODV5,   8, 
        UBCB,   32, 
        WIFC,   8, 
        Offset (0x860), 
        ADPM,   32, 
        AG1L,   64, 
        AG1H,   64, 
        AG2L,   64, 
        AG2H,   64, 
        AG3L,   64, 
        AG3H,   64, 
        HEFE,   8, 
        XDCE,   8, 
        STXE,   8, 
        ST10,   8, 
        ST11,   8, 
        ST12,   8, 
        ST13,   8, 
        ST14,   8, 
        ST15,   8, 
        ST16,   8, 
        ST17,   8, 
        ST18,   8, 
        ST19,   8, 
        ENVM,   8, 
        DHSP,   16, 
        DSSP,   16, 
        DSTP,   8, 
        STDE,   8, 
        STRS,   8, 
        ST20,   8, 
        ST21,   8, 
        ST22,   8, 
        ST23,   8, 
        ST24,   8, 
        ST25,   8, 
        ST26,   8, 
        ST27,   8, 
        ST28,   8, 
        ST29,   8, 
        ST30,   8, 
        ST31,   8, 
        ST32,   8, 
        ST33,   8, 
        ST34,   8, 
        ST35,   8, 
        ST36,   8, 
        ST37,   8, 
        ST38,   8, 
        ST39,   8, 
        ST40,   8, 
        ST41,   8, 
        ST42,   8, 
        ST43,   8, 
        ST44,   8, 
        ST45,   8, 
        ST46,   8, 
        ST47,   8, 
        ST48,   8, 
        ST49,   8, 
        SD11,   8, 
        SD12,   8, 
        SD13,   8, 
        SD14,   8, 
        SD15,   8, 
        SD16,   8, 
        SD21,   8, 
        SD22,   8, 
        SD23,   8, 
        SD24,   8, 
        SD25,   8, 
        SD26,   8, 
        SD31,   8, 
        SD32,   8, 
        SD33,   8, 
        SD34,   8, 
        SD35,   8, 
        SD36,   8, 
        Offset (0x902), 
        SDAA,   8, 
        SDAB,   8, 
        BTSE,   8, 
        BTBR,   8, 
        BED2,   8, 
        BED3,   8, 
        BTLE,   8, 
        BTL2,   8, 
        BTLL,   8, 
        Offset (0x90D), 
        ATDV,   8, 
        COEM,   8, 
        RTVM,   8, 
        USTC,   8, 
        HEB1,   32, 
        BATP,   8, 
        TSDB,   8, 
        EPTU,   8, 
        Offset (0x919), 
        RBY1,   8, 
        RBY2,   8, 
        SCSS,   8, 
        NCTC,   8, 
        NCTI,   8, 
        NCTH,   8, 
        HSIO,   8, 
        ZPOD,   8, 
        RGBC,   8, 
        DPTC,   8, 
        SRSP,   32, 
        CEDS,   8, 
        EHK3,   8, 
        EHK4,   8, 
        EHK5,   8, 
        EHK6,   8, 
        EHK7,   8, 
        EHK8,   8, 
        VBVP,   8, 
        VBVD,   8, 
        VBHB,   8, 
        VBRL,   8, 
        SMSS,   8, 
        VBST,   8, 
        ADAS,   8, 
        PPBG,   32, 
        AEAB,   8, 
        AHDB,   8, 
        ELPM,   32, 
        ELPS,   32, 
        UCMS,   8, 
        UCG1,   32, 
        UCG2,   32, 
        UCG3,   32, 
        UCG4,   32, 
        UTCE,   8, 
        Offset (0x969), 
        PCHE,   8, 
        Offset (0x96D), 
        UDGF,   8, 
        UDUP,   8, 
        DBGF,   8, 
        DBUP,   8, 
        TTUP,   8, 
        TP1T,   8, 
        TP1P,   8, 
        TP1D,   8, 
        TP2T,   8, 
        TP2P,   8, 
        TP2D,   8, 
        TP3T,   8, 
        TP3P,   8, 
        TP3D,   8, 
        TP4T,   8, 
        TP4P,   8, 
        TP4D,   8, 
        TP5T,   8, 
        TP5P,   8, 
        TP5D,   8, 
        TP6T,   8, 
        TP6P,   8, 
        TP6D,   8, 
        STAS,   8, 
        WRTO,   8, 
        PRST,   32, 
        WPRP,   8, 
        PUIS,   8, 
        PSWP,   32, 
        RPNB,   8, 
        POME,   8, 
        PSW2,   32, 
        RPN2,   8, 
        WFCP,   32, 
        PFCP,   8, 
        WBRS,   32, 
        PBRS,   8, 
        WWKP,   32, 
        GPLP,   32, 
        GPLR,   32, 
        GPI1,   32, 
        TPP1,   32, 
        TPR1,   32, 
        PPDI,   8, 
        PPLI,   8, 
        PPLP,   8, 
        PPLR,   8, 
        PPI1,   8, 
        PPP1,   8, 
        PPR1,   8, 
        PSPE,   32, 
        PPSP,   8, 
        PSPR,   32, 
        PPSR,   8, 
        PSP2,   32, 
        PS2P,   8, 
        PSR2,   32, 
        SR2P,   8, 
        WLWK,   32, 
        WLRP,   8, 
        SATP,   32, 
        STPP,   8, 
        SSDP,   32, 
        SDPP,   8, 
        SSDR,   32, 
        SDRP,   8, 
        SD2P,   32, 
        SDP1,   8, 
        SD2R,   32, 
        SDR1,   8, 
        SD5P,   32, 
        SDP5,   8, 
        SD5R,   32, 
        SDR5,   8, 
        DG2P,   32, 
        DGP2,   8, 
        DG2R,   32, 
        DGR2,   8, 
        DGWP,   32, 
        SXI1,   8, 
        SXI2,   8, 
        SXP1,   8, 
        SXP2,   8, 
        TSD0,   8, 
        WCLK,   8, 
        CWEF,   8, 
        CECV,   32, 
        WWRP,   8, 
        GDOW,   8, 
        WAGE,   8, 
        AGA1,   8, 
        AGA2,   8, 
        AGA3,   8, 
        AGA4,   8, 
        AGA5,   8, 
        AGB1,   8, 
        AGB2,   8, 
        AGB3,   8, 
        AGB4,   8, 
        AGB5,   8, 
        SGMM,   8, 
        SG00,   8, 
        SG01,   8, 
        SG02,   8, 
        SG03,   8, 
        SG04,   8, 
        SG05,   8, 
        SG06,   8, 
        SG07,   8, 
        SG08,   8, 
        SG09,   8, 
        SG10,   8, 
        SG11,   8, 
        SG12,   8, 
        SG13,   8, 
        SG14,   8, 
        SG15,   8, 
        SG16,   8, 
        SG17,   8, 
        SG18,   8, 
        ACSD,   8, 
        I5BS,   8, 
        DGVR,   32, 
        LPMR,   32, 
        SG19,   8, 
        SG20,   8, 
        SG21,   8, 
        P1PE,   32, 
        P1PP,   8, 
        P1RE,   32, 
        P1RP,   8, 
        P1WP,   32, 
        PRP1,   8, 
        P2PE,   32, 
        P2PP,   8, 
        P2RE,   32, 
        P2RP,   8, 
        P2WP,   32, 
        PRP2,   8, 
        PSP3,   32, 
        PS3P,   8, 
        PSR3,   32, 
        SR3P,   8, 
        PSW3,   32, 
        RPN3,   8, 
        SD3P,   32, 
        SDP3,   8, 
        SD3R,   32, 
        SDR3,   8, 
        SD4P,   32, 
        SDP4,   8, 
        SD4R,   32, 
        SDR4,   8, 
        XSMI,   32, 
        DUWS,   8, 
        ST50,   8, 
        ST51,   8, 
        ST52,   8, 
        ST53,   8, 
        ST54,   8, 
        ST55,   8, 
        ST56,   8, 
        ST57,   8, 
        ST58,   8, 
        ST59,   8, 
        ST5A,   8, 
        ST5B,   8, 
        ST60,   8, 
        ST61,   8, 
        ST62,   8, 
        ST63,   8, 
        ST64,   8, 
        ST65,   8, 
        ST66,   8, 
        ST67,   8, 
        ST68,   8, 
        ST69,   8, 
        ST6A,   8, 
        ST6B,   8, 
        ST70,   8, 
        ST71,   8, 
        ST72,   8, 
        ST73,   8, 
        ST74,   8, 
        ST75,   8, 
        ST76,   8, 
        ST77,   8, 
        ST78,   8, 
        ST79,   8, 
        ST7A,   8, 
        ST7B,   8, 
        ST80,   8, 
        ST81,   8, 
        ST82,   8, 
        ST83,   8, 
        ST84,   8, 
        ST85,   8, 
        ST86,   8, 
        ST87,   8, 
        ST88,   8, 
        ST89,   8, 
        ST8A,   8, 
        ST8B,   8, 
        SD17,   8, 
        SD18,   8, 
        SD19,   8, 
        SD27,   8, 
        SD28,   8, 
        SD29,   8, 
        SD37,   8, 
        SD38,   8, 
        SD39,   8, 
        AGA6,   8, 
        AGA7,   8, 
        AGA8,   8, 
        AGA9,   8, 
        AGAA,   8, 
        AGAB,   8, 
        AGB6,   8, 
        AGB7,   8, 
        AGB8,   8, 
        AGB9,   8, 
        AGBA,   8, 
        AGBB,   8, 
        UHBS,   32, 
        AXSU,   8, 
        AXMU,   8, 
        AXSR,   8, 
        AXMR,   8, 
        CD10,   8, 
        CD11,   8, 
        CD12,   8, 
        CD13,   8, 
        CD14,   8, 
        CD15,   8, 
        CD16,   8, 
        CD17,   8, 
        CD18,   8, 
        CD19,   8, 
        CD1A,   8, 
        CD20,   8, 
        CD21,   8, 
        CD22,   8, 
        CD23,   8, 
        CD24,   8, 
        CD25,   8, 
        CD26,   8, 
        CD27,   8, 
        CD28,   8, 
        CD29,   8, 
        CD2A,   8, 
        CD30,   8, 
        CD31,   8, 
        CD32,   8, 
        CD33,   8, 
        CD34,   8, 
        CD35,   8, 
        CD36,   8, 
        CD37,   8, 
        CD38,   8, 
        CD39,   8, 
        CD3A,   8, 
        CD3B,   8, 
        CD3C,   8, 
        CD3D,   8, 
        CD3E,   8, 
        CD3F,   8, 
        CD40,   8, 
        CD41,   8, 
        CD42,   8, 
        CD43,   8, 
        CD44,   8, 
        CD45,   8, 
        CD46,   8, 
        CD47,   8, 
        CD48,   8, 
        CD49,   8, 
        CD4A,   8, 
        CD4B,   8, 
        CD4C,   8, 
        CD4D,   8, 
        CD4E,   8, 
        CD4F,   8, 
        CD50,   8, 
        CD51,   8, 
        CD52,   8, 
        CD53,   8, 
        CD54,   8, 
        CD55,   8, 
        CD56,   8, 
        CD57,   8, 
        CD58,   8, 
        CD59,   8, 
        CD5A,   8, 
        CD5B,   8, 
        CD5C,   8, 
        CD5D,   8, 
        CD5E,   8, 
        CD5F,   8, 
        CD60,   8, 
        CD61,   8, 
        CD62,   8, 
        CD63,   8, 
        CD64,   8, 
        CD65,   8, 
        CD66,   8, 
        CD67,   8, 
        CD68,   8, 
        CD69,   8, 
        CD6A,   8, 
        CD6B,   8, 
        CD6C,   8, 
        CD6D,   8, 
        CD6E,   8, 
        CD6F,   8, 
        CD70,   8, 
        CD71,   8, 
        WPFA,   32, 
        WPFB,   32, 
        WPFC,   32, 
        WPFD,   32, 
        L0LC,   8, 
        L1LC,   8, 
        L2LC,   8, 
        L3LC,   8, 
        L4LC,   8, 
        L5LC,   8, 
        POVP,   32, 
        PSG1,   32, 
        PSG2,   32, 
        PPOE,   32, 
        FND2,   8, 
        FND3,   8, 
        S6DE,   8, 
        WTSE,   8, 
        WTLE,   8, 
        BL01,   16, 
        BL02,   16, 
        BL03,   16, 
        BL04,   16, 
        BL05,   16, 
        BL06,   16, 
        BL07,   16, 
        BL08,   16, 
        BL09,   16, 
        BL10,   16, 
        BL11,   16, 
        BL12,   16, 
        BL13,   16, 
        BL14,   16, 
        BL15,   16, 
        BL16,   16, 
        CVFS,   8, 
        CUPN,   8, 
        DGBA,   64, 
        DGOP,   32, 
        TILE,   8, 
        TIS0,   8, 
        TS0X,   8, 
        TIS4,   8, 
        TIS5,   8, 
        SLEC,   8, 
        LEDU,   16, 
        TAPM,   8, 
        STD3,   8, 
        PXDC,   8, 
        PXAC,   8, 
        PXWC,   8, 
        PXUC,   8, 
        PXFD,   8, 
        Offset (0xB97), 
        WWEN,   8, 
        WFFD,   8, 
        TN2B,   16, 
        TB2R,   16, 
        TR2P,   16, 
        TB2F,   16, 
        TFDI,   16, 
        TBTG,   16, 
        TBTP,   16, 
        LSWP,   32, 
        U4CM,   8, 
        CMSK,   8, 
        LP5E,   8, 
        CLCN,   8, 
        CLSA,   8, 
        TP7T,   8, 
        TP7P,   8, 
        TP7D,   8, 
        TP8T,   8, 
        TP8P,   8, 
        TP8D,   8, 
        TP9T,   8, 
        TP9P,   8, 
        TP9D,   8, 
        TPAT,   8, 
        TPAP,   8, 
        TPAD,   8, 
        TP1U,   8, 
        TP2U,   8, 
        TP3U,   8, 
        TP4U,   8, 
        TP5U,   8, 
        TP6U,   8, 
        TP7U,   8, 
        TP8U,   8, 
        TP9U,   8, 
        TPAU,   8, 
        FVWP,   32, 
        FVRE,   32, 
        FVRP,   8, 
        FVPE,   32, 
        FVPP,   8, 
        FVSP,   8, 
        RPFV,   8, 
        DPIW,   8, 
        DPG1,   32, 
        UDRS,   8, 
        U4SE,   8, 
        L0FI,   8, 
        L1FI,   8, 
        L2FI,   8, 
        L3FI,   8, 
        L4FI,   8, 
        L5FI,   8, 
        SSH6,   16, 
        SSL6,   16, 
        SSD6,   16, 
        FMH6,   16, 
        FML6,   16, 
        FMD6,   16, 
        FPH6,   16, 
        FPL6,   16, 
        FPD6,   16, 
        HSH6,   16, 
        HSL6,   16, 
        HSD6,   16, 
        M0CC,   16, 
        M1CC,   16, 
        SSH7,   16, 
        SSL7,   16, 
        SSD7,   16, 
        FMH7,   16, 
        FML7,   16, 
        FMD7,   16, 
        FPH7,   16, 
        FPL7,   16, 
        FPD7,   16, 
        HSH7,   16, 
        HSL7,   16, 
        HSD7,   16, 
        M0CD,   16, 
        M1CD,   16, 
        TR2B,   16, 
        ZPDA,   32, 
        ZDPR,   32, 
        ZDPW,   32, 
        ZDPP,   8, 
        WSID,   16, 
        WSTO,   16, 
        HUAR,   8, 
        BLEC,   8, 
        BLPD,   8, 
        BLPI,   8, 
        WFRC,   32, 
        WFUC,   32, 
        UNI4,   32, 
        WFIC,   32, 
        R8DC,   8, 
        OMP1,   32, 
        OM1P,   8, 
        OMR1,   32, 
        MR1P,   8, 
        OMW1,   32, 
        RPO1,   8, 
        OMP2,   32, 
        OM2P,   8, 
        OMR2,   32, 
        MR2P,   8, 
        OMW2,   32, 
        RPO2,   8, 
        WCEN,   8, 
        R8DS,   8, 
        WLBI,   8, 
        WHBI,   8, 
        SDGN,   8, 
        SD41,   8, 
        SD42,   8, 
        SD43,   8, 
        SD44,   8, 
        SD45,   8, 
        SD46,   8, 
        SD47,   8, 
        SD48,   8, 
        SD49,   8, 
        SD51,   8, 
        SD52,   8, 
        SD53,   8, 
        SD54,   8, 
        SD55,   8, 
        SD56,   8, 
        SD57,   8, 
        SD58,   8, 
        SD59,   8, 
        SD61,   8, 
        SD62,   8, 
        SD63,   8, 
        SD64,   8, 
        SD65,   8, 
        SD66,   8, 
        SD67,   8, 
        SD68,   8, 
        SD69,   8, 
        SD71,   8, 
        SD72,   8, 
        SD73,   8, 
        SD74,   8, 
        SD75,   8, 
        SD76,   8, 
        SD77,   8, 
        SD78,   8, 
        SD79,   8, 
        SD81,   8, 
        SD82,   8, 
        SD83,   8, 
        SD84,   8, 
        SD85,   8, 
        SD86,   8, 
        SD87,   8, 
        SD88,   8, 
        SD89,   8, 
        R8WR,   8, 
        WTSV,   32, 
        EDMX,   32, 
        DBRL,   8, 
        DNID,   8, 
        DGD1,   32, 
        DGD2,   32, 
        DGD3,   32, 
        DGD4,   32, 
        DGD5,   32, 
        DGD6,   32, 
        DGD7,   32, 
        DGD8,   32, 
        DGD9,   32, 
        DGDA,   32, 
        DGDB,   32, 
        DGDC,   32, 
        DGDD,   32, 
        DGDE,   32, 
        DGDF,   32, 
        DGDX,   32, 
        DGDS,   8, 
        VTCM,   8, 
        HAES,   8
    }

    Scope (_SB)
    {
        Name (PD00, Package (0x2A)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR00, Package (0x48)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                One, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                One, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                One, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0A
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0A
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0A
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Device (PC00)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_SEG, Zero)  // _SEG: PCI Segment
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00 ())
                }

                Return (PD00 ())
            }

            Device (MC)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
                Field (HBUS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                    EPEN,   1, 
                        ,   11, 
                    EPBR,   20, 
                    Offset (0x48), 
                    MHEN,   1, 
                        ,   14, 
                    MHBR,   17, 
                    Offset (0x50), 
                    GCLK,   1, 
                    Offset (0x54), 
                    D0EN,   1, 
                    D1F2,   1, 
                    D1F1,   1, 
                    D1F0,   1, 
                        ,   9, 
                    D6F0,   1, 
                    Offset (0x60), 
                    PXEN,   1, 
                    PXSZ,   3, 
                        ,   22, 
                    PXBR,   6, 
                    Offset (0x68), 
                    DIEN,   1, 
                        ,   11, 
                    DIBR,   20, 
                    Offset (0x70), 
                        ,   20, 
                    MEBR,   12, 
                    Offset (0x80), 
                        ,   4, 
                    PM0H,   2, 
                    Offset (0x81), 
                    PM1L,   2, 
                        ,   2, 
                    PM1H,   2, 
                    Offset (0x82), 
                    PM2L,   2, 
                        ,   2, 
                    PM2H,   2, 
                    Offset (0x83), 
                    PM3L,   2, 
                        ,   2, 
                    PM3H,   2, 
                    Offset (0x84), 
                    PM4L,   2, 
                        ,   2, 
                    PM4H,   2, 
                    Offset (0x85), 
                    PM5L,   2, 
                        ,   2, 
                    PM5H,   2, 
                    Offset (0x86), 
                    PM6L,   2, 
                        ,   2, 
                    PM6H,   2, 
                    Offset (0x87), 
                    Offset (0xA8), 
                        ,   20, 
                    TUUD,   19, 
                    Offset (0xBC), 
                        ,   20, 
                    TLUD,   12, 
                    Offset (0xC8), 
                        ,   7, 
                    HTSE,   1
                }
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, _Y00)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xDFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xE0000000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000010000, // Range Minimum
                    0x000000000001FFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000010000, // Length
                    ,, _Y0F, AddressRangeMemory, TypeStatic)
            })
            Name (EP_B, Zero)
            Name (MH_B, Zero)
            Name (PC_B, Zero)
            Name (PC_L, Zero)
            Name (DM_B, Zero)
            Method (GEPB, 0, Serialized)
            {
                If ((EP_B == Zero))
                {
                    EP_B = (^MC.EPBR << 0x0C)
                }

                Return (EP_B) /* \_SB_.PC00.EP_B */
            }

            Method (GMHB, 0, Serialized)
            {
                If ((MH_B == Zero))
                {
                    MH_B = (^MC.MHBR << 0x0F)
                }

                Return (MH_B) /* \_SB_.PC00.MH_B */
            }

            Method (GPCB, 0, Serialized)
            {
                If ((PC_B == Zero))
                {
                    PC_B = (^MC.PXBR << 0x1A)
                }

                Return (PC_B) /* \_SB_.PC00.PC_B */
            }

            Method (PC2M, 1, Serialized)
            {
                Local0 = GPCB ()
                Local0 += ((Arg0 & 0x001F0000) >> One)
                Local0 += ((Arg0 & 0x07) << 0x0C)
                Return (Local0)
            }

            Method (GPCL, 0, Serialized)
            {
                If ((PC_L == Zero))
                {
                    If ((^MC.PXSZ < 0x03))
                    {
                        PC_L = (0x10000000 >> ^MC.PXSZ) /* \_SB_.PC00.MC__.PXSZ */
                    }
                    Else
                    {
                        PC_L = 0x10000000
                    }
                }

                Return (PC_L) /* \_SB_.PC00.PC_L */
            }

            Method (GDMB, 0, Serialized)
            {
                If ((DM_B == Zero))
                {
                    DM_B = (^MC.DIBR << 0x0C)
                }

                Return (DM_B) /* \_SB_.PC00.DM_B */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local0 = GPCL ()
                CreateWordField (BUF0, \_SB.PC00._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
                PBMX = ((Local0 >> 0x14) - 0x02)
                CreateWordField (BUF0, \_SB.PC00._Y00._LEN, PBLN)  // _LEN: Length
                PBLN = ((Local0 >> 0x14) - One)
                If (CondRefOf (\VMDE))
                {
                    If (((VMDE == One) && (PBMX > 0xE0)))
                    {
                        PBMX = 0xE0
                        PBLN = 0xE1
                    }
                }

                If (^MC.PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y01._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((^MC.PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y01._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (^MC.PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y02._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((^MC.PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y02._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (^MC.PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y03._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((^MC.PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y03._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (^MC.PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y04._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((^MC.PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y04._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (^MC.PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y05._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((^MC.PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y05._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (^MC.PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y06._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((^MC.PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y06._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (^MC.PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y07._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((^MC.PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y07._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (^MC.PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y08._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((^MC.PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y08._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (^MC.PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y09._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((^MC.PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y09._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (^MC.PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y0A._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((^MC.PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (^MC.PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y0B._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((^MC.PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (^MC.PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y0C._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((^MC.PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (^MC.PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y0D._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((^MC.PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PC00._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PC00._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PC00._Y0E._LEN, M1LN)  // _LEN: Length
                M1LN = M32L /* External reference */
                M1MN = M32B /* External reference */
                M1MX = ((M1MN + M1LN) - One)
                If ((M64L == Zero))
                {
                    CreateQWordField (BUF0, \_SB.PC00._Y0F._LEN, MSLN)  // _LEN: Length
                    MSLN = Zero
                }
                Else
                {
                    CreateQWordField (BUF0, \_SB.PC00._Y0F._LEN, M2LN)  // _LEN: Length
                    CreateQWordField (BUF0, \_SB.PC00._Y0F._MIN, M2MN)  // _MIN: Minimum Base Address
                    CreateQWordField (BUF0, \_SB.PC00._Y0F._MAX, M2MX)  // _MAX: Maximum Base Address
                    M2LN = M64L /* External reference */
                    M2MN = M64B /* External reference */
                    M2MX = ((M2MN + M2LN) - One)
                }

                Return (BUF0) /* \_SB_.PC00.BUF0 */
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (XCNT, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If ((Arg0 == GUID))
                {
                    SUPP = CDW2 /* \_SB_.PC00._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC00._OSC.CDW3 */
                    If (!NEXP)
                    {
                        CTRL &= 0xFFFFFFF8
                        CTRL &= 0xFFFFFFEF
                    }

                    If (CondRefOf (ITSP))
                    {
                        If (ITSP)
                        {
                            CTRL &= 0xFFFFFFF7
                        }
                    }

                    If (~(CDW1 & One))
                    {
                        OSCC = CTRL /* \_SB_.PC00.CTRL */
                        If (CondRefOf (SWAK))
                        {
                            SWAK (0xFFFF, Zero)
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC00.CTRL */
                    OSCC = CTRL /* \_SB_.PC00.CTRL */
                    Return (Local0)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Local0)
                }
            }

            Scope (\_SB.PC00)
            {
                Method (AR00, 0, NotSerialized)
                {
                    Return (^^AR00) /* \_SB_.AR00 */
                }

                Method (PD00, 0, NotSerialized)
                {
                    Return (^^PD00) /* \_SB_.PD00 */
                }

                Method (AR04, 0, NotSerialized)
                {
                    Return (^^AR04) /* \_SB_.AR04 */
                }

                Method (PD04, 0, NotSerialized)
                {
                    Return (^^PD04) /* \_SB_.PD04 */
                }

                Method (AR05, 0, NotSerialized)
                {
                    Return (^^AR05) /* \_SB_.AR05 */
                }

                Method (PD05, 0, NotSerialized)
                {
                    Return (^^PD05) /* \_SB_.PD05 */
                }

                Method (AR06, 0, NotSerialized)
                {
                    Return (^^AR06) /* \_SB_.AR06 */
                }

                Method (PD06, 0, NotSerialized)
                {
                    Return (^^PD06) /* \_SB_.PD06 */
                }

                Method (AR07, 0, NotSerialized)
                {
                    Return (^^AR07) /* \_SB_.AR07 */
                }

                Method (PD07, 0, NotSerialized)
                {
                    Return (^^PD07) /* \_SB_.PD07 */
                }

                Method (AR08, 0, NotSerialized)
                {
                    Return (^^AR08) /* \_SB_.AR08 */
                }

                Method (PD08, 0, NotSerialized)
                {
                    Return (^^PD08) /* \_SB_.PD08 */
                }

                Method (AR09, 0, NotSerialized)
                {
                    Return (^^AR09) /* \_SB_.AR09 */
                }

                Method (PD09, 0, NotSerialized)
                {
                    Return (^^PD09) /* \_SB_.PD09 */
                }

                Device (PEG0)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Local0 = 0x00060000
                        If (CondRefOf (\_SB.PC00.PEG0.CPRA))
                        {
                            Local0 = CPRA ()
                        }

                        Return (Local0)
                    }

                    Device (PEGP)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                Device (PEG1)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Local0 = 0x00010000
                        If (CondRefOf (\_SB.PC00.PEG1.CPRA))
                        {
                            Local0 = CPRA ()
                        }

                        Return (Local0)
                    }

                    Device (PEGP)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                Device (PEG2)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Local0 = 0x00010001
                        If (CondRefOf (\_SB.PC00.PEG2.CPRA))
                        {
                            Local0 = CPRA ()
                        }

                        Return (Local0)
                    }

                    Device (PEGP)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                If ((MPGN >= 0x04))
                {
                    Device (PEG3)
                    {
                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            Local0 = 0x00010002
                            If (CondRefOf (\_SB.PC00.PEG3.CPRA))
                            {
                                Local0 = CPRA ()
                            }

                            Return (Local0)
                        }

                        Device (PEGP)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }
                }

                Device (GFX0)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                }

                Device (TCPU)
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Name (_ADR, 0x00040000)  // _ADR: Address
                }

                Device (IPU0)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                }

                Device (GNA0)
                {
                    Name (_ADR, 0x00080000)  // _ADR: Address
                }
            }

            Scope (\)
            {
                Method (ADBG, 1, Serialized)
                {
                    If (CondRefOf (ODBG))
                    {
                        ODBG (Arg0)
                    }

                    Debug = Arg0
                    If (CondRefOf (MBGS))
                    {
                        ToHexString (Arg0, Local0)
                        MBGS (Local0)
                    }

                    If (CondRefOf (MDBG))
                    {
                        Return (MDBG (Arg0))
                    }

                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (AWAC)
        {
            Name (_HID, "ACPI000E" /* Time and Alarm Device */)  // _HID: Hardware ID
            Name (WAST, Zero)
            Name (WTTR, Zero)
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x72, 0x04))
            }

            Mutex (RTCL, 0x00)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((STAS == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_GCP, 0, NotSerialized)  // _GCP: Get Capabilities
            {
                Return (0xB7)
            }

            OperationRegion (RTCM, SystemCMOS, Zero, 0x3F)
            Field (RTCM, ByteAcc, Lock, Preserve)
            {
                SEC,    8, 
                Offset (0x02), 
                MIN,    8, 
                Offset (0x04), 
                HOR,    8, 
                Offset (0x07), 
                DAY,    8, 
                MON,    8, 
                YEAR,   8, 
                REGA,   8, 
                Offset (0x32), 
                CNTY,   8
            }

            Method (_GRT, 0, Serialized)  // _GRT: Get Real Time
            {
                Name (BUFF, Buffer (0x10) {})
                CreateWordField (BUFF, Zero, Y)
                CreateByteField (BUFF, 0x02, M)
                CreateByteField (BUFF, 0x03, D)
                CreateByteField (BUFF, 0x04, H)
                CreateByteField (BUFF, 0x05, MIN1)
                CreateByteField (BUFF, 0x06, S)
                CreateByteField (BUFF, 0x07, V)
                CreateWordField (BUFF, 0x0A, TZ)
                CreateByteField (BUFF, 0x0C, DL)
                Acquire (RTCL, 0xFFFF)
                Local1 = Zero
                Name (TOUT, 0x000186A0)
                TOUT /= 0x0A
                While (((REGA && 0x80) && (Local1 < TOUT)))
                {
                    Stall (0x0A)
                    Local1 += 0x0A
                }

                If ((Local1 >= TOUT))
                {
                    ADBG ("_GRT timeout fail")
                }

                FromBCD (YEAR, Local5)
                FromBCD (CNTY, Local6)
                Y = ((Local6 * 0x64) + Local5)
                FromBCD (MON, M) /* \_SB_.AWAC._GRT.M___ */
                FromBCD (DAY, D) /* \_SB_.AWAC._GRT.D___ */
                FromBCD (HOR, H) /* \_SB_.AWAC._GRT.H___ */
                FromBCD (MIN, MIN1) /* \_SB_.AWAC._GRT.MIN1 */
                FromBCD (SEC, S) /* \_SB_.AWAC._GRT.S___ */
                Release (RTCL)
                TZ = 0x07FF
                DL = Zero
                V = One
                Return (BUFF) /* \_SB_.AWAC._GRT.BUFF */
            }

            Method (_SRT, 1, NotSerialized)  // _SRT: Set Real Time
            {
                CreateWordField (Arg0, Zero, Y)
                CreateByteField (Arg0, 0x02, M)
                CreateByteField (Arg0, 0x03, D)
                CreateByteField (Arg0, 0x04, H)
                CreateByteField (Arg0, 0x05, MIN1)
                CreateByteField (Arg0, 0x06, S)
                Acquire (RTCL, 0xFFFF)
                Local1 = Zero
                Name (TOUT, 0x000186A0)
                TOUT /= 0x0A
                While (((REGA && 0x80) && (Local1 < TOUT)))
                {
                    Stall (0x0A)
                    Local1 += 0x0A
                }

                If ((Local1 >= TOUT))
                {
                    ADBG ("_SRT timeout fail")
                    Release (RTCL)
                    Return (0xFFFFFFFF)
                }

                Divide (Y, 0x64, Local5, Local4)
                ToBCD (Local4, CNTY) /* \_SB_.AWAC.CNTY */
                ToBCD (Local5, YEAR) /* \_SB_.AWAC.YEAR */
                ToBCD (M, MON) /* \_SB_.AWAC.MON_ */
                ToBCD (D, DAY) /* \_SB_.AWAC.DAY_ */
                ToBCD (H, HOR) /* \_SB_.AWAC.HOR_ */
                ToBCD (MIN1, MIN) /* \_SB_.AWAC.MIN_ */
                ToBCD (S, SEC) /* \_SB_.AWAC.SEC_ */
                Release (RTCL)
                Return (Zero)
            }

            Method (_GWS, 1, Serialized)  // _GWS: Get Wake Status
            {
                Local0 = Zero
                If ((Arg0 == Zero))
                {
                    If (((ACWA == 0xFFFFFFFF) && (One & WTTR)))
                    {
                        Local0 |= One
                        WTTR ^= One /* \_SB_.AWAC.WTTR */
                    }
                }
                ElseIf (((DCWA == 0xFFFFFFFF) && (0x02 & WTTR)))
                {
                    Local0 |= One
                    WTTR ^= 0x02 /* \_SB_.AWAC.WTTR */
                }

                If (WAST)
                {
                    Local0 |= 0x02
                    WAST = Zero
                }

                Return (Local0)
            }

            Method (_CWS, 1, NotSerialized)  // _CWS: Clear Wake Alarm Status
            {
                Return (Zero)
            }

            Method (_STP, 2, NotSerialized)  // _STP: Set Expired Timer Wake Policy
            {
                If ((Arg0 == Zero))
                {
                    ACET = Arg1
                }
                Else
                {
                    DCET = Arg1
                }

                Return (Zero)
            }

            Method (_STV, 2, Serialized)  // _STV: Set Timer Value
            {
                If ((Arg0 == Zero))
                {
                    ACWA = Arg1
                    WTTR |= One /* \_SB_.AWAC.WTTR */
                }
                Else
                {
                    DCWA = Arg1
                    WTTR |= 0x02 /* \_SB_.AWAC.WTTR */
                }

                Return (Zero)
            }

            Method (_TIP, 1, NotSerialized)  // _TIP: Expired Timer Wake Policy
            {
                If ((Arg0 == Zero))
                {
                    Return (ACET) /* \ACET */
                }
                Else
                {
                    Return (DCET) /* \DCET */
                }
            }

            Method (_TIV, 1, NotSerialized)  // _TIV: Timer Values
            {
                If ((Arg0 == Zero))
                {
                    Return (ACWA) /* \ACWA */
                }
                Else
                {
                    Return (DCWA) /* \DCWA */
                }
            }
        }
    }

    Scope (\)
    {
        Method (ASRT, 2, NotSerialized)
        {
            Local1 = (Arg0 & 0xFF)
            While (One)
            {
                Local0 = 0x09
                P8XH (Zero, Local1)
                While ((Local0 > Zero))
                {
                    P8XH (One, Local0)
                    Local0--
                    Local2 = 0x2710
                    While ((Local2 > Zero))
                    {
                        Stall (0x64)
                        Local2--
                    }
                }

                P8XH (Zero, 0xB6)
                P8XH (One, 0xAD)
                Sleep (0xEA60)
            }
        }
    }

    If ((ECR1 == One))
    {
        Scope (_SB.PC00)
        {
            Name (PCIG, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */)
            Method (PCID, 4, Serialized)
            {
                If ((Arg0 == PCIG))
                {
                    If ((Arg1 >= 0x03))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0x01, 0x03                                       // ..
                            })
                        }

                        If ((Arg2 == 0x08))
                        {
                            Return (One)
                        }

                        If ((Arg2 == 0x09))
                        {
                            Return (Package (0x05)
                            {
                                0xC350, 
                                Ones, 
                                Ones, 
                                0xC350, 
                                Ones
                            })
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (PCIC, 1, Serialized)
        {
            If ((ECR1 == One))
            {
                If ((Arg0 == PCIG))
                {
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (IICB, 2, Serialized)
        {
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Name (IIC0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, _Y10, Exclusive,
                            )
                    })
                    CreateWordField (IIC0, \_SB.PC00.IICB._Y10._ADR, DAD0)  // _ADR: Address
                    DAD0 = Arg0
                    Return (IIC0) /* \_SB_.PC00.IICB.IIC0 */
                }
                Case (One)
                {
                    Name (IIC1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, _Y11, Exclusive,
                            )
                    })
                    CreateWordField (IIC1, \_SB.PC00.IICB._Y11._ADR, DAD1)  // _ADR: Address
                    DAD1 = Arg0
                    Return (IIC1) /* \_SB_.PC00.IICB.IIC1 */
                }
                Case (0x02)
                {
                    Name (IIC2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, _Y12, Exclusive,
                            )
                    })
                    CreateWordField (IIC2, \_SB.PC00.IICB._Y12._ADR, DAD2)  // _ADR: Address
                    DAD2 = Arg0
                    Return (IIC2) /* \_SB_.PC00.IICB.IIC2 */
                }
                Case (0x03)
                {
                    Name (IIC3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, _Y13, Exclusive,
                            )
                    })
                    CreateWordField (IIC3, \_SB.PC00.IICB._Y13._ADR, DAD3)  // _ADR: Address
                    DAD3 = Arg0
                    Return (IIC3) /* \_SB_.PC00.IICB.IIC3 */
                }
                Case (0x04)
                {
                    Name (IIC4, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C4",
                            0x00, ResourceConsumer, _Y14, Exclusive,
                            )
                    })
                    CreateWordField (IIC4, \_SB.PC00.IICB._Y14._ADR, DAD4)  // _ADR: Address
                    DAD4 = Arg0
                    Return (IIC4) /* \_SB_.PC00.IICB.IIC4 */
                }
                Case (0x05)
                {
                    Name (IIC5, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C5",
                            0x00, ResourceConsumer, _Y15, Exclusive,
                            )
                    })
                    CreateWordField (IIC5, \_SB.PC00.IICB._Y15._ADR, DAD5)  // _ADR: Address
                    DAD5 = Arg0
                    Return (IIC5) /* \_SB_.PC00.IICB.IIC5 */
                }
                Case (0x06)
                {
                    Name (IIC6, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C6",
                            0x00, ResourceConsumer, _Y16, Exclusive,
                            )
                    })
                    CreateWordField (IIC6, \_SB.PC00.IICB._Y16._ADR, DAD6)  // _ADR: Address
                    DAD6 = Arg0
                    Return (IIC6) /* \_SB_.PC00.IICB.IIC6 */
                }
                Case (0x07)
                {
                    Name (IIC7, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C7",
                            0x00, ResourceConsumer, _Y17, Exclusive,
                            )
                    })
                    CreateWordField (IIC7, \_SB.PC00.IICB._Y17._ADR, DAD7)  // _ADR: Address
                    DAD7 = Arg0
                    Return (IIC7) /* \_SB_.PC00.IICB.IIC7 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (VIIC, 2, Serialized)
        {
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Name (VI00, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS07.VIC0",
                            0x00, ResourceConsumer, _Y19, Exclusive,
                            )
                    })
                    Name (VI01, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS06.VIC0",
                            0x00, ResourceConsumer, _Y18, Exclusive,
                            )
                    })
                    Name (VI02, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS08.VIC0",
                            0x00, ResourceConsumer, _Y1A, Exclusive,
                            )
                    })
                    Name (VI03, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS03.VIC0",
                            0x00, ResourceConsumer, _Y1B, Exclusive,
                            )
                    })
                    If ((CUPN == 0x06))
                    {
                        CreateWordField (VI01, \_SB.PC00.VIIC._Y18._ADR, DAQ0)  // _ADR: Address
                        DAQ0 = Arg0
                        Return (VI01) /* \_SB_.PC00.VIIC.VI01 */
                    }
                    ElseIf ((CUPN == 0x07))
                    {
                        CreateWordField (VI00, \_SB.PC00.VIIC._Y19._ADR, DAR0)  // _ADR: Address
                        DAR0 = Arg0
                        Return (VI00) /* \_SB_.PC00.VIIC.VI00 */
                    }
                    ElseIf ((CUPN == 0x08))
                    {
                        CreateWordField (VI02, \_SB.PC00.VIIC._Y1A._ADR, DAS0)  // _ADR: Address
                        DAS0 = Arg0
                        Return (VI02) /* \_SB_.PC00.VIIC.VI02 */
                    }
                    ElseIf ((CUPN == 0x03))
                    {
                        CreateWordField (VI03, \_SB.PC00.VIIC._Y1B._ADR, DAT0)  // _ADR: Address
                        DAT0 = Arg0
                        Return (VI03) /* \_SB_.PC00.VIIC.VI03 */
                    }

                    Return (ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HSXX.VIC0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }
                Case (One)
                {
                    Name (VI10, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS07.VIC1",
                            0x00, ResourceConsumer, _Y1D, Exclusive,
                            )
                    })
                    Name (VI11, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS06.VIC1",
                            0x00, ResourceConsumer, _Y1C, Exclusive,
                            )
                    })
                    Name (VI12, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS08.VIC1",
                            0x00, ResourceConsumer, _Y1E, Exclusive,
                            )
                    })
                    Name (VI13, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS03.VIC1",
                            0x00, ResourceConsumer, _Y1F, Exclusive,
                            )
                    })
                    If ((CUPN == 0x06))
                    {
                        CreateWordField (VI11, \_SB.PC00.VIIC._Y1C._ADR, DAQ1)  // _ADR: Address
                        DAQ1 = Arg0
                        Return (VI11) /* \_SB_.PC00.VIIC.VI11 */
                    }
                    ElseIf ((CUPN == 0x07))
                    {
                        CreateWordField (VI10, \_SB.PC00.VIIC._Y1D._ADR, DAR1)  // _ADR: Address
                        DAR1 = Arg0
                        Return (VI10) /* \_SB_.PC00.VIIC.VI10 */
                    }
                    ElseIf ((CUPN == 0x08))
                    {
                        CreateWordField (VI12, \_SB.PC00.VIIC._Y1E._ADR, DAS1)  // _ADR: Address
                        DAS1 = Arg0
                        Return (VI12) /* \_SB_.PC00.VIIC.VI12 */
                    }
                    ElseIf ((CUPN == 0x03))
                    {
                        CreateWordField (VI13, \_SB.PC00.VIIC._Y1F._ADR, DAT1)  // _ADR: Address
                        DAT1 = Arg0
                        Return (VI13) /* \_SB_.PC00.VIIC.VI13 */
                    }

                    Return (ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HSXX.VIC1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }
                Default
                {
                    Return (ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HSXX.VICX",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }

            }
        }

        Method (INTB, 3, Serialized)
        {
            Name (INTR, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y20)
                {
                    0x00000000,
                }
            })
            CreateDWordField (INTR, \_SB.PC00.INTB._Y20._INT, NUMI)  // _INT: Interrupts
            NUMI = INUM (Arg0)
            CreateBitField (INTR, \_SB.PC00.INTB._Y20._HE, LEVI)  // _HE_: High-Edge
            LEVI = Arg1
            CreateBitField (INTR, \_SB.PC00.INTB._Y20._LL, ACTI)  // _LL_: Low Level
            ACTI = Arg2
            Return (INTR) /* \_SB_.PC00.INTB.INTR */
        }
    }

    Name (PNVB, 0x936C6018)
    Name (PNVL, 0x0371)
    OperationRegion (PNVA, SystemMemory, PNVB, PNVL)
    Field (PNVA, AnyAcc, Lock, Preserve)
    {
        PCHS,   16, 
        PCHG,   16, 
        PSTP,   16, 
        RPA1,   32, 
        RPA2,   32, 
        RPA3,   32, 
        RPA4,   32, 
        RPA5,   32, 
        RPA6,   32, 
        RPA7,   32, 
        RPA8,   32, 
        RPA9,   32, 
        RPAA,   32, 
        RPAB,   32, 
        RPAC,   32, 
        RPAD,   32, 
        RPAE,   32, 
        RPAF,   32, 
        RPAG,   32, 
        RPAH,   32, 
        RPAI,   32, 
        RPAJ,   32, 
        RPAK,   32, 
        RPAL,   32, 
        RPAM,   32, 
        RPAN,   32, 
        RPAO,   32, 
        RPAP,   32, 
        RPAQ,   32, 
        RPAR,   32, 
        RPAS,   32, 
        NHLA,   64, 
        NHLL,   32, 
        ADFM,   32, 
        SWQ0,   8, 
        SWQ1,   8, 
        SWQ2,   8, 
        SWQ3,   8, 
        ACS0,   8, 
        ACS1,   8, 
        ACS2,   8, 
        ACS3,   8, 
        DAI0,   8, 
        DAI1,   8, 
        DAI2,   8, 
        DAI3,   8, 
        DOD0,   8, 
        DOD1,   8, 
        DOD2,   8, 
        DOD3,   8, 
        SWMC,   8, 
        XTAL,   32, 
        AFDF,   8, 
        SBRG,   32, 
        GEI0,   8, 
        GEI1,   8, 
        GEI2,   8, 
        GED0,   8, 
        GED1,   8, 
        GED2,   8, 
        PML1,   16, 
        PML2,   16, 
        PML3,   16, 
        PML4,   16, 
        PML5,   16, 
        PML6,   16, 
        PML7,   16, 
        PML8,   16, 
        PML9,   16, 
        PMLA,   16, 
        PMLB,   16, 
        PMLC,   16, 
        PMLD,   16, 
        PMLE,   16, 
        PMLF,   16, 
        PMLG,   16, 
        PMLH,   16, 
        PMLI,   16, 
        PMLJ,   16, 
        PMLK,   16, 
        PMLL,   16, 
        PMLM,   16, 
        PMLN,   16, 
        PMLO,   16, 
        PMLP,   16, 
        PMLQ,   16, 
        PMLR,   16, 
        PMLS,   16, 
        PNL1,   16, 
        PNL2,   16, 
        PNL3,   16, 
        PNL4,   16, 
        PNL5,   16, 
        PNL6,   16, 
        PNL7,   16, 
        PNL8,   16, 
        PNL9,   16, 
        PNLA,   16, 
        PNLB,   16, 
        PNLC,   16, 
        PNLD,   16, 
        PNLE,   16, 
        PNLF,   16, 
        PNLG,   16, 
        PNLH,   16, 
        PNLI,   16, 
        PNLJ,   16, 
        PNLK,   16, 
        PNLL,   16, 
        PNLM,   16, 
        PNLN,   16, 
        PNLO,   16, 
        PNLP,   16, 
        PNLQ,   16, 
        PNLR,   16, 
        PNLS,   16, 
        XHPC,   8, 
        XRPC,   8, 
        XSPC,   8, 
        XSPA,   8, 
        HPTB,   32, 
        HPTE,   8, 
        SM00,   8, 
        SM01,   8, 
        SM02,   8, 
        SM03,   8, 
        SM04,   8, 
        SM05,   8, 
        SM06,   8, 
        SC00,   64, 
        SC01,   64, 
        SC02,   64, 
        SC03,   64, 
        SC04,   64, 
        SC05,   64, 
        SC06,   64, 
        IM00,   8, 
        IM01,   8, 
        IM02,   8, 
        IM03,   8, 
        IM04,   8, 
        IM05,   8, 
        IM06,   8, 
        IM07,   8, 
        IC00,   64, 
        IC01,   64, 
        IC02,   64, 
        IC03,   64, 
        IC04,   64, 
        IC05,   64, 
        IC06,   64, 
        IC07,   64, 
        UM00,   8, 
        UM01,   8, 
        UM02,   8, 
        UM03,   8, 
        UM04,   8, 
        UM05,   8, 
        UM06,   8, 
        UC00,   64, 
        UC01,   64, 
        UC02,   64, 
        UC03,   64, 
        UC04,   64, 
        UC05,   64, 
        UC06,   64, 
        UD00,   8, 
        UD01,   8, 
        UD02,   8, 
        UD03,   8, 
        UD04,   8, 
        UD05,   8, 
        UD06,   8, 
        UP00,   8, 
        UP01,   8, 
        UP02,   8, 
        UP03,   8, 
        UP04,   8, 
        UP05,   8, 
        UP06,   8, 
        UI00,   8, 
        UI01,   8, 
        UI02,   8, 
        UI03,   8, 
        UI04,   8, 
        UI05,   8, 
        UI06,   8, 
        SGIR,   8, 
        GPHD,   8, 
        NIT1,   8, 
        NIT2,   8, 
        NIT3,   8, 
        NPM1,   8, 
        NPM2,   8, 
        NPM3,   8, 
        NPC1,   8, 
        NPC2,   8, 
        NPC3,   8, 
        NL11,   16, 
        NL12,   16, 
        NL13,   16, 
        ND21,   8, 
        ND22,   8, 
        ND23,   8, 
        ND11,   32, 
        ND12,   32, 
        ND13,   32, 
        NLR1,   16, 
        NLR2,   16, 
        NLR3,   16, 
        NLD1,   32, 
        NLD2,   32, 
        NLD3,   32, 
        NEA1,   16, 
        NEA2,   16, 
        NEA3,   16, 
        NEB1,   16, 
        NEB2,   16, 
        NEB3,   16, 
        NEC1,   16, 
        NEC2,   16, 
        NEC3,   16, 
        NRA1,   16, 
        NRA2,   16, 
        NRA3,   16, 
        NMB1,   32, 
        NMB2,   32, 
        NMB3,   32, 
        NMV1,   32, 
        NMV2,   32, 
        NMV3,   32, 
        NPB1,   32, 
        NPB2,   32, 
        NPB3,   32, 
        NPV1,   32, 
        NPV2,   32, 
        NPV3,   32, 
        NRP1,   32, 
        NRP2,   32, 
        NRP3,   32, 
        EMH4,   8, 
        EMDS,   8, 
        CSKU,   8, 
        ITA0,   16, 
        ITA1,   16, 
        ITA2,   16, 
        ITA3,   16, 
        ITS0,   8, 
        ITS1,   8, 
        ITS2,   8, 
        ITS3,   8, 
        PMBS,   16, 
        PWRM,   32, 
        CNVI,   8, 
        CBTC,   8, 
        CBTA,   8, 
        CVPR,   8, 
        CRFI,   8, 
        CRFP,   8, 
        PTHM,   8, 
        PSON,   8, 
        LTR1,   8, 
        LTR2,   8, 
        LTR3,   8, 
        LTR4,   8, 
        LTR5,   8, 
        LTR6,   8, 
        LTR7,   8, 
        LTR8,   8, 
        LTR9,   8, 
        LTRA,   8, 
        LTRB,   8, 
        LTRC,   8, 
        LTRD,   8, 
        LTRE,   8, 
        LTRF,   8, 
        LTRG,   8, 
        LTRH,   8, 
        LTRI,   8, 
        LTRJ,   8, 
        LTRK,   8, 
        LTRL,   8, 
        LTRM,   8, 
        LTRN,   8, 
        LTRO,   8, 
        LTRP,   8, 
        LTRQ,   8, 
        LTRR,   8, 
        LTRS,   8, 
        GBES,   8, 
        PPDS,   32, 
        EMCE,   8, 
        SDCE,   8, 
        TGEA,   8, 
        TGEB,   8, 
        CR00,   8, 
        CR01,   8, 
        CR02,   8, 
        CR03,   8, 
        CR04,   8, 
        CR05,   8, 
        CR06,   8, 
        CR07,   8, 
        CR08,   8, 
        CR09,   8, 
        CR10,   8, 
        CR11,   8, 
        CR12,   8, 
        CR13,   8, 
        CR14,   8, 
        CR15,   8, 
        CR16,   8, 
        CR17,   8, 
        TCOB,   16, 
        ICKP,   16, 
        PCNV,   16, 
        HBSL,   32, 
        PU2C,   8, 
        PU3C,   8, 
        SPPR,   8, 
        IPCC,   8, 
        CQ00,   8, 
        CQ01,   8, 
        CQ02,   8, 
        CQ03,   8, 
        CQ04,   8, 
        CQ05,   8, 
        CQ06,   8, 
        CQ07,   8, 
        CQ08,   8, 
        CQ09,   8, 
        CQ10,   8, 
        CQ11,   8, 
        CQ12,   8, 
        CQ13,   8, 
        CQ14,   8, 
        CQ15,   8, 
        CQ16,   8, 
        CQ17,   8, 
        TIN0,   32, 
        TIN1,   32, 
        TMD0,   16, 
        TMD1,   16, 
        UF0E,   8, 
        UF1E,   8, 
        UAOE,   8, 
        T010,   32, 
        T011,   32, 
        T020,   8, 
        T021,   8, 
        T030,   32, 
        T031,   32, 
        T040,   32, 
        T041,   32, 
        T050,   32, 
        T051,   32, 
        T060,   32, 
        T061,   32, 
        T070,   32, 
        T071,   32, 
        T080,   32, 
        T081,   32, 
        T090,   32, 
        T091,   32, 
        T0A0,   32, 
        T0A1,   32, 
        T0B0,   32, 
        T0B1,   32, 
        T0C0,   32, 
        T0C1,   32, 
        T0D0,   32, 
        T0D1,   32, 
        HBCL,   32, 
        HBPL,   32, 
        AL6D,   32
    }

    Scope (_SB)
    {
        Method (PSD3, 1, Serialized)
        {
            Local0 = Zero
            If (((SIME == One) || !IMPS ()))
            {
                Return (Zero)
            }

            Switch ((Zero + Arg0--))
            {
                Case (Zero)
                {
                    RAA0 = One
                    While (((APA0 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (One)
                {
                    RAA1 = One
                    While (((APA1 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x02)
                {
                    RAA2 = One
                    While (((APA2 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x03)
                {
                    RAA3 = One
                    While (((APA3 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x04)
                {
                    RPB0 = One
                    While (((APB0 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x05)
                {
                    RPB1 = One
                    While (((APB1 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x06)
                {
                    RPB2 = One
                    While (((APB2 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x07)
                {
                    RPB3 = One
                    While (((APB3 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x08)
                {
                    RPC0 = One
                    While (((APC0 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x09)
                {
                    RPC1 = One
                    While (((APC1 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0A)
                {
                    RPC2 = One
                    While (((APC2 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0B)
                {
                    RPC3 = One
                    While (((APC3 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0C)
                {
                    RPD0 = One
                    While (((APD0 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0D)
                {
                    RPD1 = One
                    While (((APD1 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0E)
                {
                    RPD2 = One
                    While (((APD2 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0F)
                {
                    RPD3 = One
                    While (((APD3 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x10)
                {
                    RPE0 = One
                    While (((APE0 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x11)
                {
                    RPE1 = One
                    While (((APE1 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x12)
                {
                    RPE2 = One
                    While (((APE2 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x13)
                {
                    RPE3 = One
                    While (((APE3 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }

            }

            If ((Local0 >= 0x2710))
            {
                ADBG ("Error: Timeout occurred")
            }
        }

        Method (PSD0, 1, Serialized)
        {
            Local0 = Zero
            If (((SIME == One) || !IMPS ()))
            {
                Return (Zero)
            }

            Switch ((Zero + Arg0--))
            {
                Case (Zero)
                {
                    RAA0 = Zero
                    While (((APA0 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (One)
                {
                    RAA1 = Zero
                    While (((APA1 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x02)
                {
                    RAA2 = Zero
                    While (((APA2 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x03)
                {
                    RAA3 = Zero
                    While (((APA3 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x04)
                {
                    RPB0 = Zero
                    While (((APB0 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x05)
                {
                    RPB1 = Zero
                    While (((APB1 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x06)
                {
                    RPB2 = Zero
                    While (((APB2 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x07)
                {
                    RPB3 = Zero
                    While (((APB3 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x08)
                {
                    RPC0 = Zero
                    While (((APC0 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x09)
                {
                    RPC1 = Zero
                    While (((APC1 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0A)
                {
                    RPC2 = Zero
                    While (((APC2 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0B)
                {
                    RPC3 = Zero
                    While (((APC3 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0C)
                {
                    RPD0 = Zero
                    While (((APD0 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0D)
                {
                    RPD1 = Zero
                    While (((APD1 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0E)
                {
                    RPD2 = Zero
                    While (((APD2 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0F)
                {
                    RPD3 = Zero
                    While (((APD3 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x10)
                {
                    RPE0 = Zero
                    While (((APE0 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x11)
                {
                    RPE1 = Zero
                    While (((APE1 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x12)
                {
                    RPE2 = Zero
                    While (((APE2 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x13)
                {
                    RPE3 = Zero
                    While (((APE3 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }

            }

            If ((Local0 >= 0x2710))
            {
                ADBG ("Error: Timeout occurred")
            }
        }

        Method (CSD3, 1, Serialized)
        {
            Local0 = Zero
            If (((SIME == One) || !IMPS ()))
            {
                Return (Zero)
            }

            Switch (ToInteger (Arg0))
            {
                Case (0x14)
                {
                    RSAT = One
                    While (((ASAT == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x15)
                {
                    RGBE = One
                    While (((AGBE == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x16)
                {
                    RXHC = One
                    While (((AXHC == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x17)
                {
                    RXDC = One
                    While (((AXDC == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x18)
                {
                    RUFS = One
                    While (((AUFS == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }

            }

            If ((Local0 >= 0x2710))
            {
                ADBG ("Error: Timeout occurred")
            }
        }

        Method (CSD0, 1, Serialized)
        {
            Local0 = Zero
            If (((SIME == One) || !IMPS ()))
            {
                Return (Zero)
            }

            Switch (ToInteger (Arg0))
            {
                Case (0x14)
                {
                    RSAT = Zero
                    While (((ASAT == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x15)
                {
                    RGBE = Zero
                    While (((AGBE == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x16)
                {
                    RXHC = Zero
                    While (((AXHC == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x17)
                {
                    RXDC = Zero
                    While (((AXDC == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x18)
                {
                    RUFS = Zero
                    While (((AUFS == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }

            }

            If ((Local0 >= 0x2710))
            {
                ADBG ("Error: Timeout occurred")
            }
        }
    }

    Name (THMN, 0x48)
    Name (THCN, 0x0E)
    Name (CNPM, 0x80)
    Name (FMSN, 0x10)
    Scope (\)
    {
        Method (THDA, 2, Serialized)
        {
            Local0 = 0xFE200000
            Local0 += (0x40 * (CNPM * (Arg0 - FMSN)))
            Local0 += (0x40 * Arg1)
            Return (Local0)
        }

        Method (STRD, 3, Serialized)
        {
            If (((Arg1 + Arg2) > SizeOf (Arg0)))
            {
                Return (Zero)
            }

            ToBuffer (Arg0, Local3)
            Local0 = Zero
            Local1 = Zero
            While ((Local1 < Arg2))
            {
                Local2 = DerefOf (Local3 [(Arg1 + Local1)])
                Local0 += (Local2 << (0x08 * Local1))
                Local1++
            }

            Return (Local0)
        }

        Method (THDS, 1, Serialized)
        {
            If ((PTHM == Zero))
            {
                Return (Zero)
            }
            ElseIf ((PTHM == One))
            {
                If (!\_SB.PC00.PTHT.THEN ())
                {
                    Return (Zero)
                }
            }
            ElseIf ((PTHM == 0x02))
            {
                If (!\_SB.PTHH.THEN ())
                {
                    Return (Zero)
                }
            }
            Else
            {
                Return (Zero)
            }

            Concatenate (Arg0, "\n", Local2)
            Local0 = SizeOf (Local2)
            Local1 = THDA (THMN, THCN)
            OperationRegion (THBA, SystemMemory, Local1, 0x40)
            Field (THBA, QWordAcc, NoLock, WriteAsZeros)
            {
                QO00,   64
            }

            Field (THBA, DWordAcc, NoLock, WriteAsZeros)
            {
                DO00,   32, 
                Offset (0x10), 
                DO10,   32, 
                Offset (0x30), 
                DO30,   32
            }

            Field (THBA, WordAcc, NoLock, WriteAsZeros)
            {
                WO00,   16
            }

            Field (THBA, ByteAcc, NoLock, WriteAsZeros)
            {
                BO00,   8
            }

            DO10 = 0x01000242
            WO00 = Local0
            Local6 = Zero
            Local7 = Local0
            While ((Local7 >= 0x08))
            {
                QO00 = STRD (Local2, Local6, 0x08)
                Local6 += 0x08
                Local7 -= 0x08
            }

            If ((Local7 >= 0x04))
            {
                DO00 = STRD (Local2, Local6, 0x04)
                Local6 += 0x04
                Local7 -= 0x04
            }

            If ((Local7 >= 0x02))
            {
                WO00 = STRD (Local2, Local6, 0x02)
                Local6 += 0x02
                Local7 -= 0x02
            }

            If ((Local7 >= One))
            {
                BO00 = STRD (Local2, Local6, One)
                Local6 += One
                Local7 -= One
            }

            DO30 = Zero
        }

        Method (THDH, 1, Serialized)
        {
            THDS (ToHexString (Arg0))
        }

        Method (THDD, 1, Serialized)
        {
            THDS (ToDecimalString (Arg0))
        }
    }

    Name (PCHH, One)
    Name (PCHN, 0x03)
    Name (PCHL, 0x02)
    Name (PCHP, 0x05)
    Name (PCHM, 0x06)
    Name (PCHX, 0x04)
    Scope (_SB)
    {
        Method (PWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                S23W ()
            }
        }

        Name (HDAA, One)
        Name (DISA, One)
        Name (CIWF, One)
        Name (CIBT, One)
        Name (S23C, Zero)
        Method (S23W, 0, NotSerialized)
        {
            HDAA = One
            DISA = One
            CIWF = One
            CIBT = One
        }

        Method (DION, 0, NotSerialized)
        {
            S023 (One, One)
        }

        Method (DIOF, 0, NotSerialized)
        {
            S023 (One, Zero)
        }

        Method (S023, 2, Serialized)
        {
        }

        Device (PRRE)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "PCHRESV")  // _UID: Unique ID
            Name (_STA, 0x08)  // _STA: Status
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFE000000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE04C000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE050000,         // Address Base
                        0x00060000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE0D0000,         // Address Base
                        0x00030000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE200000,         // Address Base
                        0x00600000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFF000000,         // Address Base
                        0x01000000,         // Address Length
                        )
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y21)
                })
                CreateWordField (BUF0, \_SB.PRRE._CRS._Y21._MIN, AMIN)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.PRRE._CRS._Y21._MAX, AMAX)  // _MAX: Maximum Base Address
                AMIN = PMBS /* \PMBS */
                AMAX = PMBS /* \PMBS */
                Name (SBR0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00690000,         // Address Length
                        _Y22)
                })
                CreateDWordField (SBR0, \_SB.PRRE._CRS._Y22._BAS, BAS0)  // _BAS: Base Address
                BAS0 = SBRG /* \SBRG */
                ConcatenateResTemplate (BUF0, SBR0, Local0)
                If (((PCHS == PCHH) || (PCHS == 0x04)))
                {
                    Name (SBRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y23)
                    })
                    CreateDWordField (SBRS, \_SB.PRRE._CRS._Y23._BAS, BAS1)  // _BAS: Base Address
                    CreateDWordField (SBRS, \_SB.PRRE._CRS._Y23._LEN, LEN1)  // _LEN: Length
                    BAS1 = (SBRG + 0x006C0000)
                    LEN1 = 0x00010000
                    ConcatenateResTemplate (Local0, SBRS, Local1)
                }
                Else
                {
                    Name (SBRL, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y24)
                    })
                    CreateDWordField (SBRL, \_SB.PRRE._CRS._Y24._BAS, BAS2)  // _BAS: Base Address
                    CreateDWordField (SBRL, \_SB.PRRE._CRS._Y24._LEN, LEN2)  // _LEN: Length
                    BAS2 = (SBRG + 0x006B0000)
                    LEN2 = 0x00020000
                    ConcatenateResTemplate (Local0, SBRL, Local1)
                }

                Name (SBRE, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y25)
                })
                CreateDWordField (SBRE, \_SB.PRRE._CRS._Y25._BAS, BAS3)  // _BAS: Base Address
                CreateDWordField (SBRE, \_SB.PRRE._CRS._Y25._LEN, LEN3)  // _LEN: Length
                BAS3 = (SBRG + 0x006F0000)
                If ((PCHS == 0x04))
                {
                    LEN3 = ((SBRG + 0x10000000) - BAS3)
                }
                Else
                {
                    LEN3 = ((SBRG + 0x01000000) - BAS3)
                }

                ConcatenateResTemplate (Local1, SBRE, Local2)
                Return (Local2)
            }
        }

        Device (IOTR)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "IoTraps")  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y26)
                })
                Name (BUF1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y27)
                })
                Name (BUF2, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y28)
                })
                Name (BUF3, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y29)
                })
                CreateWordField (BUF0, \_SB.IOTR._CRS._Y26._MIN, AMI0)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.IOTR._CRS._Y26._MAX, AMA0)  // _MAX: Maximum Base Address
                CreateWordField (BUF1, \_SB.IOTR._CRS._Y27._MIN, AMI1)  // _MIN: Minimum Base Address
                CreateWordField (BUF1, \_SB.IOTR._CRS._Y27._MAX, AMA1)  // _MAX: Maximum Base Address
                CreateWordField (BUF2, \_SB.IOTR._CRS._Y28._MIN, AMI2)  // _MIN: Minimum Base Address
                CreateWordField (BUF2, \_SB.IOTR._CRS._Y28._MAX, AMA2)  // _MAX: Maximum Base Address
                CreateWordField (BUF3, \_SB.IOTR._CRS._Y29._MIN, AMI3)  // _MIN: Minimum Base Address
                CreateWordField (BUF3, \_SB.IOTR._CRS._Y29._MAX, AMA3)  // _MAX: Maximum Base Address
                Local2 = Zero
                If ((ITS0 == One))
                {
                    AMI0 = ITA0 /* \ITA0 */
                    AMA0 = ITA0 /* \ITA0 */
                    Local0 = BUF0 /* \_SB_.IOTR._CRS.BUF0 */
                    Local2 = One
                }

                If ((ITS1 == One))
                {
                    AMI1 = ITA1 /* \ITA1 */
                    AMA1 = ITA1 /* \ITA1 */
                    If ((Local2 == One))
                    {
                        ConcatenateResTemplate (BUF1, Local0, Local1)
                        Local0 = Local1
                    }
                    Else
                    {
                        Local0 = BUF1 /* \_SB_.IOTR._CRS.BUF1 */
                        Local2 = One
                    }
                }

                If ((ITS2 == One))
                {
                    AMI2 = ITA2 /* \ITA2 */
                    AMA2 = ITA2 /* \ITA2 */
                    If ((Local2 == One))
                    {
                        ConcatenateResTemplate (BUF2, Local0, Local1)
                        Local0 = Local1
                    }
                    Else
                    {
                        Local0 = BUF2 /* \_SB_.IOTR._CRS.BUF2 */
                        Local2 = One
                    }
                }

                If ((ITS3 == One))
                {
                    AMI3 = ITA3 /* \ITA3 */
                    AMA3 = ITA3 /* \ITA3 */
                    If ((Local2 == One))
                    {
                        ConcatenateResTemplate (BUF3, Local0, Local1)
                        Local0 = Local1
                    }
                    Else
                    {
                        Local0 = BUF3 /* \_SB_.IOTR._CRS.BUF3 */
                        Local2 = One
                    }
                }

                If ((Local2 == One))
                {
                    Return (Local0)
                }
                Else
                {
                    Return (Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    })
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Name (TEMP, Zero)
        Device (LPCB)
        {
            Name (_ADR, 0x001F0000)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            OperationRegion (LPC, PCI_Config, Zero, 0x0100)
            Field (LPC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                CDID,   16, 
                Offset (0x08), 
                CRID,   8, 
                Offset (0x80), 
                IOD0,   8, 
                IOD1,   8, 
                Offset (0xA0), 
                    ,   9, 
                PRBL,   1, 
                Offset (0xDC), 
                    ,   2, 
                ESPI,   1
            }
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0004)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (\)
    {
        Name (TMOV, 0x0A)
        Method (TMVA, 1, Serialized)
        {
            TMOV = 0x0A
            If ((Arg0 > 0x0A))
            {
                TMOV = Arg0
            }
        }

        Method (IPCS, 7, Serialized)
        {
            Name (RPKG, Package (0x05)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            If ((Arg2 > 0x10))
            {
                RPKG [Zero] = One
                Return (RPKG) /* \IPCS.RPKG */
            }

            IWB0 = Arg3
            IWB1 = Arg4
            IWB2 = Arg5
            IWB3 = Arg6
            Local0 = Zero
            Local0 += (Arg0 << Zero)
            Local0 += (Arg1 << 0x0C)
            Local0 += (Arg2 << 0x10)
            CMDR = Local0
            Local0 = Zero
            Local1 = TMOV /* \TMOV */
            While (One)
            {
                If ((!IBSY || (IERR == One)))
                {
                    Break
                }

                If ((Local0 > Local1))
                {
                    RPKG [Zero] = 0x03
                    Return (RPKG) /* \IPCS.RPKG */
                }

                Sleep (One)
                Local0++
            }

            If ((IERR == One))
            {
                RPKG [Zero] = 0x02
                Return (RPKG) /* \IPCS.RPKG */
            }

            RPKG [One] = IRB0 /* \IRB0 */
            RPKG [0x02] = IRB1 /* \IRB1 */
            RPKG [0x03] = IRB2 /* \IRB2 */
            RPKG [0x04] = IRB3 /* \IRB3 */
            Return (RPKG) /* \IPCS.RPKG */
        }

        Method (ULTR, 1, Serialized)
        {
            LTRU = Arg0
        }

        Method (TCBS, 0, NotSerialized)
        {
            Return (TCOB) /* \TCOB */
        }

        OperationRegion (PMIO, SystemIO, PMBS, 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
            PBSS,   1, 
            Offset (0x40), 
                ,   17, 
            GPEC,   1, 
            Offset (0x6C), 
                ,   19, 
            CPWS,   1, 
            Offset (0x7C), 
                ,   18, 
            WAEN,   1, 
            CPWE,   1
        }

        OperationRegion (TCBA, SystemIO, TCBS (), 0x10)
        Field (TCBA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x04), 
                ,   9, 
            CPSC,   1
        }

        OperationRegion (PWMR, SystemMemory, PWRM, 0x1E30)
        Field (PWMR, DWordAcc, NoLock, Preserve)
        {
            CMDR,   32, 
            IBSY,   1, 
            IERR,   1, 
                ,   1, 
                ,   1, 
            Offset (0x05), 
            Offset (0x06), 
            IERC,   8, 
            Offset (0x08), 
            Offset (0x80), 
            IWB0,   32, 
            IWB1,   32, 
            IWB2,   32, 
            IWB3,   32, 
            IRB0,   32, 
            IRB1,   32, 
            IRB2,   32, 
            IRB3,   32, 
            Offset (0x10D0), 
            RAA0,   1, 
            RAA1,   1, 
            RAA2,   1, 
            RAA3,   1, 
            RPB0,   1, 
            RPB1,   1, 
            RPB2,   1, 
            RPB3,   1, 
            RPC0,   1, 
            RPC1,   1, 
            RPC2,   1, 
            RPC3,   1, 
            RSAT,   1, 
            RGBE,   1, 
            RXHC,   1, 
            RXDC,   1, 
            RUFS,   1, 
            RPD0,   1, 
            RPD1,   1, 
            RPD2,   1, 
            RPD3,   1, 
            RPE0,   1, 
            RPE1,   1, 
            RPE2,   1, 
            RPE3,   1, 
            Offset (0x10D4), 
            APA0,   1, 
            APA1,   1, 
            APA2,   1, 
            APA3,   1, 
            APB0,   1, 
            APB1,   1, 
            APB2,   1, 
            APB3,   1, 
            APC0,   1, 
            APC1,   1, 
            APC2,   1, 
            APC3,   1, 
            ASAT,   1, 
            AGBE,   1, 
            AXHC,   1, 
            AXDC,   1, 
            AUFS,   1, 
            APD0,   1, 
            APD1,   1, 
            APD2,   1, 
            APD3,   1, 
            APE0,   1, 
            APE1,   1, 
            APE2,   1, 
            APE3,   1, 
            Offset (0x1800), 
            ACWA,   32, 
            DCWA,   32, 
            ACET,   32, 
            DCET,   32, 
            Offset (0x18E8), 
                ,   31, 
            CECE,   1, 
            Offset (0x1B0C), 
                ,   2, 
            ISAT,   1, 
                ,   18, 
            LTRU,   1, 
            Offset (0x1B1C), 
                ,   22, 
            XSQD,   1, 
            Offset (0x1BD0), 
                ,   31, 
            CPPM,   1, 
            Offset (0x1E20), 
            GBED,   1, 
            Offset (0x1E28), 
                ,   22, 
            SCFD,   1
        }

        Method (PSOC, 1, Serialized)
        {
            If (PSON)
            {
                If (Arg0)
                {
                    CECE = One
                }
                Else
                {
                    CECE = Zero
                }
            }
        }

        Method (PSOS, 0, NotSerialized)
        {
            If (CECE)
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (CFAE, 1, NotSerialized)
        {
            If (DerefOf (Arg0 [Zero]))
            {
                ADBG ("CPPM Forced Alignment Disable")
                CPPM = Zero
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
            Else
            {
                ADBG ("CPPM Forced Alignment Enable")
                CPPM = One
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Method (IMPS, 0, NotSerialized)
        {
            If ((PCHS == 0x04))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Name (LTEN, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
    }

    If ((GBES != Zero))
    {
        Scope (_SB.PC00)
        {
            Device (GLAN)
            {
                Name (_ADR, 0x001F0006)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x6D, 0x04))
                }

                OperationRegion (LANR, PCI_Config, Zero, 0x0100)
                Field (LANR, ByteAcc, NoLock, Preserve)
                {
                    DVID,   16, 
                    Offset (0xCC), 
                    Offset (0xCD), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1
                }

                Method (GPEH, 0, NotSerialized)
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If ((PMES == One))
                    {
                        Notify (GLAN, 0x02) // Device Wake
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (XHCI)
        {
            Name (_ADR, 0x00140000)  // _ADR: Address
            OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
            Field (XPRT, AnyAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x10), 
                XADL,   32, 
                XADH,   32, 
                Offset (0x74), 
                Offset (0x75), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                Offset (0xA2), 
                    ,   2, 
                D3HE,   1
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("XHCI _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x03)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x03)
            }

            Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
            {
                Return (0x03)
            }

            Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
            {
                Return (0x03)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
            {
                Return (Package (0x01)
                {
                    ^^LPCB.EC.PUBS
                })
            }

            Method (_PR1, 0, NotSerialized)  // _PR1: Power Resources for D1
            {
                Return (Package (0x01)
                {
                    ^^LPCB.EC.PUBS
                })
            }

            Method (_PR2, 0, NotSerialized)  // _PR2: Power Resources for D2
            {
                Return (Package (0x01)
                {
                    ^^LPCB.EC.PUBS
                })
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x03)
                {
                    0x6D, 
                    0x03, 
                    ^^LPCB.EC.PUBS
                })
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If ((PMES == One))
                {
                    Notify (XHCI, 0x02) // Device Wake
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (CondRefOf (\_SB.PC00.XHCI.RHUB.INIR))
                {
                    ^RHUB.INIR ()
                }
            }

            Method (USRA, 1, Serialized)
            {
                Return ((PU2C + Arg0))
            }

            Method (SSPA, 1, Serialized)
            {
                Return ((PU2C + (0x02 + Arg0)))
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG ("XHCI D0")
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PC00.XHCI.PS0X))
                {
                    PS0X ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG ("XHCI D3")
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PC00.XHCI.PS3X))
                {
                    PS3X ()
                }
            }

            Method (CUID, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG ("XHCI RHUB PS0")
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS0X))
                    {
                        ADBG ("XHCI CSD0")
                        CSD0 (0x16)
                        PS0X ()
                    }
                }

                Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                {
                    ADBG ("XHCI RHUB PS2")
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS2X))
                    {
                        PS2X ()
                        ADBG ("XHCI CSD3")
                        CSD3 (0x16)
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG ("XHCI RHUB PS3")
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS3X))
                    {
                        PS3X ()
                        ADBG ("XHCI CSD3")
                        CSD3 (0x16)
                    }
                }
            }
        }
    }

    If (CondRefOf (PU2C))
    {
        Scope (_SB.PC00.XHCI.RHUB)
        {
            If ((One <= PU2C))
            {
                Device (HS01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }
            }

            If ((0x02 <= PU2C))
            {
                Device (HS02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }
            }

            If ((0x03 <= PU2C))
            {
                Device (HS03)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }
            }

            If ((0x04 <= PU2C))
            {
                Device (HS04)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }
            }

            If ((0x05 <= PU2C))
            {
                Device (HS05)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }
            }

            If ((0x06 <= PU2C))
            {
                Device (HS06)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }
            }

            If ((0x07 <= PU2C))
            {
                Device (HS07)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }
            }

            If ((0x08 <= PU2C))
            {
                Device (HS08)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                }
            }

            If ((0x09 <= PU2C))
            {
                Device (HS09)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                }
            }

            If ((0x0A <= PU2C))
            {
                Device (HS10)
                {
                    Name (_ADR, 0x0A)  // _ADR: Address
                }
            }

            If ((0x0B <= PU2C))
            {
                Device (HS11)
                {
                    Name (_ADR, 0x0B)  // _ADR: Address
                }
            }

            If ((0x0C <= PU2C))
            {
                Device (HS12)
                {
                    Name (_ADR, 0x0C)  // _ADR: Address
                }
            }

            If ((0x0D <= PU2C))
            {
                Device (HS13)
                {
                    Name (_ADR, 0x0D)  // _ADR: Address
                }
            }

            If ((0x0E <= PU2C))
            {
                Device (HS14)
                {
                    Name (_ADR, 0x0E)  // _ADR: Address
                }
            }

            Device (USR1)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (USRA (One))
                }
            }

            Device (USR2)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (USRA (0x02))
                }
            }
        }
    }

    If (CondRefOf (PU3C))
    {
        Scope (_SB.PC00.XHCI.RHUB)
        {
            If ((One <= PU3C))
            {
                Device (SS01)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (One))
                    }
                }
            }

            If ((0x02 <= PU3C))
            {
                Device (SS02)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x02))
                    }
                }
            }

            If ((0x03 <= PU3C))
            {
                Device (SS03)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x03))
                    }
                }
            }

            If ((0x04 <= PU3C))
            {
                Device (SS04)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x04))
                    }
                }
            }

            If ((0x05 <= PU3C))
            {
                Device (SS05)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x05))
                    }
                }
            }

            If ((0x06 <= PU3C))
            {
                Device (SS06)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x06))
                    }
                }
            }

            If ((0x07 <= PU3C))
            {
                Device (SS07)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x07))
                    }
                }
            }

            If ((0x08 <= PU3C))
            {
                Device (SS08)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x08))
                    }
                }
            }

            If ((0x09 <= PU3C))
            {
                Device (SS09)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x09))
                    }
                }
            }

            If ((0x0A <= PU3C))
            {
                Device (SS10)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x0A))
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (XDCI)
        {
            Name (_ADR, 0x00140001)  // _ADR: Address
            OperationRegion (OTGD, PCI_Config, Zero, 0x0100)
            Field (OTGD, DWordAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x10), 
                XDCB,   64
            }

            Field (OTGD, ByteAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                D0I3,   2, 
                Offset (0x85), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (XDBA, 0, NotSerialized)
            {
                Return ((XDCB & 0xFFFFFFFFFFFFFF00))
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                ADBG ("XDCI DSM")
                If ((Arg0 == ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511") /* Unknown UUID */))
                {
                    If ((Arg1 == One))
                    {
                        Method (SPPS, 2, Serialized)
                        {
                            OperationRegion (XDBW, SystemMemory, XDBA (), 0x00110000)
                            Field (XDBW, WordAcc, NoLock, Preserve)
                            {
                                Offset (0x10F810), 
                                Offset (0x10F811), 
                                U2CP,   2, 
                                U3CP,   2, 
                                Offset (0x10F818), 
                                PUPS,   2, 
                                    ,   1, 
                                PURC,   1, 
                                Offset (0x10F81A), 
                                Offset (0x10F81C), 
                                    ,   3, 
                                UXPE,   2, 
                                Offset (0x10F81E)
                            }

                            Local1 = Arg0
                            Local2 = Arg1
                            If ((Local1 == Zero))
                            {
                                ADBG ("PMU D0")
                                UXPE = Zero
                                Local0 = Zero
                                While ((Local0 < 0x0A))
                                {
                                    Stall (0x64)
                                    Local0++
                                }

                                PUPS = Zero
                                Local0 = Zero
                                While ((Local0 < 0x07D0))
                                {
                                    Stall (0x64)
                                    If (((U2CP == Zero) && (U3CP == Zero)))
                                    {
                                        Break
                                    }

                                    Local0++
                                }

                                If ((U2CP != Zero))
                                {
                                    ADBG ("U2 not in D0")
                                }

                                If ((U3CP != Zero))
                                {
                                    ADBG ("U3 not in D0")
                                }

                                Return (Zero)
                            }

                            If ((Local1 == 0x03))
                            {
                                ADBG ("PMU D3")
                                If ((U2CP != Zero))
                                {
                                    ADBG ("U2 not in D0")
                                }

                                If ((U3CP != Zero))
                                {
                                    ADBG ("U3 not in D0")
                                }

                                PUPS = 0x03
                                Local0 = Zero
                                While ((Local0 < 0x07D0))
                                {
                                    Stall (0x64)
                                    If (((U2CP == 0x03) && (U3CP == 0x03)))
                                    {
                                        Break
                                    }

                                    Local0++
                                }

                                If ((U2CP != 0x03))
                                {
                                    ADBG ("U2 not in D3")
                                }

                                If ((U3CP != 0x03))
                                {
                                    ADBG ("U3 not in D3")
                                }

                                UXPE = Local2
                                Return (Zero)
                            }

                            Return (Zero)
                        }

                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                ADBG ("XDCI Fn0")
                                Return (Buffer (0x02)
                                {
                                     0xB3, 0x03                                       // ..
                                })
                            }
                            Case (One)
                            {
                                ADBG ("XDCI Fn1")
                                Return (One)
                            }
                            Case (0x04)
                            {
                                ADBG ("XDCI Fn4")
                                Local1 = DerefOf (Arg3 [Zero])
                                ADBG (Local1)
                                SPPS (Local1, Zero)
                            }
                            Case (0x05)
                            {
                                ADBG ("XDCI Fn5")
                                Return (Zero)
                            }
                            Case (0x07)
                            {
                                ADBG ("XDCI Fn7")
                                OperationRegion (XD22, SystemMemory, XDBA (), 0x00110000)
                                Field (XD22, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0x10F818), 
                                    P2PS,   2, 
                                    Offset (0x10F81A)
                                }

                                Local0 = P2PS /* \_SB_.PC00.XDCI._DSM.P2PS */
                                Return (Local0)
                            }
                            Case (0x08)
                            {
                                ADBG ("XDCI Fn8")
                                Return (One)
                            }
                            Case (0x09)
                            {
                                ADBG ("XDCI Fn9")
                                OperationRegion (XGCT, SystemMemory, XDBA (), 0x00110000)
                                Field (XGCT, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0xC110), 
                                    GCTL,   32
                                }

                                Local1 = (PPDS & 0xFFF80000)
                                Local1 >>= 0x13
                                ADBG (Concatenate ("PCH XDCI: Func9 Return Val = ", ToHexString (Local1)))
                                Return (Local1)
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (_DDN, "ICL PCH XDCI controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("ICL PCH XDCI controller"))  // _STR: Description String
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If ((PMES == One))
                {
                    Notify (XDCI, 0x02) // Device Wake
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (HDAS)
        {
            Name (_ADR, 0x001F0003)  // _ADR: Address
            OperationRegion (HDAR, PCI_Config, Zero, 0x0100)
            Field (HDAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x54), 
                Offset (0x55), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }

                If ((PMES == One))
                {
                    Notify (HDAS, 0x02) // Device Wake
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                S023 (Zero, One)
                If (CondRefOf (\_SB.PC00.HDAS.PS0X))
                {
                    PS0X ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                S023 (Zero, Zero)
                If (CondRefOf (\_SB.PC00.HDAS.PS3X))
                {
                    PS3X ()
                }
            }

            Name (NBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadOnly,
                    0x0000000000000001, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y2A, AddressRangeACPI, TypeStatic)
            })
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                CreateQWordField (NBUF, \_SB.PC00.HDAS._Y2A._MIN, NBAS)  // _MIN: Minimum Base Address
                CreateQWordField (NBUF, \_SB.PC00.HDAS._Y2A._MAX, NMAS)  // _MAX: Maximum Base Address
                CreateQWordField (NBUF, \_SB.PC00.HDAS._Y2A._LEN, NLEN)  // _LEN: Length
                NBAS = NHLA /* \NHLA */
                NMAS = (NHLA + (NHLL - One))
                NLEN = NHLL /* \NHLL */
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "nhlt-version", 
                        "1.8-0"
                    }
                }
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x4F                                             // O
                            })
                        }
                        Case (One)
                        {
                            Return (NBUF) /* \_SB_.PC00.HDAS.NBUF */
                        }
                        Case (0x02)
                        {
                            Return (ADFM) /* \ADFM */
                        }
                        Case (0x03)
                        {
                            If (CondRefOf (\_SB.PC00.HDAS.PPMS))
                            {
                                Return (PPMS (Arg3))
                            }

                            Return (Zero)
                        }
                        Case (0x06)
                        {
                            Return (XTAL) /* \XTAL */
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Scope (HDAS)
        {
            Device (SNDW)
            {
                Name (_ADR, 0x40000000)  // _ADR: Address
                Name (_CID, Package (0x02)  // _CID: Compatible ID
                {
                    "PRP00001", 
                    "PNP0A05" /* Generic Container Device */
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0B)
                }

                Method (QCFG, 3, NotSerialized)
                {
                    DerefOf (DerefOf (Arg0 [One]) [Zero]) [One]
                         = Arg1
                    DerefOf (DerefOf (Arg0 [One]) [0x04]) [One]
                         = Arg2
                }

                Method (XCFG, 2, NotSerialized)
                {
                    If ((Arg1 == 0x016E3600))
                    {
                        Local0 = 0x016E3600
                        Local1 = 0x005B8D80
                        Local2 = 0x7D
                        Local3 = 0x02
                    }
                    ElseIf ((Arg1 == 0x0249F000))
                    {
                        Local0 = 0x0249F000
                        Local1 = 0x00493E00
                        Local2 = 0x32
                        Local3 = 0x04
                    }
                    ElseIf ((Arg1 == 0x0124F800))
                    {
                        Local0 = 0x0124F800
                        Local1 = 0x00493E00
                        Local2 = 0x32
                        Local3 = 0x04
                    }
                    Else
                    {
                        Local0 = Zero
                        Local1 = Zero
                        Local2 = Zero
                        Local3 = Zero
                    }

                    DerefOf (DerefOf (Arg0 [One]) [One]) [One]
                         = Local0
                    DerefOf (DerefOf (DerefOf (Arg0 [One]) [0x07]
                        ) [One]) [Zero] = Local1
                    DerefOf (DerefOf (Arg0 [One]) [0x09]) [One]
                         = Local2
                    DerefOf (DerefOf (Arg0 [One]) [0x0A]) [One]
                         = Local3
                }

                Method (DCFG, 3, NotSerialized)
                {
                    DerefOf (DerefOf (Arg0 [One]) [0x02]) [One]
                         = Arg1
                    DerefOf (DerefOf (Arg0 [One]) [0x03]) [One]
                         = Arg2
                }

                Method (SDWU, 1, NotSerialized)
                {
                    DerefOf (DerefOf (_DSD [One]) [One]) [One]
                         = Arg0
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    SDWU (SWMC)
                    QCFG (LNK0, SWQ0, ACS0)
                    QCFG (LNK1, SWQ1, ACS1)
                    QCFG (LNK2, SWQ2, ACS2)
                    QCFG (LNK3, SWQ3, ACS3)
                    XCFG (LNK0, XTAL)
                    XCFG (LNK1, XTAL)
                    XCFG (LNK2, XTAL)
                    XCFG (LNK3, XTAL)
                    DCFG (LNK0, DAI0, DOD0)
                    DCFG (LNK1, DAI1, DOD1)
                    DCFG (LNK2, DAI2, DOD2)
                    DCFG (LNK3, DAI3, DOD3)
                }

                Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x02)
                    {
                        Package (0x02)
                        {
                            "mipi-sdw-sw-interface-revision", 
                            0x00010000
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-master-count", 
                            0x04
                        }
                    }, 

                    ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                    Package (0x04)
                    {
                        Package (0x02)
                        {
                            "mipi-sdw-link-0-subproperties", 
                            "LNK0"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-1-subproperties", 
                            "LNK1"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-2-subproperties", 
                            "LNK2"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-3-subproperties", 
                            "LNK3"
                        }
                    }
                })
                Name (LNK0, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0D)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x0249F000
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-doais", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-dods", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-autonomous-clock-stop", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x00493E00
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x32
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x04
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK1, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0D)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x0249F000
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-doais", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-dods", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-autonomous-clock-stop", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x00493E00
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x32
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x04
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK2, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0D)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x0249F000
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-doais", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-dods", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-autonomous-clock-stop", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x00493E00
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x32
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x04
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK3, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0D)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x0249F000
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-doais", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-dods", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-autonomous-clock-stop", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x00493E00
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x32
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x04
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
            }
        }

        If ((UAOE != Zero))
        {
            Scope (HDAS)
            {
                Device (UAOL)
                {
                    Name (_ADR, 0x50000000)  // _ADR: Address
                    Name (_CID, Package (0x02)  // _CID: Compatible ID
                    {
                        "PRP00001", 
                        "PNP0A05" /* Generic Container Device */
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("UAOL _DSM")
                        If ((Arg0 == ToUUID ("2e60aefc-1ba8-467a-b8cc-5727b98cecb7") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    Return (CFAE (Arg3))
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "uaol-ctrl-count", 
                                0x02
                            }
                        }, 

                        ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "uaol-descriptor-0", 
                                "UAO0"
                            }, 

                            Package (0x02)
                            {
                                "uaol-descriptor-1", 
                                "UAO1"
                            }
                        }
                    })
                    Name (UAO0, Package (0x02)
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x03)
                        {
                            Package (0x02)
                            {
                                "uaol-instance-number", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "bdf-routing-enabled", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "peer-integrated-controller-identifier", 
                                0x98ED
                            }
                        }
                    })
                    Name (UAO1, Package (0x02)
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x03)
                        {
                            Package (0x02)
                            {
                                "uaol-instance-number", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "bdf-routing-enabled", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "peer-integrated-controller-identifier", 
                                0xABCD
                            }
                        }
                    })
                }
            }
        }

        Scope (HDAS)
        {
            Device (IDA)
            {
                Name (_ADR, 0x10000000)  // _ADR: Address
            }
        }
    }

    Scope (_SB.PC00)
    {
        Scope (\_SB.PC00)
        {
            Method (SOD3, 3, Serialized)
            {
                OperationRegion (ICB1, SystemMemory, (GPCB () + Arg0), 0x88)
                If (Arg1)
                {
                    Field (ICB1, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x84), 
                        PMEC,   8
                    }

                    PMEC = 0x03
                    PMEC |= Zero
                }

                If ((Arg1 && Arg2))
                {
                    Field (ICB1, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64
                    }

                    BAR0 = Zero
                }
            }
        }

        Method (I2CH, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, Arg0, 0x20)
            Field (ICB1, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64, 
                BAR1,   64
            }

            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y2B)
            })
            Name (BUF1, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y2C)
            })
            CreateDWordField (BUF0, \_SB.PC00.I2CH._Y2B._BAS, ADR0)  // _BAS: Base Address
            CreateDWordField (BUF1, \_SB.PC00.I2CH._Y2C._BAS, ADR1)  // _BAS: Base Address
            ADR0 = (BAR0 & 0xFFFFFFFFFFFFF000)
            ADR1 = (BAR1 & 0xFFFFFFFFFFFFF000)
            ConcatenateResTemplate (BUF0, BUF1, Local0)
            Return (Local0)
        }

        Device (I2C0)
        {
            If ((IM00 == 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC00))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If ((IM00 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC00, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM00 == One) || (IM00 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150000)
                }
            }
        }

        Device (I2C1)
        {
            If ((IM01 == 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC01))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If ((IM01 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC01, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM01 == One) || (IM01 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150001)
                }
            }
        }

        Device (I2C2)
        {
            If ((IM02 == 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC02))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If ((IM02 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC02, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM02 == One) || (IM02 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150002)
                }
            }
        }

        Device (I2C3)
        {
            If ((IM03 == 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC03))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If ((IM03 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC03, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM03 == One) || (IM03 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150003)
                }
            }
        }

        Device (I2C4)
        {
            If ((IM04 == 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC04))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If ((IM04 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC04, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM04 == One) || (IM04 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00190000)
                }
            }
        }

        Device (I2C5)
        {
            If ((IM05 == 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC05))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If ((IM05 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC05, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM05 == One) || (IM05 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00190001)
                }
            }
        }

        Device (I2C6)
        {
            If ((IM06 == 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC06))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If ((IM06 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC06, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM06 == One) || (IM06 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00100000)
                }
            }
        }

        Device (I2C7)
        {
            If ((IM07 == 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC07))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If ((IM07 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC07, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM07 == One) || (IM07 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00100001)
                }
            }
        }

        Method (SPIH, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, Arg0, 0x20)
            Field (ICB1, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64, 
                BAR1,   64
            }

            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y2D)
            })
            Name (BUF1, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y2E)
            })
            CreateDWordField (BUF0, \_SB.PC00.SPIH._Y2D._BAS, ADR0)  // _BAS: Base Address
            CreateDWordField (BUF1, \_SB.PC00.SPIH._Y2E._BAS, ADR1)  // _BAS: Base Address
            ADR0 = (BAR0 & 0xFFFFFFFFFFFFF000)
            ADR1 = (BAR1 & 0xFFFFFFFFFFFFF000)
            ConcatenateResTemplate (BUF0, BUF1, Local0)
            Return (Local0)
        }

        Device (SPI0)
        {
            If ((SM00 == 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC00))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If ((SM00 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC00, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM00 == One) || (SM00 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x001E0002)
                }
            }
        }

        Device (SPI1)
        {
            If ((SM01 == 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC01))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If ((SM01 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC01, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM01 == One) || (SM01 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x001E0003)
                }
            }
        }

        Device (SPI2)
        {
            If ((SM02 == 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC02))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If ((SM02 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC02, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM02 == One) || (SM02 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00120006)
                }
            }
        }

        Device (SPI3)
        {
            If ((SM03 == 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC03))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If ((SM03 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC03, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM03 == One) || (SM03 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130000)
                }
            }
        }

        Device (SPI4)
        {
            If ((SM04 == 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC04))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If ((SM04 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC04, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM04 == One) || (SM04 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130001)
                }
            }
        }

        Device (SPI5)
        {
            If ((SM05 == 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC05))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If ((SM05 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC05, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM05 == One) || (SM05 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130002)
                }
            }
        }

        Device (SPI6)
        {
            If ((SM06 == 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC06))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If ((SM06 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC06, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM06 == One) || (SM06 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130003)
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (UDSM, 1, Serialized)
        {
            If ((Arg0 == ToUUID ("f7af8347-a966-49fe-9022-7a9deeebdb27") /* Unknown UUID */))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (UDMA, 2, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Return (Buffer (0x08)
                    {
                         0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                    })
                }
                Case (One)
                {
                    Return (ToInteger (Arg1))
                }

            }

            Return (Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
        }
    }

    Scope (_SB)
    {
        Device (URSC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_STA, 0x03)  // _STA: Status
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (UARB, 2, Serialized)
            {
                If (((Arg0 == 0x02) || (Arg0 == 0x03)))
                {
                    OperationRegion (UACF, SystemMemory, Arg1, 0x20)
                    Field (UACF, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64, 
                        BAR1,   64
                    }

                    Name (BUF1, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000FF8,         // Address Length
                            _Y2F)
                    })
                    Name (BUF2, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y30)
                    })
                    CreateDWordField (BUF1, \_SB.URSC.UARB._Y2F._BAS, ADR1)  // _BAS: Base Address
                    CreateDWordField (BUF2, \_SB.URSC.UARB._Y30._BAS, ADR2)  // _BAS: Base Address
                    Local1 = (BAR0 & 0xFFFFFFFFFFFFF000)
                    ADR1 = (Local1 + 0x08)
                    ADR2 = (BAR1 & 0xFFFFFFFFFFFFF000)
                    ConcatenateResTemplate (BUF1, BUF2, Local0)
                    Return (Local0)
                }

                Return (Buffer (0x02)
                {
                     0x79, 0x00                                       // y.
                })
            }
        }

        Method (UARH, 2, Serialized)
        {
            OperationRegion (UACF, SystemMemory, Arg0, 0x18)
            Field (UACF, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64
            }

            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000008,         // Address Length
                    _Y31)
            })
            Name (IBUF, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y32)
                {
                    0x00000014,
                }
            })
            CreateDWordField (BUF0, \_SB.UARH._Y31._BAS, ADR0)  // _BAS: Base Address
            CreateDWordField (IBUF, \_SB.UARH._Y32._INT, IRQN)  // _INT: Interrupts
            Local0 = (BAR0 & 0xFFFFFFFFFFFFF000)
            ADR0 = Local0
            IRQN = Arg1
            ConcatenateResTemplate (BUF0, IBUF, Local1)
            Return (Local1)
        }

        Method (UAPG, 3, Serialized)
        {
            If ((Arg1 != 0x02))
            {
                Return (Arg1)
            }

            OperationRegion (UACF, SystemMemory, Arg2, 0x18)
            Field (UACF, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64
            }

            OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x10)
            Field (UAB0, ByteAcc, Lock, Preserve)
            {
                DLL,    8, 
                DLH,    8, 
                FCR,    8, 
                LCR,    8
            }

            Local0 = LCR /* \_SB_.UAPG.LCR_ */
            If ((Local0 && 0x7F))
            {
                Return (Zero)
            }

            Return (One)
        }

        Method (UHID, 1, Serialized)
        {
            If ((Arg0 == 0x03))
            {
                Return (0x0105D041)
            }

            Return (0x020CD041)
        }

        Method (UPS3, 2, Serialized)
        {
            If ((Arg0 == One))
            {
                OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                Field (UACF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    BAR0,   64
                }

                Field (UACF, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PMEC,   8
                }

                OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x82)
                Field (UAB0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x81), 
                    PPRR,   8
                }

                PPRR = Zero
                PMEC = 0x03
                PMEC |= Zero
            }
        }

        Method (UPS0, 2, Serialized)
        {
            If ((Arg0 == One))
            {
                OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                Field (UACF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    BAR0,   64
                }

                Field (UACF, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PMEC,   8
                }

                PMEC = Zero
                PMEC |= Zero
                OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x82)
                Field (UAB0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x81), 
                    PPRR,   8
                }

                PPRR = 0x07
            }
        }

        Method (UPSC, 1, Serialized)
        {
            OperationRegion (UACF, SystemMemory, (Arg0 + 0x84), 0x04)
            Field (UACF, ByteAcc, NoLock, Preserve)
            {
                PMEC,   8
            }

            Return ((PMEC & 0x03))
        }
    }

    Scope (_SB.URSC)
    {
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            Local0 = UARB (UM00, UC00)
            ConcatenateResTemplate (Local0, UARB (UM01, UC01), Local1)
            Local0 = Local1
            ConcatenateResTemplate (Local0, UARB (UM02, UC02), Local1)
            Local0 = Local1
            ConcatenateResTemplate (Local0, UARB (UM03, UC03), Local1)
            Local0 = Local1
            ConcatenateResTemplate (Local0, UARB (UM04, UC04), Local1)
            Local0 = Local1
            ConcatenateResTemplate (Local0, UARB (UM05, UC05), Local1)
            Local0 = Local1
            ConcatenateResTemplate (Local0, UARB (UM06, UC06), Local1)
            Local0 = Local1
            Return (Local0)
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA00)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD00))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x001E0000)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC00, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    Scope (_SB)
    {
        If (((UM00 == 0x02) || (UM00 == 0x03)))
        {
            Device (UAH0)
            {
                Name (_DDN, "SerialIoUart0")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart0")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM00))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC00, UI00))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM00 == 0x03))
                    {
                        If ((UP00 == 0x02))
                        {
                            UP00 = UAPG (UM00, UP00, UC00)
                        }

                        Return (0x0F)
                    }

                    Return (0x08)
                }

                If ((UM00 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC00))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP00, UC00)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP00, UC00)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA01)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD01))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x001E0001)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC01, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    Scope (_SB)
    {
        If (((UM01 == 0x02) || (UM01 == 0x03)))
        {
            Device (UAH1)
            {
                Name (_DDN, "SerialIoUart1")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart1")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM01))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC01, UI01))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM01 == 0x03))
                    {
                        If ((UP01 == 0x02))
                        {
                            UP01 = UAPG (UM01, UP01, UC01)
                        }

                        Return (0x0F)
                    }

                    Return (0x08)
                }

                If ((UM01 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC01))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP01, UC01)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP01, UC01)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA02)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD02))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00190002)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC02, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    Scope (_SB)
    {
        If (((UM02 == 0x02) || (UM02 == 0x03)))
        {
            Device (UAH2)
            {
                Name (_DDN, "SerialIoUart2")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart2")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM02))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC02, UI02))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM02 == 0x03))
                    {
                        If ((UP02 == 0x02))
                        {
                            UP02 = UAPG (UM02, UP02, UC02)
                        }

                        Return (0x0F)
                    }

                    Return (0x08)
                }

                If ((UM02 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC02))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP02, UC02)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP02, UC02)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA03)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD03))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00110000)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC03, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    Scope (_SB)
    {
        If (((UM03 == 0x02) || (UM03 == 0x03)))
        {
            Device (UAH3)
            {
                Name (_DDN, "SerialIoUart3")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart3")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM03))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC03, UI03))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM03 == 0x03))
                    {
                        If ((UP03 == 0x02))
                        {
                            UP03 = UAPG (UM03, UP03, UC03)
                        }

                        Return (0x0F)
                    }

                    Return (0x08)
                }

                If ((UM03 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC03))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP03, UC03)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP03, UC03)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA04)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD04))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00110001)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC04, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    Scope (_SB)
    {
        If (((UM04 == 0x02) || (UM04 == 0x03)))
        {
            Device (UAH4)
            {
                Name (_DDN, "SerialIoUart4")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart4")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM04))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC04, UI04))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM04 == 0x03))
                    {
                        If ((UP04 == 0x02))
                        {
                            UP04 = UAPG (UM04, UP04, UC04)
                        }

                        Return (0x0F)
                    }

                    Return (0x08)
                }

                If ((UM04 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC04))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP04, UC04)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP04, UC04)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA05)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD05))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00110002)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC05, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    Scope (_SB)
    {
        If (((UM05 == 0x02) || (UM05 == 0x03)))
        {
            Device (UAH5)
            {
                Name (_DDN, "SerialIoUart5")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart5")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM05))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC05, UI05))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM05 == 0x03))
                    {
                        If ((UP05 == 0x02))
                        {
                            UP05 = UAPG (UM05, UP05, UC05)
                        }

                        Return (0x0F)
                    }

                    Return (0x08)
                }

                If ((UM05 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC05))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP05, UC05)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP05, UC05)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA06)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD06))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00110003)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC06, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    Scope (_SB)
    {
        If (((UM06 == 0x02) || (UM06 == 0x03)))
        {
            Device (UAH6)
            {
                Name (_DDN, "SerialIoUart6")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart6")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM06))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC06, UI06))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM06 == 0x03))
                    {
                        If ((UP06 == 0x02))
                        {
                            UP06 = UAPG (UM06, UP06, UC06)
                        }

                        Return (0x0F)
                    }

                    Return (0x08)
                }

                If ((UM06 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC06))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP06, UC06)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP06, UC06)
                    }
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (GPI0)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((GPHD == One))
                {
                    Return ("PNP0C02")
                }

                Return ("INTC1055")
            }

            Name (LINK, "\\_SB.GPI0")
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBFL, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y33)
                    {
                        0x0000000E,
                    }
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y34)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y35)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y36)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y37)
                })
                CreateDWordField (RBFL, \_SB.GPI0._CRS._Y33._INT, INTL)  // _INT: Interrupts
                INTL = SGIR /* \SGIR */
                CreateDWordField (RBFL, \_SB.GPI0._CRS._Y34._BAS, CML0)  // _BAS: Base Address
                CML0 = (SBRG + 0x006E0000)
                CreateDWordField (RBFL, \_SB.GPI0._CRS._Y35._BAS, CML1)  // _BAS: Base Address
                CML1 = (SBRG + 0x006D0000)
                CreateDWordField (RBFL, \_SB.GPI0._CRS._Y36._BAS, CML4)  // _BAS: Base Address
                CML4 = (SBRG + 0x006A0000)
                CreateDWordField (RBFL, \_SB.GPI0._CRS._Y37._BAS, CML5)  // _BAS: Base Address
                CML5 = (SBRG + 0x00690000)
                Return (RBFL) /* \_SB_.GPI0._CRS.RBFL */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((GPHD == One))
                {
                    Return (0x08)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB)
    {
        Name (GPCL, Package (0x12)
        {
            Package (0x09)
            {
                0x006E0000, 
                0x1A, 
                0x0700, 
                0xB0, 
                0x20, 
                0x0140, 
                0x80, 
                0x84, 
                Zero
            }, 

            Package (0x09)
            {
                0x006E0000, 
                0x10, 
                0x08A0, 
                0xB4, 
                0x30, 
                0x0144, 
                0x88, 
                0x8C, 
                0x20
            }, 

            Package (0x09)
            {
                0x006E0000, 
                0x19, 
                0x09A0, 
                0xB8, 
                0x38, 
                0x0148, 
                0x90, 
                0x94, 
                0x40
            }, 

            Package (0x09)
            {
                0x00690000, 
                0x08, 
                0x0700, 
                0xB0, 
                0x20, 
                0x0140, 
                0x80, 
                0x84, 
                0x0160
            }, 

            Package (0x09)
            {
                0x00690000, 
                0x09, 
                0x0780, 
                0xB4, 
                0x24, 
                0xFFFF, 
                0x88, 
                0x8C, 
                0xFFFF
            }, 

            Package (0x09)
            {
                0x006C0000, 
                0x11, 
                0x0700, 
                0xB0, 
                0x20, 
                0x0140, 
                0x80, 
                0x84, 
                0xFFFF
            }, 

            Package (0x09)
            {
                0x006D0000, 
                0x08, 
                0x0700, 
                0xB0, 
                0x20, 
                0x0140, 
                0x80, 
                0x84, 
                0x60
            }, 

            Package (0x09)
            {
                0x006D0000, 
                0x18, 
                0x0780, 
                0xB4, 
                0x24, 
                0x0144, 
                0x88, 
                0x8C, 
                0x80
            }, 

            Package (0x09)
            {
                0x006D0000, 
                0x15, 
                0x0900, 
                0xB8, 
                0x30, 
                0x0148, 
                0x90, 
                0x94, 
                0xA0
            }, 

            Package (0x09)
            {
                0x006D0000, 
                0x18, 
                0x0A50, 
                0xBC, 
                0x3C, 
                0x014C, 
                0x98, 
                0x9C, 
                0xC0
            }, 

            Package (0x09)
            {
                0x006D0000, 
                0x1D, 
                0x0BD0, 
                0xC0, 
                0x48, 
                0x0150, 
                0xA0, 
                0xA4, 
                0xE0
            }, 

            Package (0x09)
            {
                0x006A0000, 
                0x18, 
                0x0700, 
                0xB0, 
                0x20, 
                0x0140, 
                0x80, 
                0x84, 
                0x0100
            }, 

            Package (0x09)
            {
                0x006A0000, 
                0x19, 
                0x0880, 
                0xB4, 
                0x2C, 
                0x0144, 
                0x88, 
                0x8C, 
                0x0120
            }, 

            Package (0x09)
            {
                0x006A0000, 
                0x06, 
                0x0A10, 
                0xB8, 
                0x3C, 
                0xFFFF, 
                0x90, 
                0x94, 
                0xFFFF
            }, 

            Package (0x09)
            {
                0x006A0000, 
                0x19, 
                0x0A70, 
                0xBC, 
                0x40, 
                0x014C, 
                0x98, 
                0x9C, 
                0x0140
            }, 

            Package (0x09)
            {
                0x006A0000, 
                0x0A, 
                0x0C00, 
                0xC0, 
                0x50, 
                0xFFFF, 
                0xA0, 
                0xA4, 
                0xFFFF
            }, 

            Package (0x09)
            {
                0x006B0000, 
                0x0F, 
                0x0700, 
                0xB0, 
                0x20, 
                0xFFFF, 
                0x80, 
                0x84, 
                0xFFFF
            }, 

            Package (0x09)
            {
                0x006B0000, 
                0x5B, 
                0x07F0, 
                0xB4, 
                0x28, 
                0xFFFF, 
                0x88, 
                0x8C, 
                0xFFFF
            }
        })
        Name (RXEV, Package (0x12)
        {
            Buffer (0x1A) {}, 
            Buffer (0x10) {}, 
            Buffer (0x19) {}, 
            Buffer (0x08) {}, 
            Buffer (0x09) {}, 
            Buffer (0x11) {}, 
            Buffer (0x08) {}, 
            Buffer (0x18) {}, 
            Buffer (0x15) {}, 
            Buffer (0x18) {}, 
            Buffer (0x1D) {}, 
            Buffer (0x18) {}, 
            Buffer (0x19) {}, 
            Buffer (0x06) {}, 
            Buffer (0x19) {}, 
            Buffer (0x0A) {}, 
            Buffer (0x0F) {}, 
            Buffer (0x5B) {}
        })
    }

    Scope (_SB)
    {
        Method (GINF, 2, NotSerialized)
        {
            Return (DerefOf (DerefOf (GPCL [Arg0]) [Arg1]))
        }

        Method (GMXG, 0, NotSerialized)
        {
            Return (0x12)
        }
    }

    Scope (_SB)
    {
        Method (GADR, 2, NotSerialized)
        {
            Local0 = (GINF (Arg0, Zero) + SBRG)
            Local1 = GINF (Arg0, Arg1)
            Return ((Local0 + Local1))
        }

        Method (GNUM, 1, NotSerialized)
        {
            Local0 = GNMB (Arg0)
            Local1 = GGRP (Arg0)
            Return ((GINF (Local1, 0x08) + Local0))
        }

        Method (INUM, 1, NotSerialized)
        {
            Return ((GPC1 (Arg0) & 0x7F))
        }

        Method (GGRP, 1, Serialized)
        {
            Local0 = ((Arg0 & 0x00FF0000) >> 0x10)
            Return (Local0)
        }

        Method (GNMB, 1, Serialized)
        {
            Return ((Arg0 & 0xFFFF))
        }

        Method (GGPE, 1, NotSerialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (Local1 >> 0x05)
            If (!((((GEI0 == Local0) && (GED0 == Local2)) | (
                (GEI1 == Local0) && (GED1 == Local2))) | ((GEI2 == Local0) && (GED2 == 
                Local2))))
            {
                Return (0x6F)
            }
            Else
            {
                If (((GEI0 == Local0) && (GED0 == Local2)))
                {
                    Local3 = Zero
                }
                ElseIf (((GEI1 == Local0) && (GED1 == Local2)))
                {
                    Local3 = One
                }
                ElseIf (((GEI2 == Local0) && (GED2 == Local2)))
                {
                    Local3 = 0x02
                }
                Else
                {
                    BreakPoint
                    Return (Zero)
                }

                Return ((((Local3 - Local2) * 0x20) + Local1))
            }
        }

        Method (GPC0, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.GPC0.TEMP */
        }

        Method (SPC0, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (GPC1, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x10)) + 
                0x04)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.GPC1.TEMP */
        }

        Method (SPC1, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x10)) + 
                0x04)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (SRXO, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   28, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GGIV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   1, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGIV.TEMP */
        }

        Method (GGOV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGOV.TEMP */
        }

        Method (SGOV, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GGII, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGII.TEMP */
        }

        Method (SGII, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GPMV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GPMV.TEMP */
        }

        Method (SPMV, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GHPO, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local3 = (GADR (Local0, 0x03) + ((Local1 >> 0x05) * 0x04))
            Local4 = (Local1 & 0x1F)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> Local4) & One))
        }

        Method (SHPO, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local3 = (GADR (Local0, 0x03) + ((Local1 >> 0x05) * 0x04))
            Local4 = (Local1 & 0x1F)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            If (Arg1)
            {
                TEMP |= (One << Local4)
            }
            Else
            {
                TEMP &= ~(One << Local4)
            }
        }

        Method (GGPO, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x04) + ((Local1 >> 0x03) * 0x04
                ))
            OperationRegion (PREG, SystemMemory, Local2, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> ((Local1 & 0x07) * 0x04)) & 
                0x03))
        }

        Method (SGRA, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   20, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (SGWP, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x10)) + 
                0x04)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   4, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (CAGS, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local4 = (Local1 >> 0x05)
            If (!((((GEI0 == Local0) && (GED0 == Local4)) | (
                (GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (GED2 == 
                Local4))))
            {
                Local3 = GADR (Local0, 0x05)
                If (((Local3 & 0xFFFF) != 0xFFFF))
                {
                    OperationRegion (GPPX, SystemMemory, (Local3 + (Local4 * 0x04)), 0x04)
                    Field (GPPX, AnyAcc, NoLock, Preserve)
                    {
                        STSX,   32
                    }

                    Local2 = (One << (Local1 % 0x20))
                    STSX = Local2
                }
            }
        }

        Method (ISME, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local4 = (Local1 >> 0x05)
            If (!!((((GEI0 == Local0) && (GED0 == Local4)) | 
                ((GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (
                GED2 == Local4))))
            {
                Return (Zero)
            }

            If (((GADR (Local0, 0x05) & 0xFFFF) == 0xFFFF))
            {
                Return (Zero)
            }

            Local2 = (GADR (Local0, 0x05) + (Local4 * 0x04))
            Local3 = (Local1 & 0x1F)
            OperationRegion (GPPX, SystemMemory, Local2, 0x24)
            Field (GPPX, AnyAcc, NoLock, Preserve)
            {
                STSX,   32, 
                Offset (0x20), 
                GENX,   32
            }

            Return ((((STSX & GENX) >> Local3) & One))
        }

        Method (DIPI, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                Offset (0x04)
            }

            If ((RCFG != 0x02))
            {
                DerefOf (RXEV [Local0]) [Local1] = RCFG /* \_SB_.DIPI.RCFG */
                RCFG = 0x02
                RDIS = One
            }
        }

        Method (UIPI, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                Offset (0x04)
            }

            Local3 = DerefOf (DerefOf (RXEV [Local0]) [Local1])
            If ((Local3 != 0x02))
            {
                RDIS = Zero
                RCFG = Local3
            }
        }

        Method (GRXE, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   25, 
                RCFG,   2, 
                Offset (0x04)
            }

            RCFG = Arg1
        }

        Method (GLOC, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = GADR (Local0, 0x06)
            OperationRegion (PREG, SystemMemory, Local2, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> Local1) & One))
        }

        Method (GLOT, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = GADR (Local0, 0x07)
            OperationRegion (PREG, SystemMemory, Local2, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> Local1) & One))
        }
    }

    Scope (_SB.PC00)
    {
        Method (OCPD, 0, Serialized)
        {
            PCRA (0x50, 0x4020, Zero)
            PCRA (0x50, 0x4820, Zero)
            PCRA (0x50, 0x5C20, Zero)
            PCRA (0x50, 0x5820, Zero)
            PCRA (0x50, 0x1078, Zero)
        }

        If ((UF0E == One))
        {
            Device (PUF0)
            {
                Name (_ADR, 0x00120005)  // _ADR: Address
                Name (_DDN, "Intel(R) UFS Controller 0")  // _DDN: DOS Device Name
                OperationRegion (SCSR, PCI_Config, Zero, 0x0100)
                Field (SCSR, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PSTA,   32, 
                    Offset (0xA2), 
                        ,   2, 
                    PGEN,   1
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    PGEN = Zero
                    PSTA &= 0xFFFFFFFC
                    TEMP = PSTA /* \_SB_.PC00.PUF0.PSTA */
                    ULTR (Zero)
                    OCPD ()
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ULTR (One)
                    PGEN = One
                }

                Device (CARD)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }
            }
        }

        If ((UF1E == One))
        {
            Device (PUF1)
            {
                Name (_ADR, 0x00120007)  // _ADR: Address
                Name (_DDN, "Intel(R) UFS Controller 1")  // _DDN: DOS Device Name
                OperationRegion (SCSR, PCI_Config, Zero, 0x0100)
                Field (SCSR, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PSTA,   32, 
                    Offset (0xA2), 
                        ,   2, 
                    PGEN,   1
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    PGEN = Zero
                    PSTA &= 0xFFFFFFFC
                    TEMP = PSTA /* \_SB_.PC00.PUF1.PSTA */
                    ULTR (Zero)
                    OCPD ()
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ULTR (One)
                    PGEN = One
                }

                Device (CARD)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (CNVW)
        {
            Name (_ADR, 0x00140003)  // _ADR: Address
            Name (RSTT, Zero)
            Name (PRRS, Zero)
            OperationRegion (CWAR, SystemMemory, (GPCB () + 0x000A3000), 0x0100)
            Field (CWAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                    ,   1, 
                WMSE,   1, 
                WBME,   1, 
                Offset (0x10), 
                WBR0,   64, 
                Offset (0x44), 
                    ,   28, 
                WFLR,   1, 
                Offset (0x48), 
                    ,   15, 
                WIFR,   1, 
                Offset (0xCC), 
                WPMS,   32
            }

            Field (CWAR, ByteAcc, NoLock, Preserve)
            {
                Offset (0xCC), 
                Offset (0xCD), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }

                If ((PMES == One))
                {
                    Notify (CNVW, 0x02) // Device Wake
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((VDID != 0xFFFFFFFF))
                {
                    S023 (0x02, One)
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((VDID != 0xFFFFFFFF))
                {
                    Local0 = PCRR (PCNV, 0x8100)
                    If (((Local0 & 0x7F) == 0x4C))
                    {
                        S023 (0x02, Zero)
                    }
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
            {
                WRST
            })
        }

        Method (CNIP, 0, NotSerialized)
        {
            If (((^CNVW.VDID != 0xFFFFFFFF) || (CRFP == One)))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (SBTE, 1, Serialized)
        {
            If ((GBTP () != Zero))
            {
                Local0 = GBTP ()
                SGOV (Local0, Arg0)
                S023 (0x03, Arg0)
            }
        }

        Method (GBTE, 0, NotSerialized)
        {
            If ((GBTP () != Zero))
            {
                Local0 = GBTP ()
                Return (GGOV (Local0))
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (AOLX, 0, NotSerialized)
        {
            Name (AODS, Package (0x03)
            {
                Zero, 
                0x12, 
                Zero
            })
            If ((CBTA == One))
            {
                AODS [0x02] = One
            }

            Return (AODS) /* \_SB_.PC00.AOLX.AODS */
        }
    }

    If ((\_SB.PC00.CNIP () && (CBTC == One)))
    {
        If (((PCHS == 0x02) || ((PCHS == 0x05) || (PCHS == 0x06))))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS10)
            {
                Method (AOLD, 0, NotSerialized)
                {
                    Return (AOLX ())
                }
            }
        }
        ElseIf (((PCHS == One) || (PCHS == 0x04)))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS14)
            {
                Method (AOLD, 0, NotSerialized)
                {
                    Return (AOLX ())
                }
            }
        }
        ElseIf ((PCHS == 0x03))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS08)
            {
                Method (AOLD, 0, NotSerialized)
                {
                    Return (AOLX ())
                }
            }
        }
    }

    Scope (_SB)
    {
        Method (GBTP, 0, Serialized)
        {
            If (((PCHS == 0x05) || (PCHS == 0x06)))
            {
                Return (0x090A0000)
            }
            ElseIf ((PCHS == 0x04))
            {
                Return (0x08030000)
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB.PC00.CNVW)
    {
        Name (PLRB, Zero)
        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (One)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }

            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
            {
                Local0 = Acquire (CNMT, 0x03E8)
                If ((Local0 == Zero))
                {
                    CFLR ()
                    PRRS = One
                    If ((CondRefOf (\_SB.PC00.CNVW.RSTT) && (RSTT == One)))
                    {
                        If ((PCHS == 0x04))
                        {
                            PLRB = 0x44
                        }
                        Else
                        {
                            PLRB = 0x80
                        }

                        If (((PCRR (PCNV, PLRB) & 0x02) == Zero))
                        {
                            If ((GBTR () == One))
                            {
                                BTRK (Zero)
                                Sleep (0x69)
                                Local2 = One
                            }

                            PCRO (PCNV, PLRB, 0x03)
                            Sleep (0x0A)
                            Local1 = PCRR (PCNV, PLRB)
                            If ((((Local1 & 0x02) == Zero) && (Local1 & 0x04)))
                            {
                                PRRS = 0x02
                                If ((Local2 == One))
                                {
                                    BTRK (One)
                                    Sleep (0x69)
                                }
                            }
                            Else
                            {
                                PRRS = 0x04
                            }
                        }
                        Else
                        {
                            PRRS = 0x03
                        }
                    }

                    Release (CNMT)
                }
            }
        }

        Method (CFLR, 0, NotSerialized)
        {
            If ((WFLR == One))
            {
                WIFR = One
            }
        }
    }

    Scope (_SB.PC00)
    {
        Name (SIPV, Zero)
        Method (GSIP, 0, NotSerialized)
        {
            If ((PCHS == 0x05))
            {
                Return (0x0E)
            }
            Else
            {
                Return (0x11)
            }
        }

        Device (RP01)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA1 != Zero))
                {
                    Return (RPA1) /* \RPA1 */
                }
                Else
                {
                    Return (0x001C0000)
                }
            }

            Name (SLOT, One)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR1 /* \LTR1 */
                LMSL = PML1 /* \PML1 */
                LNSL = PNL1 /* \PNL1 */
                If ((HBSL & One))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & One) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP01))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP01.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP01._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP01.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP02)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA2 != Zero))
                {
                    Return (RPA2) /* \RPA2 */
                }
                Else
                {
                    Return (0x001C0001)
                }
            }

            Name (SLOT, 0x02)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR2 /* \LTR2 */
                LMSL = PML2 /* \PML2 */
                LNSL = PNL2 /* \PNL2 */
                If ((HBSL & One))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x02) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP02))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP02.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP02._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP02.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP03)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA3 != Zero))
                {
                    Return (RPA3) /* \RPA3 */
                }
                Else
                {
                    Return (0x001C0002)
                }
            }

            Name (SLOT, 0x03)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR3 /* \LTR3 */
                LMSL = PML3 /* \PML3 */
                LNSL = PNL3 /* \PNL3 */
                If ((HBSL & One))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x04) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP03))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP03.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP03._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP03.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP04)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA4 != Zero))
                {
                    Return (RPA4) /* \RPA4 */
                }
                Else
                {
                    Return (0x001C0003)
                }
            }

            Name (SLOT, 0x04)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR4 /* \LTR4 */
                LMSL = PML4 /* \PML4 */
                LNSL = PNL4 /* \PNL4 */
                If ((HBSL & One))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x08) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP04))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP04.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP04._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP04.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP05)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA5 != Zero))
                {
                    Return (RPA5) /* \RPA5 */
                }
                Else
                {
                    Return (0x001C0004)
                }
            }

            Name (SLOT, 0x05)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR5 /* \LTR5 */
                LMSL = PML5 /* \PML5 */
                LNSL = PNL5 /* \PNL5 */
                If ((HBSL & 0x02))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x10) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP05))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP05.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP05._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP05.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP06)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA6 != Zero))
                {
                    Return (RPA6) /* \RPA6 */
                }
                Else
                {
                    Return (0x001C0005)
                }
            }

            Name (SLOT, 0x06)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR6 /* \LTR6 */
                LMSL = PML6 /* \PML6 */
                LNSL = PNL6 /* \PNL6 */
                If ((HBSL & 0x02))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x20) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP06))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP06.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP06._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP06.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP07)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA7 != Zero))
                {
                    Return (RPA7) /* \RPA7 */
                }
                Else
                {
                    Return (0x001C0006)
                }
            }

            Name (SLOT, 0x07)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR7 /* \LTR7 */
                LMSL = PML7 /* \PML7 */
                LNSL = PNL7 /* \PNL7 */
                If ((HBSL & 0x02))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x40) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP07))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP07.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP07._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP07.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP08)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA8 != Zero))
                {
                    Return (RPA8) /* \RPA8 */
                }
                Else
                {
                    Return (0x001C0007)
                }
            }

            Name (SLOT, 0x08)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR8 /* \LTR8 */
                LMSL = PML8 /* \PML8 */
                LNSL = PNL8 /* \PNL8 */
                If ((HBSL & 0x02))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x80) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP08))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP08.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP08._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP08.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP09)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA9 != Zero))
                {
                    Return (RPA9) /* \RPA9 */
                }
                Else
                {
                    Return (0x001D0000)
                }
            }

            Name (SLOT, 0x09)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR9 /* \LTR9 */
                LMSL = PML9 /* \PML9 */
                LNSL = PNL9 /* \PNL9 */
                If ((HBSL & 0x04))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & One) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP09))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP09.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP09._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP09.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP10)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAA != Zero))
                {
                    Return (RPAA) /* \RPAA */
                }
                Else
                {
                    Return (0x001D0001)
                }
            }

            Name (SLOT, 0x0A)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRA /* \LTRA */
                LMSL = PMLA /* \PMLA */
                LNSL = PNLA /* \PNLA */
                If ((HBSL & 0x04))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x02) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP10))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP10.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP10._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP10.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP11)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAB != Zero))
                {
                    Return (RPAB) /* \RPAB */
                }
                Else
                {
                    Return (0x001D0002)
                }
            }

            Name (SLOT, 0x0B)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRB /* \LTRB */
                LMSL = PMLB /* \PMLB */
                LNSL = PNLB /* \PNLB */
                If ((HBSL & 0x04))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x04) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP11))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP11.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP11._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP11.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP12)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAC != Zero))
                {
                    Return (RPAC) /* \RPAC */
                }
                Else
                {
                    Return (0x001D0003)
                }
            }

            Name (SLOT, 0x0C)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRC /* \LTRC */
                LMSL = PMLC /* \PMLC */
                LNSL = PNLC /* \PNLC */
                If ((HBSL & 0x04))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x08) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP12))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP12.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP12._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP12.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP13)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAD != Zero))
                {
                    Return (RPAD) /* \RPAD */
                }
                Else
                {
                    Return (0x001D0004)
                }
            }

            Name (SLOT, 0x0D)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRD /* \LTRD */
                LMSL = PMLD /* \PMLD */
                LNSL = PNLD /* \PNLD */
                If ((HBSL & 0x08))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x10) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP13))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP13.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP13._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP13.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP14)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAE != Zero))
                {
                    Return (RPAE) /* \RPAE */
                }
                Else
                {
                    Return (0x001D0005)
                }
            }

            Name (SLOT, 0x0E)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRE /* \LTRE */
                LMSL = PMLE /* \PMLE */
                LNSL = PNLE /* \PNLE */
                If ((HBSL & 0x08))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x20) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP14))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP14.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP14._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP14.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP15)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAF != Zero))
                {
                    Return (RPAF) /* \RPAF */
                }
                Else
                {
                    Return (0x001D0006)
                }
            }

            Name (SLOT, 0x0F)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRF /* \LTRF */
                LMSL = PMLF /* \PMLF */
                LNSL = PNLF /* \PNLF */
                If ((HBSL & 0x08))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x40) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP15))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP15.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP15._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP15.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP16)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAG != Zero))
                {
                    Return (RPAG) /* \RPAG */
                }
                Else
                {
                    Return (0x001D0007)
                }
            }

            Name (SLOT, 0x10)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRG /* \LTRG */
                LMSL = PMLG /* \PMLG */
                LNSL = PNLG /* \PNLG */
                If ((HBSL & 0x08))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x80) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP16))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP16.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP16._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP16.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP17)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAH != Zero))
                {
                    Return (RPAH) /* \RPAH */
                }
                Else
                {
                    Return (0x001B0000)
                }
            }

            Name (SLOT, 0x11)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRH /* \LTRH */
                LMSL = PMLH /* \PMLH */
                LNSL = PNLH /* \PNLH */
                If ((HBSL & 0x10))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & One) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP17))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP17.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP17._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP17.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP18)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAI != Zero))
                {
                    Return (RPAI) /* \RPAI */
                }
                Else
                {
                    Return (0x001B0001)
                }
            }

            Name (SLOT, 0x12)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRI /* \LTRI */
                LMSL = PMLI /* \PMLI */
                LNSL = PNLI /* \PNLI */
                If ((HBSL & 0x10))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x02) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP18))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP18.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP18._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP18.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP19)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAJ != Zero))
                {
                    Return (RPAJ) /* \RPAJ */
                }
                Else
                {
                    Return (0x001B0002)
                }
            }

            Name (SLOT, 0x13)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRJ /* \LTRJ */
                LMSL = PMLJ /* \PMLJ */
                LNSL = PNLJ /* \PNLJ */
                If ((HBSL & 0x10))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x04) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP19))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP19.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP19._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP19.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP20)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAK != Zero))
                {
                    Return (RPAK) /* \RPAK */
                }
                Else
                {
                    Return (0x001B0003)
                }
            }

            Name (SLOT, 0x14)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRK /* \LTRK */
                LMSL = PMLK /* \PMLK */
                LNSL = PNLK /* \PNLK */
                If ((HBSL & 0x10))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x08) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP20))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP20.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP20._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP20.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP21)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAL != Zero))
                {
                    Return (RPAL) /* \RPAL */
                }
                Else
                {
                    Return (0x001B0004)
                }
            }

            Name (SLOT, 0x15)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRL /* \LTRL */
                LMSL = PMLL /* \PMLL */
                LNSL = PNLL /* \PNLL */
                If ((HBSL & 0x20))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x10) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP21))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP21.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP21._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP21.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP22)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAM != Zero))
                {
                    Return (RPAM) /* \RPAM */
                }
                Else
                {
                    Return (0x001B0005)
                }
            }

            Name (SLOT, 0x16)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRM /* \LTRM */
                LMSL = PMLM /* \PMLM */
                LNSL = PNLM /* \PNLM */
                If ((HBSL & 0x20))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x20) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP22))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP22.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP22._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP22.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP23)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAN != Zero))
                {
                    Return (RPAN) /* \RPAN */
                }
                Else
                {
                    Return (0x001B0006)
                }
            }

            Name (SLOT, 0x17)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRN /* \LTRN */
                LMSL = PMLN /* \PMLN */
                LNSL = PNLN /* \PNLN */
                If ((HBSL & 0x20))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x40) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP23))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP23.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP23._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP23.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP24)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAO != Zero))
                {
                    Return (RPAO) /* \RPAO */
                }
                Else
                {
                    Return (0x001B0007)
                }
            }

            Name (SLOT, 0x18)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRO /* \LTRO */
                LMSL = PMLO /* \PMLO */
                LNSL = PNLO /* \PNLO */
                If ((HBSL & 0x20))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x80) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP24))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP24.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP24._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP24.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP25)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAP != Zero))
                {
                    Return (RPAP) /* \RPAP */
                }
                Else
                {
                    Return (0x001A0000)
                }
            }

            Name (SLOT, 0x19)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRP /* \LTRP */
                LMSL = PMLP /* \PMLP */
                LNSL = PNLP /* \PNLP */
                If ((HBSL & 0x40))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR4) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR4 & One) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP25))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP25.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP25._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP25.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP26)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAQ != Zero))
                {
                    Return (RPAQ) /* \RPAQ */
                }
                Else
                {
                    Return (0x001A0001)
                }
            }

            Name (SLOT, 0x1A)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRQ /* \LTRQ */
                LMSL = PMLQ /* \PMLQ */
                LNSL = PNLQ /* \PNLQ */
                If ((HBSL & 0x40))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR4) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR4 & 0x02) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP26))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP26.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP26._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP26.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP27)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAR != Zero))
                {
                    Return (RPAR) /* \RPAR */
                }
                Else
                {
                    Return (0x001A0002)
                }
            }

            Name (SLOT, 0x1B)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRR /* \LTRR */
                LMSL = PMLR /* \PMLR */
                LNSL = PNLR /* \PNLR */
                If ((HBSL & 0x40))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR4) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR4 & 0x04) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP27))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP27.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP27._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP27.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP28)
        {
            Name (RID, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAS != Zero))
                {
                    Return (RPAS) /* \RPAS */
                }
                Else
                {
                    Return (0x001A0003)
                }
            }

            Name (SLOT, 0x1C)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRS /* \LTRS */
                LMSL = PMLS /* \PMLS */
                LNSL = PNLS /* \PNLS */
                If ((HBSL & 0x40))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR4) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR4 & 0x08) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP28))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP28.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            SIPV = GSIP ()
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SIPV < 0x10))
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = Zero
                }
                Else
                {
                    SCB0 = Zero
                }

                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                If ((SIPV < 0x10))
                {
                    NCB7 = One
                }
                Else
                {
                    SCB0 = One
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP28._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP28.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }
    }

    Scope (_SB)
    {
        Device (ICLK)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "ISCLK")  // _UID: Unique ID
            OperationRegion (CKOR, SystemMemory, (SBRG + ((ICKP << 0x10) + 0x8000)), 0x40)
            Field (CKOR, AnyAcc, Lock, Preserve)
            {
                CLK0,   8, 
                Offset (0x0C), 
                CLK1,   8, 
                Offset (0x18), 
                CLK2,   8, 
                Offset (0x24), 
                CLK3,   8, 
                Offset (0x30), 
                CLK4,   8, 
                Offset (0x3C), 
                CLK5,   8
            }

            Method (NCLK, 0, NotSerialized)
            {
                If ((PCHS == PCHP))
                {
                    Return (0x06)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (CLKC, 2, Serialized)
            {
                If (((Arg0 < NCLK ()) && (PCHS == PCHP)))
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Local0 = CLK0 /* \_SB_.ICLK.CLK0 */
                            CLK0 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                        }
                        Case (One)
                        {
                            Local0 = CLK1 /* \_SB_.ICLK.CLK1 */
                            CLK1 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                        }
                        Case (0x02)
                        {
                            Local0 = CLK2 /* \_SB_.ICLK.CLK2 */
                            CLK2 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                        }
                        Case (0x03)
                        {
                            Local0 = CLK3 /* \_SB_.ICLK.CLK3 */
                            CLK3 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                        }
                        Case (0x04)
                        {
                            Local0 = CLK4 /* \_SB_.ICLK.CLK4 */
                            CLK4 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                        }
                        Case (0x05)
                        {
                            Local0 = CLK5 /* \_SB_.ICLK.CLK5 */
                            CLK5 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                        }

                    }
                }
            }

            Method (CLKF, 2, Serialized)
            {
                If (((Arg0 < NCLK ()) && (PCHS == PCHP)))
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Local0 = CLK0 /* \_SB_.ICLK.CLK0 */
                            CLK0 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                        }
                        Case (One)
                        {
                            Local0 = CLK1 /* \_SB_.ICLK.CLK1 */
                            CLK1 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                        }
                        Case (0x02)
                        {
                            Local0 = CLK2 /* \_SB_.ICLK.CLK2 */
                            CLK2 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                        }
                        Case (0x03)
                        {
                            Local0 = CLK3 /* \_SB_.ICLK.CLK3 */
                            CLK3 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                        }
                        Case (0x04)
                        {
                            Local0 = CLK4 /* \_SB_.ICLK.CLK4 */
                            CLK4 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                        }
                        Case (0x05)
                        {
                            Local0 = CLK5 /* \_SB_.ICLK.CLK5 */
                            CLK5 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                        }

                    }
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x03)
            }
        }
    }

    Scope (\)
    {
        Method (MCUI, 2, Serialized)
        {
            Name (PRPI, Zero)
            Local0 = (One << Arg0)
            Local1 = (Arg1 << Arg0)
            PRPI = CTRP (Arg0)
            If ((PRPI < 0x1C))
            {
                Local2 = (One << PRPI) /* \MCUI.PRPI */
                Local3 = (Arg1 << PRPI) /* \MCUI.PRPI */
            }
            Else
            {
                Local2 = (One << PRPI) /* \MCUI.PRPI */
                Local3 = (Arg1 << PRPI) /* \MCUI.PRPI */
                Local2 <<= 0x18
                Local3 <<= 0x18
            }

            ADBG ("Calling IPCS method with command V_PMC_PWRM_IPC_SRC_CLK_PORT_MAPPING_CMD")
            ADBG (Concatenate ("Local0 =", Local0))
            ADBG (Concatenate ("Local1 =", Local1))
            ADBG (Concatenate ("Local2 =", Local2))
            ADBG (Concatenate ("Local3 =", Local3))
            IPCS (0xAC, Zero, 0x10, Local0, Local1, Local2, Local3)
        }

        Method (SPCO, 2, Serialized)
        {
            ADBG ("Calling SPCO method to configure PCIe ClkReq Override")
            Name (CLKU, Zero)
            If ((IPCC != Zero))
            {
                ADBG ("Calling TMVA method to restore IPC1 Command Timeout default Value 10ms")
                TMVA (0x0A)
                MCUI (Arg0, Arg1)
            }
            Else
            {
                CLKU = CTRP (Arg0)
                If ((Arg1 == One))
                {
                    If ((Arg0 > 0x06))
                    {
                        Local1 = (Arg0 + One)
                        Local1 -= 0x07
                        PCRO (0xAD, 0x8084, (One << Local1))
                    }
                    Else
                    {
                        Local1 = (Arg0 + 0x02)
                        PCRO (0xAD, 0x8080, (One << Local1))
                    }
                }
                ElseIf ((Arg0 > 0x06))
                {
                    Local1 = (Arg0 + One)
                    Local1 -= 0x07
                    PCRA (0xAD, 0x8084, ~(One << Local1))
                }
                Else
                {
                    Local1 = (Arg0 + 0x02)
                    PCRA (0xAD, 0x8080, ~(One << Local1))
                }
            }
        }

        Method (SPCX, 3, Serialized)
        {
            ADBG ("Calling SPCX method to configure PCIe ClkReq Override")
            If ((IPCC != Zero))
            {
                ADBG ("Calling TMVA method to override IPC1 Command Timeout Value")
                TMVA (Arg2)
                MCUI (Arg0, Arg1)
            }
            Else
            {
                SPCO (Arg0, Arg1)
            }
        }

        Method (HBCM, 2, Serialized)
        {
            ADBG ("mask/unmask Hybrid Partner CLKREQ")
            Name (HPRI, Zero)
            HPRI = Arg0
            If ((HPRI < 0x1C))
            {
                Local0 = (One << HPRI) /* \HBCM.HPRI */
                Local1 = (Arg1 << HPRI) /* \HBCM.HPRI */
            }
            Else
            {
                Local0 = Zero
                Local1 = Zero
            }

            ADBG ("Calling IPCS method for Hybrid Partner with command V_PMC_PWRM_IPC_SRC_CLK_PORT_MAPPING_CMD")
            ADBG (Concatenate ("Port number of Hybrid Partner =", HPRI))
            ADBG (Concatenate ("Local0 of Hybrid Partner =", Local0))
            ADBG (Concatenate ("Local1 of Hybrid Partner =", Local1))
            IPCS (0xAC, Zero, 0x10, Zero, Zero, Local0, Local1)
        }

        Method (CTRP, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Return (CR00) /* \CR00 */
                }
                Case (One)
                {
                    Return (CR01) /* \CR01 */
                }
                Case (0x02)
                {
                    Return (CR02) /* \CR02 */
                }
                Case (0x03)
                {
                    Return (CR03) /* \CR03 */
                }
                Case (0x04)
                {
                    Return (CR04) /* \CR04 */
                }
                Case (0x05)
                {
                    Return (CR05) /* \CR05 */
                }
                Case (0x06)
                {
                    Return (CR06) /* \CR06 */
                }
                Case (0x07)
                {
                    Return (CR07) /* \CR07 */
                }
                Case (0x08)
                {
                    Return (CR08) /* \CR08 */
                }
                Case (0x09)
                {
                    Return (CR09) /* \CR09 */
                }
                Case (0x0A)
                {
                    Return (CR10) /* \CR10 */
                }
                Case (0x0B)
                {
                    Return (CR11) /* \CR11 */
                }
                Case (0x0C)
                {
                    Return (CR12) /* \CR12 */
                }
                Case (0x0D)
                {
                    Return (CR13) /* \CR13 */
                }
                Case (0x0E)
                {
                    Return (CR14) /* \CR14 */
                }
                Case (0x0F)
                {
                    Return (CR15) /* \CR15 */
                }
                Case (0x10)
                {
                    Return (CR16) /* \CR16 */
                }
                Case (0x11)
                {
                    Return (CR17) /* \CR17 */
                }
                Default
                {
                    Return (0xFF)
                }

            }
        }

        Method (CTRQ, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Return (CQ00) /* \CQ00 */
                }
                Case (One)
                {
                    Return (CQ01) /* \CQ01 */
                }
                Case (0x02)
                {
                    Return (CQ02) /* \CQ02 */
                }
                Case (0x03)
                {
                    Return (CQ03) /* \CQ03 */
                }
                Case (0x04)
                {
                    Return (CQ04) /* \CQ04 */
                }
                Case (0x05)
                {
                    Return (CQ05) /* \CQ05 */
                }
                Case (0x06)
                {
                    Return (CQ06) /* \CQ06 */
                }
                Case (0x07)
                {
                    Return (CQ07) /* \CQ07 */
                }
                Case (0x08)
                {
                    Return (CQ08) /* \CQ08 */
                }
                Case (0x09)
                {
                    Return (CQ09) /* \CQ09 */
                }
                Case (0x0A)
                {
                    Return (CQ10) /* \CQ10 */
                }
                Case (0x0B)
                {
                    Return (CQ11) /* \CQ11 */
                }
                Case (0x0C)
                {
                    Return (CQ12) /* \CQ12 */
                }
                Case (0x0D)
                {
                    Return (CQ13) /* \CQ13 */
                }
                Case (0x0E)
                {
                    Return (CQ14) /* \CQ14 */
                }
                Case (0x0F)
                {
                    Return (CQ15) /* \CQ15 */
                }
                Case (0x10)
                {
                    Return (CQ16) /* \CQ16 */
                }
                Case (0x11)
                {
                    Return (CQ17) /* \CQ17 */
                }
                Default
                {
                    Return (0xFF)
                }

            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (SAT0)
        {
            Name (_ADR, 0x00170000)  // _ADR: Address
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((PCHS == PCHP))
                {
                    If (!SCFD)
                    {
                        CSD0 (0x14)
                    }
                }

                ISAT = Zero
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ISAT = One
                If ((PCHS == PCHP))
                {
                    CSD3 (0x14)
                }
            }

            If (CondRefOf (\STD3))
            {
                If ((STD3 != Zero))
                {
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "StorageD3Enable", 
                                One
                            }
                        }
                    })
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((CondRefOf (SATC) && CondRefOf (SATD)))
                {
                    If (SATC (Arg0))
                    {
                        Return (SATD (Arg0, Arg1, Arg2, Arg3))
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Device (PRT0)
            {
                Name (_ADR, 0xFFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & One))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT1)
            {
                Name (_ADR, 0x0001FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x0002FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x04))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x0003FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x08))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x0004FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x10))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT5)
            {
                Name (_ADR, 0x0005FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x20))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT6)
            {
                Name (_ADR, 0x0006FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x40))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT7)
            {
                Name (_ADR, 0x0007FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x80))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (TINT, 1, Serialized)
        {
            Name (TINR, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                    "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            CreateWordField (TINR, 0x17, INT1)
            INT1 = GNUM (Arg0)
            Return (TINR) /* \_SB_.PC00.TINT.TINR */
        }

        Device (THC0)
        {
            Name (_ADR, 0x00100006)  // _ADR: Address
            Name (RSTL, Zero)
            OperationRegion (THCR, PCI_Config, Zero, 0x0100)
            Field (THCR, ByteAcc, NoLock, Preserve)
            {
                VDID,   32
            }

            If ((VDID != 0xFFFFFFFF))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((TMD0 == One))
                    {
                        If ((Arg0 == ToUUID ("6e2ac436-0fcf-41af-a265-b32a220dcfab") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x7F                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_INPUT_REPORT_HEADER_ADDRESS")
                                    Return (ToInteger (T040))
                                }
                                Case (0x02)
                                {
                                    ADBG ("THC THC_INPUT_REPORT_BODY_ADDRESS")
                                    Return (ToInteger (T050))
                                }
                                Case (0x03)
                                {
                                    ADBG ("THC THC_OUTPUT_REPORT_ADDRESS")
                                    Return (ToInteger (T060))
                                }
                                Case (0x04)
                                {
                                    ADBG ("THC THC_READ_OPCODE")
                                    Name (BUF4, Buffer (One) {})
                                    Local0 = ToBuffer (T070)
                                    BUF4 [Zero] = DerefOf (Local0 [Zero])
                                    Return (BUF4) /* \_SB_.PC00.THC0._DSM.BUF4 */
                                }
                                Case (0x05)
                                {
                                    ADBG ("THC THC_WRITE_OPCODE")
                                    Name (BUF5, Buffer (One) {})
                                    Local1 = ToBuffer (T080)
                                    BUF5 [Zero] = DerefOf (Local1 [Zero])
                                    Return (BUF5) /* \_SB_.PC00.THC0._DSM.BUF5 */
                                }
                                Case (0x06)
                                {
                                    ADBG ("THC THC_FLAGS")
                                    Return (ToInteger (T090))
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        If ((Arg0 == ToUUID ("300d35b7-ac20-413e-8e9c-92e4dafd0afe") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_CONNECTION_SPEED")
                                    Return (ToInteger (T030))
                                }
                                Case (0x02)
                                {
                                    ADBG ("THC THC_LIMIT_PACKET_SIZE")
                                    Return (ToInteger (T0C0))
                                }
                                Case (0x03)
                                {
                                    ADBG ("THC THC_PERFORMANCE_LIMITATION")
                                    Return (ToInteger (T0D0))
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                    }

                    If ((Arg0 == ToUUID ("84005682-5b71-41a4-8d66-8130f787a138") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                ADBG ("THC THC_ACTIVE_LTR")
                                Return (ToInteger (T0A0))
                            }
                            Case (0x02)
                            {
                                ADBG ("THC THC_IDLE_LTR")
                                Return (ToInteger (T0B0))
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                        }
                    }

                    Return (Buffer (Zero) {})
                }

                If ((TIN0 != Zero))
                {
                    Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                }

                If ((TIN0 != Zero))
                {
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Return (TINT (TIN0))
                    }
                }

                If ((TMD0 == One))
                {
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        ADBG ("THC _INI")
                        SHPO (T010, One)
                        SPMV (T010, Zero)
                        SPC0 (T010, (0x42000200 | (~(T020 & One) & One
                            )))
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        ADBG ("THC _RST")
                        While ((RSTL == One))
                        {
                            Sleep (0x0A)
                        }

                        RSTL = One
                        SGOV (T010, (T020 & One))
                        Sleep (0x012C)
                        SGOV (T010, (~(T020 & One) & One))
                        RSTL = Zero
                    }
                }
            }
        }

        Device (THC1)
        {
            Name (_ADR, 0x00100007)  // _ADR: Address
            Name (RSTL, Zero)
            OperationRegion (THCR, PCI_Config, Zero, 0x0100)
            Field (THCR, ByteAcc, NoLock, Preserve)
            {
                VDID,   32
            }

            If ((VDID != 0xFFFFFFFF))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((TMD1 == One))
                    {
                        If ((Arg0 == ToUUID ("6e2ac436-0fcf-41af-a265-b32a220dcfab") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x7F                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_INPUT_REPORT_HEADER_ADDRESS")
                                    Return (ToInteger (T041))
                                }
                                Case (0x02)
                                {
                                    ADBG ("THC THC_INPUT_REPORT_BODY_ADDRESS")
                                    Return (ToInteger (T051))
                                }
                                Case (0x03)
                                {
                                    ADBG ("THC THC_OUTPUT_REPORT_ADDRESS")
                                    Return (ToInteger (T061))
                                }
                                Case (0x04)
                                {
                                    ADBG ("THC THC_READ_OPCODE")
                                    Name (BUF4, Buffer (One) {})
                                    Local0 = ToBuffer (T071)
                                    BUF4 [Zero] = DerefOf (Local0 [Zero])
                                    Return (BUF4) /* \_SB_.PC00.THC1._DSM.BUF4 */
                                }
                                Case (0x05)
                                {
                                    ADBG ("THC THC_WRITE_OPCODE")
                                    Name (BUF5, Buffer (One) {})
                                    Local1 = ToBuffer (T081)
                                    BUF5 [Zero] = DerefOf (Local1 [Zero])
                                    Return (BUF5) /* \_SB_.PC00.THC1._DSM.BUF5 */
                                }
                                Case (0x06)
                                {
                                    ADBG ("THC THC_FLAGS")
                                    Return (ToInteger (T091))
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        If ((Arg0 == ToUUID ("300d35b7-ac20-413e-8e9c-92e4dafd0afe") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_CONNECTION_SPEED")
                                    Return (ToInteger (T031))
                                }
                                Case (0x02)
                                {
                                    ADBG ("THC THC_LIMIT_PACKET_SIZE")
                                    Return (ToInteger (T0C1))
                                }
                                Case (0x03)
                                {
                                    ADBG ("THC THC_PERFORMANCE_LIMITATION")
                                    Return (ToInteger (T0D1))
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                    }

                    If ((Arg0 == ToUUID ("84005682-5b71-41a4-8d66-8130f787a138") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                ADBG ("THC THC_ACTIVE_LTR")
                                Return (ToInteger (T0A1))
                            }
                            Case (0x02)
                            {
                                ADBG ("THC THC_IDLE_LTR")
                                Return (ToInteger (T0B1))
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                        }
                    }

                    Return (Buffer (Zero) {})
                }

                If ((TIN1 != Zero))
                {
                    Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                }

                If ((TIN1 != Zero))
                {
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Return (TINT (TIN1))
                    }
                }

                If ((TMD1 == One))
                {
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        ADBG ("THC _INI")
                        SHPO (T011, One)
                        SPMV (T011, Zero)
                        SPC0 (T011, (0x42000200 | (~(T021 & One) & One
                            )))
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        ADBG ("THC _RST")
                        While ((RSTL == One))
                        {
                            Sleep (0x0A)
                        }

                        RSTL = One
                        SGOV (T011, (T021 & One))
                        Sleep (0x012C)
                        SGOV (T011, (~(T021 & One) & One))
                        RSTL = Zero
                    }
                }
            }
        }
    }

    Scope (\)
    {
        Method (PCRR, 2, Serialized)
        {
            Local1 = (Arg1 & 0xFFFF)
            Local2 = ((Arg1 & 0x000F0000) << 0x08)
            Local0 = ((Arg0 << 0x10) + Local1)
            Local0 = ((Local2 + Local0) + SBRG) /* \SBRG */
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            Return (DAT0) /* \PCRR.DAT0 */
        }

        Method (PCRW, 3, Serialized)
        {
            Local1 = (Arg1 & 0xFFFF)
            Local2 = ((Arg1 & 0x000F0000) << 0x08)
            Local0 = ((Arg0 << 0x10) + Local1)
            Local0 = ((Local2 + Local0) + SBRG) /* \SBRG */
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            DAT0 = Arg2
        }

        Method (PCRO, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 | Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCRA, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 & Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCAO, 4, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = ((Local0 & Arg2) | Arg3)
            PCRW (Arg0, Arg1, Local1)
        }
    }

    Scope (_SB.PC00)
    {
        Device (ISHD)
        {
            Name (_ADR, 0x00120000)  // _ADR: Address
        }
    }

    Scope (_SB.PC00)
    {
        Device (HECI)
        {
            Name (_ADR, 0x00160000)  // _ADR: Address
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (HEC3)
        {
            Name (_ADR, 0x00160004)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (PTHT)
        {
            Name (_ADR, 0x001F0007)  // _ADR: Address
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PTHM == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            OperationRegion (PTHR, PCI_Config, Zero, 0x20)
            Field (PTHR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                MTBL,   32, 
                MTBH,   32
            }

            Method (THEN, 0, Serialized)
            {
                OperationRegion (RMTB, SystemMemory, ((MTBH << 0x20) + (MTBL & 0xFFF00000)), 0x0100)
                Field (RMTB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0xE8), 
                    BTTH,   1
                }

                If ((BTTH == One))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (PTHH)
        {
            Name (_HID, "INTC1001")  // _HID: Hardware ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PTHM == 0x02))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xFE100000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFC800000,         // Address Base
                    0x00800000,         // Address Length
                    )
            })
            OperationRegion (MTBR, SystemMemory, 0xFE100000, 0x0100)
            Field (MTBR, AnyAcc, NoLock, Preserve)
            {
                Offset (0xE8), 
                BHTH,   1
            }

            Method (THEN, 0, Serialized)
            {
                If ((BHTH == One))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PC00.LPCB)
    {
        Device (EC)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_GPE, 0x6E)  // _GPE: General Purpose Events
            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    H8DR = Arg1
                }

                If ((OSYS < 0x07DC))
                {
                    DHSM = One
                }
            }

            OperationRegion (ECOR, EmbeddedControl, Zero, 0x0100)
            Field (ECOR, ByteAcc, NoLock, Preserve)
            {
                HDBM,   1, 
                    ,   1, 
                    ,   1, 
                HFNE,   1, 
                    ,   1, 
                    ,   1, 
                HLDM,   1, 
                Offset (0x01), 
                BBLS,   1, 
                BTCM,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                HBPR,   1, 
                BTPC,   1, 
                Offset (0x02), 
                HDUE,   1, 
                    ,   4, 
                SNLK,   1, 
                Offset (0x03), 
                DHSM,   1, 
                    ,   4, 
                HAUM,   2, 
                Offset (0x05), 
                HSPA,   1, 
                Offset (0x06), 
                HSUN,   8, 
                HSRP,   8, 
                Offset (0x0C), 
                HLCL,   8, 
                    ,   4, 
                CALM,   1, 
                Offset (0x0E), 
                HFNS,   2, 
                Offset (0x0F), 
                    ,   6, 
                NULS,   1, 
                ANTT,   1, 
                HAM0,   8, 
                HAM1,   8, 
                HAM2,   8, 
                HAM3,   8, 
                HAM4,   8, 
                HAM5,   8, 
                HAM6,   8, 
                HAM7,   8, 
                HAM8,   8, 
                HAM9,   8, 
                HAMA,   8, 
                HAMB,   8, 
                HAMC,   8, 
                HAMD,   8, 
                HAME,   8, 
                HAMF,   8, 
                Offset (0x23), 
                HANT,   8, 
                Offset (0x26), 
                    ,   2, 
                HANA,   2, 
                Offset (0x27), 
                Offset (0x28), 
                    ,   1, 
                SKEM,   1, 
                DIST,   1, 
                Offset (0x29), 
                Offset (0x2A), 
                HATR,   8, 
                HT0H,   8, 
                HT0L,   8, 
                HT1H,   8, 
                HT1L,   8, 
                HFSP,   8, 
                    ,   6, 
                HMUT,   1, 
                Offset (0x31), 
                    ,   2, 
                HUWB,   1, 
                    ,   3, 
                VPON,   1, 
                VRST,   1, 
                HWPM,   1, 
                HWLB,   1, 
                HWLO,   1, 
                HWDK,   1, 
                HWFN,   1, 
                HWBT,   1, 
                HWRI,   1, 
                HWBU,   1, 
                HWLU,   1, 
                Offset (0x34), 
                    ,   3, 
                PIBS,   1, 
                    ,   3, 
                HPLO,   1, 
                    ,   4, 
                FANE,   1, 
                Offset (0x36), 
                HWAC,   16, 
                HB0S,   7, 
                HB0A,   1, 
                HB1S,   7, 
                HB1A,   1, 
                HCMU,   1, 
                    ,   2, 
                OVRQ,   1, 
                DCBD,   1, 
                DCWL,   1, 
                DCWW,   1, 
                HB1I,   1, 
                    ,   1, 
                KBLT,   1, 
                BTPW,   1, 
                FNKC,   1, 
                HUBS,   1, 
                BDPW,   1, 
                BDDT,   1, 
                HUBB,   1, 
                Offset (0x46), 
                    ,   1, 
                BTWK,   1, 
                HPLD,   1, 
                    ,   1, 
                HPAC,   1, 
                BTST,   1, 
                PSST,   1, 
                Offset (0x47), 
                HPBU,   1, 
                PSS2,   1, 
                HBID,   1, 
                    ,   3, 
                PWSE,   1, 
                HPNF,   1, 
                    ,   1, 
                GSTS,   1, 
                    ,   2, 
                HLBU,   1, 
                DOCD,   1, 
                HCBL,   1, 
                Offset (0x49), 
                SLUL,   1, 
                    ,   1, 
                ACAT,   1, 
                    ,   4, 
                ELNK,   1, 
                Offset (0x4C), 
                HTMH,   8, 
                HTML,   8, 
                HWAK,   16, 
                HMPR,   8, 
                    ,   7, 
                HMDN,   1, 
                Offset (0x78), 
                TMP0,   8, 
                GPUT,   8, 
                TTS1,   8, 
                TTS6,   8, 
                TTS2,   8, 
                TTS3,   8, 
                TTS4,   8, 
                CFWU,   1, 
                QCON,   1, 
                    ,   5, 
                CFWL,   1, 
                Offset (0x81), 
                HIID,   8, 
                Offset (0x83), 
                HFNI,   8, 
                HSPD,   16, 
                Offset (0x88), 
                TSL0,   7, 
                TSR0,   1, 
                TSL1,   7, 
                TSR1,   1, 
                TSL2,   7, 
                TSR2,   1, 
                TSL3,   7, 
                TSR3,   1, 
                CPUI,   4, 
                GPUI,   4, 
                HDAA,   3, 
                HDAB,   3, 
                HDAC,   2, 
                Offset (0xB0), 
                BSC0,   8, 
                BEC0,   8, 
                BSC1,   8, 
                BEC1,   8, 
                HDEP,   32, 
                HDEM,   8, 
                HDES,   8, 
                Offset (0xC4), 
                CQLS,   1, 
                SMCS,   1, 
                Offset (0xC5), 
                Offset (0xC6), 
                DPRL,   1, 
                    ,   6, 
                TSN0,   1, 
                Offset (0xC8), 
                ATMX,   8, 
                HWAT,   8, 
                Offset (0xCB), 
                TTCI,   8, 
                PWMH,   8, 
                PWML,   8, 
                Offset (0xCF), 
                    ,   4, 
                ESFL,   1, 
                ESLS,   1, 
                ESLP,   1, 
                Offset (0xD0), 
                Offset (0xED), 
                    ,   4, 
                HDDD,   1
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                ADBG ("H8 _INI")
                If (H8DR)
                {
                    HSPA = Zero
                }
                Else
                {
                    MBEC (0x05, 0xFE, Zero)
                }

                ^HKEY.WGIN ()
                If ((WLAC == 0x02)) {}
                ElseIf ((ELNK && (WLAC == One)))
                {
                    DCWL = Zero
                }
                Else
                {
                    DCWL = One
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
            })
            Method (LED, 2, NotSerialized)
            {
                Local0 = (Arg0 | Arg1)
                If (H8DR)
                {
                    HLCL = Local0
                }
                Else
                {
                    WBEC (0x0C, Local0)
                }
            }

            Name (BAON, Zero)
            Name (WBON, Zero)
            Method (BEEP, 1, NotSerialized)
            {
                If ((Arg0 == 0x05))
                {
                    WBON = Zero
                }

                Local2 = WBON /* \_SB_.PC00.LPCB.EC__.WBON */
                If (BAON)
                {
                    If ((Arg0 == Zero))
                    {
                        BAON = Zero
                        If (WBON)
                        {
                            Local0 = 0x03
                            Local1 = 0x08
                        }
                        Else
                        {
                            Local0 = Zero
                            Local1 = Zero
                        }
                    }
                    Else
                    {
                        Local0 = 0xFF
                        Local1 = 0xFF
                        If ((Arg0 == 0x11))
                        {
                            WBON = Zero
                        }

                        If ((Arg0 == 0x10))
                        {
                            WBON = One
                        }
                    }
                }
                Else
                {
                    Local0 = Arg0
                    Local1 = 0xFF
                    If ((Arg0 == 0x0F))
                    {
                        Local0 = Arg0
                        Local1 = 0x08
                        BAON = One
                    }

                    If ((Arg0 == 0x11))
                    {
                        Local0 = Zero
                        Local1 = Zero
                        WBON = Zero
                    }

                    If ((Arg0 == 0x10))
                    {
                        Local0 = 0x03
                        Local1 = 0x08
                        WBON = One
                    }
                }

                If ((Arg0 == 0x03))
                {
                    WBON = Zero
                    If (Local2)
                    {
                        Local0 = 0x07
                        If (((SPS == 0x03) || (SPS == 0x04)))
                        {
                            Local2 = Zero
                            Local0 = 0xFF
                            Local1 = 0xFF
                        }
                    }
                }

                If ((Arg0 == 0x07))
                {
                    If (Local2)
                    {
                        Local2 = Zero
                        Local0 = 0xFF
                        Local1 = 0xFF
                    }
                }

                If (H8DR)
                {
                    If ((Local2 && !WBON))
                    {
                        HSRP = Zero
                        HSUN = Zero
                        Sleep (0x64)
                    }

                    If ((Local1 != 0xFF))
                    {
                        HSRP = Local1
                    }

                    If ((Local0 != 0xFF))
                    {
                        HSUN = Local0
                    }
                }
                Else
                {
                    If ((Local2 && !WBON))
                    {
                        WBEC (0x07, Zero)
                        WBEC (0x06, Zero)
                        Sleep (0x64)
                    }

                    If ((Local1 != 0xFF))
                    {
                        WBEC (0x07, Local1)
                    }

                    If ((Local0 != 0xFF))
                    {
                        WBEC (0x06, Local0)
                    }
                }

                If ((Arg0 == 0x03)) {}
                If ((Arg0 == 0x07))
                {
                    Sleep (0x01F4)
                }
            }

            Method (EVNT, 1, NotSerialized)
            {
                If (H8DR)
                {
                    If (Arg0)
                    {
                        HAM5 |= 0x04
                    }
                    Else
                    {
                        HAM5 &= 0xFB
                    }
                }
                ElseIf (Arg0)
                {
                    MBEC (0x15, 0xFF, 0x04)
                }
                Else
                {
                    MBEC (0x15, 0xFB, Zero)
                }
            }

            Name (USPS, Zero)
            PowerResource (PUBS, 0x03, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (H8DR)
                    {
                        Local0 = HUBS /* \_SB_.PC00.LPCB.EC__.HUBS */
                    }
                    Else
                    {
                        Local0 = (RBEC (0x3B) & 0x10)
                    }

                    If (Local0)
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    Local0 = 0x64
                    While ((USPS && Local0))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If (H8DR)
                    {
                        HUBS = One
                    }
                    Else
                    {
                        MBEC (0x3B, 0xFF, 0x10)
                    }
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    USPS = One
                    If (H8DR)
                    {
                        HUBS = Zero
                    }
                    Else
                    {
                        MBEC (0x3B, 0xEF, Zero)
                    }

                    Sleep (0x14)
                    USPS = Zero
                }
            }

            Method (CHKS, 0, NotSerialized)
            {
                Local0 = 0x03E8
                While (HMPR)
                {
                    Sleep (One)
                    Local0--
                    If (!Local0)
                    {
                        Return (0x8080)
                    }
                }

                If (HMDN)
                {
                    Return (Zero)
                }

                Return (0x8081)
            }

            Method (LPMD, 0, NotSerialized)
            {
                Local0 = Zero
                Local1 = Zero
                Local2 = Zero
                If (H8DR)
                {
                    If (HPAC)
                    {
                        If (HPLO)
                        {
                            Local0 = LPST /* \LPST */
                        }
                        ElseIf ((HWAT < 0x5A))
                        {
                            If (HB0A)
                            {
                                If (((HB0S & 0x10) || ((HB0S & 0x07) < 0x02)))
                                {
                                    Local1 = One
                                }
                            }
                            Else
                            {
                                Local1 = One
                            }

                            If (HB1A)
                            {
                                If (((HB1S & 0x10) || ((HB1S & 0x07) < 0x02)))
                                {
                                    Local2 = One
                                }
                            }
                            Else
                            {
                                Local2 = One
                            }

                            If ((Local1 && Local2))
                            {
                                Local0 = LPST /* \LPST */
                            }
                        }
                    }
                }
                ElseIf ((RBEC (0x46) & 0x10))
                {
                    If ((RBEC (0x34) & 0x80))
                    {
                        Local0 = LPST /* \LPST */
                    }
                    ElseIf ((RBEC (0xC9) < 0x5A))
                    {
                        Local3 = RBEC (0x38)
                        If ((Local3 & 0x80))
                        {
                            If (((Local3 & 0x10) || ((Local3 & 0x07) < 0x02)))
                            {
                                Local1 = One
                            }
                        }
                        Else
                        {
                            Local2 = One
                        }

                        Local3 = RBEC (0x39)
                        If ((Local3 & 0x80))
                        {
                            If (((Local3 & 0x10) || ((Local3 & 0x07) < 0x02)))
                            {
                                Local1 = One
                            }
                        }
                        Else
                        {
                            Local2 = One
                        }

                        If ((Local1 && Local2))
                        {
                            Local0 = LPST /* \LPST */
                        }
                    }
                }

                Return (Local0)
            }

            Method (CLPM, 0, NotSerialized)
            {
                If ((CFGD & One))
                {
                    If ((OSPX || CPPX))
                    {
                        PNTF (0x80)
                    }
                    Else
                    {
                        Local0 = LPMD ()
                        If (Local0)
                        {
                            STEP (0x04)
                        }
                        Else
                        {
                            STEP (0x05)
                        }
                    }
                }
            }

            Method (ECNT, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        If ((ISGD == Zero))
                        {
                            If (FSTA)
                            {
                                SGOV (0x090E0007, One)
                            }
                        }

                        If ((^HKEY.MSCB == Zero))
                        {
                            If (H8DR)
                            {
                                ESLS = Zero
                            }
                            Else
                            {
                                Local0 = RBEC (0xCF)
                                Local0 &= 0xFFFFFFFFFFFFFFDF
                                WBEC (0xCF, Local0)
                            }

                            LED (0x0A, 0x80)
                            LED (Zero, 0x80)
                        }

                        SCMS (0x21)
                        Return (Zero)
                    }
                    Case (One)
                    {
                        If ((ISGD == Zero))
                        {
                            If (FSTA)
                            {
                                SGOV (0x090E0007, Zero)
                            }
                        }

                        If ((^HKEY.MSCB == Zero))
                        {
                            If (H8DR)
                            {
                                ESLS = One
                            }
                            Else
                            {
                                Local1 = RBEC (0xCF)
                                Local1 |= 0x20
                                WBEC (0xCF, Local1)
                            }

                            LED (Zero, 0xA0)
                            LED (0x0A, 0xA0)
                        }

                        Return (Zero)
                    }
                    Case (0x02)
                    {
                        If (H8DR)
                        {
                            ESLP = Zero
                        }
                        Else
                        {
                            Local0 = RBEC (0xCF)
                            Local0 &= 0xFFFFFFFFFFFFFFBF
                            WBEC (0xCF, Local0)
                        }

                        SGOV (0x090E000A, One)
                        Sleep (0x0A)
                        Return (Zero)
                    }
                    Case (0x03)
                    {
                        If (H8DR)
                        {
                            ESLP = One
                        }
                        Else
                        {
                            Local1 = RBEC (0xCF)
                            Local1 |= 0x40
                            WBEC (0xCF, Local1)
                        }

                        SGOV (0x090E000A, Zero)
                        Return (Zero)
                    }
                    Case (0x04)
                    {
                        If (H8DR)
                        {
                            ESLS = Zero
                        }
                        Else
                        {
                            Local0 = RBEC (0xCF)
                            Local0 &= 0xFFFFFFFFFFFFFFDF
                            WBEC (0xCF, Local0)
                        }

                        LED (0x0A, 0x80)
                        LED (Zero, 0x80)
                        SCMS (0x21)
                        Return (Zero)
                    }
                    Case (0x05)
                    {
                        If (H8DR)
                        {
                            ESLS = One
                        }
                        Else
                        {
                            Local1 = RBEC (0xCF)
                            Local1 |= 0x20
                            WBEC (0xCF, Local1)
                        }

                        LED (Zero, 0xA0)
                        LED (0x0A, 0xA0)
                        Return (Zero)
                    }
                    Default
                    {
                        Return (0xFF)
                    }

                }
            }

            Method (GSTM, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (TMP0) /* \_SB_.PC00.LPCB.EC__.TMP0 */
                    }
                    Case (One)
                    {
                        If ((GPUT == 0x80))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (GPUT) /* \_SB_.PC00.LPCB.EC__.GPUT */
                        }
                    }
                    Case (0x02)
                    {
                        Return (TTS1) /* \_SB_.PC00.LPCB.EC__.TTS1 */
                    }
                    Case (0x03)
                    {
                        Return (TTS2) /* \_SB_.PC00.LPCB.EC__.TTS2 */
                    }
                    Case (0x04)
                    {
                        Return (TTS3) /* \_SB_.PC00.LPCB.EC__.TTS3 */
                    }
                    Case (0x05)
                    {
                        Return (TTS4) /* \_SB_.PC00.LPCB.EC__.TTS4 */
                    }
                    Case (0x06)
                    {
                        Return (GPUT) /* \_SB_.PC00.LPCB.EC__.GPUT */
                    }
                    Case (0x07)
                    {
                        Return (TTS6) /* \_SB_.PC00.LPCB.EC__.TTS6 */
                    }
                    Default
                    {
                        Return (TMP0) /* \_SB_.PC00.LPCB.EC__.TMP0 */
                    }

                }
            }

            Device (HKEY)
            {
                Name (_HID, EisaId ("LEN0268"))  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    ADBG ("HKEY _INI")
                    ADBG ("_INI0")
                    ANGN = Zero
                    DYTC (0x800F0001)
                    ADBG ("_INI1")
                }

                Method (MHKV, 0, NotSerialized)
                {
                    Return (0x0200)
                }

                Name (DHKC, Zero)
                Name (DHKB, One)
                Name (DHKH, Zero)
                Name (DHKW, Zero)
                Name (DHKS, Zero)
                Name (DHKD, Zero)
                Name (DHKN, 0x0808)
                Name (DHKE, Zero)
                Name (DHKF, 0x01FF4000)
                Name (DHKT, Zero)
                Name (DHWW, Zero)
                Name (DHDF, Zero)
                Mutex (XDHK, 0x00)
                Method (MHKA, 1, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        Return (0x03)
                    }
                    ElseIf ((Arg0 == One))
                    {
                        Return (0xFFFFFFFB)
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        Return (Zero)
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        Return (0x01FF4000)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (MHKN, 1, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        Return (0x03)
                    }
                    ElseIf ((Arg0 == One))
                    {
                        Return (DHKN) /* \_SB_.PC00.LPCB.EC__.HKEY.DHKN */
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        Return (DHKE) /* \_SB_.PC00.LPCB.EC__.HKEY.DHKE */
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        Return (DHKF) /* \_SB_.PC00.LPCB.EC__.HKEY.DHKF */
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (MHKK, 2, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        Return (0x03)
                    }
                    ElseIf (DHKC)
                    {
                        If ((Arg0 == One))
                        {
                            Return ((DHKN & Arg1))
                        }
                        ElseIf ((Arg0 == 0x02))
                        {
                            Return ((DHKE & Arg1))
                        }
                        ElseIf ((Arg0 == 0x03))
                        {
                            Return ((DHKF & Arg1))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (MHKM, 2, NotSerialized)
                {
                    Acquire (XDHK, 0xFFFF)
                    If ((Arg0 > 0x60))
                    {
                        Noop
                    }
                    ElseIf ((Arg0 <= 0x20))
                    {
                        Local0 = (One << Arg0--)
                        If ((Local0 & 0xFFFFFFFB))
                        {
                            If (Arg1)
                            {
                                DHKN |= Local0 /* \_SB_.PC00.LPCB.EC__.HKEY.DHKN */
                            }
                            Else
                            {
                                DHKN &= (Local0 ^ 0xFFFFFFFF)
                            }
                        }
                        Else
                        {
                            Noop
                        }
                    }
                    ElseIf ((Arg0 <= 0x40))
                    {
                        Noop
                    }
                    ElseIf ((Arg0 <= 0x60))
                    {
                        Arg0 -= 0x40
                        Local0 = (One << Arg0--)
                        If ((Local0 & 0x01FF4000))
                        {
                            If (Arg1)
                            {
                                DHKF |= Local0 /* \_SB_.PC00.LPCB.EC__.HKEY.DHKF */
                            }
                            Else
                            {
                                DHKF &= (Local0 ^ 0xFFFFFFFF)
                            }
                        }
                        Else
                        {
                            Noop
                        }
                    }

                    Release (XDHK)
                }

                Method (MHKS, 0, NotSerialized)
                {
                    Notify (SLPB, 0x80) // Status Change
                }

                Method (MHKC, 1, NotSerialized)
                {
                    DHKC = Arg0
                }

                Method (MHKP, 0, NotSerialized)
                {
                    Acquire (XDHK, 0xFFFF)
                    If (DHWW)
                    {
                        Local1 = DHWW /* \_SB_.PC00.LPCB.EC__.HKEY.DHWW */
                        DHWW = Zero
                    }
                    ElseIf (DHDF)
                    {
                        Local1 = DHDF /* \_SB_.PC00.LPCB.EC__.HKEY.DHDF */
                        DHDF = Zero
                    }
                    ElseIf (DHKW)
                    {
                        Local1 = DHKW /* \_SB_.PC00.LPCB.EC__.HKEY.DHKW */
                        DHKW = Zero
                    }
                    ElseIf (DHKD)
                    {
                        Local1 = DHKD /* \_SB_.PC00.LPCB.EC__.HKEY.DHKD */
                        DHKD = Zero
                    }
                    ElseIf (DHKS)
                    {
                        Local1 = DHKS /* \_SB_.PC00.LPCB.EC__.HKEY.DHKS */
                        DHKS = Zero
                    }
                    ElseIf (DHKT)
                    {
                        Local1 = DHKT /* \_SB_.PC00.LPCB.EC__.HKEY.DHKT */
                        DHKT = Zero
                    }
                    Else
                    {
                        Local1 = DHKH /* \_SB_.PC00.LPCB.EC__.HKEY.DHKH */
                        DHKH = Zero
                    }

                    Release (XDHK)
                    Return (Local1)
                }

                Method (MHKE, 1, Serialized)
                {
                    DHKB = Arg0
                    Acquire (XDHK, 0xFFFF)
                    DHKH = Zero
                    DHKW = Zero
                    DHKS = Zero
                    DHKD = Zero
                    DHKT = Zero
                    DHWW = Zero
                    DHDF = Zero
                    Release (XDHK)
                }

                Method (MHKQ, 1, Serialized)
                {
                    If (DHKB)
                    {
                        If (DHKC)
                        {
                            Acquire (XDHK, 0xFFFF)
                            If ((Arg0 < 0x1000)) {}
                            ElseIf ((Arg0 < 0x2000))
                            {
                                DHKH = Arg0
                            }
                            ElseIf ((Arg0 < 0x3000))
                            {
                                DHKW = Arg0
                            }
                            ElseIf ((Arg0 < 0x4000))
                            {
                                DHKS = Arg0
                            }
                            ElseIf ((Arg0 < 0x5000))
                            {
                                DHKD = Arg0
                            }
                            ElseIf ((Arg0 < 0x6000))
                            {
                                DHKH = Arg0
                            }
                            ElseIf ((Arg0 < 0x7000))
                            {
                                DHKT = Arg0
                            }
                            ElseIf ((Arg0 < 0x8000))
                            {
                                DHWW = Arg0
                            }
                            ElseIf ((Arg0 < 0x9000))
                            {
                                DHDF = Arg0
                            }
                            Else
                            {
                            }

                            Release (XDHK)
                            Notify (HKEY, 0x80) // Status Change
                        }
                        ElseIf ((Arg0 == 0x1004))
                        {
                            Notify (SLPB, 0x80) // Status Change
                        }
                    }
                }

                Method (MHKB, 1, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        BEEP (0x11)
                        LIDB = Zero
                    }
                    ElseIf ((Arg0 == One))
                    {
                        BEEP (0x10)
                        LIDB = One
                    }
                    Else
                    {
                    }
                }

                Method (MHKD, 0, NotSerialized)
                {
                    If ((PLUX == Zero))
                    {
                        If (VIGD)
                        {
                            ^^^^GFX0.VLOC (Zero)
                        }
                    }
                }

                Method (MHQC, 1, NotSerialized)
                {
                    If (WNTF)
                    {
                        If ((Arg0 == Zero))
                        {
                            Return (CWAC) /* \CWAC */
                        }
                        ElseIf ((Arg0 == One))
                        {
                            Return (CWAP) /* \CWAP */
                        }
                        ElseIf ((Arg0 == 0x02))
                        {
                            Return (CWAT) /* \CWAT */
                        }
                        Else
                        {
                            Noop
                        }
                    }
                    Else
                    {
                        Noop
                    }

                    Return (Zero)
                }

                Method (MHGC, 0, NotSerialized)
                {
                    If (WNTF)
                    {
                        Acquire (XDHK, 0xFFFF)
                        If (CKC4 (Zero))
                        {
                            Local0 = 0x03
                        }
                        Else
                        {
                            Local0 = 0x04
                        }

                        Release (XDHK)
                        Return (Local0)
                    }
                    Else
                    {
                        Noop
                    }

                    Return (Zero)
                }

                Method (MHSC, 1, NotSerialized)
                {
                    If ((CWAC && WNTF))
                    {
                        Acquire (XDHK, 0xFFFF)
                        If (OSC4)
                        {
                            If ((Arg0 == 0x03))
                            {
                                If (!CWAS)
                                {
                                    PNTF (0x81)
                                    CWAS = One
                                }
                            }
                            ElseIf ((Arg0 == 0x04))
                            {
                                If (CWAS)
                                {
                                    PNTF (0x81)
                                    CWAS = Zero
                                }
                            }
                            Else
                            {
                                Noop
                            }
                        }

                        Release (XDHK)
                    }
                    Else
                    {
                        Noop
                    }
                }

                Method (CKC4, 1, NotSerialized)
                {
                    Local0 = Zero
                    If (C4WR)
                    {
                        If (!C4AC)
                        {
                            Local0 |= One
                        }
                    }

                    If (C4NA)
                    {
                        Local0 |= 0x02
                    }

                    If ((CWAC && CWAS))
                    {
                        Local0 |= 0x04
                    }

                    Local0 &= ~Arg0
                    Return (Local0)
                }

                Method (MHQE, 0, NotSerialized)
                {
                    Return (C4WR) /* \C4WR */
                }

                Method (MHGE, 0, NotSerialized)
                {
                    If ((C4WR && C4AC))
                    {
                        Return (0x04)
                    }

                    Return (0x03)
                }

                Method (MHSE, 1, NotSerialized)
                {
                    If (C4WR)
                    {
                        Local0 = C4AC /* \C4AC */
                        If ((Arg0 == 0x03))
                        {
                            C4AC = Zero
                            If ((Local0 ^ C4AC))
                            {
                                If (OSC4)
                                {
                                    PNTF (0x81)
                                }
                            }
                        }
                        ElseIf ((Arg0 == 0x04))
                        {
                            C4AC = One
                            If ((Local0 ^ C4AC))
                            {
                                If (OSC4)
                                {
                                    PNTF (0x81)
                                }
                            }
                        }
                    }
                }

                Method (UAWO, 1, NotSerialized)
                {
                    Return (UAWS (Arg0))
                }

                Method (MLCG, 1, NotSerialized)
                {
                    Local0 = KBLS (Zero, Zero)
                    Return (Local0)
                }

                Method (MLCS, 1, NotSerialized)
                {
                    Local0 = KBLS (One, Arg0)
                    If (!(Local0 & 0x80000000))
                    {
                        If ((Arg0 & 0x00010000))
                        {
                            MHKQ (0x6001)
                        }
                        ElseIf (MHKK (One, 0x00020000))
                        {
                            MHKQ (0x1012)
                        }
                    }

                    Return (Local0)
                }

                Method (DSSG, 1, NotSerialized)
                {
                    Local0 = (0x0400 | PDCI) /* \PDCI */
                    Return (Local0)
                }

                Method (DSSS, 1, NotSerialized)
                {
                    PDCI |= Arg0
                }

                Method (SBSG, 1, NotSerialized)
                {
                    Return (SYBC (Zero, Zero))
                }

                Method (SBSS, 1, NotSerialized)
                {
                    Return (SYBC (One, Arg0))
                }

                Method (PBLG, 1, NotSerialized)
                {
                    Local0 = BRLV /* \BRLV */
                    Local1 = (Local0 | 0x0F00)
                    Return (Local1)
                }

                Method (PBLS, 1, NotSerialized)
                {
                    BRLV = Arg0
                    If (VIGD)
                    {
                        BRNS ()
                    }
                    Else
                    {
                        VBRC (BRLV)
                    }

                    If (!NBCF)
                    {
                        MHKQ (0x6050)
                    }

                    Return (Zero)
                }

                Method (PMSG, 1, NotSerialized)
                {
                    Local0 = PRSM (Zero, Zero)
                    Return (Local0)
                }

                Method (PMSS, 1, NotSerialized)
                {
                    PRSM (One, Arg0)
                    Return (Zero)
                }

                Method (ISSG, 1, NotSerialized)
                {
                    Local0 = ISSP /* \ISSP */
                    If (ISSP)
                    {
                        Local0 |= 0x01000000
                        Local0 |= (ISFS << 0x19)
                    }

                    Local0 |= (ISCG & 0x30)
                    Local0 &= 0xFFFFFFFE
                    Local0 |= 0x02
                    Local0 |= ((ISWK & 0x02) << 0x02)
                    Return (Local0)
                }

                Method (ISSS, 1, NotSerialized)
                {
                    ISCG = Arg0
                    Return (Zero)
                }

                Method (FFSG, 1, NotSerialized)
                {
                    Return (Zero)
                }

                Method (FFSS, 1, NotSerialized)
                {
                    Return (0x80000000)
                }

                Method (GMKS, 0, NotSerialized)
                {
                    Return (FNSC (0x02, Zero))
                }

                Method (SMKS, 1, NotSerialized)
                {
                    Return (FNSC (0x03, (Arg0 & 0x00010001)))
                }

                Method (GSKL, 1, NotSerialized)
                {
                    Return (FNSC (0x04, (Arg0 & 0x0F000000)))
                }

                Method (SSKL, 1, NotSerialized)
                {
                    Return (FNSC (0x05, (Arg0 & 0x0F00FFFF)))
                }

                Method (INSG, 1, NotSerialized)
                {
                    Local0 = IOEN /* \IOEN */
                    Local0 |= (IOST << 0x07)
                    Local0 |= (IOCP << 0x08)
                    Local0 |= 0x10000000
                    Return (Local0)
                }

                Method (INSS, 1, NotSerialized)
                {
                    If ((Arg0 & 0x10000000))
                    {
                        If (IOCP)
                        {
                            Local0 = ((Arg0 & 0x80) >> 0x07)
                            If (!EZRC (Local0))
                            {
                                IOST = Local0
                            }
                        }

                        Return (Zero)
                    }

                    If ((IOCP && (Arg0 & One)))
                    {
                        IOEN = One
                    }
                    Else
                    {
                        IOEN = Zero
                        If (IOST)
                        {
                            If (!ISOC (Zero))
                            {
                                IOST = Zero
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (SSPI, 1, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        Local0 = 0x0100
                        Return (Local0)
                    }
                    ElseIf ((Arg0 == 0x0100))
                    {
                        Local0 = One
                        Return (Local0)
                    }

                    Return (Zero)
                }
            }

            Device (AC)
            {
                Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
                Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                {
                    _SB
                })
                Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                {
                    If (H8DR)
                    {
                        Return (HPAC) /* \_SB_.PC00.LPCB.EC__.HPAC */
                    }
                    ElseIf ((RBEC (0x46) & 0x10))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }

            Scope (HKEY)
            {
                Method (SMPS, 1, Serialized)
                {
                    If (((Arg0 & 0xFFFFFFFFFFFF0000) != Zero))
                    {
                        Return (0x80000000)
                    }

                    Switch ((Arg0 & 0xFFFF))
                    {
                        Case (Zero)
                        {
                            Local1 = 0x0100
                        }
                        Case (0x0100)
                        {
                            Local1 = HWAT /* \_SB_.PC00.LPCB.EC__.HWAT */
                            Local1 |= 0x002D0000
                        }
                        Default
                        {
                            Local1 = 0x80000000
                        }

                    }

                    Return (Local1)
                }
            }

            Method (_Q22, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                CLPM ()
                If (HB0A)
                {
                    Notify (BAT0, 0x80) // Status Change
                }
            }

            Method (_Q4A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                CLPM ()
                Notify (BAT0, 0x81) // Information Change
            }

            Method (_Q4B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                CLPM ()
                Notify (BAT0, 0x80) // Status Change
            }

            Method (_Q24, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                CLPM ()
                Notify (BAT0, 0x80) // Status Change
            }

            Method (BFCC, 0, NotSerialized)
            {
                If (^BAT0.B0ST)
                {
                    Notify (BAT0, 0x81) // Information Change
                }
            }

            Method (BATW, 1, NotSerialized)
            {
                If (BT2T) {}
            }

            Name (BCLS, Zero)
            Field (ECOR, ByteAcc, NoLock, Preserve)
            {
                Offset (0xA0), 
                SBRC,   16, 
                SBFC,   16, 
                SBAE,   16, 
                SBRS,   16, 
                SBAC,   16, 
                SBVO,   16, 
                SBAF,   16, 
                SBBS,   16
            }

            Field (ECOR, ByteAcc, NoLock, Preserve)
            {
                Offset (0xA0), 
                SBBM,   16, 
                SBMD,   16, 
                SBCC,   16
            }

            Field (ECOR, ByteAcc, NoLock, Preserve)
            {
                Offset (0xA0), 
                SBDC,   16, 
                SBDV,   16, 
                SBOM,   16, 
                SBSI,   16, 
                SBDT,   16, 
                SBSN,   16
            }

            Field (ECOR, ByteAcc, NoLock, Preserve)
            {
                Offset (0xA0), 
                SBCH,   32
            }

            Field (ECOR, ByteAcc, NoLock, Preserve)
            {
                Offset (0xA0), 
                SBMN,   128
            }

            Field (ECOR, ByteAcc, NoLock, Preserve)
            {
                Offset (0xA0), 
                SBDN,   128
            }

            Mutex (BATM, 0x00)
            Method (GBIF, 3, NotSerialized)
            {
                Acquire (BATM, 0xFFFF)
                If (Arg2)
                {
                    HIID = (Arg0 | One)
                    Local7 = SBBM /* \_SB_.PC00.LPCB.EC__.SBBM */
                    Local7 >>= 0x0F
                    Arg1 [Zero] = (Local7 ^ One)
                    HIID = Arg0
                    If (Local7)
                    {
                        Local1 = (SBFC * 0x0A)
                    }
                    Else
                    {
                        Local1 = SBFC /* \_SB_.PC00.LPCB.EC__.SBFC */
                    }

                    Arg1 [0x02] = Local1
                    HIID = (Arg0 | 0x02)
                    If (Local7)
                    {
                        Local0 = (SBDC * 0x0A)
                    }
                    Else
                    {
                        Local0 = SBDC /* \_SB_.PC00.LPCB.EC__.SBDC */
                    }

                    Arg1 [One] = Local0
                    Divide (Local1, 0x14, Local2, Arg1 [0x05])
                    If (Local7)
                    {
                        Arg1 [0x06] = 0xC8
                    }
                    ElseIf (SBDV)
                    {
                        Divide (0x00030D40, SBDV, Local2, Arg1 [0x06])
                    }
                    Else
                    {
                        Arg1 [0x06] = Zero
                    }

                    Arg1 [0x04] = SBDV /* \_SB_.PC00.LPCB.EC__.SBDV */
                    Local0 = SBSN /* \_SB_.PC00.LPCB.EC__.SBSN */
                    Name (SERN, Buffer (0x06)
                    {
                        "     "
                    })
                    Local2 = 0x04
                    While (Local0)
                    {
                        Divide (Local0, 0x0A, Local1, Local0)
                        SERN [Local2] = (Local1 + 0x30)
                        Local2--
                    }

                    Arg1 [0x0A] = SERN /* \_SB_.PC00.LPCB.EC__.GBIF.SERN */
                    HIID = (Arg0 | 0x06)
                    Arg1 [0x09] = SBDN /* \_SB_.PC00.LPCB.EC__.SBDN */
                    HIID = (Arg0 | 0x04)
                    Name (BTYP, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    BTYP = SBCH /* \_SB_.PC00.LPCB.EC__.SBCH */
                    Arg1 [0x0B] = BTYP /* \_SB_.PC00.LPCB.EC__.GBIF.BTYP */
                    HIID = (Arg0 | 0x05)
                    Arg1 [0x0C] = SBMN /* \_SB_.PC00.LPCB.EC__.SBMN */
                }
                Else
                {
                    Arg1 [One] = 0xFFFFFFFF
                    Arg1 [0x05] = Zero
                    Arg1 [0x06] = Zero
                    Arg1 [0x02] = 0xFFFFFFFF
                }

                Release (BATM)
                Return (Arg1)
            }

            Method (GBIX, 3, Serialized)
            {
                Acquire (BATM, 0xFFFF)
                If (Arg2)
                {
                    HIID = (Arg0 | One)
                    Local7 = SBCC /* \_SB_.PC00.LPCB.EC__.SBCC */
                    Arg1 [0x08] = Local7
                    Local7 = SBBM /* \_SB_.PC00.LPCB.EC__.SBBM */
                    Local7 >>= 0x0F
                    Arg1 [One] = (Local7 ^ One)
                    HIID = Arg0
                    If (Local7)
                    {
                        Local1 = (SBFC * 0x0A)
                    }
                    Else
                    {
                        Local1 = SBFC /* \_SB_.PC00.LPCB.EC__.SBFC */
                    }

                    Arg1 [0x03] = Local1
                    HIID = (Arg0 | 0x02)
                    If (Local7)
                    {
                        Local0 = (SBDC * 0x0A)
                    }
                    Else
                    {
                        Local0 = SBDC /* \_SB_.PC00.LPCB.EC__.SBDC */
                    }

                    Arg1 [0x02] = Local0
                    Divide (Local1, 0x14, Local2, Arg1 [0x06])
                    If (Local7)
                    {
                        Arg1 [0x07] = 0xC8
                    }
                    ElseIf (SBDV)
                    {
                        Divide (0x00030D40, SBDV, Local2, Arg1 [0x07])
                    }
                    Else
                    {
                        Arg1 [0x07] = Zero
                    }

                    Arg1 [0x05] = SBDV /* \_SB_.PC00.LPCB.EC__.SBDV */
                    Local0 = SBSN /* \_SB_.PC00.LPCB.EC__.SBSN */
                    Name (SERN, Buffer (0x06)
                    {
                        "     "
                    })
                    Local2 = 0x04
                    While (Local0)
                    {
                        Divide (Local0, 0x0A, Local1, Local0)
                        SERN [Local2] = (Local1 + 0x30)
                        Local2--
                    }

                    Arg1 [0x11] = SERN /* \_SB_.PC00.LPCB.EC__.GBIX.SERN */
                    HIID = (Arg0 | 0x06)
                    Arg1 [0x10] = SBDN /* \_SB_.PC00.LPCB.EC__.SBDN */
                    HIID = (Arg0 | 0x04)
                    Name (BTYP, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    BTYP = SBCH /* \_SB_.PC00.LPCB.EC__.SBCH */
                    Arg1 [0x12] = BTYP /* \_SB_.PC00.LPCB.EC__.GBIX.BTYP */
                    HIID = (Arg0 | 0x05)
                    Arg1 [0x13] = SBMN /* \_SB_.PC00.LPCB.EC__.SBMN */
                }
                Else
                {
                    Arg1 [0x02] = 0xFFFFFFFF
                    Arg1 [0x06] = Zero
                    Arg1 [0x07] = Zero
                    Arg1 [0x03] = 0xFFFFFFFF
                }

                Release (BATM)
                Return (Arg1)
            }

            Method (GBCL, 1, Serialized)
            {
                If ((BCLS == Zero))
                {
                    Return (Zero)
                }

                If ((SMCS == One))
                {
                    Return (One)
                }

                If ((Arg0 == Zero))
                {
                    Local0 = BSC0 /* \_SB_.PC00.LPCB.EC__.BSC0 */
                    Local1 = BEC0 /* \_SB_.PC00.LPCB.EC__.BEC0 */
                }
                Else
                {
                    Local0 = BSC1 /* \_SB_.PC00.LPCB.EC__.BSC1 */
                    Local1 = BEC1 /* \_SB_.PC00.LPCB.EC__.BEC1 */
                }

                If (((Local0 > Zero) && (Local0 <= 0x64)))
                {
                    If (((Local1 > Zero) && (Local1 <= 0x64)))
                    {
                        If ((Local1 > Local0))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Name (B0I0, Zero)
            Name (B0I1, Zero)
            Name (B0I2, Zero)
            Name (B0I3, Zero)
            Name (B1I0, Zero)
            Name (B1I1, Zero)
            Name (B1I2, Zero)
            Name (B1I3, Zero)
            Method (GBST, 4, Serialized)
            {
                Acquire (BATM, 0xFFFF)
                If ((Arg1 & 0x20))
                {
                    Local0 = 0x02
                }
                ElseIf ((Arg1 & 0x40))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Zero
                }

                If ((Arg1 & 0x07)) {}
                Else
                {
                    Local0 |= 0x04
                }

                If (((Arg1 & 0x07) == 0x07))
                {
                    Local1 = 0xFFFFFFFF
                    Local2 = 0xFFFFFFFF
                    Local3 = 0xFFFFFFFF
                }
                Else
                {
                    HIID = Arg0
                    Local3 = SBVO /* \_SB_.PC00.LPCB.EC__.SBVO */
                    If (Arg2)
                    {
                        Local2 = (SBRC * 0x0A)
                    }
                    Else
                    {
                        Local2 = SBRC /* \_SB_.PC00.LPCB.EC__.SBRC */
                    }

                    Local1 = SBAC /* \_SB_.PC00.LPCB.EC__.SBAC */
                    If ((Local1 >= 0x8000))
                    {
                        If ((Local0 & One))
                        {
                            Local1 = (0x00010000 - Local1)
                        }
                        Else
                        {
                            Local1 = Zero
                        }
                    }
                    ElseIf (!(Local0 & 0x02))
                    {
                        Local1 = Zero
                    }

                    If (Arg2)
                    {
                        Local1 *= Local3
                        Local1 /= 0x03E8
                    }
                }

                Local5 = (One << (Arg0 >> 0x04))
                BSWA |= BSWR /* \_SB_.PC00.LPCB.EC__.BSWR */
                If (((BSWA & Local5) == Zero))
                {
                    Arg3 [Zero] = Local0
                    Arg3 [One] = Local1
                    Arg3 [0x02] = Local2
                    Arg3 [0x03] = Local3
                    If ((Arg0 == Zero))
                    {
                        B0I0 = Local0
                        B0I1 = Local1
                        B0I2 = Local2
                        B0I3 = Local3
                    }
                    Else
                    {
                        B1I0 = Local0
                        B1I1 = Local1
                        B1I2 = Local2
                        B1I3 = Local3
                    }
                }
                Else
                {
                    If (^AC._PSR ())
                    {
                        If ((Arg0 == Zero))
                        {
                            Arg3 [Zero] = B0I0 /* \_SB_.PC00.LPCB.EC__.B0I0 */
                            Arg3 [One] = B0I1 /* \_SB_.PC00.LPCB.EC__.B0I1 */
                            Arg3 [0x02] = B0I2 /* \_SB_.PC00.LPCB.EC__.B0I2 */
                            Arg3 [0x03] = B0I3 /* \_SB_.PC00.LPCB.EC__.B0I3 */
                        }
                        Else
                        {
                            Arg3 [Zero] = B1I0 /* \_SB_.PC00.LPCB.EC__.B1I0 */
                            Arg3 [One] = B1I1 /* \_SB_.PC00.LPCB.EC__.B1I1 */
                            Arg3 [0x02] = B1I2 /* \_SB_.PC00.LPCB.EC__.B1I2 */
                            Arg3 [0x03] = B1I3 /* \_SB_.PC00.LPCB.EC__.B1I3 */
                        }
                    }
                    Else
                    {
                        Arg3 [Zero] = Local0
                        Arg3 [One] = Local1
                        Arg3 [0x02] = Local2
                        Arg3 [0x03] = Local3
                    }

                    If ((((Local0 & 0x04) == Zero) && ((Local2 > Zero) && 
                        (Local3 > Zero))))
                    {
                        BSWA &= ~Local5
                        Arg3 [Zero] = Local0
                        Arg3 [One] = Local1
                        Arg3 [0x02] = Local2
                        Arg3 [0x03] = Local3
                    }
                }

                Release (BATM)
                If (GBCL (Arg0))
                {
                    Local0 |= 0x08
                    Arg3 [Zero] = Local0
                }

                Return (Arg3)
            }

            Name (BSWR, Zero)
            Name (BSWA, Zero)
            Method (AJTP, 3, NotSerialized)
            {
                Local0 = Arg1
                Acquire (BATM, 0xFFFF)
                HIID = Arg0
                Local1 = SBRC /* \_SB_.PC00.LPCB.EC__.SBRC */
                Release (BATM)
                If ((Arg0 == Zero))
                {
                    Local2 = HB0S /* \_SB_.PC00.LPCB.EC__.HB0S */
                }
                Else
                {
                    Local2 = HB1S /* \_SB_.PC00.LPCB.EC__.HB1S */
                }

                If ((Local2 & 0x20))
                {
                    If ((Arg2 > Zero))
                    {
                        Local0 += One
                    }

                    If ((Local0 <= Local1))
                    {
                        Local0 = (Local1 + One)
                    }
                }
                ElseIf ((Local2 & 0x40))
                {
                    If ((Local0 >= Local1))
                    {
                        Local0 = (Local1 - One)
                    }
                }

                Return (Local0)
            }

            Device (BAT0)
            {
                Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
                Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                {
                    _SB
                })
                Name (B0ST, Zero)
                Name (BT0I, Package (0x0D)
                {
                    Zero, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    One, 
                    0x2A30, 
                    Zero, 
                    Zero, 
                    One, 
                    One, 
                    "", 
                    "", 
                    "", 
                    ""
                })
                Name (BX0I, Package (0x15)
                {
                    One, 
                    Zero, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    One, 
                    0xFFFFFFFF, 
                    Zero, 
                    Zero, 
                    0xFFFFFFFF, 
                    0x00017318, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0x03E8, 
                    0x01F4, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    "", 
                    "", 
                    "", 
                    "", 
                    Zero
                })
                Name (BT0P, Package (0x04) {})
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (H8DR)
                    {
                        B0ST = HB0A /* \_SB_.PC00.LPCB.EC__.HB0A */
                    }
                    ElseIf ((RBEC (0x38) & 0x80))
                    {
                        B0ST = One
                    }
                    Else
                    {
                        B0ST = Zero
                    }

                    If (B0ST)
                    {
                        Return (0x1F)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                {
                    Local7 = Zero
                    Local6 = 0x0A
                    While ((!Local7 && Local6))
                    {
                        If (HB0A)
                        {
                            If (((HB0S & 0x07) == 0x07))
                            {
                                Sleep (0x03E8)
                                Local6--
                            }
                            Else
                            {
                                Local7 = One
                            }
                        }
                        Else
                        {
                            Local6 = Zero
                        }
                    }

                    GBIX (Zero, BX0I, Local7)
                    BT0I [Zero] = DerefOf (BX0I [One])
                    BT0I [One] = DerefOf (BX0I [0x02])
                    BT0I [0x02] = DerefOf (BX0I [0x03])
                    BT0I [0x03] = DerefOf (BX0I [0x04])
                    BT0I [0x04] = DerefOf (BX0I [0x05])
                    BT0I [0x05] = DerefOf (BX0I [0x06])
                    BT0I [0x06] = DerefOf (BX0I [0x07])
                    BT0I [0x07] = DerefOf (BX0I [0x0E])
                    BT0I [0x08] = DerefOf (BX0I [0x0F])
                    BT0I [0x09] = DerefOf (BX0I [0x10])
                    BT0I [0x0A] = DerefOf (BX0I [0x11])
                    BT0I [0x0B] = DerefOf (BX0I [0x12])
                    BT0I [0x0C] = DerefOf (BX0I [0x13])
                    Return (BT0I) /* \_SB_.PC00.LPCB.EC__.BAT0.BT0I */
                }

                Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
                {
                    Local7 = Zero
                    Local6 = 0x0A
                    While ((!Local7 && Local6))
                    {
                        If (HB0A)
                        {
                            If (((HB0S & 0x07) == 0x07))
                            {
                                Sleep (0x03E8)
                                Local6--
                            }
                            Else
                            {
                                Local7 = One
                            }
                        }
                        Else
                        {
                            Local6 = Zero
                        }
                    }

                    Return (GBIX (Zero, BX0I, Local7))
                }

                Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                {
                    Local0 = (DerefOf (BX0I [One]) ^ One)
                    GBST (Zero, HB0S, Local0, BT0P)
                    If (((HB0S & 0x07) != Zero))
                    {
                        If ((DerefOf (BT0P [0x02]) == Zero))
                        {
                            Sleep (0x14)
                            GBST (Zero, HB0S, Local0, BT0P)
                        }
                    }

                    If (((HB0S & 0x07) == 0x07))
                    {
                        BT0P [One] = 0xFFFFFFFF
                        BT0P [0x02] = 0xFFFFFFFF
                        BT0P [0x03] = 0xFFFFFFFF
                    }

                    Return (BT0P) /* \_SB_.PC00.LPCB.EC__.BAT0.BT0P */
                }

                Method (_BTP, 1, NotSerialized)  // _BTP: Battery Trip Point
                {
                    HAM4 &= 0xEF
                    If (Arg0)
                    {
                        Local0 = Zero
                        Local1 = Arg0
                        If (!DerefOf (BX0I [One]))
                        {
                            Divide (Local1, 0x0A, Local0, Local1)
                        }

                        Local1 = AJTP (Zero, Local1, Local0)
                        HT0L = (Local1 & 0xFF)
                        HT0H = ((Local1 >> 0x08) & 0xFF)
                        HAM4 |= 0x10
                    }
                }
            }

            Scope (HKEY)
            {
                Method (SCRQ, 1, Serialized)
                {
                    Name (SCRS, Zero)
                    Local0 = Arg0
                    ADBG (Concatenate ("SCRQ =", ToHexString (Local0)))
                    If (((Local0 & 0x80000000) == Zero))
                    {
                        Switch ((Local0 & 0xFFFF))
                        {
                            Case (Zero)
                            {
                                Local2 = 0x01000000
                            }
                            Case (0x0200)
                            {
                                Return (One)
                            }
                            Case (0x0210)
                            {
                                Return (One)
                            }
                            Case (0x0211)
                            {
                                Return (One)
                            }
                            Case (0x0212)
                            {
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }

                        Return (Local2)
                    }
                    Else
                    {
                        Local2 = 0x40000000
                        Switch ((Local0 & 0xFFFF))
                        {
                            Case (Zero)
                            {
                                Local2 = 0x01000000
                            }
                            Case (0x0200)
                            {
                                Local2 = 0x01000000
                            }
                            Case (0x0210)
                            {
                                SREQ (0x02, Zero, Zero)
                            }
                            Case (0x0211)
                            {
                                SREQ (0x02, One, Zero)
                            }
                            Case (0x0212)
                            {
                                SREQ (0x02, 0x02, Zero)
                            }
                            Default
                            {
                                Local2 = 0x80000001
                            }

                        }

                        Return (Local2)
                    }
                }
            }
        }

        Device (HPET)
        {
            Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    _Y38)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HPTE)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PC00.LPCB.HPET._Y38._BAS, HPT0)  // _BAS: Base Address
                    HPT0 = HPTB /* \HPTB */
                }

                Return (BUF0) /* \_SB_.PC00.LPCB.HPET.BUF0 */
            }
        }

        Device (IPIC)
        {
            Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0020,             // Range Minimum
                    0x0020,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0024,             // Range Minimum
                    0x0024,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0028,             // Range Minimum
                    0x0028,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x002C,             // Range Minimum
                    0x002C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0030,             // Range Minimum
                    0x0030,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0034,             // Range Minimum
                    0x0034,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0038,             // Range Minimum
                    0x0038,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x003C,             // Range Minimum
                    0x003C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A0,             // Range Minimum
                    0x00A0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A4,             // Range Minimum
                    0x00A4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A8,             // Range Minimum
                    0x00A8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00AC,             // Range Minimum
                    0x00AC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B0,             // Range Minimum
                    0x00B0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B4,             // Range Minimum
                    0x00B4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B8,             // Range Minimum
                    0x00B8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00BC,             // Range Minimum
                    0x00BC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x04D0,             // Range Minimum
                    0x04D0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IRQNoFlags ()
                    {2}
            })
        }

        Device (MATH)
        {
            Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x00F0,             // Range Minimum
                    0x00F0,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {13}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PCHS == PCHH))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (LDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x002E,             // Range Minimum
                    0x002E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x004E,             // Range Minimum
                    0x004E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0061,             // Range Minimum
                    0x0061,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0063,             // Range Minimum
                    0x0063,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0065,             // Range Minimum
                    0x0065,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0067,             // Range Minimum
                    0x0067,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0080,             // Range Minimum
                    0x0080,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0092,             // Range Minimum
                    0x0092,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x00B2,             // Range Minimum
                    0x00B2,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0680,             // Range Minimum
                    0x0680,             // Range Maximum
                    0x01,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0x164E,             // Range Minimum
                    0x164E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
            })
        }

        Device (RTC)
        {
            Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                IRQNoFlags ()
                    {8}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((STAS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (TIMR)
        {
            Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0040,             // Range Minimum
                    0x0040,             // Range Maximum
                    0x01,               // Alignment
                    0x04,               // Length
                    )
                IO (Decode16,
                    0x0050,             // Range Minimum
                    0x0050,             // Range Maximum
                    0x10,               // Alignment
                    0x04,               // Length
                    )
                IRQNoFlags ()
                    {0}
            })
        }

        Device (CWDT)
        {
            Name (_HID, "INTC1099")  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x04,               // Alignment
                        0x04,               // Length
                        _Y39)
                })
                CreateWordField (RBUF, \_SB.PC00.LPCB.CWDT._CRS._Y39._MIN, OMIN)  // _MIN: Minimum Base Address
                CreateWordField (RBUF, \_SB.PC00.LPCB.CWDT._CRS._Y39._MAX, OMAX)  // _MAX: Maximum Base Address
                OMIN = (PMBS + 0x54)
                OMAX = (PMBS + 0x54)
                Return (RBUF) /* \_SB_.PC00.LPCB.CWDT._CRS.RBUF */
            }
        }

        Device (SPKR)
        {
            Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0061,             // Range Minimum
                    0x0061,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
            })
        }

        Device (KBD)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If (WIN8)
                {
                    Return (0x7100AE30)
                }

                Return (0x0303D041)
            }

            Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {1}
            })
        }

        Device (MOU)
        {
            Name (_HID, "PNP0F13" /* PS/2 Mouse */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
            Name (_STA, 0x0F)  // _STA: Status
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQNoFlags ()
                    {12}
            })
            Name (DIDL, Package (0x05)
            {
                0x03, 
                0x06, 
                0x02, 
                One, 
                One
            })
            Name (PNPL, Package (0x05)
            {
                "LEN030B", 
                "LEN030C", 
                "LEN0305", 
                "LEN0305", 
                "LEN0305"
            })
            Method (MHID, 0, NotSerialized)
            {
                Local0 = Match (DIDL, MEQ, (TPID & 0xFF), MTR, Zero, Zero)
                If ((Local0 != Ones))
                {
                    _HID = DerefOf (PNPL [Local0])
                }
                Else
                {
                    _STA = Zero
                }
            }
        }
    }

    Name (ECUP, One)
    Mutex (EHLD, 0x00)
    Scope (_SB)
    {
        OperationRegion (ITSS, SystemMemory, 0xFDC43100, 0x0208)
        Field (ITSS, ByteAcc, NoLock, Preserve)
        {
            PARC,   8, 
            PBRC,   8, 
            PCRC,   8, 
            PDRC,   8, 
            PERC,   8, 
            PFRC,   8, 
            PGRC,   8, 
            PHRC,   8, 
            Offset (0x200), 
                ,   1, 
                ,   1, 
            SCGE,   1
        }
    }

    Mutex (MUTX, 0x00)
    Mutex (OSUM, 0x00)
    Mutex (WWMT, 0x00)
    Mutex (CNMT, 0x00)
    Event (WFEV)
    OperationRegion (PRT0, SystemIO, 0x80, 0x02)
    Field (PRT0, WordAcc, Lock, Preserve)
    {
        P80B,   16
    }

    Field (PRT0, ByteAcc, NoLock, Preserve)
    {
        P80P,   8
    }

    Name (P80T, Zero)
    Method (D8XH, 2, Serialized)
    {
    }

    Method (P8XH, 2, Serialized)
    {
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    OperationRegion (CMPT, SystemIO, 0x72, 0x02)
    Field (CMPT, ByteAcc, NoLock, Preserve)
    {
        P72H,   8, 
        P73H,   8
    }

    Method (P7XH, 2, Serialized)
    {
        P72H = Arg0
        P73H = Arg1
    }

    Method (OPTS, 1, NotSerialized)
    {
        P80B = Zero
        P8XH (Zero, Arg0)
        ADBG (Concatenate ("OPTS=", ToHexString (Arg0)))
        Local0 = One
        If ((Arg0 == SPS))
        {
            Local0 = Zero
        }

        If (((Arg0 == Zero) || (Arg0 >= 0x06)))
        {
            Local0 = Zero
        }

        If (Local0)
        {
            SPS = Arg0
            \_SB.PC00.LPCB.EC.HKEY.MHKE (Zero)
            If (\_SB.PC00.LPCB.EC.KBLT)
            {
                SCMS (0x0D)
            }

            If ((Arg0 == One))
            {
                FNID = \_SB.PC00.LPCB.EC.HFNI
                \_SB.PC00.LPCB.EC.HFNI = Zero
                \_SB.PC00.LPCB.EC.HFSP = Zero
            }

            If ((Arg0 == 0x03))
            {
                VVPD (0x03)
                SLTP ()
                ACST = \_SB.PC00.LPCB.EC.AC._PSR ()
                If ((FNWK == One))
                {
                    If (H8DR)
                    {
                        \_SB.PC00.LPCB.EC.HWFN = Zero
                    }
                    Else
                    {
                        MBEC (0x32, 0xEF, Zero)
                    }
                }
            }

            If ((Arg0 == 0x04))
            {
                P7XH (0x6F, One)
                If (VDSP)
                {
                    SHA1 = Zero
                }

                \_SB.SLPB._PSW (Zero)
                SLTP ()
                AWON (0x04)
            }

            If ((Arg0 == 0x05))
            {
                SLTP ()
                AWON (0x05)
            }

            If ((Arg0 >= 0x04))
            {
                \_SB.PC00.LPCB.EC.HWLB = Zero
            }
            Else
            {
                \_SB.PC00.LPCB.EC.HWLB = One
            }

            If ((Arg0 >= 0x03))
            {
                \_SB.PC00.LPCB.EC.HCMU = One
            }

            If ((Arg0 != 0x05)) {}
            \_SB.PC00.LPCB.EC.HKEY.WGPS (Arg0)
        }

        ADBG ("OPTS END")
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        D8XH (Zero, Arg0)
        D8XH (One, Zero)
        If (CondRefOf (\DTFS))
        {
            If ((DTFS == One))
            {
                Reset (WFEV)
                If ((DTRT == One))
                {
                    Local0 = Zero
                    While ((Local0 < TCPN))
                    {
                        TOFF = TVCF (Local0, Zero, 0x04, TOFF)
                        Local0++
                    }
                }
            }
        }

        If (CondRefOf (\_SB.PC00.PEG1.DHDW))
        {
            \_SB.PC00.PEG1.DHDW ()
        }

        If ((Arg0 == 0x03))
        {
            CWEF = CPWE /* \CPWE */
        }
        ElseIf (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            If ((PG3S == One)) {}
        }

        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }

        SPTS (Arg0)
        If (CondRefOf (\DTFS))
        {
            If ((DTFS == One))
            {
                If (CondRefOf (TPTS))
                {
                    TPTS (Arg0)
                }
            }
        }

        If ((PPOE != Zero))
        {
            If (CondRefOf (\_SB.PC00.XHCI.PSLP))
            {
                \_SB.PC00.XHCI.PSLP (Arg0)
            }
            Else
            {
            }
        }

        OPTS (Arg0)
    }

    Method (PBCL, 0, NotSerialized)
    {
        Return (Package (0x67)
        {
            0x50, 
            0x32, 
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x04, 
            0x05, 
            0x06, 
            0x07, 
            0x08, 
            0x09, 
            0x0A, 
            0x0B, 
            0x0C, 
            0x0D, 
            0x0E, 
            0x0F, 
            0x10, 
            0x11, 
            0x12, 
            0x13, 
            0x14, 
            0x15, 
            0x16, 
            0x17, 
            0x18, 
            0x19, 
            0x1A, 
            0x1B, 
            0x1C, 
            0x1D, 
            0x1E, 
            0x1F, 
            0x20, 
            0x21, 
            0x22, 
            0x23, 
            0x24, 
            0x25, 
            0x26, 
            0x27, 
            0x28, 
            0x29, 
            0x2A, 
            0x2B, 
            0x2C, 
            0x2D, 
            0x2E, 
            0x2F, 
            0x30, 
            0x31, 
            0x32, 
            0x33, 
            0x34, 
            0x35, 
            0x36, 
            0x37, 
            0x38, 
            0x39, 
            0x3A, 
            0x3B, 
            0x3C, 
            0x3D, 
            0x3E, 
            0x3F, 
            0x40, 
            0x41, 
            0x42, 
            0x43, 
            0x44, 
            0x45, 
            0x46, 
            0x47, 
            0x48, 
            0x49, 
            0x4A, 
            0x4B, 
            0x4C, 
            0x4D, 
            0x4E, 
            0x4F, 
            0x50, 
            0x51, 
            0x52, 
            0x53, 
            0x54, 
            0x55, 
            0x56, 
            0x57, 
            0x58, 
            0x59, 
            0x5A, 
            0x5B, 
            0x5C, 
            0x5D, 
            0x5E, 
            0x5F, 
            0x60, 
            0x61, 
            0x62, 
            0x63, 
            0x64
        })
    }

    Name (WAKI, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (OWAK, 1, NotSerialized)
    {
        ADBG ("OWAK")
        If (((Arg0 == Zero) || (Arg0 >= 0x05)))
        {
            Return (WAKI) /* \WAKI */
        }

        SPS = Zero
        \_SB.PC00.LPCB.EC.HCMU = Zero
        \_SB.PC00.LPCB.EC.EVNT (One)
        \_SB.PC00.LPCB.EC.HKEY.MHKE (One)
        \_SB.PC00.LPCB.EC.FNST ()
        SCMS (0x21)
        LIDB = Zero
        \_SB.PC00.LPCB.EC.HKEY.CSSS ()
        If ((Arg0 == One))
        {
            FNID = \_SB.PC00.LPCB.EC.HFNI
        }

        If ((Arg0 == 0x03))
        {
            NVSS (Zero)
            PWRS = \_SB.PC00.LPCB.EC.AC._PSR ()
            If (OSC4)
            {
                PNTF (0x81)
            }

            If ((ACST != \_SB.PC00.LPCB.EC.AC._PSR ()))
            {
                \_SB.PC00.LPCB.EC.ATMC ()
            }

            If (SCRM)
            {
                \_SB.PC00.LPCB.EC.HFSP = 0x07
            }

            IOEN = Zero
            IOST = Zero
            If ((ISWK == One))
            {
                If (\_SB.PC00.LPCB.EC.HKEY.DHKC)
                {
                    \_SB.PC00.LPCB.EC.HKEY.MHKQ (0x6070)
                }
            }

            If (VIGD)
            {
                \_SB.PC00.GFX0.CLID = \_SB.LID._LID ()
                If (WVIS)
                {
                    VBTD ()
                }
            }
            ElseIf (WVIS)
            {
                \_SB.PC00.GFX0.CLID = \_SB.LID._LID ()
                VBTD ()
            }

            VCMS (One, \_SB.LID._LID ())
            AWON (Zero)
            If (CMPR)
            {
                Notify (\_SB.SLPB, 0x02) // Device Wake
                CMPR = Zero
            }

            If ((\_SB.LID._LID () == Zero))
            {
                If ((\_SB.PC00.LPCB.EC.AC._PSR () == Zero))
                {
                    \_SB.PC00.LPCB.EC.HKEY.DYTC (0x001FA001)
                }
                Else
                {
                    \_SB.PC00.LPCB.EC.HKEY.DYTC (0x000FA001)
                }
            }
            Else
            {
                \_SB.PC00.LPCB.EC.HKEY.DYTC (0x000FA001)
            }

            If ((WLAC == 0x02)) {}
            ElseIf ((\_SB.PC00.LPCB.EC.ELNK && (WLAC == One)))
            {
                \_SB.PC00.LPCB.EC.DCWL = Zero
            }
            Else
            {
                \_SB.PC00.LPCB.EC.DCWL = One
            }
        }

        If ((Arg0 == 0x04))
        {
            NVSS (Zero)
            \_SB.PC00.LPCB.EC.HSPA = Zero
            PWRS = \_SB.PC00.LPCB.EC.AC._PSR ()
            If (OSC4)
            {
                PNTF (0x81)
            }

            \_SB.PC00.LPCB.EC.ATMC ()
            If (SCRM)
            {
                \_SB.PC00.LPCB.EC.HFSP = 0x07
            }

            If (!NBCF)
            {
                If (VIGD)
                {
                    \_SB.PC00.LPCB.EC.BRNS ()
                }
                Else
                {
                    VBRC (BRLV)
                }
            }

            IOEN = Zero
            IOST = Zero
            If ((ISWK == 0x02))
            {
                If (\_SB.PC00.LPCB.EC.HKEY.DHKC)
                {
                    \_SB.PC00.LPCB.EC.HKEY.MHKQ (0x6080)
                }
            }

            If ((WLAC == 0x02)) {}
            ElseIf ((\_SB.PC00.LPCB.EC.ELNK && (WLAC == One)))
            {
                \_SB.PC00.LPCB.EC.DCWL = Zero
            }
            Else
            {
                \_SB.PC00.LPCB.EC.DCWL = One
            }
        }

        \_SB.PC00.LPCB.EC.BATW (Arg0)
        \_SB.PC00.LPCB.EC.HKEY.WGWK (Arg0)
        Notify (\_TZ.THM0, 0x80) // Thermal Status Change
        VSLD (\_SB.LID._LID ())
        If (VIGD)
        {
            \_SB.PC00.GFX0.CLID = \_SB.LID._LID ()
        }
        ElseIf (WVIS)
        {
            \_SB.PC00.GFX0.CLID = \_SB.LID._LID ()
        }

        If ((\_SB.LID._LID () == Zero))
        {
            If ((\_SB.PC00.LPCB.EC.AC._PSR () == Zero))
            {
                \_SB.PC00.LPCB.EC.HKEY.DYTC (0x001FA001)
            }
            Else
            {
                \_SB.PC00.LPCB.EC.HKEY.DYTC (0x000FA001)
            }
        }
        Else
        {
            \_SB.PC00.LPCB.EC.HKEY.DYTC (0x000FA001)
        }

        If ((Arg0 < 0x04))
        {
            If (((RRBF & 0x02) || (\_SB.PC00.LPCB.EC.HWAC & 0x02)))
            {
                Local0 = (Arg0 << 0x08)
                Local0 = (0x2013 | Local0)
                \_SB.PC00.LPCB.EC.HKEY.MHKQ (Local0)
            }
        }

        If ((Arg0 == 0x04))
        {
            Local0 = Zero
            Local1 = CSUM (Zero)
            If ((Local1 != CHKC))
            {
                Local0 = One
                CHKC = Local1
            }

            Local1 = CSUM (One)
            If ((Local1 != CHKE))
            {
                Local0 = One
                CHKE = Local1
            }

            If (Local0)
            {
                Notify (_SB, Zero) // Bus Check
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If (CondRefOf (\_SB.PC00.PEG2.PEGP.NVFE))
            {
                \_SB.PC00.PEG2.PEGP.NVFE ()
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            ADBG ("_WAK0")
            \_SB.PC00.LPCB.EC.HKEY.ANGN = Zero
            If (H8DR)
            {
                Local1 = \_SB.PC00.LPCB.EC.TSL2
                Local2 = \_SB.PC00.LPCB.EC.TSL1
                Local0 = \_SB.PC00.LPCB.EC.TSL0
            }
            Else
            {
                Local1 = (RBEC (0x8A) & 0x7F)
                Local2 = (RBEC (0x89) & 0x7F)
                Local0 = (RBEC (0x88) & 0x7F)
            }

            If ((Local2 & 0x76))
            {
                \_SB.PC00.LPCB.EC.HKEY.DYTC (0x001F4001)
            }
            Else
            {
                \_SB.PC00.LPCB.EC.HKEY.DYTC (0x000F4001)
            }

            If ((Local0 & 0x76))
            {
                If (CondRefOf (\_SB.IETM.DPTE))
                {
                    If ((\_SB.IETM.DPTE == Zero))
                    {
                        \_SB.PC00.LPCB.EC.HKEY.DYTC (0x001FE001)
                    }
                }
                Else
                {
                    \_SB.PC00.LPCB.EC.HKEY.DYTC (0x001FE001)
                }
            }
            Else
            {
                \_SB.PC00.LPCB.EC.HKEY.DYTC (0x000FE001)
            }

            \_SB.PC00.LPCB.EC.HKEY.DYTC (0x800F0001)
            ADBG ("_WAK1")
        }

        RRBF = Zero
        ADBG ("OWAK END")
        Return (WAKI) /* \WAKI */
    }

    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        D8XH (One, 0xAB)
        ADBG ("_WAK")
        If ((U4SE == One))
        {
            Local0 = \_SB.RCMP ()
            If ((Local0 != \_SB.OSCM))
            {
                Local1 = (U4CM & 0xF8)
                Local0 &= 0x07
                U4CM = (Local0 | Local1)
                \_SB.DOCM ()
            }
        }

        If ((S0ID == One))
        {
            \_SB.SCGE = One
        }

        Name (RPWM, Zero)
        If ((DSTS == Zero))
        {
            RPWM = Zero
        }
        Else
        {
            RPWM = 0x0180
        }

        SWAK (Arg0, RPWM)
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((GBSX & 0x40))
            {
                \_SB.PC00.GFX0.IUEH (0x06)
                PB1E ^= 0x08
            }

            If ((GBSX & 0x80))
            {
                \_SB.PC00.GFX0.IUEH (0x07)
                PB1E ^= 0x10
            }

            If (CondRefOf (\DTFS))
            {
                If ((DTFS == One))
                {
                    Acquire (OSUM, 0xFFFF)
                    If (CondRefOf (\_GPE.DTIN))
                    {
                        \_GPE.DTIN ()
                    }

                    Release (OSUM)
                }
            }

            If (CondRefOf (\DTFS))
            {
                If ((DTFS == One))
                {
                    If (CondRefOf (\_SB.PC00.RP01.NFRP))
                    {
                        \_SB.PC00.RP01.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP05.NFRP))
                    {
                        \_SB.PC00.RP05.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP09.NFRP))
                    {
                        \_SB.PC00.RP09.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP13.NFRP))
                    {
                        \_SB.PC00.RP13.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP17.NFRP))
                    {
                        \_SB.PC00.RP17.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP21.NFRP))
                    {
                        \_SB.PC00.RP21.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP25.NFRP))
                    {
                        \_SB.PC00.RP25.NFRP ()
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.TXHC))
            {
                \_SB.TCWK (Arg0)
            }
        }

        OWAK (Arg0)
        If (CondRefOf (\DTFS))
        {
            If ((DTFS == One))
            {
                Signal (WFEV)
            }
        }

        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (BPNT, 0, NotSerialized)
    {
        If ((DPTF == One))
        {
            Notify (\_SB.IETM, 0x86) // Device-Specific
            If (((ECON == One) && (CHGE == One))) {}
        }
    }

    OperationRegion (CPWR, SystemMemory, (\_SB.PC00.GMHB () + 0x5000), 0x1000)
    Field (CPWR, ByteAcc, NoLock, Preserve)
    {
        Offset (0x938), 
        PWRU,   4, 
        Offset (0x9A0), 
        PPL1,   15, 
        PL1E,   1, 
        CLP1,   1
    }

    Name (CLMP, Zero)
    Name (PLEN, Zero)
    Name (PLSV, 0x8000)
    Name (CSEM, Zero)
    Method (SPL1, 0, Serialized)
    {
        Name (PPUU, Zero)
        If ((CSEM == One))
        {
            Return (Zero)
        }

        CSEM = One
        PLSV = PPL1 /* \PPL1 */
        PLEN = PL1E /* \PL1E */
        CLMP = CLP1 /* \CLP1 */
        If ((PWRU == Zero))
        {
            PPUU = One
        }
        Else
        {
            PPUU = (PWRU-- << 0x02)
        }

        Local0 = (PLVL * PPUU) /* \SPL1.PPUU */
        Local1 = (Local0 / 0x03E8)
        PPL1 = Local1
        PL1E = One
        CLP1 = One
    }

    Method (RPL1, 0, Serialized)
    {
        PPL1 = PLSV /* \PLSV */
        PL1E = PLEN /* \PLEN */
        CLP1 = CLMP /* \CLMP */
        CSEM = Zero
    }

    Name (UAMS, Zero)
    Name (GLCK, Zero)
    Method (GUAM, 1, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                If ((GLCK == One))
                {
                    GLCK = Zero
                    P8XH (Zero, 0xE1)
                    P8XH (One, 0xAB)
                    If (PSCP)
                    {
                        If (CondRefOf (\_SB.PR00._PPC))
                        {
                            \_SB.CPPC = Zero
                            SPNT ()
                            BPNT ()
                        }
                    }

                    If (PLCS)
                    {
                        RPL1 ()
                    }
                }
            }
            Case (One)
            {
                If ((GLCK == Zero))
                {
                    GLCK = One
                    P8XH (Zero, 0xE0)
                    P8XH (One, Zero)
                    If (PSCP)
                    {
                        If ((CondRefOf (\_SB.PR00._PSS) && CondRefOf (\_SB.PR00._PPC)))
                        {
                            SPNT ()
                            BPNT ()
                        }
                    }

                    If (PLCS)
                    {
                        SPL1 ()
                    }
                }
            }
            Default
            {
                Return (Zero)
            }

        }

        UAMS = (Arg0 && !PWRS)
        P_CS ()
    }

    Method (P_CS, 0, Serialized)
    {
        If (CondRefOf (\_SB.PC00.PAUD.PUAM))
        {
            \_SB.PC00.PAUD.PUAM ()
        }

        If ((OSYS == 0x07DC))
        {
            If (CondRefOf (\_SB.PC00.XHCI.DUAM))
            {
                \_SB.PC00.XHCI.DUAM ()
            }
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == 0x04))
        {
            \_SB.TRPF = Zero
        }

        Return (SMIF) /* \SMIF */
    }

    Scope (_SB.PC00)
    {
        Method (PTMA, 0, NotSerialized)
        {
            Return (BGMA) /* External reference */
        }

        Method (PTMS, 0, NotSerialized)
        {
            Return (BGMS) /* External reference */
        }

        Method (PTIA, 0, NotSerialized)
        {
            Return (BGIA) /* External reference */
        }

        Method (OINI, 0, NotSerialized)
        {
            ADBG ("Init _INI")
            If ((_REV >= 0x02))
            {
                H8DR = One
            }

            OSIF = One
            PWRS = ^LPCB.EC.AC._PSR ()
            ^LPCB.MOU.MHID ()
            If (LNUX)
            {
                ^LPCB.EC.SAUM (0x02)
                SCMS (0x1C)
            }

            If ((^^LID._LID () == Zero))
            {
                If ((^LPCB.EC.AC._PSR () == Zero))
                {
                    ^LPCB.EC.HKEY.DYTC (0x001FA001)
                }
            }
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            If (CondRefOf (\DTFS))
            {
                If ((DTFS == One))
                {
                    If (CondRefOf (\_SB.PC00.RP01.NFRP))
                    {
                        ^RP01.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP05.NFRP))
                    {
                        ^RP05.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP09.NFRP))
                    {
                        ^RP09.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP13.NFRP))
                    {
                        ^RP13.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP17.NFRP))
                    {
                        ^RP17.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP21.NFRP))
                    {
                        ^RP21.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP25.NFRP))
                    {
                        ^RP25.NFRP ()
                    }

                    Local0 = Zero
                    While ((Local0 < TCPN))
                    {
                        TBPE = TVCF (Local0, One, 0x04, TBPE)
                        Local0++
                    }
                }
            }

            OSYS = 0x03E8
            If (CondRefOf (\_OSI))
            {
                If (_OSI ("Windows 2001"))
                {
                    WNTF = One
                    WXPF = One
                    WSPV = Zero
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    WSPV = One
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    WSPV = 0x02
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2006"))
                {
                    WVIS = One
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2009"))
                {
                    WIN7 = One
                    OSYS = 0x07D9
                }

                If (_OSI ("Windows 2012"))
                {
                    WIN8 = One
                    OSYS = 0x07DC
                }

                If (_OSI ("Windows 2013"))
                {
                    WIN8 = One
                    OSYS = 0x07DD
                }

                If (_OSI ("Windows 2015"))
                {
                    WIN8 = One
                    OSYS = 0x07DF
                }

                If (_OSI ("Linux"))
                {
                    LNUX = One
                    OSYS = 0x03E8
                }

                If (_OSI ("FreeBSD"))
                {
                    LNUX = One
                    OSYS = 0x03E8
                }
            }
            ElseIf ((SCMP (_OS, "Microsoft Windows NT") == Zero))
            {
                WNTF = One
            }

            If (CondRefOf (\DTFS))
            {
                If ((DTFS == One))
                {
                    Acquire (OSUM, 0xFFFF)
                    If (CondRefOf (\_GPE.DTIN))
                    {
                        \_GPE.DTIN ()
                    }

                    Release (OSUM)
                    Signal (WFEV)
                }
            }

            OINI ()
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (GPRW, 2, NotSerialized)
        {
            PRWP [Zero] = Arg0
            Local0 = (SS1 << One)
            Local0 |= (SS2 << 0x02)
            Local0 |= (SS3 << 0x03)
            Local0 |= (SS4 << 0x04)
            If (((One << Arg1) & Local0))
            {
                PRWP [One] = Arg1
            }
            Else
            {
                Local0 >>= One
                FindSetLeftBit (Local0, PRWP [One])
            }

            Return (PRWP) /* \PRWP */
        }
    }

    Scope (_SB)
    {
        Name (OSU4, Zero)
        Name (OSCM, 0xFF)
        If ((U4SE == One))
        {
            OperationRegion (CSIO, SystemIO, 0x72, 0x02)
            Field (CSIO, ByteAcc, NoLock, Preserve)
            {
                IO72,   8, 
                IO73,   8
            }

            Method (WCMP, 1, Serialized)
            {
                IO72 = 0xF2
                IO73 = Arg0
            }

            Method (RCMP, 0, Serialized)
            {
                IO72 = 0xF2
                Local0 = IO73 /* \_SB_.IO73 */
                Return (Local0)
            }
        }

        Method (DOCM, 0, Serialized)
        {
            If ((U4SE == Zero))
            {
                Return (0xFF)
            }

            Local0 = 0xFF
            OSCM = Zero
            ADBG (Concatenate ("DOCM: Enabled host router mask on platform = ", ToHexString (CMSK)))
            If ((CondRefOf (\_SB.PC00.TDM0.STCM) && (CMSK & One)))
            {
                Local1 = ^PC00.TDM0.STCM (OSU4, U4CM)
                If ((Local1 != 0xFF))
                {
                    ADBG (Concatenate ("DOCM: Apply CM mode to iTBT0 successfully, CM mode = ", Local1))
                    OSCM = Local1
                    Local0 = Zero
                }
                Else
                {
                    ADBG (Concatenate ("DOCM: Fail to apply CM mode to iTBT0, CM mode = ", OSU4))
                    Return (0xFF)
                }
            }

            If ((CondRefOf (\_SB.PC00.TDM1.STCM) && (CMSK & 0x02)))
            {
                Local1 = ^PC00.TDM1.STCM (OSU4, U4CM)
                If ((Local1 != 0xFF))
                {
                    ADBG (Concatenate ("DOCM: Apply CM mode to iTBT1 successfully, CM mode = ", Local1))
                    OSCM = Local1
                    Local0 = Zero
                }
                Else
                {
                    ADBG (Concatenate ("DOCM: Fail to apply CM mode to iTBT1, CM mode = ", OSU4))
                    Return (0xFF)
                }
            }

            If (CondRefOf (\DTCM))
            {
                Local1 = DTCM (OSU4, U4CM)
                If ((Local1 != 0xFF))
                {
                    ADBG (Concatenate ("DOCM: Apply CM mode to dTBT successfully, CM mode = ", ToHexString (Local1)))
                    OSCM = Local1
                    Local0 = Zero
                }
            }
            Else
            {
                ADBG ("DTCM is not present!")
            }

            If ((Local0 == 0xFF))
            {
                ADBG ("DOCM: CM mode is not applied to any host router, native USB4 capability is not supported")
            }

            If (((U4CM & 0x70) == 0x20))
            {
                WCMP (OSCM)
            }

            Return (Local0)
        }

        Method (U4FN, 2, Serialized)
        {
            ADBG (Concatenate ("U4FN: _OSC STS = ", ToHexString (Arg0)))
            ADBG (Concatenate ("U4FN: _OSC CAP = ", ToHexString (Arg1)))
            If ((U4SE == Zero))
            {
                OSCM = Zero
                If ((Arg1 & 0x00040000))
                {
                    ADBG ("U4FN: USB4 capability bit should be cleared since platform doesn\'t support")
                    Return (0xFF)
                }
                Else
                {
                    ADBG ("U4FN: OS and platform doesn\'t support native USB4")
                    Return (Zero)
                }
            }
            Else
            {
                Local0 = Zero
                If ((Arg1 & 0x00040000))
                {
                    OSU4 = One
                }
                Else
                {
                    OSU4 = Zero
                }

                If (((U4CM & 0x70) == Zero))
                {
                    If ((OSU4 == One))
                    {
                        ADBG ("U4FN: Platform doesn\'t support SW CM, clear USB4 capability bit")
                        Local0 = 0xFF
                    }
                    Else
                    {
                        ADBG ("U4FN: OS and platform only support FW CM")
                        Local0 = Zero
                    }

                    Return (Local0)
                }

                If (((Arg0 & One) == Zero))
                {
                    Local1 = DOCM ()
                    If (((OSU4 == One) && (Local1 == 0xFF)))
                    {
                        Local0 = 0xFF
                    }
                }
                ElseIf (((OSU4 == One) && (OSCM == Zero)))
                {
                    ADBG ("U4FN: Native USB4 capability bit should be cleared since FW CM is applied for OS")
                    Local0 = 0xFF
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB)
    {
        Name (OSCI, Zero)
        Name (OSCO, Zero)
        Name (OSCP, Zero)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            ADBG ("_OSC")
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If (CondRefOf (DDMS))
                {
                    DDMS ()
                }
                Else
                {
                }

                If ((Arg1 == One))
                {
                    OSCP = CAP0 /* \_SB_._OSC.CAP0 */
                    If ((CAP0 & 0x04))
                    {
                        OSCO = 0x04
                        If (((HGMD & 0x0F) != 0x02))
                        {
                            If ((RTD3 == Zero))
                            {
                                CAP0 &= 0xFFFFFFFB
                                STS0 |= 0x10
                            }
                        }
                    }

                    If ((CAP0 & 0x20))
                    {
                        CPPX = One
                    }
                    Else
                    {
                        CAP0 &= 0x9F
                        STS0 |= 0x10
                    }

                    If ((CAP0 & 0x00080000))
                    {
                        ^PC00.LPCB.EC.BCLS = One
                    }
                    Else
                    {
                        ^PC00.LPCB.EC.BCLS = Zero
                    }

                    If ((U4FN (STS0, CAP0) == 0xFF))
                    {
                        ADBG ("_OSC: Native USB4 capability bit is cleared")
                        CAP0 &= 0xFFFBFFFF
                        STS0 |= 0x10
                    }
                }
                Else
                {
                    STS0 &= 0xFFFFFF00
                    STS0 |= 0x0A
                }
            }
            ElseIf ((Arg0 == ToUUID ("23a0d13a-26ab-486c-9c5f-0ffa525a575a") /* Unknown UUID */))
            {
                If ((OSCM == One))
                {
                    CreateDWordField (Arg3, 0x08, CTRL)
                    If ((Arg1 == One))
                    {
                        If ((CTRL & 0xFFFFFFF0))
                        {
                            CTRL &= 0x0F
                            STS0 |= 0x10
                        }

                        If ((EPTU == Zero))
                        {
                            CTRL &= 0x0B
                            STS0 |= 0x10
                        }
                    }
                    Else
                    {
                        STS0 &= 0xFFFFFF00
                        STS0 |= 0x0A
                    }
                }
                Else
                {
                    STS0 &= 0xFFFFFF00
                    STS0 |= 0x06
                }
            }
            Else
            {
                STS0 &= 0xFFFFFF00
                STS0 |= 0x06
            }

            Return (Arg3)
        }
    }

    Scope (_SB)
    {
        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x17, 
                    0x03
                })
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (H8DR)
                {
                    If (Arg0)
                    {
                        ^^PC00.LPCB.EC.HWFN = One
                    }
                    Else
                    {
                        ^^PC00.LPCB.EC.HWFN = Zero
                    }
                }
                ElseIf (Arg0)
                {
                    MBEC (0x32, 0xFF, 0x10)
                }
                Else
                {
                    MBEC (0x32, 0xEF, Zero)
                }
            }
        }
    }

    Scope (_SB.PC00.I2C5)
    {
        Device (PA01)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x0D)
                            {
                                0x10, 
                                0x12, 
                                0x13, 
                                0x14, 
                                One, 
                                0x02, 
                                0x19, 
                                0x1E, 
                                0x1A, 
                                0x1F, 
                                0x1D, 
                                0x1C, 
                                0x1B
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y3A, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PA01._CRS._Y3A._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x0B)
                        {
                            0x10, 
                            0x12, 
                            0x13, 
                            0x14, 
                            One, 
                            0x02, 
                            0x19, 
                            0x1E, 
                            0x1A, 
                            0x1F, 
                            0x1C
                        }

)
                    {
                        BADR = 0x18
                    }
                    Case (Package (0x01)
                        {
                            0x1D
                        }

)
                    {
                        BADR = 0x14
                    }
                    Case (Package (0x01)
                        {
                            0x1B
                        }

)
                    {
                        BADR = 0x10
                    }
                    Default
                    {
                        BADR = Zero
                    }

                }

                Return (RBUF) /* \_SB_.PC00.I2C5.PA01._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x05)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "VBATA_VCCCORE_IN", 
                                0x02, 
                                "VBATA_VCCGT_IN", 
                                0x02, 
                                "VCC1P8_CPU", 
                                0x0A, 
                                "VCC1P05_CPU", 
                                0x02
                            }, 

                            Package (0x08)
                            {
                                "VBATA_VCCCORE_IN", 
                                0x02, 
                                "VBATA_VCCGT_IN", 
                                0x02, 
                                "VBATA_VCCSA_IN", 
                                0x02, 
                                "VBATA_VCCANA_IN", 
                                0x05
                            }, 

                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "VCCIN_AUX", 
                                One, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "SNS_VCCCORE_12", 
                                One, 
                                "SNS_VCCCORE_34", 
                                One, 
                                "SNS_VDD2_MEM", 
                                0x02, 
                                "SNS_VPP", 
                                0x05
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x09)
                                {
                                    0x10, 
                                    0x12, 
                                    0x13, 
                                    0x14, 
                                    0x19, 
                                    0x1E, 
                                    0x1A, 
                                    0x1F, 
                                    0x1C
                                }

)
                            {
                                Return (DerefOf (PKG1 [One]))
                            }
                            Case (Package (0x02)
                                {
                                    One, 
                                    0x02
                                }

)
                            {
                                Return (DerefOf (PKG1 [0x02]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1D
                                }

)
                            {
                                Return (DerefOf (PKG1 [0x03]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1B
                                }

)
                            {
                                Return (DerefOf (PKG1 [0x04]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG1 [Zero]))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x05)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x07D0, 
                                0x07D0, 
                                0x2710, 
                                0x07D0
                            }, 

                            Package (0x04)
                            {
                                0x07D0, 
                                0x07D0, 
                                0x07D0, 
                                0x1388
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                0x03E8, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x01F4, 
                                0x01F4, 
                                0x07D0, 
                                0x1388
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x09)
                                {
                                    0x10, 
                                    0x12, 
                                    0x13, 
                                    0x14, 
                                    0x19, 
                                    0x1E, 
                                    0x1A, 
                                    0x1F, 
                                    0x1C
                                }

)
                            {
                                Return (DerefOf (PKG2 [One]))
                            }
                            Case (Package (0x02)
                                {
                                    One, 
                                    0x02
                                }

)
                            {
                                Return (DerefOf (PKG2 [0x02]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1D
                                }

)
                            {
                                Return (DerefOf (PKG2 [0x03]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1B
                                }

)
                            {
                                Return (DerefOf (PKG2 [0x04]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG2 [Zero]))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C5.PA01._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C5.PA01._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C5.PA01._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C5.PA01._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PA02)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x0D)
                            {
                                0x10, 
                                0x12, 
                                0x13, 
                                0x14, 
                                One, 
                                0x02, 
                                0x19, 
                                0x1E, 
                                0x1A, 
                                0x1F, 
                                0x1D, 
                                0x1C, 
                                0x1B
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y3B, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PA02._CRS._Y3B._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x0B)
                        {
                            0x10, 
                            0x12, 
                            0x13, 
                            0x14, 
                            One, 
                            0x02, 
                            0x19, 
                            0x1E, 
                            0x1A, 
                            0x1F, 
                            0x1C
                        }

)
                    {
                        BADR = 0x1E
                    }
                    Case (Package (0x01)
                        {
                            0x1D
                        }

)
                    {
                        BADR = 0x15
                    }
                    Case (Package (0x01)
                        {
                            0x1B
                        }

)
                    {
                        BADR = 0x12
                    }
                    Default
                    {
                        BADR = Zero
                    }

                }

                Return (RBUF) /* \_SB_.PC00.I2C5.PA02._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x06)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "VBATA_VCCIN_AUX_IN", 
                                0x02, 
                                "VDD2_CPU", 
                                0x02, 
                                "VDD2_MEM", 
                                0x02, 
                                "V1P8U_MEM", 
                                0x05
                            }, 

                            Package (0x08)
                            {
                                "VBATA_VCCIN_AUX_IN", 
                                0x02, 
                                "VDD2_CPU", 
                                0x02, 
                                "VCCPRIM_3P3", 
                                0x16, 
                                "VCC1P24_MIPI", 
                                0x0A
                            }, 

                            Package (0x08)
                            {
                                "VDD1_CPU_MEM", 
                                0x05, 
                                "VDD2_CPU_MEM", 
                                0x02, 
                                "VDDQTX_CPU_MEM", 
                                0x05, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "SNS_V1P8A", 
                                0x0A, 
                                "SNS_VBATA", 
                                0x02, 
                                "SNS_V3P3A_DSW", 
                                0x02, 
                                "SNS_V3P3A_DSW_WLAN", 
                                0x05
                            }, 

                            Package (0x08)
                            {
                                "VBATA_VCCIN_AUX_IN", 
                                0x02, 
                                "VDD2_CPU", 
                                0x02, 
                                "VIN_BULK_DRAM", 
                                0x05, 
                                "", 
                                Zero
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x08)
                                {
                                    0x10, 
                                    0x13, 
                                    0x14, 
                                    0x19, 
                                    0x1E, 
                                    0x1A, 
                                    0x1F, 
                                    0x1C
                                }

)
                            {
                                Return (DerefOf (PKG1 [One]))
                            }
                            Case (Package (0x02)
                                {
                                    One, 
                                    0x02
                                }

)
                            {
                                Return (DerefOf (PKG1 [0x02]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1D
                                }

)
                            {
                                Return (DerefOf (PKG1 [0x03]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1B
                                }

)
                            {
                                Return (DerefOf (PKG1 [0x04]))
                            }
                            Case (Package (0x01)
                                {
                                    0x12
                                }

)
                            {
                                Return (DerefOf (PKG1 [0x05]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG1 [Zero]))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x06)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x07D0, 
                                0x07D0, 
                                0x07D0, 
                                0x1388
                            }, 

                            Package (0x04)
                            {
                                0x07D0, 
                                0x07D0, 
                                0x55F0, 
                                0x2710
                            }, 

                            Package (0x04)
                            {
                                0x1388, 
                                0x07D0, 
                                0x1388, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x2710, 
                                0x07D0, 
                                0x07D0, 
                                0x1388
                            }, 

                            Package (0x04)
                            {
                                0x07D0, 
                                0x07D0, 
                                0x1388, 
                                Zero
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x08)
                                {
                                    0x10, 
                                    0x13, 
                                    0x14, 
                                    0x19, 
                                    0x1E, 
                                    0x1A, 
                                    0x1F, 
                                    0x1C
                                }

)
                            {
                                Return (DerefOf (PKG2 [One]))
                            }
                            Case (Package (0x02)
                                {
                                    One, 
                                    0x02
                                }

)
                            {
                                Return (DerefOf (PKG2 [0x02]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1D
                                }

)
                            {
                                Return (DerefOf (PKG2 [0x03]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1B
                                }

)
                            {
                                Return (DerefOf (PKG2 [0x04]))
                            }
                            Case (Package (0x01)
                                {
                                    0x12
                                }

)
                            {
                                Return (DerefOf (PKG2 [0x05]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG2 [Zero]))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C5.PA02._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C5.PA02._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C5.PA02._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C5.PA02._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PA03)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x0D)
                            {
                                0x10, 
                                0x12, 
                                0x13, 
                                0x14, 
                                One, 
                                0x02, 
                                0x19, 
                                0x1E, 
                                0x1A, 
                                0x1F, 
                                0x1D, 
                                0x1C, 
                                0x1B
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y3C, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PA03._CRS._Y3C._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x0B)
                        {
                            0x10, 
                            0x12, 
                            0x13, 
                            0x14, 
                            One, 
                            0x02, 
                            0x19, 
                            0x1E, 
                            0x1A, 
                            0x1F, 
                            0x1C
                        }

)
                    {
                        BADR = 0x11
                    }
                    Case (Package (0x01)
                        {
                            0x1D
                        }

)
                    {
                        BADR = 0x12
                    }
                    Case (Package (0x01)
                        {
                            0x1B
                        }

)
                    {
                        BADR = 0x11
                    }
                    Default
                    {
                        BADR = Zero
                    }

                }

                Return (RBUF) /* \_SB_.PC00.I2C5.PA03._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x05)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "V1P8A_MCP", 
                                0x05, 
                                "V1P8S_MCSI_CAM1", 
                                0x0A, 
                                "V1P8S_MCSI_CAM2", 
                                0x0A, 
                                "V3P3A_WWAN", 
                                0x05
                            }, 

                            Package (0x08)
                            {
                                "V1P8A_MCP", 
                                0x05, 
                                "V1P8S_MCSI_CAM1", 
                                0x0A, 
                                "V3P3S_MCSI_CAM1", 
                                0x0A, 
                                "V3P3A_WLAN", 
                                0x05
                            }, 

                            Package (0x08)
                            {
                                "VCCIN", 
                                One, 
                                "V3P3X_SSD2", 
                                0x05, 
                                "VCCGT", 
                                One, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "SNS_VCCGT", 
                                One, 
                                "SNS_VBATA_VCCCORE", 
                                Zero, 
                                "SNS_VCCIN_AUX", 
                                One, 
                                "V3P3A_KBC_EC", 
                                0x32
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x09)
                                {
                                    0x10, 
                                    0x12, 
                                    0x13, 
                                    0x14, 
                                    0x19, 
                                    0x1E, 
                                    0x1A, 
                                    0x1F, 
                                    0x1C
                                }

)
                            {
                                Return (DerefOf (PKG1 [One]))
                            }
                            Case (Package (0x02)
                                {
                                    One, 
                                    0x02
                                }

)
                            {
                                Return (DerefOf (PKG1 [0x02]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1D
                                }

)
                            {
                                Return (DerefOf (PKG1 [0x03]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1B
                                }

)
                            {
                                Return (DerefOf (PKG1 [0x04]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG1 [Zero]))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x04)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x1388, 
                                0x2710, 
                                0x2710, 
                                0x1388
                            }, 

                            Package (0x04)
                            {
                                0x03E8, 
                                0x1388, 
                                0x03E8, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x01F4, 
                                Zero, 
                                0x01F4, 
                                0xC350
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x0B)
                                {
                                    0x10, 
                                    0x12, 
                                    0x13, 
                                    0x14, 
                                    One, 
                                    0x02, 
                                    0x19, 
                                    0x1E, 
                                    0x1A, 
                                    0x1F, 
                                    0x1C
                                }

)
                            {
                                Return (DerefOf (PKG2 [One]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1D
                                }

)
                            {
                                Return (DerefOf (PKG2 [0x02]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1B
                                }

)
                            {
                                Return (DerefOf (PKG2 [0x03]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG2 [Zero]))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C5.PA03._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C5.PA03._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C5.PA03._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C5.PA03._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PA04)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x0D)
                            {
                                0x10, 
                                0x12, 
                                0x13, 
                                0x14, 
                                One, 
                                0x02, 
                                0x19, 
                                0x1E, 
                                0x1A, 
                                0x1F, 
                                0x1D, 
                                0x1C, 
                                0x1B
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y3D, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PA04._CRS._Y3D._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x0B)
                        {
                            0x10, 
                            0x12, 
                            0x13, 
                            0x14, 
                            One, 
                            0x02, 
                            0x19, 
                            0x1E, 
                            0x1A, 
                            0x1F, 
                            0x1C
                        }

)
                    {
                        BADR = 0x15
                    }
                    Case (Package (0x01)
                        {
                            0x1D
                        }

)
                    {
                        BADR = 0x11
                    }
                    Case (Package (0x01)
                        {
                            0x1B
                        }

)
                    {
                        BADR = 0x13
                    }
                    Default
                    {
                        BADR = Zero
                    }

                }

                Return (RBUF) /* \_SB_.PC00.I2C5.PA04._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x05)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "VBATA_CORE", 
                                0x02, 
                                "V3P3DX_PCH_SSD", 
                                0x05, 
                                "VBATA", 
                                0x02, 
                                "V3P3DX_CPU_SSD1", 
                                0x05
                            }, 

                            Package (0x08)
                            {
                                "V3P3A_SNSR_HDR", 
                                0x0A, 
                                "3V3_CONNX44", 
                                0x05, 
                                "VBATA", 
                                0x02, 
                                "3V3_CONNX45", 
                                0x05
                            }, 

                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "V3P3X_SSD", 
                                0x05, 
                                "V3P3X_EDP", 
                                0x0A, 
                                "VCC_EDP_BKLT", 
                                0x0A
                            }, 

                            Package (0x08)
                            {
                                "SNS_V3P3A_WLAN", 
                                0x05, 
                                "SNS_V3P3DX_EDP", 
                                0x0A, 
                                "SNS_VCC_EDP_BKLT", 
                                0x32, 
                                "SNS_V5P0A_2", 
                                0x02
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x09)
                                {
                                    0x10, 
                                    0x12, 
                                    0x13, 
                                    0x14, 
                                    0x19, 
                                    0x1E, 
                                    0x1A, 
                                    0x1F, 
                                    0x1C
                                }

)
                            {
                                Return (DerefOf (PKG1 [One]))
                            }
                            Case (Package (0x02)
                                {
                                    One, 
                                    0x02
                                }

)
                            {
                                Return (DerefOf (PKG1 [0x02]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1D
                                }

)
                            {
                                Return (DerefOf (PKG1 [0x03]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1B
                                }

)
                            {
                                Return (DerefOf (PKG1 [0x04]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG1 [Zero]))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x05)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x07D0, 
                                0x1388, 
                                0x07D0, 
                                0x1388
                            }, 

                            Package (0x04)
                            {
                                0x2710, 
                                0x1388, 
                                0x07D0, 
                                0x1388
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                0x1388, 
                                0x2710, 
                                0x2710
                            }, 

                            Package (0x04)
                            {
                                0x1388, 
                                0x2710, 
                                0xC350, 
                                0x07D0
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x09)
                                {
                                    0x10, 
                                    0x12, 
                                    0x13, 
                                    0x14, 
                                    0x19, 
                                    0x1E, 
                                    0x1A, 
                                    0x1F, 
                                    0x1C
                                }

)
                            {
                                Return (DerefOf (PKG2 [One]))
                            }
                            Case (Package (0x02)
                                {
                                    One, 
                                    0x02
                                }

)
                            {
                                Return (DerefOf (PKG2 [0x02]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1D
                                }

)
                            {
                                Return (DerefOf (PKG2 [0x03]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1B
                                }

)
                            {
                                Return (DerefOf (PKG2 [0x04]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG2 [Zero]))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C5.PA04._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C5.PA04._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C5.PA04._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C5.PA04._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PA05)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x02)
                            {
                                0x1D, 
                                0x1B
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y3E, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PA05._CRS._Y3E._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x1D
                        }

)
                    {
                        BADR = 0x13
                    }
                    Case (Package (0x01)
                        {
                            0x1B
                        }

)
                    {
                        BADR = 0x17
                    }
                    Default
                    {
                        BADR = Zero
                    }

                }

                Return (RBUF) /* \_SB_.PC00.I2C5.PA05._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x03)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "VBATTERY", 
                                0x05, 
                                "V3P3A_WWAN", 
                                0x05, 
                                "V3P3A_WLAN", 
                                0x05, 
                                "VBATA", 
                                0x02
                            }, 

                            Package (0x08)
                            {
                                "SNS_V3P3A_CAM_BRD", 
                                0x0A, 
                                "", 
                                Zero, 
                                "SNS_V5P0A", 
                                0x02, 
                                "SNS_V3P3X_SSD", 
                                0x05
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x1D
                                }

)
                            {
                                Return (DerefOf (PKG1 [One]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1B
                                }

)
                            {
                                Return (DerefOf (PKG1 [0x02]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG1 [Zero]))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x03)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x1388, 
                                0x1388, 
                                0x1388, 
                                0x07D0
                            }, 

                            Package (0x04)
                            {
                                0x2710, 
                                Zero, 
                                0x07D0, 
                                0x1388
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x1D
                                }

)
                            {
                                Return (DerefOf (PKG2 [One]))
                            }
                            Case (Package (0x01)
                                {
                                    0x1B
                                }

)
                            {
                                Return (DerefOf (PKG2 [0x02]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG2 [Zero]))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C5.PA05._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C5.PA05._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C5.PA05._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C5.PA05._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB)
    {
        Device (COEX)
        {
            Name (_HID, EisaId ("INT3519"))  // _HID: Hardware ID
            Name (_STR, Unicode ("CoExistence Manager"))  // _STR: Description String
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((COEM == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PC00.ISHD)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If (PCIC (Arg0))
            {
                Return (PCID (Arg0, Arg1, Arg2, Arg3))
            }

            If (CondRefOf (HIWC))
            {
                If (HIWC (Arg0))
                {
                    If ((Arg2 <= 0x02))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                    ElseIf ((Arg2 == 0x03))
                    {
                        If (CondRefOf (ISAR))
                        {
                            Return (ISAR (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB)
    {
        Device (PR00)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
        }

        Device (PR01)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
        }

        Device (PR02)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
        }

        Device (PR03)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
        }

        Device (PR04)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
        }

        Device (PR05)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
        }

        Device (PR06)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
        }

        Device (PR07)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
        }

        Device (PR08)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
        }

        Device (PR09)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x09)  // _UID: Unique ID
        }

        Device (PR10)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x0A)  // _UID: Unique ID
        }

        Device (PR11)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x0B)  // _UID: Unique ID
        }

        Device (PR12)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x0C)  // _UID: Unique ID
        }

        Device (PR13)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x0D)  // _UID: Unique ID
        }

        Device (PR14)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x0E)  // _UID: Unique ID
        }

        Device (PR15)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x0F)  // _UID: Unique ID
        }

        Device (PR16)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x10)  // _UID: Unique ID
        }

        Device (PR17)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x11)  // _UID: Unique ID
        }

        Device (PR18)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x12)  // _UID: Unique ID
        }

        Device (PR19)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x13)  // _UID: Unique ID
        }

        Device (PR20)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x14)  // _UID: Unique ID
        }

        Device (PR21)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x15)  // _UID: Unique ID
        }

        Device (PR22)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x16)  // _UID: Unique ID
        }

        Device (PR23)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x17)  // _UID: Unique ID
        }

        Device (PR24)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x18)  // _UID: Unique ID
        }

        Device (PR25)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x19)  // _UID: Unique ID
        }

        Device (PR26)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x1A)  // _UID: Unique ID
        }

        Device (PR27)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x1B)  // _UID: Unique ID
        }

        Device (PR28)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x1C)  // _UID: Unique ID
        }

        Device (PR29)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x1D)  // _UID: Unique ID
        }

        Device (PR30)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x1E)  // _UID: Unique ID
        }

        Device (PR31)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x1F)  // _UID: Unique ID
        }

        Device (PR32)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x20)  // _UID: Unique ID
        }

        Device (PR33)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x21)  // _UID: Unique ID
        }

        Device (PR34)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x22)  // _UID: Unique ID
        }

        Device (PR35)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x23)  // _UID: Unique ID
        }

        Device (PR36)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x24)  // _UID: Unique ID
        }

        Device (PR37)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x25)  // _UID: Unique ID
        }

        Device (PR38)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x26)  // _UID: Unique ID
        }

        Device (PR39)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x27)  // _UID: Unique ID
        }

        Device (PR40)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x28)  // _UID: Unique ID
        }

        Device (PR41)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x29)  // _UID: Unique ID
        }

        Device (PR42)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x2A)  // _UID: Unique ID
        }

        Device (PR43)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x2B)  // _UID: Unique ID
        }

        Device (PR44)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x2C)  // _UID: Unique ID
        }

        Device (PR45)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x2D)  // _UID: Unique ID
        }

        Device (PR46)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x2E)  // _UID: Unique ID
        }

        Device (PR47)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x2F)  // _UID: Unique ID
        }

        Device (PR48)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x30)  // _UID: Unique ID
        }

        Device (PR49)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x31)  // _UID: Unique ID
        }

        Device (PR50)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x32)  // _UID: Unique ID
        }

        Device (PR51)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x33)  // _UID: Unique ID
        }

        Device (PR52)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x34)  // _UID: Unique ID
        }

        Device (PR53)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x35)  // _UID: Unique ID
        }

        Device (PR54)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x36)  // _UID: Unique ID
        }

        Device (PR55)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x37)  // _UID: Unique ID
        }

        Device (PR56)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x38)  // _UID: Unique ID
        }

        Device (PR57)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x39)  // _UID: Unique ID
        }

        Device (PR58)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x3A)  // _UID: Unique ID
        }

        Device (PR59)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x3B)  // _UID: Unique ID
        }

        Device (PR60)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x3C)  // _UID: Unique ID
        }

        Device (PR61)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x3D)  // _UID: Unique ID
        }

        Device (PR62)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x3E)  // _UID: Unique ID
        }

        Device (PR63)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x3F)  // _UID: Unique ID
        }
    }

    Scope (_SB)
    {
        Device (PAGD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Processor Aggregator Device"))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_PUR, Package (0x02)  // _PUR: Processor Utilization Request
            {
                One, 
                Zero
            })
        }
    }

    Scope (\)
    {
        Method (PNTF, 1, NotSerialized)
        {
            If ((\_SB.CFGD & 0x0200))
            {
                If ((((PF00 & 0x08) && ((Arg0 == 0x80) || (
                    Arg0 == 0x82))) || ((PF00 & 0x10) && (Arg0 == 0x81))))
                {
                    Notify (\_SB.PR00, Arg0)
                }

                If ((((PF01 & 0x08) && ((Arg0 == 0x80) || (
                    Arg0 == 0x82))) || ((PF01 & 0x10) && (Arg0 == 0x81))))
                {
                    Notify (\_SB.PR01, Arg0)
                }

                If ((((PF02 & 0x08) && ((Arg0 == 0x80) || (
                    Arg0 == 0x82))) || ((PF02 & 0x10) && (Arg0 == 0x81))))
                {
                    Notify (\_SB.PR02, Arg0)
                }

                If ((((PF03 & 0x08) && ((Arg0 == 0x80) || (
                    Arg0 == 0x82))) || ((PF03 & 0x10) && (Arg0 == 0x81))))
                {
                    Notify (\_SB.PR03, Arg0)
                }

                If ((((PF04 & 0x08) && ((Arg0 == 0x80) || (
                    Arg0 == 0x82))) || ((PF04 & 0x10) && (Arg0 == 0x81))))
                {
                    Notify (\_SB.PR04, Arg0)
                }

                If ((((PF05 & 0x08) && ((Arg0 == 0x80) || (
                    Arg0 == 0x82))) || ((PF05 & 0x10) && (Arg0 == 0x81))))
                {
                    Notify (\_SB.PR05, Arg0)
                }

                If ((((PF06 & 0x08) && ((Arg0 == 0x80) || (
                    Arg0 == 0x82))) || ((PF06 & 0x10) && (Arg0 == 0x81))))
                {
                    Notify (\_SB.PR06, Arg0)
                }

                If ((((PF07 & 0x08) && ((Arg0 == 0x80) || (
                    Arg0 == 0x82))) || ((PF07 & 0x10) && (Arg0 == 0x81))))
                {
                    Notify (\_SB.PR07, Arg0)
                }
            }
            ElseIf (((Arg0 == 0x80) || ((Arg0 == 0x81) || (Arg0 == 
                0x82))))
            {
                Notify (\_SB.PR00, Arg0)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    _Y3F)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y40)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y41)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y42)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00060000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y43)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y3F._BAS, MBR0)  // _BAS: Base Address
                MBR0 = GMHB ()
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y40._BAS, DBR0)  // _BAS: Base Address
                DBR0 = GDMB ()
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y41._BAS, EBR0)  // _BAS: Base Address
                EBR0 = GEPB ()
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y42._BAS, XBR0)  // _BAS: Base Address
                XBR0 = GPCB ()
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y42._LEN, XSZ0)  // _LEN: Length
                XSZ0 = GPCL ()
                If (!HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y43._BAS, HBAS)  // _BAS: Base Address
                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y43._LEN, HLEN)  // _LEN: Length
                    HBAS = HPTB /* \HPTB */
                    HLEN = 0x0400
                }

                Return (BUF0) /* \_SB_.PC00.PDRC.BUF0 */
            }
        }
    }

    Method (BRTN, 1, Serialized)
    {
        If (((DIDX & 0x0F0F) == 0x0400))
        {
            Notify (\_SB.PC00.GFX0.DD1F, Arg0)
        }

        If (((DIDY & 0x0F0F) == 0x0401))
        {
            Notify (\_SB.PC00.GFX0.DD2F, Arg0)
        }

        If (((DGDX & 0x0F0F) == 0x0400))
        {
            Notify (\_SB.PC00.PEG1.PEGP.PEGB.PEGE.DEDP, Arg0)
        }
    }

    Scope (_GPE)
    {
        Method (_L73, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
        }

        If ((AL6D == One))
        {
            Method (_L6D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                If (CondRefOf (\_GPE.SL6D))
                {
                    SL6D ()
                }
            }
        }

        Method (_L69, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            SL69 ()
        }

        Method (_L61, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            L01C += One
            P8XH (Zero, One)
            P8XH (One, L01C)
            SL61 ()
        }

        Method (_L62, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GPEC = Zero
        }

        Method (_L66, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            SL66 ()
        }

        Name (PRES, One)
        Method (_L6F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (CondRefOf (\_GPE.AL6F))
            {
                AL6F ()
            }
            Else
            {
            }

            SL6F ()
        }

        Method (_L72, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (CondRefOf (\_SB.AWAC))
            {
                \_SB.AWAC.WAST = One
                Notify (\_SB.AWAC, 0x02) // Device Wake
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L17, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Local0 = \_SB.PC00.LPCB.EC.HWAC
            RRBF = Local0
            Sleep (0x0A)
            If ((Local0 & 0x02)) {}
            If ((Local0 & 0x04))
            {
                Notify (\_SB.LID, 0x02) // Device Wake
            }

            If ((Local0 & 0x08))
            {
                Notify (\_SB.SLPB, 0x02) // Device Wake
            }

            If ((Local0 & 0x10))
            {
                Notify (\_SB.SLPB, 0x02) // Device Wake
            }

            If ((Local0 & 0x40)) {}
            If ((Local0 & 0x80))
            {
                Notify (\_SB.SLPB, 0x02) // Device Wake
            }
        }

        Method (_L32, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PC00.RP01, 0x02) // Device Wake
        }
    }

    Method (GMIO, 2, Serialized)
    {
        OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (Arg0), 0x20)
        Field (PXCS, AnyAcc, NoLock, Preserve)
        {
            Offset (0x18), 
            PBUS,   8, 
            SBUS,   8
        }

        Local0 = \_SB.PC00.GPCB ()
        Local0 += ((Arg1 & 0x001F0000) >> One)
        Local0 += ((Arg1 & 0x07) << 0x0C)
        Local0 += (SBUS << 0x14)
        Return (Local0)
    }

    Scope (_SB.PC00.RP01.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x30)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32, 
            Offset (0x2C), 
            SVID,   16
        }

        Method (CAPA, 0, Serialized)
        {
            Local0 = ToInteger (VDID)
            If (((Local0 & 0xFFFF) == 0x14C3))
            {
                Local1 = 0x84
            }
            Else
            {
                Local1 = 0x44
            }

            Return (Local1)
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + CAPA ()), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x930814CD)
                    {
                        Return (One)
                    }
                    Case (0x110317CB)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Case (0x10011EAC)
                    {
                        Return (One)
                    }
                    Case (0x10021EAC)
                    {
                        Return (One)
                    }
                    Case (0xE0AB105B)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP01.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP01.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP01.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP01.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                0x02, 
                Package (0x2E)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                DerefOf (WRDY [One]) [0x18] = CD10 /* \CD10 */
                DerefOf (WRDY [One]) [0x19] = CD11 /* \CD11 */
                DerefOf (WRDY [One]) [0x1A] = CD12 /* \CD12 */
                DerefOf (WRDY [One]) [0x1B] = CD13 /* \CD13 */
                DerefOf (WRDY [One]) [0x1C] = CD14 /* \CD14 */
                DerefOf (WRDY [One]) [0x1D] = CD15 /* \CD15 */
                DerefOf (WRDY [One]) [0x1E] = CD16 /* \CD16 */
                DerefOf (WRDY [One]) [0x1F] = CD17 /* \CD17 */
                DerefOf (WRDY [One]) [0x20] = CD18 /* \CD18 */
                DerefOf (WRDY [One]) [0x21] = CD19 /* \CD19 */
                DerefOf (WRDY [One]) [0x22] = CD1A /* \CD1A */
                DerefOf (WRDY [One]) [0x23] = CD20 /* \CD20 */
                DerefOf (WRDY [One]) [0x24] = CD21 /* \CD21 */
                DerefOf (WRDY [One]) [0x25] = CD22 /* \CD22 */
                DerefOf (WRDY [One]) [0x26] = CD23 /* \CD23 */
                DerefOf (WRDY [One]) [0x27] = CD24 /* \CD24 */
                DerefOf (WRDY [One]) [0x28] = CD25 /* \CD25 */
                DerefOf (WRDY [One]) [0x29] = CD26 /* \CD26 */
                DerefOf (WRDY [One]) [0x2A] = CD27 /* \CD27 */
                DerefOf (WRDY [One]) [0x2B] = CD28 /* \CD28 */
                DerefOf (WRDY [One]) [0x2C] = CD29 /* \CD29 */
                DerefOf (WRDY [One]) [0x2D] = CD2A /* \CD2A */
                Return (WRDY) /* \_SB_.PC00.RP01.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                0x02, 
                Package (0x87)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                DerefOf (EWRY [One]) [0x45] = CD30 /* \CD30 */
                DerefOf (EWRY [One]) [0x46] = CD31 /* \CD31 */
                DerefOf (EWRY [One]) [0x47] = CD32 /* \CD32 */
                DerefOf (EWRY [One]) [0x48] = CD33 /* \CD33 */
                DerefOf (EWRY [One]) [0x49] = CD34 /* \CD34 */
                DerefOf (EWRY [One]) [0x4A] = CD35 /* \CD35 */
                DerefOf (EWRY [One]) [0x4B] = CD36 /* \CD36 */
                DerefOf (EWRY [One]) [0x4C] = CD37 /* \CD37 */
                DerefOf (EWRY [One]) [0x4D] = CD38 /* \CD38 */
                DerefOf (EWRY [One]) [0x4E] = CD39 /* \CD39 */
                DerefOf (EWRY [One]) [0x4F] = CD3A /* \CD3A */
                DerefOf (EWRY [One]) [0x50] = CD3B /* \CD3B */
                DerefOf (EWRY [One]) [0x51] = CD3C /* \CD3C */
                DerefOf (EWRY [One]) [0x52] = CD3D /* \CD3D */
                DerefOf (EWRY [One]) [0x53] = CD3E /* \CD3E */
                DerefOf (EWRY [One]) [0x54] = CD3F /* \CD3F */
                DerefOf (EWRY [One]) [0x55] = CD40 /* \CD40 */
                DerefOf (EWRY [One]) [0x56] = CD41 /* \CD41 */
                DerefOf (EWRY [One]) [0x57] = CD42 /* \CD42 */
                DerefOf (EWRY [One]) [0x58] = CD43 /* \CD43 */
                DerefOf (EWRY [One]) [0x59] = CD44 /* \CD44 */
                DerefOf (EWRY [One]) [0x5A] = CD45 /* \CD45 */
                DerefOf (EWRY [One]) [0x5B] = CD46 /* \CD46 */
                DerefOf (EWRY [One]) [0x5C] = CD47 /* \CD47 */
                DerefOf (EWRY [One]) [0x5D] = CD48 /* \CD48 */
                DerefOf (EWRY [One]) [0x5E] = CD49 /* \CD49 */
                DerefOf (EWRY [One]) [0x5F] = CD4A /* \CD4A */
                DerefOf (EWRY [One]) [0x60] = CD4B /* \CD4B */
                DerefOf (EWRY [One]) [0x61] = CD4C /* \CD4C */
                DerefOf (EWRY [One]) [0x62] = CD4D /* \CD4D */
                DerefOf (EWRY [One]) [0x63] = CD4E /* \CD4E */
                DerefOf (EWRY [One]) [0x64] = CD4F /* \CD4F */
                DerefOf (EWRY [One]) [0x65] = CD50 /* \CD50 */
                DerefOf (EWRY [One]) [0x66] = CD51 /* \CD51 */
                DerefOf (EWRY [One]) [0x67] = CD52 /* \CD52 */
                DerefOf (EWRY [One]) [0x68] = CD53 /* \CD53 */
                DerefOf (EWRY [One]) [0x69] = CD54 /* \CD54 */
                DerefOf (EWRY [One]) [0x6A] = CD55 /* \CD55 */
                DerefOf (EWRY [One]) [0x6B] = CD56 /* \CD56 */
                DerefOf (EWRY [One]) [0x6C] = CD57 /* \CD57 */
                DerefOf (EWRY [One]) [0x6D] = CD58 /* \CD58 */
                DerefOf (EWRY [One]) [0x6E] = CD59 /* \CD59 */
                DerefOf (EWRY [One]) [0x6F] = CD5A /* \CD5A */
                DerefOf (EWRY [One]) [0x70] = CD5B /* \CD5B */
                DerefOf (EWRY [One]) [0x71] = CD5C /* \CD5C */
                DerefOf (EWRY [One]) [0x72] = CD5D /* \CD5D */
                DerefOf (EWRY [One]) [0x73] = CD5E /* \CD5E */
                DerefOf (EWRY [One]) [0x74] = CD5F /* \CD5F */
                DerefOf (EWRY [One]) [0x75] = CD60 /* \CD60 */
                DerefOf (EWRY [One]) [0x76] = CD61 /* \CD61 */
                DerefOf (EWRY [One]) [0x77] = CD62 /* \CD62 */
                DerefOf (EWRY [One]) [0x78] = CD63 /* \CD63 */
                DerefOf (EWRY [One]) [0x79] = CD64 /* \CD64 */
                DerefOf (EWRY [One]) [0x7A] = CD65 /* \CD65 */
                DerefOf (EWRY [One]) [0x7B] = CD66 /* \CD66 */
                DerefOf (EWRY [One]) [0x7C] = CD67 /* \CD67 */
                DerefOf (EWRY [One]) [0x7D] = CD68 /* \CD68 */
                DerefOf (EWRY [One]) [0x7E] = CD69 /* \CD69 */
                DerefOf (EWRY [One]) [0x7F] = CD6A /* \CD6A */
                DerefOf (EWRY [One]) [0x80] = CD6B /* \CD6B */
                DerefOf (EWRY [One]) [0x81] = CD6C /* \CD6C */
                DerefOf (EWRY [One]) [0x82] = CD6D /* \CD6D */
                DerefOf (EWRY [One]) [0x83] = CD6E /* \CD6E */
                DerefOf (EWRY [One]) [0x84] = CD6F /* \CD6F */
                DerefOf (EWRY [One]) [0x85] = CD70 /* \CD70 */
                DerefOf (EWRY [One]) [0x86] = CD71 /* \CD71 */
                Return (EWRY) /* \_SB_.PC00.RP01.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP01.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP01.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP01.PXSX.PPAY */
            }

            Name (WTSY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            Method (WTAS, 0, Serialized)
            {
                DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                Return (WTSY) /* \_SB_.PC00.RP01.PXSX.WTSY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP01.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP01.PXSX.GPCX */
            }

            Method (QSGB, 0, Serialized)
            {
                Name (SGB0, Buffer (0x20)
                {
                    /* 0000 */  0xFF, 0xBF, 0xDF, 0xD7, 0xDD, 0xAF, 0xF8, 0xCE,  // ........
                    /* 0008 */  0xDB, 0xFF, 0x72, 0xEB, 0x37, 0xBE, 0xFF, 0x7F,  // ..r.7...
                    /* 0010 */  0xFF, 0x7E, 0x39, 0xFF, 0xFF, 0x74, 0xFE, 0xC7,  // .~9..t..
                    /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                })
                Return (SGB0) /* \_SB_.PC00.RP01.PXSX.QSGB.SGB0 */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (FHRF, 1, NotSerialized)
            {
                Name (RSTP, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                RSTP [Zero] = WBRS /* \WBRS */
                RSTP [One] = PBRS /* \PBRS */
                If ((GGOV (PRST) != WPRP))
                {
                    DL23 ()
                    SGOV (PRST, WPRP)
                }
                Else
                {
                    ADBG ("Assume WWAN DL23() is already done")
                }

                Sleep (TR2B)
                \PINP.ON (RSTP)
                If ((Arg0 == Zero))
                {
                    Sleep (TBTG)
                }
                ElseIf ((Arg0 == One))
                {
                    SPCO (WCLK, Zero)
                    Sleep (TB2F)
                    SGOV (WFCP, (~PFCP & One))
                    Sleep (TFDI)
                }
                Else
                {
                }
            }

            Method (SHRF, 0, NotSerialized)
            {
                Name (RSTP, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                RSTP [Zero] = WBRS /* \WBRS */
                RSTP [One] = PBRS /* \PBRS */
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                \PINP.OFF (RSTP)
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (DOSV, 0, NotSerialized)
            {
                Local0 = Zero
                While (((SVID != WSID) && (Local0 < WSTO)))
                {
                    Local0++
                    Sleep (One)
                }
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                Name (RSTP, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                RSTP [Zero] = WBRS /* \WBRS */
                RSTP [One] = PBRS /* \PBRS */
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        FHRF (Zero)
                        SHRF ()
                        Release (WWMT)
                        DOSV ()
                    }
                }
                Else
                {
                    \PINP.ON (RSTP)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    Sleep (0xC8)
                    SGOV (PRST, (~WPRP & One))
                    \PINP.OFF (RSTP)
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        FHRF (One)
                        SHRF ()
                        Release (WWMT)
                        DOSV ()
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP01.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (IFUN, 4, Serialized)
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x0F                                             // .
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Local0 = (CVPR << Zero)
                    Return (Local0)
                }

                If ((Arg2 == 0x02))
                {
                    CreateWordField (Arg3, Zero, CMDT)
                    CreateWordField (Arg3, 0x02, CMDP)
                    If ((CMDT == One))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                        {
                            Return (^^^CNVW.RSTT) /* \_SB_.PC00.CNVW.RSTT */
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((CMDT == 0x02))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                        {
                            ^^^CNVW.RSTT = CMDP /* \_SB_.PC00.RP01.PXSX.IFUN.CMDP */
                        }

                        Return (Zero)
                    }

                    If ((CMDT == 0x03))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                        {
                            Return (^^^CNVW.PRRS) /* \_SB_.PC00.CNVW.PRRS */
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Return (Zero)
                }

                If ((Arg2 == 0x03))
                {
                    If ((CRFI == One))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (IDSM, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (EFUN, 4, Serialized)
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Local0 = ACSD /* \ACSD */
                    Return (Local0)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = I5BS /* \I5BS */
                    Return (Local0)
                }

                If ((Arg2 == 0x03))
                {
                    Local0 = UHBS /* \UHBS */
                    Return (Local0)
                }

                If ((Arg2 == 0x06))
                {
                    Local0 = AXMU /* \AXMU */
                    Local0 <<= One
                    Local0 |= AXSU /* \AXSU */
                    Local1 = AXMR /* \AXMR */
                    Local1 <<= One
                    Local1 |= AXSR /* \AXSR */
                    Local1 <<= 0x02
                    Local0 |= Local1
                    Return (Local0)
                }

                If ((Arg2 == 0x04))
                {
                    Return (WFRC) /* \WFRC */
                }

                If ((Arg2 == 0x05))
                {
                    Return (WFUC) /* \WFUC */
                }

                If ((Arg2 == 0x07))
                {
                    Return (UNI4) /* \UNI4 */
                }

                If ((Arg2 == 0x08))
                {
                    Return (WFIC) /* \WFIC */
                }

                Return (Zero)
            }

            Method (EDSM, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If (EDSM (Arg0))
                    {
                        Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (IDSM (Arg0))
                    {
                        Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP05.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x30)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32, 
            Offset (0x2C), 
            SVID,   16
        }

        Method (CAPA, 0, Serialized)
        {
            Local0 = ToInteger (VDID)
            If (((Local0 & 0xFFFF) == 0x14C3))
            {
                Local1 = 0x84
            }
            Else
            {
                Local1 = 0x44
            }

            Return (Local1)
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + CAPA ()), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x930814CD)
                    {
                        Return (One)
                    }
                    Case (0x110317CB)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Case (0x10011EAC)
                    {
                        Return (One)
                    }
                    Case (0x10021EAC)
                    {
                        Return (One)
                    }
                    Case (0xE0AB105B)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP05.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP05.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP05.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP05.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                0x02, 
                Package (0x2E)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                DerefOf (WRDY [One]) [0x18] = CD10 /* \CD10 */
                DerefOf (WRDY [One]) [0x19] = CD11 /* \CD11 */
                DerefOf (WRDY [One]) [0x1A] = CD12 /* \CD12 */
                DerefOf (WRDY [One]) [0x1B] = CD13 /* \CD13 */
                DerefOf (WRDY [One]) [0x1C] = CD14 /* \CD14 */
                DerefOf (WRDY [One]) [0x1D] = CD15 /* \CD15 */
                DerefOf (WRDY [One]) [0x1E] = CD16 /* \CD16 */
                DerefOf (WRDY [One]) [0x1F] = CD17 /* \CD17 */
                DerefOf (WRDY [One]) [0x20] = CD18 /* \CD18 */
                DerefOf (WRDY [One]) [0x21] = CD19 /* \CD19 */
                DerefOf (WRDY [One]) [0x22] = CD1A /* \CD1A */
                DerefOf (WRDY [One]) [0x23] = CD20 /* \CD20 */
                DerefOf (WRDY [One]) [0x24] = CD21 /* \CD21 */
                DerefOf (WRDY [One]) [0x25] = CD22 /* \CD22 */
                DerefOf (WRDY [One]) [0x26] = CD23 /* \CD23 */
                DerefOf (WRDY [One]) [0x27] = CD24 /* \CD24 */
                DerefOf (WRDY [One]) [0x28] = CD25 /* \CD25 */
                DerefOf (WRDY [One]) [0x29] = CD26 /* \CD26 */
                DerefOf (WRDY [One]) [0x2A] = CD27 /* \CD27 */
                DerefOf (WRDY [One]) [0x2B] = CD28 /* \CD28 */
                DerefOf (WRDY [One]) [0x2C] = CD29 /* \CD29 */
                DerefOf (WRDY [One]) [0x2D] = CD2A /* \CD2A */
                Return (WRDY) /* \_SB_.PC00.RP05.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                0x02, 
                Package (0x87)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                DerefOf (EWRY [One]) [0x45] = CD30 /* \CD30 */
                DerefOf (EWRY [One]) [0x46] = CD31 /* \CD31 */
                DerefOf (EWRY [One]) [0x47] = CD32 /* \CD32 */
                DerefOf (EWRY [One]) [0x48] = CD33 /* \CD33 */
                DerefOf (EWRY [One]) [0x49] = CD34 /* \CD34 */
                DerefOf (EWRY [One]) [0x4A] = CD35 /* \CD35 */
                DerefOf (EWRY [One]) [0x4B] = CD36 /* \CD36 */
                DerefOf (EWRY [One]) [0x4C] = CD37 /* \CD37 */
                DerefOf (EWRY [One]) [0x4D] = CD38 /* \CD38 */
                DerefOf (EWRY [One]) [0x4E] = CD39 /* \CD39 */
                DerefOf (EWRY [One]) [0x4F] = CD3A /* \CD3A */
                DerefOf (EWRY [One]) [0x50] = CD3B /* \CD3B */
                DerefOf (EWRY [One]) [0x51] = CD3C /* \CD3C */
                DerefOf (EWRY [One]) [0x52] = CD3D /* \CD3D */
                DerefOf (EWRY [One]) [0x53] = CD3E /* \CD3E */
                DerefOf (EWRY [One]) [0x54] = CD3F /* \CD3F */
                DerefOf (EWRY [One]) [0x55] = CD40 /* \CD40 */
                DerefOf (EWRY [One]) [0x56] = CD41 /* \CD41 */
                DerefOf (EWRY [One]) [0x57] = CD42 /* \CD42 */
                DerefOf (EWRY [One]) [0x58] = CD43 /* \CD43 */
                DerefOf (EWRY [One]) [0x59] = CD44 /* \CD44 */
                DerefOf (EWRY [One]) [0x5A] = CD45 /* \CD45 */
                DerefOf (EWRY [One]) [0x5B] = CD46 /* \CD46 */
                DerefOf (EWRY [One]) [0x5C] = CD47 /* \CD47 */
                DerefOf (EWRY [One]) [0x5D] = CD48 /* \CD48 */
                DerefOf (EWRY [One]) [0x5E] = CD49 /* \CD49 */
                DerefOf (EWRY [One]) [0x5F] = CD4A /* \CD4A */
                DerefOf (EWRY [One]) [0x60] = CD4B /* \CD4B */
                DerefOf (EWRY [One]) [0x61] = CD4C /* \CD4C */
                DerefOf (EWRY [One]) [0x62] = CD4D /* \CD4D */
                DerefOf (EWRY [One]) [0x63] = CD4E /* \CD4E */
                DerefOf (EWRY [One]) [0x64] = CD4F /* \CD4F */
                DerefOf (EWRY [One]) [0x65] = CD50 /* \CD50 */
                DerefOf (EWRY [One]) [0x66] = CD51 /* \CD51 */
                DerefOf (EWRY [One]) [0x67] = CD52 /* \CD52 */
                DerefOf (EWRY [One]) [0x68] = CD53 /* \CD53 */
                DerefOf (EWRY [One]) [0x69] = CD54 /* \CD54 */
                DerefOf (EWRY [One]) [0x6A] = CD55 /* \CD55 */
                DerefOf (EWRY [One]) [0x6B] = CD56 /* \CD56 */
                DerefOf (EWRY [One]) [0x6C] = CD57 /* \CD57 */
                DerefOf (EWRY [One]) [0x6D] = CD58 /* \CD58 */
                DerefOf (EWRY [One]) [0x6E] = CD59 /* \CD59 */
                DerefOf (EWRY [One]) [0x6F] = CD5A /* \CD5A */
                DerefOf (EWRY [One]) [0x70] = CD5B /* \CD5B */
                DerefOf (EWRY [One]) [0x71] = CD5C /* \CD5C */
                DerefOf (EWRY [One]) [0x72] = CD5D /* \CD5D */
                DerefOf (EWRY [One]) [0x73] = CD5E /* \CD5E */
                DerefOf (EWRY [One]) [0x74] = CD5F /* \CD5F */
                DerefOf (EWRY [One]) [0x75] = CD60 /* \CD60 */
                DerefOf (EWRY [One]) [0x76] = CD61 /* \CD61 */
                DerefOf (EWRY [One]) [0x77] = CD62 /* \CD62 */
                DerefOf (EWRY [One]) [0x78] = CD63 /* \CD63 */
                DerefOf (EWRY [One]) [0x79] = CD64 /* \CD64 */
                DerefOf (EWRY [One]) [0x7A] = CD65 /* \CD65 */
                DerefOf (EWRY [One]) [0x7B] = CD66 /* \CD66 */
                DerefOf (EWRY [One]) [0x7C] = CD67 /* \CD67 */
                DerefOf (EWRY [One]) [0x7D] = CD68 /* \CD68 */
                DerefOf (EWRY [One]) [0x7E] = CD69 /* \CD69 */
                DerefOf (EWRY [One]) [0x7F] = CD6A /* \CD6A */
                DerefOf (EWRY [One]) [0x80] = CD6B /* \CD6B */
                DerefOf (EWRY [One]) [0x81] = CD6C /* \CD6C */
                DerefOf (EWRY [One]) [0x82] = CD6D /* \CD6D */
                DerefOf (EWRY [One]) [0x83] = CD6E /* \CD6E */
                DerefOf (EWRY [One]) [0x84] = CD6F /* \CD6F */
                DerefOf (EWRY [One]) [0x85] = CD70 /* \CD70 */
                DerefOf (EWRY [One]) [0x86] = CD71 /* \CD71 */
                Return (EWRY) /* \_SB_.PC00.RP05.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP05.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP05.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP05.PXSX.PPAY */
            }

            Name (WTSY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            Method (WTAS, 0, Serialized)
            {
                DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                Return (WTSY) /* \_SB_.PC00.RP05.PXSX.WTSY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP05.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP05.PXSX.GPCX */
            }

            Method (QSGB, 0, Serialized)
            {
                Name (SGB0, Buffer (0x20)
                {
                    /* 0000 */  0xFF, 0xBF, 0xDF, 0xD7, 0xDD, 0xAF, 0xF8, 0xCE,  // ........
                    /* 0008 */  0xDB, 0xFF, 0x72, 0xEB, 0x37, 0xBE, 0xFF, 0x7F,  // ..r.7...
                    /* 0010 */  0xFF, 0x7E, 0x39, 0xFF, 0xFF, 0x74, 0xFE, 0xC7,  // .~9..t..
                    /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                })
                Return (SGB0) /* \_SB_.PC00.RP05.PXSX.QSGB.SGB0 */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (FHRF, 1, NotSerialized)
            {
                Name (RSTP, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                RSTP [Zero] = WBRS /* \WBRS */
                RSTP [One] = PBRS /* \PBRS */
                If ((GGOV (PRST) != WPRP))
                {
                    DL23 ()
                    SGOV (PRST, WPRP)
                }
                Else
                {
                    ADBG ("Assume WWAN DL23() is already done")
                }

                Sleep (TR2B)
                \PINP.ON (RSTP)
                If ((Arg0 == Zero))
                {
                    Sleep (TBTG)
                }
                ElseIf ((Arg0 == One))
                {
                    SPCO (WCLK, Zero)
                    Sleep (TB2F)
                    SGOV (WFCP, (~PFCP & One))
                    Sleep (TFDI)
                }
                Else
                {
                }
            }

            Method (SHRF, 0, NotSerialized)
            {
                Name (RSTP, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                RSTP [Zero] = WBRS /* \WBRS */
                RSTP [One] = PBRS /* \PBRS */
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                \PINP.OFF (RSTP)
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (DOSV, 0, NotSerialized)
            {
                Local0 = Zero
                While (((SVID != WSID) && (Local0 < WSTO)))
                {
                    Local0++
                    Sleep (One)
                }
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                Name (RSTP, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                RSTP [Zero] = WBRS /* \WBRS */
                RSTP [One] = PBRS /* \PBRS */
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        FHRF (Zero)
                        SHRF ()
                        Release (WWMT)
                        DOSV ()
                    }
                }
                Else
                {
                    \PINP.ON (RSTP)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    Sleep (0xC8)
                    SGOV (PRST, (~WPRP & One))
                    \PINP.OFF (RSTP)
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        FHRF (One)
                        SHRF ()
                        Release (WWMT)
                        DOSV ()
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP05.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (IFUN, 4, Serialized)
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x0F                                             // .
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Local0 = (CVPR << Zero)
                    Return (Local0)
                }

                If ((Arg2 == 0x02))
                {
                    CreateWordField (Arg3, Zero, CMDT)
                    CreateWordField (Arg3, 0x02, CMDP)
                    If ((CMDT == One))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                        {
                            Return (^^^CNVW.RSTT) /* \_SB_.PC00.CNVW.RSTT */
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((CMDT == 0x02))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                        {
                            ^^^CNVW.RSTT = CMDP /* \_SB_.PC00.RP05.PXSX.IFUN.CMDP */
                        }

                        Return (Zero)
                    }

                    If ((CMDT == 0x03))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                        {
                            Return (^^^CNVW.PRRS) /* \_SB_.PC00.CNVW.PRRS */
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Return (Zero)
                }

                If ((Arg2 == 0x03))
                {
                    If ((CRFI == One))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (IDSM, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (EFUN, 4, Serialized)
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Local0 = ACSD /* \ACSD */
                    Return (Local0)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = I5BS /* \I5BS */
                    Return (Local0)
                }

                If ((Arg2 == 0x03))
                {
                    Local0 = UHBS /* \UHBS */
                    Return (Local0)
                }

                If ((Arg2 == 0x06))
                {
                    Local0 = AXMU /* \AXMU */
                    Local0 <<= One
                    Local0 |= AXSU /* \AXSU */
                    Local1 = AXMR /* \AXMR */
                    Local1 <<= One
                    Local1 |= AXSR /* \AXSR */
                    Local1 <<= 0x02
                    Local0 |= Local1
                    Return (Local0)
                }

                If ((Arg2 == 0x04))
                {
                    Return (WFRC) /* \WFRC */
                }

                If ((Arg2 == 0x05))
                {
                    Return (WFUC) /* \WFUC */
                }

                If ((Arg2 == 0x07))
                {
                    Return (UNI4) /* \UNI4 */
                }

                If ((Arg2 == 0x08))
                {
                    Return (WFIC) /* \WFIC */
                }

                Return (Zero)
            }

            Method (EDSM, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If (EDSM (Arg0))
                    {
                        Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (IDSM (Arg0))
                    {
                        Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB)
    {
        Name (PDAT, Zero)
        Name (DSSI, Zero)
        Device (WFDE)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "DSarDev")  // _UID: Unique ID
            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0xEF, 0x9D, 0xC4, 0x2B, 0x15, 0x7B, 0x05, 0x4F,  // ...+.{.O
                /* 0008 */  0x8B, 0xB7, 0xEE, 0x37, 0xB9, 0x54, 0x7C, 0x0B,  // ...7.T|.
                /* 0010 */  0x44, 0x45, 0x01, 0x02, 0x3E, 0xA3, 0xFE, 0xA6,  // DE..>...
                /* 0018 */  0xBF, 0xDA, 0xF5, 0x46, 0xBF, 0xC8, 0x46, 0x0D,  // ...F..F.
                /* 0020 */  0x96, 0x1B, 0xEC, 0x9F, 0xD0, 0x00, 0x01, 0x08,  // ........
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x43, 0x43, 0x01, 0x00                           // CC..
            })
            Method (WMDE, 3, NotSerialized)
            {
                If ((Arg1 == One))
                {
                    Return (One)
                }

                If ((Arg1 == 0x02))
                {
                    If ((DSSI == Zero))
                    {
                        PDAT = 0x00010001
                        DSSI = One
                    }

                    Return (One)
                }

                If ((Arg1 == 0x03))
                {
                    Return (PDAT) /* \_SB_.PDAT */
                }

                Return (Zero)
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xD0))
                {
                    Return (PDAT) /* \_SB_.PDAT */
                }

                Return (Zero)
            }

            Name (WQCC, Buffer (0x0482)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x72, 0x04, 0x00, 0x00, 0xF4, 0x0F, 0x00, 0x00,  // r.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xC2, 0x87, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0xA4, 0x82, 0x42, 0x04,  // ......B.
                /* 0028 */  0x8A, 0x43, 0x24, 0xC1, 0x0E, 0x60, 0x30, 0x1A,  // .C$..`0.
                /* 0030 */  0x40, 0x24, 0x07, 0x42, 0x2E, 0x98, 0x98, 0x00,  // @$.B....
                /* 0038 */  0x11, 0x10, 0xF2, 0x2A, 0xC0, 0xA6, 0x00, 0x93,  // ...*....
                /* 0040 */  0x20, 0xEA, 0xDF, 0x1F, 0xA2, 0x24, 0x38, 0x94,  //  ....$8.
                /* 0048 */  0x10, 0x08, 0x49, 0x14, 0x60, 0x5E, 0x80, 0x6E,  // ..I.`^.n
                /* 0050 */  0x01, 0x86, 0x05, 0xD8, 0x16, 0x60, 0x5A, 0x80,  // .....`Z.
                /* 0058 */  0x63, 0x48, 0x2A, 0x0D, 0x9C, 0x12, 0x58, 0x0A,  // cH*...X.
                /* 0060 */  0x84, 0x84, 0x0A, 0x50, 0x2E, 0xC0, 0xB7, 0x00,  // ...P....
                /* 0068 */  0xED, 0x88, 0x92, 0x2C, 0xC0, 0x32, 0x8C, 0x08,  // ...,.2..
                /* 0070 */  0x3C, 0x0A, 0x86, 0xC6, 0xA1, 0xB1, 0xC3, 0xB0,  // <.......
                /* 0078 */  0x4C, 0x30, 0x0D, 0xE2, 0x30, 0xCA, 0x46, 0x16,  // L0..0.F.
                /* 0080 */  0x81, 0x71, 0x3B, 0x15, 0x20, 0x57, 0x80, 0x30,  // .q;. W.0
                /* 0088 */  0x01, 0xE2, 0x51, 0x85, 0xD1, 0x1C, 0x14, 0x09,  // ..Q.....
                /* 0090 */  0x00, 0x8D, 0x12, 0x33, 0x26, 0x02, 0xDB, 0x39,  // ...3&..9
                /* 0098 */  0xB6, 0x46, 0x71, 0x2A, 0x85, 0x0B, 0x90, 0x8E,  // .Fq*....
                /* 00A0 */  0xA1, 0x11, 0x1C, 0x57, 0x82, 0xE8, 0xC1, 0x82,  // ...W....
                /* 00A8 */  0x44, 0x8B, 0x13, 0xAD, 0x20, 0x4C, 0xCD, 0x22,  // D... L."
                /* 00B0 */  0x5C, 0x88, 0x28, 0x31, 0x8A, 0x86, 0x21, 0x28,  // \.(1..!(
                /* 00B8 */  0x15, 0x8E, 0x49, 0x3E, 0x41, 0x85, 0x12, 0xD6,  // ..I>A...
                /* 00C0 */  0x48, 0x06, 0x8B, 0x7C, 0x6E, 0x71, 0x3D, 0x07,  // H..|nq=.
                /* 00C8 */  0x4F, 0xEC, 0xF0, 0x8C, 0x53, 0x29, 0x88, 0xD0,  // O...S)..
                /* 00D0 */  0x82, 0x99, 0xC0, 0xE3, 0x3A, 0x20, 0x8C, 0x0C,  // ....: ..
                /* 00D8 */  0x08, 0x79, 0x16, 0x60, 0x7D, 0xA4, 0x84, 0xC0,  // .y.`}...
                /* 00E0 */  0xEE, 0x05, 0x28, 0x9B, 0x85, 0x1C, 0xCE, 0x4D,  // ..(....M
                /* 00E8 */  0x63, 0x3B, 0x82, 0x16, 0x05, 0x68, 0x14, 0x60,  // c;...h.`
                /* 00F0 */  0x4B, 0x80, 0x37, 0x24, 0x19, 0x13, 0x60, 0x0D,  // K.7$..`.
                /* 00F8 */  0x45, 0x58, 0x81, 0xCE, 0x30, 0x8A, 0xC5, 0x41,  // EX..0..A
                /* 0100 */  0x09, 0x21, 0x5A, 0x94, 0x90, 0x11, 0x3A, 0x83,  // .!Z...:.
                /* 0108 */  0x24, 0xC8, 0xD1, 0x22, 0x46, 0x89, 0x1F, 0x32,  // $.."F..2
                /* 0110 */  0x4E, 0xFB, 0x83, 0x20, 0x11, 0xCF, 0x05, 0x92,  // N.. ....
                /* 0118 */  0x70, 0x3C, 0xF0, 0x68, 0x50, 0x67, 0x81, 0x04,  // p<.hPg..
                /* 0120 */  0xCF, 0x06, 0x1E, 0xDF, 0x79, 0x7A, 0x94, 0x06,  // ....yz..
                /* 0128 */  0x39, 0xDF, 0x13, 0xAB, 0xF3, 0x50, 0x40, 0x86,  // 9....P@.
                /* 0130 */  0xCF, 0xB0, 0x12, 0xFC, 0xFF, 0xFF, 0x13, 0x7C,  // .......|
                /* 0138 */  0x4A, 0xC0, 0xBB, 0x06, 0xD4, 0xF5, 0xE0, 0xE1,  // J.......
                /* 0140 */  0x80, 0xCD, 0xD1, 0x70, 0x7C, 0x88, 0x9E, 0xEA,  // ...p|...
                /* 0148 */  0x99, 0xB2, 0x91, 0x30, 0x88, 0x33, 0x7A, 0x2E,  // ...0.3z.
                /* 0150 */  0xC0, 0x0E, 0xEB, 0x64, 0x1E, 0x0A, 0x4A, 0x15,  // ...d..J.
                /* 0158 */  0x60, 0xF6, 0x80, 0xA0, 0xD1, 0x25, 0x38, 0x1E,  // `....%8.
                /* 0160 */  0xCF, 0xDC, 0xF3, 0x39, 0xE1, 0x04, 0x96, 0x3F,  // ...9...?
                /* 0168 */  0x08, 0xD4, 0xC8, 0x0C, 0x6D, 0x83, 0xD3, 0xD2,  // ....m...
                /* 0170 */  0xA5, 0xC0, 0x57, 0x00, 0x13, 0x58, 0xEC, 0x91,  // ..W..X..
                /* 0178 */  0x82, 0x8E, 0x07, 0xFC, 0x8A, 0x6F, 0x09, 0x42,  // .....o.B
                /* 0180 */  0x78, 0x73, 0xF0, 0x7C, 0x4D, 0x10, 0x2D, 0x30,  // xs.|M.-0
                /* 0188 */  0x76, 0x40, 0xF6, 0x2B, 0x00, 0x21, 0xF8, 0x4B,  // v@.+.!.K
                /* 0190 */  0xC4, 0x11, 0xBD, 0x27, 0x44, 0x78, 0x9E, 0xF0,  // ...'Dx..
                /* 0198 */  0x90, 0x1E, 0x08, 0x42, 0xC4, 0xEA, 0xF1, 0xDA,  // ...B....
                /* 01A0 */  0x40, 0xCE, 0x09, 0xBE, 0x5F, 0xF8, 0xE8, 0x80,  // @..._...
                /* 01A8 */  0xBB, 0x39, 0x70, 0x02, 0x8B, 0x3C, 0x4A, 0xA0,  // .9p..<J.
                /* 01B0 */  0x47, 0xC1, 0x8F, 0x02, 0x27, 0x71, 0x4C, 0x67,  // G...'qLg
                /* 01B8 */  0x14, 0xFC, 0x98, 0xA2, 0x9C, 0xC8, 0x41, 0xF9,  // ......A.
                /* 01C0 */  0x90, 0x61, 0x84, 0xE8, 0xCF, 0x16, 0xCF, 0x1A,  // .a......
                /* 01C8 */  0xD6, 0x3C, 0x01, 0x9D, 0x1A, 0xCE, 0xEB, 0x8D,  // .<......
                /* 01D0 */  0xC0, 0x63, 0x94, 0x87, 0x33, 0x01, 0x13, 0xBE,  // .c..3...
                /* 01D8 */  0x5C, 0xD9, 0xF8, 0x40, 0xB0, 0x81, 0x92, 0x28,  // \..@...(
                /* 01E0 */  0xE7, 0x04, 0x8D, 0x2A, 0xE6, 0x09, 0x7A, 0x52,  // ...*..zR
                /* 01E8 */  0xC6, 0x3D, 0x25, 0x1C, 0x12, 0xD3, 0x3A, 0x33,  // .=%...:3
                /* 01F0 */  0x82, 0xF4, 0x94, 0xC1, 0x25, 0x43, 0xEB, 0x90,  // ....%C..
                /* 01F8 */  0xC2, 0xC5, 0x52, 0x48, 0x2A, 0x84, 0x86, 0xE5,  // ..RH*...
                /* 0200 */  0x51, 0x58, 0x1C, 0x1C, 0x05, 0xF1, 0x49, 0xC0,  // QX....I.
                /* 0208 */  0xFF, 0xFF, 0xE0, 0x10, 0x72, 0x72, 0x7A, 0x40,  // ....rrz@
                /* 0210 */  0x4F, 0x04, 0x37, 0x0E, 0x7C, 0x40, 0x08, 0x9D,  // O.7.|@..
                /* 0218 */  0x25, 0x7C, 0x7A, 0xC0, 0xE3, 0x1D, 0xE3, 0x29,  // %|z....)
                /* 0220 */  0x7A, 0x26, 0x9E, 0xEC, 0xF3, 0x08, 0x58, 0xE6,  // z&....X.
                /* 0228 */  0xC7, 0x8E, 0x21, 0xEC, 0x44, 0x82, 0x99, 0x0C,  // ..!.D...
                /* 0230 */  0x7E, 0x2C, 0xEC, 0x47, 0x43, 0x87, 0x41, 0x6E,  // ~,.GC.An
                /* 0238 */  0x0A, 0x27, 0x91, 0x80, 0x9F, 0x18, 0xE0, 0xDF,  // .'......
                /* 0240 */  0x46, 0x3C, 0x83, 0x33, 0x79, 0xFF, 0x78, 0x1A,  // F<.3y.x.
                /* 0248 */  0x49, 0x60, 0x81, 0x27, 0x06, 0x50, 0x00, 0xF9,  // I`.'.P..
                /* 0250 */  0x76, 0xE0, 0x4B, 0xCA, 0x13, 0x02, 0x9B, 0x43,  // v.K....C
                /* 0258 */  0x88, 0x30, 0xD1, 0x0C, 0x8F, 0x09, 0x39, 0x2A,  // .0....9*
                /* 0260 */  0x2A, 0x6B, 0x5C, 0xA8, 0xB1, 0xFA, 0x6C, 0xF0,  // *k\...l.
                /* 0268 */  0xAE, 0x63, 0xEC, 0xD3, 0xF4, 0x05, 0xE6, 0x04,  // .c......
                /* 0270 */  0x5F, 0x15, 0x0E, 0xEA, 0xE5, 0xC2, 0xA7, 0x01,  // _.......
                /* 0278 */  0xC3, 0x7A, 0xF4, 0x1C, 0xD6, 0x68, 0x61, 0x0F,  // .z...ha.
                /* 0280 */  0xFA, 0xC1, 0xC2, 0x97, 0x12, 0xCF, 0xCC, 0x18,  // ........
                /* 0288 */  0x61, 0x7D, 0x02, 0x30, 0xFC, 0x13, 0x00, 0x58,  // a}.0...X
                /* 0290 */  0x0E, 0x17, 0x7C, 0xF8, 0x0F, 0x22, 0x0F, 0x17,  // ..|.."..
                /* 0298 */  0xFC, 0xDA, 0x63, 0xA0, 0xB8, 0x6F, 0x01, 0x38,  // ..c..o.8
                /* 02A0 */  0x3C, 0x9F, 0x05, 0x7C, 0xB7, 0x61, 0xF7, 0x00,  // <..|.a..
                /* 02A8 */  0xCC, 0xFF, 0x5F, 0xF6, 0x61, 0x02, 0x64, 0x83,  // .._.a.d.
                /* 02B0 */  0x3E, 0x80, 0x68, 0xE1, 0x03, 0xFA, 0x1E, 0xF2,  // >.h.....
                /* 02B8 */  0x40, 0xC4, 0x0F, 0x13, 0xE0, 0xDE, 0x8E, 0x27,  // @......'
                /* 02C0 */  0x82, 0x1F, 0x08, 0x3E, 0xDE, 0x69, 0x02, 0x14,  // ...>.i..
                /* 02C8 */  0xF7, 0x83, 0x87, 0x25, 0x70, 0x0E, 0x12, 0xD6,  // ...%p...
                /* 02D0 */  0x61, 0x02, 0x70, 0x12, 0xF1, 0x30, 0x01, 0xBA,  // a.p..0..
                /* 02D8 */  0xB3, 0x80, 0x0F, 0x13, 0xE0, 0xF8, 0xFF, 0x1F,  // ........
                /* 02E0 */  0x26, 0x38, 0x88, 0x0F, 0x13, 0x60, 0x3B, 0xF8,  // &8...`;.
                /* 02E8 */  0x60, 0x0E, 0x13, 0xEC, 0x1A, 0x00, 0x06, 0x99,  // `.......
                /* 02F0 */  0x67, 0x09, 0xD4, 0xD9, 0xCD, 0xD2, 0xCF, 0x12,  // g.......
                /* 02F8 */  0x90, 0x6F, 0x42, 0x18, 0xA1, 0x07, 0x09, 0x94,  // .oB.....
                /* 0300 */  0x44, 0x0A, 0x09, 0x3C, 0x48, 0xA0, 0x24, 0xC1,  // D..<H.$.
                /* 0308 */  0x51, 0x10, 0x8F, 0xD6, 0x71, 0x0F, 0x12, 0xE8,  // Q...q...
                /* 0310 */  0x31, 0xFA, 0x7C, 0x04, 0x2F, 0xD8, 0x31, 0x02,  // 1.|./.1.
                /* 0318 */  0x14, 0x07, 0x04, 0xDC, 0x11, 0x0E, 0x8C, 0x67,  // .......g
                /* 0320 */  0x08, 0xC0, 0xD0, 0xFF, 0xFF, 0x0C, 0x01, 0x0E,  // ........
                /* 0328 */  0x58, 0x7E, 0x86, 0x00, 0xA6, 0xD7, 0x26, 0x58,  // X~....&X
                /* 0330 */  0xE7, 0x03, 0x5C, 0xD0, 0xE7, 0x81, 0x09, 0x24,  // ..\....$
                /* 0338 */  0xF7, 0xB8, 0xA0, 0x68, 0x30, 0x28, 0x0B, 0x27,  // ...h0(.'
                /* 0340 */  0x4B, 0x20, 0x8A, 0xEC, 0x93, 0x25, 0xE6, 0xF0,  // K ...%..
                /* 0348 */  0xE0, 0xD1, 0x82, 0xE3, 0x4E, 0xF0, 0x42, 0xE4,  // ....N.B.
                /* 0350 */  0xC1, 0x7B, 0x90, 0x8F, 0x89, 0x21, 0xA2, 0xBC,  // .{...!..
                /* 0358 */  0xB4, 0x19, 0xEF, 0x9D, 0xED, 0x90, 0xE2, 0x1C,  // ........
                /* 0360 */  0xC8, 0x4B, 0x24, 0x0E, 0x2D, 0xD6, 0x11, 0xFB,  // .K$.-...
                /* 0368 */  0x8E, 0xE0, 0xDB, 0xA4, 0x6F, 0x7E, 0x1C, 0x22,  // ....o~."
                /* 0370 */  0xC8, 0x83, 0xA1, 0x4F, 0x92, 0xB0, 0xB1, 0x6B,  // ...O...k
                /* 0378 */  0xBB, 0x07, 0x68, 0x30, 0x41, 0x1E, 0x20, 0x22,  // ..h0A. "
                /* 0380 */  0x04, 0x39, 0x97, 0xA3, 0x0A, 0xF3, 0xF4, 0xF8,  // .9......
                /* 0388 */  0x2E, 0xE9, 0x89, 0x86, 0xF3, 0x49, 0xD2, 0xFF,  // .....I..
                /* 0390 */  0x7F, 0x20, 0x1F, 0x20, 0x5E, 0x25, 0x43, 0xB1,  // . . ^%C.
                /* 0398 */  0x4B, 0x45, 0xC8, 0x17, 0xC9, 0x20, 0xAF, 0x94,  // KE... ..
                /* 03A0 */  0xC1, 0x22, 0x07, 0x0B, 0x13, 0xEF, 0x49, 0x92,  // ."....I.
                /* 03A8 */  0x89, 0x7D, 0x31, 0xE8, 0xC0, 0xEA, 0x93, 0x24,  // .}1....$
                /* 03B0 */  0xC0, 0x0F, 0x91, 0x27, 0x0A, 0x1D, 0x68, 0x70,  // ...'..hp
                /* 03B8 */  0xA3, 0xF0, 0x81, 0xE1, 0xF5, 0x02, 0x23, 0xEA,  // ......#.
                /* 03C0 */  0x64, 0x41, 0x45, 0x9D, 0x47, 0x50, 0x27, 0x09,  // dAE.GP'.
                /* 03C8 */  0x1F, 0x22, 0x18, 0x28, 0x3F, 0xBD, 0x61, 0x06,  // .".(?.a.
                /* 03D0 */  0x06, 0x1F, 0x10, 0xEF, 0x7D, 0xCA, 0xE4, 0x4E,  // ....}..N
                /* 03D8 */  0x62, 0x40, 0x16, 0xE2, 0x58, 0x01, 0xFD, 0xFF,  // b@..X...
                /* 03E0 */  0x7F, 0xAC, 0xE0, 0xD7, 0x87, 0x38, 0x67, 0x71,  // .....8gq
                /* 03E8 */  0x3E, 0x06, 0x3C, 0x8A, 0xD7, 0x12, 0xCC, 0x20,  // >.<.... 
                /* 03F0 */  0xCE, 0xC1, 0x77, 0x96, 0x28, 0xC6, 0x78, 0xF2,  // ..w.(.x.
                /* 03F8 */  0x30, 0x8C, 0x91, 0x0C, 0xEA, 0x93, 0x1C, 0x76,  // 0......v
                /* 0400 */  0x00, 0xEC, 0xFE, 0x6B, 0x88, 0x40, 0xAF, 0x18,  // ...k.@..
                /* 0408 */  0x7C, 0x6C, 0xEC, 0xAC, 0x03, 0xBE, 0x93, 0xE7,  // |l......
                /* 0410 */  0xB3, 0x29, 0x98, 0x6E, 0x2E, 0xB8, 0xF3, 0xC4,  // .).n....
                /* 0418 */  0x43, 0x08, 0x1F, 0x9B, 0x07, 0xE5, 0x89, 0xB2,  // C.......
                /* 0420 */  0xE3, 0x08, 0xE6, 0x74, 0x0A, 0x4C, 0xAE, 0x48,  // ...t.L.H
                /* 0428 */  0x1E, 0x02, 0x3F, 0x68, 0x78, 0x08, 0x7C, 0x00,  // ..?hx.|.
                /* 0430 */  0xAD, 0xCE, 0x92, 0xDC, 0x4E, 0xCE, 0x0D, 0x77,  // ....N..w
                /* 0438 */  0x52, 0xE0, 0x53, 0xC2, 0x0D, 0x00, 0xA3, 0xD0,  // R.S.....
                /* 0440 */  0xA6, 0x4F, 0x8D, 0x46, 0xAD, 0x1A, 0x94, 0xA9,  // .O.F....
                /* 0448 */  0x51, 0xA6, 0x41, 0xAD, 0x3E, 0x95, 0x1A, 0x33,  // Q.A.>..3
                /* 0450 */  0x76, 0x4A, 0xB0, 0xC0, 0x87, 0x85, 0x4E, 0x0E,  // vJ....N.
                /* 0458 */  0x8E, 0x07, 0x42, 0x23, 0x1D, 0x75, 0x64, 0xE4,  // ..B#.ud.
                /* 0460 */  0x44, 0x6A, 0x10, 0x01, 0x59, 0xCA, 0xE9, 0x55,  // Dj..Y..U
                /* 0468 */  0x40, 0x3E, 0xBF, 0x72, 0xC1, 0x26, 0x80, 0x98,  // @>.r.&..
                /* 0470 */  0x7C, 0x10, 0x01, 0x93, 0x47, 0x83, 0x40, 0x2C,  // |...G.@,
                /* 0478 */  0xC8, 0x06, 0x08, 0x13, 0xAD, 0x03, 0x84, 0xFD,  // ........
                /* 0480 */  0xFF, 0x01                                       // ..
            })
        }

        Device (WFTE)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "TestDev")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x7F, 0xAB, 0x13, 0x1F, 0x20, 0x62, 0x10, 0x42,  // .... b.B
                /* 0008 */  0x8F, 0x8E, 0x8B, 0xB5, 0xE7, 0x1E, 0xE9, 0x69,  // .......i
                /* 0010 */  0x54, 0x45, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // TE..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x43, 0x43, 0x01, 0x00   // ..).CC..
            })
            Method (WMTE, 3, NotSerialized)
            {
                If ((Arg1 == One))
                {
                    PDAT = Arg2
                    Notify (WFDE, 0xD0) // Hardware-Specific
                    Return (PDAT) /* \_SB_.PDAT */
                }

                Return (Zero)
            }

            Name (WQCC, Buffer (0x02F1)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xE1, 0x02, 0x00, 0x00, 0xC2, 0x06, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0x5D, 0x83, 0x00, 0x01, 0x06, 0x18, 0x42,  // .].....B
                /* 0020 */  0x20, 0x14, 0x03, 0x89, 0xC0, 0xA2, 0x69, 0x24,  //  .....i$
                /* 0028 */  0xC7, 0x01, 0x0C, 0x86, 0xCB, 0x72, 0x20, 0xE4,  // .....r .
                /* 0030 */  0x82, 0x89, 0x09, 0x10, 0x01, 0x21, 0xAF, 0x02,  // .....!..
                /* 0038 */  0x6C, 0x0A, 0x30, 0x09, 0xA2, 0xFE, 0xFD, 0x21,  // l.0....!
                /* 0040 */  0x4A, 0x82, 0x43, 0x09, 0x81, 0x90, 0x64, 0x01,  // J.C...d.
                /* 0048 */  0xE6, 0x05, 0xE8, 0x16, 0x60, 0x58, 0x80, 0x6D,  // ....`X.m
                /* 0050 */  0x01, 0xA6, 0x05, 0x38, 0x86, 0xA4, 0xD2, 0xC0,  // ...8....
                /* 0058 */  0x29, 0x81, 0xA5, 0x40, 0x48, 0xB8, 0x00, 0xE5,  // )..@H...
                /* 0060 */  0x02, 0x7C, 0x0B, 0xD0, 0x8E, 0x28, 0xDC, 0x96,  // .|...(..
                /* 0068 */  0x61, 0x44, 0xE0, 0x51, 0x44, 0xB6, 0x50, 0x34,  // aD.QD.P4
                /* 0070 */  0x0A, 0x8D, 0x1D, 0x86, 0x65, 0x82, 0x69, 0x10,  // ....e.i.
                /* 0078 */  0x87, 0x51, 0x36, 0xB2, 0x08, 0x3C, 0xA1, 0x4E,  // .Q6..<.N
                /* 0080 */  0x05, 0xC8, 0x15, 0x20, 0x4C, 0x80, 0x78, 0x54,  // ... L.xT
                /* 0088 */  0x61, 0x34, 0x07, 0x45, 0x20, 0x43, 0x63, 0xC4,  // a4.E Cc.
                /* 0090 */  0x40, 0x48, 0x22, 0xAC, 0x9C, 0x63, 0x6B, 0x14,  // @H"..ck.
                /* 0098 */  0xA7, 0x71, 0x34, 0xA5, 0x63, 0x68, 0x04, 0xC7,  // .q4.ch..
                /* 00A0 */  0x75, 0x40, 0x06, 0xE9, 0x7D, 0x3A, 0x44, 0xD0,  // u@..}:D.
                /* 00A8 */  0x84, 0x34, 0x8A, 0x68, 0x21, 0xA2, 0x04, 0x3D,  // .4.h!..=
                /* 00B0 */  0x8E, 0x20, 0x81, 0x23, 0x24, 0x30, 0xCC, 0x31,  // . .#$0.1
                /* 00B8 */  0x60, 0x64, 0x40, 0xC8, 0xB3, 0x00, 0xEB, 0x83,  // `d@.....
                /* 00C0 */  0x23, 0x04, 0x76, 0x2F, 0xC0, 0x98, 0x00, 0x8D,  // #.v/....
                /* 00C8 */  0x10, 0x72, 0x26, 0xC0, 0xA0, 0x00, 0x85, 0x02,  // .r&.....
                /* 00D0 */  0xBC, 0xC1, 0xC8, 0x96, 0x00, 0x6D, 0x02, 0x94,  // .....m..
                /* 00D8 */  0x21, 0x68, 0x4A, 0x51, 0x0E, 0x2A, 0x48, 0xB8,  // !hJQ.*H.
                /* 00E0 */  0x28, 0x16, 0x87, 0x26, 0x88, 0x16, 0x51, 0x08,  // (..&..Q.
                /* 00E8 */  0x68, 0x84, 0xD6, 0x60, 0x84, 0x1B, 0x2E, 0x46,  // h..`...F
                /* 00F0 */  0x84, 0x93, 0x8B, 0x1C, 0xA2, 0xFD, 0x41, 0x90,  // ......A.
                /* 00F8 */  0x68, 0x47, 0x01, 0x49, 0x00, 0x51, 0xA4, 0xD1,  // hG.I.Q..
                /* 0100 */  0xA0, 0x86, 0x9F, 0xE0, 0x71, 0xC0, 0x47, 0x81,  // ....q.G.
                /* 0108 */  0x93, 0x3B, 0xA9, 0x13, 0x33, 0xC8, 0x89, 0x1D,  // .;..3...
                /* 0110 */  0x5D, 0x9D, 0xE7, 0x00, 0x32, 0x62, 0x86, 0x95,  // ]...2b..
                /* 0118 */  0xE0, 0xD7, 0xC0, 0x07, 0x03, 0xBC, 0x6B, 0x40,  // ......k@
                /* 0120 */  0xDD, 0x08, 0x9E, 0x07, 0xD8, 0x30, 0xC3, 0x61,  // .....0.a
                /* 0128 */  0x86, 0xE8, 0xD1, 0x86, 0xFB, 0xFF, 0x9F, 0xC0,  // ........
                /* 0130 */  0x21, 0x32, 0x40, 0x0F, 0xED, 0x51, 0x00, 0xEB,  // !2@..Q..
                /* 0138 */  0x70, 0x32, 0x3A, 0x07, 0x94, 0x2A, 0xC0, 0xEC,  // p2:..*..
                /* 0140 */  0x99, 0x40, 0x33, 0x4B, 0x70, 0x3C, 0x3E, 0x00,  // .@3Kp<>.
                /* 0148 */  0x78, 0x3E, 0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81,  // x>'.....
                /* 0150 */  0x1A, 0x99, 0xA1, 0x3D, 0xE3, 0xD3, 0x7A, 0x0F,  // ...=..z.
                /* 0158 */  0xF0, 0xF1, 0xE0, 0xB0, 0x98, 0x58, 0x08, 0x29,  // .....X.)
                /* 0160 */  0x80, 0xD0, 0x78, 0xC0, 0xAF, 0xF8, 0x68, 0x20,  // ..x...h 
                /* 0168 */  0x84, 0x97, 0x05, 0xCF, 0xD7, 0x87, 0x04, 0x03,  // ........
                /* 0170 */  0x63, 0x07, 0x64, 0xBF, 0x02, 0x10, 0x82, 0xBF,  // c.d.....
                /* 0178 */  0x2E, 0x1C, 0xD1, 0x43, 0x43, 0x84, 0x04, 0x2F,  // ...CC../
                /* 0180 */  0x03, 0x47, 0x50, 0x29, 0xBE, 0xB0, 0x0E, 0x21,  // .GP)...!
                /* 0188 */  0x46, 0xA4, 0x18, 0x51, 0x82, 0xD4, 0x0A, 0xA1,  // F..Q....
                /* 0190 */  0xE9, 0x87, 0x49, 0x50, 0xE4, 0xC9, 0x01, 0x3D,  // ..IP...=
                /* 0198 */  0x02, 0x8E, 0x77, 0x02, 0xC7, 0x13, 0xD9, 0xE3,  // ..w.....
                /* 01A0 */  0x89, 0x72, 0x12, 0x07, 0xE4, 0x33, 0x85, 0x11,  // .r...3..
                /* 01A8 */  0x4E, 0xF3, 0x51, 0xE2, 0xD1, 0xC2, 0x9A, 0x67,  // N.Q....g
                /* 01B0 */  0xA4, 0x13, 0xC3, 0x39, 0xBD, 0x0D, 0x98, 0xA0,  // ...9....
                /* 01B8 */  0xB2, 0xE7, 0x80, 0x8E, 0x1F, 0x56, 0x05, 0x22,  // .....V."
                /* 01C0 */  0x1B, 0x4B, 0xF5, 0x39, 0x83, 0x6A, 0x5E, 0xAE,  // .K.9.j^.
                /* 01C8 */  0x46, 0x74, 0xCC, 0xC7, 0xEA, 0x11, 0x9C, 0xB4,  // Ft......
                /* 01D0 */  0xA7, 0x17, 0xD9, 0x4A, 0xC1, 0x04, 0xEC, 0x61,  // ...J...a
                /* 01D8 */  0x5B, 0x23, 0x85, 0xD4, 0xD0, 0x68, 0x3C, 0x06,  // [#...h<.
                /* 01E0 */  0x77, 0xFE, 0x13, 0x09, 0x05, 0x31, 0xA0, 0xC3,  // w....1..
                /* 01E8 */  0x41, 0xC8, 0xC9, 0x49, 0x00, 0xA5, 0x62, 0xBC,  // A..I..b.
                /* 01F0 */  0xE4, 0x68, 0xC1, 0x08, 0xA6, 0x81, 0xD0, 0xDD,  // .h......
                /* 01F8 */  0xC1, 0xF3, 0xF3, 0x3D, 0x80, 0xDF, 0x4C, 0x7C,  // ...=..L|
                /* 0200 */  0x32, 0x30, 0xB0, 0xEF, 0x13, 0x6F, 0x1C, 0xF0,  // 20...o..
                /* 0208 */  0xFF, 0xFF, 0x37, 0x0E, 0x36, 0x09, 0x8C, 0x9A,  // ..7.6...
                /* 0210 */  0x23, 0x04, 0x9D, 0x02, 0xBF, 0x00, 0xBC, 0x0A,  // #.......
                /* 0218 */  0x98, 0xC0, 0xBA, 0x2E, 0x06, 0xD0, 0x4F, 0x1D,  // ......O.
                /* 0220 */  0x1E, 0xA8, 0xAF, 0x1C, 0x67, 0x63, 0x7D, 0x07,  // ....gc}.
                /* 0228 */  0x03, 0x50, 0x00, 0xF9, 0x22, 0xE0, 0x93, 0xC1,  // .P.."...
                /* 0230 */  0xC3, 0x00, 0xBB, 0x19, 0x18, 0x26, 0x9A, 0xD1,  // .....&..
                /* 0238 */  0xB9, 0xA8, 0x69, 0xA3, 0x64, 0xC0, 0x68, 0xDA,  // ..i.d.h.
                /* 0240 */  0x06, 0xF1, 0xB4, 0x1D, 0x71, 0xDA, 0x68, 0x68,  // ....q.hh
                /* 0248 */  0x5F, 0x05, 0x7C, 0x11, 0x70, 0xA8, 0x61, 0xD3,  // _.|.p.a.
                /* 0250 */  0x3B, 0x07, 0x7E, 0xAE, 0x67, 0x16, 0xD0, 0x93,  // ;.~.g...
                /* 0258 */  0xF0, 0x91, 0xE4, 0xB8, 0xC1, 0x32, 0x0A, 0x06,  // .....2..
                /* 0260 */  0x1E, 0x24, 0x8E, 0x47, 0xC1, 0x26, 0xCE, 0x07,  // .$.G.&..
                /* 0268 */  0xE0, 0x89, 0xF3, 0x71, 0xF9, 0x86, 0x01, 0x7F,  // ...q....
                /* 0270 */  0xE4, 0x58, 0x82, 0x02, 0x67, 0x0E, 0x72, 0x78,  // .X..g.rx
                /* 0278 */  0x4C, 0xB0, 0x51, 0x51, 0x59, 0xE3, 0x42, 0x8D,  // L.QQY.B.
                /* 0280 */  0xD2, 0x57, 0x20, 0x86, 0x7D, 0x82, 0x16, 0x3D,  // .W .}..=
                /* 0288 */  0x48, 0x9D, 0x2F, 0x0E, 0xEA, 0x69, 0xC4, 0x63,  // H./..i.c
                /* 0290 */  0x33, 0xAC, 0xC7, 0xFD, 0xFF, 0x0F, 0x8B, 0x41,  // 3......A
                /* 0298 */  0x0B, 0x7B, 0xB8, 0x2F, 0x22, 0x3E, 0xC5, 0x78,  // .{./">.x
                /* 02A0 */  0x66, 0xC6, 0x08, 0xEB, 0xB1, 0x7B, 0x40, 0x8F,  // f....{@.
                /* 02A8 */  0x10, 0xE0, 0x01, 0x7B, 0x35, 0x39, 0xD3, 0x07,  // ...{59..
                /* 02B0 */  0x97, 0x3F, 0x8E, 0xEA, 0x20, 0x74, 0xDF, 0xE0,  // .?.. t..
                /* 02B8 */  0x28, 0x21, 0x1E, 0x38, 0x30, 0x04, 0x15, 0xDA,  // (!.80...
                /* 02C0 */  0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35,  // ....U.25
                /* 02C8 */  0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6,  // .4...Rc.
                /* 02D0 */  0x3C, 0x5C, 0x8E, 0xE8, 0x41, 0x81, 0xBC, 0x13,  // <\..A...
                /* 02D8 */  0x34, 0x42, 0x87, 0x00, 0xA1, 0x42, 0x9E, 0x08,  // 4B...B..
                /* 02E0 */  0x32, 0x72, 0x0F, 0x31, 0x88, 0x80, 0xAC, 0xCC,  // 2r.1....
                /* 02E8 */  0x02, 0x10, 0xD3, 0x09, 0x22, 0x20, 0xFF, 0xFF,  // ...." ..
                /* 02F0 */  0x01                                             // .
            })
        }

        Method (USSV, 1, Serialized)
        {
            PDAT = Arg0
        }

        Method (GSSV, 0, Serialized)
        {
            Return (PDAT) /* \_SB_.PDAT */
        }
    }

    Scope (_SB.PC00.RP01.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP02.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP03.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP04.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP05.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP06.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP07.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP08.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP09.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP10.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP11.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP12.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP13.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP14.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP15.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP16.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP17.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP18.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP19.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP20.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP21.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP22.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP23.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP24.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP25.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP26.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP27.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP28.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.PEG0.PEGP)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.PEG1.PEGP)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.PEG2.PEGP)
    {
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB)
    {
        Device (PEPD)
        {
            Name (_HID, "INT33A1" /* Intel Power Engine */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (LBUF, Buffer (0xC0) {})
            Name (PPD0, Package (0x03)
            {
                "\\_SB.PC00.SAT0", 
                Zero, 
                Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0xFF, 
                        Zero, 
                        0x81
                    }
                }
            })
            Name (PPD3, Package (0x03)
            {
                "\\_SB.PC00.SAT0", 
                Zero, 
                Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0xFF, 
                        0x03
                    }
                }
            })
            Name (WWD3, Package (0x03)
            {
                "\\_SB.PC00.RP04", 
                Zero, 
                Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0xFF, 
                        0x03
                    }
                }
            })
            Name (PKD0, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0xFF, 
                    Zero, 
                    0x81
                }
            })
            Name (PKD3, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0xFF, 
                    0x03
                }
            })
            Name (DEVY, Package (0x77)
            {
                Package (0x03)
                {
                    "\\_SB.PR00", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR01", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR02", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR03", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR04", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR05", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR06", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR07", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.GFX0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.UA00", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.UA01", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.XHCI", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.HDAS", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEMC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PSDC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C3", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C4", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C5", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.UA02", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SPI0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SPI1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP01", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP02", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP03", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP04", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP05", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP06", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP07", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP08", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP09", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP10", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP11", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP12", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP13", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP14", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP15", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP16", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP17", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP18", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP19", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP20", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.VOL0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR08", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR09", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR10", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR11", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR12", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR13", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR14", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR15", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SPI2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.CNVW", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.IPU0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.HECI", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.GLAN", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEG0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.THC0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.THC1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Depreciate IDA", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "USB\\VID_8087&PID_0AC9&MI*", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x02
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C6", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEG1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR16", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR17", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR18", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR19", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR20", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR21", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR22", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR23", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.GNA0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.VMD0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP21", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP22", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP23", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP24", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved For DTBT RP0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved For DTBT RP1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP25", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP26", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP27", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP28", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.PRT0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.PRT1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.PRT2", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.PRT3", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.PRT4", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.PRT5", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.PRT6", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.PRT7", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.HEC3", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEG2", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR24", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR25", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR26", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR27", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR28", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR29", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR30", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR31", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PUF0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PUF1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C7", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TXHC", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TXDC", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TRP0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TRP1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TRP2", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TRP3", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC01.TRP0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC01.TRP1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC01.TRP2", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC01.TRP3", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TDM0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TDM1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }
            })
            Method (GUCP, 2, Serialized)
            {
                If (((PEPC & Arg0) == Arg0))
                {
                    If (((PEPC & (Arg1 | Arg0)) == (Arg1 | Arg0
                        )))
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (One)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (GRPC, 1, Serialized)
            {
                If ((Arg0 == One))
                {
                    Return (GUCP (0x0000000200000000, 0x0000000400000000))
                }

                If ((Arg0 == 0x02))
                {
                    Return (GUCP (0x0000000800000000, 0x0000001000000000))
                }

                If ((Arg0 == 0x03))
                {
                    If ((OSYS >= 0x07DF))
                    {
                        Return (GUCP (0x0000002000000000, 0x0000004000000000))
                    }

                    Return (Zero)
                }

                If ((Arg0 == 0x04))
                {
                    Return (GUCP (0x0000008000000000, 0x0000010000000000))
                }

                If ((Arg0 == 0x05))
                {
                    Return (GUCP (0x20000000, 0x20000000))
                }

                If ((Arg0 == 0x06))
                {
                    If ((WRTO == 0x03))
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        If ((WRTO == One))
                        {
                            DSDF (WRTO, 0x3F)
                        }

                        Return (Zero)
                    }
                }

                If ((Arg0 == Zero))
                {
                    Return (GUCP (0x0000020000000000, 0x0000040000000000))
                }

                Return (Zero)
            }

            Method (DSDF, 2, Serialized)
            {
                If ((Arg1 != Ones))
                {
                    Local0 = Arg1
                    If ((Arg0 == Zero))
                    {
                        DerefOf (DEVY [Local0]) [One] = Zero
                    }
                    Else
                    {
                        If ((Arg0 == 0x03))
                        {
                            DerefOf (DEVY [Local0]) [0x02] = PKD3 /* \_SB_.PEPD.PKD3 */
                        }

                        If ((Arg0 == One))
                        {
                            DerefOf (DEVY [Local0]) [0x02] = PKD0 /* \_SB_.PEPD.PKD0 */
                        }

                        DerefOf (DEVY [Local0]) [One] = One
                    }
                }
            }

            Method (PARS, 1, Serialized)
            {
                Local0 = SizeOf (DEVY)
                Local1 = Zero
                While ((Local0 > Local1))
                {
                    Local2 = DerefOf (DEVY [Local1])
                    Local3 = DerefOf (Local2 [Zero])
                    If ((Local3 == Arg0))
                    {
                        Return (Local1)
                    }

                    Local1++
                }

                Return (Ones)
            }

            Method (RPPC, 0, Serialized)
            {
                DSDF (GRPC (^^PC00.RP01.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP01"))
                DSDF (GRPC (^^PC00.RP02.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP02"))
                DSDF (GRPC (^^PC00.RP03.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP03"))
                DSDF (GRPC (^^PC00.RP04.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP04"))
                DSDF (GRPC (^^PC00.RP05.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP05"))
                DSDF (GRPC (^^PC00.RP06.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP06"))
                DSDF (GRPC (^^PC00.RP07.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP07"))
                DSDF (GRPC (^^PC00.RP08.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP08"))
                DSDF (GRPC (^^PC00.RP09.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP09"))
                DSDF (GRPC (^^PC00.RP10.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP10"))
                DSDF (GRPC (^^PC00.RP11.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP11"))
                DSDF (GRPC (^^PC00.RP12.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP12"))
                DSDF (GRPC (^^PC00.RP13.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP13"))
                DSDF (GRPC (^^PC00.RP14.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP14"))
                DSDF (GRPC (^^PC00.RP15.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP15"))
                DSDF (GRPC (^^PC00.RP16.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP16"))
                DSDF (GRPC (^^PC00.RP17.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP17"))
                DSDF (GRPC (^^PC00.RP18.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP18"))
                DSDF (GRPC (^^PC00.RP19.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP19"))
                DSDF (GRPC (^^PC00.RP20.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP20"))
                DSDF (GRPC (^^PC00.RP21.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP21"))
                DSDF (GRPC (^^PC00.RP22.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP22"))
                DSDF (GRPC (^^PC00.RP23.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP23"))
                DSDF (GRPC (^^PC00.RP24.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP24"))
                DSDF (GRPC (^^PC00.RP25.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP25"))
                DSDF (GRPC (^^PC00.RP26.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP26"))
                DSDF (GRPC (^^PC00.RP27.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP27"))
                DSDF (GRPC (^^PC00.RP28.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP28"))
                DSDF (GRPC (^^PC00.PEG0.PEGP.GRPT ()), PARS ("\\_SB.PC00.PEG0"))
                DSDF (GRPC (^^PC00.PEG1.PEGP.GRPT ()), PARS ("\\_SB.PC00.PEG1"))
                DSDF (GRPC (^^PC00.PEG2.PEGP.GRPT ()), PARS ("\\_SB.PC00.PEG2"))
            }

            Method (SPDE, 0, Serialized)
            {
                If (!ESPC)
                {
                    Return (Zero)
                }

                If (^^PC00.SAT0.PRT0.PRES ())
                {
                    DerefOf (DEVY [0x56]) [One] = One
                }

                If (^^PC00.SAT0.PRT1.PRES ())
                {
                    DerefOf (DEVY [0x57]) [One] = One
                }

                If (^^PC00.SAT0.PRT2.PRES ())
                {
                    DerefOf (DEVY [0x58]) [One] = One
                }

                If (^^PC00.SAT0.PRT3.PRES ())
                {
                    DerefOf (DEVY [0x59]) [One] = One
                }

                If (^^PC00.SAT0.PRT4.PRES ())
                {
                    DerefOf (DEVY [0x5A]) [One] = One
                }

                If (^^PC00.SAT0.PRT5.PRES ())
                {
                    DerefOf (DEVY [0x5B]) [One] = One
                }

                If (^^PC00.SAT0.PRT6.PRES ())
                {
                    DerefOf (DEVY [0x5C]) [One] = One
                }

                If (^^PC00.SAT0.PRT7.PRES ())
                {
                    DerefOf (DEVY [0x5D]) [One] = One
                }
            }

            Name (BCCD, Package (0x00) {})
            OperationRegion (LS0I, SystemMemory, LPMR, 0xC0)
            Field (LS0I, ByteAcc, Lock, Preserve)
            {
                L0IX,   1536
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "intel-cec-pson-switching-enabled-in-s0", 
                        Zero
                    }
                }
            })
            Method (PSOP, 0, NotSerialized)
            {
                Local0 = Zero
                While ((Local0 < SizeOf (_DSD)))
                {
                    If ((DerefOf (_DSD [Local0]) != ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */))
                    {
                        Continue
                    }

                    Local1 = DerefOf (_DSD [(Local0 + One)])
                    Local2 = Zero
                    While ((Local2 < SizeOf (Local1)))
                    {
                        Local3 = DerefOf (Local1 [Local2])
                        If ((("intel-cec-pson-switching-enabled-in-s0" == DerefOf (Local3 [Zero])) && PSON))
                        {
                            DerefOf (DerefOf (_DSD [(Local0 + One)]) [
                                Local2]) [One] = One
                        }

                        Local2++
                    }

                    Local0 += 0x02
                }

                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((OSYS >= 0x07DF) || ((OSYS >= 0x07DC) && (
                    S0ID == One))))
                {
                    PSOP ()
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("c4eb40a0-6cd2-11e2-bcfd-0800200c9a66") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x7F                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        If ((S0ID == Zero))
                        {
                            Return (Package (0x00) {})
                        }

                        SPDE ()
                        If (((PEPC & One) == One))
                        {
                            If (((PEPC & 0x03) == One))
                            {
                                DEVY [0x09] = PPD0 /* \_SB_.PEPD.PPD0 */
                            }
                            ElseIf (((PEPC & 0x03) == 0x03))
                            {
                                DEVY [0x09] = PPD3 /* \_SB_.PEPD.PPD3 */
                            }

                            DerefOf (DEVY [0x09]) [One] = One
                        }
                        ElseIf (((PEPC & 0x03) == 0x02))
                        {
                            DerefOf (DEVY [0x2D]) [One] = One
                        }

                        RPPC ()
                        If (((PEPC & 0x04) == Zero))
                        {
                            DerefOf (DEVY [0x0A]) [One] = Zero
                        }

                        If (((PEPC & 0x08) == Zero))
                        {
                            DerefOf (DEVY [0x0B]) [One] = Zero
                        }

                        If (((PEPC & 0x10) == Zero))
                        {
                            DerefOf (DEVY [0x0C]) [One] = Zero
                        }

                        If (((PEPC & 0x20) == Zero))
                        {
                            DerefOf (DEVY [0x0D]) [One] = Zero
                        }

                        If (((PEPC & 0x40) == Zero))
                        {
                            DerefOf (DEVY [0x0E]) [One] = Zero
                        }

                        DSDF (GUCP (0x80, 0x0100), PARS ("\\_SB.PC00.HDAS"))
                        If (((PEPC & 0x0200) == Zero))
                        {
                            DerefOf (DEVY [0x08]) [One] = Zero
                        }

                        If ((TCNT >= One))
                        {
                            DerefOf (DEVY [Zero]) [One] = One
                        }

                        If ((TCNT >= 0x02))
                        {
                            DerefOf (DEVY [One]) [One] = One
                        }

                        If ((TCNT >= 0x03))
                        {
                            DerefOf (DEVY [0x02]) [One] = One
                        }

                        If ((TCNT >= 0x04))
                        {
                            DerefOf (DEVY [0x03]) [One] = One
                        }

                        If ((TCNT >= 0x05))
                        {
                            DerefOf (DEVY [0x04]) [One] = One
                        }

                        If ((TCNT >= 0x06))
                        {
                            DerefOf (DEVY [0x05]) [One] = One
                        }

                        If ((TCNT >= 0x07))
                        {
                            DerefOf (DEVY [0x06]) [One] = One
                        }

                        If ((TCNT >= 0x08))
                        {
                            DerefOf (DEVY [0x07]) [One] = One
                        }

                        If ((TCNT >= 0x09))
                        {
                            DerefOf (DEVY [0x2E]) [One] = One
                        }

                        If ((TCNT >= 0x0A))
                        {
                            DerefOf (DEVY [0x2F]) [One] = One
                        }

                        If ((TCNT >= 0x0B))
                        {
                            DerefOf (DEVY [0x30]) [One] = One
                        }

                        If ((TCNT >= 0x0C))
                        {
                            DerefOf (DEVY [0x31]) [One] = One
                        }

                        If ((TCNT >= 0x0D))
                        {
                            DerefOf (DEVY [0x32]) [One] = One
                        }

                        If ((TCNT >= 0x0E))
                        {
                            DerefOf (DEVY [0x33]) [One] = One
                        }

                        If ((TCNT >= 0x0F))
                        {
                            DerefOf (DEVY [0x34]) [One] = One
                        }

                        If ((TCNT >= 0x10))
                        {
                            DerefOf (DEVY [0x35]) [One] = One
                        }

                        If ((TCNT >= 0x11))
                        {
                            DerefOf (DEVY [0x42]) [One] = One
                        }

                        If ((TCNT >= 0x12))
                        {
                            DerefOf (DEVY [0x43]) [One] = One
                        }

                        If ((TCNT >= 0x13))
                        {
                            DerefOf (DEVY [0x44]) [One] = One
                        }

                        If ((TCNT >= 0x14))
                        {
                            DerefOf (DEVY [0x45]) [One] = One
                        }

                        If ((TCNT >= 0x15))
                        {
                            DerefOf (DEVY [0x46]) [One] = One
                        }

                        If ((TCNT >= 0x16))
                        {
                            DerefOf (DEVY [0x47]) [One] = One
                        }

                        If ((TCNT >= 0x17))
                        {
                            DerefOf (DEVY [0x48]) [One] = One
                        }

                        If ((TCNT >= 0x18))
                        {
                            DerefOf (DEVY [0x49]) [One] = One
                        }

                        If ((TCNT >= 0x19))
                        {
                            DerefOf (DEVY [0x60]) [One] = One
                        }

                        If ((TCNT >= 0x1A))
                        {
                            DerefOf (DEVY [0x61]) [One] = One
                        }

                        If ((TCNT >= 0x1B))
                        {
                            DerefOf (DEVY [0x62]) [One] = One
                        }

                        If ((TCNT >= 0x1C))
                        {
                            DerefOf (DEVY [0x63]) [One] = One
                        }

                        If ((TCNT >= 0x1D))
                        {
                            DerefOf (DEVY [0x64]) [One] = One
                        }

                        If ((TCNT >= 0x1E))
                        {
                            DerefOf (DEVY [0x65]) [One] = One
                        }

                        If ((TCNT >= 0x1F))
                        {
                            DerefOf (DEVY [0x66]) [One] = One
                        }

                        If ((TCNT >= 0x20))
                        {
                            DerefOf (DEVY [0x67]) [One] = One
                        }

                        If (((PEPC & 0x0400) == Zero))
                        {
                            DerefOf (DEVY [Zero]) [One] = Zero
                            DerefOf (DEVY [One]) [One] = Zero
                            DerefOf (DEVY [0x02]) [One] = Zero
                            DerefOf (DEVY [0x03]) [One] = Zero
                            DerefOf (DEVY [0x04]) [One] = Zero
                            DerefOf (DEVY [0x05]) [One] = Zero
                            DerefOf (DEVY [0x06]) [One] = Zero
                            DerefOf (DEVY [0x07]) [One] = Zero
                            DerefOf (DEVY [0x2E]) [One] = Zero
                            DerefOf (DEVY [0x2F]) [One] = Zero
                            DerefOf (DEVY [0x30]) [One] = Zero
                            DerefOf (DEVY [0x31]) [One] = Zero
                            DerefOf (DEVY [0x32]) [One] = Zero
                            DerefOf (DEVY [0x33]) [One] = Zero
                            DerefOf (DEVY [0x34]) [One] = Zero
                            DerefOf (DEVY [0x35]) [One] = Zero
                            DerefOf (DEVY [0x42]) [One] = Zero
                            DerefOf (DEVY [0x43]) [One] = Zero
                            DerefOf (DEVY [0x44]) [One] = Zero
                            DerefOf (DEVY [0x45]) [One] = Zero
                            DerefOf (DEVY [0x46]) [One] = Zero
                            DerefOf (DEVY [0x47]) [One] = Zero
                            DerefOf (DEVY [0x48]) [One] = Zero
                            DerefOf (DEVY [0x49]) [One] = Zero
                            DerefOf (DEVY [0x60]) [One] = Zero
                            DerefOf (DEVY [0x61]) [One] = Zero
                            DerefOf (DEVY [0x62]) [One] = Zero
                            DerefOf (DEVY [0x63]) [One] = Zero
                            DerefOf (DEVY [0x64]) [One] = Zero
                            DerefOf (DEVY [0x65]) [One] = Zero
                            DerefOf (DEVY [0x66]) [One] = Zero
                            DerefOf (DEVY [0x67]) [One] = Zero
                        }

                        If ((((PEPC & 0x0800) == Zero) || (EMCE == Zero)))
                        {
                            DerefOf (DEVY [0x10]) [One] = Zero
                        }

                        If ((((PEPC & 0x1000) == Zero) || (SDCE == Zero)))
                        {
                            DerefOf (DEVY [0x11]) [One] = Zero
                        }

                        If (((PEPC & 0x2000) == Zero))
                        {
                            DerefOf (DEVY [0x12]) [One] = Zero
                        }

                        If (((PEPC & 0x4000) == Zero))
                        {
                            DerefOf (DEVY [0x13]) [One] = Zero
                        }

                        If (((PEPC & 0x8000) == Zero))
                        {
                            DerefOf (DEVY [0x14]) [One] = Zero
                        }

                        If (((PEPC & 0x00010000) == Zero))
                        {
                            DerefOf (DEVY [0x15]) [One] = Zero
                        }

                        If (((PEPC & 0x0000400000000000) == Zero))
                        {
                            DerefOf (DEVY [0x6A]) [One] = Zero
                        }

                        If (((PEPC & 0x00020000) == Zero))
                        {
                            DerefOf (DEVY [0x16]) [One] = Zero
                        }

                        If (((PEPC & 0x00040000) == Zero))
                        {
                            DerefOf (DEVY [0x17]) [One] = Zero
                        }

                        If (((PEPC & 0x00080000) == Zero))
                        {
                            DerefOf (DEVY [0x18]) [One] = Zero
                        }

                        If (((PEPC & 0x00100000) == Zero))
                        {
                            DerefOf (DEVY [0x36]) [One] = Zero
                        }

                        If (((PEPC & 0x00200000) == Zero))
                        {
                            DerefOf (DEVY [0x38]) [One] = Zero
                        }

                        If (((PEPC & 0x00400000) == Zero))
                        {
                            DerefOf (DEVY [0x39]) [One] = Zero
                        }

                        If ((((PEPC & 0x00800000) == Zero) || (GBES == Zero)))
                        {
                            DerefOf (DEVY [0x3A]) [One] = Zero
                        }

                        If (((PEPC & 0x02000000) == Zero))
                        {
                            DerefOf (DEVY [0x3C]) [One] = Zero
                        }

                        If (((PEPC & 0x04000000) == Zero))
                        {
                            DerefOf (DEVY [0x3D]) [One] = Zero
                        }

                        If (((PEPC & 0x10000000) == Zero))
                        {
                            DerefOf (DEVY [0x40]) [One] = Zero
                        }

                        If (((PEPC & 0x0000080000000000) != Zero))
                        {
                            DerefOf (DEVY [0x41]) [One] = One
                            If ((DGBA != Zero))
                            {
                                DerefOf (DEVY [0x41]) [0x02] = PKD3 /* \_SB_.PEPD.PKD3 */
                            }
                        }

                        If (((PEPC & 0x0000100000000000) == Zero))
                        {
                            DerefOf (DEVY [0x68]) [One] = Zero
                        }

                        If (((PEPC & 0x0000200000000000) == Zero))
                        {
                            DerefOf (DEVY [0x69]) [One] = Zero
                        }

                        If (((PEPC & 0x20000000) != Zero))
                        {
                            If ((THCE == One))
                            {
                                DerefOf (DEVY [0x6B]) [One] = One
                            }

                            If ((TDCE == One))
                            {
                                DerefOf (DEVY [0x6C]) [One] = One
                            }

                            If (CondRefOf (\_SB.PC01))
                            {
                                If ((TRE0 == One))
                                {
                                    DerefOf (DEVY [0x71]) [One] = One
                                }

                                If ((TRE1 == One))
                                {
                                    DerefOf (DEVY [0x72]) [One] = One
                                }

                                If ((TRE2 == One))
                                {
                                    DerefOf (DEVY [0x73]) [One] = One
                                }

                                If ((TRE3 == One))
                                {
                                    DerefOf (DEVY [0x74]) [One] = One
                                }
                            }
                            Else
                            {
                                If ((TRE0 == One))
                                {
                                    DerefOf (DEVY [0x6D]) [One] = One
                                }

                                If ((TRE1 == One))
                                {
                                    DerefOf (DEVY [0x6E]) [One] = One
                                }

                                If ((TRE2 == One))
                                {
                                    DerefOf (DEVY [0x6F]) [One] = One
                                }

                                If ((TRE3 == One))
                                {
                                    DerefOf (DEVY [0x70]) [One] = One
                                }
                            }

                            If ((DME0 == One))
                            {
                                DerefOf (DEVY [0x75]) [One] = One
                            }

                            If ((DME1 == One))
                            {
                                DerefOf (DEVY [0x76]) [One] = One
                            }
                        }

                        If (((PEPC & 0x40000000) == Zero))
                        {
                            DerefOf (DEVY [0x4A]) [One] = Zero
                        }

                        If (((PEPC & 0x80000000) == Zero))
                        {
                            DerefOf (DEVY [0x4B]) [One] = Zero
                        }

                        If (CondRefOf (\_SB.PC00.HEC3))
                        {
                            If (((PEPC & 0x0000000100000000) != Zero))
                            {
                                DerefOf (DEVY [0x5E]) [One] = One
                            }
                        }

                        If ((OSYS >= 0x07DF))
                        {
                            If ((^^PC00.CNVW.VDID != 0xFFFFFFFF))
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x37]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x37]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x37]) [One] = One
                            }
                        }

                        Return (DEVY) /* \_SB_.PEPD.DEVY */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (BCCD) /* \_SB_.PEPD.BCCD */
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((S0ID == One))
                        {
                            D8XH (Zero, 0xC5)
                            D8XH (One, Zero)
                            ^^PC00.LPCB.EC.ECNT (One)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((S0ID == One))
                        {
                            D8XH (Zero, 0xC5)
                            D8XH (One, 0xAB)
                            ^^PC00.LPCB.EC.ECNT (Zero)
                        }
                    }

                    Local0 = One
                    ADBG (Concatenate ("All Monitor off flag(default): ", ToHexString (Local0)))
                    If ((Arg2 == 0x05))
                    {
                        If (CondRefOf (\_SB.PC00.PEG1.DHDW))
                        {
                            ^^PC00.PEG1.DHDW ()
                            ^^PC00.PEG1.DGCE = One
                        }

                        If ((S0ID == One))
                        {
                            GUAM (One)
                        }

                        ^^PC00.LPCB.EC.ECNT (0x03)
                        If (CondRefOf (\_SB.PC00.TXHC))
                        {
                            If ((^^PC00.TDM0._STA == 0x0F))
                            {
                                If ((^^PC00.TDM0.SCME == One))
                                {
                                    Local0 = Zero
                                    ADBG (Concatenate ("TDM0 set DPOF to  ", ToHexString (Local0)))
                                }
                            }
                            ElseIf ((^^PC00.TDM1._STA == 0x0F))
                            {
                                If ((^^PC00.TDM1.SCME == One))
                                {
                                    Local0 = Zero
                                    ADBG (Concatenate ("TDM1 set DPOF to  ", ToHexString (Local0)))
                                }
                            }

                            ADBG (Concatenate ("All Monitor off flag: ", ToHexString (Local0)))
                            If ((Local0 == One))
                            {
                                ^^PC00.DPOF = One
                            }
                        }

                        If (CondRefOf (\_SB.PC00.XHCI.PSLI))
                        {
                            ^^PC00.XHCI.PSLI (0x05)
                        }
                        Else
                        {
                        }

                        If (CondRefOf (\GPRV))
                        {
                            GPRV (0x03, Zero)
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        ^^PC00.LPCB.EC.ECNT (0x02)
                        If (CondRefOf (\_SB.PC00.PEG1.DGCE))
                        {
                            ^^PC00.PEG1.DGCE = Zero
                        }

                        If ((S0ID == One))
                        {
                            GUAM (Zero)
                        }

                        If (CondRefOf (\_SB.PC00.TXHC))
                        {
                            ^^PC00.DPOF = Zero
                        }

                        If (CondRefOf (\_SB.PC00.XHCI.PSLI))
                        {
                            ^^PC00.XHCI.PSLI (0x06)
                        }
                        Else
                        {
                        }

                        If (CondRefOf (\GPRV))
                        {
                            GPRV (0x03, One)
                        }
                    }
                }

                If ((Arg0 == ToUUID ("11e00d56-ce64-47ce-837b-1f898f9aa461") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xF9, 0x01                                       // ..
                        })
                    }

                    If ((Arg2 == 0x07))
                    {
                        If (FSTA)
                        {
                            SGOV (0x090E0007, Zero)
                        }

                        If ((^^PC00.LPCB.EC.HKEY.MSCB == One))
                        {
                            ^^PC00.LPCB.EC.HKEY.DYTC (0x001FC001)
                            ^^PC00.LPCB.EC.ECNT (0x05)
                            ADBG ("NEW 7:Modern Standby Entry phase")
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If (FSTA)
                        {
                            SGOV (0x090E0007, One)
                        }

                        If ((^^PC00.LPCB.EC.HKEY.MSCB == One))
                        {
                            ^^PC00.LPCB.EC.HKEY.DYTC (0x000FC001)
                            ^^PC00.LPCB.EC.ECNT (0x04)
                            ADBG ("NEW 8:Modern Standby Exit phase")
                        }
                    }
                }

                If ((Arg0 == ToUUID ("57a6512e-3979-4e9d-9708-ff13b2508972") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        LBUF = L0IX /* \_SB_.PEPD.L0IX */
                        Return (LBUF) /* \_SB_.PEPD.LBUF */
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Device (PSM)
    {
        Name (_HID, EisaId ("INT3420") /* Intel Bluetooth RF Kill */)  // _HID: Hardware ID
        Name (_UID, Zero)  // _UID: Unique ID
        Name (_STR, Unicode ("Power Sharing Manager"))  // _STR: Description String
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PSME == One))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }

        Name (SPLX, Package (0x02)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            DerefOf (SPLX [One]) [Zero] = PDT1 /* \PDT1 */
            DerefOf (SPLX [One]) [One] = PLM1 /* \PLM1 */
            DerefOf (SPLX [One]) [0x02] = PTW1 /* \PTW1 */
            Return (SPLX) /* \PSM_.SPLX */
        }

        Name (DPLX, Package (0x02)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                Package (0x06)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            }
        })
        Method (DPLC, 0, Serialized)
        {
            DerefOf (DPLX [One]) [Zero] = DDT1 /* \DDT1 */
            DerefOf (DPLX [One]) [One] = DDP1 /* \DDP1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [Zero]
                 = DLI1 /* \DLI1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [One]
                 = DPL1 /* \DPL1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x02]
                 = DTW1 /* \DTW1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x03]
                 = DMI1 /* \DMI1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x04]
                 = DMA1 /* \DMA1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x05]
                 = DMT1 /* \DMT1 */
            Return (DPLX) /* \PSM_.DPLX */
        }
    }

    Scope (_SB)
    {
        Method (BTRK, 1, Serialized)
        {
            If ((GBTK != Zero))
            {
                SGOV (GBTK, Arg0)
            }
        }

        Method (GBTR, 0, NotSerialized)
        {
            Return (GGOV (GBTK))
        }
    }

    If (\_SB.PC00.CNIP ())
    {
        Scope (_SB.PC00.CNVW)
        {
            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.CNVW.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.CNVW.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.CNVW.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                0x02, 
                Package (0x2E)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                DerefOf (WRDY [One]) [0x18] = CD10 /* \CD10 */
                DerefOf (WRDY [One]) [0x19] = CD11 /* \CD11 */
                DerefOf (WRDY [One]) [0x1A] = CD12 /* \CD12 */
                DerefOf (WRDY [One]) [0x1B] = CD13 /* \CD13 */
                DerefOf (WRDY [One]) [0x1C] = CD14 /* \CD14 */
                DerefOf (WRDY [One]) [0x1D] = CD15 /* \CD15 */
                DerefOf (WRDY [One]) [0x1E] = CD16 /* \CD16 */
                DerefOf (WRDY [One]) [0x1F] = CD17 /* \CD17 */
                DerefOf (WRDY [One]) [0x20] = CD18 /* \CD18 */
                DerefOf (WRDY [One]) [0x21] = CD19 /* \CD19 */
                DerefOf (WRDY [One]) [0x22] = CD1A /* \CD1A */
                DerefOf (WRDY [One]) [0x23] = CD20 /* \CD20 */
                DerefOf (WRDY [One]) [0x24] = CD21 /* \CD21 */
                DerefOf (WRDY [One]) [0x25] = CD22 /* \CD22 */
                DerefOf (WRDY [One]) [0x26] = CD23 /* \CD23 */
                DerefOf (WRDY [One]) [0x27] = CD24 /* \CD24 */
                DerefOf (WRDY [One]) [0x28] = CD25 /* \CD25 */
                DerefOf (WRDY [One]) [0x29] = CD26 /* \CD26 */
                DerefOf (WRDY [One]) [0x2A] = CD27 /* \CD27 */
                DerefOf (WRDY [One]) [0x2B] = CD28 /* \CD28 */
                DerefOf (WRDY [One]) [0x2C] = CD29 /* \CD29 */
                DerefOf (WRDY [One]) [0x2D] = CD2A /* \CD2A */
                Return (WRDY) /* \_SB_.PC00.CNVW.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                0x02, 
                Package (0x87)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                DerefOf (EWRY [One]) [0x45] = CD30 /* \CD30 */
                DerefOf (EWRY [One]) [0x46] = CD31 /* \CD31 */
                DerefOf (EWRY [One]) [0x47] = CD32 /* \CD32 */
                DerefOf (EWRY [One]) [0x48] = CD33 /* \CD33 */
                DerefOf (EWRY [One]) [0x49] = CD34 /* \CD34 */
                DerefOf (EWRY [One]) [0x4A] = CD35 /* \CD35 */
                DerefOf (EWRY [One]) [0x4B] = CD36 /* \CD36 */
                DerefOf (EWRY [One]) [0x4C] = CD37 /* \CD37 */
                DerefOf (EWRY [One]) [0x4D] = CD38 /* \CD38 */
                DerefOf (EWRY [One]) [0x4E] = CD39 /* \CD39 */
                DerefOf (EWRY [One]) [0x4F] = CD3A /* \CD3A */
                DerefOf (EWRY [One]) [0x50] = CD3B /* \CD3B */
                DerefOf (EWRY [One]) [0x51] = CD3C /* \CD3C */
                DerefOf (EWRY [One]) [0x52] = CD3D /* \CD3D */
                DerefOf (EWRY [One]) [0x53] = CD3E /* \CD3E */
                DerefOf (EWRY [One]) [0x54] = CD3F /* \CD3F */
                DerefOf (EWRY [One]) [0x55] = CD40 /* \CD40 */
                DerefOf (EWRY [One]) [0x56] = CD41 /* \CD41 */
                DerefOf (EWRY [One]) [0x57] = CD42 /* \CD42 */
                DerefOf (EWRY [One]) [0x58] = CD43 /* \CD43 */
                DerefOf (EWRY [One]) [0x59] = CD44 /* \CD44 */
                DerefOf (EWRY [One]) [0x5A] = CD45 /* \CD45 */
                DerefOf (EWRY [One]) [0x5B] = CD46 /* \CD46 */
                DerefOf (EWRY [One]) [0x5C] = CD47 /* \CD47 */
                DerefOf (EWRY [One]) [0x5D] = CD48 /* \CD48 */
                DerefOf (EWRY [One]) [0x5E] = CD49 /* \CD49 */
                DerefOf (EWRY [One]) [0x5F] = CD4A /* \CD4A */
                DerefOf (EWRY [One]) [0x60] = CD4B /* \CD4B */
                DerefOf (EWRY [One]) [0x61] = CD4C /* \CD4C */
                DerefOf (EWRY [One]) [0x62] = CD4D /* \CD4D */
                DerefOf (EWRY [One]) [0x63] = CD4E /* \CD4E */
                DerefOf (EWRY [One]) [0x64] = CD4F /* \CD4F */
                DerefOf (EWRY [One]) [0x65] = CD50 /* \CD50 */
                DerefOf (EWRY [One]) [0x66] = CD51 /* \CD51 */
                DerefOf (EWRY [One]) [0x67] = CD52 /* \CD52 */
                DerefOf (EWRY [One]) [0x68] = CD53 /* \CD53 */
                DerefOf (EWRY [One]) [0x69] = CD54 /* \CD54 */
                DerefOf (EWRY [One]) [0x6A] = CD55 /* \CD55 */
                DerefOf (EWRY [One]) [0x6B] = CD56 /* \CD56 */
                DerefOf (EWRY [One]) [0x6C] = CD57 /* \CD57 */
                DerefOf (EWRY [One]) [0x6D] = CD58 /* \CD58 */
                DerefOf (EWRY [One]) [0x6E] = CD59 /* \CD59 */
                DerefOf (EWRY [One]) [0x6F] = CD5A /* \CD5A */
                DerefOf (EWRY [One]) [0x70] = CD5B /* \CD5B */
                DerefOf (EWRY [One]) [0x71] = CD5C /* \CD5C */
                DerefOf (EWRY [One]) [0x72] = CD5D /* \CD5D */
                DerefOf (EWRY [One]) [0x73] = CD5E /* \CD5E */
                DerefOf (EWRY [One]) [0x74] = CD5F /* \CD5F */
                DerefOf (EWRY [One]) [0x75] = CD60 /* \CD60 */
                DerefOf (EWRY [One]) [0x76] = CD61 /* \CD61 */
                DerefOf (EWRY [One]) [0x77] = CD62 /* \CD62 */
                DerefOf (EWRY [One]) [0x78] = CD63 /* \CD63 */
                DerefOf (EWRY [One]) [0x79] = CD64 /* \CD64 */
                DerefOf (EWRY [One]) [0x7A] = CD65 /* \CD65 */
                DerefOf (EWRY [One]) [0x7B] = CD66 /* \CD66 */
                DerefOf (EWRY [One]) [0x7C] = CD67 /* \CD67 */
                DerefOf (EWRY [One]) [0x7D] = CD68 /* \CD68 */
                DerefOf (EWRY [One]) [0x7E] = CD69 /* \CD69 */
                DerefOf (EWRY [One]) [0x7F] = CD6A /* \CD6A */
                DerefOf (EWRY [One]) [0x80] = CD6B /* \CD6B */
                DerefOf (EWRY [One]) [0x81] = CD6C /* \CD6C */
                DerefOf (EWRY [One]) [0x82] = CD6D /* \CD6D */
                DerefOf (EWRY [One]) [0x83] = CD6E /* \CD6E */
                DerefOf (EWRY [One]) [0x84] = CD6F /* \CD6F */
                DerefOf (EWRY [One]) [0x85] = CD70 /* \CD70 */
                DerefOf (EWRY [One]) [0x86] = CD71 /* \CD71 */
                Return (EWRY) /* \_SB_.PC00.CNVW.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.CNVW.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.CNVW.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.CNVW.PPAY */
            }

            Name (WTSY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            Method (WTAS, 0, Serialized)
            {
                DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                Return (WTSY) /* \_SB_.PC00.CNVW.WTSY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.CNVW.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.CNVW.GPCX */
            }

            Method (IFUN, 4, Serialized)
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x0F                                             // .
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Local0 = (CVPR << Zero)
                    Return (Local0)
                }

                If ((Arg2 == 0x02))
                {
                    CreateWordField (Arg3, Zero, CMDT)
                    CreateWordField (Arg3, 0x02, CMDP)
                    If ((CMDT == One))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                        {
                            Return (RSTT) /* \_SB_.PC00.CNVW.RSTT */
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((CMDT == 0x02))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                        {
                            RSTT = CMDP /* \_SB_.PC00.CNVW.IFUN.CMDP */
                        }

                        Return (Zero)
                    }

                    If ((CMDT == 0x03))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                        {
                            Return (PRRS) /* \_SB_.PC00.CNVW.PRRS */
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Return (Zero)
                }

                If ((Arg2 == 0x03))
                {
                    If ((CRFI == One))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (IDSM, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (EFUN, 4, Serialized)
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Local0 = ACSD /* \ACSD */
                    Return (Local0)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = I5BS /* \I5BS */
                    Return (Local0)
                }

                If ((Arg2 == 0x03))
                {
                    Local0 = UHBS /* \UHBS */
                    Return (Local0)
                }

                If ((Arg2 == 0x06))
                {
                    Local0 = AXMU /* \AXMU */
                    Local0 <<= One
                    Local0 |= AXSU /* \AXSU */
                    Local1 = AXMR /* \AXMR */
                    Local1 <<= One
                    Local1 |= AXSR /* \AXSR */
                    Local1 <<= 0x02
                    Local0 |= Local1
                    Return (Local0)
                }

                If ((Arg2 == 0x04))
                {
                    Return (WFRC) /* \WFRC */
                }

                If ((Arg2 == 0x05))
                {
                    Return (WFUC) /* \WFUC */
                }

                If ((Arg2 == 0x07))
                {
                    Return (UNI4) /* \UNI4 */
                }

                If ((Arg2 == 0x08))
                {
                    Return (WFIC) /* \WFIC */
                }

                Return (Zero)
            }

            Method (EDSM, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (EDSM (Arg0))
                {
                    Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                }

                If (IDSM (Arg0))
                {
                    Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    If ((\_SB.PC00.CNIP () || \_SB.PC00.RP05.PXSX.WIST ()))
    {
        If (((PCHS == 0x02) || (PCHS == 0x05)))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS10)
            {
                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PC00.XHCI.RHUB.HS10.SADX */
                }

                Name (BRDY, Package (0x02)
                {
                    Zero, 
                    Package (0x08)
                    {
                        0x12, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (BRDS, 0, Serialized)
                {
                    DerefOf (BRDY [One]) [One] = BTSE /* \BTSE */
                    DerefOf (BRDY [One]) [0x02] = BTBR /* \BTBR */
                    DerefOf (BRDY [One]) [0x03] = BED2 /* \BED2 */
                    DerefOf (BRDY [One]) [0x04] = BED3 /* \BED3 */
                    DerefOf (BRDY [One]) [0x05] = BTLE /* \BTLE */
                    DerefOf (BRDY [One]) [0x06] = BTL2 /* \BTL2 */
                    DerefOf (BRDY [One]) [0x07] = BTLL /* \BTLL */
                    Return (BRDY) /* \_SB_.PC00.XHCI.RHUB.HS10.BRDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                    Return (ECKY) /* \_SB_.PC00.XHCI.RHUB.HS10.ECKY */
                }

                Name (RDLY, 0x69)
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("aa10f4e0-81ac-4233-abf6-3b2ac50e28d9") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            RDLY = Arg3
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("2d19d3e1-5708-4696-bd5b-2c3dbae2d6a9") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            TLAS = Arg3
                            TLAC (Arg3)
                        }

                        Return (Zero)
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                PowerResource (BTRT, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        Local0 = Acquire (CNMT, 0x03E8)
                        If ((Local0 == Zero))
                        {
                            BTRK (Zero)
                            Sleep (RDLY)
                            BTRK (One)
                            Sleep (RDLY)
                        }

                        Release (CNMT)
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    Return (Package (0x01)
                    {
                        BTRT
                    })
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.XHCI.RHUB.HS10.GPCX */
                }

                Name (BTLY, Package (0x02)
                {
                    One, 
                    Package (0x0B)
                    {
                        0x12, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (BTLC, 0, Serialized)
                {
                    DerefOf (BTLY [One]) [One] = TILE /* \TILE */
                    DerefOf (BTLY [One]) [0x02] = TIS0 /* \TIS0 */
                    DerefOf (BTLY [One]) [0x03] = TS0X /* \TS0X */
                    DerefOf (BTLY [One]) [0x04] = TIS4 /* \TIS4 */
                    DerefOf (BTLY [One]) [0x05] = TIS5 /* \TIS5 */
                    DerefOf (BTLY [One]) [0x06] = BLEC /* \BLEC */
                    DerefOf (BTLY [One]) [0x07] = BLPD /* \BLPD */
                    DerefOf (BTLY [One]) [0x08] = BLPI /* \BLPI */
                    Return (BTLY) /* \_SB_.PC00.XHCI.RHUB.HS10.BTLY */
                }
            }
        }
        ElseIf ((PCHS == 0x04))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS14)
            {
                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PC00.XHCI.RHUB.HS14.SADX */
                }

                Name (BRDY, Package (0x02)
                {
                    Zero, 
                    Package (0x08)
                    {
                        0x12, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (BRDS, 0, Serialized)
                {
                    DerefOf (BRDY [One]) [One] = BTSE /* \BTSE */
                    DerefOf (BRDY [One]) [0x02] = BTBR /* \BTBR */
                    DerefOf (BRDY [One]) [0x03] = BED2 /* \BED2 */
                    DerefOf (BRDY [One]) [0x04] = BED3 /* \BED3 */
                    DerefOf (BRDY [One]) [0x05] = BTLE /* \BTLE */
                    DerefOf (BRDY [One]) [0x06] = BTL2 /* \BTL2 */
                    DerefOf (BRDY [One]) [0x07] = BTLL /* \BTLL */
                    Return (BRDY) /* \_SB_.PC00.XHCI.RHUB.HS14.BRDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                    Return (ECKY) /* \_SB_.PC00.XHCI.RHUB.HS14.ECKY */
                }

                Name (RDLY, 0x69)
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("aa10f4e0-81ac-4233-abf6-3b2ac50e28d9") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            RDLY = Arg3
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("2d19d3e1-5708-4696-bd5b-2c3dbae2d6a9") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            TLAS = Arg3
                            TLAC (Arg3)
                        }

                        Return (Zero)
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                PowerResource (BTRT, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        Local0 = Acquire (CNMT, 0x03E8)
                        If ((Local0 == Zero))
                        {
                            BTRK (Zero)
                            Sleep (RDLY)
                            BTRK (One)
                            Sleep (RDLY)
                        }

                        Release (CNMT)
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    Return (Package (0x01)
                    {
                        BTRT
                    })
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.XHCI.RHUB.HS14.GPCX */
                }

                Name (BTLY, Package (0x02)
                {
                    Zero, 
                    Package (0x0A)
                    {
                        0x12, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (BTLC, 0, Serialized)
                {
                    DerefOf (BTLY [One]) [One] = TILE /* \TILE */
                    DerefOf (BTLY [One]) [0x02] = TIS0 /* \TIS0 */
                    DerefOf (BTLY [One]) [0x03] = TS0X /* \TS0X */
                    DerefOf (BTLY [One]) [0x04] = TIS4 /* \TIS4 */
                    DerefOf (BTLY [One]) [0x05] = TIS5 /* \TIS5 */
                    DerefOf (BTLY [One]) [0x06] = SLEC /* \SLEC */
                    DerefOf (BTLY [One]) [0x07] = LEDU /* \LEDU */
                    DerefOf (BTLY [One]) [0x08] = TAPM /* \TAPM */
                    Return (BTLY) /* \_SB_.PC00.XHCI.RHUB.HS14.BTLY */
                }
            }
        }
    }

    Scope (_SB.PC00.UA00)
    {
        Device (BTH0)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("INT33E1")
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                SHPO (GBTI, One)
                SHPO (GBTK, One)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFG, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.PC00.UA00",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (SBFG, 0x5F, INT3)
                CreateWordField (SBFG, 0x3C, KIL3)
                INT3 = GNUM (GBTI)
                KIL3 = GNUM (GBTK)
                Name (SBFI, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.PC00.UA00",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    Interrupt (ResourceConsumer, Edge, ActiveLow, ExclusiveAndWake, ,, _Y44)
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (SBFI, \_SB.PC00.UA00.BTH0._CRS._Y44._INT, INT4)  // _INT: Interrupts
                CreateWordField (SBFI, 0x3C, KIL4)
                INT4 = INUM (GBTI)
                KIL4 = GNUM (GBTK)
                If ((SDM9 == Zero))
                {
                    Return (SBFG) /* \_SB_.PC00.UA00.BTH0._CRS.SBFG */
                }
                Else
                {
                    Return (SBFI) /* \_SB_.PC00.UA00.BTH0._CRS.SBFI */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SDS9 != 0x02))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Name (_S0W, 0x02)  // _S0W: S0 Device Wake State
        }

        Name (BRDY, Package (0x02)
        {
            Zero, 
            Package (0x08)
            {
                0x12, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Method (BRDS, 0, Serialized)
        {
            DerefOf (BRDY [One]) [One] = BTSE /* \BTSE */
            DerefOf (BRDY [One]) [0x02] = BTBR /* \BTBR */
            DerefOf (BRDY [One]) [0x03] = BED2 /* \BED2 */
            DerefOf (BRDY [One]) [0x04] = BED3 /* \BED3 */
            DerefOf (BRDY [One]) [0x05] = BTLE /* \BTLE */
            DerefOf (BRDY [One]) [0x06] = BTL2 /* \BTL2 */
            DerefOf (BRDY [One]) [0x07] = BTLL /* \BTLL */
            Return (BRDY) /* \_SB_.PC00.UA00.BRDY */
        }

        Name (ECKY, Package (0x02)
        {
            Zero, 
            Package (0x02)
            {
                0x12, 
                Zero
            }
        })
        Method (ECKV, 0, Serialized)
        {
            DerefOf (ECKY [One]) [One] = CECV /* \CECV */
            Return (ECKY) /* \_SB_.PC00.UA00.ECKY */
        }

        Name (GPCX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x07, 
                Package (0x03)
                {
                    Zero, 
                    Zero, 
                    Zero
                }
            }, 

            Package (0x02)
            {
                0x12, 
                Package (0x03)
                {
                    Zero, 
                    Zero, 
                    Zero
                }
            }
        })
        Method (GPC, 0, Serialized)
        {
            Return (GPCX) /* \_SB_.PC00.UA00.GPCX */
        }
    }

    Scope (_SB.PC00)
    {
        Name (HIDG, ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */)
        Name (TP7G, ToUUID ("ef87eb82-f951-46da-84ec-14871ac6f84b") /* Unknown UUID */)
        Method (HIDD, 5, Serialized)
        {
            If ((Arg0 == HIDG))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == One))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Return (Arg4)
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TP7D, 6, Serialized)
        {
            If ((Arg0 == TP7G))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == One))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Return (ConcatenateResTemplate (Arg4, Arg5))
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (I2CM, 3, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Name (IIC0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, _Y45, Exclusive,
                            )
                    })
                    CreateWordField (IIC0, \_SB.PC00.I2CM._Y45._ADR, DAD0)  // _ADR: Address
                    CreateDWordField (IIC0, \_SB.PC00.I2CM._Y45._SPE, DSP0)  // _SPE: Speed
                    DAD0 = Arg1
                    DSP0 = Arg2
                    Return (IIC0) /* \_SB_.PC00.I2CM.IIC0 */
                }
                Case (One)
                {
                    Name (IIC1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, _Y46, Exclusive,
                            )
                    })
                    CreateWordField (IIC1, \_SB.PC00.I2CM._Y46._ADR, DAD1)  // _ADR: Address
                    CreateDWordField (IIC1, \_SB.PC00.I2CM._Y46._SPE, DSP1)  // _SPE: Speed
                    DAD1 = Arg1
                    DSP1 = Arg2
                    Return (IIC1) /* \_SB_.PC00.I2CM.IIC1 */
                }
                Case (0x02)
                {
                    Name (IIC2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, _Y47, Exclusive,
                            )
                    })
                    CreateWordField (IIC2, \_SB.PC00.I2CM._Y47._ADR, DAD2)  // _ADR: Address
                    CreateDWordField (IIC2, \_SB.PC00.I2CM._Y47._SPE, DSP2)  // _SPE: Speed
                    DAD2 = Arg1
                    DSP2 = Arg2
                    Return (IIC2) /* \_SB_.PC00.I2CM.IIC2 */
                }
                Case (0x03)
                {
                    Name (IIC3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, _Y48, Exclusive,
                            )
                    })
                    CreateWordField (IIC3, \_SB.PC00.I2CM._Y48._ADR, DAD3)  // _ADR: Address
                    CreateDWordField (IIC3, \_SB.PC00.I2CM._Y48._SPE, DSP3)  // _SPE: Speed
                    DAD3 = Arg1
                    DSP3 = Arg2
                    Return (IIC3) /* \_SB_.PC00.I2CM.IIC3 */
                }
                Case (0x04)
                {
                    Name (IIC4, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C4",
                            0x00, ResourceConsumer, _Y49, Exclusive,
                            )
                    })
                    CreateWordField (IIC4, \_SB.PC00.I2CM._Y49._ADR, DAD4)  // _ADR: Address
                    CreateDWordField (IIC4, \_SB.PC00.I2CM._Y49._SPE, DSP4)  // _SPE: Speed
                    DAD4 = Arg1
                    DSP4 = Arg2
                    Return (IIC4) /* \_SB_.PC00.I2CM.IIC4 */
                }
                Case (0x05)
                {
                    Name (IIC5, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C5",
                            0x00, ResourceConsumer, _Y4A, Exclusive,
                            )
                    })
                    CreateWordField (IIC5, \_SB.PC00.I2CM._Y4A._ADR, DAD5)  // _ADR: Address
                    CreateDWordField (IIC5, \_SB.PC00.I2CM._Y4A._SPE, DSP5)  // _SPE: Speed
                    DAD5 = Arg1
                    DSP5 = Arg2
                    Return (IIC5) /* \_SB_.PC00.I2CM.IIC5 */
                }
                Case (0x0C)
                {
                    Name (IIC6, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C6",
                            0x00, ResourceConsumer, _Y4B, Exclusive,
                            )
                    })
                    CreateWordField (IIC6, \_SB.PC00.I2CM._Y4B._ADR, DAD6)  // _ADR: Address
                    CreateDWordField (IIC6, \_SB.PC00.I2CM._Y4B._SPE, DSP6)  // _SPE: Speed
                    DAD6 = Arg1
                    DSP6 = Arg2
                    Return (IIC6) /* \_SB_.PC00.I2CM.IIC6 */
                }
                Case (0x0D)
                {
                    Name (IIC7, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C7",
                            0x00, ResourceConsumer, _Y4C, Exclusive,
                            )
                    })
                    CreateWordField (IIC7, \_SB.PC00.I2CM._Y4C._ADR, DAD7)  // _ADR: Address
                    CreateDWordField (IIC7, \_SB.PC00.I2CM._Y4C._SPE, DSP7)  // _SPE: Speed
                    DAD7 = Arg1
                    DSP7 = Arg2
                    Return (IIC7) /* \_SB_.PC00.I2CM.IIC7 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (I2CS, 1, NotSerialized)
        {
            Return (((Arg0 & 0x04) | (Arg0 & 0x08)))
        }
    }

    Scope (_SB.PC00.I2C0)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        Name (I2CI, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            I2CN = SDS0 /* \SDS0 */
            I2CX = Zero
        }
    }

    Scope (_SB.PC00.I2C1)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        Name (I2CI, One)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            I2CN = SDS1 /* \SDS1 */
            I2CX = One
        }
    }

    Scope (_SB.PC00.I2C2)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        Name (I2CI, 0x02)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            I2CN = SDS2 /* \SDS2 */
            I2CX = 0x02
        }
    }

    Scope (_SB.PC00.I2C3)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        Name (I2CI, 0x03)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            I2CN = SDS3 /* \SDS3 */
            I2CX = 0x03
        }
    }

    Scope (_SB.PC00.I2C4)
    {
        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
        {
            ToUUID ("f87a6d23-2884-4fe4-a55f-633d9e339ce1") /* Unknown UUID */, 
            Package (0x04)
            {
                Package (0x02)
                {
                    "idle-latency-tolerance", 
                    0xFFFF
                }, 

                Package (0x02)
                {
                    "SS-active-latency-tolerance", 
                    0xFFFF
                }, 

                Package (0x02)
                {
                    "FM-active-latency-tolerance", 
                    0xFFFF
                }, 

                Package (0x02)
                {
                    "FMP-active-latency-tolerance", 
                    0xFFFF
                }
            }
        })
    }

    Scope (_SB.PC00.I2C5)
    {
        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
        {
            ToUUID ("f87a6d23-2884-4fe4-a55f-633d9e339ce1") /* Unknown UUID */, 
            Package (0x04)
            {
                Package (0x02)
                {
                    "idle-latency-tolerance", 
                    0xFFFF
                }, 

                Package (0x02)
                {
                    "SS-active-latency-tolerance", 
                    0xFFFF
                }, 

                Package (0x02)
                {
                    "FM-active-latency-tolerance", 
                    0xFFFF
                }, 

                Package (0x02)
                {
                    "FMP-active-latency-tolerance", 
                    0xFFFF
                }
            }
        })
    }

    Scope (_SB.PC00.I2C0)
    {
        Device (TPD0)
        {
            Name (HID2, Zero)
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "NULL",
                    0x00, ResourceConsumer, _Y4D, Exclusive,
                    )
            })
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                    "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            Name (SBFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y4E)
                {
                    0x00000000,
                }
            })
            CreateWordField (SBFB, \_SB.PC00.I2C0.TPD0._Y4D._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.PC00.I2C0.TPD0._Y4D._SPE, SPED)  // _SPE: Speed
            CreateWordField (SBFG, 0x17, INT1)
            CreateDWordField (SBFI, \_SB.PC00.I2C0.TPD0._Y4E._INT, INT2)  // _INT: Interrupts
            Name (ITML, Package (0x08)
            {
                Package (0x06)
                {
                    0x04F3, 
                    0x3195, 
                    0x15, 
                    One, 
                    One, 
                    "ELAN0676"
                }, 

                Package (0x06)
                {
                    0x04F3, 
                    0x3196, 
                    0x15, 
                    One, 
                    One, 
                    "ELAN0677"
                }, 

                Package (0x06)
                {
                    0x04F3, 
                    0x320B, 
                    0x15, 
                    One, 
                    One, 
                    "ELAN0683"
                }, 

                Package (0x06)
                {
                    0x04F3, 
                    0x320C, 
                    0x15, 
                    One, 
                    One, 
                    "ELAN0684"
                }, 

                Package (0x06)
                {
                    0x06CB, 
                    0xCE67, 
                    0x2C, 
                    0x20, 
                    One, 
                    "SYNA8018"
                }, 

                Package (0x06)
                {
                    0x06CB, 
                    0xCE68, 
                    0x2C, 
                    0x20, 
                    One, 
                    "SYNA8019"
                }, 

                Package (0x06)
                {
                    0x06CB, 
                    0xCEC6, 
                    0x2C, 
                    0x20, 
                    One, 
                    "SYNA801A"
                }, 

                Package (0x06)
                {
                    0x06CB, 
                    0xCEC7, 
                    0x2C, 
                    0x20, 
                    One, 
                    "SYNA801B"
                }
            })
            Method (UHMS, 0, NotSerialized)
            {
                Local0 = Zero
                Local1 = SizeOf (ITML)
                While ((Local0 < Local1))
                {
                    Local2 = DerefOf (ITML [Local0])
                    Local3 = DerefOf (Local2 [Zero])
                    Local4 = DerefOf (Local2 [One])
                    If ((TDVI == Local3))
                    {
                        If ((TDPI == Local4))
                        {
                            BADR = DerefOf (Local2 [0x02])
                            HID2 = DerefOf (Local2 [0x03])
                            Local5 = DerefOf (Local2 [0x04])
                            _HID = DerefOf (Local2 [0x05])
                            If ((Local5 == Zero))
                            {
                                SPED = 0x000186A0
                            }

                            If ((Local5 == One))
                            {
                                SPED = 0x00061A80
                            }

                            If ((Local5 == 0x02))
                            {
                                SPED = 0x000F4240
                            }

                            Return (One)
                        }
                    }

                    Local0++
                }

                Return (Zero)
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSYS < 0x07DC))
                {
                    SRXO (GPDI, One)
                }

                INT1 = GNUM (GPDI)
                INT2 = INUM (GPDI)
                If ((TPDM == Zero))
                {
                    SHPO (GPDI, One)
                }

                UHMS ()
            }

            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == HIDG))
                {
                    Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                }

                If ((Arg0 == TP7G))
                {
                    Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TDVI == Zero) && (TDPI == Zero)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((OSYS < 0x07DC))
                {
                    Return (SBFI) /* \_SB_.PC00.I2C0.TPD0.SBFI */
                }

                If ((TPDM == Zero))
                {
                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                }

                Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
            }
        }
    }

    Scope (_SB.PC00.I2C1)
    {
        Device (TPL1)
        {
            Name (HID2, Zero)
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "NULL",
                    0x00, ResourceConsumer, _Y4F, Exclusive,
                    )
            })
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                    "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            Name (SBFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y50)
                {
                    0x00000000,
                }
            })
            CreateWordField (SBFB, \_SB.PC00.I2C1.TPL1._Y4F._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.PC00.I2C1.TPL1._Y4F._SPE, SPED)  // _SPE: Speed
            CreateWordField (SBFG, 0x17, INT1)
            CreateDWordField (SBFI, \_SB.PC00.I2C1.TPL1._Y50._INT, INT2)  // _INT: Interrupts
            Name (ITML, Package (0x11)
            {
                Package (0x06)
                {
                    0x04F3, 
                    0x2F52, 
                    0x10, 
                    One, 
                    One, 
                    "ELAN901C"
                }, 

                Package (0x06)
                {
                    0x04F3, 
                    0x2EA4, 
                    0x10, 
                    One, 
                    One, 
                    "ELAN901C"
                }, 

                Package (0x06)
                {
                    0x1DA0, 
                    0x8001, 
                    0x24, 
                    One, 
                    One, 
                    "PARA0818"
                }, 

                Package (0x06)
                {
                    0x1DA0, 
                    0x8002, 
                    0x24, 
                    One, 
                    One, 
                    "PARA0818"
                }, 

                Package (0x06)
                {
                    0x29BD, 
                    0x9901, 
                    0x09, 
                    One, 
                    One, 
                    "LXST2021"
                }, 

                Package (0x06)
                {
                    0x29BD, 
                    0x9902, 
                    0x09, 
                    One, 
                    One, 
                    "LXST2021"
                }, 

                Package (0x06)
                {
                    0x04F3, 
                    0x2C29, 
                    0x10, 
                    One, 
                    One, 
                    "ELAN901C"
                }, 

                Package (0x06)
                {
                    0x04F3, 
                    0x2EDE, 
                    0x10, 
                    One, 
                    One, 
                    "ELAN901C"
                }, 

                Package (0x06)
                {
                    0x04F3, 
                    0x2EDA, 
                    0x10, 
                    One, 
                    One, 
                    "ELAN901C"
                }, 

                Package (0x06)
                {
                    0x04F3, 
                    0x2EA3, 
                    0x10, 
                    One, 
                    One, 
                    "ELAN901C"
                }, 

                Package (0x06)
                {
                    0x04F3, 
                    0x2C71, 
                    0x10, 
                    One, 
                    One, 
                    "ELAN901C"
                }, 

                Package (0x06)
                {
                    0x04F3, 
                    0x2EDF, 
                    0x10, 
                    One, 
                    One, 
                    "ELAN901C"
                }, 

                Package (0x06)
                {
                    0x04F3, 
                    0x2EB3, 
                    0x10, 
                    One, 
                    One, 
                    "ELAN901C"
                }, 

                Package (0x06)
                {
                    0x04F3, 
                    0x2EB2, 
                    0x10, 
                    One, 
                    One, 
                    "ELAN901C"
                }, 

                Package (0x06)
                {
                    0x04F3, 
                    0x2E9A, 
                    0x10, 
                    One, 
                    One, 
                    "ELAN901C"
                }, 

                Package (0x06)
                {
                    0x2A94, 
                    0xA819, 
                    0x10, 
                    One, 
                    One, 
                    "GTCH7503"
                }, 

                Package (0x06)
                {
                    0x04F3, 
                    0x415C, 
                    0x10, 
                    One, 
                    One, 
                    "ELAN901C"
                }
            })
            Method (UHMS, 0, NotSerialized)
            {
                Local0 = Zero
                Local1 = SizeOf (ITML)
                While ((Local0 < Local1))
                {
                    Local2 = DerefOf (ITML [Local0])
                    Local3 = DerefOf (Local2 [Zero])
                    Local4 = DerefOf (Local2 [One])
                    If ((TLVI == Local3))
                    {
                        If ((TLPI == Local4))
                        {
                            BADR = DerefOf (Local2 [0x02])
                            HID2 = DerefOf (Local2 [0x03])
                            Local5 = DerefOf (Local2 [0x04])
                            _HID = DerefOf (Local2 [0x05])
                            If ((Local5 == Zero))
                            {
                                SPED = 0x000186A0
                            }

                            If ((Local5 == One))
                            {
                                SPED = 0x00061A80
                            }

                            If ((Local5 == 0x02))
                            {
                                SPED = 0x000F4240
                            }

                            Return (One)
                        }
                    }

                    Local0++
                }

                Return (Zero)
            }

            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSYS < 0x07DC))
                {
                    SRXO (GPDI, One)
                }

                INT1 = GNUM (GPLI)
                INT2 = INUM (GPLI)
                If ((TPLM == Zero))
                {
                    SHPO (GPLI, One)
                }

                UHMS ()
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == HIDG))
                {
                    Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                }

                If ((Arg0 == TP7G))
                {
                    Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TLVI == Zero) && (TLPI == Zero)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((OSYS < 0x07DC))
                {
                    Return (SBFI) /* \_SB_.PC00.I2C1.TPL1.SBFI */
                }

                If ((TPLM == Zero))
                {
                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                }

                Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
            }
        }
    }

    Scope (_SB.PC00.I2C4)
    {
        Device (NFC1)
        {
            Name (I2CN, Zero)
            Name (I2CX, Zero)
            Name (_HID, "NXP1001")  // _HID: Hardware ID
            Name (_DDN, "NXP NFC For Win10")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0029, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.PC00.I2C4",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveHigh, Exclusive, PullNone, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0141
                        }
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0142
                        }
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0145
                        }
                })
                Return (RBUF) /* \_SB_.PC00.I2C4.NFC1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSYS >= 0x07DF))
                {
                    If (((GGIV (0x090E000B) == Zero) && (NFCF == Zero)))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PC00.HDAS.SNDW)
    {
        Device (SWD0)
        {
            Name (_ADR, 0x000020025D071100)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0F)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "intel-autonomous-clock-stop", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00) {}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00) {}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }

        Device (SWD1)
        {
            Name (_ADR, 0x000120025D071100)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0F)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "intel-autonomous-clock-stop", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00) {}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00) {}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }
    }

    Scope (_SB.PC00.HDAS)
    {
        Method (PPMS, 1, Serialized)
        {
            If ((Arg0 == ToUUID ("7aa4db02-6b41-4bc3-a712-80a2dde29e11") /* Unknown UUID */))
            {
                Return ((ADPM & 0x2000))
            }

            If ((Arg0 == ToUUID ("56a9ea76-3745-4cc0-815c-a621faa8c9cb") /* Unknown UUID */))
            {
                Return ((ADPM & 0x08))
            }

            If ((Arg0 == ToUUID ("7c708106-3aff-40fe-88be-8c999b3f7445") /* Unknown UUID */))
            {
                Return ((ADPM & 0x04))
            }

            If ((Arg0 == ToUUID ("ec774fa9-28d3-424a-90e4-69f984f1eeb7") /* Unknown UUID */))
            {
                Return ((ADPM & 0x0100))
            }

            If ((Arg0 == ACCG (AG1L, AG1H)))
            {
                Return ((ADPM & 0x20000000))
            }

            If ((Arg0 == ACCG (AG2L, AG2H)))
            {
                Return ((ADPM & 0x40000000))
            }

            If ((Arg0 == ACCG (AG3L, AG3H)))
            {
                Return ((ADPM & 0x80000000))
            }

            Return (Zero)
        }

        Method (ACCG, 2, NotSerialized)
        {
            Name (GBUF, Buffer (0x10) {})
            Concatenate (Arg0, Arg1, GBUF) /* \_SB_.PC00.HDAS.ACCG.GBUF */
            Return (GBUF) /* \_SB_.PC00.HDAS.ACCG.GBUF */
        }
    }

    Scope (_SB)
    {
        Device (HIDD)
        {
            Name (_HID, "INTC1070")  // _HID: Hardware ID
            Name (HBSY, Zero)
            Name (HIDX, Zero)
            Name (HMDE, Zero)
            Name (HRDY, Zero)
            Name (BTLD, Zero)
            Name (BTS1, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Local0 = Zero
                Local0 |= One
                AHDB = One
                If ((AHDB == One))
                {
                    Local0 |= 0x10
                }

                HEB1 = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                ADBG ("HIDD _STA")
                If (((OSYS >= 0x07DD) && (HEFE == One)))
                {
                    ADBG ("Show HID device")
                    Return (0x0F)
                }
                Else
                {
                    ADBG ("Hide HID device")
                    Return (Zero)
                }
            }

            Method (HDDM, 0, Serialized)
            {
                Name (DPKG, Package (0x04)
                {
                    0x11111111, 
                    0x22222222, 
                    0x33333333, 
                    0x44444444
                })
                Return (DPKG) /* \_SB_.HIDD.HDDM.DPKG */
            }

            Method (HDEM, 0, Serialized)
            {
                HBSY = Zero
                If ((HMDE == Zero))
                {
                    Return (HIDX) /* \_SB_.HIDD.HIDX */
                }

                Return (HMDE) /* \_SB_.HIDD.HMDE */
            }

            Method (HDMM, 0, Serialized)
            {
                Return (HMDE) /* \_SB_.HIDD.HMDE */
            }

            Method (HDSM, 1, Serialized)
            {
                HRDY = Arg0
            }

            Method (HPEM, 1, Serialized)
            {
                ADBG ("HPEM")
                HBSY = One
                If ((HMDE == Zero))
                {
                    HIDX = Arg0
                }
                Else
                {
                    HIDX = Arg0
                }

                Notify (HIDD, 0xC0) // Hardware-Specific
                Local0 = Zero
                While (((Local0 < 0xFA) && HBSY))
                {
                    Sleep (0x04)
                    Local0++
                }

                If ((HBSY == One))
                {
                    ADBG ("Fail")
                    HBSY = Zero
                    HIDX = Zero
                    Return (One)
                }
                Else
                {
                    ADBG ("Success")
                    Return (Zero)
                }
            }

            Method (BTNL, 0, Serialized)
            {
                BTLD = One
                BTS1 = Zero
            }

            Method (BTNC, 0, Serialized)
            {
                If ((AEAB == One))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (HEB2, Zero)
            Method (HEBC, 0, Serialized)
            {
                If ((AHDB == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HEB1) /* \HEB1 */
                }
            }

            Method (HEEC, 0, Serialized)
            {
                If ((AHDB == One))
                {
                    Return (HEB2) /* \_SB_.HIDD.HEB2 */
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("eeec56b3-4442-408f-a792-4edd4d758054") /* Unknown UUID */))
                {
                    If ((One == ToInteger (Arg1)))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Local0 = One
                                Local0 |= 0x02
                                Local0 |= 0x04
                                Local0 |= 0x08
                                Local0 |= 0x10
                                Local0 |= Zero
                                Local0 |= Zero
                                Local0 |= 0x80
                                Local0 |= Zero
                                Local0 |= Zero
                                Return (Local0)
                            }
                            Case (One)
                            {
                                BTNL ()
                            }
                            Case (0x02)
                            {
                                Return (HDMM ())
                            }
                            Case (0x03)
                            {
                                HDSM (DerefOf (Arg3 [Zero]))
                            }
                            Case (0x04)
                            {
                                Return (HDEM ())
                            }
                            Case (0x07)
                            {
                                Return (HEBC ())
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Method (HIDW, 4, Serialized)
    {
        ADBG ("HIDW")
        If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37") /* Unknown UUID */))
        {
            ADBG (Concatenate ("Function ", ToHexString (Arg2)))
            If ((Arg2 == One))
            {
                ADBG (Concatenate ("Package ", ToHexString (DerefOf (Arg3 [Zero]))))
                Switch (ToInteger (DerefOf (Arg3 [Zero])))
                {
                    Case (Zero)
                    {
                        ADBG ("Send HID Event/Wake Notification")
                        If (CondRefOf (\_SB.HIDD.HPEM))
                        {
                            ADBG ("Notify")
                            \_SB.HIDD.HPEM (0x1B)
                            P8XH (Zero, 0x5C)
                        }
                    }

                }

                ADBG ("Exit")
                Return (Zero)
            }
            Else
            {
                ADBG ("Function number mismatch")
                Return (Zero)
            }
        }
        Else
        {
            ADBG ("GUID mismatch")
            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Method (HIWC, 1, NotSerialized)
    {
        ADBG ("HIWC")
        If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37") /* Unknown UUID */))
        {
            ADBG ("GUID match")
            Return (One)
        }

        ADBG ("GUID mismatch")
        Return (Zero)
    }

    Scope (\)
    {
        PowerResource (PIN, 0x00, 0x0000)
        {
            Method (STA, 1, Serialized)
            {
                If ((\_SB.GGOV (DerefOf (Arg0 [Zero])) == DerefOf (Arg0 [One]
                    )))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (ON, 1, Serialized)
            {
                \_SB.SGOV (DerefOf (Arg0 [Zero]), DerefOf (Arg0 [One]))
            }

            Method (OFF, 1, Serialized)
            {
                \_SB.SGOV (DerefOf (Arg0 [Zero]), ~DerefOf (Arg0 [One])
                    )
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }
        }
    }

    Scope (\)
    {
        PowerResource (PINP, 0x00, 0x0000)
        {
            Method (STA, 1, Serialized)
            {
                If (((\_SB.GPC0 (DerefOf (Arg0 [Zero])) & 0x0200) == Zero))
                {
                    If ((\_SB.GGOV (DerefOf (Arg0 [Zero])) == DerefOf (Arg0 [One]
                        )))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                ElseIf (((\_SB.GPC0 (DerefOf (Arg0 [Zero])) & 0x0100
                    ) != Zero))
                {
                    Return (DerefOf (Arg0 [One]))
                }
                Else
                {
                    Return (~DerefOf (Arg0 [One]))
                }
            }

            Method (ON, 1, Serialized)
            {
                ADBG (Concatenate ("PINH GPIO=", ToHexString (DerefOf (Arg0 [Zero]))))
                If ((DerefOf (Arg0 [One]) == Zero))
                {
                    \_SB.SPC0 (DerefOf (Arg0 [Zero]), (\_SB.GPC0 (DerefOf (Arg0 [Zero]
                        )) & 0xFFFFFFFFFFFFFEFF))
                }
                Else
                {
                    \_SB.SPC0 (DerefOf (Arg0 [Zero]), (\_SB.GPC0 (DerefOf (Arg0 [Zero]
                        )) | 0x0100))
                }
            }

            Method (OFF, 1, Serialized)
            {
                ADBG (Concatenate ("PINL GPIO=", ToHexString (DerefOf (Arg0 [Zero]))))
                If ((DerefOf (Arg0 [One]) == Zero))
                {
                    \_SB.SPC0 (DerefOf (Arg0 [Zero]), (\_SB.GPC0 (DerefOf (Arg0 [Zero]
                        )) | 0x0100))
                }
                Else
                {
                    \_SB.SPC0 (DerefOf (Arg0 [Zero]), (\_SB.GPC0 (DerefOf (Arg0 [Zero]
                        )) & 0xFFFFFFFFFFFFFEFF))
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }
        }
    }

    Scope (_SB)
    {
        Name (C0PF, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x20, 0x03, 0xD0, 0x07,  // .... ...
                /* 0008 */  0x41, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01,  // A.......
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        })
        Name (C1PF, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x20, 0x03, 0xD0, 0x07,  // .... ...
                /* 0008 */  0x41, 0x0E, 0x00, 0x00, 0x04, 0x00, 0x80, 0x01,  // A.......
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        })
    }

    Scope (\)
    {
        Method (PLD1, 0, Serialized)
        {
            Return (\_SB.C0PF)
        }
    }

    Scope (\)
    {
        Method (PLD2, 0, Serialized)
        {
            Return (\_SB.C1PF)
        }
    }

    Scope (_SB.PC00.THC0)
    {
        Device (TLC1)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C0PF) /* \_SB_.C0PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (TLC2)
        {
            Name (_ADR, 0x02)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C0PF) /* \_SB_.C0PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (TLC3)
        {
            Name (_ADR, 0x03)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C0PF) /* \_SB_.C0PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB.PC00.THC1)
    {
        Device (TLC1)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C1PF) /* \_SB_.C1PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (TLC2)
        {
            Name (_ADR, 0x02)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C1PF) /* \_SB_.C1PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (TLC3)
        {
            Name (_ADR, 0x03)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C1PF) /* \_SB_.C1PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    If ((LP5E == One))
    {
        Scope (_SB)
        {
            Device (LP5X)
            {
                Name (_HID, "INTC1090")  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((LP5E == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2Cx",
                            0x00, ResourceConsumer, _Y51, Exclusive,
                            )
                    })
                    CreateByteField (RBUF, 0x1F, CNST)
                    CreateWordField (RBUF, \_SB.LP5X._CRS._Y51._ADR, SLAD)  // _ADR: Address
                    CNST = CLCN /* \CLCN */
                    SLAD = CLSA /* \CLSA */
                    Return (RBUF) /* \_SB_.LP5X._CRS.RBUF */
                }
            }
        }
    }

    If ((VMDE == One))
    {
        Name (VDSD, One)
        If ((STD3 == Zero))
        {
            VDSD = Zero
        }

        Scope (_SB.PC00)
        {
            Device (VMD0)
            {
                Name (_ADR, 0x000E0000)  // _ADR: Address
                If (CondRefOf (\VDSD))
                {
                    If ((VDSD == One))
                    {
                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x03)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (VMS0))
                    {
                        If ((VMS0 != Zero))
                        {
                            ISAT = Zero
                        }
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (VMS0))
                    {
                        If ((VMS0 != Zero))
                        {
                            ISAT = One
                        }
                    }
                }

                Method (CBAR, 3, Serialized)
                {
                    Name (VCFB, Zero)
                    VCFB = XBAS /* \XBAS */
                    VCFB |= Zero
                    VCFB |= 0x00070000
                    VCFB |= Zero
                    OperationRegion (VCFG, SystemMemory, VCFB, 0x0100)
                    Field (VCFG, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64
                    }

                    Name (DCFB, Zero)
                    DCFB = BAR0 /* \_SB_.PC00.VMD0.CBAR.BAR0 */
                    DCFB &= 0xFFFFFFFFFFFFFFF0
                    DCFB |= (Arg0 << 0x14)
                    DCFB |= (Arg1 << 0x0F)
                    DCFB |= (Arg2 << 0x0C)
                    Return (DCFB) /* \_SB_.PC00.VMD0.CBAR.DCFB */
                }

                Device (NVDR)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((DPMS == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("a3316317-e8b6-4adf-96e8-94d94a51a38e") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (0x03)
                                        }
                                        Default
                                        {
                                            Return (Zero)
                                        }

                                    }
                                }
                                Case (One)
                                {
                                    Name (PPAR, Package (0x01)
                                    {
                                        Buffer (0x18) {}
                                    })
                                    CreateWordField (DerefOf (PPAR [Zero]), Zero, DPM0)
                                    CreateWordField (DerefOf (PPAR [Zero]), 0x02, DPM1)
                                    CreateDWordField (DerefOf (PPAR [Zero]), 0x04, DPM2)
                                    CreateQWordField (DerefOf (PPAR [Zero]), 0x08, DPM3)
                                    CreateQWordField (DerefOf (PPAR [Zero]), 0x10, DPM4)
                                    If ((DPMS == Zero))
                                    {
                                        DPM0 = 0x02
                                        DPM1 = Zero
                                        DPM3 = Zero
                                        DPM4 = Zero
                                        Return (PPAR) /* \_SB_.PC00.VMD0.NVDR._DSM.PPAR */
                                    }
                                    Else
                                    {
                                        DPM0 = Zero
                                        DPM1 = Zero
                                        DPM3 = PMSA /* \PMSA */
                                        DPM4 = PMRL /* \PMRL */
                                        Return (PPAR) /* \_SB_.PC00.VMD0.NVDR._DSM.PPAR */
                                    }
                                }

                            }

                            Return (Zero)
                        }
                        Else
                        {
                            Return (^^^^NVDR._DSM (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    Device (NVD1)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((DPMS == One))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_LSI, 0, NotSerialized)  // _LSI: Label Storage Information
                        {
                            Return (\_SB.NVDR.NVD1._LSI ())
                        }

                        Method (_LSR, 2, Serialized)  // _LSR: Label Storage Read
                        {
                            Return (\_SB.NVDR.NVD1._LSR (Arg0, Arg1))
                        }

                        Method (_LSW, 3, Serialized)  // _LSW: Label Storage Write
                        {
                            Return (\_SB.NVDR.NVD1._LSW (Arg0, Arg1, Arg2))
                        }

                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            Return (\_SB.NVDR.NVD1._DSM (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Device (RP01)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, Zero)
                    Name (RSPT, One)
                    Name (RSPI, Zero)
                    Name (_ADR, 0x80E0FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP02)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, One)
                    Name (RSPT, One)
                    Name (RSPI, One)
                    Name (_ADR, 0x80E1FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP03)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x02)
                    Name (RSPT, One)
                    Name (RSPI, 0x02)
                    Name (_ADR, 0x80E2FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP04)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x03)
                    Name (RSPT, One)
                    Name (RSPI, 0x03)
                    Name (_ADR, 0x80E3FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP05)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x04)
                    Name (RSPT, One)
                    Name (RSPI, 0x04)
                    Name (_ADR, 0x80E4FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP06)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x05)
                    Name (RSPT, One)
                    Name (RSPI, 0x05)
                    Name (_ADR, 0x80E5FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP07)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x06)
                    Name (RSPT, One)
                    Name (RSPI, 0x06)
                    Name (_ADR, 0x80E6FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP08)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x07)
                    Name (RSPT, One)
                    Name (RSPI, 0x07)
                    Name (_ADR, 0x80E7FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP09)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, Zero)
                    Name (RSPT, One)
                    Name (RSPI, 0x08)
                    Name (_ADR, 0x80E8FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP10)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, One)
                    Name (RSPT, One)
                    Name (RSPI, 0x09)
                    Name (_ADR, 0x80E9FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP11)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x02)
                    Name (RSPT, One)
                    Name (RSPI, 0x0A)
                    Name (_ADR, 0x80EAFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP12)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x03)
                    Name (RSPT, One)
                    Name (RSPI, 0x0B)
                    Name (_ADR, 0x80EBFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP13)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x04)
                    Name (RSPT, One)
                    Name (RSPI, 0x0C)
                    Name (_ADR, 0x80ECFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP14)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x05)
                    Name (RSPT, One)
                    Name (RSPI, 0x0D)
                    Name (_ADR, 0x80EDFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP15)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x06)
                    Name (RSPT, One)
                    Name (RSPI, 0x0E)
                    Name (_ADR, 0x80EEFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP16)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x07)
                    Name (RSPT, One)
                    Name (RSPI, 0x0F)
                    Name (_ADR, 0x80EFFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP17)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, Zero)
                    Name (RSPT, One)
                    Name (RSPI, 0x10)
                    Name (_ADR, 0x80D8FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP18)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, One)
                    Name (RSPT, One)
                    Name (RSPI, 0x11)
                    Name (_ADR, 0x80D9FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP19)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x02)
                    Name (RSPT, One)
                    Name (RSPI, 0x12)
                    Name (_ADR, 0x80DAFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP20)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x03)
                    Name (RSPT, One)
                    Name (RSPI, 0x13)
                    Name (_ADR, 0x80DBFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP21)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x04)
                    Name (RSPT, One)
                    Name (RSPI, 0x14)
                    Name (_ADR, 0x80DCFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP22)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x05)
                    Name (RSPT, One)
                    Name (RSPI, 0x15)
                    Name (_ADR, 0x80DDFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP23)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x06)
                    Name (RSPT, One)
                    Name (RSPI, 0x16)
                    Name (_ADR, 0x80DEFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP24)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x07)
                    Name (RSPT, One)
                    Name (RSPI, 0x17)
                    Name (_ADR, 0x80DFFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP25)
                {
                    Name (RPD, 0xFF)
                    Name (RPF, Zero)
                    Name (RSPT, One)
                    Name (RSPI, 0x18)
                    Name (_ADR, 0x80D0FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP26)
                {
                    Name (RPD, 0xFF)
                    Name (RPF, One)
                    Name (RSPT, One)
                    Name (RSPI, 0x19)
                    Name (_ADR, 0x80D1FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP27)
                {
                    Name (RPD, 0xFF)
                    Name (RPF, 0x02)
                    Name (RSPT, One)
                    Name (RSPI, 0x1A)
                    Name (_ADR, 0x80D2FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP28)
                {
                    Name (RPD, 0xFF)
                    Name (RPF, 0x03)
                    Name (RSPT, One)
                    Name (RSPI, 0x1B)
                    Name (_ADR, 0x80D3FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (PEG0)
                {
                    Name (RPD, 0x06)
                    Name (RPF, Zero)
                    Name (RSPT, 0x02)
                    Name (RSPI, Zero)
                    Name (_ADR, 0x8030FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (PEG1)
                {
                    Name (RPD, One)
                    Name (RPF, Zero)
                    Name (RSPT, 0x02)
                    Name (RSPI, One)
                    Name (_ADR, 0x8008FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (PEG2)
                {
                    If (CondRefOf (VMCP))
                    {
                        Name (RPD, Zero)
                        Name (RPF, Zero)
                        Name (RSPT, 0x02)
                        Name (RSPI, 0x02)
                        Name (_ADR, Zero)  // _ADR: Address
                        If ((VMCP & 0x02))
                        {
                            RPD = One
                            RPF = One
                            _ADR = 0x8009FFFF
                        }
                        ElseIf ((VMCP & 0x10))
                        {
                            RPD = 0x06
                            RPF = 0x02
                            _ADR = 0x8032FFFF
                        }
                    }

                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (PEG3)
                {
                    Name (RPD, One)
                    Name (RPF, 0x02)
                    Name (RSPT, 0x02)
                    Name (RSPI, 0x03)
                    Name (_ADR, 0x800AFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (PRT0)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, Zero)
                    Name (_ADR, 0x00B8FFF0)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT1)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, One)
                    Name (_ADR, 0x00B8FFF1)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT2)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x02)
                    Name (_ADR, 0x00B8FFF2)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT3)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x03)
                    Name (_ADR, 0x00B8FFF3)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT4)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x04)
                    Name (_ADR, 0x00B8FFF4)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT5)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x05)
                    Name (_ADR, 0x00B8FFF5)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT6)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x06)
                    Name (_ADR, 0x00B8FFF6)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT7)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x07)
                    Name (_ADR, 0x00B8FFF7)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Name (VLVN, Zero)
                Name (VV0D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VV1D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VV2D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VV3D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VD3A, Zero)
                Name (VV0S, Zero)
                Name (VV1S, Zero)
                Name (VV2S, Zero)
                Name (VV3S, Zero)
                Method (PRUN, 1, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            PSD0 (^RP01.RSPI)
                            HBCM (^RP01.RSPI, One)
                        }
                        Case (One)
                        {
                            PSD0 (^RP02.RSPI)
                            HBCM (^RP02.RSPI, One)
                        }
                        Case (0x02)
                        {
                            PSD0 (^RP03.RSPI)
                            HBCM (^RP03.RSPI, One)
                        }
                        Case (0x03)
                        {
                            PSD0 (^RP04.RSPI)
                            HBCM (^RP04.RSPI, One)
                        }
                        Case (0x04)
                        {
                            PSD0 (^RP05.RSPI)
                            HBCM (^RP05.RSPI, One)
                        }
                        Case (0x05)
                        {
                            PSD0 (^RP06.RSPI)
                            HBCM (^RP06.RSPI, One)
                        }
                        Case (0x06)
                        {
                            PSD0 (^RP07.RSPI)
                            HBCM (^RP07.RSPI, One)
                        }
                        Case (0x07)
                        {
                            PSD0 (^RP08.RSPI)
                            HBCM (^RP08.RSPI, One)
                        }
                        Case (0x08)
                        {
                            PSD0 (^RP09.RSPI)
                            HBCM (^RP09.RSPI, One)
                        }
                        Case (0x09)
                        {
                            PSD0 (^RP10.RSPI)
                            HBCM (^RP10.RSPI, One)
                        }
                        Case (0x0A)
                        {
                            PSD0 (^RP11.RSPI)
                            HBCM (^RP11.RSPI, One)
                        }
                        Case (0x0B)
                        {
                            PSD0 (^RP12.RSPI)
                            HBCM (^RP12.RSPI, One)
                        }
                        Case (0x0C)
                        {
                            PSD0 (^RP13.RSPI)
                            HBCM (^RP13.RSPI, One)
                        }
                        Case (0x0D)
                        {
                            PSD0 (^RP14.RSPI)
                            HBCM (^RP14.RSPI, One)
                        }
                        Case (0x0E)
                        {
                            PSD0 (^RP15.RSPI)
                            HBCM (^RP15.RSPI, One)
                        }
                        Case (0x0F)
                        {
                            PSD0 (^RP16.RSPI)
                            HBCM (^RP16.RSPI, One)
                        }
                        Case (0x10)
                        {
                            PSD0 (^RP17.RSPI)
                            HBCM (^RP17.RSPI, One)
                        }

                    }
                }

                Method (PRLA, 1, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            ^RP01.RLA ()
                        }
                        Case (One)
                        {
                            ^RP02.RLA ()
                        }
                        Case (0x02)
                        {
                            ^RP03.RLA ()
                        }
                        Case (0x03)
                        {
                            ^RP04.RLA ()
                        }
                        Case (0x04)
                        {
                            ^RP05.RLA ()
                        }
                        Case (0x05)
                        {
                            ^RP06.RLA ()
                        }
                        Case (0x06)
                        {
                            ^RP07.RLA ()
                        }
                        Case (0x07)
                        {
                            ^RP08.RLA ()
                        }
                        Case (0x08)
                        {
                            ^RP09.RLA ()
                        }
                        Case (0x09)
                        {
                            ^RP10.RLA ()
                        }
                        Case (0x0A)
                        {
                            ^RP11.RLA ()
                        }
                        Case (0x0B)
                        {
                            ^RP12.RLA ()
                        }
                        Case (0x0C)
                        {
                            ^RP13.RLA ()
                        }
                        Case (0x0D)
                        {
                            ^RP14.RLA ()
                        }
                        Case (0x0E)
                        {
                            ^RP15.RLA ()
                        }
                        Case (0x0F)
                        {
                            ^RP16.RLA ()
                        }
                        Case (0x10)
                        {
                            ^RP17.RLA ()
                        }

                    }

                    Sleep (0x64)
                }

                Method (PRLD, 1, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            ^RP01.RL23 ()
                            PSD3 (^RP01.RSPI)
                            HBCM (^RP01.RSPI, Zero)
                        }
                        Case (One)
                        {
                            ^RP02.RL23 ()
                            PSD3 (^RP02.RSPI)
                            HBCM (^RP02.RSPI, Zero)
                        }
                        Case (0x02)
                        {
                            ^RP03.RL23 ()
                            PSD3 (^RP03.RSPI)
                            HBCM (^RP03.RSPI, Zero)
                        }
                        Case (0x03)
                        {
                            ^RP04.RL23 ()
                            PSD3 (^RP04.RSPI)
                            HBCM (^RP04.RSPI, Zero)
                        }
                        Case (0x04)
                        {
                            ^RP05.RL23 ()
                            PSD3 (^RP05.RSPI)
                            HBCM (^RP05.RSPI, Zero)
                        }
                        Case (0x05)
                        {
                            ^RP06.RL23 ()
                            PSD3 (^RP06.RSPI)
                            HBCM (^RP06.RSPI, Zero)
                        }
                        Case (0x06)
                        {
                            ^RP07.RL23 ()
                            PSD3 (^RP07.RSPI)
                            HBCM (^RP07.RSPI, Zero)
                        }
                        Case (0x07)
                        {
                            ^RP08.RL23 ()
                            PSD3 (^RP08.RSPI)
                            HBCM (^RP08.RSPI, Zero)
                        }
                        Case (0x08)
                        {
                            ^RP09.RL23 ()
                            PSD3 (^RP09.RSPI)
                            HBCM (^RP09.RSPI, Zero)
                        }
                        Case (0x09)
                        {
                            ^RP10.RL23 ()
                            PSD3 (^RP10.RSPI)
                            HBCM (^RP10.RSPI, Zero)
                        }
                        Case (0x0A)
                        {
                            ^RP11.RL23 ()
                            PSD3 (^RP11.RSPI)
                            HBCM (^RP11.RSPI, Zero)
                        }
                        Case (0x0B)
                        {
                            ^RP12.RL23 ()
                            PSD3 (^RP12.RSPI)
                            HBCM (^RP12.RSPI, Zero)
                        }
                        Case (0x0C)
                        {
                            ^RP13.RL23 ()
                            PSD3 (^RP13.RSPI)
                            HBCM (^RP13.RSPI, Zero)
                        }
                        Case (0x0D)
                        {
                            ^RP14.RL23 ()
                            PSD3 (^RP14.RSPI)
                            HBCM (^RP14.RSPI, Zero)
                        }
                        Case (0x0E)
                        {
                            ^RP15.RL23 ()
                            PSD3 (^RP15.RSPI)
                            HBCM (^RP15.RSPI, Zero)
                        }
                        Case (0x0F)
                        {
                            ^RP16.RL23 ()
                            PSD3 (^RP16.RSPI)
                            HBCM (^RP16.RSPI, Zero)
                        }
                        Case (0x10)
                        {
                            ^RP17.RL23 ()
                            PSD3 (^RP17.RSPI)
                            HBCM (^RP17.RSPI, Zero)
                        }

                    }
                }

                Method (SVRP, 3, NotSerialized)
                {
                    Local0 = (SizeOf (Arg0) - One)
                    ADBG (Concatenate ("Volume size is: ", Local0))
                    If ((Local0 > 0x20))
                    {
                        ADBG ("Volume size over 32")
                        Return (Zero)
                    }

                    Arg2 = Local0
                    Local1 = Zero
                    While ((Local1 < Local0))
                    {
                        Arg1 [Local1] = DerefOf (Arg0 [(Local1 + One)]
                            )
                        ADBG (Concatenate ("Adding to volume: ", ToHexString (DerefOf (Arg1 [Local1]))))
                        Local1++
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("9cd9cddd-8845-4afd-8392-31c4eb87cabd") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (RBUF, Buffer (One)
                                {
                                     0x00                                             // .
                                })
                                CreateByteField (RBUF, Zero, SFUN)
                                SFUN = 0x3F
                                Return (RBUF) /* \_SB_.PC00.VMD0._DSM.RBUF */
                            }
                            Case (One)
                            {
                                VLVN = ToInteger (DerefOf (Arg3 [Zero]))
                                If ((VLVN == Zero))
                                {
                                    SVRP (Arg3, VV0D, RefOf (VV0S))
                                    Return (Zero)
                                }
                                ElseIf ((VLVN == One))
                                {
                                    SVRP (Arg3, VV1D, RefOf (VV1S))
                                    Return (Zero)
                                }
                                ElseIf ((VLVN == 0x02))
                                {
                                    SVRP (Arg3, VV2D, RefOf (VV2S))
                                    Return (Zero)
                                }
                                ElseIf ((VLVN == 0x03))
                                {
                                    SVRP (Arg3, VV3D, RefOf (VV3S))
                                    Return (Zero)
                                }
                                Else
                                {
                                    Return (One)
                                }
                            }
                            Case (0x02)
                            {
                                Name (VVON, Package (0x20)
                                {
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                Local0 = SizeOf (Arg3)
                                Local1 = Zero
                                If ((Local0 <= 0x20))
                                {
                                    While ((Local1 < Local0))
                                    {
                                        VVON [Local1] = ToInteger (DerefOf (Arg3 [Local1]))
                                        Local1++
                                    }

                                    VLON (Local0, VVON)
                                }

                                Return (Zero)
                            }
                            Case (0x03)
                            {
                                Name (VVOF, Package (0x20)
                                {
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                Local0 = SizeOf (Arg3)
                                Local1 = Zero
                                If ((Local0 <= 0x20))
                                {
                                    While ((Local1 < Local0))
                                    {
                                        VVOF [Local1] = ToInteger (DerefOf (Arg3 [Local1]))
                                        Local1++
                                    }

                                    VLOF (Local0, VVOF)
                                }

                                Return (Zero)
                            }
                            Case (0x04)
                            {
                                Return (Zero)
                            }
                            Case (0x05)
                            {
                                VD3A = DerefOf (Arg3 [Zero])
                                Return (Zero)
                            }
                            Default
                            {
                                Return (0x02)
                            }

                        }
                    }

                    Return (Zero)
                }

                Method (VLON, 2, Serialized)
                {
                    Name (DRVA, Zero)
                    Local1 = Arg0
                    Local0 = Zero
                    While ((Local1 > Local0))
                    {
                        DRVA = ToInteger (DerefOf (Arg1 [Local0]))
                        Switch (ToInteger (DRVA))
                        {
                            Case (0x80E0FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    Zero)))
                                {
                                    If ((HBSL & One))
                                    {
                                        If (D3CV (^RP01.RSPT, ^RP01.RSPI))
                                        {
                                            PSD0 (^RP03.RSPI)
                                            HBCM (^RP03.RSPI, One)
                                        }
                                    }

                                    ^RP01.VPON ()
                                    If ((HBSL & One))
                                    {
                                        If (D3CV (^RP01.RSPT, ^RP01.RSPI))
                                        {
                                            ^RP03.RLA ()
                                            Sleep (0x64)
                                        }
                                    }
                                }
                            }
                            Case (0x80E1FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    One)))
                                {
                                    ^RP02.VPON ()
                                }
                            }
                            Case (0x80E2FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x02)))
                                {
                                    If ((HBSL & One)) {}
                                    Else
                                    {
                                        ^RP03.VPON ()
                                    }
                                }
                            }
                            Case (0x80E3FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x03)))
                                {
                                    ^RP04.VPON ()
                                }
                            }
                            Case (0x80E4FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x04)))
                                {
                                    If ((HBSL & 0x02))
                                    {
                                        If (D3CV (^RP05.RSPT, ^RP05.RSPI))
                                        {
                                            PSD0 (^RP07.RSPI)
                                            HBCM (^RP07.RSPI, One)
                                        }
                                    }

                                    ^RP05.VPON ()
                                    If ((HBSL & 0x02))
                                    {
                                        If (D3CV (^RP05.RSPT, ^RP05.RSPI))
                                        {
                                            ^RP07.RLA ()
                                            Sleep (0x64)
                                        }
                                    }
                                }
                            }
                            Case (0x80E5FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x05)))
                                {
                                    ^RP06.VPON ()
                                }
                            }
                            Case (0x80E6FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x06)))
                                {
                                    If ((HBSL & 0x02)) {}
                                    Else
                                    {
                                        ^RP07.VPON ()
                                    }
                                }
                            }
                            Case (0x80E7FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x07)))
                                {
                                    ^RP08.VPON ()
                                }
                            }
                            Case (0x80E8FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x08)))
                                {
                                    If ((HBSL & 0x04))
                                    {
                                        If (D3CV (^RP09.RSPT, ^RP09.RSPI))
                                        {
                                            PSD0 (^RP11.RSPI)
                                            HBCM (^RP11.RSPI, One)
                                        }
                                    }

                                    ^RP09.VPON ()
                                    If ((HBSL & 0x04))
                                    {
                                        If (D3CV (^RP09.RSPT, ^RP09.RSPI))
                                        {
                                            ^RP11.RLA ()
                                            Sleep (0x64)
                                        }
                                    }
                                }
                            }
                            Case (0x80E9FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x09)))
                                {
                                    ^RP10.VPON ()
                                }
                            }
                            Case (0x80EAFFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x0A)))
                                {
                                    If ((HBSL & 0x04)) {}
                                    Else
                                    {
                                        ^RP11.VPON ()
                                    }
                                }
                            }
                            Case (0x80EBFFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x0B)))
                                {
                                    ^RP12.VPON ()
                                }
                            }
                            Case (0x80ECFFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x0C)))
                                {
                                    If ((HBSL & 0x08))
                                    {
                                        If (D3CV (^RP13.RSPT, ^RP13.RSPI))
                                        {
                                            PSD0 (^RP15.RSPI)
                                            HBCM (^RP15.RSPI, One)
                                        }
                                    }

                                    ^RP13.VPON ()
                                    If ((HBSL & 0x08))
                                    {
                                        If (D3CV (^RP13.RSPT, ^RP13.RSPI))
                                        {
                                            ^RP15.RLA ()
                                            Sleep (0x64)
                                        }
                                    }
                                }
                            }
                            Case (0x80EDFFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x0D)))
                                {
                                    ^RP14.VPON ()
                                }
                            }
                            Case (0x80EEFFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x0E)))
                                {
                                    If ((HBSL & 0x08)) {}
                                    Else
                                    {
                                        ^RP15.VPON ()
                                    }
                                }
                            }
                            Case (0x80EFFFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x0F)))
                                {
                                    ^RP16.VPON ()
                                }
                            }
                            Case (0x80D8FFFF)
                            {
                                If ((HBSL & 0x10))
                                {
                                    If (D3CV (^RP17.RSPT, ^RP17.RSPI))
                                    {
                                        PSD0 (^RP19.RSPI)
                                        HBCM (^RP19.RSPI, One)
                                    }
                                }

                                ^RP17.VPON ()
                                If ((HBSL & 0x10))
                                {
                                    If (D3CV (^RP17.RSPT, ^RP17.RSPI))
                                    {
                                        ^RP19.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x80D9FFFF)
                            {
                                ^RP18.VPON ()
                            }
                            Case (0x80DAFFFF)
                            {
                                If ((HBSL & 0x10)) {}
                                Else
                                {
                                    ^RP19.VPON ()
                                }
                            }
                            Case (0x80DBFFFF)
                            {
                                ^RP20.VPON ()
                            }
                            Case (0x80DCFFFF)
                            {
                                If ((HBSL & 0x20))
                                {
                                    If (D3CV (^RP21.RSPT, ^RP21.RSPI))
                                    {
                                        PSD0 (^RP23.RSPI)
                                        HBCM (^RP23.RSPI, One)
                                    }
                                }

                                ^RP21.VPON ()
                                If ((HBSL & 0x20))
                                {
                                    If (D3CV (^RP21.RSPT, ^RP21.RSPI))
                                    {
                                        ^RP23.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x000000080DDAFFFF)
                            {
                                ^RP22.VPON ()
                            }
                            Case (0x80DEFFFF)
                            {
                                If ((HBSL & 0x20)) {}
                                Else
                                {
                                    ^RP23.VPON ()
                                }
                            }
                            Case (0x80DFFFFF)
                            {
                                ^RP24.VPON ()
                            }
                            Case (0x80D0FFFF)
                            {
                                If ((HBSL & 0x40))
                                {
                                    If (D3CV (^RP25.RSPT, ^RP25.RSPI))
                                    {
                                        PSD0 (^RP27.RSPI)
                                        HBCM (^RP27.RSPI, One)
                                    }
                                }

                                ^RP25.VPON ()
                                If ((HBSL & 0x40))
                                {
                                    If (D3CV (^RP25.RSPT, ^RP25.RSPI))
                                    {
                                        ^RP27.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x80D1FFFF)
                            {
                                ^RP26.VPON ()
                            }
                            Case (0x80D2FFFF)
                            {
                                If ((HBSL & 0x40)) {}
                                Else
                                {
                                    ^RP27.VPON ()
                                }
                            }
                            Case (0x80D3FFFF)
                            {
                                ^RP28.VPON ()
                            }
                            Case (0x8030FFFF)
                            {
                                If (CondRefOf (\HBCL))
                                {
                                    If (((HBCL != 0xFF) && (HBCL == Zero)))
                                    {
                                        If (D3CV (^PEG0.RSPT, ^PEG0.RSPI))
                                        {
                                            PRUN (HBPL)
                                        }
                                    }
                                }

                                ^PEG0.VPON ()
                                If (CondRefOf (\HBCL))
                                {
                                    If (((HBCL != 0xFF) && (HBCL == Zero)))
                                    {
                                        If (D3CV (^PEG0.RSPT, ^PEG0.RSPI))
                                        {
                                            PRLA (HBPL)
                                        }
                                    }
                                }
                            }
                            Case (0x8008FFFF)
                            {
                                If (CondRefOf (\HBCL))
                                {
                                    If (((HBCL != 0xFF) && (HBCL == One)))
                                    {
                                        If (D3CV (^PEG1.RSPT, ^PEG1.RSPI))
                                        {
                                            PRUN (HBPL)
                                        }
                                    }
                                }

                                ^PEG1.VPON ()
                                If (CondRefOf (\HBCL))
                                {
                                    If (((HBCL != 0xFF) && (HBCL == One)))
                                    {
                                        If (D3CV (^PEG1.RSPT, ^PEG1.RSPI))
                                        {
                                            PRLA (HBPL)
                                        }
                                    }
                                }
                            }
                            Case (0x8009FFFF)
                            {
                                If (CondRefOf (\HBCL))
                                {
                                    If (((HBCL != 0xFF) && (HBCL == 0x02)))
                                    {
                                        If (D3CV (^PEG2.RSPT, ^PEG2.RSPI))
                                        {
                                            PRUN (HBPL)
                                        }
                                    }
                                }

                                ^PEG2.VPON ()
                                If (CondRefOf (\HBCL))
                                {
                                    If (((HBCL != 0xFF) && (HBCL == 0x02)))
                                    {
                                        If (D3CV (^PEG2.RSPT, ^PEG2.RSPI))
                                        {
                                            PRLA (HBPL)
                                        }
                                    }
                                }
                            }
                            Case (0x800AFFFF)
                            {
                                ^PEG3.VPON ()
                            }
                            Case (0x00B8FFF0)
                            {
                                ^PRT0.VSON ()
                            }
                            Case (0x00B8FFF1)
                            {
                                ^PRT1.VSON ()
                            }
                            Case (0x00B8FFF2)
                            {
                                ^PRT2.VSON ()
                            }
                            Case (0x00B8FFF3)
                            {
                                ^PRT3.VSON ()
                            }
                            Case (0x00B8FFF4)
                            {
                                ^PRT4.VSON ()
                            }
                            Case (0x00B8FFF5)
                            {
                                ^PRT5.VSON ()
                            }
                            Case (0x00B8FFF6)
                            {
                                ^PRT6.VSON ()
                            }
                            Case (0x00B8FFF7)
                            {
                                ^PRT7.VSON ()
                            }

                        }

                        Local0++
                    }
                }

                Method (VLOF, 2, Serialized)
                {
                    Name (DRVA, Zero)
                    Local1 = Arg0
                    Local0 = Zero
                    While ((Local1 > Local0))
                    {
                        DRVA = ToInteger (DerefOf (Arg1 [Local0]))
                        Switch (ToInteger (DRVA))
                        {
                            Case (0x80E0FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    Zero)))
                                {
                                    If ((HBSL & One))
                                    {
                                        If (D3CV (^RP01.RSPT, ^RP01.RSPI))
                                        {
                                            ^RP03.RL23 ()
                                            PSD3 (^RP03.RSPI)
                                            HBCM (^RP03.RSPI, Zero)
                                        }
                                    }

                                    ^RP01.VPOF ()
                                }
                            }
                            Case (0x80E1FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    One)))
                                {
                                    ^RP02.VPOF ()
                                }
                            }
                            Case (0x80E2FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x02)))
                                {
                                    If ((HBSL & One)) {}
                                    Else
                                    {
                                        ^RP03.VPOF ()
                                    }
                                }
                            }
                            Case (0x80E3FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x03)))
                                {
                                    ^RP04.VPOF ()
                                }
                            }
                            Case (0x80E4FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x04)))
                                {
                                    If ((HBSL & 0x02))
                                    {
                                        If (D3CV (^RP05.RSPT, ^RP05.RSPI))
                                        {
                                            ^RP07.RL23 ()
                                            PSD3 (^RP07.RSPI)
                                            HBCM (^RP07.RSPI, Zero)
                                        }
                                    }

                                    ^RP05.VPOF ()
                                }
                            }
                            Case (0x80E5FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x05)))
                                {
                                    ^RP06.VPOF ()
                                }
                            }
                            Case (0x80E6FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x06)))
                                {
                                    If ((HBSL & 0x02)) {}
                                    Else
                                    {
                                        ^RP07.VPOF ()
                                    }
                                }
                            }
                            Case (0x80E7FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x07)))
                                {
                                    ^RP08.VPOF ()
                                }
                            }
                            Case (0x80E8FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x08)))
                                {
                                    If ((HBSL & 0x04))
                                    {
                                        If (D3CV (^RP09.RSPT, ^RP09.RSPI))
                                        {
                                            ^RP11.RL23 ()
                                            PSD3 (^RP11.RSPI)
                                            HBCM (^RP11.RSPI, Zero)
                                        }
                                    }

                                    ^RP09.VPOF ()
                                }
                            }
                            Case (0x80E9FFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x09)))
                                {
                                    ^RP10.VPOF ()
                                }
                            }
                            Case (0x80EAFFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x0A)))
                                {
                                    If ((HBSL & 0x04)) {}
                                    Else
                                    {
                                        ^RP11.VPOF ()
                                    }
                                }
                            }
                            Case (0x80EBFFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x0B)))
                                {
                                    ^RP12.VPOF ()
                                }
                            }
                            Case (0x80ECFFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x0C)))
                                {
                                    If ((HBSL & 0x08))
                                    {
                                        If (D3CV (^RP13.RSPT, ^RP13.RSPI))
                                        {
                                            ^RP15.RL23 ()
                                            PSD3 (^RP15.RSPI)
                                            HBCM (^RP15.RSPI, Zero)
                                        }
                                    }

                                    ^RP13.VPOF ()
                                }
                            }
                            Case (0x80EDFFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x0D)))
                                {
                                    ^RP14.VPOF ()
                                }
                            }
                            Case (0x80EEFFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x0E)))
                                {
                                    If ((HBSL & 0x08)) {}
                                    Else
                                    {
                                        ^RP15.VPOF ()
                                    }
                                }
                            }
                            Case (0x80EFFFFF)
                            {
                                If ((((HBCL == 0xFF) || (HBCL > 0x02)) || (HBPL != 
                                    0x0F)))
                                {
                                    ^RP16.VPOF ()
                                }
                            }
                            Case (0x80D8FFFF)
                            {
                                If ((HBSL & 0x10))
                                {
                                    If (D3CV (^RP17.RSPT, ^RP17.RSPI))
                                    {
                                        ^RP19.RL23 ()
                                        PSD3 (^RP19.RSPI)
                                        HBCM (^RP19.RSPI, Zero)
                                    }
                                }

                                ^RP17.VPOF ()
                            }
                            Case (0x80D9FFFF)
                            {
                                ^RP18.VPOF ()
                            }
                            Case (0x80DAFFFF)
                            {
                                If ((HBSL & 0x10)) {}
                                Else
                                {
                                    ^RP19.VPOF ()
                                }
                            }
                            Case (0x80DBFFFF)
                            {
                                ^RP20.VPOF ()
                            }
                            Case (0x80DCFFFF)
                            {
                                If ((HBSL & 0x20))
                                {
                                    If (D3CV (^RP21.RSPT, ^RP21.RSPI))
                                    {
                                        ^RP23.RL23 ()
                                        PSD3 (^RP23.RSPI)
                                        HBCM (^RP23.RSPI, Zero)
                                    }
                                }

                                ^RP21.VPOF ()
                            }
                            Case (0x000000080DDAFFFF)
                            {
                                ^RP22.VPOF ()
                            }
                            Case (0x80DEFFFF)
                            {
                                If ((HBSL & 0x20)) {}
                                Else
                                {
                                    ^RP23.VPOF ()
                                }
                            }
                            Case (0x80DFFFFF)
                            {
                                ^RP24.VPOF ()
                            }
                            Case (0x80D0FFFF)
                            {
                                If ((HBSL & 0x40))
                                {
                                    If (D3CV (^RP25.RSPT, ^RP25.RSPI))
                                    {
                                        ^RP27.RL23 ()
                                        PSD3 (^RP27.RSPI)
                                        HBCM (^RP27.RSPI, Zero)
                                    }
                                }

                                ^RP25.VPOF ()
                            }
                            Case (0x80D1FFFF)
                            {
                                ^RP26.VPOF ()
                            }
                            Case (0x80D2FFFF)
                            {
                                If ((HBSL & 0x40)) {}
                                Else
                                {
                                    ^RP27.VPOF ()
                                }
                            }
                            Case (0x80D3FFFF)
                            {
                                ^RP28.VPOF ()
                            }
                            Case (0x8030FFFF)
                            {
                                If (CondRefOf (\HBCL))
                                {
                                    If (((HBCL != 0xFF) && (HBCL == Zero)))
                                    {
                                        If (D3CV (^PEG0.RSPT, ^PEG0.RSPI))
                                        {
                                            PRLD (HBPL)
                                        }
                                    }
                                }

                                ^PEG0.VPOF ()
                            }
                            Case (0x8008FFFF)
                            {
                                If (CondRefOf (\HBCL))
                                {
                                    If (((HBCL != 0xFF) && (HBCL == One)))
                                    {
                                        If (D3CV (^PEG1.RSPT, ^PEG1.RSPI))
                                        {
                                            PRLD (HBPL)
                                        }
                                    }
                                }

                                ^PEG1.VPOF ()
                            }
                            Case (0x8009FFFF)
                            {
                                If (CondRefOf (\HBCL))
                                {
                                    If (((HBCL != 0xFF) && (HBCL == 0x02)))
                                    {
                                        If (D3CV (^PEG2.RSPT, ^PEG2.RSPI))
                                        {
                                            PRLD (HBPL)
                                        }
                                    }
                                }

                                ^PEG2.VPOF ()
                            }
                            Case (0x800AFFFF)
                            {
                                ^PEG3.VPOF ()
                            }
                            Case (0x00B8FFF0)
                            {
                                ^PRT0.VSOF ()
                            }
                            Case (0x00B8FFF1)
                            {
                                ^PRT1.VSOF ()
                            }
                            Case (0x00B8FFF2)
                            {
                                ^PRT2.VSOF ()
                            }
                            Case (0x00B8FFF3)
                            {
                                ^PRT3.VSOF ()
                            }
                            Case (0x00B8FFF4)
                            {
                                ^PRT4.VSOF ()
                            }
                            Case (0x00B8FFF5)
                            {
                                ^PRT5.VSOF ()
                            }
                            Case (0x00B8FFF6)
                            {
                                ^PRT6.VSOF ()
                            }
                            Case (0x00B8FFF7)
                            {
                                ^PRT7.VSOF ()
                            }

                        }

                        Local0++
                    }
                }

                Method (IVRM, 1, NotSerialized)
                {
                    Local0 = Zero
                    While ((VV0S > Local0))
                    {
                        If ((Arg0 == ToInteger (DerefOf (VV0D [Local0]))))
                        {
                            Return (One)
                        }

                        Local0++
                    }

                    Local0 = Zero
                    While ((VV1S > Local0))
                    {
                        If ((Arg0 == ToInteger (DerefOf (VV1D [Local0]))))
                        {
                            Return (One)
                        }

                        Local0++
                    }

                    Local0 = Zero
                    While ((VV2S > Local0))
                    {
                        If ((Arg0 == ToInteger (DerefOf (VV2D [Local0]))))
                        {
                            Return (One)
                        }

                        Local0++
                    }

                    Local0 = Zero
                    While ((VV3S > Local0))
                    {
                        If ((Arg0 == ToInteger (DerefOf (VV3D [Local0]))))
                        {
                            Return (One)
                        }

                        Local0++
                    }

                    Return (Zero)
                }

                Method (VD3C, 1, NotSerialized)
                {
                    Return ((VD3A && IVRM (Arg0)))
                }

                Device (VOL0)
                {
                    Name (_ADR, 0x0080FFFF)  // _ADR: Address
                    If ((CondRefOf (\RTD3) && CondRefOf (\STD3)))
                    {
                        If (((RTD3 != Zero) && (STD3 == 0x02)))
                        {
                            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                            {
                                Return (Package (0x01)
                                {
                                    V0PR
                                })
                            }

                            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                            {
                                Return (Package (0x01)
                                {
                                    V0PR
                                })
                            }
                        }
                    }

                    If ((CondRefOf (\RTD3) && CondRefOf (\STD3)))
                    {
                        If (((RTD3 != Zero) && (STD3 == 0x02)))
                        {
                            PowerResource (V0PR, 0x04, 0x0000)
                            {
                                Name (_STA, One)  // _STA: Status
                                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                                {
                                    If (VD3A)
                                    {
                                        VLON (VV0S, VV0D)
                                        _STA = One
                                    }
                                    Else
                                    {
                                    }
                                }

                                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                                {
                                    If (VD3A)
                                    {
                                        VLOF (VV0S, VV0D)
                                        _STA = Zero
                                    }
                                    Else
                                    {
                                    }
                                }
                            }
                        }
                    }
                }

                Device (VOL1)
                {
                    Name (_ADR, 0x0081FFFF)  // _ADR: Address
                    If ((CondRefOf (\RTD3) && CondRefOf (\STD3)))
                    {
                        If (((RTD3 != Zero) && (STD3 == 0x02)))
                        {
                            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                            {
                                Return (Package (0x01)
                                {
                                    V1PR
                                })
                            }

                            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                            {
                                Return (Package (0x01)
                                {
                                    V1PR
                                })
                            }
                        }
                    }

                    If ((CondRefOf (\RTD3) && CondRefOf (\STD3)))
                    {
                        If (((RTD3 != Zero) && (STD3 == 0x02)))
                        {
                            PowerResource (V1PR, 0x04, 0x0000)
                            {
                                Name (_STA, One)  // _STA: Status
                                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                                {
                                    If (VD3A)
                                    {
                                        VLON (VV1S, VV1D)
                                        _STA = One
                                    }
                                    Else
                                    {
                                    }
                                }

                                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                                {
                                    If (VD3A)
                                    {
                                        VLOF (VV1S, VV1D)
                                        _STA = Zero
                                    }
                                    Else
                                    {
                                    }
                                }
                            }
                        }
                    }
                }

                Device (VOL2)
                {
                    Name (_ADR, 0x0082FFFF)  // _ADR: Address
                    If ((CondRefOf (\RTD3) && CondRefOf (\STD3)))
                    {
                        If (((RTD3 != Zero) && (STD3 == 0x02)))
                        {
                            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                            {
                                Return (Package (0x01)
                                {
                                    V2PR
                                })
                            }

                            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                            {
                                Return (Package (0x01)
                                {
                                    V2PR
                                })
                            }
                        }
                    }

                    If ((CondRefOf (\RTD3) && CondRefOf (\STD3)))
                    {
                        If (((RTD3 != Zero) && (STD3 == 0x02)))
                        {
                            PowerResource (V2PR, 0x04, 0x0000)
                            {
                                Name (_STA, One)  // _STA: Status
                                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                                {
                                    If (VD3A)
                                    {
                                        VLON (VV2S, VV2D)
                                        _STA = One
                                    }
                                    Else
                                    {
                                    }
                                }

                                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                                {
                                    If (VD3A)
                                    {
                                        VLOF (VV2S, VV2D)
                                        _STA = Zero
                                    }
                                    Else
                                    {
                                    }
                                }
                            }
                        }
                    }
                }

                Device (VOL3)
                {
                    Name (_ADR, 0x0083FFFF)  // _ADR: Address
                    If ((CondRefOf (\RTD3) && CondRefOf (\STD3)))
                    {
                        If (((RTD3 != Zero) && (STD3 == 0x02)))
                        {
                            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                            {
                                Return (Package (0x01)
                                {
                                    V3PR
                                })
                            }

                            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                            {
                                Return (Package (0x01)
                                {
                                    V3PR
                                })
                            }
                        }
                    }

                    If ((CondRefOf (\RTD3) && CondRefOf (\STD3)))
                    {
                        If (((RTD3 != Zero) && (STD3 == 0x02)))
                        {
                            PowerResource (V3PR, 0x04, 0x0000)
                            {
                                Name (_STA, One)  // _STA: Status
                                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                                {
                                    If (VD3A)
                                    {
                                        VLON (VV3S, VV3D)
                                        _STA = One
                                    }
                                    Else
                                    {
                                    }
                                }

                                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                                {
                                    If (VD3A)
                                    {
                                        VLOF (VV3S, VV3D)
                                        _STA = Zero
                                    }
                                    Else
                                    {
                                    }
                                }
                            }
                        }
                    }
                }

                Method (D3CV, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT0.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT1.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT2.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT3.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT4.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT5.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT6.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT7.SPOF))
                                    {
                                        Return (One)
                                    }
                                }

                            }
                        }
                        Case (One)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.RP01.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.RP02.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.RP03.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.RP04.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.RP05.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.RP06.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.RP07.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.RP08.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (\_SB.PC00.RP09.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (\_SB.PC00.RP10.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP11.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP12.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0C)
                                {
                                    If (CondRefOf (\_SB.PC00.RP13.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0D)
                                {
                                    If (CondRefOf (\_SB.PC00.RP14.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0E)
                                {
                                    If (CondRefOf (\_SB.PC00.RP15.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0F)
                                {
                                    If (CondRefOf (\_SB.PC00.RP16.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x10)
                                {
                                    If (CondRefOf (\_SB.PC00.RP17.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x11)
                                {
                                    If (CondRefOf (\_SB.PC00.RP18.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x12)
                                {
                                    If (CondRefOf (\_SB.PC00.RP19.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x13)
                                {
                                    If (CondRefOf (\_SB.PC00.RP20.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x14)
                                {
                                    If (CondRefOf (\_SB.PC00.RP21.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x15)
                                {
                                    If (CondRefOf (\_SB.PC00.RP22.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x16)
                                {
                                    If (CondRefOf (\_SB.PC00.RP23.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x17)
                                {
                                    If (CondRefOf (\_SB.PC00.RP24.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x18)
                                {
                                    If (CondRefOf (\_SB.PC00.RP25.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x19)
                                {
                                    If (CondRefOf (\_SB.PC00.RP26.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x1A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP27.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x1B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP28.POFF))
                                    {
                                        Return (One)
                                    }
                                }

                            }
                        }
                        Case (0x02)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG0.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG1.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG2.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG3.POFF))
                                    {
                                        Return (One)
                                    }
                                }

                            }
                        }

                    }

                    Return (Zero)
                }

                Method (VDON, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT0.SPON))
                                    {
                                        ^^SAT0.PRT0.SPON ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT1.SPON))
                                    {
                                        ^^SAT0.PRT1.SPON ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT2.SPON))
                                    {
                                        ^^SAT0.PRT2.SPON ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT3.SPON))
                                    {
                                        ^^SAT0.PRT3.SPON ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT4.SPON))
                                    {
                                        ^^SAT0.PRT4.SPON ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT5.SPON))
                                    {
                                        ^^SAT0.PRT5.SPON ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT6.SPON))
                                    {
                                        ^^SAT0.PRT6.SPON ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT7.SPON))
                                    {
                                        ^^SAT0.PRT7.SPON ()
                                    }
                                }

                            }
                        }
                        Case (One)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.RP01.PON))
                                    {
                                        ^^RP01.PON ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.RP02.PON))
                                    {
                                        ^^RP02.PON ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.RP03.PON))
                                    {
                                        ^^RP03.PON ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.RP04.PON))
                                    {
                                        ^^RP04.PON ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.RP05.PON))
                                    {
                                        ^^RP05.PON ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.RP06.PON))
                                    {
                                        ^^RP06.PON ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.RP07.PON))
                                    {
                                        ^^RP07.PON ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.RP08.PON))
                                    {
                                        ^^RP08.PON ()
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (\_SB.PC00.RP09.PON))
                                    {
                                        ^^RP09.PON ()
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (\_SB.PC00.RP10.PON))
                                    {
                                        ^^RP10.PON ()
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP11.PON))
                                    {
                                        ^^RP11.PON ()
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP12.PON))
                                    {
                                        ^^RP12.PON ()
                                    }
                                }
                                Case (0x0C)
                                {
                                    If (CondRefOf (\_SB.PC00.RP13.PON))
                                    {
                                        ^^RP13.PON ()
                                    }
                                }
                                Case (0x0D)
                                {
                                    If (CondRefOf (\_SB.PC00.RP14.PON))
                                    {
                                        ^^RP14.PON ()
                                    }
                                }
                                Case (0x0E)
                                {
                                    If (CondRefOf (\_SB.PC00.RP15.PON))
                                    {
                                        ^^RP15.PON ()
                                    }
                                }
                                Case (0x0F)
                                {
                                    If (CondRefOf (\_SB.PC00.RP16.PON))
                                    {
                                        ^^RP16.PON ()
                                    }
                                }
                                Case (0x10)
                                {
                                    If (CondRefOf (\_SB.PC00.RP17.PON))
                                    {
                                        ^^RP17.PON ()
                                    }
                                }
                                Case (0x11)
                                {
                                    If (CondRefOf (\_SB.PC00.RP18.PON))
                                    {
                                        ^^RP18.PON ()
                                    }
                                }
                                Case (0x12)
                                {
                                    If (CondRefOf (\_SB.PC00.RP19.PON))
                                    {
                                        ^^RP19.PON ()
                                    }
                                }
                                Case (0x13)
                                {
                                    If (CondRefOf (\_SB.PC00.RP20.PON))
                                    {
                                        ^^RP20.PON ()
                                    }
                                }
                                Case (0x14)
                                {
                                    If (CondRefOf (\_SB.PC00.RP21.PON))
                                    {
                                        ^^RP21.PON ()
                                    }
                                }
                                Case (0x15)
                                {
                                    If (CondRefOf (\_SB.PC00.RP22.PON))
                                    {
                                        ^^RP22.PON ()
                                    }
                                }
                                Case (0x16)
                                {
                                    If (CondRefOf (\_SB.PC00.RP23.PON))
                                    {
                                        ^^RP23.PON ()
                                    }
                                }
                                Case (0x17)
                                {
                                    If (CondRefOf (\_SB.PC00.RP24.PON))
                                    {
                                        ^^RP24.PON ()
                                    }
                                }
                                Case (0x18)
                                {
                                    If (CondRefOf (\_SB.PC00.RP25.PON))
                                    {
                                        ^^RP25.PON ()
                                    }
                                }
                                Case (0x19)
                                {
                                    If (CondRefOf (\_SB.PC00.RP26.PON))
                                    {
                                        ^^RP26.PON ()
                                    }
                                }
                                Case (0x1A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP27.PON))
                                    {
                                        ^^RP27.PON ()
                                    }
                                }
                                Case (0x1B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP28.PON))
                                    {
                                        ^^RP28.PON ()
                                    }
                                }

                            }
                        }
                        Case (0x02)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG0.PON))
                                    {
                                        ^^PEG0.PON ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG1.PON))
                                    {
                                        ^^PEG1.PON ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG2.PON))
                                    {
                                        ^^PEG2.PON ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG3.PON))
                                    {
                                        ^^PEG3.PON ()
                                    }
                                }

                            }
                        }

                    }
                }

                Method (VDOF, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT0.SPOF))
                                    {
                                        ^^SAT0.PRT0.SPOF ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT1.SPOF))
                                    {
                                        ^^SAT0.PRT1.SPOF ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT2.SPOF))
                                    {
                                        ^^SAT0.PRT2.SPOF ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT3.SPOF))
                                    {
                                        ^^SAT0.PRT3.SPOF ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT4.SPOF))
                                    {
                                        ^^SAT0.PRT4.SPOF ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT5.SPOF))
                                    {
                                        ^^SAT0.PRT5.SPOF ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT6.SPOF))
                                    {
                                        ^^SAT0.PRT6.SPOF ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT7.SPOF))
                                    {
                                        ^^SAT0.PRT7.SPOF ()
                                    }
                                }

                            }
                        }
                        Case (One)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.RP01.POFF))
                                    {
                                        ^^RP01.POFF ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.RP02.POFF))
                                    {
                                        ^^RP02.POFF ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.RP03.POFF))
                                    {
                                        ^^RP03.POFF ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.RP04.POFF))
                                    {
                                        ^^RP04.POFF ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.RP05.POFF))
                                    {
                                        ^^RP05.POFF ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.RP06.POFF))
                                    {
                                        ^^RP06.POFF ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.RP07.POFF))
                                    {
                                        ^^RP07.POFF ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.RP08.POFF))
                                    {
                                        ^^RP08.POFF ()
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (\_SB.PC00.RP09.POFF))
                                    {
                                        ^^RP09.POFF ()
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (\_SB.PC00.RP10.POFF))
                                    {
                                        ^^RP10.POFF ()
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP11.POFF))
                                    {
                                        ^^RP11.POFF ()
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP12.POFF))
                                    {
                                        ^^RP12.POFF ()
                                    }
                                }
                                Case (0x0C)
                                {
                                    If (CondRefOf (\_SB.PC00.RP13.POFF))
                                    {
                                        ^^RP13.POFF ()
                                    }
                                }
                                Case (0x0D)
                                {
                                    If (CondRefOf (\_SB.PC00.RP14.POFF))
                                    {
                                        ^^RP14.POFF ()
                                    }
                                }
                                Case (0x0E)
                                {
                                    If (CondRefOf (\_SB.PC00.RP15.POFF))
                                    {
                                        ^^RP15.POFF ()
                                    }
                                }
                                Case (0x0F)
                                {
                                    If (CondRefOf (\_SB.PC00.RP16.POFF))
                                    {
                                        ^^RP16.POFF ()
                                    }
                                }
                                Case (0x10)
                                {
                                    If (CondRefOf (\_SB.PC00.RP17.POFF))
                                    {
                                        ^^RP17.POFF ()
                                    }
                                }
                                Case (0x11)
                                {
                                    If (CondRefOf (\_SB.PC00.RP18.POFF))
                                    {
                                        ^^RP18.POFF ()
                                    }
                                }
                                Case (0x12)
                                {
                                    If (CondRefOf (\_SB.PC00.RP19.POFF))
                                    {
                                        ^^RP19.POFF ()
                                    }
                                }
                                Case (0x13)
                                {
                                    If (CondRefOf (\_SB.PC00.RP20.POFF))
                                    {
                                        ^^RP20.POFF ()
                                    }
                                }
                                Case (0x14)
                                {
                                    If (CondRefOf (\_SB.PC00.RP21.POFF))
                                    {
                                        ^^RP21.POFF ()
                                    }
                                }
                                Case (0x15)
                                {
                                    If (CondRefOf (\_SB.PC00.RP22.POFF))
                                    {
                                        ^^RP22.POFF ()
                                    }
                                }
                                Case (0x16)
                                {
                                    If (CondRefOf (\_SB.PC00.RP23.POFF))
                                    {
                                        ^^RP23.POFF ()
                                    }
                                }
                                Case (0x17)
                                {
                                    If (CondRefOf (\_SB.PC00.RP24.POFF))
                                    {
                                        ^^RP24.POFF ()
                                    }
                                }
                                Case (0x18)
                                {
                                    If (CondRefOf (\_SB.PC00.RP25.POFF))
                                    {
                                        ^^RP25.POFF ()
                                    }
                                }
                                Case (0x19)
                                {
                                    If (CondRefOf (\_SB.PC00.RP26.POFF))
                                    {
                                        ^^RP26.POFF ()
                                    }
                                }
                                Case (0x1A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP27.POFF))
                                    {
                                        ^^RP27.POFF ()
                                    }
                                }
                                Case (0x1B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP28.POFF))
                                    {
                                        ^^RP28.POFF ()
                                    }
                                }

                            }
                        }
                        Case (0x02)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG0.POFF))
                                    {
                                        ^^PEG0.POFF ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG1.POFF))
                                    {
                                        ^^PEG1.POFF ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG2.POFF))
                                    {
                                        ^^PEG2.POFF ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG3.POFF))
                                    {
                                        ^^PEG3.POFF ()
                                    }
                                }

                            }
                        }

                    }
                }
            }
        }
    }

    Scope (_SB.PC00.RP01)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((PSW3 != Zero) && (RPN3 == One)))
            {
                Return (GPRW (GGPE (PSW3), 0x04))
            }
            ElseIf (((PSW2 != Zero) && (RPN2 == One)))
            {
                Return (GPRW (GGPE (PSW2), 0x04))
            }
            ElseIf (((WWKP != Zero) && (WWRP == One)))
            {
                Return (GPRW (GGPE (WWKP), 0x04))
            }
            Else
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP02)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((WWKP != Zero) && (WWRP == 0x02)))
            {
                Return (GPRW (GGPE (WWKP), 0x04))
            }
            Else
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP03)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((WWKP != Zero) && (WWRP == 0x03)))
            {
                Return (GPRW (GGPE (WWKP), 0x04))
            }
            Else
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP04)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((WLWK != Zero) && (WLRP == 0x04)))
            {
                Return (GPRW (GGPE (WLWK), 0x04))
            }
            ElseIf (((WWKP != Zero) && (WWRP == 0x04)))
            {
                Return (GPRW (GGPE (WWKP), 0x04))
            }
            Else
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP05)
    {
        Method (XPRW, 0, NotSerialized)
        {
            If ((((PSW3 != Zero) && (RPN3 == 0x05)) || (
                (WLWK != Zero) && (WLRP == 0x05))))
            {
                If (((PSW3 != Zero) && (RPN3 == 0x05)))
                {
                    Return (GPRW (GGPE (PSW3), 0x04))
                }
                ElseIf (((WLWK != Zero) && (WLRP == 0x05)))
                {
                    Return (GPRW (GGPE (WLWK), 0x04))
                }
                Else
                {
                    Return (GPRW (0x69, 0x04))
                }
            }
            ElseIf (((PSW2 != Zero) && (RPN2 == 0x05)))
            {
                Return (GPRW (GGPE (PSW2), 0x04))
            }
            Else
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP06)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((WWKP != Zero) && (WWRP == 0x06)))
            {
                Return (GPRW (GGPE (WWKP), 0x04))
            }
            Else
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP07)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((PSWP != Zero) && (RPNB == 0x07)))
            {
                Return (GPRW (GGPE (PSWP), 0x04))
            }
            ElseIf (((FVSP == One) && ((FVWP != Zero) && (
                RPFV == 0x07))))
            {
                Return (GPRW (GGPE (FVWP), 0x04))
            }
            Else
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP08)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((WLWK != Zero) && (WLRP == 0x08)))
            {
                Return (GPRW (GGPE (WLWK), 0x04))
            }
            ElseIf (((PSWP != Zero) && (RPNB == 0x08)))
            {
                Return (GPRW (GGPE (PSWP), 0x04))
            }
            Else
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP09)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((PSW2 != Zero) && (RPN2 == 0x09)))
            {
                Return (GPRW (GGPE (PSW2), 0x04))
            }
            ElseIf (((PSW3 != Zero) && (RPN3 == 0x09)))
            {
                Return (GPRW (GGPE (PSW3), 0x04))
            }
            ElseIf (((PSWP != Zero) && (RPNB == 0x09)))
            {
                Return (GPRW (GGPE (PSWP), 0x04))
            }
            ElseIf (((OMW1 != Zero) && (RPO1 == 0x09)))
            {
                Return (GPRW (GGPE (OMW1), 0x04))
            }
            Else
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP10)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((WLWK != Zero) && (WLRP == 0x0A)))
            {
                Return (GPRW (GGPE (WLWK), 0x04))
            }
            Else
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP11)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP12)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP13)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((PSWP != Zero) && (RPNB == 0x0D)))
            {
                Return (GPRW (GGPE (PSWP), 0x04))
            }
            Else
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP14)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP15)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP16)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP17)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP18)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP19)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP20)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP21)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((PSWP != Zero) && (RPNB == 0x15)))
            {
                Return (GPRW (GGPE (PSWP), 0x04))
            }
            Else
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP22)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP23)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP24)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP25)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((PSW2 != Zero) && (RPN2 == 0x19)))
            {
                Return (GPRW (GGPE (PSW2), 0x04))
            }
            ElseIf (((OMW1 != Zero) && (RPO1 == 0x19)))
            {
                Return (GPRW (GGPE (OMW1), 0x04))
            }
            Else
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP26)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP27)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP28)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    If ((WFFD == One))
    {
        Scope (_SB)
        {
            Method (WFRT, 3, Serialized)
            {
                Local0 = Acquire (WWMT, 0x03E8)
                If ((Local0 == Zero))
                {
                    Local0 = One
                    If ((WWRP == One))
                    {
                        If ((Arg0 == Zero)) {}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP01.PXSX.FHRF))
                        {
                            ^PC00.RP01.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP01.PXSX, One) // Device Check
                        If (CondRefOf (\_SB.PC00.RP01.PXSX.SHRF))
                        {
                            ^PC00.RP01.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP01.PXSX, One) // Device Check
                        Release (WWMT)
                        Local0 = Zero
                        If (CondRefOf (\_SB.PC00.RP01.PXSX.DOSV))
                        {
                            ^PC00.RP01.PXSX.DOSV ()
                        }
                    }

                    If ((Local0 == One))
                    {
                        Release (WWMT)
                    }
                }
            }

            Device (MFFD)
            {
                Name (_HID, "INTC1073")  // _HID: Hardware ID
                Name (_STR, Unicode ("Modem Firmware Flash Device"))  // _STR: Description String
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((WFFD == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("0f3d57aa-6046-47b2-8a9a-88f1021d3865") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            WFRT (Zero, DerefOf (Arg3 [Zero]), DerefOf (Arg3 [One]))
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        If ((Arg2 == 0x02))
                        {
                            WFRT (One, DerefOf (Arg3 [Zero]), DerefOf (Arg3 [One]))
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Return (Zero)
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If ((S0ID == Zero))
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            0x05, 
            Zero, 
            Zero
        })
    }

    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        0x06, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        0x07, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0) {}
    }

    Method (WAK, 1, NotSerialized)
    {
    }

    Scope (_SB.PC00.SAT0)
    {
        Method (SATC, 1, Serialized)
        {
            If ((Arg0 == ToUUID ("e4db149b-fcfe-425b-a6d8-92357d78fc7f") /* SATA Controller */))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (SATD, 4, Serialized)
        {
            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Default
                {
                    Return (Zero)
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        If (((S0ID == One) && (PUIS == One)))
        {
            Scope (PRT0)
            {
                Name (GTF0, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                })
                Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                {
                    CreateByteField (GTF0, Zero, FEAT)
                    CreateByteField (GTF0, 0x06, CMMD)
                    CreateWordField (Arg0, 0xA6, W083)
                    CreateWordField (Arg0, 0xAC, W086)
                    If ((SizeOf (Arg0) == 0x0200))
                    {
                        If (((W083 & 0x20) == 0x20))
                        {
                            If (((W086 & 0x20) == Zero))
                            {
                                FEAT = 0x06
                                CMMD = 0xEF
                            }
                        }
                    }
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Return (GTF0) /* \_SB_.PC00.SAT0.PRT0.GTF0 */
                }
            }

            Scope (PRT1)
            {
                Name (GTF0, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                })
                Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                {
                    CreateByteField (GTF0, Zero, FEAT)
                    CreateByteField (GTF0, 0x06, CMMD)
                    CreateWordField (Arg0, 0xA6, W083)
                    CreateWordField (Arg0, 0xAC, W086)
                    If ((SizeOf (Arg0) == 0x0200))
                    {
                        If (((W083 & 0x20) == 0x20))
                        {
                            If (((W086 & 0x20) == Zero))
                            {
                                FEAT = 0x06
                                CMMD = 0xEF
                            }
                        }
                    }
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Return (GTF0) /* \_SB_.PC00.SAT0.PRT1.GTF0 */
                }
            }

            Scope (PRT2)
            {
                Name (GTF0, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                })
                Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                {
                    CreateByteField (GTF0, Zero, FEAT)
                    CreateByteField (GTF0, 0x06, CMMD)
                    CreateWordField (Arg0, 0xA6, W083)
                    CreateWordField (Arg0, 0xAC, W086)
                    If ((SizeOf (Arg0) == 0x0200))
                    {
                        If (((W083 & 0x20) == 0x20))
                        {
                            If (((W086 & 0x20) == Zero))
                            {
                                FEAT = 0x06
                                CMMD = 0xEF
                            }
                        }
                    }
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Return (GTF0) /* \_SB_.PC00.SAT0.PRT2.GTF0 */
                }
            }

            Scope (PRT3)
            {
                Name (GTF0, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                })
                Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                {
                    CreateByteField (GTF0, Zero, FEAT)
                    CreateByteField (GTF0, 0x06, CMMD)
                    CreateWordField (Arg0, 0xA6, W083)
                    CreateWordField (Arg0, 0xAC, W086)
                    If ((SizeOf (Arg0) == 0x0200))
                    {
                        If (((W083 & 0x20) == 0x20))
                        {
                            If (((W086 & 0x20) == Zero))
                            {
                                FEAT = 0x06
                                CMMD = 0xEF
                            }
                        }
                    }
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Return (GTF0) /* \_SB_.PC00.SAT0.PRT3.GTF0 */
                }
            }

            Scope (PRT4)
            {
                Name (GTF0, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                })
                Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                {
                    CreateByteField (GTF0, Zero, FEAT)
                    CreateByteField (GTF0, 0x06, CMMD)
                    CreateWordField (Arg0, 0xA6, W083)
                    CreateWordField (Arg0, 0xAC, W086)
                    If ((SizeOf (Arg0) == 0x0200))
                    {
                        If (((W083 & 0x20) == 0x20))
                        {
                            If (((W086 & 0x20) == Zero))
                            {
                                FEAT = 0x06
                                CMMD = 0xEF
                            }
                        }
                    }
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Return (GTF0) /* \_SB_.PC00.SAT0.PRT4.GTF0 */
                }
            }

            Scope (PRT5)
            {
                Name (GTF0, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                })
                Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                {
                    CreateByteField (GTF0, Zero, FEAT)
                    CreateByteField (GTF0, 0x06, CMMD)
                    CreateWordField (Arg0, 0xA6, W083)
                    CreateWordField (Arg0, 0xAC, W086)
                    If ((SizeOf (Arg0) == 0x0200))
                    {
                        If (((W083 & 0x20) == 0x20))
                        {
                            If (((W086 & 0x20) == Zero))
                            {
                                FEAT = 0x06
                                CMMD = 0xEF
                            }
                        }
                    }
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Return (GTF0) /* \_SB_.PC00.SAT0.PRT5.GTF0 */
                }
            }

            If (CondRefOf (PRT6))
            {
                Scope (PRT6)
                {
                    Name (GTF0, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                    })
                    Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                    {
                        CreateByteField (GTF0, Zero, FEAT)
                        CreateByteField (GTF0, 0x06, CMMD)
                        CreateWordField (Arg0, 0xA6, W083)
                        CreateWordField (Arg0, 0xAC, W086)
                        If ((SizeOf (Arg0) == 0x0200))
                        {
                            If (((W083 & 0x20) == 0x20))
                            {
                                If (((W086 & 0x20) == Zero))
                                {
                                    FEAT = 0x06
                                    CMMD = 0xEF
                                }
                            }
                        }
                    }

                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (GTF0) /* \_SB_.PC00.SAT0.PRT6.GTF0 */
                    }
                }
            }

            If (CondRefOf (PRT7))
            {
                Scope (PRT7)
                {
                    Name (GTF0, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                    })
                    Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                    {
                        CreateByteField (GTF0, Zero, FEAT)
                        CreateByteField (GTF0, 0x06, CMMD)
                        CreateWordField (Arg0, 0xA6, W083)
                        CreateWordField (Arg0, 0xAC, W086)
                        If ((SizeOf (Arg0) == 0x0200))
                        {
                            If (((W083 & 0x20) == 0x20))
                            {
                                If (((W086 & 0x20) == Zero))
                                {
                                    FEAT = 0x06
                                    CMMD = 0xEF
                                }
                            }
                        }
                    }

                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (GTF0) /* \_SB_.PC00.SAT0.PRT7.GTF0 */
                    }
                }
            }
        }
    }

    Scope (\)
    {
        Field (GNVS, AnyAcc, Lock, Preserve)
        {
            Offset (0x1F), 
            B0SC,   8, 
            B1SC,   8, 
            B2SC,   8, 
            B0SS,   8, 
            B1SS,   8, 
            B2SS,   8
        }
    }

    OperationRegion (MNVS, SystemMemory, 0x936AB018, 0x2000)
    Field (MNVS, DWordAcc, NoLock, Preserve)
    {
        Offset (0xD00), 
        GAPA,   32, 
        GAPL,   32, 
        DCKI,   32, 
        DCKS,   32, 
        VCDL,   1, 
        VCDC,   1, 
        VCDT,   1, 
        VCDD,   1, 
            ,   1, 
        VCSS,   1, 
        VCDB,   1, 
        VCIN,   1, 
        VVPO,   8, 
        BNTN,   8, 
        BRLV,   8, 
        CDFL,   8, 
        CDAH,   8, 
        PMOD,   2, 
        PDIR,   1, 
        PDMA,   1, 
        Offset (0xD17), 
        LFDC,   1, 
        Offset (0xD18), 
        C2NA,   1, 
        C3NA,   1, 
        C4NA,   1, 
        C6NA,   1, 
        C7NA,   1, 
        Offset (0xD19), 
        Offset (0xD1A), 
            ,   2, 
            ,   1, 
        NHPS,   1, 
        NPMS,   1, 
        Offset (0xD1B), 
        UOPT,   8, 
        BTID,   32, 
        DPP0,   1, 
        DPP1,   1, 
        DPP2,   1, 
        DPP3,   1, 
        DPP4,   1, 
        DPP5,   1, 
        Offset (0xD21), 
        Offset (0xD22), 
        TCRT,   16, 
        TPSV,   16, 
        TTC1,   16, 
        TTC2,   16, 
        TTSP,   16, 
        SRAH,   8, 
        SRHE,   8, 
        SRE1,   8, 
        SRE2,   8, 
        SRE3,   8, 
        SRE4,   8, 
        SRE5,   8, 
        SRE6,   8, 
        SRU1,   8, 
        SRU2,   8, 
        SRU3,   8, 
        SRU7,   8, 
        SRU4,   8, 
        SRU5,   8, 
        SRU8,   8, 
        SRPB,   8, 
        SRLP,   8, 
        SRSA,   8, 
        SRSM,   8, 
        CWAC,   1, 
        CWAS,   1, 
        CWUE,   1, 
        CWUS,   1, 
        Offset (0xD40), 
        CWAP,   16, 
        CWAT,   16, 
        DBGC,   1, 
        Offset (0xD45), 
        FS1L,   16, 
        FS1M,   16, 
        FS1H,   16, 
        FS2L,   16, 
        FS2M,   16, 
        FS2H,   16, 
        FS3L,   16, 
        FS3M,   16, 
        FS3H,   16, 
        TATC,   1, 
            ,   6, 
        TATL,   1, 
        TATW,   8, 
        TNFT,   4, 
        TNTT,   4, 
        TDFA,   4, 
        TDTA,   4, 
        TDFD,   4, 
        TDTD,   4, 
        TCFA,   4, 
        TCTA,   4, 
        TCFD,   4, 
        TCTD,   4, 
        TSFT,   4, 
        TSTT,   4, 
        TIT0,   8, 
        TCR0,   16, 
        TPS0,   16, 
        TIT1,   8, 
        TCR1,   16, 
        TPS1,   16, 
        TIT2,   8, 
        TCR2,   16, 
        TPS2,   16, 
        TIF0,   8, 
        TIF1,   8, 
        TIF2,   8, 
        Offset (0xD78), 
        BTHI,   1, 
        Offset (0xD79), 
        HDIR,   1, 
        HDEH,   1, 
        HDSP,   1, 
        HDPP,   1, 
        HDUB,   1, 
        HDMC,   1, 
        NFCF,   1, 
        HPDF,   1, 
        TPME,   8, 
        BIDE,   4, 
        IDET,   4, 
            ,   1, 
            ,   1, 
        Offset (0xD7D), 
        DTS0,   8, 
        Offset (0xD7F), 
        DT00,   1, 
        DT01,   1, 
        DT02,   1, 
        DT03,   1, 
        Offset (0xD80), 
        LIDB,   1, 
        C4WR,   1, 
        C4AC,   1, 
        ODDX,   1, 
        CMPR,   1, 
        ILNF,   1, 
        PLUX,   1, 
        Offset (0xD81), 
        Offset (0xD8A), 
        WLAC,   8, 
        WIWK,   1, 
        Offset (0xD8C), 
            ,   4, 
            ,   1, 
        IDMM,   1, 
        Offset (0xD8D), 
            ,   3, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0xD8E), 
        Offset (0xD8F), 
            ,   4, 
        Offset (0xD90), 
        Offset (0xD91), 
        SWGP,   8, 
        IPMS,   8, 
        IPMB,   120, 
        IPMR,   24, 
        IPMO,   24, 
        IPMA,   8, 
        VIGD,   1, 
        VDSC,   1, 
        VMSH,   1, 
            ,   1, 
        VDSP,   1, 
        Offset (0xDAA), 
        Offset (0xDAD), 
        ASFT,   8, 
        PL1L,   8, 
        PL1M,   8, 
        CHKC,   32, 
        CHKE,   32, 
        ATRB,   32, 
        Offset (0xDBD), 
        PPCR,   8, 
        TPCR,   5, 
        Offset (0xDBF), 
        Offset (0xDCE), 
        CTPR,   8, 
        PPCA,   8, 
        TPCA,   5, 
        Offset (0xDD1), 
        BFWB,   296, 
        OSPX,   1, 
        OSC4,   1, 
        CPPX,   1, 
        Offset (0xDF7), 
        SPEN,   1, 
        SCRM,   1, 
            ,   1, 
        ETAU,   1, 
        IHBC,   1, 
        APMD,   1, 
        APMF,   1, 
        Offset (0xDF8), 
        FTPS,   8, 
        HIST,   8, 
        LPST,   8, 
        LWST,   8, 
        Offset (0xDFF), 
        Offset (0xE00), 
        Offset (0xE20), 
        HPET,   32, 
        PKLI,   16, 
        VLCX,   16, 
        VNIT,   8, 
        VBD0,   8, 
        VBDT,   128, 
        VBPL,   16, 
        VBPH,   16, 
        VBML,   8, 
        VBMH,   8, 
        VEDI,   1024, 
        PDCI,   16, 
        ISCG,   32, 
        ISSP,   1, 
        ISWK,   2, 
        ISFS,   3, 
        Offset (0xEC7), 
        SHA1,   160, 
        Offset (0xEDC), 
        LWCP,   1, 
        LWEN,   1, 
        IOCP,   1, 
        IOEN,   1, 
        IOST,   1, 
        Offset (0xEDD), 
        USBR,   1, 
        Offset (0xEDE), 
        Offset (0xEDF), 
        Offset (0xEE1), 
        BT2T,   1, 
        Offset (0xEE2), 
        TPPP,   8, 
        TPPC,   8, 
        CTPC,   8, 
        FNWK,   8, 
        Offset (0xEE7), 
        XHCC,   8, 
        FCAP,   16, 
        VSTD,   1, 
        VCQL,   1, 
        VTIO,   1, 
        VMYH,   1, 
        VSTP,   1, 
        VLCM,   1, 
        VDGM,   1, 
        VADM,   1, 
        VDMC,   1, 
        VTMS,   1, 
        VDLS,   1, 
        VMMC,   1, 
        VMSC,   1, 
        VPSC,   1, 
        VCSC,   1, 
        VAMT,   1, 
        CICF,   4, 
        CICM,   4, 
        MYHC,   8, 
        MMCC,   8, 
        PT1D,   15, 
        Offset (0xEF1), 
        PT2D,   15, 
        Offset (0xEF3), 
        PT0D,   15, 
        Offset (0xEF5), 
        DVS0,   1, 
        DVS1,   1, 
        DVS2,   1, 
        DVS3,   1, 
        Offset (0xEF7), 
        Offset (0xF13), 
        Offset (0xF14), 
            ,   4, 
        SADM,   4, 
        SMYH,   4, 
        SMMC,   4, 
        SPSC,   4, 
        SAMT,   4, 
        STDV,   8, 
        SCRB,   8, 
        PMOF,   8, 
        MPID,   8, 
        VEDX,   1024, 
        SHDW,   8, 
        TPID,   16, 
        TPDD,   8, 
        TDVI,   16, 
        TDPI,   16, 
        TLVI,   16, 
        TLPI,   16, 
        EPAO,   8, 
        TLAS,   8, 
        FADM,   8, 
        FSTA,   1, 
        Offset (0xFAB)
    }

    Field (MNVS, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB00), 
        WITM,   8, 
        WSEL,   8, 
        WLS0,   8, 
        WLS1,   8, 
        WLS2,   8, 
        WLS3,   8, 
        WLS4,   8, 
        WLS5,   8, 
        WLS6,   8, 
        WLS7,   8, 
        WLS8,   8, 
        WLS9,   8, 
        WLSA,   8, 
        WLSB,   8, 
        WLSC,   8, 
        WLSD,   8, 
        WENC,   8, 
        WKBD,   8, 
        WPTY,   8, 
        WPAS,   1032, 
        WPNW,   1032, 
        WSPM,   8, 
        WSPS,   8, 
        WSMN,   8, 
        WSMX,   8, 
        WSEN,   8, 
        WSKB,   8, 
        WASB,   8, 
        WASI,   16, 
        WASD,   8, 
        WASS,   32, 
        WDRV,   8, 
        WMTH,   8, 
        RTC0,   8, 
        RTC1,   8, 
        RTC2,   8, 
        WSHS,   8, 
        WEXF,   8, 
        SDBM,   8, 
        Offset (0xC5F)
    }

    Field (MNVS, ByteAcc, NoLock, Preserve)
    {
        Offset (0x1000), 
        CBFF,   32768
    }

    Field (MNVS, ByteAcc, NoLock, Preserve)
    {
        Offset (0xA00), 
        DBGB,   1024
    }

    OperationRegion (CNVS, SystemMemory, 0x936CA018, 0x2000)
    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        SCSB,   65536
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        SNMA,   32
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        SSMB,   24768, 
        SSPL,   16, 
        SSPB,   2048
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        SGMB,   128, 
        SGPL,   16, 
        SGPB,   2048
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        SGSB,   24608
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        SEDL,   768, 
        SENS,   32
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        SWMB,   60992, 
        SWAL,   16, 
        SWAB,   2048
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        GWMB,   60864
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        SPMB,   1104
    }

    Field (CNVS, ByteAcc, NoLock, Preserve)
    {
        GPMB,   5520
    }

    Name (SPS, Zero)
    Name (OSIF, Zero)
    Name (WNTF, Zero)
    Name (WXPF, Zero)
    Name (WVIS, Zero)
    Name (WIN7, Zero)
    Name (WIN8, Zero)
    Name (WSPV, Zero)
    Name (LNUX, Zero)
    Name (H8DR, Zero)
    Name (MEMX, Zero)
    Name (ACST, Zero)
    Name (FMBL, One)
    Name (FDTP, 0x02)
    Name (FUPS, 0x03)
    Name (FNID, Zero)
    Name (RRBF, Zero)
    Name (NBCF, Zero)
    OperationRegion (SMI0, SystemIO, 0xB2, One)
    Field (SMI0, ByteAcc, NoLock, Preserve)
    {
        APMC,   8
    }

    Field (MNVS, AnyAcc, NoLock, Preserve)
    {
        Offset (0xFC0), 
        CMD,    8, 
        ERR,    32, 
        PAR0,   32, 
        PAR1,   32, 
        PAR2,   32, 
        PAR3,   32
    }

    Mutex (MSMI, 0x00)
    Method (SMI, 5, Serialized)
    {
        Acquire (MSMI, 0xFFFF)
        CMD = Arg0
        ERR = One
        PAR0 = Arg1
        PAR1 = Arg2
        PAR2 = Arg3
        PAR3 = Arg4
        APMC = 0xF5
        While ((ERR == One))
        {
            Sleep (One)
            APMC = 0xF5
        }

        Local0 = PAR0 /* \PAR0 */
        Release (MSMI)
        Return (Local0)
    }

    Method (RPCI, 1, NotSerialized)
    {
        Return (SMI (Zero, Zero, Arg0, Zero, Zero))
    }

    Method (WPCI, 2, NotSerialized)
    {
        SMI (Zero, One, Arg0, Arg1, Zero)
    }

    Method (MPCI, 3, NotSerialized)
    {
        SMI (Zero, 0x02, Arg0, Arg1, Arg2)
    }

    Method (RBEC, 1, NotSerialized)
    {
        Return (SMI (Zero, 0x03, Arg0, Zero, Zero))
    }

    Method (WBEC, 2, NotSerialized)
    {
        SMI (Zero, 0x04, Arg0, Arg1, Zero)
    }

    Method (MBEC, 3, NotSerialized)
    {
        SMI (Zero, 0x05, Arg0, Arg1, Arg2)
    }

    Method (RISA, 1, NotSerialized)
    {
        Return (SMI (Zero, 0x06, Arg0, Zero, Zero))
    }

    Method (WISA, 2, NotSerialized)
    {
        SMI (Zero, 0x07, Arg0, Arg1, Zero)
    }

    Method (MISA, 3, NotSerialized)
    {
        SMI (Zero, 0x08, Arg0, Arg1, Arg2)
    }

    Method (VEXP, 0, NotSerialized)
    {
        SMI (One, Zero, Zero, Zero, Zero)
    }

    Method (VUPS, 1, NotSerialized)
    {
        SMI (One, One, Arg0, Zero, Zero)
    }

    Method (VSDS, 2, NotSerialized)
    {
        SMI (One, 0x02, Arg0, Arg1, Zero)
    }

    Method (VDDC, 0, NotSerialized)
    {
        SMI (One, 0x03, Zero, Zero, Zero)
    }

    Method (VVPD, 1, NotSerialized)
    {
        SMI (One, 0x04, Arg0, Zero, Zero)
    }

    Method (VNRS, 1, NotSerialized)
    {
        SMI (One, 0x05, Arg0, Zero, Zero)
    }

    Method (GLPW, 0, NotSerialized)
    {
        Return (SMI (One, 0x06, Zero, Zero, Zero))
    }

    Method (VSLD, 1, NotSerialized)
    {
        SMI (One, 0x07, Arg0, Zero, Zero)
    }

    Method (VEVT, 1, NotSerialized)
    {
        Return (SMI (One, 0x08, Arg0, Zero, Zero))
    }

    Method (VTHR, 0, NotSerialized)
    {
        Return (SMI (One, 0x09, Zero, Zero, Zero))
    }

    Method (VBRC, 1, NotSerialized)
    {
        SMI (One, 0x0A, Arg0, Zero, Zero)
    }

    Method (VBRG, 0, NotSerialized)
    {
        Return (SMI (One, 0x0E, Zero, Zero, Zero))
    }

    Method (VCMS, 2, NotSerialized)
    {
        Return (SMI (One, 0x0B, Arg0, Arg1, Zero))
    }

    Method (VBTD, 0, NotSerialized)
    {
        Return (SMI (One, 0x0F, Zero, Zero, Zero))
    }

    Method (VHYB, 2, NotSerialized)
    {
        Return (SMI (One, 0x10, Arg0, Arg1, Zero))
    }

    Method (VDYN, 2, NotSerialized)
    {
        Return (SMI (One, 0x11, Arg0, Arg1, Zero))
    }

    Method (SDPS, 2, NotSerialized)
    {
        Return (SMI (One, 0x12, Arg0, Arg1, Zero))
    }

    Method (SCMS, 1, NotSerialized)
    {
        Return (SMI (0x02, Arg0, Zero, Zero, Zero))
    }

    Method (BHDP, 2, NotSerialized)
    {
        Return (SMI (0x03, Zero, Arg0, Arg1, Zero))
    }

    Method (STEP, 1, NotSerialized)
    {
        SMI (0x04, Arg0, Zero, Zero, Zero)
    }

    Method (SLTP, 0, NotSerialized)
    {
        SMI (0x05, Zero, Zero, Zero, Zero)
    }

    Method (CBRI, 0, NotSerialized)
    {
        SMI (0x05, One, Zero, Zero, Zero)
    }

    Method (BCHK, 0, NotSerialized)
    {
        Return (SMI (0x05, 0x04, Zero, Zero, Zero))
    }

    Method (BYRS, 0, NotSerialized)
    {
        SMI (0x05, 0x05, Zero, Zero, Zero)
    }

    Method (LCHK, 1, NotSerialized)
    {
        Return (SMI (0x05, 0x06, Arg0, Zero, Zero))
    }

    Method (BLTH, 1, NotSerialized)
    {
        Return (SMI (0x06, Arg0, Zero, Zero, Zero))
    }

    Method (PRSM, 2, NotSerialized)
    {
        Return (SMI (0x07, Zero, Arg0, Arg1, Zero))
    }

    Method (ISOC, 1, NotSerialized)
    {
        Return (SMI (0x07, 0x03, Arg0, Zero, Zero))
    }

    Method (EZRC, 1, NotSerialized)
    {
        Return (SMI (0x07, 0x04, Arg0, Zero, Zero))
    }

    Method (WGSV, 1, NotSerialized)
    {
        Return (SMI (0x09, Arg0, Zero, Zero, Zero))
    }

    Method (SWTT, 1, NotSerialized)
    {
        If ((Arg0 == Zero))
        {
            \_SB.PC00.LPCB.EC.HKEY.ANGN = Zero
        }

        Local0 = One
        If (CondRefOf (\_SB.IETM.DPTE))
        {
            If ((\_SB.IETM.DPTE & One))
            {
                Local0 = Zero
            }
        }

        ADBG ("SWTT")
        ADBG (Concatenate ("GPUOnOff =", ToHexString (Arg0)))
        ADBG (Concatenate ("isNonDTT =", ToHexString (Local0)))
        If (SMI (0x0A, 0x02, Arg0, Local0, Zero))
        {
            If (CondRefOf (\_SB.IETM.DPTE))
            {
                If ((\_SB.IETM.DPTE & One))
                {
                    Notify (\_SB.IETM, 0x88) // Device-Specific
                }
            }

            If (\_SB.PC00.LPCB.EC.HKEY.DHKC)
            {
                \_SB.PC00.LPCB.EC.HKEY.MHKQ (0x6030)
            }
        }
    }

    Method (TSDL, 0, NotSerialized)
    {
        Return (SMI (0x0A, 0x03, Zero, Zero, Zero))
    }

    Method (FLPF, 1, NotSerialized)
    {
        Return (SMI (0x0A, 0x04, Arg0, Zero, Zero))
    }

    Method (GTST, 1, NotSerialized)
    {
        ADBG ("GTST")
        Return (SMI (0x0A, 0x05, Arg0, Zero, Zero))
    }

    Method (CSUM, 1, NotSerialized)
    {
        Return (SMI (0x0E, Arg0, Zero, Zero, Zero))
    }

    Method (NVSS, 1, NotSerialized)
    {
        Return (SMI (0x0F, Arg0, Zero, Zero, Zero))
    }

    Method (WMIS, 2, NotSerialized)
    {
        Return (SMI (0x10, Arg0, Arg1, Zero, Zero))
    }

    Method (AWON, 1, NotSerialized)
    {
        Return (SMI (0x12, Arg0, Zero, Zero, Zero))
    }

    Method (PMON, 2, NotSerialized)
    {
        Local0 = SizeOf (Arg0)
        Name (TSTR, Buffer (Local0) {})
        TSTR = Arg0
        DBGB = TSTR /* \PMON.TSTR */
        SMI (0x11, Arg1, Zero, Zero, Zero)
    }

    Method (UAWS, 1, NotSerialized)
    {
        Return (SMI (0x13, Arg0, Zero, Zero, Zero))
    }

    Method (BFWC, 1, NotSerialized)
    {
        Return (SMI (0x14, Zero, Arg0, Zero, Zero))
    }

    Method (BFWP, 0, NotSerialized)
    {
        Return (SMI (0x14, One, Zero, Zero, Zero))
    }

    Method (BFWL, 0, NotSerialized)
    {
        SMI (0x14, 0x02, Zero, Zero, Zero)
    }

    Method (BFWG, 1, NotSerialized)
    {
        SMI (0x14, 0x03, Arg0, Zero, Zero)
    }

    Method (BDMC, 1, NotSerialized)
    {
        SMI (0x14, 0x04, Arg0, Zero, Zero)
    }

    Method (PSIF, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x05, Arg0, Arg1, Zero))
    }

    Method (FNSC, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x06, Arg0, Arg1, Zero))
    }

    Method (AUDC, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x07, Arg0, Arg1, Zero))
    }

    Method (SYBC, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x08, Arg0, Arg1, Zero))
    }

    Method (KBLS, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x09, Arg0, Arg1, Zero))
    }

    Method (SSTI, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x0A, Arg0, Arg1, Zero))
    }

    Method (SSTH, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x0B, Arg0, Arg1, Zero))
    }

    Method (UBIS, 1, NotSerialized)
    {
        Return (SMI (0x15, Zero, Arg0, Zero, Zero))
    }

    Method (DIEH, 1, NotSerialized)
    {
        Return (SMI (0x16, Zero, Arg0, Zero, Zero))
    }

    Method (OUTP, 2, NotSerialized)
    {
        SMI (0x17, Arg0, Arg1, Zero, Zero)
    }

    Method (SREQ, 3, NotSerialized)
    {
        SMI (0x18, (Arg0 & 0xFF), (Arg1 & 0xFF), (Arg2 & 
            0xFF), Zero)
    }

    Method (SPMS, 1, NotSerialized)
    {
        SMI (0x19, (Arg0 & 0xFF), Zero, Zero, Zero)
    }

    Method (LVSS, 2, NotSerialized)
    {
        Return (SMI (0x1A, (Arg0 & 0xFF), Arg1, Zero, Zero))
    }

    Method (SCMP, 2, NotSerialized)
    {
        Local0 = SizeOf (Arg0)
        If ((Local0 != SizeOf (Arg1)))
        {
            Return (One)
        }

        Local0++
        Name (STR1, Buffer (Local0) {})
        Name (STR2, Buffer (Local0) {})
        STR1 = Arg0
        STR2 = Arg1
        Local1 = Zero
        While ((Local1 < Local0))
        {
            Local2 = DerefOf (STR1 [Local1])
            Local3 = DerefOf (STR2 [Local1])
            If ((Local2 != Local3))
            {
                Return (One)
            }

            Local1++
        }

        Return (Zero)
    }

    Name (ONVA, 0x936AA000)
    Name (ONVL, 0x0101)
    OperationRegion (ONVS, SystemMemory, ONVA, ONVL)
    Field (ONVS, AnyAcc, Lock, Preserve)
    {
        Offset (0x04), 
        PBID,   8, 
        Offset (0x06), 
        MIAC,   16, 
        C16N,   8, 
        SPDF,   8, 
        IGCC,   8, 
        NPCS,   8, 
        WISP,   8, 
        Offset (0x10), 
        GVDI,   32, 
        DNPF,   8, 
        GCPI,   8, 
        NPBF,   16, 
        OLED,   8, 
        GC63,   8, 
        NEXR,   8, 
        DNTC,   1, 
        GPMC,   1, 
        DBTC,   1, 
        WSPC,   1, 
        Offset (0x1C), 
        AUXE,   8, 
        NHAC,   8, 
        Offset (0x20), 
        CPL1,   16, 
        CGTC,   16, 
        NTPP,   16, 
        MATG,   16, 
        MITG,   16, 
        NTPD,   16, 
        MATD,   16, 
        MITD,   16, 
        UCTG,   16, 
        MAPL,   8, 
        MIPL,   8, 
        Offset (0x35), 
        Offset (0x36), 
        DPNT,   8, 
        Offset (0x38), 
        TPOR,   16, 
        ATOR,   16, 
        ITOR,   16, 
        Offset (0x40), 
        TPDR,   16, 
        ATDR,   16, 
        IIDR,   16, 
        TGOR,   16, 
        CDN0,   8, 
        CUP0,   8, 
        CDN1,   8, 
        CUP1,   8, 
        CDN2,   8, 
        CUP2,   8, 
        CDN3,   8, 
        CUP3,   8, 
        GDN0,   8, 
        GUP0,   8, 
        GDN1,   8, 
        GUP1,   8, 
        GDN2,   8, 
        GUP2,   8, 
        GDN3,   8, 
        GUP3,   8, 
        Offset (0x60), 
        MTG6,   16, 
        MTG8,   16, 
        TPP4,   16, 
        TPP6,   16, 
        TPP8,   16, 
        Offset (0x70), 
        ODV6,   8, 
        ODV7,   8, 
        ODV8,   8, 
        ODV9,   8, 
        ODVA,   8, 
        ODVB,   8, 
        ODVC,   8, 
        ODVD,   8, 
        ODVE,   8, 
        ODVF,   8, 
        ODVG,   8, 
        ODVH,   8, 
        ODVI,   8, 
        ODVJ,   8, 
        ODVK,   8, 
        DVMG,   8, 
        UPMC,   8, 
        ISGD,   8
    }

    Name (MACA, "_AUXMAC_#E880884DB021#")
    Name (WOLD, "_S5WOL_#01EF1700000000#")
    Scope (_SB)
    {
        Name (RID, Zero)
        Device (MEM)
        {
            Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
            Name (MEMS, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x000A0000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0x000C0000,         // Address Base
                    0x00000000,         // Address Length
                    _Y52)
                Memory32Fixed (ReadOnly,
                    0x000C4000,         // Address Base
                    0x00000000,         // Address Length
                    _Y53)
                Memory32Fixed (ReadOnly,
                    0x000C8000,         // Address Base
                    0x00000000,         // Address Length
                    _Y54)
                Memory32Fixed (ReadOnly,
                    0x000CC000,         // Address Base
                    0x00000000,         // Address Length
                    _Y55)
                Memory32Fixed (ReadOnly,
                    0x000D0000,         // Address Base
                    0x00000000,         // Address Length
                    _Y56)
                Memory32Fixed (ReadOnly,
                    0x000D4000,         // Address Base
                    0x00000000,         // Address Length
                    _Y57)
                Memory32Fixed (ReadOnly,
                    0x000D8000,         // Address Base
                    0x00000000,         // Address Length
                    _Y58)
                Memory32Fixed (ReadOnly,
                    0x000DC000,         // Address Base
                    0x00000000,         // Address Length
                    _Y59)
                Memory32Fixed (ReadOnly,
                    0x000E0000,         // Address Base
                    0x00000000,         // Address Length
                    _Y5A)
                Memory32Fixed (ReadOnly,
                    0x000E4000,         // Address Base
                    0x00000000,         // Address Length
                    _Y5B)
                Memory32Fixed (ReadOnly,
                    0x000E8000,         // Address Base
                    0x00000000,         // Address Length
                    _Y5C)
                Memory32Fixed (ReadOnly,
                    0x000EC000,         // Address Base
                    0x00000000,         // Address Length
                    _Y5D)
                Memory32Fixed (ReadOnly,
                    0x000F0000,         // Address Base
                    0x00010000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00100000,         // Address Base
                    0x01EE0000,         // Address Length
                    _Y5E)
                Memory32Fixed (ReadOnly,
                    0xFEC00000,         // Address Base
                    0x00140000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED4C000,         // Address Base
                    0x012B4000,         // Address Length
                    )
            })
            CreateDWordField (MEMS, \_SB.MEM._Y52._LEN, MC0L)  // _LEN: Length
            CreateDWordField (MEMS, \_SB.MEM._Y53._LEN, MC4L)  // _LEN: Length
            CreateDWordField (MEMS, \_SB.MEM._Y54._LEN, MC8L)  // _LEN: Length
            CreateDWordField (MEMS, \_SB.MEM._Y55._LEN, MCCL)  // _LEN: Length
            CreateDWordField (MEMS, \_SB.MEM._Y56._LEN, MD0L)  // _LEN: Length
            CreateDWordField (MEMS, \_SB.MEM._Y57._LEN, MD4L)  // _LEN: Length
            CreateDWordField (MEMS, \_SB.MEM._Y58._LEN, MD8L)  // _LEN: Length
            CreateDWordField (MEMS, \_SB.MEM._Y59._LEN, MDCL)  // _LEN: Length
            CreateDWordField (MEMS, \_SB.MEM._Y5A._LEN, ME0L)  // _LEN: Length
            CreateDWordField (MEMS, \_SB.MEM._Y5B._LEN, ME4L)  // _LEN: Length
            CreateDWordField (MEMS, \_SB.MEM._Y5C._LEN, ME8L)  // _LEN: Length
            CreateDWordField (MEMS, \_SB.MEM._Y5D._LEN, MECL)  // _LEN: Length
            CreateBitField (MEMS, \_SB.MEM._Y52._RW, MC0W)  // _RW_: Read-Write Status
            CreateBitField (MEMS, \_SB.MEM._Y53._RW, MC4W)  // _RW_: Read-Write Status
            CreateBitField (MEMS, \_SB.MEM._Y54._RW, MC8W)  // _RW_: Read-Write Status
            CreateBitField (MEMS, \_SB.MEM._Y55._RW, MCCW)  // _RW_: Read-Write Status
            CreateBitField (MEMS, \_SB.MEM._Y56._RW, MD0W)  // _RW_: Read-Write Status
            CreateBitField (MEMS, \_SB.MEM._Y57._RW, MD4W)  // _RW_: Read-Write Status
            CreateBitField (MEMS, \_SB.MEM._Y58._RW, MD8W)  // _RW_: Read-Write Status
            CreateBitField (MEMS, \_SB.MEM._Y59._RW, MDCW)  // _RW_: Read-Write Status
            CreateBitField (MEMS, \_SB.MEM._Y5A._RW, ME0W)  // _RW_: Read-Write Status
            CreateBitField (MEMS, \_SB.MEM._Y5B._RW, ME4W)  // _RW_: Read-Write Status
            CreateBitField (MEMS, \_SB.MEM._Y5C._RW, ME8W)  // _RW_: Read-Write Status
            CreateBitField (MEMS, \_SB.MEM._Y5D._RW, MECW)  // _RW_: Read-Write Status
            CreateDWordField (MEMS, \_SB.MEM._Y5E._BAS, MEB1)  // _BAS: Base Address
            CreateDWordField (MEMS, \_SB.MEM._Y5E._LEN, MEL1)  // _LEN: Length
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (^^PC00.MC.PM1L & 0x03)
                If (Local0)
                {
                    MC0L = 0x4000
                    If ((Local0 & 0x02))
                    {
                        MC0W = One
                    }
                }

                Local0 = (^^PC00.MC.PM1H & 0x30)
                If (Local0)
                {
                    MC4L = 0x4000
                    If ((Local0 & 0x20))
                    {
                        MC4W = One
                    }
                }

                Local0 = (^^PC00.MC.PM2L & 0x03)
                If (Local0)
                {
                    MC8L = 0x4000
                    If ((Local0 & 0x02))
                    {
                        MC8W = One
                    }
                }

                Local0 = (^^PC00.MC.PM2H & 0x30)
                If (Local0)
                {
                    MCCL = 0x4000
                    If ((Local0 & 0x20))
                    {
                        MCCW = One
                    }
                }

                Local0 = (^^PC00.MC.PM3L & 0x03)
                If (Local0)
                {
                    MD0L = 0x4000
                    If ((Local0 & 0x02))
                    {
                        MD0W = One
                    }
                }

                Local0 = (^^PC00.MC.PM3H & 0x30)
                If (Local0)
                {
                    MD4L = 0x4000
                    If ((Local0 & 0x20))
                    {
                        MD4W = One
                    }
                }

                Local0 = (^^PC00.MC.PM4L & 0x03)
                If (Local0)
                {
                    MD8L = 0x4000
                    If ((Local0 & 0x02))
                    {
                        MD8W = One
                    }
                }

                Local0 = (^^PC00.MC.PM4H & 0x30)
                If (Local0)
                {
                    MDCL = 0x4000
                    If ((Local0 & 0x20))
                    {
                        MDCW = One
                    }
                }

                Local0 = (^^PC00.MC.PM5L & 0x03)
                If (Local0)
                {
                    ME0L = 0x4000
                    If ((Local0 & 0x02))
                    {
                        ME0W = One
                    }
                }

                Local0 = (^^PC00.MC.PM5H & 0x30)
                If (Local0)
                {
                    ME4L = 0x4000
                    If ((Local0 & 0x20))
                    {
                        ME4W = One
                    }
                }

                Local0 = (^^PC00.MC.PM6L & 0x03)
                If (Local0)
                {
                    ME8L = 0x4000
                    If ((Local0 & 0x02))
                    {
                        ME8W = One
                    }
                }

                Local0 = (^^PC00.MC.PM6H & 0x30)
                If (Local0)
                {
                    MECL = 0x4000
                    If ((Local0 & 0x20))
                    {
                        MECW = One
                    }
                }

                MEMX = (^^PC00.MC.TLUD << 0x14)
                MEL1 = (MEMX - MEB1) /* \_SB_.MEM_.MEB1 */
                Return (MEMS) /* \_SB_.MEM_.MEMS */
            }
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                If (((ILNF == Zero) && (PLUX == Zero)))
                {
                    If (H8DR)
                    {
                        Return (^^PC00.LPCB.EC.HPLD) /* \_SB_.PC00.LPCB.EC__.HPLD */
                    }
                    ElseIf ((RBEC (0x46) & 0x04))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (LWCP)
                {
                    Return (Package (0x02)
                    {
                        0x17, 
                        0x04
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        0x17, 
                        0x03
                    })
                }
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (H8DR)
                {
                    If (Arg0)
                    {
                        ^^PC00.LPCB.EC.HWLO = One
                    }
                    Else
                    {
                        ^^PC00.LPCB.EC.HWLO = Zero
                    }
                }
                ElseIf (Arg0)
                {
                    MBEC (0x32, 0xFF, 0x04)
                }
                Else
                {
                    MBEC (0x32, 0xFB, Zero)
                }

                If (LWCP)
                {
                    If (Arg0)
                    {
                        LWEN = One
                    }
                    Else
                    {
                        LWEN = Zero
                    }
                }
            }
        }

        Device (WMI1)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_WDG, Buffer (0x017C)
            {
                /* 0000 */  0x0E, 0x23, 0xF5, 0x51, 0x77, 0x96, 0xCD, 0x46,  // .#.Qw..F
                /* 0008 */  0xA1, 0xCF, 0xC0, 0xB2, 0x3E, 0xE3, 0x4D, 0xB7,  // ....>.M.
                /* 0010 */  0x41, 0x30, 0xFF, 0x05, 0x64, 0x9A, 0x47, 0x98,  // A0..d.G.
                /* 0018 */  0xF5, 0x33, 0x33, 0x4E, 0xA7, 0x07, 0x8E, 0x25,  // .33N...%
                /* 0020 */  0x1E, 0xBB, 0xC3, 0xA1, 0x41, 0x31, 0x01, 0x06,  // ....A1..
                /* 0028 */  0xEF, 0x54, 0x4B, 0x6A, 0xED, 0xA5, 0x33, 0x4D,  // .TKj..3M
                /* 0030 */  0x94, 0x55, 0xB0, 0xD9, 0xB4, 0x8D, 0xF4, 0xB3,  // .U......
                /* 0038 */  0x41, 0x32, 0x01, 0x06, 0xB6, 0xEB, 0xF1, 0x74,  // A2.....t
                /* 0040 */  0x7A, 0x92, 0x7D, 0x4C, 0x95, 0xDF, 0x69, 0x8E,  // z.}L..i.
                /* 0048 */  0x21, 0xE8, 0x0E, 0xB5, 0x41, 0x33, 0x01, 0x06,  // !...A3..
                /* 0050 */  0xFF, 0x04, 0xEF, 0x7E, 0x28, 0x43, 0x7C, 0x44,  // ...~(C|D
                /* 0058 */  0xB5, 0xBB, 0xD4, 0x49, 0x92, 0x5D, 0x53, 0x8D,  // ...I.]S.
                /* 0060 */  0x41, 0x34, 0x01, 0x06, 0x9E, 0x15, 0xDB, 0x8A,  // A4......
                /* 0068 */  0x32, 0x1E, 0x5C, 0x45, 0xBC, 0x93, 0x30, 0x8A,  // 2.\E..0.
                /* 0070 */  0x7E, 0xD9, 0x82, 0x46, 0x41, 0x35, 0x01, 0x01,  // ~..FA5..
                /* 0078 */  0xFD, 0xD9, 0x51, 0x26, 0x1C, 0x91, 0x69, 0x4B,  // ..Q&..iK
                /* 0080 */  0xB9, 0x4E, 0xD0, 0xDE, 0xD5, 0x96, 0x3B, 0xD7,  // .N....;.
                /* 0088 */  0x41, 0x36, 0x01, 0x06, 0x1A, 0x65, 0x64, 0x73,  // A6...eds
                /* 0090 */  0x2F, 0x13, 0xE7, 0x4F, 0xAD, 0xAA, 0x40, 0xC6,  // /..O..@.
                /* 0098 */  0xC7, 0xEE, 0x2E, 0x3B, 0x41, 0x37, 0x01, 0x06,  // ...;A7..
                /* 00A0 */  0x2C, 0xEF, 0xDD, 0xDF, 0xD4, 0x57, 0xCE, 0x48,  // ,....W.H
                /* 00A8 */  0xB1, 0x96, 0x0F, 0xB7, 0x87, 0xD9, 0x08, 0x36,  // .......6
                /* 00B0 */  0x46, 0x30, 0x01, 0x06, 0xA6, 0xEB, 0x70, 0x73,  // F0....ps
                /* 00B8 */  0x73, 0x7E, 0x9C, 0x40, 0x9A, 0x89, 0x82, 0x97,  // s~.@....
                /* 00C0 */  0x95, 0x31, 0x3D, 0x78, 0x46, 0x31, 0x20, 0x05,  // .1=xF1 .
                /* 00C8 */  0x89, 0xA5, 0x94, 0x7E, 0x65, 0x46, 0xDE, 0x47,  // ...~eF.G
                /* 00D0 */  0xBE, 0x2B, 0xDD, 0xE4, 0xA2, 0x80, 0xAD, 0x47,  // .+.....G
                /* 00D8 */  0x46, 0x32, 0x01, 0x06, 0xCC, 0x08, 0xA0, 0x34,  // F2.....4
                /* 00E0 */  0x05, 0xD2, 0x62, 0x4B, 0x9E, 0x67, 0x31, 0xDF,  // ..bK.g1.
                /* 00E8 */  0xA8, 0xB9, 0x00, 0x03, 0x46, 0x33, 0x01, 0x06,  // ....F3..
                /* 00F0 */  0x9D, 0xFB, 0x50, 0xC0, 0x5F, 0xDF, 0x06, 0x46,  // ..P._..F
                /* 00F8 */  0xB0, 0x66, 0x9E, 0xFC, 0x40, 0x1B, 0x25, 0x51,  // .f..@.%Q
                /* 0100 */  0x46, 0x34, 0x01, 0x06, 0x95, 0xE9, 0x9C, 0x9B,  // F4......
                /* 0108 */  0xC3, 0xC2, 0xEE, 0x40, 0x81, 0xD5, 0x94, 0x68,  // ...@...h
                /* 0110 */  0x95, 0x37, 0x59, 0xBE, 0x46, 0x35, 0x01, 0x06,  // .7Y.F5..
                /* 0118 */  0x89, 0x78, 0x34, 0x98, 0x12, 0xE1, 0x14, 0x4F,  // .x4....O
                /* 0120 */  0xB4, 0x18, 0x27, 0x3A, 0x13, 0x67, 0xDE, 0x9C,  // ..':.g..
                /* 0128 */  0x46, 0x36, 0x01, 0x06, 0x3A, 0x25, 0x21, 0x34,  // F6..:%!4
                /* 0130 */  0x7C, 0xBD, 0x22, 0x42, 0x84, 0x7F, 0x1D, 0xA6,  // |."B....
                /* 0138 */  0x4E, 0x3E, 0x8F, 0xCF, 0x46, 0x37, 0x01, 0x06,  // N>..F7..
                /* 0140 */  0x35, 0xCE, 0x07, 0xF3, 0x39, 0xD5, 0xD6, 0x42,  // 5...9..B
                /* 0148 */  0x9E, 0x87, 0x55, 0x6D, 0x7D, 0xFF, 0x91, 0x64,  // ..Um}..d
                /* 0150 */  0x46, 0x38, 0x01, 0x06, 0x27, 0x2D, 0xD0, 0x0D,  // F8..'-..
                /* 0158 */  0xE0, 0xE6, 0x57, 0x4E, 0x82, 0x17, 0x83, 0x1B,  // ..WN....
                /* 0160 */  0xFC, 0xFB, 0x26, 0x55, 0x42, 0x30, 0x01, 0x06,  // ..&UB0..
                /* 0168 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0170 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0178 */  0x42, 0x41, 0x01, 0x00                           // BA..
            })
            Name (RETN, Package (0x05)
            {
                "Success", 
                "Not Supported", 
                "Invalid Parameter", 
                "Access Denied", 
                "System Busy"
            })
            Name (ITEM, Package (0xA4)
            {
                Package (0x02)
                {
                    0x0E, 
                    "WakeOnLAN"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "USBBIOSSupport"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "AlwaysOnUSB"
                }, 

                Package (0x02)
                {
                    One, 
                    "TrackPoint"
                }, 

                Package (0x02)
                {
                    One, 
                    "TouchPad"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "FnSticky"
                }, 

                Package (0x02)
                {
                    0x04, 
                    "ThinkPadNumLock"
                }, 

                Package (0x02)
                {
                    0x0C, 
                    "PowerOnNumLock"
                }, 

                Package (0x02)
                {
                    0x05, 
                    "BootDisplayDevice"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "SpeedStep"
                }, 

                Package (0x02)
                {
                    0x09, 
                    "AdaptiveThermalManagementAC"
                }, 

                Package (0x02)
                {
                    0x09, 
                    "AdaptiveThermalManagementBattery"
                }, 

                Package (0x02)
                {
                    0x06, 
                    "CDROMSpeed"
                }, 

                Package (0x02)
                {
                    One, 
                    "CPUPowerManagement"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "PowerControlBeep"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "LowBatteryAlarm"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "PasswordBeep"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "KeyboardBeep"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "ExtendedMemoryTest"
                }, 

                Package (0x02)
                {
                    0x07, 
                    "SATAControllerMode"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "CoreMultiProcessing"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "VirtualizationTechnology"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "LockBIOSSetting"
                }, 

                Package (0x02)
                {
                    0x0B, 
                    "MinimumPasswordLength"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "BIOSPasswordAtUnattendedBoot"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "FingerprintPredesktopAuthentication"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    0x03, 
                    "FingerprintSecurityMode"
                }, 

                Package (0x02)
                {
                    0x02, 
                    "SecurityChip"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "BIOSUpdateByEndUsers"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "DataExecutionPrevention"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "EthernetLANAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "WirelessLANAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "WirelessWANAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "BluetoothAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "WirelessUSBAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "ModemAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "USBPortAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "IEEE1394Access"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "ExpressCardAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "PCIExpressSlotAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "UltrabayAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "MemoryCardSlotAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "SmartCardSlotAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "IntegratedCameraAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "MicrophoneAccess"
                }, 

                Package (0x02)
                {
                    0x0A, 
                    "BootMode"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "StartupOptionKeys"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "BootDeviceListF12Option"
                }, 

                Package (0x02)
                {
                    0x64, 
                    "BootOrder"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "WiMAXAccess"
                }, 

                Package (0x02)
                {
                    0x0D, 
                    "GraphicsDevice"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "TXTFeature"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "VTdFeature"
                }, 

                Package (0x02)
                {
                    0x0F, 
                    "AMTControl"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "FingerprintPasswordAuthentication"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "FingerprintReaderAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "OsDetectionForSwitchableGraphics"
                }, 

                Package (0x02)
                {
                    0x0F, 
                    "AbsolutePersistenceModuleActivation"
                }, 

                Package (0x02)
                {
                    One, 
                    "PCIExpressPowerManagement"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "eSATAPortAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "HardwarePasswordManager"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "HyperThreadingTechnology"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "FnCtrlKeySwap"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "BIOSPasswordAtReboot"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "OnByAcAttach"
                }, 

                Package (0x02)
                {
                    0x64, 
                    "NetworkBoot"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "BootOrderLock"
                }, 

                Package (0x02)
                {
                    0x10, 
                    "SharedDisplayPriority"
                }, 

                Package (0x02)
                {
                    0x11, 
                    "ExpressCardSpeed"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "RapidStartTechnology"
                }, 

                Package (0x02)
                {
                    0x12, 
                    "KeyboardIllumination"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "IPv4NetworkStack"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "IPv6NetworkStack"
                }, 

                Package (0x02)
                {
                    0x13, 
                    "UefiPxeBootPriority"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "PhysicalPresenceForTpmProvision"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "PhysicalPresenceForTpmClear"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "SecureRollBackPrevention"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "SecureBoot"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "NfcAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "BottomCoverTamperDetected"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "PasswordCountExceededError"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "BIOSPasswordAtBootDeviceList"
                }, 

                Package (0x02)
                {
                    0x14, 
                    "TotalGraphicsMemory"
                }, 

                Package (0x02)
                {
                    0x15, 
                    "BootTimeExtension"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "FnKeyAsPrimary"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "WiGig"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "BIOSPasswordAtPowerOn"
                }, 

                Package (0x02)
                {
                    0x16, 
                    "SGXControl"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "InternalStorageTamper"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "WirelessAutoDisconnection"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "USBKeyProvisioning"
                }, 

                Package (0x02)
                {
                    0x1B, 
                    "MACAddressPassThrough"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "ThunderboltAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "WindowsUEFIFirmwareUpdate"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "WakeOnLANDock"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "DeviceGuard"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "WiFiNetworkBoot"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "LenovoCloudServices"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "IntegratedAudioAccess"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    0x0F, 
                    "ComputraceModuleActivation"
                }, 

                Package (0x02)
                {
                    0x1F, 
                    "SleepState"
                }, 

                Package (0x02)
                {
                    0x1C, 
                    "MaxPasswordAttempts"
                }, 

                Package (0x02)
                {
                    0x1D, 
                    "PasswordChangeTime"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "SystemManagementPasswordControl"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "PowerOnPasswordControl"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "HardDiskPasswordControl"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "BIOSSetupConfigurations"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "EnhancedWindowsBiometricSecurity"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "ThinkShieldsecurewipe"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "KernelDMAProtection"
                }, 

                Package (0x02)
                {
                    0x1E, 
                    "SetupUI"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "ChargeInBatteryMode"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "StrongPassword"
                }, 

                Package (0x02)
                {
                    0x20, 
                    "KeyboardLayout"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "PCIeTunneling"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "UserPresenceSensing"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    0x21, 
                    "WakeUponAlarm"
                }, 

                Package (0x02)
                {
                    0x22, 
                    "AlarmDate"
                }, 

                Package (0x02)
                {
                    0x23, 
                    "AlarmTime"
                }, 

                Package (0x02)
                {
                    0x24, 
                    "AlarmDayofWeek"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "UserDefinedAlarmSunday"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "UserDefinedAlarmMonday"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "UserDefinedAlarmTuesday"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "UserDefinedAlarmWednesday"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "UserDefinedAlarmThursday"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "UserDefinedAlarmFriday"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "UserDefinedAlarmSaturday"
                }, 

                Package (0x02)
                {
                    0x23, 
                    "UserDefinedAlarmTime"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "BlockSIDAuthentication"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "TotalMemoryEncryption"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "OffByAcDetach"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Allow3rdPartyUEFICA"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "ePrivacyLock"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "ThinkShieldPasswordlessPowerOnAuthentication"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "CoolQuietOnLap"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    0x0F, 
                    "ISMControl"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "FingerprintSingleTouchAuthentication"
                }, 

                Package (0x02)
                {
                    0x2A, 
                    "EfficientCores"
                }
            })
            Name (VSEL, Package (0x2B)
            {
                Package (0x02)
                {
                    "Disable", 
                    "Enable"
                }, 

                Package (0x02)
                {
                    "Disable", 
                    "Automatic"
                }, 

                Package (0x04)
                {
                    "Active", 
                    "Inactive", 
                    "Disable", 
                    "Enable"
                }, 

                Package (0x02)
                {
                    "Normal", 
                    "High"
                }, 

                Package (0x02)
                {
                    "Independent", 
                    "Synchronized"
                }, 

                Package (0x02)
                {
                    "LCD", 
                    "ExternalDisplay"
                }, 

                Package (0x03)
                {
                    "High", 
                    "Normal", 
                    "Silent"
                }, 

                Package (0x02)
                {
                    "Compatibility", 
                    "AHCI"
                }, 

                Package (0x02)
                {
                    "External", 
                    "InternalOnly"
                }, 

                Package (0x02)
                {
                    "MaximizePerformance", 
                    "Balanced"
                }, 

                Package (0x02)
                {
                    "Quick", 
                    "Diagnostics"
                }, 

                Package (0x0A)
                {
                    "Disable", 
                    "4", 
                    "5", 
                    "6", 
                    "7", 
                    "8", 
                    "9", 
                    "10", 
                    "11", 
                    "12"
                }, 

                Package (0x03)
                {
                    "Auto", 
                    "On", 
                    "Off"
                }, 

                Package (0x03)
                {
                    "IntegratedGfx", 
                    "DiscreteGfx", 
                    "SwitchableGfx"
                }, 

                Package (0x04)
                {
                    "Disable", 
                    "ACOnly", 
                    "ACandBattery", 
                    "Enable"
                }, 

                Package (0x03)
                {
                    "Disable", 
                    "Enable", 
                    "PermanentlyDisable"
                }, 

                Package (0x02)
                {
                    "HDMI", 
                    "USBTypeC"
                }, 

                Package (0x02)
                {
                    "Generation1", 
                    "Automatic"
                }, 

                Package (0x03)
                {
                    "ThinkLightOnly", 
                    "BacklightOnly", 
                    "Both"
                }, 

                Package (0x02)
                {
                    "IPv6First", 
                    "IPv4First"
                }, 

                Package (0x02)
                {
                    "256MB", 
                    "512MB"
                }, 

                Package (0x0B)
                {
                    "Disable", 
                    "1", 
                    "2", 
                    "3", 
                    "", 
                    "5", 
                    "", 
                    "", 
                    "", 
                    "", 
                    "10"
                }, 

                Package (0x03)
                {
                    "Disable", 
                    "Enable", 
                    "SoftwareControl"
                }, 

                Package (0x04)
                {
                    "NoSecurity", 
                    "UserAuthorization", 
                    "SecureConnect", 
                    "DisplayPortandUSB"
                }, 

                Package (0x02)
                {
                    "Disable", 
                    "Enable"
                }, 

                Package (0x03)
                {
                    "Enable", 
                    "Disable", 
                    ""
                }, 

                Package (0x03)
                {
                    "Disable", 
                    "Enable", 
                    "Pre-BootACL"
                }, 

                Package (0x03)
                {
                    "Disable", 
                    "Enable", 
                    "Second"
                }, 

                Package (0x04)
                {
                    "Unlimited", 
                    "1", 
                    "3", 
                    "100"
                }, 

                Package (0x02)
                {
                    "Immediately", 
                    "AfterReboot"
                }, 

                Package (0x02)
                {
                    "SimpleText", 
                    "Graphical"
                }, 

                Package (0x03)
                {
                    "Linux", 
                    "Windows", 
                    "Windows10"
                }, 

                Package (0x1B)
                {
                    "English_US", 
                    "CanadianFrenchMultilingual", 
                    "CanadianFrench", 
                    "Spanish_LA", 
                    "Portuguese_BR", 
                    "Belgian", 
                    "Danish", 
                    "Spanish", 
                    "French", 
                    "German", 
                    "Hungarian", 
                    "Icelandic", 
                    "Italian", 
                    "Norwegian", 
                    "Portuguese", 
                    "Slovenian", 
                    "Swedish", 
                    "Swiss", 
                    "Turkish", 
                    "English_UK", 
                    "Japanese", 
                    "Korean", 
                    "TraditionalChinese", 
                    "Turkish-F", 
                    "Estonian", 
                    "Finnish", 
                    "Czech"
                }, 

                Package (0x05)
                {
                    "Disable", 
                    "UserDefined", 
                    "WeeklyEvent", 
                    "DailyEvent", 
                    "SingleEvent"
                }, 

                Package (0x01)
                {
                    "MM/DD/YYYY"
                }, 

                Package (0x01)
                {
                    "HH/MM/SS"
                }, 

                Package (0x07)
                {
                    "Sunday", 
                    "Monday", 
                    "Tuesday", 
                    "Wednesday", 
                    "Thursday", 
                    "Friday", 
                    "Saturday"
                }, 

                Package (0x03)
                {
                    "Near", 
                    "Middle", 
                    "Far"
                }, 

                Package (0x03)
                {
                    "Fast", 
                    "Medium", 
                    "Slow"
                }, 

                Package (0x02)
                {
                    "No", 
                    "Yes"
                }, 

                Package (0x02)
                {
                    "DiscreteTPM2.0", 
                    "PlutonTPM2.0"
                }, 

                Package (0x03)
                {
                    "Disable", 
                    "Enable", 
                    "Disable(SW_Controlled)"
                }, 

                Package (0x02)
                {
                    "Enable", 
                    "Disable"
                }
            })
            Name (VLST, Package (0x14)
            {
                "HDD0", 
                "HDD1", 
                "HDD2", 
                "HDD3", 
                "HDD4", 
                "PXEBOOT", 
                "ATAPICD0", 
                "ATAPICD1", 
                "ATAPICD2", 
                "USBFDD", 
                "USBCD", 
                "USBHDD", 
                "OtherHDD", 
                "OtherCD", 
                "NVMe0", 
                "NVMe1", 
                "HTTPSBOOT", 
                "LENOVOCLOUD", 
                "ON-PREMISE", 
                "NODEV"
            })
            Name (VR01, Package (0x67)
            {
                "0000", 
                "1998", 
                "1999", 
                "2000", 
                "2001", 
                "2002", 
                "2003", 
                "2004", 
                "2005", 
                "2006", 
                "2007", 
                "2008", 
                "2009", 
                "2010", 
                "2011", 
                "2012", 
                "2013", 
                "2014", 
                "2015", 
                "2016", 
                "2017", 
                "2018", 
                "2019", 
                "2020", 
                "2021", 
                "2022", 
                "2023", 
                "2024", 
                "2025", 
                "2026", 
                "2027", 
                "2028", 
                "2029", 
                "2030", 
                "2031", 
                "2032", 
                "2033", 
                "2034", 
                "2035", 
                "2036", 
                "2037", 
                "2038", 
                "2039", 
                "2040", 
                "2041", 
                "2042", 
                "2043", 
                "2044", 
                "2045", 
                "2046", 
                "2047", 
                "2048", 
                "2049", 
                "2050", 
                "2051", 
                "2052", 
                "2053", 
                "2054", 
                "2055", 
                "2056", 
                "2057", 
                "2058", 
                "2059", 
                "2060", 
                "2061", 
                "2062", 
                "2063", 
                "2064", 
                "2065", 
                "2066", 
                "2067", 
                "2068", 
                "2069", 
                "2070", 
                "2071", 
                "2072", 
                "2073", 
                "2074", 
                "2075", 
                "2076", 
                "2077", 
                "2078", 
                "2079", 
                "2080", 
                "2081", 
                "2082", 
                "2083", 
                "2084", 
                "2085", 
                "2086", 
                "2087", 
                "2088", 
                "2089", 
                "2090", 
                "2091", 
                "2092", 
                "2093", 
                "2094", 
                "2095", 
                "2096", 
                "2097", 
                "2098", 
                "2099"
            })
            Name (VR02, Package (0x0D)
            {
                "00", 
                "01", 
                "02", 
                "03", 
                "04", 
                "05", 
                "06", 
                "07", 
                "08", 
                "09", 
                "10", 
                "11", 
                "12"
            })
            Name (VR03, Package (0x20)
            {
                "00", 
                "01", 
                "02", 
                "03", 
                "04", 
                "05", 
                "06", 
                "07", 
                "08", 
                "09", 
                "10", 
                "11", 
                "12", 
                "13", 
                "14", 
                "15", 
                "16", 
                "17", 
                "18", 
                "19", 
                "20", 
                "21", 
                "22", 
                "23", 
                "24", 
                "25", 
                "26", 
                "27", 
                "28", 
                "29", 
                "30", 
                "31"
            })
            Name (VR04, Package (0x18)
            {
                "00", 
                "01", 
                "02", 
                "03", 
                "04", 
                "05", 
                "06", 
                "07", 
                "08", 
                "09", 
                "10", 
                "11", 
                "12", 
                "13", 
                "14", 
                "15", 
                "16", 
                "17", 
                "18", 
                "19", 
                "20", 
                "21", 
                "22", 
                "23"
            })
            Name (VR05, Package (0x3C)
            {
                "00", 
                "01", 
                "02", 
                "03", 
                "04", 
                "05", 
                "06", 
                "07", 
                "08", 
                "09", 
                "10", 
                "11", 
                "12", 
                "13", 
                "14", 
                "15", 
                "16", 
                "17", 
                "18", 
                "19", 
                "20", 
                "21", 
                "22", 
                "23", 
                "24", 
                "25", 
                "26", 
                "27", 
                "28", 
                "29", 
                "30", 
                "31", 
                "32", 
                "33", 
                "34", 
                "35", 
                "36", 
                "37", 
                "38", 
                "39", 
                "40", 
                "41", 
                "42", 
                "43", 
                "44", 
                "45", 
                "46", 
                "47", 
                "48", 
                "49", 
                "50", 
                "51", 
                "52", 
                "53", 
                "54", 
                "55", 
                "56", 
                "57", 
                "58", 
                "59"
            })
            Name (PENC, Package (0x02)
            {
                "ascii", 
                "scancode"
            })
            Name (PKBD, Package (0x03)
            {
                "us", 
                "fr", 
                "gr"
            })
            Name (PTYP, Package (0x13)
            {
                "pap", 
                "pop", 
                "uhdp1", 
                "mhdp1", 
                "uhdp2", 
                "mhdp2", 
                "uhdp3", 
                "mhdp3", 
                "uhdp4", 
                "mhdp4", 
                "udrp1", 
                "adrp1", 
                "udrp2", 
                "adrp2", 
                "udrp3", 
                "adrp3", 
                "udrp4", 
                "adrp4", 
                "smp"
            })
            Name (OPCD, Package (0x0E)
            {
                "WmiOpcodePasswordType", 
                "WmiOpcodePasswordCurrent01", 
                "WmiOpcodePasswordCurrent02", 
                "WmiOpcodePasswordCurrent03", 
                "WmiOpcodePasswordCurrent04", 
                "WmiOpcodePasswordNew01", 
                "WmiOpcodePasswordNew02", 
                "WmiOpcodePasswordNew03", 
                "WmiOpcodePasswordNew04", 
                "WmiOpcodePasswordEncode", 
                "WmiOpcodePasswordSetUpdate", 
                "WmiOpcodePasswordAdmin", 
                "WmiOpcodeTPM", 
                "WmiOpcodePasswordFree"
            })
            Name (FUNC, Package (0x06)
            {
                Package (0x02)
                {
                    0x27, 
                    "ClearSecurityChip"
                }, 

                Package (0x02)
                {
                    0x27, 
                    "ResetFingerprintData"
                }, 

                Package (0x02)
                {
                    0x27, 
                    "ResettoSetupMode"
                }, 

                Package (0x02)
                {
                    0x27, 
                    "RestoreFactoryKeys"
                }, 

                Package (0x02)
                {
                    0x27, 
                    "ClearAllSecureBootKeys"
                }, 

                Package (0x02)
                {
                    0x27, 
                    "ResetSystemToFactoryDefaults"
                }
            })
            Mutex (MWMI, 0x00)
            Name (PCFG, Buffer (0x18) {})
            Name (IBUF, Buffer (0x0600) {})
            Name (ILEN, Zero)
            Name (PSTR, Buffer (0x81) {})
            Name (ALEN, Zero)
            Method (WQA0, 1, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((WMIS (Zero, Arg0) != Zero))
                {
                    Release (MWMI)
                    Return ("")
                }

                Local0 = DerefOf (ITEM [WITM])
                Local1 = DerefOf (Local0 [Zero])
                Local2 = DerefOf (Local0 [One])
                If ((Local1 == 0x22))
                {
                    Concatenate (Local2, ",", Local6)
                    Concatenate (Local6, DerefOf (VR02 [RTC1]), Local7)
                    Concatenate (Local7, "/", Local6)
                    Concatenate (Local6, DerefOf (VR03 [RTC2]), Local7)
                    Concatenate (Local7, "/", Local6)
                    Concatenate (Local6, DerefOf (VR01 [RTC0]), Local7)
                }
                ElseIf ((Local1 == 0x23))
                {
                    Concatenate (Local2, ",", Local6)
                    Concatenate (Local6, DerefOf (VR04 [RTC0]), Local7)
                    Concatenate (Local7, ":", Local6)
                    Concatenate (Local6, DerefOf (VR05 [RTC1]), Local7)
                    Concatenate (Local7, ":", Local6)
                    Concatenate (Local6, DerefOf (VR05 [RTC2]), Local7)
                }
                ElseIf ((Local1 < 0x64))
                {
                    Concatenate (Local2, ",", Local6)
                    Local3 = DerefOf (VSEL [Local1])
                    Concatenate (Local6, DerefOf (Local3 [WSEL]), Local7)
                }
                Else
                {
                    Local3 = SizeOf (VLST)
                    If ((WLS0 <= Local3))
                    {
                        Concatenate (Local2, ",", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS0]), Local2)
                    }

                    If ((WLS1 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS1]), Local2)
                    }

                    If ((WLS2 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS2]), Local2)
                    }

                    If ((WLS3 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS3]), Local2)
                    }

                    If ((WLS4 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS4]), Local2)
                    }

                    If ((WLS5 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS5]), Local2)
                    }

                    If ((WLS6 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS6]), Local2)
                    }

                    If ((WLS7 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS7]), Local2)
                    }

                    If ((WLS8 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS8]), Local2)
                    }

                    If ((WLS9 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS9]), Local2)
                    }

                    If ((WLSA <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLSA]), Local2)
                    }

                    If ((WLSB <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLSB]), Local2)
                    }

                    If ((WLSC <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLSC]), Local2)
                    }

                    If ((WLSD <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLSD]), Local2)
                    }

                    Local7 = Local2
                }

                Release (MWMI)
                Return (Local7)
            }

            Method (WMA1, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == Zero))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = CARG (Arg2)
                    If ((Local0 == Zero))
                    {
                        Local0 = WSET (ITEM, VSEL)
                        If ((Local0 == Zero))
                        {
                            Local0 = WMIS (One, Zero)
                        }
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMA2, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local0 = CARG (Arg2)
                If ((Local0 == Zero))
                {
                    If ((ILEN != Zero))
                    {
                        Local0 = CPAS (IBUF, Zero)
                    }

                    If ((Local0 == Zero))
                    {
                        Local0 = WMIS (0x02, Zero)
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMA3, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local0 = CARG (Arg2)
                If ((Local0 == Zero))
                {
                    If ((ILEN != Zero))
                    {
                        Local0 = CPAS (IBUF, Zero)
                    }

                    If ((Local0 == Zero))
                    {
                        Local0 = WMIS (0x03, Zero)
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMA4, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local0 = CARG (Arg2)
                If ((Local0 == Zero))
                {
                    If ((ILEN != Zero))
                    {
                        Local0 = CPAS (IBUF, Zero)
                    }

                    If ((Local0 == Zero))
                    {
                        Local0 = WMIS (0x04, Zero)
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WQA5, 1, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                WMIS (0x05, Zero)
                PCFG [Zero] = WSPM /* \WSPM */
                PCFG [0x04] = WSPS /* \WSPS */
                PCFG [0x08] = WSMN /* \WSMN */
                PCFG [0x0C] = WSMX /* \WSMX */
                PCFG [0x10] = WSEN /* \WSEN */
                PCFG [0x14] = WSKB /* \WSKB */
                Release (MWMI)
                Return (PCFG) /* \_SB_.WMI1.PCFG */
            }

            Method (WMA6, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == Zero))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = CARG (Arg2)
                    If ((Local0 == Zero))
                    {
                        If ((ILEN != Zero))
                        {
                            Local0 = SPAS (IBUF)
                        }

                        If ((Local0 == Zero))
                        {
                            Local0 = WMIS (0x06, Zero)
                        }
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMA7, 3, NotSerialized)
            {
                If ((SizeOf (Arg2) == Zero))
                {
                    Return ("")
                }

                Local0 = CARG (Arg2)
                If ((Local0 == Zero))
                {
                    Local1 = GITM (IBUF, ITEM)
                    If ((Local1 == Ones))
                    {
                        Return ("")
                    }

                    Local0 = DerefOf (ITEM [Local1])
                    Local1 = DerefOf (Local0 [Zero])
                    If ((Local1 < 0x64))
                    {
                        Local3 = DerefOf (VSEL [Local1])
                        Local2 = DerefOf (Local3 [Zero])
                        Local4 = SizeOf (Local3)
                        Local5 = One
                        While ((Local5 < Local4))
                        {
                            Local6 = DerefOf (Local3 [Local5])
                            If ((SizeOf (Local6) != Zero))
                            {
                                Concatenate (Local2, ",", Local7)
                                Concatenate (Local7, Local6, Local2)
                            }

                            Local5++
                        }
                    }
                    Else
                    {
                        Local2 = DerefOf (VLST [Zero])
                        Local4 = SizeOf (VLST)
                        Local5 = One
                        While ((Local5 < Local4))
                        {
                            Local6 = DerefOf (VLST [Local5])
                            Concatenate (Local2, ",", Local7)
                            Concatenate (Local7, Local6, Local2)
                            Local5++
                        }
                    }
                }

                Return (Local2)
            }

            Method (WQF1, 1, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((WMIS (0x10, Arg0) != Zero))
                {
                    Release (MWMI)
                    Return ("")
                }

                Local0 = DerefOf (FUNC [WITM])
                Local1 = DerefOf (Local0 [Zero])
                Local2 = DerefOf (Local0 [One])
                Concatenate (Local2, ",", Local6)
                Local3 = DerefOf (VSEL [Local1])
                Concatenate (Local6, DerefOf (Local3 [WSEL]), Local7)
                Release (MWMI)
                Return (Local7)
            }

            Method (WMF2, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == Zero))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = CARG (Arg2)
                    If ((Local0 == Zero))
                    {
                        Local0 = WSET (FUNC, VSEL)
                        If ((Local0 == Zero))
                        {
                            Local0 = WMIS (0x11, Zero)
                        }
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMF0, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == Zero))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = CARG (Arg2)
                    If ((Local0 == Zero))
                    {
                        Local6 = GSEL (OPCD, IBUF, Zero, One)
                        If ((Local6 != Ones))
                        {
                            Local4 = DerefOf (OPCD [Local6])
                            Local2 = SizeOf (Local4)
                            Local3 = DerefOf (IBUF [Local2])
                            If (((Local3 == 0x2C) || (Local3 == 0x3A)))
                            {
                                Local2++
                            }

                            Local0 = Zero
                            If ((Local6 == Zero))
                            {
                                WPTY = 0xFF
                                Local7 = GSEL (PTYP, IBUF, Local2, One)
                                If ((Local7 != Ones))
                                {
                                    WPTY = Local7
                                }
                                Else
                                {
                                    Local0 = 0x02
                                }
                            }
                            ElseIf ((Local6 == One))
                            {
                                PSTR = Zero
                                Local1 = GPAO (IBUF, Local2)
                                If ((Local1 == Ones))
                                {
                                    Local0 = 0x02
                                }

                                If ((Local0 == Zero))
                                {
                                    WPAS = PSTR /* \_SB_.WMI1.PSTR */
                                }
                            }
                            ElseIf ((Local6 == 0x05))
                            {
                                PSTR = Zero
                                Local1 = GPAO (IBUF, Local2)
                                If ((Local1 == Ones))
                                {
                                    Local0 = 0x02
                                }

                                If ((Local1 == Zero))
                                {
                                    PSTR = Zero
                                }

                                If ((Local0 == Zero))
                                {
                                    WPNW = PSTR /* \_SB_.WMI1.PSTR */
                                }
                            }
                            ElseIf ((Local6 == 0x0A))
                            {
                                Local0 = Zero
                            }
                            ElseIf ((Local6 == 0x0B))
                            {
                                PSTR = Zero
                                Local1 = GPAO (IBUF, Local2)
                                If ((Local1 == Ones))
                                {
                                    Local0 = 0x02
                                }

                                If ((Local1 == Zero))
                                {
                                    Local0 = 0x02
                                }

                                If ((Local0 == Zero))
                                {
                                    WPAS = PSTR /* \_SB_.WMI1.PSTR */
                                }
                            }
                            Else
                            {
                                Local0 = 0x02
                            }

                            If ((Local0 == Zero))
                            {
                                Local0 = WMIS (0x0F, Local6)
                            }
                        }
                        Else
                        {
                            Local0 = 0x02
                        }
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMF3, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                WEXF = One
                If ((SizeOf (Arg2) == Zero))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = CARG (Arg2)
                    If ((Local0 == Zero))
                    {
                        CBFF = Zero
                        CBFF = IBUF /* \_SB_.WMI1.IBUF */
                        Local0 = WSET (ITEM, VSEL)
                        If ((Local0 == Zero))
                        {
                            Local0 = WMIS (One, Zero)
                        }

                        CBFF = Zero
                    }
                }

                WEXF = Zero
                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMF4, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                WEXF = One
                Local0 = CARG (Arg2)
                If ((Local0 == Zero))
                {
                    If ((ILEN != Zero))
                    {
                        CBFF = Zero
                        CBFF = IBUF /* \_SB_.WMI1.IBUF */
                        Local0 = WMIS (0x02, Zero)
                    }
                    Else
                    {
                        Local0 = 0x02
                    }
                }

                CBFF = Zero
                WEXF = Zero
                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMF5, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                WEXF = One
                Local0 = CARG (Arg2)
                If ((Local0 == Zero))
                {
                    If ((ILEN != Zero))
                    {
                        CBFF = IBUF /* \_SB_.WMI1.IBUF */
                        Local0 = WMIS (0x03, Zero)
                    }
                    Else
                    {
                        Local0 = 0x02
                    }
                }

                CBFF = Zero
                WEXF = Zero
                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMF6, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                WEXF = One
                Local0 = CARG (Arg2)
                If ((Local0 == Zero))
                {
                    If ((ILEN != Zero))
                    {
                        CBFF = IBUF /* \_SB_.WMI1.IBUF */
                        Local0 = WMIS (0x04, Zero)
                    }
                    Else
                    {
                        Local0 = 0x02
                    }
                }

                CBFF = Zero
                WEXF = Zero
                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMF7, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                WEXF = One
                If ((SizeOf (Arg2) == Zero))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = CARG (Arg2)
                    If ((Local0 == Zero))
                    {
                        If ((ILEN != Zero))
                        {
                            CBFF = IBUF /* \_SB_.WMI1.IBUF */
                            Local0 = WMIS (0x06, Zero)
                        }
                        Else
                        {
                            Local0 = 0x02
                        }
                    }
                }

                CBFF = Zero
                WEXF = Zero
                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMF8, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                WEXF = One
                If ((SizeOf (Arg2) == Zero))
                {
                    Local0 = 0x02
                }
                Else
                {
                    CBFF = IBUF /* \_SB_.WMI1.IBUF */
                    Local0 = CARG (Arg2)
                    If ((Local0 == Zero))
                    {
                        CBFF = IBUF /* \_SB_.WMI1.IBUF */
                        Local0 = WSET (FUNC, VSEL)
                        If ((Local0 == Zero))
                        {
                            Local0 = WMIS (0x11, Zero)
                        }
                    }
                }

                CBFF = Zero
                WEXF = Zero
                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMB0, 3, NotSerialized)
            {
                Return (DerefOf (RETN [One]))
            }

            Method (CARG, 1, NotSerialized)
            {
                Local0 = SizeOf (Arg0)
                If ((Local0 == Zero))
                {
                    IBUF = Zero
                    ILEN = Zero
                    Return (Zero)
                }

                If ((ObjectType (Arg0) != 0x02))
                {
                    Return (0x02)
                }

                If ((WEXF == One))
                {
                    If ((Local0 >= 0x05FF))
                    {
                        Return (0x02)
                    }
                }
                ElseIf ((Local0 >= 0x01FF))
                {
                    Return (0x02)
                }

                IBUF = Arg0
                Local0--
                Local1 = DerefOf (IBUF [Local0])
                If (((Local1 == 0x3B) || (Local1 == 0x2A)))
                {
                    IBUF [Local0] = Zero
                    ILEN = Local0
                }
                Else
                {
                    ILEN = SizeOf (Arg0)
                }

                Return (Zero)
            }

            Method (SCMP, 4, NotSerialized)
            {
                Local0 = SizeOf (Arg0)
                If ((Local0 == Zero))
                {
                    Return (Zero)
                }

                Local0++
                Name (STR1, Buffer (Local0) {})
                STR1 = Arg0
                Local0--
                If ((ALEN != Zero))
                {
                    Local0 = ALEN /* \_SB_.WMI1.ALEN */
                }

                Local1 = Zero
                Local2 = Arg2
                While ((Local1 < Local0))
                {
                    Local3 = DerefOf (STR1 [Local1])
                    Local4 = DerefOf (Arg1 [Local2])
                    If ((Arg3 == One))
                    {
                        If ((Local3 >= 0x41))
                        {
                            If ((Local3 <= 0x5A))
                            {
                                Local3 += 0x20
                            }
                        }

                        If ((Local4 >= 0x41))
                        {
                            If ((Local4 <= 0x5A))
                            {
                                Local4 += 0x20
                            }
                        }
                    }

                    If ((Local3 != Local4))
                    {
                        Return (Zero)
                    }

                    Local1++
                    Local2++
                }

                If ((ALEN != Zero))
                {
                    Return (One)
                }

                Local4 = DerefOf (Arg1 [Local2])
                If ((Local4 == Zero))
                {
                    Return (One)
                }

                If (((Local4 == 0x2C) || (Local4 == 0x3A)))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (GITM, 2, NotSerialized)
            {
                Local0 = Zero
                Local1 = SizeOf (Arg1)
                While ((Local0 < Local1))
                {
                    Local3 = DerefOf (DerefOf (Arg1 [Local0]) [One])
                    If (SCMP (Local3, Arg0, Zero, Zero))
                    {
                        Return (Local0)
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (GSEL, 4, NotSerialized)
            {
                Local0 = Zero
                Local1 = SizeOf (Arg0)
                While ((Local0 < Local1))
                {
                    Local2 = DerefOf (Arg0 [Local0])
                    If (SCMP (Local2, Arg1, Arg2, Arg3))
                    {
                        Return (Local0)
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (SLEN, 2, NotSerialized)
            {
                Local0 = DerefOf (Arg0 [Arg1])
                Return (SizeOf (Local0))
            }

            Method (CLRP, 0, NotSerialized)
            {
                WPAS = Zero
                WPNW = Zero
            }

            Method (GPAS, 2, NotSerialized)
            {
                Local0 = Arg1
                Local1 = Zero
                While ((Local1 <= 0x80))
                {
                    Local2 = DerefOf (Arg0 [Local0])
                    If (((Local2 == 0x2C) || (Local2 == Zero)))
                    {
                        PSTR [Local1] = Zero
                        Return (Local1)
                    }

                    PSTR [Local1] = Local2
                    Local0++
                    Local1++
                }

                PSTR [Local1] = Zero
                Return (Ones)
            }

            Method (GPAO, 2, NotSerialized)
            {
                Local0 = Arg1
                Local1 = Zero
                While ((Local1 <= 0x80))
                {
                    Local2 = DerefOf (Arg0 [Local0])
                    If ((Local2 == Zero))
                    {
                        PSTR [Local1] = Zero
                        Return (Local1)
                    }

                    PSTR [Local1] = Local2
                    Local0++
                    Local1++
                }

                Local1--
                PSTR [Local1] = Zero
                Return (Ones)
            }

            Method (CPAS, 2, NotSerialized)
            {
                CLRP ()
                Local0 = Arg1
                Local1 = GPAS (Arg0, Local0)
                If ((Local1 == Ones))
                {
                    Return (0x02)
                }

                If ((Local1 == Zero))
                {
                    Return (0x02)
                }

                WPAS = PSTR /* \_SB_.WMI1.PSTR */
                Local0 += Local1
                Local0++
                Local6 = GSEL (PENC, Arg0, Local0, Zero)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                WENC = Local6
                If ((Local6 == Zero))
                {
                    Local0 += SLEN (PENC, Zero)
                    If ((DerefOf (Arg0 [Local0]) != 0x2C))
                    {
                        Return (0x02)
                    }

                    Local0++
                    Local6 = GSEL (PKBD, Arg0, Local0, Zero)
                    If ((Local6 == Ones))
                    {
                        Return (0x02)
                    }

                    WKBD = Local6
                }

                Return (Zero)
            }

            Method (SPAS, 1, NotSerialized)
            {
                CLRP ()
                Local6 = GSEL (PTYP, Arg0, Zero, Zero)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                WPTY = Local6
                Local0 = SLEN (PTYP, Local6)
                If ((DerefOf (Arg0 [Local0]) != 0x2C))
                {
                    Return (0x02)
                }

                Local0++
                PSTR = Zero
                Local1 = GPAS (Arg0, Local0)
                If ((Local1 == Ones))
                {
                    Return (0x02)
                }

                WPAS = PSTR /* \_SB_.WMI1.PSTR */
                Local0 += Local1
                If ((DerefOf (Arg0 [Local0]) != 0x2C))
                {
                    Return (0x02)
                }

                Local0++
                PSTR = Zero
                Local1 = GPAS (Arg0, Local0)
                If ((Local1 == Ones))
                {
                    Return (0x02)
                }

                If ((Local1 == Zero))
                {
                    PSTR = Zero
                }

                WPNW = PSTR /* \_SB_.WMI1.PSTR */
                Local0 += Local1
                Local0++
                Local6 = GSEL (PENC, Arg0, Local0, Zero)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                WENC = Local6
                If ((Local6 == Zero))
                {
                    Local0 += SLEN (PENC, Zero)
                    If ((DerefOf (Arg0 [Local0]) != 0x2C))
                    {
                        Return (0x02)
                    }

                    Local0++
                    Local6 = GSEL (PKBD, Arg0, Local0, Zero)
                    If ((Local6 == Ones))
                    {
                        Return (0x02)
                    }

                    WKBD = Local6
                }

                Return (Zero)
            }

            Method (WSET, 2, NotSerialized)
            {
                Local0 = ILEN /* \_SB_.WMI1.ILEN */
                Local0++
                Local1 = GITM (IBUF, Arg0)
                If ((Local1 == Ones))
                {
                    Return (0x02)
                }

                WITM = Local1
                Local3 = DerefOf (Arg0 [Local1])
                Local4 = DerefOf (Local3 [One])
                Local2 = SizeOf (Local4)
                Local2++
                Local4 = DerefOf (Local3 [Zero])
                If ((Local4 == 0x22))
                {
                    If ((ALMD (Local2) != Zero))
                    {
                        Return (0x02)
                    }

                    Local2 += 0x0A
                    Local4 = DerefOf (IBUF [Local2])
                }
                ElseIf ((Local4 == 0x23))
                {
                    If ((ALMT (Local2) != Zero))
                    {
                        Return (0x02)
                    }

                    Local2 += 0x08
                    Local4 = DerefOf (IBUF [Local2])
                }
                ElseIf ((Local4 < 0x64))
                {
                    Local5 = DerefOf (Arg1 [Local4])
                    Local6 = GSEL (Local5, IBUF, Local2, Zero)
                    If ((Local6 == Ones))
                    {
                        Return (0x02)
                    }

                    WSEL = Local6
                    Local2 += SLEN (Local5, Local6)
                    Local4 = DerefOf (IBUF [Local2])
                }
                Else
                {
                    WLS0 = 0x3F
                    WLS1 = 0x3F
                    WLS2 = 0x3F
                    WLS3 = 0x3F
                    WLS4 = 0x3F
                    WLS5 = 0x3F
                    WLS6 = 0x3F
                    WLS7 = 0x3F
                    WLS8 = 0x3F
                    WLS9 = 0x3F
                    WLSA = 0x3F
                    WLSB = 0x3F
                    WLSC = 0x3F
                    WLSD = 0x3F
                    Local6 = GSEL (VLST, IBUF, Local2, Zero)
                    If ((Local6 == Ones))
                    {
                        Return (0x02)
                    }

                    WLS0 = Local6
                    Local2 += SLEN (VLST, Local6)
                    Local4 = DerefOf (IBUF [Local2])
                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, Zero)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS1 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, Zero)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS2 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, Zero)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS3 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, Zero)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS4 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, Zero)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS5 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, Zero)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS6 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, Zero)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS7 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, Zero)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS8 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, Zero)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS9 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, Zero)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLSA = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, Zero)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLSB = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, Zero)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLSC = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2, Zero)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLSD = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }
                }

                If ((WEXF == Zero))
                {
                    If (((Local4 == 0x2C) && (Local2 < Local0)))
                    {
                        Local2++
                        Local0 = CPAS (IBUF, Local2)
                        If ((Local0 != Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Return (Zero)
            }

            Method (ALMD, 1, NotSerialized)
            {
                Local0 = Arg0
                Local1 = VR02 /* \_SB_.WMI1.VR02 */
                ALEN = 0x02
                Local2 = GSEL (Local1, IBUF, Local0, Zero)
                ALEN = Zero
                If ((Local2 == Ones))
                {
                    Return (0x02)
                }

                RTC1 = Local2
                Local0++
                Local0++
                Local3 = DerefOf (IBUF [Local0])
                If ((Local3 != 0x2F))
                {
                    Return (0x02)
                }

                Local0++
                Local1 = VR03 /* \_SB_.WMI1.VR03 */
                ALEN = 0x02
                Local2 = GSEL (Local1, IBUF, Local0, Zero)
                ALEN = Zero
                If ((Local2 == Ones))
                {
                    Return (0x02)
                }

                RTC2 = Local2
                Local0++
                Local0++
                Local3 = DerefOf (IBUF [Local0])
                If ((Local3 != 0x2F))
                {
                    Return (0x02)
                }

                Local0++
                Local1 = VR01 /* \_SB_.WMI1.VR01 */
                Local2 = GSEL (Local1, IBUF, Local0, Zero)
                If ((Local2 == Ones))
                {
                    Return (0x02)
                }

                RTC0 = Local2
                Return (Zero)
            }

            Method (ALMT, 1, NotSerialized)
            {
                Local0 = Arg0
                Local1 = VR04 /* \_SB_.WMI1.VR04 */
                ALEN = 0x02
                Local2 = GSEL (Local1, IBUF, Local0, Zero)
                ALEN = Zero
                If ((Local2 == Ones))
                {
                    Return (0x02)
                }

                RTC0 = Local2
                Local0++
                Local0++
                Local3 = DerefOf (IBUF [Local0])
                If ((Local3 != 0x3A))
                {
                    Return (0x02)
                }

                Local0++
                Local1 = VR05 /* \_SB_.WMI1.VR05 */
                ALEN = 0x02
                Local2 = GSEL (Local1, IBUF, Local0, Zero)
                ALEN = Zero
                If ((Local2 == Ones))
                {
                    Return (0x02)
                }

                RTC1 = Local2
                Local0++
                Local0++
                Local3 = DerefOf (IBUF [Local0])
                If ((Local3 != 0x3A))
                {
                    Return (0x02)
                }

                Local0++
                Local1 = VR05 /* \_SB_.WMI1.VR05 */
                Local2 = GSEL (Local1, IBUF, Local0, Zero)
                If ((Local2 == Ones))
                {
                    Return (0x02)
                }

                RTC2 = Local2
                Return (Zero)
            }

            Name (WQBA, Buffer (0x0F55)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x45, 0x0F, 0x00, 0x00, 0xE0, 0x79, 0x00, 0x00,  // E....y..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xDF, 0xBA, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x27, 0x10, 0x0A, 0x0D, 0x21, 0x02, 0x0B,  // .'...!..
                /* 0028 */  0x83, 0x50, 0x4C, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PL...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x0E, 0x88, 0x14, 0x40, 0x48, 0x26, 0x84,  // 1...@H&.
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0xA2, 0xC9, 0xA0, 0x00, 0xA7,  // ........
                /* 0060 */  0x08, 0x82, 0xB4, 0x65, 0x01, 0xBA, 0x05, 0xF8,  // ...e....
                /* 0068 */  0x16, 0xA0, 0x1D, 0x42, 0x68, 0x15, 0x0A, 0x30,  // ...Bh..0
                /* 0070 */  0x29, 0xC0, 0x27, 0x98, 0x2C, 0x0A, 0x90, 0x0D,  // ).'.,...
                /* 0078 */  0x26, 0xDB, 0x70, 0x64, 0x18, 0x4C, 0xE4, 0x18,  // &.pd.L..
                /* 0080 */  0x50, 0x62, 0xC6, 0x80, 0xD2, 0x39, 0x05, 0xD9,  // Pb...9..
                /* 0088 */  0x04, 0x16, 0x74, 0xA1, 0x28, 0x9A, 0x46, 0x94,  // ..t.(.F.
                /* 0090 */  0x04, 0x07, 0x75, 0x0C, 0x11, 0x82, 0x97, 0x2B,  // ..u....+
                /* 0098 */  0x40, 0xF2, 0x04, 0xA4, 0x79, 0x5E, 0x5A, 0xE9,  // @...y^Z.
                /* 00A0 */  0x41, 0x1C, 0x02, 0x1B, 0x01, 0x8F, 0x22, 0x01,  // A.....".
                /* 00A8 */  0x84, 0xC5, 0x58, 0xA6, 0xC4, 0xC3, 0xA0, 0x3C,  // ..X....<
                /* 00B0 */  0x80, 0x48, 0xCE, 0x50, 0x51, 0xC0, 0xF6, 0x3A,  // .H.PQ..:
                /* 00B8 */  0x11, 0x0D, 0xEB, 0x38, 0x99, 0x24, 0x38, 0xD4,  // ...8.$8.
                /* 00C0 */  0x28, 0x2D, 0x51, 0x80, 0xF9, 0x91, 0x69, 0x22,  // (-Q...i"
                /* 00C8 */  0xC7, 0xD6, 0xF4, 0x88, 0x05, 0xC9, 0xA4, 0x0D,  // ........
                /* 00D0 */  0x05, 0x35, 0x74, 0x4F, 0xEB, 0xA4, 0x3C, 0xD1,  // .5tO..<.
                /* 00D8 */  0x88, 0x07, 0x65, 0x98, 0x04, 0x1E, 0x05, 0x43,  // ..e....C
                /* 00E0 */  0xE3, 0x04, 0x65, 0x41, 0xC8, 0xC1, 0x40, 0x51,  // ..eA..@Q
                /* 00E8 */  0x80, 0x27, 0xE1, 0x39, 0x16, 0x2F, 0x40, 0xF8,  // .'.9./@.
                /* 00F0 */  0x8C, 0xC9, 0x51, 0x20, 0x46, 0x02, 0x1F, 0x09,  // ..Q F...
                /* 00F8 */  0x3C, 0x9A, 0x63, 0xC6, 0x02, 0x85, 0x0B, 0x78,  // <.c....x
                /* 0100 */  0x3E, 0xC7, 0x10, 0x39, 0xEE, 0xA1, 0xC6, 0x38,  // >..9...8
                /* 0108 */  0x8A, 0xC8, 0x09, 0xDE, 0x01, 0xA2, 0x18, 0xAD,  // ........
                /* 0110 */  0xA0, 0x79, 0x0B, 0x31, 0x58, 0x34, 0x83, 0xF5,  // .y.1X4..
                /* 0118 */  0x0C, 0x4E, 0x06, 0x9D, 0xE0, 0xFF, 0x7F, 0x04,  // .N......
                /* 0120 */  0x5C, 0x06, 0x84, 0x3C, 0x0A, 0xB0, 0x3A, 0x28,  // \..<..:(
                /* 0128 */  0x4D, 0xC3, 0x04, 0xDD, 0x0B, 0xB0, 0x26, 0xC0,  // M.....&.
                /* 0130 */  0x98, 0x00, 0x8D, 0x18, 0x52, 0x26, 0xC0, 0xD9,  // ....R&..
                /* 0138 */  0x7D, 0x41, 0x33, 0x6A, 0x4B, 0x80, 0x39, 0x01,  // }A3jK.9.
                /* 0140 */  0xDA, 0x04, 0x78, 0x43, 0x10, 0xCA, 0x79, 0x46,  // ..xC..yF
                /* 0148 */  0x39, 0x96, 0x53, 0x8C, 0xF2, 0x30, 0x10, 0xF3,  // 9.S..0..
                /* 0150 */  0x65, 0x20, 0x68, 0x94, 0x18, 0x31, 0xCF, 0x25,  // e h..1.%
                /* 0158 */  0xAE, 0x61, 0x23, 0xC4, 0x08, 0x79, 0x0A, 0x81,  // .a#..y..
                /* 0160 */  0xE2, 0xB6, 0x3F, 0x08, 0x32, 0x68, 0xDC, 0xE8,  // ..?.2h..
                /* 0168 */  0x7D, 0x5A, 0x38, 0xAB, 0x13, 0x38, 0xFA, 0x27,  // }Z8..8.'
                /* 0170 */  0x05, 0x13, 0x78, 0xCA, 0x07, 0xF6, 0x6C, 0x70,  // ..x...lp
                /* 0178 */  0x02, 0xC7, 0x1A, 0x35, 0xC6, 0xA9, 0x24, 0x70,  // ...5..$p
                /* 0180 */  0xEC, 0x07, 0x84, 0x34, 0x80, 0x28, 0x12, 0x3C,  // ...4.(.<
                /* 0188 */  0xEA, 0xB4, 0xE0, 0x73, 0x81, 0x87, 0x76, 0xD0,  // ...s..v.
                /* 0190 */  0x9E, 0xE3, 0x09, 0x04, 0x39, 0x84, 0x23, 0x78,  // ....9.#x
                /* 0198 */  0x62, 0x78, 0x20, 0xF0, 0x18, 0xD8, 0x4D, 0xC1,  // bx ...M.
                /* 01A0 */  0x47, 0x00, 0x9F, 0x10, 0xF0, 0xAE, 0x01, 0x75,  // G......u
                /* 01A8 */  0x35, 0x78, 0x30, 0x60, 0x83, 0x0E, 0x87, 0x19,  // 5x0`....
                /* 01B0 */  0xAF, 0x87, 0x1F, 0xEE, 0x04, 0x4E, 0xF2, 0x01,  // .....N..
                /* 01B8 */  0x83, 0x1F, 0x36, 0x3C, 0x38, 0xDC, 0x3C, 0x4F,  // ..6<8.<O
                /* 01C0 */  0xE6, 0xC8, 0x4A, 0x15, 0x60, 0xF6, 0x70, 0xA0,  // ..J.`.p.
                /* 01C8 */  0x83, 0x84, 0x4F, 0x1B, 0xEC, 0x0C, 0x80, 0x91,  // ..O.....
                /* 01D0 */  0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED, 0x71, 0xBF,  // ?.....q.
                /* 01D8 */  0x74, 0x18, 0xF2, 0x39, 0xE1, 0xB0, 0x98, 0xD8,  // t..9....
                /* 01E0 */  0x53, 0x07, 0x1D, 0x0F, 0xF8, 0x2F, 0x23, 0xCF,  // S..../#.
                /* 01E8 */  0x19, 0x9E, 0xBE, 0xE7, 0x6B, 0x82, 0x61, 0x07,  // ....k.a.
                /* 01F0 */  0x8E, 0x1E, 0x88, 0xA1, 0x1F, 0x36, 0x0E, 0xE3,  // .....6..
                /* 01F8 */  0x34, 0x7C, 0xFF, 0xF0, 0x79, 0x01, 0xC6, 0x29,  // 4|..y..)
                /* 0200 */  0xC0, 0x23, 0xF7, 0xFF, 0xFF, 0x90, 0xE2, 0xD3,  // .#......
                /* 0208 */  0x04, 0x3F, 0x5A, 0xF8, 0x34, 0xC1, 0xAE, 0x07,  // .?Z.4...
                /* 0210 */  0xA7, 0xF1, 0x1C, 0xE0, 0xE1, 0x9C, 0x95, 0x0F,  // ........
                /* 0218 */  0x13, 0x60, 0xBB, 0x9F, 0xB0, 0x11, 0xBD, 0x5B,  // .`.....[
                /* 0220 */  0x78, 0x34, 0xD8, 0x53, 0x00, 0xF8, 0xCE, 0x2F,  // x4.S.../
                /* 0228 */  0xE0, 0xBC, 0x6B, 0xB0, 0xC1, 0xC2, 0x38, 0xBF,  // ..k...8.
                /* 0230 */  0x00, 0x8F, 0x13, 0x82, 0x87, 0xC0, 0x0F, 0x12,  // ........
                /* 0238 */  0x1E, 0x02, 0x1F, 0xC0, 0xF3, 0xC7, 0x19, 0x5A,  // .......Z
                /* 0240 */  0xE9, 0xBC, 0x90, 0x03, 0x83, 0x77, 0xCE, 0x81,  // .....w..
                /* 0248 */  0x31, 0x0A, 0x9E, 0xE7, 0xB1, 0x61, 0x02, 0x05,  // 1....a..
                /* 0250 */  0x79, 0x0D, 0x28, 0xD4, 0xB3, 0x80, 0xC2, 0xF8,  // y.(.....
                /* 0258 */  0x54, 0x03, 0xBC, 0xFE, 0xFF, 0xA7, 0x1A, 0xE0,  // T.......
                /* 0260 */  0x72, 0x38, 0xC0, 0x9D, 0x1C, 0xE0, 0xDE, 0x0B,  // r8......
                /* 0268 */  0xD8, 0xC5, 0xE1, 0xB9, 0x06, 0xAE, 0xE8, 0x73,  // .......s
                /* 0270 */  0x0D, 0xD4, 0x7B, 0x4B, 0x71, 0x63, 0xD4, 0x35,  // ..{Kqc.5
                /* 0278 */  0x26, 0xC8, 0xA3, 0xC0, 0x23, 0x4D, 0x94, 0xE7,  // &...#M..
                /* 0280 */  0x99, 0x77, 0x99, 0x08, 0xCF, 0x36, 0xBE, 0xD6,  // .w...6..
                /* 0288 */  0x78, 0x0A, 0x71, 0x7C, 0xAD, 0x31, 0xE2, 0xCB,  // x.q|.1..
                /* 0290 */  0xC4, 0xBB, 0x8D, 0x71, 0x0F, 0xEE, 0xB1, 0xE6,  // ...q....
                /* 0298 */  0x21, 0xC7, 0x20, 0x47, 0x13, 0xE1, 0xC5, 0x20,  // !. G... 
                /* 02A0 */  0xE0, 0xE3, 0x8D, 0x8F, 0x35, 0xE0, 0x15, 0xF3,  // ....5...
                /* 02A8 */  0x42, 0x91, 0x85, 0x63, 0x0D, 0xA0, 0xF1, 0xFF,  // B..c....
                /* 02B0 */  0x7F, 0xAC, 0x01, 0x6E, 0x58, 0x0F, 0x28, 0xE0,  // ...nX.(.
                /* 02B8 */  0x3B, 0x32, 0xB0, 0x1B, 0x0A, 0xBC, 0x13, 0x0A,  // ;2......
                /* 02C0 */  0xE0, 0x27, 0xF1, 0x0B, 0x40, 0x47, 0x0E, 0xA7,  // .'..@G..
                /* 02C8 */  0x05, 0x91, 0x8D, 0x37, 0x80, 0x4F, 0x01, 0x54,  // ...7.O.T
                /* 02D0 */  0x0D, 0x90, 0xA6, 0x09, 0x9B, 0x60, 0x7A, 0x72,  // .....`zr
                /* 02D8 */  0xC1, 0xFB, 0x48, 0xE0, 0xDC, 0x24, 0x4A, 0x3E,  // ..H..$J>
                /* 02E0 */  0x2C, 0x0A, 0xE7, 0xAC, 0x07, 0x11, 0x0A, 0x62,  // ,......b
                /* 02E8 */  0x40, 0x07, 0x39, 0x4E, 0xA0, 0xCF, 0x28, 0x3E,  // @.9N..(>
                /* 02F0 */  0x88, 0x9C, 0xE8, 0x13, 0xA1, 0x07, 0xE5, 0x61,  // .......a
                /* 02F8 */  0xBC, 0xA3, 0xB0, 0x13, 0x88, 0x0F, 0x13, 0x1E,  // ........
                /* 0300 */  0xBB, 0x8F, 0x09, 0xFC, 0x1F, 0xE3, 0xD9, 0x18,  // ........
                /* 0308 */  0xDD, 0x6A, 0x30, 0xF4, 0xFF, 0x3F, 0xA7, 0x70,  // .j0..?.p
                /* 0310 */  0x30, 0x1F, 0x44, 0x38, 0x41, 0x5D, 0x37, 0x09,  // 0.D8A]7.
                /* 0318 */  0x90, 0xE9, 0x3B, 0x2A, 0x80, 0x02, 0xC8, 0xF7,  // ..;*....
                /* 0320 */  0x02, 0x9F, 0x03, 0x9E, 0x0D, 0xD8, 0x18, 0x1E,  // ........
                /* 0328 */  0x05, 0x8C, 0x66, 0x74, 0x1E, 0x7E, 0xB2, 0xA8,  // ..ft.~..
                /* 0330 */  0xB8, 0x93, 0xA5, 0x20, 0x9E, 0xAC, 0xA3, 0x4C,  // ... ...L
                /* 0338 */  0x16, 0x3D, 0x13, 0xDF, 0x2B, 0x3C, 0xA3, 0x37,  // .=..+<.7
                /* 0340 */  0x2D, 0xCF, 0xD1, 0x13, 0xF6, 0x3D, 0x04, 0xD6,  // -....=..
                /* 0348 */  0x61, 0x20, 0xE4, 0x83, 0x81, 0xA7, 0x61, 0x38,  // a ....a8
                /* 0350 */  0x4F, 0x96, 0xC3, 0x79, 0xB2, 0x7C, 0x2C, 0xBE,  // O..y.|,.
                /* 0358 */  0x86, 0x80, 0x4F, 0xE0, 0x6C, 0x41, 0x0E, 0x8F,  // ..O.lA..
                /* 0360 */  0x89, 0x35, 0x2A, 0x7A, 0x15, 0xF2, 0xF0, 0xF8,  // .5*z....
                /* 0368 */  0xE5, 0xC0, 0xF3, 0x79, 0x46, 0x38, 0xCA, 0x27,  // ...yF8.'
                /* 0370 */  0x09, 0x1C, 0xC6, 0x33, 0x89, 0x87, 0xE8, 0x5B,  // ...3...[
                /* 0378 */  0x11, 0xAC, 0x89, 0x9C, 0xB4, 0x6F, 0x0B, 0x27,  // .....o.'
                /* 0380 */  0x1B, 0xF4, 0xF5, 0x0C, 0x73, 0x2B, 0x82, 0xFD,  // ....s+..
                /* 0388 */  0xFF, 0xBF, 0x15, 0xC1, 0xB9, 0xA0, 0xC1, 0xCC,  // ........
                /* 0390 */  0x74, 0xAF, 0x42, 0xC5, 0xBA, 0x57, 0x01, 0x62,  // t.B..W.b
                /* 0398 */  0x87, 0xF5, 0xDA, 0xE3, 0x83, 0x15, 0xDC, 0x7B,  // .......{
                /* 03A0 */  0x15, 0xDC, 0x4B, 0xD5, 0xB3, 0xC2, 0x31, 0x86,  // ..K...1.
                /* 03A8 */  0x7F, 0x98, 0x8A, 0x71, 0x4A, 0xAF, 0x9D, 0x06,  // ...qJ...
                /* 03B0 */  0x0A, 0x13, 0x25, 0xDE, 0x7B, 0x95, 0xC7, 0xF8,  // ..%.{...
                /* 03B8 */  0x5E, 0xC5, 0xAE, 0x50, 0x61, 0x62, 0xBD, 0x5C,  // ^..Pab.\
                /* 03C0 */  0x19, 0xF5, 0x75, 0x22, 0x5C, 0xA0, 0x20, 0x91,  // ..u"\. .
                /* 03C8 */  0x5E, 0xAD, 0xA2, 0x44, 0x8E, 0x6F, 0xC8, 0xF7,  // ^..D.o..
                /* 03D0 */  0x2A, 0xF0, 0xCA, 0xB9, 0x57, 0x81, 0xEC, 0xFF,  // *...W...
                /* 03D8 */  0x7F, 0xAF, 0x02, 0xCC, 0xA3, 0xBD, 0x57, 0x81,  // ......W.
                /* 03E0 */  0xF1, 0xDA, 0xC0, 0x6E, 0x48, 0xB0, 0x80, 0x5E,  // ...nH..^
                /* 03E8 */  0xAC, 0x00, 0x43, 0x99, 0x2F, 0x56, 0x34, 0xEF,  // ..C./V4.
                /* 03F0 */  0xC5, 0x0A, 0xF1, 0xFF, 0x3F, 0x97, 0x30, 0x3D,  // ....?.0=
                /* 03F8 */  0x17, 0x2B, 0x32, 0x4F, 0xF8, 0x37, 0x2B, 0x80,  // .+2O.7+.
                /* 0400 */  0xD3, 0xFF, 0xFF, 0x9B, 0x15, 0x60, 0xEC, 0x5E,  // .....`.^
                /* 0408 */  0x84, 0x39, 0x5A, 0xC1, 0x4B, 0x79, 0xB3, 0xA2,  // .9Z.Ky..
                /* 0410 */  0x71, 0x96, 0xA1, 0x80, 0x0B, 0xA2, 0x30, 0xBE,  // q.....0.
                /* 0418 */  0x59, 0x01, 0x8E, 0xAE, 0x2B, 0xB8, 0x21, 0xC3,  // Y...+.!.
                /* 0420 */  0x05, 0x8B, 0x12, 0xCC, 0x87, 0x10, 0x4F, 0xE7,  // ......O.
                /* 0428 */  0x88, 0x1F, 0x12, 0x5E, 0x02, 0x1E, 0x73, 0x3C,  // ...^..s<
                /* 0430 */  0xE0, 0x07, 0x02, 0x5F, 0xAE, 0xC0, 0xF4, 0xFF,  // ..._....
                /* 0438 */  0x27, 0xF0, 0xC9, 0xF7, 0x2C, 0xDF, 0xA6, 0xDE,  // '...,...
                /* 0440 */  0x7B, 0xF9, 0x01, 0xEB, 0xBD, 0xCA, 0x87, 0xDF,  // {.......
                /* 0448 */  0x58, 0xEF, 0x0C, 0x2F, 0x57, 0x1E, 0x49, 0x94,  // X../W.I.
                /* 0450 */  0x93, 0x08, 0xE5, 0xBB, 0xD5, 0x7B, 0x95, 0x51,  // .....{.Q
                /* 0458 */  0x22, 0xBE, 0x10, 0xFB, 0x14, 0x6C, 0x68, 0xA3,  // "....lh.
                /* 0460 */  0x3C, 0x55, 0x44, 0x37, 0xDE, 0xCB, 0x15, 0x78,  // <UD7...x
                /* 0468 */  0x25, 0x5D, 0xAE, 0x00, 0x9A, 0x0C, 0xFF, 0xE5,  // %]......
                /* 0470 */  0x0A, 0x7C, 0x37, 0x07, 0xEC, 0x35, 0x09, 0xCE,  // .|7..5..
                /* 0478 */  0xFF, 0xFF, 0x9A, 0xC4, 0xAF, 0x57, 0x80, 0x9F,  // .....W..
                /* 0480 */  0xEC, 0xD7, 0x2B, 0x9A, 0xFB, 0x7A, 0x85, 0x12,  // ..+..z..
                /* 0488 */  0x05, 0x21, 0x45, 0x40, 0x9A, 0x29, 0x78, 0xEE,  // .!E@.)x.
                /* 0490 */  0x57, 0x00, 0x27, 0xFE, 0xFF, 0xF7, 0x2B, 0xC0,  // W.'...+.
                /* 0498 */  0x72, 0xB8, 0xFB, 0x15, 0xD0, 0xBB, 0x1D, 0x81,  // r.......
                /* 04A0 */  0x17, 0xE5, 0xED, 0x08, 0x7B, 0xC5, 0xC2, 0x67,  // ....{..g
                /* 04A8 */  0xBC, 0x62, 0xD1, 0x30, 0x2B, 0x51, 0xBC, 0x35,  // .b.0+Q.5
                /* 04B0 */  0x51, 0x18, 0x5F, 0xB1, 0x80, 0xC9, 0xFF, 0xFF,  // Q._.....
                /* 04B8 */  0x8A, 0x05, 0xCC, 0x0E, 0xA2, 0xB8, 0x51, 0xC3,  // ......Q.
                /* 04C0 */  0xBD, 0x38, 0xF9, 0xD6, 0xE3, 0xF9, 0x46, 0xF4,  // .8....F.
                /* 04C8 */  0x1D, 0x06, 0x73, 0xC2, 0x82, 0x71, 0xC3, 0x82,  // ..s..q..
                /* 04D0 */  0x3F, 0xA4, 0x87, 0x61, 0x9F, 0x24, 0xDE, 0xB1,  // ?..a.$..
                /* 04D8 */  0x7C, 0xB4, 0x32, 0xC8, 0x1B, 0xF0, 0x93, 0xD5,  // |.2.....
                /* 04E0 */  0x83, 0x55, 0x14, 0x23, 0x04, 0x3C, 0x9E, 0x77,  // .U.#.<.w
                /* 04E8 */  0x61, 0x1F, 0xAD, 0xDE, 0xB4, 0x8C, 0x12, 0x3B,  // a......;
                /* 04F0 */  0x96, 0x2F, 0x54, 0xCF, 0x5A, 0xBE, 0x66, 0x19,  // ./T.Z.f.
                /* 04F8 */  0x22, 0xEE, 0x03, 0xB1, 0x6F, 0x58, 0x80, 0xED,  // "...oX..
                /* 0500 */  0xFF, 0xFF, 0x0D, 0x0B, 0x70, 0x74, 0x71, 0xE0,  // ....ptq.
                /* 0508 */  0x07, 0x07, 0xEC, 0x0D, 0x0B, 0xF0, 0x39, 0x53,  // ......9S
                /* 0510 */  0xF0, 0xDC, 0xB0, 0x80, 0xCD, 0xFF, 0xFF, 0x86,  // ........
                /* 0518 */  0x05, 0xF0, 0xFF, 0xFF, 0x7F, 0xC3, 0x02, 0x0E,  // ........
                /* 0520 */  0xB7, 0x2B, 0xEC, 0x2D, 0x0B, 0x7B, 0x7B, 0x21,  // .+.-.{{!
                /* 0528 */  0xAB, 0xA0, 0xA1, 0x56, 0xA2, 0xE0, 0xDF, 0x2B,  // ...V...+
                /* 0530 */  0xC3, 0xD0, 0x1B, 0x16, 0xE0, 0x68, 0xDC, 0x1E,  // .....h..
                /* 0538 */  0x35, 0x38, 0xCE, 0x06, 0x4F, 0x12, 0x98, 0x73,  // 58..O..s
                /* 0540 */  0x35, 0x6E, 0x36, 0x07, 0x17, 0x38, 0x42, 0xEF,  // 5n6..8B.
                /* 0548 */  0xA0, 0x9A, 0x3B, 0xBB, 0xA4, 0xC0, 0xB8, 0x65,  // ..;....e
                /* 0550 */  0xC1, 0xBD, 0x54, 0x3D, 0x34, 0x44, 0x39, 0x88,  // ..T=4D9.
                /* 0558 */  0x57, 0xE1, 0x07, 0xAB, 0x47, 0xA9, 0x23, 0x7B,  // W...G.#{
                /* 0560 */  0xBC, 0x7A, 0x1A, 0xF6, 0x31, 0xCB, 0xB7, 0x2C,  // .z..1..,
                /* 0568 */  0x43, 0x45, 0x78, 0xCB, 0x62, 0x67, 0x88, 0x78,  // CEx.bg.x
                /* 0570 */  0xB1, 0xA2, 0x84, 0x78, 0xAF, 0x08, 0xED, 0x3B,  // ...x...;
                /* 0578 */  0x97, 0xC1, 0x1F, 0x8D, 0x8D, 0x1A, 0xF4, 0xE5,  // ........
                /* 0580 */  0xF8, 0x2D, 0x0B, 0xDE, 0xFF, 0xFF, 0x96, 0x05,  // .-......
                /* 0588 */  0x5F, 0xE4, 0x5F, 0x45, 0x27, 0x02, 0xDF, 0xB2,  // _._E'...
                /* 0590 */  0x00, 0x7E, 0x04, 0x83, 0x90, 0x93, 0x81, 0xA3,  // .~......
                /* 0598 */  0xCF, 0x0B, 0xF8, 0x01, 0x3C, 0x8C, 0x78, 0x48,  // ....<.xH
                /* 05A0 */  0x2C, 0xC0, 0xC0, 0xE9, 0x7D, 0xC9, 0x67, 0x0A,  // ,...}.g.
                /* 05A8 */  0x7E, 0xC0, 0xF0, 0x99, 0x82, 0x5D, 0x0F, 0xA2,  // ~....]..
                /* 05B0 */  0x3F, 0x06, 0xF8, 0x5C, 0x82, 0x19, 0x1C, 0xF8,  // ?..\....
                /* 05B8 */  0xAF, 0x15, 0x87, 0xEE, 0x51, 0xBC, 0x3E, 0x98,  // ....Q.>.
                /* 05C0 */  0xC0, 0x83, 0xE3, 0xFF, 0xFF, 0xC1, 0xC1, 0xBD,  // ........
                /* 05C8 */  0x33, 0x1C, 0x91, 0xEF, 0x30, 0x1E, 0x1C, 0xD8,  // 3...0...
                /* 05D0 */  0x0E, 0x02, 0xC0, 0x61, 0x70, 0xF8, 0x50, 0x83,  // ...ap.P.
                /* 05D8 */  0x43, 0x8F, 0xC7, 0xC0, 0x21, 0x7D, 0x1E, 0x63,  // C...!}.c
                /* 05E0 */  0x17, 0x86, 0x87, 0x1C, 0x0F, 0x0D, 0x6C, 0x80,  // ......l.
                /* 05E8 */  0x1E, 0x1A, 0xB0, 0x9C, 0xC4, 0x53, 0xC8, 0xA1,  // .....S..
                /* 05F0 */  0x81, 0x59, 0xC2, 0xD0, 0x80, 0x52, 0xBC, 0xA1,  // .Y...R..
                /* 05F8 */  0xD1, 0xFF, 0xFF, 0xD0, 0xF8, 0x90, 0x7C, 0x58,  // ......|X
                /* 0600 */  0x88, 0xF9, 0x94, 0x13, 0xE1, 0x7D, 0xC1, 0x27,  // .....}.'
                /* 0608 */  0x28, 0x86, 0xFE, 0x9A, 0xE2, 0xDB, 0x85, 0x6F,  // (......o
                /* 0610 */  0x82, 0xB8, 0xF1, 0x81, 0xEB, 0xD2, 0xE9, 0xF1,  // ........
                /* 0618 */  0x01, 0x9F, 0x23, 0x97, 0xC7, 0x87, 0x3B, 0x3A,  // ..#...;:
                /* 0620 */  0x79, 0x7C, 0x30, 0x5C, 0x5E, 0x65, 0xC8, 0xD1,  // y|0\^e..
                /* 0628 */  0xC4, 0x47, 0x2B, 0x36, 0x3C, 0xB0, 0xDD, 0xF4,  // .G+6<...
                /* 0630 */  0x3C, 0x3C, 0xE0, 0x73, 0xDD, 0x04, 0xE3, 0x15,  // <<.s....
                /* 0638 */  0x92, 0x5F, 0x4B, 0x60, 0x9C, 0xA0, 0xF0, 0xD7,  // ._K`....
                /* 0640 */  0x4D, 0xF0, 0xFE, 0xFF, 0xAF, 0x9B, 0xC0, 0x73,  // M......s
                /* 0648 */  0x14, 0x5C, 0xEB, 0x25, 0x9B, 0x06, 0x79, 0xE5,  // .\.%..y.
                /* 0650 */  0x28, 0xD6, 0x8B, 0x80, 0xC2, 0xF8, 0xCC, 0x06,  // (.......
                /* 0658 */  0x38, 0x1A, 0xEB, 0x33, 0x1B, 0x58, 0xEE, 0x05,  // 8..3.X..
                /* 0660 */  0xEC, 0xC6, 0x06, 0xF7, 0xB4, 0x06, 0xFB, 0xEE,  // ........
                /* 0668 */  0xF0, 0x70, 0xF6, 0x98, 0xF6, 0xA8, 0xF6, 0x80,  // .p......
                /* 0670 */  0xE6, 0x23, 0x76, 0x8C, 0xB7, 0xB4, 0x20, 0x71,  // .#v... q
                /* 0678 */  0x22, 0xBC, 0x0E, 0x3C, 0xAD, 0xF9, 0x92, 0x11,  // "..<....
                /* 0680 */  0x2F, 0xD0, 0xD3, 0x9A, 0x31, 0xE2, 0xBC, 0xB4,  // /...1...
                /* 0688 */  0x19, 0xF1, 0x95, 0x22, 0xC4, 0xC3, 0x9A, 0x4F,  // ..."...O
                /* 0690 */  0x6E, 0xC6, 0x7B, 0x98, 0x08, 0x17, 0xE6, 0x85,  // n.{.....
                /* 0698 */  0xED, 0x69, 0x0D, 0x1C, 0xFF, 0xFF, 0xD3, 0x1A,  // .i......
                /* 06A0 */  0x1C, 0x39, 0x57, 0x6C, 0x80, 0x26, 0x17, 0x7D,  // .9Wl.&.}
                /* 06A8 */  0xDC, 0x21, 0x05, 0x2C, 0xD7, 0x06, 0x76, 0x4B,  // .!.,..vK
                /* 06B0 */  0x81, 0x77, 0xC1, 0x06, 0xCE, 0xFF, 0xFF, 0x23,  // .w.....#
                /* 06B8 */  0x0A, 0xF8, 0xB2, 0x5C, 0xB0, 0x69, 0x8E, 0x0B,  // ...\.i..
                /* 06C0 */  0x36, 0x8A, 0xC3, 0x6A, 0x80, 0x34, 0x4F, 0xF8,  // 6..j.4O.
                /* 06C8 */  0xD7, 0x6B, 0xF0, 0x4F, 0xC2, 0xD7, 0x6B, 0xC0,  // .k.O..k.
                /* 06D0 */  0xF6, 0x2D, 0x16, 0x77, 0xBD, 0x06, 0x56, 0xFF,  // .-.w..V.
                /* 06D8 */  0xFF, 0xEB, 0x35, 0xB0, 0x14, 0x3C, 0x52, 0x7A,  // ..5..<Rz
                /* 06E0 */  0xA7, 0x06, 0xD7, 0x4D, 0x1B, 0x0F, 0xFA, 0xA6,  // ...M....
                /* 06E8 */  0x0D, 0x53, 0xF0, 0x2D, 0x8A, 0x46, 0x21, 0x57,  // .S.-.F!W
                /* 06F0 */  0xB4, 0x85, 0x50, 0x18, 0xDF, 0xA2, 0x00, 0x47,  // ..P....G
                /* 06F8 */  0xD8, 0x6F, 0x51, 0x60, 0xB9, 0x38, 0xBD, 0x45,  // .oQ`.8.E
                /* 0700 */  0xE1, 0x67, 0xE0, 0x41, 0xFB, 0xAE, 0xC3, 0x30,  // .g.A...0
                /* 0708 */  0x7D, 0x87, 0x86, 0x7F, 0x6A, 0x7A, 0x6E, 0x7A,  // }...jznz
                /* 0710 */  0x70, 0x7A, 0x68, 0xF6, 0x41, 0xCA, 0x87, 0x83,  // pzh.A...
                /* 0718 */  0xE7, 0xA7, 0xFF, 0x7F, 0x8C, 0xF7, 0x3A, 0xDF,  // ......:.
                /* 0720 */  0xA4, 0x5E, 0xA3, 0x7C, 0x81, 0x39, 0x86, 0x88,  // .^.|.9..
                /* 0728 */  0x51, 0x5E, 0xA6, 0x0D, 0x11, 0xCF, 0xA7, 0x26,  // Q^.....&
                /* 0730 */  0x9F, 0x15, 0xE2, 0x86, 0x78, 0x88, 0x36, 0x42,  // ....x.6B
                /* 0738 */  0xD4, 0xE7, 0x69, 0x4F, 0xE8, 0x35, 0x0A, 0xBC,  // ..iO.5..
                /* 0740 */  0x82, 0xAE, 0x51, 0x00, 0x4D, 0xEE, 0x47, 0xB8,  // ..Q.M.G.
                /* 0748 */  0x6B, 0x14, 0x58, 0xEE, 0x0D, 0xEC, 0x3C, 0xC4,  // k.X...<.
                /* 0750 */  0xAF, 0x44, 0xBE, 0x36, 0xC0, 0xB8, 0x47, 0xC1,  // .D.6..G.
                /* 0758 */  0xF9, 0xFF, 0xDF, 0xA3, 0x00, 0x1B, 0x61, 0xEE,  // ......a.
                /* 0760 */  0x51, 0x34, 0xC8, 0x3D, 0x0A, 0x75, 0x32, 0xF1,  // Q4.=.u2.
                /* 0768 */  0xA5, 0xCE, 0x13, 0x05, 0x47, 0xF8, 0x8B, 0x14,  // ....G...
                /* 0770 */  0x2A, 0x36, 0x89, 0x42, 0x1F, 0x86, 0x50, 0x31,  // *6.B..P1
                /* 0778 */  0x0F, 0x23, 0x14, 0xC4, 0x80, 0xCE, 0x70, 0xA2,  // .#....p.
                /* 0780 */  0x40, 0xAB, 0x38, 0x51, 0x90, 0x5B, 0x8C, 0x27,  // @.8Q.[.'
                /* 0788 */  0xF5, 0x18, 0x05, 0xF8, 0x5A, 0xA6, 0x87, 0xCA,  // ....Z...
                /* 0790 */  0x23, 0x0F, 0x95, 0x82, 0x78, 0xA8, 0x8E, 0x33,  // #...x..3
                /* 0798 */  0x54, 0xF4, 0x24, 0x3D, 0x7F, 0xCC, 0xFF, 0xFF,  // T.$=....
                /* 07A0 */  0xE0, 0x80, 0x3D, 0x48, 0x01, 0xBC, 0x50, 0x7D,  // ..=H..P}
                /* 07A8 */  0x90, 0xA2, 0x61, 0xC8, 0x15, 0x6E, 0x21, 0x14,  // ..a..n!.
                /* 07B0 */  0xC6, 0x07, 0x29, 0xC0, 0xD1, 0xCD, 0x12, 0x77,  // ..)....w
                /* 07B8 */  0x90, 0x82, 0xF1, 0xFF, 0x3F, 0x48, 0x61, 0x46,  // ....?HaF
                /* 07C0 */  0xC0, 0x5E, 0x23, 0xCF, 0x51, 0xB1, 0x9E, 0xD6,  // .^#.Q...
                /* 07C8 */  0x19, 0x68, 0x9C, 0xB7, 0x22, 0x9F, 0x05, 0xD9,  // .h.."...
                /* 07D0 */  0x85, 0xC5, 0xC7, 0x22, 0x13, 0xF8, 0x24, 0x05,  // ..."..$.
                /* 07D8 */  0x17, 0xE3, 0xE9, 0xD6, 0x87, 0x5A, 0x83, 0x3C,  // .....Z.<
                /* 07E0 */  0x3C, 0x3D, 0xDD, 0xFA, 0x2C, 0xF5, 0xFE, 0x14,  // <=..,...
                /* 07E8 */  0xE8, 0x50, 0x1F, 0xA2, 0x2C, 0x6E, 0x04, 0xE4,  // .P..,n..
                /* 07F0 */  0x7E, 0xEB, 0xEB, 0xD4, 0xB3, 0xAD, 0x51, 0x9E,  // ~.....Q.
                /* 07F8 */  0x1E, 0x82, 0xC6, 0x89, 0x18, 0x2D, 0xA6, 0xA1,  // .....-..
                /* 0800 */  0x02, 0x45, 0x79, 0xB3, 0xF2, 0x49, 0x0A, 0x60,  // .Ey..I.`
                /* 0808 */  0xD9, 0xFF, 0xFF, 0x24, 0x05, 0xAE, 0x8B, 0x03,  // ...$....
                /* 0810 */  0x3B, 0x38, 0xE0, 0xEE, 0x0D, 0x70, 0x4E, 0x52,  // ;8...pNR
                /* 0818 */  0x80, 0x9F, 0x3C, 0x27, 0x29, 0x7A, 0xC5, 0xF5,  // ..<')z..
                /* 0820 */  0x49, 0x8A, 0x8B, 0x82, 0x90, 0x22, 0x20, 0x4D,  // I...." M
                /* 0828 */  0x14, 0x2C, 0x57, 0x5C, 0xC0, 0xE5, 0xFF, 0xFF,  // .,W\....
                /* 0830 */  0x8A, 0x0B, 0xF0, 0x31, 0x96, 0x84, 0xFB, 0x2D,  // ...1...-
                /* 0838 */  0x26, 0x08, 0x0C, 0xEA, 0x2A, 0x05, 0xBC, 0xFE,  // &...*...
                /* 0840 */  0xFF, 0x57, 0x29, 0xE0, 0x72, 0x05, 0x78, 0x95,  // .W).r.x.
                /* 0848 */  0x02, 0xCB, 0x61, 0xE9, 0x49, 0xE1, 0x81, 0xC8,  // ..a.I...
                /* 0850 */  0x48, 0xFC, 0x45, 0xF2, 0xDE, 0x60, 0xE3, 0x58,  // H.E..`.X
                /* 0858 */  0x02, 0xF6, 0xCD, 0x84, 0xCD, 0xFB, 0x45, 0x0A,  // ......E.
                /* 0860 */  0xA6, 0xFB, 0x23, 0x2E, 0x81, 0x78, 0x62, 0x08,  // ..#..xb.
                /* 0868 */  0xFC, 0x96, 0x73, 0xA4, 0x6F, 0x50, 0xC6, 0x79,  // ..s.oP.y
                /* 0870 */  0xBE, 0x35, 0xD6, 0xD3, 0x2D, 0xBB, 0x32, 0x9D,  // .5..-.2.
                /* 0878 */  0x47, 0x94, 0x18, 0xE1, 0x9E, 0xA1, 0x62, 0x44,  // G.....bD
                /* 0880 */  0x89, 0xF1, 0x4A, 0x15, 0x24, 0x60, 0x88, 0x67,  // ..J.$`.g
                /* 0888 */  0xAA, 0x90, 0x4F, 0xBB, 0x9E, 0xEC, 0xCB, 0x94,  // ..O.....
                /* 0890 */  0xED, 0xDF, 0xA4, 0x40, 0x1C, 0xFF, 0xC5, 0xA0,  // ...@....
                /* 0898 */  0x1B, 0x89, 0x6F, 0x52, 0x80, 0xBF, 0xFF, 0xFF,  // ..oR....
                /* 08A0 */  0x4D, 0x0A, 0xF8, 0x05, 0x1E, 0x38, 0x7A, 0x20,  // M....8z 
                /* 08A8 */  0x86, 0x7E, 0x64, 0xF1, 0x34, 0x7C, 0xDE, 0xF0,  // .~d.4|..
                /* 08B0 */  0x99, 0xD2, 0x18, 0xC7, 0xE4, 0xC1, 0xF1, 0x58,  // .......X
                /* 08B8 */  0x23, 0xA7, 0xB7, 0x22, 0x9F, 0x27, 0xF8, 0xE1,  // #..".'..
                /* 08C0 */  0xC2, 0xE7, 0x09, 0x76, 0x62, 0x38, 0x8D, 0xE7,  // ...vb8..
                /* 08C8 */  0x00, 0x1F, 0x44, 0x30, 0xC7, 0x09, 0xE0, 0x72,  // ..D0...r
                /* 08D0 */  0x0E, 0x00, 0xDF, 0x3D, 0x10, 0x77, 0x03, 0x03,  // ...=.w..
                /* 08D8 */  0xCB, 0x8C, 0xF0, 0x23, 0x82, 0x71, 0x01, 0x03,  // ...#.q..
                /* 08E0 */  0xAE, 0xFF, 0xFF, 0x0B, 0x18, 0x38, 0x47, 0xC1,  // .....8G.
                /* 08E8 */  0xF3, 0xDD, 0x3A, 0x01, 0xC5, 0xF7, 0x0A, 0x76,  // ..:....v
                /* 08F0 */  0x75, 0x78, 0x7E, 0x00, 0xC7, 0xAD, 0x13, 0xEE,  // ux~.....
                /* 08F8 */  0xC1, 0xC6, 0xD7, 0x97, 0xB3, 0x3C, 0xD3, 0x17,  // .....<..
                /* 0900 */  0x9A, 0xA7, 0x1A, 0x06, 0xF3, 0x78, 0x13, 0x21,  // .....x.!
                /* 0908 */  0x4E, 0x14, 0xE3, 0x9D, 0xA5, 0x51, 0xDE, 0x3F,  // N....Q.?
                /* 0910 */  0x62, 0xBC, 0xDA, 0xC4, 0x88, 0x12, 0x28, 0x92,  // b.....(.
                /* 0918 */  0x81, 0x0D, 0x14, 0xF8, 0xAD, 0xE2, 0x89, 0xC4,  // ........
                /* 0920 */  0xA0, 0xBE, 0x75, 0x02, 0x9F, 0xFF, 0xFF, 0xAD,  // ..u.....
                /* 0928 */  0x13, 0x60, 0xD0, 0xC5, 0x81, 0xDD, 0x52, 0xE0,  // .`....R.
                /* 0930 */  0x9F, 0x52, 0x00, 0x2F, 0xFF, 0xFF, 0x53, 0x0A,  // .R./..S.
                /* 0938 */  0x4F, 0x7E, 0xEB, 0xA4, 0xA9, 0x6F, 0x9D, 0x50,  // O~...o.P
                /* 0940 */  0x26, 0x0A, 0x96, 0x5B, 0x27, 0x30, 0x38, 0x8E,  // &..['08.
                /* 0948 */  0xBC, 0x75, 0x02, 0xBE, 0xEF, 0x16, 0xBE, 0x75,  // .u.....u
                /* 0950 */  0x02, 0xFB, 0xFF, 0xFF, 0xAD, 0x13, 0x58, 0x44,  // ......XD
                /* 0958 */  0x1B, 0x15, 0xBD, 0x6A, 0xE2, 0xE7, 0xF3, 0xAA,  // ...j....
                /* 0960 */  0x09, 0xF3, 0x02, 0x0A, 0xAE, 0xBB, 0x11, 0x70,  // .......p
                /* 0968 */  0xCA, 0x75, 0xBF, 0xA2, 0xF7, 0x50, 0x07, 0x5B,  // .u...P.[
                /* 0970 */  0x12, 0xBD, 0x8A, 0x02, 0x9E, 0xB0, 0x0F, 0x1A,  // ........
                /* 0978 */  0x6C, 0xC7, 0x15, 0x8E, 0xF2, 0x2E, 0x88, 0x05,  // l.......
                /* 0980 */  0xFA, 0xFF, 0x1F, 0x88, 0xAF, 0x57, 0xB0, 0xCF,  // .....W..
                /* 0988 */  0x9E, 0xE7, 0xF8, 0xBA, 0xF0, 0x1A, 0x11, 0xE1,  // ........
                /* 0990 */  0x91, 0xEA, 0xB1, 0x21, 0xC2, 0x73, 0x55, 0xB0,  // ...!.sU.
                /* 0998 */  0xA7, 0xAA, 0x38, 0xAF, 0x57, 0x6C, 0x1A, 0x4F,  // ..8.Wl.O
                /* 09A0 */  0x58, 0x71, 0x9E, 0x45, 0x3D, 0x85, 0x28, 0x0F,  // Xq.E=.(.
                /* 09A8 */  0x56, 0x51, 0x1E, 0x44, 0x8D, 0xF8, 0x42, 0x10,  // VQ.D..B.
                /* 09B0 */  0x3A, 0x70, 0xBC, 0x60, 0xD1, 0x8D, 0x10, 0xEB,  // :p.`....
                /* 09B8 */  0xF5, 0x0A, 0xBC, 0x72, 0xAE, 0x57, 0x00, 0x4D,  // ...r.W.M
                /* 09C0 */  0xAE, 0x94, 0x60, 0x3C, 0x33, 0xF8, 0xFF, 0x3F,  // ..`<3..?
                /* 09C8 */  0xAD, 0xE7, 0x06, 0x7E, 0x6D, 0xC0, 0x1E, 0x1B,  // ...~m...
                /* 09D0 */  0xD8, 0xED, 0x0A, 0xF0, 0x73, 0xB7, 0xF2, 0xA1,  // ....s...
                /* 09D8 */  0xC3, 0x89, 0x6F, 0x57, 0xA8, 0x83, 0x89, 0xF5,  // ..oW....
                /* 09E0 */  0xDC, 0xAE, 0x10, 0xF3, 0x84, 0x7B, 0xB9, 0x02,  // .....{..
                /* 09E8 */  0x38, 0xF0, 0xFF, 0xBF, 0x5C, 0x01, 0xDE, 0x83,  // 8...\...
                /* 09F0 */  0x5D, 0xAE, 0x80, 0xDE, 0xC5, 0x08, 0x8C, 0xF0,  // ].......
                /* 09F8 */  0x7D, 0xE2, 0x08, 0xE5, 0x51, 0xC9, 0x17, 0x23,  // }...Q..#
                /* 0A00 */  0x18, 0x67, 0x61, 0xE0, 0xF5, 0xFF, 0x3F, 0x0B,  // .ga...?.
                /* 0A08 */  0x03, 0x36, 0x86, 0xF5, 0xE6, 0xE3, 0xC3, 0x15,  // .6......
                /* 0A10 */  0x18, 0x2E, 0x57, 0xB0, 0xCF, 0x0C, 0xEF, 0x55,  // ..W....U
                /* 0A18 */  0x86, 0x78, 0xA2, 0x7A, 0xA0, 0x32, 0xD4, 0xCB,  // .x.z.2..
                /* 0A20 */  0x95, 0x61, 0x22, 0x85, 0x78, 0x1B, 0x66, 0x68,  // .a".x.fh
                /* 0A28 */  0x21, 0xA2, 0x84, 0x0B, 0x62, 0x14, 0x9F, 0xAF,  // !...b...
                /* 0A30 */  0x0C, 0x17, 0xFB, 0x69, 0xCA, 0xE7, 0xAB, 0x60,  // ...i...`
                /* 0A38 */  0x0F, 0x59, 0x61, 0x23, 0x44, 0x79, 0x16, 0x06,  // .Ya#Dy..
                /* 0A40 */  0x1C, 0xFF, 0xFF, 0xCF, 0xC2, 0x80, 0xAF, 0x8B,  // ........
                /* 0A48 */  0x03, 0xBB, 0x25, 0xC1, 0xBA, 0x38, 0xF9, 0x76,  // ..%..8.v
                /* 0A50 */  0x05, 0x38, 0x3A, 0x0B, 0xC3, 0x9E, 0x28, 0x38,  // .8:...(8
                /* 0A58 */  0xAE, 0x57, 0xC0, 0xE4, 0xFF, 0x7F, 0x16, 0x06,  // .W......
                /* 0A60 */  0xF8, 0xFF, 0xFF, 0x3F, 0x0B, 0x83, 0xFB, 0x6E,  // ...?...n
                /* 0A68 */  0x84, 0x39, 0x5F, 0xC1, 0x3E, 0x18, 0xEA, 0x7E,  // .9_.>..~
                /* 0A70 */  0x45, 0x23, 0x2D, 0x44, 0x31, 0x97, 0x44, 0x61,  // E#-D1.Da
                /* 0A78 */  0x7C, 0xBF, 0x02, 0x1C, 0x09, 0x1E, 0x34, 0x68,  // |.....4h
                /* 0A80 */  0xC0, 0xA2, 0x04, 0xF3, 0x31, 0xC4, 0xD3, 0x39,  // ....1..9
                /* 0A88 */  0xDE, 0xC7, 0x84, 0xD7, 0x80, 0x47, 0x1D, 0x0F,  // .....G..
                /* 0A90 */  0xF9, 0x91, 0xC0, 0x57, 0x2C, 0xB0, 0x1E, 0xA2,  // ...W,...
                /* 0A98 */  0x5E, 0xB0, 0x7C, 0xB5, 0x31, 0x46, 0x84, 0x97,  // ^.|.1F..
                /* 0AA0 */  0x61, 0xC3, 0xBC, 0x57, 0x85, 0x78, 0x07, 0x7E,  // a..W.x.~
                /* 0AA8 */  0xC5, 0xF2, 0x85, 0x22, 0x58, 0x84, 0x28, 0x8F,  // ..."X.(.
                /* 0AB0 */  0xC2, 0x2F, 0xC3, 0xC6, 0x33, 0xE4, 0x83, 0x96,  // ./..3...
                /* 0AB8 */  0x81, 0xC2, 0x1A, 0xF2, 0x9D, 0x38, 0xC6, 0x09,  // .....8..
                /* 0AC0 */  0xF8, 0x4E, 0xE1, 0x2B, 0x16, 0xBC, 0xFF, 0xFF,  // .N.+....
                /* 0AC8 */  0x15, 0x0B, 0xB6, 0xA8, 0x2B, 0x16, 0x40, 0x93,  // ....+.@.
                /* 0AD0 */  0x93, 0x03, 0xEE, 0x8A, 0x05, 0x96, 0xBB, 0x03,  // ........
                /* 0AD8 */  0xF6, 0xAE, 0x04, 0xFF, 0x92, 0x05, 0xCC, 0xFE,  // ........
                /* 0AE0 */  0xFF, 0x97, 0x2C, 0x60, 0xA1, 0xE0, 0xAD, 0xA0,  // ..,`....
                /* 0AE8 */  0xB3, 0x87, 0xD3, 0x5F, 0xB2, 0x50, 0x27, 0x11,  // ..._.P'.
                /* 0AF0 */  0x6B, 0x02, 0xD2, 0x54, 0xC1, 0x75, 0xCB, 0x02,  // k..T.u..
                /* 0AF8 */  0x18, 0xF7, 0xFF, 0xBF, 0x65, 0x01, 0x1E, 0x02,  // ....e...
                /* 0B00 */  0xDE, 0xB2, 0x80, 0xDE, 0x0D, 0x09, 0xBC, 0x28,  // .......(
                /* 0B08 */  0x6F, 0x48, 0xD8, 0x8B, 0x16, 0xBC, 0xA4, 0x17,  // oH......
                /* 0B10 */  0x2D, 0x1A, 0x67, 0x2D, 0x8A, 0xB8, 0x2A, 0x0A,  // -.g-..*.
                /* 0B18 */  0xE3, 0x8B, 0x16, 0xE0, 0xE7, 0xFF, 0x3F, 0x6E,  // ......?n
                /* 0B20 */  0xDF, 0x5A, 0x70, 0xE3, 0x86, 0x7B, 0x79, 0xF2,  // .Zp..{y.
                /* 0B28 */  0xCD, 0xC7, 0xB3, 0x8D, 0xE8, 0x6B, 0x0C, 0xE6,  // .....k..
                /* 0B30 */  0x9C, 0x05, 0xEF, 0x9A, 0x05, 0xFB, 0x66, 0xF5,  // ......f.
                /* 0B38 */  0x62, 0x75, 0x9A, 0x4F, 0x56, 0x41, 0x1E, 0xAE,  // bu.OVA..
                /* 0B40 */  0x7C, 0xBE, 0x0A, 0xFD, 0x86, 0x15, 0xE1, 0x3D,  // |......=
                /* 0B48 */  0xEB, 0x35, 0xCB, 0x77, 0xE2, 0x28, 0x31, 0x9E,  // .5.w.(1.
                /* 0B50 */  0x8C, 0x8D, 0x11, 0x25, 0x60, 0x94, 0x60, 0x51,  // ...%`.`Q
                /* 0B58 */  0x03, 0x3F, 0x40, 0xC4, 0x89, 0xF1, 0xA2, 0x15,  // .?@.....
                /* 0B60 */  0xE6, 0x0C, 0x9E, 0xBA, 0x7C, 0x93, 0x78, 0xCD,  // ....|.x.
                /* 0B68 */  0x02, 0xF8, 0xF3, 0xFF, 0xBF, 0x66, 0x01, 0xA3,  // .....f..
                /* 0B70 */  0x9B, 0x03, 0x3F, 0x39, 0x60, 0xAF, 0x59, 0x80,  // ..?9`.Y.
                /* 0B78 */  0xB7, 0x4B, 0x96, 0x4F, 0x1E, 0x3E, 0x1D, 0xFB,  // .K.O.>..
                /* 0B80 */  0x9A, 0x85, 0x9F, 0x2A, 0xB8, 0xAE, 0x59, 0x80,  // ...*..Y.
                /* 0B88 */  0x97, 0xFF, 0xFF, 0x35, 0x0B, 0x60, 0x58, 0xB8,  // ...5.`X.
                /* 0B90 */  0x6B, 0x16, 0xD0, 0xBB, 0x1F, 0x81, 0xFD, 0xFF,  // k.......
                /* 0B98 */  0x7F, 0x3F, 0x82, 0xA9, 0xF9, 0x92, 0x45, 0xC3,  // .?....E.
                /* 0BA0 */  0xAC, 0x44, 0xE1, 0xD6, 0x44, 0x61, 0x7C, 0xC9,  // .D..Da|.
                /* 0BA8 */  0x02, 0x1C, 0x9D, 0xB0, 0xC1, 0x34, 0x5D, 0x5F,  // .....4]_
                /* 0BB0 */  0xB0, 0x71, 0x83, 0x39, 0xB5, 0xA8, 0x11, 0x7A,  // .q.9...z
                /* 0BB8 */  0x47, 0xD4, 0x85, 0x8D, 0x1D, 0x8D, 0xC1, 0x71,  // G......q
                /* 0BC0 */  0xC5, 0xF2, 0xC5, 0xEA, 0xFD, 0xCA, 0xC7, 0x61,  // .......a
                /* 0BC8 */  0x9F, 0x19, 0x5E, 0xAF, 0x8C, 0xF6, 0x66, 0xF5,  // ..^...f.
                /* 0BD0 */  0xEC, 0xF0, 0x8E, 0x65, 0xAC, 0x08, 0x3E, 0x1A,  // ...e..>.
                /* 0BD8 */  0xFB, 0xB0, 0xE5, 0x73, 0x56, 0x94, 0x87, 0x63,  // ...sV..c
                /* 0BE0 */  0x63, 0x3E, 0x62, 0x05, 0x3A, 0x8F, 0xC0, 0x21,  // c>b.:..!
                /* 0BE8 */  0xA2, 0xC5, 0x0A, 0x1B, 0xE2, 0x1D, 0x0B, 0xBC,  // ........
                /* 0BF0 */  0x82, 0xEE, 0x58, 0x20, 0xFE, 0xFF, 0xDF, 0xB1,  // ..X ....
                /* 0BF8 */  0x00, 0xDB, 0x67, 0x0F, 0xDC, 0x1D, 0x0B, 0x2C,  // ..g....,
                /* 0C00 */  0x17, 0x07, 0x76, 0x70, 0xE2, 0xF7, 0x06, 0xFC,  // ..vp....
                /* 0C08 */  0x0D, 0x0B, 0xF0, 0x94, 0xE6, 0x86, 0x45, 0x93,  // ......E.
                /* 0C10 */  0xDC, 0xB0, 0x50, 0x47, 0x13, 0xEB, 0x51, 0xF0,  // ..PG..Q.
                /* 0C18 */  0xFF, 0x3F, 0x71, 0xF0, 0x89, 0xC2, 0xBE, 0x5F,  // .?q...._
                /* 0C20 */  0x81, 0x7F, 0x16, 0xBE, 0x5F, 0x01, 0xB6, 0xF1,  // ...._...
                /* 0C28 */  0xDF, 0xAF, 0x00, 0x4B, 0xFF, 0xFF, 0xFB, 0x15,  // ...K....
                /* 0C30 */  0xFC, 0x03, 0xA3, 0x47, 0xEA, 0x4B, 0x15, 0xB8,  // ...G.K..
                /* 0C38 */  0xAE, 0x5A, 0x78, 0xD0, 0x57, 0x2D, 0x98, 0x39,  // .Zx.W-.9
                /* 0C40 */  0x8F, 0xBF, 0xA8, 0x80, 0xC7, 0x5F, 0x40, 0xEB,  // ....._@.
                /* 0C48 */  0x4D, 0x8A, 0x1F, 0x94, 0x9E, 0x15, 0x9E, 0x88,  // M.......
                /* 0C50 */  0x8C, 0xC6, 0x91, 0xDE, 0x1C, 0x6C, 0x1C, 0x4B,  // .....l.K
                /* 0C58 */  0xE0, 0x46, 0xF4, 0xF1, 0x17, 0x0C, 0x23, 0x78,  // .F....#x
                /* 0C60 */  0x78, 0x7A, 0x66, 0x78, 0x8D, 0xF2, 0xF5, 0xC9,  // xzfx....
                /* 0C68 */  0x77, 0xA9, 0x67, 0xA8, 0x60, 0x4F, 0x53, 0xBE,  // w.g.`OS.
                /* 0C70 */  0x00, 0xFB, 0x2A, 0x65, 0x9C, 0xB7, 0xA8, 0x28,  // ..*e...(
                /* 0C78 */  0x71, 0x9E, 0xA2, 0x8C, 0x19, 0x25, 0x5C, 0x84,  // q....%\.
                /* 0C80 */  0x48, 0xCF, 0x54, 0x86, 0x08, 0x1F, 0x21, 0xDA,  // H.T...!.
                /* 0C88 */  0xF3, 0xD4, 0xE3, 0x94, 0xAF, 0x52, 0xFC, 0xFF,  // .....R..
                /* 0C90 */  0x7F, 0x95, 0x02, 0x9F, 0xA4, 0xAB, 0x14, 0x40,  // .......@
                /* 0C98 */  0x93, 0xE1, 0xBF, 0x4A, 0x81, 0xF5, 0xE4, 0x80,  // ...J....
                /* 0CA0 */  0xBF, 0x38, 0x60, 0x0F, 0x0E, 0xEC, 0x2E, 0x05,  // .8`.....
                /* 0CA8 */  0x5C, 0xFE, 0xFF, 0xA7, 0x5F, 0xE0, 0x3B, 0x53,  // \..._.;S
                /* 0CB0 */  0x30, 0x9D, 0x7E, 0x01, 0x96, 0xFD, 0xFF, 0x4F,  // 0.~....O
                /* 0CB8 */  0xBF, 0x00, 0x3B, 0xAE, 0x47, 0xE0, 0xCB, 0x75,  // ..;.G..u
                /* 0CC0 */  0xC7, 0xA2, 0x51, 0x56, 0xA2, 0x60, 0x6B, 0xA2,  // ..QV.`k.
                /* 0CC8 */  0x30, 0xBE, 0x63, 0x01, 0x66, 0xFE, 0xFF, 0x77,  // 0.c.f..w
                /* 0CD0 */  0x2C, 0x0C, 0xF6, 0xD3, 0x2F, 0xF8, 0xAE, 0x07,  // ,.../...
                /* 0CD8 */  0x0F, 0xBF, 0x0C, 0xED, 0x89, 0x81, 0x03, 0x3D,  // .......=
                /* 0CE0 */  0x31, 0xF9, 0x26, 0x13, 0xF5, 0x0D, 0x0B, 0xF6,  // 1.&.....
                /* 0CE8 */  0x31, 0x22, 0x48, 0x84, 0x18, 0x0F, 0x57, 0x86,  // 1"H...W.
                /* 0CF0 */  0x78, 0xB4, 0xF2, 0xA8, 0xDE, 0xAA, 0x42, 0x44,  // x.....BD
                /* 0CF8 */  0x7A, 0xC3, 0xF2, 0x40, 0x9E, 0xAE, 0x42, 0xF9,  // z..@..B.
                /* 0D00 */  0x82, 0xF5, 0x14, 0x6C, 0x14, 0x76, 0xD1, 0x8A,  // ...l.v..
                /* 0D08 */  0x72, 0x32, 0x6F, 0xBE, 0x0C, 0x24, 0x58, 0xDC,  // r2o..$X.
                /* 0D10 */  0xD7, 0x2C, 0xDF, 0xB0, 0xC0, 0x2B, 0xE7, 0x86,  // .,...+..
                /* 0D18 */  0x05, 0x10, 0xE1, 0xFF, 0x7F, 0xC3, 0x82, 0x7D,  // .......}
                /* 0D20 */  0x04, 0xC7, 0x1D, 0x7E, 0xC1, 0x06, 0xF1, 0xDA,  // ...~....
                /* 0D28 */  0x80, 0x3D, 0x36, 0x60, 0xEE, 0x57, 0x80, 0x9F,  // .=6`.W..
                /* 0D30 */  0xD4, 0xF7, 0x2B, 0x9A, 0xF8, 0xEC, 0x0B, 0x75,  // ..+....u
                /* 0D38 */  0x9E, 0x30, 0x6F, 0x57, 0x80, 0xAF, 0xFF, 0xFF,  // .0oW....
                /* 0D40 */  0xED, 0x0A, 0xE0, 0x52, 0xB0, 0xDB, 0x15, 0xD0,  // ...R....
                /* 0D48 */  0xBB, 0x18, 0x01, 0x1F, 0x85, 0x36, 0x7D, 0x6A,  // .....6}j
                /* 0D50 */  0xFC, 0xFF, 0x1B, 0xB5, 0x6A, 0x50, 0xA6, 0x46,  // ....jP.F
                /* 0D58 */  0x99, 0x06, 0xB5, 0xFA, 0x54, 0x6A, 0xCC, 0x98,  // ....Tj..
                /* 0D60 */  0xFA, 0x3B, 0x90, 0xEF, 0x17, 0x54, 0xCC, 0xAA,  // .;...T..
                /* 0D68 */  0x34, 0x2C, 0x47, 0x01, 0xA1, 0xB2, 0x25, 0x80,  // 4,G...%.
                /* 0D70 */  0xB0, 0x90, 0xBF, 0x1F, 0x01, 0x3A, 0xD8, 0x27,  // .....:.'
                /* 0D78 */  0x4B, 0x63, 0x25, 0x8B, 0x12, 0x88, 0xE3, 0x9B,  // Kc%.....
                /* 0D80 */  0x80, 0x68, 0x04, 0x44, 0x5A, 0x54, 0x00, 0xB1,  // .h.DZT..
                /* 0D88 */  0xDC, 0x20, 0x02, 0xB2, 0x8A, 0x25, 0x0B, 0xC8,  // . ...%..
                /* 0D90 */  0x9A, 0xFF, 0x34, 0x02, 0xB7, 0x4E, 0x1D, 0x40,  // ..4..N.@
                /* 0D98 */  0x2C, 0x25, 0x08, 0x4D, 0xF4, 0x18, 0x10, 0xA8,  // ,%.M....
                /* 0DA0 */  0xE3, 0x81, 0x68, 0x30, 0x84, 0x46, 0x40, 0x0E,  // ..h0.F@.
                /* 0DA8 */  0x46, 0x21, 0x20, 0xCB, 0x70, 0x02, 0xCE, 0x04,  // F! .p...
                /* 0DB0 */  0x58, 0x01, 0x62, 0xF2, 0x41, 0xA8, 0x60, 0x2F,  // X.b.A.`/
                /* 0DB8 */  0xA0, 0x4C, 0x3D, 0x88, 0x80, 0xAC, 0x74, 0xD1,  // .L=...t.
                /* 0DC0 */  0x02, 0xB2, 0x6E, 0x10, 0x01, 0x39, 0xAB, 0x19,  // ..n..9..
                /* 0DC8 */  0x70, 0x96, 0xD1, 0x0D, 0x10, 0x53, 0xF8, 0x78,  // p....S.x
                /* 0DD0 */  0x10, 0x88, 0x35, 0xE9, 0x01, 0x65, 0x02, 0x41,  // ..5..e.A
                /* 0DD8 */  0x74, 0x09, 0x21, 0x7E, 0x80, 0x98, 0x34, 0x10,  // t.!~..4.
                /* 0DE0 */  0x01, 0x39, 0xCE, 0x65, 0x45, 0xE0, 0x8E, 0xA3,  // .9.eE...
                /* 0DE8 */  0x08, 0x90, 0x3A, 0x1A, 0x2E, 0x05, 0xA1, 0xE2,  // ..:.....
                /* 0DF0 */  0xBF, 0x2C, 0x02, 0xB1, 0x20, 0x4B, 0x60, 0x14,  // .,.. K`.
                /* 0DF8 */  0x84, 0x46, 0xD0, 0x04, 0xC2, 0xE4, 0x79, 0x02,  // .F....y.
                /* 0E00 */  0x61, 0xA1, 0x44, 0x0D, 0x81, 0x05, 0x51, 0x35,  // a.D...Q5
                /* 0E08 */  0x44, 0xEA, 0x0A, 0x84, 0x05, 0x7E, 0x2C, 0x68,  // D....~,h
                /* 0E10 */  0x30, 0x4E, 0x0F, 0x22, 0x20, 0x27, 0x7D, 0x67,  // 0N." '}g
                /* 0E18 */  0x05, 0x22, 0xB9, 0x41, 0x04, 0xE4, 0xFC, 0x8F,  // .".A....
                /* 0E20 */  0x13, 0x81, 0x3B, 0xF5, 0x0B, 0x43, 0xC3, 0x27,  // ..;..C.'
                /* 0E28 */  0xBF, 0xAD, 0x20, 0x44, 0xDC, 0x83, 0x2B, 0x28,  // .. D..+(
                /* 0E30 */  0x51, 0x0A, 0x22, 0x20, 0x2B, 0xFB, 0x6D, 0x09,  // Q." +.m.
                /* 0E38 */  0xC8, 0x3A, 0x41, 0x04, 0x64, 0xBD, 0x6F, 0x2E,  // .:A.d.o.
                /* 0E40 */  0x1D, 0x04, 0xC8, 0xDF, 0xEB, 0x41, 0x80, 0x81,  // .....A..
                /* 0E48 */  0xD0, 0x54, 0x8F, 0x2D, 0x81, 0x3A, 0x22, 0x88,  // .T.-.:".
                /* 0E50 */  0x06, 0x4A, 0xD4, 0x01, 0xB1, 0x70, 0x20, 0x02,  // .J...p .
                /* 0E58 */  0xF2, 0xFF, 0x3F, 0xA4, 0x3B, 0x70, 0x16, 0xCD,  // ..?.;p..
                /* 0E60 */  0x1E, 0x10, 0x13, 0xF6, 0x61, 0x11, 0x88, 0x85,  // ....a...
                /* 0E68 */  0xF8, 0x03, 0x61, 0xD2, 0xDF, 0x1D, 0x02, 0xB4,  // ..a.....
                /* 0E70 */  0xE4, 0x37, 0xC4, 0x01, 0x32, 0x10, 0x1A, 0xF0,  // .7..2...
                /* 0E78 */  0x2F, 0xA2, 0x21, 0x38, 0x2D, 0x88, 0x80, 0x9C,  // /.!8-...
                /* 0E80 */  0xEC, 0x19, 0x22, 0x20, 0xE7, 0x04, 0xD1, 0xC0,  // .." ....
                /* 0E88 */  0xC8, 0x5F, 0x2D, 0x38, 0xD1, 0xF3, 0xD1, 0x13,  // ._-8....
                /* 0E90 */  0x90, 0xD3, 0x80, 0x50, 0xE5, 0x2E, 0x41, 0x59,  // ...P..AY
                /* 0E98 */  0x0C, 0x10, 0x01, 0x59, 0xF2, 0x47, 0x24, 0x10,  // ...Y.G$.
                /* 0EA0 */  0x09, 0x00, 0xA2, 0x81, 0x90, 0xEF, 0x46, 0x70,  // ......Fp
                /* 0EA8 */  0x12, 0xD4, 0x27, 0x10, 0x93, 0xF9, 0xDA, 0xD0,  // ..'.....
                /* 0EB0 */  0x51, 0x82, 0xBC, 0x45, 0x82, 0x12, 0x8D, 0x20,  // Q..E... 
                /* 0EB8 */  0x02, 0xB2, 0x9E, 0xEF, 0x88, 0x80, 0xAC, 0x0E,  // ........
                /* 0EC0 */  0x44, 0x40, 0xCE, 0xF3, 0xB5, 0x12, 0xB8, 0xD3,  // D@......
                /* 0EC8 */  0x68, 0x05, 0x62, 0x5A, 0x9E, 0x20, 0x41, 0x88,  // h.bZ. A.
                /* 0ED0 */  0x82, 0xD7, 0x4A, 0x50, 0x22, 0x07, 0x44, 0x40,  // ..JP".D@
                /* 0ED8 */  0x8E, 0x0E, 0x44, 0x85, 0xA8, 0x05, 0x62, 0x01,  // ..D...b.
                /* 0EE0 */  0xDC, 0x82, 0x33, 0xE9, 0x76, 0x81, 0x58, 0x70,  // ..3.v.Xp
                /* 0EE8 */  0x10, 0x1A, 0xF7, 0xAF, 0x12, 0x94, 0x64, 0x07,  // ......d.
                /* 0EF0 */  0x11, 0x90, 0x73, 0x3E, 0xF9, 0x05, 0xE4, 0xD4,  // ..s>....
                /* 0EF8 */  0x20, 0x3A, 0x4C, 0x90, 0xAF, 0x57, 0x70, 0xA2,  //  :L..Wp.
                /* 0F00 */  0xF0, 0x5D, 0x22, 0x20, 0xE7, 0x03, 0xA1, 0x69,  // .]" ...i
                /* 0F08 */  0xBE, 0x21, 0x41, 0x49, 0x34, 0x10, 0x01, 0x39,  // .!AI4..9
                /* 0F10 */  0xC6, 0x47, 0x46, 0x40, 0x0E, 0x05, 0x22, 0x20,  // .GF@.." 
                /* 0F18 */  0x87, 0xFB, 0x22, 0x09, 0xDC, 0xB1, 0x54, 0x03,  // .."...T.
                /* 0F20 */  0x31, 0x51, 0xDF, 0xB7, 0x87, 0x01, 0xF6, 0x5B,  // 1Q.....[
                /* 0F28 */  0x09, 0x4A, 0x54, 0x81, 0x68, 0x78, 0xE4, 0x89,  // .JT.hx..
                /* 0F30 */  0x22, 0x20, 0xEB, 0x01, 0x11, 0x90, 0x33, 0x3C,  // " ....3<
                /* 0F38 */  0x4E, 0x04, 0x6E, 0xE5, 0xAF, 0xC9, 0x07, 0x11,  // N.n.....
                /* 0F40 */  0x06, 0x42, 0x33, 0x3E, 0x58, 0x82, 0x92, 0xC0,  // .B3>X...
                /* 0F48 */  0x20, 0x1A, 0x08, 0x79, 0xF8, 0x08, 0xC8, 0x51,  //  ..y...Q
                /* 0F50 */  0x41, 0x04, 0xE4, 0xFF, 0x3F                     // A...?
            })
        }

        Device (WMI2)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_WDG, Buffer (0x78)
            {
                /* 0000 */  0xF1, 0x24, 0xB4, 0xFC, 0x5A, 0x07, 0x0E, 0x4E,  // .$..Z..N
                /* 0008 */  0xBF, 0xC4, 0x62, 0xF3, 0xE7, 0x17, 0x71, 0xFA,  // ..b...q.
                /* 0010 */  0x41, 0x37, 0x01, 0x01, 0xE3, 0x5E, 0xBE, 0xE2,  // A7...^..
                /* 0018 */  0xDA, 0x42, 0xDB, 0x49, 0x83, 0x78, 0x1F, 0x52,  // .B.I.x.R
                /* 0020 */  0x47, 0x38, 0x82, 0x02, 0x41, 0x38, 0x01, 0x02,  // G8..A8..
                /* 0028 */  0x9A, 0x01, 0x30, 0x74, 0xE9, 0xDC, 0x48, 0x45,  // ..0t..HE
                /* 0030 */  0xBA, 0xB0, 0x9F, 0xDE, 0x09, 0x35, 0xCA, 0xFF,  // .....5..
                /* 0038 */  0x41, 0x39, 0x14, 0x05, 0x03, 0x70, 0xF4, 0x7F,  // A9...p..
                /* 0040 */  0x6C, 0x3B, 0x5E, 0x4E, 0xA2, 0x27, 0xE9, 0x79,  // l;^N.'.y
                /* 0048 */  0x82, 0x4A, 0x85, 0xD1, 0x41, 0x41, 0x01, 0x06,  // .J..AA..
                /* 0050 */  0x20, 0x63, 0x11, 0x91, 0x7E, 0x59, 0x98, 0x45,  //  c..~Y.E
                /* 0058 */  0xA1, 0x02, 0x4A, 0xEC, 0x83, 0x75, 0xC6, 0x49,  // ..J..u.I
                /* 0060 */  0x46, 0x39, 0x01, 0x06, 0x21, 0x12, 0x90, 0x05,  // F9..!...
                /* 0068 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0070 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x42, 0x01, 0x00   // ..).BB..
            })
            Name (PREL, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Method (WQA7, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WMIS (0x07, Zero)
                PREL [Zero] = WLS0 /* \WLS0 */
                PREL [One] = WLS1 /* \WLS1 */
                PREL [0x02] = WLS2 /* \WLS2 */
                PREL [0x03] = WLS3 /* \WLS3 */
                PREL [0x04] = WLS4 /* \WLS4 */
                PREL [0x05] = WLS5 /* \WLS5 */
                PREL [0x06] = WLS6 /* \WLS6 */
                PREL [0x07] = WLS7 /* \WLS7 */
                Release (^^WMI1.MWMI)
                Return (PREL) /* \_SB_.WMI2.PREL */
            }

            Method (WMA8, 3, NotSerialized)
            {
                CreateByteField (Arg2, Zero, PRE0)
                CreateByteField (Arg2, One, PRE1)
                CreateByteField (Arg2, 0x02, PRE2)
                CreateByteField (Arg2, 0x03, PRE3)
                CreateByteField (Arg2, 0x04, PRE4)
                CreateByteField (Arg2, 0x05, PRE5)
                CreateByteField (Arg2, 0x06, PRE6)
                CreateByteField (Arg2, 0x07, PRE7)
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WLS0 = PRE0 /* \_SB_.WMI2.WMA8.PRE0 */
                WLS1 = PRE1 /* \_SB_.WMI2.WMA8.PRE1 */
                WLS2 = PRE2 /* \_SB_.WMI2.WMA8.PRE2 */
                WLS3 = PRE3 /* \_SB_.WMI2.WMA8.PRE3 */
                WLS4 = PRE4 /* \_SB_.WMI2.WMA8.PRE4 */
                WLS5 = PRE5 /* \_SB_.WMI2.WMA8.PRE5 */
                WLS6 = PRE6 /* \_SB_.WMI2.WMA8.PRE6 */
                WLS7 = PRE7 /* \_SB_.WMI2.WMA8.PRE7 */
                WMIS (0x08, Zero)
                Release (^^WMI1.MWMI)
            }

            Name (ITEM, Package (0x0F)
            {
                Package (0x02)
                {
                    Zero, 
                    "InhibitEnteringThinkPadSetup"
                }, 

                Package (0x02)
                {
                    0x03, 
                    "MTMSerialConcatenation"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "SwapProductName"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "ComputraceMsgDisable"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "CpuDebugEnable"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "PasswordAfterBootDeviceList"
                }, 

                Package (0x02)
                {
                    0x02, 
                    "SpecialCharForPassword"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "CustomPasswordMode"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "AbsoluteFree"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "ShutdownByBottomCoverTamper"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "TpmClearByBottomCoverTamper"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "CustomPowerOffSetting"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "ShutdownByCoverTamper"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "TpmClearByCoverTamper"
                }, 

                Package (0x02)
                {
                    Zero, 
                    "MeasureKdma"
                }
            })
            Name (VSEL, Package (0x04)
            {
                Package (0x02)
                {
                    "Disable", 
                    "Enable"
                }, 

                Package (0x02)
                {
                    "Off", 
                    "On"
                }, 

                Package (0x26)
                {
                    "409", 
                    "c0c", 
                    "1009", 
                    "80a", 
                    "416", 
                    "813", 
                    "406", 
                    "40a", 
                    "40c", 
                    "407", 
                    "40e", 
                    "40f", 
                    "410", 
                    "414", 
                    "816", 
                    "424", 
                    "40b", 
                    "807", 
                    "41f", 
                    "809", 
                    "411", 
                    "412", 
                    "404", 
                    "841f", 
                    "425", 
                    "8406", 
                    "405", 
                    "401", 
                    "402", 
                    "408", 
                    "40d", 
                    "419", 
                    "8409", 
                    "41e", 
                    "4009", 
                    "9009", 
                    "422", 
                    "481"
                }, 

                Package (0x06)
                {
                    "Disable", 
                    "Enable", 
                    "Default", 
                    "MTMSN", 
                    "1SMTMSN", 
                    "MTSN"
                }
            })
            Method (WQA9, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                If ((WMIS (0x09, Arg0) != Zero))
                {
                    Release (^^WMI1.MWMI)
                    Return ("")
                }

                Local0 = DerefOf (ITEM [WITM])
                Local1 = DerefOf (Local0 [Zero])
                Local2 = DerefOf (Local0 [One])
                Concatenate (Local2, ",", Local6)
                Local3 = DerefOf (VSEL [Local1])
                Concatenate (Local6, DerefOf (Local3 [WSEL]), Local7)
                Release (^^WMI1.MWMI)
                Return (Local7)
            }

            Method (WMAA, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == Zero))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = ^^WMI1.CARG (Arg2)
                    If ((Local0 == Zero))
                    {
                        Local0 = ^^WMI1.WSET (ITEM, VSEL)
                        If ((Local0 == Zero))
                        {
                            Local0 = WMIS (0x0A, Zero)
                        }
                    }
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (^^WMI1.RETN [Local0]))
            }

            Method (WMF9, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WEXF = One
                If ((SizeOf (Arg2) == Zero))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = ^^WMI1.CARG (Arg2)
                    If ((Local0 == Zero))
                    {
                        CBFF = Zero
                        CBFF = ^^WMI1.IBUF /* \_SB_.WMI1.IBUF */
                        Local0 = ^^WMI1.WSET (ITEM, VSEL)
                        If ((Local0 == Zero))
                        {
                            Local0 = WMIS (0x0A, Zero)
                        }

                        CBFF = Zero
                    }
                }

                WEXF = Zero
                Release (^^WMI1.MWMI)
                Return (DerefOf (^^WMI1.RETN [Local0]))
            }

            Name (WQBB, Buffer (0x05DD)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xCD, 0x05, 0x00, 0x00, 0xBC, 0x1F, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0x54, 0x8F, 0x00, 0x01, 0x06, 0x18, 0x42,  // .T.....B
                /* 0020 */  0x10, 0x0F, 0x10, 0x8A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x50, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PP...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x10, 0x88, 0x14, 0x40, 0x48, 0x28, 0x84,  // 1...@H(.
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0x0A, 0x90, 0x29, 0xC0, 0xA0,  // .....)..
                /* 0060 */  0x00, 0xA7, 0x08, 0x22, 0x88, 0xD2, 0xB2, 0x00,  // ..."....
                /* 0068 */  0xDD, 0x02, 0x7C, 0x0B, 0xD0, 0x0E, 0x21, 0xB4,  // ..|...!.
                /* 0070 */  0xC8, 0x95, 0x0A, 0xB0, 0x08, 0x25, 0x9F, 0x80,  // .....%..
                /* 0078 */  0x92, 0x88, 0x22, 0xD9, 0x78, 0xB2, 0x8D, 0x48,  // ..".x..H
                /* 0080 */  0xE6, 0x61, 0x91, 0x83, 0x40, 0x89, 0x19, 0x04,  // .a..@...
                /* 0088 */  0x4A, 0x27, 0xAE, 0x6C, 0xE2, 0x6A, 0x10, 0x07,  // J'.l.j..
                /* 0090 */  0x10, 0xE5, 0x3C, 0xA2, 0x24, 0x38, 0xAA, 0x83,  // ..<.$8..
                /* 0098 */  0x88, 0x10, 0xBB, 0x5C, 0x01, 0x92, 0x07, 0x20,  // ...\... 
                /* 00A0 */  0xCD, 0x13, 0x93, 0xF5, 0x39, 0x68, 0x64, 0x6C,  // ....9hdl
                /* 00A8 */  0x04, 0x3C, 0x98, 0x04, 0x10, 0x16, 0x65, 0x9D,  // .<....e.
                /* 00B0 */  0x8A, 0x02, 0x83, 0x1A, 0xB2, 0xE5, 0x8C, 0x15,  // ........
                /* 00B8 */  0x05, 0x6C, 0xAF, 0x13, 0x91, 0xC9, 0x81, 0x52,  // .l.....R
                /* 00C0 */  0x49, 0x70, 0xA8, 0x61, 0x7A, 0x6A, 0xCD, 0x4F,  // Ip.azj.O
                /* 00C8 */  0x4C, 0x13, 0x39, 0xB5, 0xA6, 0x87, 0x2C, 0x48,  // L.9...,H
                /* 00D0 */  0x26, 0x6D, 0x28, 0xA8, 0xB1, 0x7B, 0x5A, 0x27,  // &m(..{Z'
                /* 00D8 */  0xE5, 0x99, 0x46, 0x3C, 0x28, 0xC3, 0x24, 0xF0,  // ..F<(.$.
                /* 00E0 */  0x28, 0x18, 0x1A, 0x27, 0x28, 0x0B, 0x42, 0x0E,  // (..'(.B.
                /* 00E8 */  0x06, 0x8A, 0x02, 0x3C, 0x09, 0xCF, 0xB1, 0x78,  // ...<...x
                /* 00F0 */  0x01, 0xC2, 0x47, 0x4C, 0xCE, 0x02, 0x31, 0x12,  // ..GL..1.
                /* 00F8 */  0xF8, 0x4C, 0xE0, 0x91, 0x1F, 0x33, 0x76, 0x44,  // .L...3vD
                /* 0100 */  0xE1, 0x02, 0x9E, 0xCF, 0x31, 0x44, 0x8E, 0x7B,  // ....1D.{
                /* 0108 */  0xA8, 0x31, 0x8E, 0x22, 0xF2, 0xE1, 0x30, 0xB4,  // .1."..0.
                /* 0110 */  0xD3, 0x8D, 0x73, 0x60, 0xA7, 0x53, 0x10, 0xB8,  // ..s`.S..
                /* 0118 */  0x40, 0x82, 0xF5, 0x3C, 0x67, 0x81, 0xFC, 0xFF,  // @..<g...
                /* 0120 */  0x63, 0x1C, 0x04, 0xC3, 0x3B, 0x06, 0x8C, 0x0C,  // c...;...
                /* 0128 */  0x08, 0x79, 0x14, 0x60, 0x75, 0x58, 0x9A, 0x44,  // .y.`uX.D
                /* 0130 */  0x02, 0xBB, 0x17, 0xA0, 0xF1, 0x12, 0x20, 0x85,  // ...... .
                /* 0138 */  0x83, 0x94, 0x32, 0x08, 0xC1, 0x34, 0x26, 0xC0,  // ..2..4&.
                /* 0140 */  0xD6, 0xA1, 0x41, 0xDE, 0x04, 0x58, 0xBB, 0x0A,  // ..A..X..
                /* 0148 */  0x08, 0x25, 0xD2, 0x09, 0xC4, 0x09, 0x11, 0x25,  // .%.....%
                /* 0150 */  0x62, 0x50, 0x03, 0x45, 0xA9, 0x0D, 0x55, 0x30,  // bP.E..U0
                /* 0158 */  0x9D, 0x0D, 0x4F, 0x98, 0x71, 0x43, 0xC4, 0x30,  // ..O.qC.0
                /* 0160 */  0x50, 0xDC, 0xF6, 0x07, 0x41, 0x86, 0x8D, 0x1B,  // P...A...
                /* 0168 */  0xBF, 0x07, 0x75, 0x5A, 0x67, 0x77, 0x4C, 0xAF,  // ..uZgwL.
                /* 0170 */  0x0A, 0x26, 0xF0, 0xA4, 0xDF, 0x10, 0x9E, 0x0E,  // .&......
                /* 0178 */  0x8E, 0xE2, 0x68, 0xA3, 0xC6, 0x68, 0x8E, 0x94,  // ..h..h..
                /* 0180 */  0xAD, 0x5A, 0x1A, 0x38, 0x14, 0x09, 0x1E, 0x75,  // .Z.8...u
                /* 0188 */  0x5E, 0xF0, 0xC9, 0xC0, 0x43, 0x3B, 0x6C, 0x0F,  // ^...C;l.
                /* 0190 */  0xF6, 0x2C, 0x3D, 0x84, 0x23, 0x78, 0x66, 0x78,  // .,=.#xfx
                /* 0198 */  0x24, 0xF0, 0x18, 0xD8, 0x5D, 0xC1, 0x87, 0x00,  // $...]...
                /* 01A0 */  0x9F, 0x11, 0xF0, 0xAE, 0x01, 0x75, 0x39, 0x78,  // .....u9x
                /* 01A8 */  0x34, 0x60, 0x93, 0x0E, 0x87, 0x19, 0xAF, 0xE7,  // 4`......
                /* 01B0 */  0xEE, 0xA9, 0xFB, 0x8C, 0xC1, 0xCF, 0x1B, 0x1E,  // ........
                /* 01B8 */  0x1C, 0x6E, 0xA4, 0x27, 0x73, 0x64, 0xA5, 0x0A,  // .n.'sd..
                /* 01C0 */  0x30, 0x7B, 0x0D, 0xD0, 0x51, 0xC2, 0x07, 0x0E,  // 0{..Q...
                /* 01C8 */  0x76, 0x17, 0x78, 0x0A, 0x30, 0x81, 0xE5, 0x0F,  // v.x.0...
                /* 01D0 */  0x02, 0x35, 0x32, 0x43, 0x7B, 0xBC, 0xEF, 0x1D,  // .52C{...
                /* 01D8 */  0x86, 0x7C, 0x52, 0x38, 0x2C, 0x26, 0xF6, 0xE0,  // .|R8,&..
                /* 01E0 */  0x41, 0xC7, 0x03, 0xFE, 0xFB, 0xC8, 0x93, 0x86,  // A.......
                /* 01E8 */  0xA7, 0xEF, 0xF9, 0x9A, 0x60, 0x60, 0x08, 0x59,  // ....``.Y
                /* 01F0 */  0x19, 0x0F, 0x6A, 0x20, 0x86, 0x7E, 0x55, 0x38,  // ..j .~U8
                /* 01F8 */  0x8C, 0xD3, 0xF0, 0x09, 0xC4, 0xE7, 0x80, 0x20,  // ....... 
                /* 0200 */  0x31, 0x8E, 0xC9, 0x83, 0xF3, 0xFF, 0x9F, 0xC0,  // 1.......
                /* 0208 */  0xB1, 0x46, 0x4E, 0xCF, 0x29, 0x3E, 0x4F, 0xF0,  // .FN.)>O.
                /* 0210 */  0xC3, 0x85, 0xCF, 0x13, 0xEC, 0xC4, 0x70, 0x1A,  // ......p.
                /* 0218 */  0xCF, 0x01, 0x1E, 0xCE, 0x59, 0xF9, 0x38, 0x01,  // ....Y.8.
                /* 0220 */  0x2C, 0x20, 0x5E, 0x27, 0xF8, 0x40, 0xE1, 0xC3,  // , ^'.@..
                /* 0228 */  0x1E, 0x9A, 0x47, 0xF1, 0x12, 0xF1, 0xF6, 0x60,  // ..G....`
                /* 0230 */  0x82, 0x68, 0x0F, 0x31, 0x60, 0x9C, 0x11, 0xEE,  // .h.1`...
                /* 0238 */  0xBC, 0x01, 0xE7, 0x14, 0x03, 0x3C, 0xA0, 0x0E,  // .....<..
                /* 0240 */  0x01, 0x73, 0x98, 0xF0, 0x10, 0xF8, 0x00, 0x9E,  // .s......
                /* 0248 */  0x41, 0xCE, 0xD1, 0xC7, 0x9C, 0x33, 0xC3, 0x1D,  // A....3..
                /* 0250 */  0x77, 0xC0, 0x36, 0x0C, 0x1E, 0xD9, 0x02, 0x08,  // w.6.....
                /* 0258 */  0x8B, 0xF3, 0x24, 0x50, 0xC0, 0xB7, 0x01, 0x85,  // ..$P....
                /* 0260 */  0xF1, 0xE1, 0x06, 0xBC, 0xFF, 0xFF, 0xC3, 0x0D,  // ........
                /* 0268 */  0x70, 0x3D, 0x1F, 0xE0, 0x8E, 0x0F, 0x70, 0x2F,  // p=....p/
                /* 0270 */  0x16, 0xEC, 0xF0, 0xF0, 0x78, 0x03, 0x0C, 0x86,  // ....x...
                /* 0278 */  0xF4, 0x48, 0xF3, 0x56, 0x13, 0xE3, 0xD5, 0x26,  // .H.V...&
                /* 0280 */  0x44, 0x84, 0x87, 0x9A, 0x77, 0x1B, 0x23, 0xC5,  // D...w.#.
                /* 0288 */  0x7B, 0xBC, 0x61, 0xD7, 0x98, 0xB3, 0x78, 0x00,  // {.a...x.
                /* 0290 */  0x89, 0x52, 0x1C, 0x9A, 0x2E, 0x36, 0x31, 0xA2,  // .R...61.
                /* 0298 */  0xBC, 0xD9, 0x18, 0xF6, 0x4D, 0xC7, 0x40, 0xA1,  // ....M.@.
                /* 02A0 */  0x22, 0x45, 0x08, 0xF3, 0x62, 0x11, 0xE2, 0xF1,  // "E..b...
                /* 02A8 */  0x06, 0xCC, 0x92, 0x5E, 0x2A, 0xFA, 0x1C, 0xF8,  // ...^*...
                /* 02B0 */  0x78, 0x03, 0x78, 0xF9, 0xFF, 0x1F, 0x6F, 0x00,  // x.x...o.
                /* 02B8 */  0x0F, 0xC3, 0xF0, 0x31, 0x05, 0x6C, 0x37, 0x07,  // ...1.l7.
                /* 02C0 */  0x76, 0x4F, 0x81, 0x7F, 0x4E, 0x01, 0x1C, 0x09,  // vO..N...
                /* 02C8 */  0x79, 0x04, 0xE8, 0xE0, 0x61, 0x11, 0x20, 0xB2,  // y...a. .
                /* 02D0 */  0xF1, 0x0C, 0xF0, 0x99, 0x88, 0x0A, 0xA4, 0xD2,  // ........
                /* 02D8 */  0x4C, 0xC1, 0x32, 0x4E, 0xC1, 0xEA, 0x84, 0xC8,  // L.2N....
                /* 02E0 */  0x65, 0x50, 0x48, 0x04, 0x84, 0x46, 0x66, 0x38,  // ePH..Ff8
                /* 02E8 */  0x1F, 0x12, 0x0D, 0x66, 0x10, 0x9F, 0x0F, 0x7C,  // ...f...|
                /* 02F0 */  0xA6, 0xF0, 0xC9, 0x89, 0xFF, 0xFF, 0x4F, 0x4E,  // ......ON
                /* 02F8 */  0xE0, 0x39, 0x98, 0x3C, 0x54, 0xC0, 0x42, 0xF4,  // .9.<T.B.
                /* 0300 */  0x69, 0x81, 0xC3, 0xF9, 0xCC, 0xC2, 0xE1, 0x7C,  // i......|
                /* 0308 */  0x24, 0xE1, 0x07, 0x48, 0x7E, 0x54, 0x02, 0x97,  // $..H~T..
                /* 0310 */  0xC0, 0x43, 0x03, 0x28, 0x80, 0x7C, 0x3F, 0xF0,  // .C.(.|?.
                /* 0318 */  0x39, 0xE0, 0x19, 0x81, 0xCD, 0xE1, 0x91, 0xC0,  // 9.......
                /* 0320 */  0x07, 0x02, 0x06, 0xCF, 0xA3, 0x8D, 0x8A, 0x1E,  // ........
                /* 0328 */  0x6D, 0x3C, 0x3C, 0x7E, 0x64, 0xF0, 0x7C, 0x1E,  // m<<~d.|.
                /* 0330 */  0x08, 0x8E, 0xF2, 0x91, 0x00, 0x87, 0xF1, 0x7E,  // .......~
                /* 0338 */  0xE1, 0x21, 0xFA, 0x94, 0x03, 0x6B, 0x22, 0x47,  // .!...k"G
                /* 0340 */  0x6D, 0xD1, 0x27, 0x02, 0x81, 0x3E, 0x73, 0x61,  // m.'..>sa
                /* 0348 */  0x4E, 0x39, 0xC0, 0x29, 0xF8, 0xE8, 0x51, 0x51,  // N9.)..QQ
                /* 0350 */  0x0F, 0xA4, 0xA0, 0x3D, 0x29, 0xF8, 0xAC, 0xE0,  // ...=)...
                /* 0358 */  0xC3, 0x17, 0xFC, 0xFF, 0xFF, 0xE1, 0x0B, 0xCE,  // ........
                /* 0360 */  0xBC, 0x5E, 0xD6, 0x7C, 0xE0, 0x88, 0x73, 0x16,  // .^.|..s.
                /* 0368 */  0xA7, 0xFB, 0x6E, 0x81, 0x3F, 0x91, 0x02, 0xB3,  // ..n.?...
                /* 0370 */  0x20, 0x27, 0x52, 0x14, 0x8C, 0x4F, 0xA4, 0x80,  //  'R..O..
                /* 0378 */  0xCD, 0x5B, 0x00, 0xF6, 0xBA, 0xF0, 0x24, 0x02,  // .[....$.
                /* 0380 */  0xE3, 0x1C, 0xF1, 0x8C, 0x05, 0xF3, 0x50, 0x75,  // ......Pu
                /* 0388 */  0x8A, 0x2F, 0x55, 0x6F, 0x0C, 0x11, 0x9E, 0xAC,  // ./Uo....
                /* 0390 */  0x5E, 0xA3, 0x1E, 0xB0, 0x0C, 0xF6, 0x22, 0x60,  // ^....."`
                /* 0398 */  0x98, 0x57, 0x2C, 0x9F, 0xAE, 0x42, 0x3C, 0x60,  // .W,..B<`
                /* 03A0 */  0xF9, 0xAC, 0x15, 0x2D, 0x44, 0xC8, 0x28, 0xC1,  // ...-D.(.
                /* 03A8 */  0x5E, 0xB1, 0x5E, 0x65, 0x7C, 0xA4, 0x32, 0x78,  // ^.^e|.2x
                /* 03B0 */  0xC0, 0xB0, 0xD1, 0x22, 0x45, 0x78, 0xC4, 0xC2,  // ..."Ex..
                /* 03B8 */  0xFF, 0xFF, 0x8F, 0x58, 0xE0, 0x91, 0x70, 0x20,  // ...X..p 
                /* 03C0 */  0x05, 0xA8, 0x32, 0x70, 0xDC, 0x81, 0x14, 0xD8,  // ..2p....
                /* 03C8 */  0x9F, 0x26, 0xF0, 0xD7, 0x0B, 0x8F, 0x07, 0xFB,  // .&......
                /* 03D0 */  0xFF, 0x3F, 0x07, 0x80, 0xEF, 0x10, 0x03, 0x0C,  // .?......
                /* 03D8 */  0x06, 0x0C, 0xE3, 0x10, 0x03, 0x3C, 0x04, 0x9F,  // .....<..
                /* 03E0 */  0xCC, 0x40, 0x7F, 0xDC, 0x81, 0x3F, 0x0E, 0x9E,  // .@...?..
                /* 03E8 */  0xF1, 0xC9, 0x61, 0x02, 0x85, 0x39, 0x91, 0xA2,  // ..a..9..
                /* 03F0 */  0x60, 0x7C, 0x22, 0x05, 0x9C, 0xFD, 0xFF, 0x0F,  // `|".....
                /* 03F8 */  0x57, 0x60, 0x38, 0xDE, 0x80, 0xFF, 0x36, 0xE3,  // W`8...6.
                /* 0400 */  0x43, 0xA8, 0xCF, 0x37, 0xBE, 0x90, 0x1A, 0xE2,  // C..7....
                /* 0408 */  0xC5, 0xE6, 0x4D, 0xED, 0x95, 0xE0, 0xF5, 0x9D,  // ..M.....
                /* 0410 */  0x5D, 0x6B, 0x5E, 0xDF, 0x7D, 0x2A, 0x78, 0x12,  // ]k^.}*x.
                /* 0418 */  0x8D, 0x10, 0x32, 0xCA, 0x4B, 0x8E, 0x41, 0x42,  // ..2.K.AB
                /* 0420 */  0xBC, 0x8E, 0x1A, 0x30, 0x58, 0x90, 0x88, 0xA7,  // ...0X...
                /* 0428 */  0xF0, 0xB4, 0xF3, 0x78, 0x03, 0x5E, 0x51, 0x07,  // ...x.^Q.
                /* 0430 */  0x52, 0x80, 0x1E, 0xFF, 0xFF, 0x03, 0x29, 0x30,  // R.....)0
                /* 0438 */  0xB8, 0xA7, 0xC0, 0x3E, 0xA7, 0x00, 0x9E, 0x92,  // ...>....
                /* 0440 */  0x9F, 0x48, 0x69, 0xEA, 0x13, 0x29, 0x5A, 0x11,  // .Hi..)Z.
                /* 0448 */  0x90, 0xA6, 0x0A, 0x16, 0x82, 0xE9, 0x4F, 0xA4,  // ......O.
                /* 0450 */  0xF4, 0x60, 0xE0, 0xDC, 0x24, 0x4A, 0x3E, 0x34,  // .`..$J>4
                /* 0458 */  0x0A, 0xE7, 0xAC, 0x07, 0x12, 0x0A, 0x62, 0x40,  // ......b@
                /* 0460 */  0x07, 0x39, 0x54, 0xA0, 0xCF, 0x2A, 0x3E, 0x90,  // .9T..*>.
                /* 0468 */  0x1C, 0xC8, 0x23, 0xA2, 0x87, 0xE5, 0x43, 0xA5,  // ..#...C.
                /* 0470 */  0xEF, 0x2A, 0x3E, 0x87, 0xF8, 0x48, 0xE1, 0xF1,  // .*>..H..
                /* 0478 */  0xFB, 0xB0, 0xC0, 0xFF, 0x33, 0x3E, 0x8E, 0x32,  // ....3>.2
                /* 0480 */  0xF0, 0x6A, 0xCE, 0x2B, 0x28, 0x30, 0x9F, 0x46,  // .j.+(0.F
                /* 0488 */  0x31, 0xBA, 0xEE, 0x13, 0x20, 0xF9, 0xFF, 0xCF,  // 1... ...
                /* 0490 */  0x8F, 0xEB, 0x3B, 0x8C, 0x82, 0x1C, 0x9D, 0x87,  // ..;.....
                /* 0498 */  0x9F, 0x2C, 0x2A, 0xEE, 0x64, 0x29, 0x88, 0x27,  // .,*.d).'
                /* 04A0 */  0xEB, 0x28, 0x93, 0x45, 0xCF, 0xC4, 0xB7, 0x0B,  // .(.E....
                /* 04A8 */  0xCF, 0xE8, 0xBD, 0xCB, 0x37, 0x58, 0x76, 0x93,  // ....7Xv.
                /* 04B0 */  0x85, 0x77, 0x19, 0x08, 0xF9, 0x68, 0xE0, 0x9B,  // .w...h..
                /* 04B8 */  0x2C, 0xDC, 0xB1, 0xF8, 0x32, 0x02, 0xBE, 0x9B,  // ,...2...
                /* 04C0 */  0x2C, 0xE0, 0x75, 0x34, 0x3E, 0x5B, 0xB0, 0x53,  // ,.u4>[.S
                /* 04C8 */  0x88, 0xAF, 0x6B, 0xB0, 0xB2, 0xDE, 0xB0, 0xC8,  // ..k.....
                /* 04D0 */  0xFF, 0x9F, 0x60, 0x9C, 0x85, 0x28, 0xE4, 0x92,  // ..`..(..
                /* 04D8 */  0x28, 0x8C, 0x6F, 0x58, 0x80, 0xA3, 0xBB, 0x0D,  // (.oX....
                /* 04E0 */  0xEE, 0x86, 0x05, 0x1C, 0x80, 0x0E, 0xC5, 0x57,  // .......W
                /* 04E8 */  0x2C, 0xD8, 0x87, 0xA8, 0x37, 0xAA, 0x08, 0x3E,  // ,...7..>
                /* 04F0 */  0x5F, 0xBD, 0x60, 0x3D, 0x57, 0x3D, 0x89, 0xFA,  // _.`=W=..
                /* 04F8 */  0x5A, 0xF5, 0x6C, 0x65, 0xF4, 0x17, 0x52, 0x76,  // Z.le..Rv
                /* 0500 */  0xBA, 0xF2, 0x15, 0xCB, 0x88, 0xE1, 0x02, 0x86,  // ........
                /* 0508 */  0x32, 0x4C, 0xB8, 0x57, 0x88, 0x58, 0x81, 0x63,  // 2L.W.X.c
                /* 0510 */  0xBE, 0x90, 0xFA, 0x9C, 0xED, 0x5B, 0x15, 0xBB,  // .....[..
                /* 0518 */  0x62, 0x81, 0x53, 0xD6, 0x15, 0x0B, 0x48, 0xFD,  // b.S...H.
                /* 0520 */  0xFF, 0xAF, 0x58, 0x80, 0xD1, 0xE1, 0xBF, 0x62,  // ..X....b
                /* 0528 */  0x01, 0xA7, 0x83, 0x03, 0xBB, 0x63, 0x01, 0x9E,  // .....c..
                /* 0530 */  0xD2, 0xDF, 0xB1, 0xE8, 0x2D, 0xCB, 0x77, 0x2C,  // ....-.w,
                /* 0538 */  0x7E, 0x10, 0xB1, 0xA6, 0x3B, 0x16, 0x84, 0xFF,  // ~...;...
                /* 0540 */  0xFF, 0x5C, 0xE1, 0x5E, 0xB2, 0x00, 0x8E, 0xFF,  // .\.^....
                /* 0548 */  0xFF, 0x2F, 0x59, 0xF0, 0xC2, 0x5D, 0xB2, 0x80,  // ./Y..]..
                /* 0550 */  0xDE, 0x05, 0x09, 0x7C, 0x97, 0x2C, 0xF8, 0x17,  // ...|.,..
                /* 0558 */  0x24, 0xAE, 0xD0, 0xA6, 0x4F, 0x8D, 0x46, 0xAD,  // $...O.F.
                /* 0560 */  0x1A, 0x94, 0xA9, 0x51, 0xA6, 0x41, 0xAD, 0x3E,  // ...Q.A.>
                /* 0568 */  0x95, 0x1A, 0x33, 0xE6, 0x06, 0x4A, 0xE2, 0x6E,  // ..3..J.n
                /* 0570 */  0x18, 0x54, 0xD2, 0xBA, 0x34, 0x30, 0x07, 0x02,  // .T..40..
                /* 0578 */  0xA1, 0x01, 0x24, 0x80, 0xB0, 0xD0, 0xBF, 0x20,  // ..$.... 
                /* 0580 */  0x1D, 0x13, 0xC8, 0x77, 0x4B, 0x40, 0x16, 0xBB,  // ...wK@..
                /* 0588 */  0x2C, 0x81, 0x58, 0xA6, 0x0A, 0x88, 0x46, 0x2E,  // ,.X...F.
                /* 0590 */  0x17, 0x06, 0x11, 0x90, 0xE3, 0xFD, 0x6B, 0x04,  // ......k.
                /* 0598 */  0xEA, 0x48, 0x3A, 0x80, 0x98, 0x20, 0x1F, 0x83,  // .H:.. ..
                /* 05A0 */  0xA5, 0x4F, 0x01, 0x81, 0x58, 0x36, 0xAD, 0x00,  // .O..X6..
                /* 05A8 */  0x2D, 0xD7, 0x09, 0x10, 0x0B, 0x0B, 0x42, 0x03,  // -.....B.
                /* 05B0 */  0x5A, 0x19, 0x02, 0x4B, 0x0B, 0x22, 0x20, 0x27,  // Z..K." '
                /* 05B8 */  0xD3, 0x02, 0xC4, 0x72, 0x82, 0x08, 0xC8, 0xCA,  // ...r....
                /* 05C0 */  0x16, 0x2C, 0x70, 0x6B, 0xFA, 0x6E, 0x08, 0xC8,  // .,pk.n..
                /* 05C8 */  0x89, 0x40, 0x68, 0x92, 0x67, 0x83, 0x40, 0x1D,  // .@h.g.@.
                /* 05D0 */  0x0B, 0x44, 0x40, 0x8E, 0x60, 0x07, 0x88, 0x05,  // .D@.`...
                /* 05D8 */  0x02, 0x11, 0x90, 0xFF, 0xFF                     // .....
            })
        }

        Device (WMI3)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_WDG, /**** Is ResourceTemplate, but EndTag not at buffer end ****/ Buffer (0x3C)
            {
                /* 0000 */  0x79, 0x36, 0x4D, 0x8F, 0x9E, 0x74, 0x79, 0x44,  // y6M..tyD
                /* 0008 */  0x9B, 0x16, 0xC6, 0x26, 0x01, 0xFD, 0x25, 0xF0,  // ...&..%.
                /* 0010 */  0x41, 0x42, 0x01, 0x02, 0x69, 0xE8, 0xD2, 0x85,  // AB..i...
                /* 0018 */  0x5A, 0x36, 0xCE, 0x4A, 0xA4, 0xD3, 0xCD, 0x69,  // Z6.J...i
                /* 0020 */  0x2B, 0x16, 0x98, 0xA0, 0x41, 0x43, 0x01, 0x02,  // +...AC..
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x42, 0x43, 0x01, 0x00                           // BC..
            })
            Method (WMAB, 3, NotSerialized)
            {
                CreateByteField (Arg2, Zero, ASS0)
                CreateWordField (Arg2, One, ASS1)
                CreateByteField (Arg2, 0x03, ASS2)
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WASB = ASS0 /* \_SB_.WMI3.WMAB.ASS0 */
                WASI = ASS1 /* \_SB_.WMI3.WMAB.ASS1 */
                WASD = ASS2 /* \_SB_.WMI3.WMAB.ASS2 */
                WMIS (0x0B, Zero)
                Local0 = WASS /* \WASS */
                Release (^^WMI1.MWMI)
                Return (Local0)
            }

            Method (WMAC, 3, NotSerialized)
            {
                CreateByteField (Arg2, Zero, ASS0)
                CreateWordField (Arg2, One, ASS1)
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WASB = ASS0 /* \_SB_.WMI3.WMAC.ASS0 */
                WASI = ASS1 /* \_SB_.WMI3.WMAC.ASS1 */
                WMIS (0x0C, Arg1)
                Local0 = WASS /* \WASS */
                Release (^^WMI1.MWMI)
                Return (Local0)
            }

            Name (WQBC, Buffer (0x040A)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xFA, 0x03, 0x00, 0x00, 0x32, 0x12, 0x00, 0x00,  // ....2...
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0xC3, 0x88, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x07, 0x10, 0x8A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x50, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PP...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x10, 0x88, 0x14, 0x40, 0x48, 0x28, 0x84,  // 1...@H(.
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0x0A, 0x90, 0x29, 0xC0, 0xA0,  // .....)..
                /* 0060 */  0x00, 0xA7, 0x08, 0x22, 0x88, 0xD2, 0xB2, 0x00,  // ..."....
                /* 0068 */  0xDD, 0x02, 0x7C, 0x0B, 0xD0, 0x0E, 0x21, 0xB4,  // ..|...!.
                /* 0070 */  0x58, 0x07, 0x11, 0x21, 0xD2, 0x31, 0x34, 0x29,  // X..!.14)
                /* 0078 */  0x40, 0xA2, 0x00, 0x8B, 0x02, 0x64, 0xC3, 0xC8,  // @....d..
                /* 0080 */  0x36, 0x22, 0x99, 0x87, 0x45, 0x0E, 0x02, 0x25,  // 6"..E..%
                /* 0088 */  0x66, 0x10, 0x28, 0x9D, 0xE0, 0xB2, 0x89, 0xAB,  // f.(.....
                /* 0090 */  0x41, 0x9C, 0x4C, 0x94, 0xF3, 0x88, 0x92, 0xE0,  // A.L.....
                /* 0098 */  0xA8, 0x0E, 0x22, 0x42, 0xEC, 0x72, 0x05, 0x48,  // .."B.r.H
                /* 00A0 */  0x1E, 0x80, 0x34, 0x4F, 0x4C, 0xD6, 0xE7, 0xA0,  // ..4OL...
                /* 00A8 */  0x91, 0xB1, 0x11, 0xF0, 0x94, 0x1A, 0x40, 0x58,  // ......@X
                /* 00B0 */  0xA0, 0x75, 0x2A, 0xE0, 0x7A, 0x0D, 0x43, 0x3D,  // .u*.z.C=
                /* 00B8 */  0x80, 0x48, 0xCE, 0x58, 0x51, 0xC0, 0xF6, 0x3A,  // .H.XQ..:
                /* 00C0 */  0x11, 0x8D, 0xEA, 0x40, 0x99, 0x24, 0x38, 0xD4,  // ...@.$8.
                /* 00C8 */  0x30, 0x3D, 0xB5, 0xE6, 0x27, 0xA6, 0x89, 0x9C,  // 0=..'...
                /* 00D0 */  0x5A, 0xD3, 0x43, 0x16, 0x24, 0x93, 0x36, 0x14,  // Z.C.$.6.
                /* 00D8 */  0xD4, 0xD8, 0x3D, 0xAD, 0x93, 0xF2, 0x4C, 0x23,  // ..=...L#
                /* 00E0 */  0x1E, 0x94, 0x61, 0x12, 0x78, 0x14, 0x0C, 0x8D,  // ..a.x...
                /* 00E8 */  0x13, 0x94, 0x75, 0x22, 0xA0, 0x03, 0xE5, 0x80,  // ..u"....
                /* 00F0 */  0x27, 0xE1, 0x39, 0x16, 0x2F, 0x40, 0xF8, 0x88,  // '.9./@..
                /* 00F8 */  0xC9, 0xB4, 0x4D, 0xE0, 0x33, 0x81, 0x87, 0x79,  // ..M.3..y
                /* 0100 */  0xCC, 0xD8, 0x11, 0x85, 0x0B, 0x78, 0x3E, 0xC7,  // .....x>.
                /* 0108 */  0x10, 0x39, 0xEE, 0xA1, 0xC6, 0x38, 0x8A, 0xC8,  // .9...8..
                /* 0110 */  0x47, 0x60, 0x24, 0x03, 0xC5, 0x2B, 0x08, 0x89,  // G`$..+..
                /* 0118 */  0x80, 0xF8, 0x76, 0x70, 0x70, 0x91, 0xFC, 0xFF,  // ..vpp...
                /* 0120 */  0x47, 0x89, 0x11, 0x2A, 0xC6, 0xDB, 0x00, 0x6E,  // G..*...n
                /* 0128 */  0x5E, 0x09, 0x8A, 0x1E, 0x07, 0x4A, 0x06, 0x84,  // ^....J..
                /* 0130 */  0x3C, 0x0A, 0xB0, 0x7A, 0x28, 0x20, 0x04, 0x16,  // <..z( ..
                /* 0138 */  0x27, 0x40, 0xE3, 0x38, 0x05, 0xD3, 0x99, 0x00,  // '@.8....
                /* 0140 */  0x6D, 0x02, 0xBC, 0x09, 0x30, 0x27, 0xC0, 0x16,  // m...0'..
                /* 0148 */  0x86, 0x80, 0x82, 0x9C, 0x59, 0x94, 0x20, 0x11,  // ....Y. .
                /* 0150 */  0x42, 0x31, 0x88, 0x0A, 0x05, 0x18, 0x43, 0x14,  // B1....C.
                /* 0158 */  0xCA, 0x3B, 0x41, 0x8C, 0xCA, 0x20, 0x74, 0x82,  // .;A.. t.
                /* 0160 */  0x08, 0x14, 0x3D, 0x78, 0x98, 0xD6, 0x40, 0x74,  // ..=x..@t
                /* 0168 */  0x89, 0xF0, 0xC8, 0xB1, 0x47, 0x00, 0x9F, 0x19,  // ....G...
                /* 0170 */  0xCE, 0xE9, 0x04, 0x1F, 0x01, 0xDE, 0x16, 0x4C,  // .......L
                /* 0178 */  0xE0, 0x79, 0xBF, 0x24, 0x1C, 0x6A, 0xD8, 0x03,  // .y.$.j..
                /* 0180 */  0x8E, 0x1A, 0xE3, 0x28, 0x12, 0x58, 0xD0, 0x33,  // ...(.X.3
                /* 0188 */  0x42, 0x16, 0x40, 0x14, 0x09, 0x1E, 0x75, 0x64,  // B.@...ud
                /* 0190 */  0xF0, 0xE1, 0xC0, 0x23, 0x3B, 0x72, 0xCF, 0xF0,  // ...#;r..
                /* 0198 */  0x04, 0x82, 0x1C, 0xC2, 0x11, 0x3C, 0x36, 0x3C,  // .....<6<
                /* 01A0 */  0x15, 0x78, 0x0C, 0xEC, 0xBA, 0xE0, 0x73, 0x80,  // .x....s.
                /* 01A8 */  0x8F, 0x09, 0x78, 0xD7, 0x80, 0x9A, 0xF3, 0xD3,  // ..x.....
                /* 01B0 */  0x01, 0x9B, 0x72, 0x38, 0xCC, 0x70, 0x3D, 0xFD,  // ..r8.p=.
                /* 01B8 */  0x70, 0x27, 0x70, 0xD2, 0x06, 0x64, 0xB3, 0xF3,  // p'p..d..
                /* 01C0 */  0xE0, 0x70, 0xE3, 0x3C, 0x99, 0x23, 0x2B, 0x55,  // .p.<.#+U
                /* 01C8 */  0x80, 0xD9, 0x13, 0x82, 0x4E, 0x13, 0x3E, 0x73,  // ....N.>s
                /* 01D0 */  0xB0, 0xBB, 0xC0, 0xF9, 0xF4, 0x0C, 0x49, 0xE4,  // ......I.
                /* 01D8 */  0x0F, 0x02, 0x35, 0x32, 0x43, 0xFB, 0x2C, 0xF0,  // ..52C.,.
                /* 01E0 */  0xEA, 0x61, 0xC8, 0x87, 0x85, 0xC3, 0x62, 0x62,  // .a....bb
                /* 01E8 */  0xCF, 0x1E, 0x74, 0x3C, 0xE0, 0x3F, 0x25, 0x3C,  // ..t<.?%<
                /* 01F0 */  0x6C, 0x78, 0xFA, 0x9E, 0xAF, 0x09, 0xA2, 0x3D,  // lx.....=
                /* 01F8 */  0x8F, 0x80, 0xE1, 0xFF, 0x7F, 0x1E, 0x81, 0x39,  // .......9
                /* 0200 */  0x9C, 0x07, 0x84, 0x27, 0x07, 0x76, 0x80, 0xC0,  // ...'.v..
                /* 0208 */  0x1C, 0x48, 0x80, 0xC9, 0xF9, 0x02, 0x77, 0x28,  // .H....w(
                /* 0210 */  0xF0, 0x10, 0xF8, 0x00, 0x1E, 0x25, 0xCE, 0xD1,  // .....%..
                /* 0218 */  0x4A, 0x67, 0x86, 0x3C, 0xB9, 0x80, 0x2D, 0xFB,  // Jg.<..-.
                /* 0220 */  0x1B, 0x40, 0x07, 0x0F, 0xE7, 0x06, 0x91, 0x8D,  // .@......
                /* 0228 */  0x57, 0x80, 0x09, 0x74, 0x38, 0xB1, 0x1E, 0x20,  // W..t8.. 
                /* 0230 */  0x4D, 0x14, 0x0C, 0x04, 0xD3, 0xD3, 0x6B, 0x00,  // M.....k.
                /* 0238 */  0x3E, 0x15, 0x38, 0x37, 0x89, 0x92, 0x0F, 0x8C,  // >.87....
                /* 0240 */  0xC2, 0x39, 0xEB, 0x79, 0x84, 0x82, 0x18, 0xD0,  // .9.y....
                /* 0248 */  0x41, 0x20, 0xE4, 0xE4, 0xA0, 0x80, 0x3A, 0xAA,  // A ....:.
                /* 0250 */  0xF8, 0x3C, 0x72, 0xAA, 0x0F, 0x3D, 0x9E, 0x94,  // .<r..=..
                /* 0258 */  0x47, 0xE1, 0xAB, 0x8A, 0x0F, 0x21, 0x3E, 0x4F,  // G....!>O
                /* 0260 */  0x78, 0xF4, 0x3E, 0x29, 0xF0, 0xEF, 0x8C, 0xAF,  // x.>)....
                /* 0268 */  0x0E, 0x46, 0xB7, 0x9A, 0xE3, 0x0A, 0x0A, 0xCC,  // .F......
                /* 0270 */  0x67, 0x11, 0x4E, 0x50, 0xD7, 0x6D, 0x01, 0xFA,  // g.NP.m..
                /* 0278 */  0x29, 0xE0, 0x08, 0x3C, 0x94, 0x77, 0x92, 0xC7,  // )..<.w..
                /* 0280 */  0x90, 0x04, 0xF5, 0x9D, 0x16, 0x40, 0x01, 0xE4,  // .....@..
                /* 0288 */  0x9B, 0x81, 0x4F, 0x02, 0x21, 0xFE, 0xFF, 0x4F,  // ..O.!..O
                /* 0290 */  0x07, 0x1E, 0xC3, 0xC3, 0x80, 0xD1, 0x8C, 0xCE,  // ........
                /* 0298 */  0xC3, 0x4F, 0x16, 0x15, 0x77, 0xB2, 0x14, 0xC4,  // .O..w...
                /* 02A0 */  0x93, 0x75, 0x94, 0xC9, 0xA2, 0x67, 0xE2, 0xAB,  // .u...g..
                /* 02A8 */  0x85, 0x27, 0x74, 0x4A, 0x41, 0xCE, 0xD1, 0x13,  // .'tJA...
                /* 02B0 */  0xF6, 0x55, 0x04, 0xD6, 0xF9, 0x20, 0xE4, 0x8B,  // .U... ..
                /* 02B8 */  0x81, 0xA7, 0x61, 0x38, 0x4F, 0x96, 0xC3, 0x79,  // ..a8O..y
                /* 02C0 */  0xB2, 0x7C, 0x2C, 0xBE, 0x6A, 0xC0, 0x1F, 0x2D,  // .|,.j..-
                /* 02C8 */  0x96, 0xA0, 0xC0, 0xD9, 0x82, 0x1C, 0x1E, 0x13,  // ........
                /* 02D0 */  0x6F, 0x54, 0xF4, 0x46, 0xE4, 0xE1, 0xF1, 0xCB,  // oT.F....
                /* 02D8 */  0x81, 0xE7, 0xF3, 0x8C, 0x70, 0x94, 0x6F, 0x12,  // ....p.o.
                /* 02E0 */  0x38, 0x8C, 0xC7, 0x12, 0x0F, 0xD1, 0x97, 0x23,  // 8......#
                /* 02E8 */  0x58, 0x13, 0x39, 0x69, 0xDF, 0x16, 0x4E, 0x36,  // X.9i..N6
                /* 02F0 */  0xE8, 0x4B, 0x10, 0xBB, 0x1C, 0x01, 0xBF, 0x88,  // .K......
                /* 02F8 */  0x26, 0x86, 0xC1, 0x22, 0x2D, 0x45, 0x11, 0x17,  // &.."-E..
                /* 0300 */  0x45, 0x61, 0x7C, 0xC5, 0x82, 0xFD, 0xFF, 0xBF,  // Ea|.....
                /* 0308 */  0x62, 0x01, 0x16, 0x04, 0x0F, 0x1B, 0x34, 0x87,  // b.....4.
                /* 0310 */  0x83, 0x97, 0x1E, 0x36, 0x6B, 0x38, 0x07, 0x99,  // ...6k8..
                /* 0318 */  0xD3, 0xF1, 0x48, 0x4E, 0x1B, 0xC6, 0x1D, 0x0B,  // ..HN....
                /* 0320 */  0xFE, 0x9D, 0xEA, 0xA9, 0xCA, 0xD3, 0x8A, 0xF2,  // ........
                /* 0328 */  0x64, 0xF5, 0x7A, 0xE5, 0x63, 0x96, 0xA1, 0xCE,  // d.z.c...
                /* 0330 */  0xE0, 0x1D, 0xCB, 0xB7, 0x3C, 0x4F, 0x21, 0x4A,  // ....<O!J
                /* 0338 */  0x9C, 0x97, 0x2D, 0x76, 0xC7, 0x32, 0x48, 0x50,  // ..-v.2HP
                /* 0340 */  0x23, 0x3F, 0x68, 0x31, 0x94, 0xE0, 0xF1, 0xDE,  // #?h1....
                /* 0348 */  0xB1, 0x00, 0x6F, 0xFF, 0xFF, 0x3B, 0x16, 0x60,  // ..o..;.`
                /* 0350 */  0xFC, 0x04, 0xC1, 0x09, 0x7C, 0xC7, 0x02, 0x1C,  // ....|...
                /* 0358 */  0xC5, 0x7E, 0x37, 0xE8, 0x4A, 0x45, 0xEE, 0x58,  // .~7.JE.X
                /* 0360 */  0x28, 0x0E, 0xAB, 0xB9, 0x63, 0x41, 0x9C, 0x28,  // (...cA.(
                /* 0368 */  0xE6, 0x8A, 0x05, 0x86, 0xFF, 0xFF, 0x15, 0x0B,  // ........
                /* 0370 */  0xE0, 0x75, 0xC0, 0x2B, 0x16, 0x68, 0xFE, 0xFF,  // .u.+.h..
                /* 0378 */  0x57, 0x2C, 0xF0, 0x5E, 0x8E, 0x80, 0xDF, 0x09,  // W,.^....
                /* 0380 */  0xD1, 0x77, 0x0D, 0x7E, 0x9A, 0xB6, 0xA2, 0xBB,  // .w.~....
                /* 0388 */  0x06, 0x94, 0x19, 0xBE, 0x07, 0xF9, 0xB0, 0x13,  // ........
                /* 0390 */  0x2C, 0xD2, 0xA3, 0x8D, 0x6F, 0x49, 0xE1, 0x7C,  // ,...oI.|
                /* 0398 */  0xDB, 0x00, 0xD8, 0xF2, 0xFF, 0xBF, 0x6D, 0x00,  // ......m.
                /* 03A0 */  0x4C, 0x19, 0xBF, 0x6F, 0x1B, 0xC0, 0x4F, 0xA1,  // L..o..O.
                /* 03A8 */  0x4D, 0x9F, 0x1A, 0x8D, 0x5A, 0x35, 0x28, 0x53,  // M...Z5(S
                /* 03B0 */  0xA3, 0x4C, 0x83, 0x5A, 0x7D, 0x2A, 0x35, 0x66,  // .L.Z}*5f
                /* 03B8 */  0x4C, 0xC9, 0xC1, 0xCE, 0x77, 0x0C, 0x2A, 0x6C,  // L...w.*l
                /* 03C0 */  0x65, 0x1A, 0x9A, 0x63, 0x81, 0xD0, 0x10, 0xC7,  // e..c....
                /* 03C8 */  0x26, 0x19, 0x01, 0x51, 0x22, 0x10, 0x01, 0x59,  // &..Q"..Y
                /* 03D0 */  0xFD, 0x6F, 0x42, 0x40, 0xCE, 0x02, 0x22, 0x20,  // .oB@.." 
                /* 03D8 */  0x2B, 0x58, 0x9A, 0xC0, 0x9D, 0xFF, 0xD8, 0x28,  // +X.....(
                /* 03E0 */  0x40, 0xA2, 0x02, 0x84, 0x29, 0x7D, 0x93, 0x09,  // @...)}..
                /* 03E8 */  0xD4, 0xB2, 0x41, 0x04, 0xF4, 0xFF, 0x3F, 0x42,  // ..A...?B
                /* 03F0 */  0xD9, 0x00, 0x62, 0x82, 0x41, 0x04, 0x64, 0x91,  // ..b.A.d.
                /* 03F8 */  0x3E, 0x80, 0x98, 0x62, 0x10, 0x01, 0x59, 0xDD,  // >..b..Y.
                /* 0400 */  0xA3, 0x40, 0x40, 0xD6, 0x0A, 0x22, 0x20, 0xFF,  // .@@.." .
                /* 0408 */  0xFF, 0x01                                       // ..
            })
        }

        Device (WMI4)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x57, 0xBB, 0x84, 0x85, 0x31, 0x5E, 0xC4, 0x46,  // W...1^.F
                /* 0008 */  0xBC, 0x8E, 0x5E, 0x94, 0x56, 0x3A, 0xE4, 0x15,  // ..^.V:..
                /* 0010 */  0x41, 0x44, 0x01, 0x06, 0x21, 0x12, 0x90, 0x05,  // AD..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x44, 0x01, 0x00   // ..).BD..
            })
            Name (TDRV, Package (0x08)
            {
                "Drv1", 
                "Drv2", 
                "Drv3", 
                "Drv4", 
                "Drv5", 
                "Drv6", 
                "Drv7", 
                "Drv8"
            })
            Name (PTYP, Package (0x07)
            {
                "POP", 
                "SVP", 
                "SMP", 
                "UHDP", 
                "MHDP", 
                "UDRP", 
                "ADRP"
            })
            Name (EMTH, Package (0x0E)
            {
                "ATAN", 
                "ATAC", 
                "DOD", 
                "SPZ", 
                "USNAF", 
                "CCI6", 
                "BHI5", 
                "GV", 
                "RGP1", 
                "RGP4", 
                "RTOII", 
                "OPALPASS", 
                "NVMEU", 
                "NVMEC"
            })
            Method (WMAD, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == Zero))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = ^^WMI1.CARG (Arg2)
                    If ((Local0 == Zero))
                    {
                        If ((^^WMI1.ILEN != Zero))
                        {
                            ^^WMI1.CLRP ()
                            Local0 = SWIP (^^WMI1.IBUF)
                            If ((Local0 == Zero))
                            {
                                Local0 = WMIS (0x0D, Zero)
                            }

                            ^^WMI1.CLRP ()
                        }
                    }
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (^^WMI1.RETN [Local0]))
            }

            Method (SWIP, 1, NotSerialized)
            {
                Local6 = ^^WMI1.GSEL (TDRV, Arg0, Zero, Zero)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                WDRV = Local6
                Local0 = ^^WMI1.SLEN (TDRV, Local6)
                If ((DerefOf (Arg0 [Local0]) != 0x2C))
                {
                    Return (0x02)
                }

                Local0++
                Local6 = ^^WMI1.GSEL (EMTH, Arg0, Local0, Zero)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                WMTH = Local6
                Local0 += ^^WMI1.SLEN (EMTH, Local6)
                If ((DerefOf (Arg0 [Local0]) != 0x2C))
                {
                    Return (0x02)
                }

                Local0++
                Local6 = ^^WMI1.GSEL (PTYP, Arg0, Local0, Zero)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                WPTY = Local6
                Local0 += ^^WMI1.SLEN (PTYP, Local6)
                If ((DerefOf (Arg0 [Local0]) != 0x2C))
                {
                    Return (0x02)
                }

                Local0++
                Local1 = ^^WMI1.GPAS (Arg0, Local0)
                If (((Local1 == Ones) || (Local1 == Zero)))
                {
                    Return (0x02)
                }

                WPAS = ^^WMI1.PSTR /* \_SB_.WMI1.PSTR */
                Return (Zero)
            }

            Name (WQBD, Buffer (0x0322)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x12, 0x03, 0x00, 0x00, 0x36, 0x08, 0x00, 0x00,  // ....6...
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0xDA, 0x83, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x0E, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x58, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PX...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0xD4, 0x18, 0xA8, 0x58, 0x08, 0x89, 0x00,  // 1...X...
                /* 0050 */  0xA6, 0x42, 0xE0, 0x08, 0x41, 0xBF, 0x02, 0x10,  // .B..A...
                /* 0058 */  0x3A, 0x14, 0x20, 0x53, 0x80, 0x41, 0x01, 0x4E,  // :. S.A.N
                /* 0060 */  0x11, 0x44, 0x10, 0xA5, 0x65, 0x01, 0xBA, 0x05,  // .D..e...
                /* 0068 */  0xF8, 0x16, 0xA0, 0x1D, 0x42, 0x68, 0x91, 0xE2,  // ....Bh..
                /* 0070 */  0x9C, 0x42, 0xEB, 0x93, 0x10, 0x48, 0xAF, 0x02,  // .B...H..
                /* 0078 */  0x4C, 0x0B, 0x10, 0x0E, 0x22, 0x8B, 0x02, 0x64,  // L..."..d
                /* 0080 */  0x63, 0xC8, 0x36, 0x28, 0x19, 0x09, 0x13, 0x39,  // c.6(...9
                /* 0088 */  0x0C, 0x94, 0x98, 0x61, 0xA0, 0x74, 0xCE, 0x42,  // ...a.t.B
                /* 0090 */  0x36, 0x81, 0x35, 0x83, 0x42, 0x51, 0x34, 0x93,  // 6.5.BQ4.
                /* 0098 */  0x28, 0x09, 0x4E, 0xE1, 0x30, 0x22, 0x04, 0x2F,  // (.N.0"./
                /* 00A0 */  0x57, 0x80, 0xE4, 0x09, 0x48, 0xF3, 0xD4, 0x34,  // W...H..4
                /* 00A8 */  0x8F, 0x83, 0x38, 0x04, 0x36, 0x02, 0x9E, 0x58,  // ..8.6..X
                /* 00B0 */  0x03, 0x08, 0x8B, 0xB5, 0x52, 0x05, 0x75, 0x00,  // ....R.u.
                /* 00B8 */  0x83, 0xD9, 0xB6, 0x04, 0xC8, 0x19, 0x2D, 0x0A,  // ......-.
                /* 00C0 */  0xD8, 0xB3, 0x3A, 0x91, 0x26, 0x87, 0x4A, 0x25,  // ..:.&.J%
                /* 00C8 */  0xC1, 0xA1, 0x06, 0x6A, 0x89, 0x02, 0xCC, 0x8F,  // ...j....
                /* 00D0 */  0x4C, 0x13, 0x39, 0xB6, 0xD3, 0x3B, 0xC3, 0x90,  // L.9..;..
                /* 00D8 */  0x4C, 0xDA, 0x50, 0x50, 0xA3, 0xF7, 0xB4, 0x4E,  // L.PP...N
                /* 00E0 */  0xCA, 0x73, 0x8D, 0x78, 0x50, 0x86, 0x49, 0xE0,  // .s.xP.I.
                /* 00E8 */  0x51, 0x30, 0x34, 0x4E, 0x50, 0x16, 0x84, 0x76,  // Q04NP..v
                /* 00F0 */  0x44, 0x07, 0x4A, 0x00, 0x4F, 0xC2, 0x73, 0x2C,  // D.J.O.s,
                /* 00F8 */  0x7E, 0xD0, 0x64, 0x22, 0x4F, 0x03, 0x31, 0x12,  // ~.d"O.1.
                /* 0100 */  0xF8, 0x54, 0x60, 0xD1, 0x63, 0x46, 0x8F, 0x28,  // .T`.cF.(
                /* 0108 */  0x5C, 0xC0, 0xF3, 0x39, 0x86, 0xF3, 0xF7, 0x50,  // \..9...P
                /* 0110 */  0x63, 0x1C, 0x45, 0xE4, 0x04, 0xF1, 0x7D, 0x0E,  // c.E...}.
                /* 0118 */  0x60, 0x50, 0x41, 0x0A, 0x12, 0x20, 0x15, 0x5D,  // `PA.. .]
                /* 0120 */  0xFF, 0x7F, 0xB8, 0x68, 0x5D, 0xCF, 0x5D, 0x28,  // ...h].](
                /* 0128 */  0x86, 0x3A, 0xEB, 0x93, 0x0A, 0x76, 0x1C, 0xBE,  // .:...v..
                /* 0130 */  0x10, 0x70, 0x9C, 0xDE, 0x4F, 0x04, 0x74, 0x28,  // .p..O.t(
                /* 0138 */  0x58, 0x19, 0x10, 0xF2, 0x28, 0xC0, 0xEA, 0xE8,  // X...(...
                /* 0140 */  0x34, 0x97, 0x04, 0x16, 0x27, 0xC0, 0x1A, 0x84,  // 4...'...
                /* 0148 */  0xA6, 0x5A, 0x21, 0x82, 0x50, 0x7A, 0x13, 0x60,  // .Z!.Pz.`
                /* 0150 */  0x0B, 0x43, 0x83, 0xE9, 0x4C, 0x80, 0x31, 0x14,  // .C..L.1.
                /* 0158 */  0x61, 0xD5, 0x76, 0x25, 0x10, 0x46, 0x94, 0x70,  // a.v%.F.p
                /* 0160 */  0x41, 0x62, 0x06, 0x8B, 0xC7, 0xCC, 0x41, 0x09,  // Ab....A.
                /* 0168 */  0x24, 0x5C, 0xCC, 0x57, 0x83, 0x38, 0x61, 0xC2,  // $\.W.8a.
                /* 0170 */  0xC6, 0x49, 0xE0, 0xC1, 0xE3, 0x4E, 0x01, 0x3E,  // .I...N.>
                /* 0178 */  0x38, 0x1C, 0xE0, 0x41, 0x3D, 0x05, 0x3C, 0x31,  // 8..A=.<1
                /* 0180 */  0x98, 0xC0, 0x53, 0x3F, 0xB8, 0x67, 0x84, 0x97,  // ..S?.g..
                /* 0188 */  0x8A, 0x73, 0x8C, 0x1A, 0xE3, 0x0C, 0x12, 0x58,  // .s.....X
                /* 0190 */  0xD2, 0x5B, 0x42, 0x16, 0x40, 0x14, 0x09, 0x1E,  // .[B.@...
                /* 0198 */  0x75, 0x6A, 0xF0, 0xF9, 0xC0, 0x23, 0x3B, 0x78,  // uj...#;x
                /* 01A0 */  0x8F, 0xF6, 0x04, 0x82, 0x1C, 0xC2, 0x11, 0x3C,  // .......<
                /* 01A8 */  0x39, 0x3C, 0x18, 0x78, 0x0C, 0xEC, 0xC6, 0xE0,  // 9<.x....
                /* 01B0 */  0xA3, 0x80, 0x4F, 0x0A, 0xF8, 0x51, 0x07, 0x7C,  // ..O..Q.|
                /* 01B8 */  0x45, 0x78, 0x40, 0x60, 0x23, 0x0E, 0x87, 0x19,  // Ex@`#...
                /* 01C0 */  0xAE, 0x87, 0xED, 0x09, 0x9C, 0xFA, 0xB3, 0x06,  // ........
                /* 01C8 */  0x3F, 0x77, 0x78, 0x70, 0xB8, 0x91, 0x9E, 0xCC,  // ?wxp....
                /* 01D0 */  0x91, 0xBD, 0x07, 0x34, 0x7B, 0x48, 0xD0, 0x81,  // ...4{H..
                /* 01D8 */  0xC2, 0x07, 0x0F, 0x76, 0x15, 0xB0, 0x67, 0x48,  // ...v..gH
                /* 01E0 */  0x22, 0x7F, 0x10, 0xA8, 0x91, 0x19, 0xDA, 0x13,  // ".......
                /* 01E8 */  0x7E, 0xFF, 0x30, 0xE4, 0xF3, 0xC2, 0x61, 0xB1,  // ~.0...a.
                /* 01F0 */  0xE3, 0x87, 0x0F, 0x20, 0x1E, 0x0F, 0xF8, 0xEF,  // ... ....
                /* 01F8 */  0x25, 0xCF, 0x1B, 0x9E, 0xBE, 0xE7, 0xEB, 0xF3,  // %.......
                /* 0200 */  0x84, 0x81, 0xB1, 0xFF, 0xFF, 0x43, 0x09, 0x18,  // .....C..
                /* 0208 */  0x6E, 0x0F, 0xFC, 0x58, 0x02, 0xE7, 0x48, 0x02,  // n..X..H.
                /* 0210 */  0x4C, 0x26, 0xE9, 0x21, 0xF0, 0x33, 0x81, 0x87,  // L&.!.3..
                /* 0218 */  0xC0, 0x07, 0xF0, 0x24, 0x71, 0x8A, 0x56, 0x3A,  // ...$q.V:
                /* 0220 */  0x31, 0xE4, 0xE9, 0x05, 0xAC, 0xF9, 0x1F, 0x01,  // 1.......
                /* 0228 */  0x3A, 0x7C, 0x38, 0x3B, 0x88, 0x6C, 0x3C, 0x03,  // :|8;.l<.
                /* 0230 */  0x7C, 0x10, 0xA0, 0x6A, 0x80, 0x34, 0x53, 0xD8,  // |..j.4S.
                /* 0238 */  0x04, 0xD3, 0x93, 0xEB, 0xE0, 0xC3, 0x73, 0x93,  // ......s.
                /* 0240 */  0x28, 0xF9, 0xC8, 0x28, 0x9C, 0xB3, 0x1E, 0x49,  // (..(...I
                /* 0248 */  0x28, 0x88, 0x01, 0x1D, 0xE4, 0x44, 0x81, 0x3E,  // (....D.>
                /* 0250 */  0xAD, 0x78, 0x08, 0xE7, 0xFA, 0xE4, 0xE3, 0x41,  // .x.....A
                /* 0258 */  0xF9, 0x3E, 0xE2, 0xDB, 0x8A, 0x0F, 0x21, 0x3E,  // .>....!>
                /* 0260 */  0x4F, 0x78, 0xF8, 0x3E, 0x29, 0xF0, 0x1F, 0x8D,  // Ox.>)...
                /* 0268 */  0xAF, 0x0E, 0x46, 0xB7, 0x9A, 0x13, 0x0B, 0x0A,  // ..F.....
                /* 0270 */  0xCC, 0x67, 0x11, 0x4E, 0x50, 0xD7, 0x65, 0x02,  // .g.NP.e.
                /* 0278 */  0x64, 0xFA, 0x4E, 0x0B, 0x50, 0xFF, 0xFF, 0x97,  // d.N.P...
                /* 0280 */  0x00, 0x0E, 0xE4, 0xAB, 0x81, 0x8F, 0x02, 0x8F,  // ........
                /* 0288 */  0x07, 0x6C, 0x0C, 0x4F, 0x03, 0x46, 0x33, 0x3A,  // .l.O.F3:
                /* 0290 */  0x0F, 0x3F, 0x59, 0x54, 0xDC, 0xC9, 0x52, 0x10,  // .?YT..R.
                /* 0298 */  0x4F, 0xD6, 0x51, 0x26, 0x8B, 0x9E, 0x89, 0x2F,  // O.Q&.../
                /* 02A0 */  0x00, 0x9E, 0xD1, 0x2B, 0x80, 0xE7, 0xE8, 0x09,  // ...+....
                /* 02A8 */  0xFB, 0x2A, 0x02, 0xEB, 0x80, 0xF0, 0x50, 0xE3,  // .*....P.
                /* 02B0 */  0x3B, 0x06, 0x83, 0xF3, 0x64, 0x39, 0x9C, 0x27,  // ;...d9.'
                /* 02B8 */  0xCB, 0xC7, 0xE2, 0x9B, 0x08, 0xF8, 0x04, 0xCE,  // ........
                /* 02C0 */  0x16, 0xE4, 0xF0, 0x98, 0x90, 0xA3, 0xA2, 0x97,  // ........
                /* 02C8 */  0x22, 0x0F, 0x8F, 0x5F, 0x0E, 0x3C, 0x9F, 0x67,  // ".._.<.g
                /* 02D0 */  0x84, 0xA3, 0x7C, 0x92, 0xC0, 0x61, 0xBC, 0x61,  // ..|..a.a
                /* 02D8 */  0x78, 0x88, 0xBE, 0x1F, 0xC1, 0x9A, 0xC8, 0x49,  // x......I
                /* 02E0 */  0xFB, 0xB6, 0x70, 0xB2, 0x41, 0xE3, 0x87, 0xF5,  // ..p.A...
                /* 02E8 */  0xFD, 0x08, 0xB8, 0x2A, 0xB4, 0xE9, 0x53, 0xA3,  // ...*..S.
                /* 02F0 */  0x51, 0xAB, 0x06, 0x65, 0x6A, 0x94, 0x69, 0x50,  // Q..ej.iP
                /* 02F8 */  0xAB, 0x4F, 0xA5, 0xC6, 0x8C, 0x5D, 0xB3, 0x2C,  // .O...].,
                /* 0300 */  0xD0, 0xC0, 0xFF, 0x7F, 0x44, 0x4C, 0xE2, 0xDA,  // ....DL..
                /* 0308 */  0x34, 0x38, 0x07, 0x04, 0xA1, 0x71, 0xBE, 0x40,  // 48...q.@
                /* 0310 */  0x32, 0x02, 0xA2, 0x6C, 0x20, 0x02, 0x72, 0x8E,  // 2..l .r.
                /* 0318 */  0xFF, 0x84, 0x80, 0x9C, 0x0A, 0x44, 0x40, 0xFE,  // .....D@.
                /* 0320 */  0xFF, 0x03                                       // ..
            })
        }

        Device (WMI5)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_WDG, Buffer (0xDC)
            {
                /* 0000 */  0xBF, 0xEF, 0x42, 0x20, 0xF9, 0x9A, 0xDF, 0x47,  // ..B ...G
                /* 0008 */  0xB7, 0x1A, 0x28, 0x7C, 0x03, 0x0C, 0x91, 0xCF,  // ..(|....
                /* 0010 */  0x47, 0x4E, 0x01, 0x01, 0x5E, 0xB4, 0x9E, 0xB7,  // GN..^...
                /* 0018 */  0xB3, 0x85, 0xD5, 0x41, 0xA9, 0x65, 0xCC, 0x17,  // ...A.e..
                /* 0020 */  0xD2, 0x2A, 0x6D, 0x8B, 0x47, 0x4D, 0x01, 0x01,  // .*m.GM..
                /* 0028 */  0x77, 0x80, 0x92, 0x02, 0x0A, 0xAD, 0xC7, 0x4C,  // w......L
                /* 0030 */  0x96, 0xB4, 0x2B, 0x89, 0x83, 0xC4, 0x38, 0x04,  // ..+...8.
                /* 0038 */  0x53, 0x43, 0x01, 0x02, 0x61, 0x57, 0x50, 0x1F,  // SC..aWP.
                /* 0040 */  0x4A, 0x1F, 0x78, 0x4B, 0x8B, 0xD7, 0xBB, 0x52,  // J.xK...R
                /* 0048 */  0xFA, 0x7E, 0x4F, 0x37, 0x47, 0x43, 0x01, 0x02,  // .~O7GC..
                /* 0050 */  0x84, 0xC2, 0x95, 0x28, 0x84, 0x00, 0x9E, 0x41,  // ...(...A
                /* 0058 */  0xAE, 0xF6, 0x8D, 0xCB, 0xBB, 0x55, 0xB0, 0xB1,  // .....U..
                /* 0060 */  0x45, 0x43, 0x01, 0x01, 0xCF, 0xB4, 0x31, 0xD9,  // EC....1.
                /* 0068 */  0x4E, 0xF5, 0x07, 0x4D, 0x94, 0x20, 0x42, 0x85,  // N..M. B.
                /* 0070 */  0x8C, 0xC6, 0xA2, 0x34, 0x4E, 0x53, 0x01, 0x01,  // ...4NS..
                /* 0078 */  0xCC, 0xAD, 0x11, 0xBE, 0x23, 0x99, 0xAD, 0x45,  // ....#..E
                /* 0080 */  0x9E, 0x74, 0xCB, 0x5F, 0xB1, 0x04, 0xBE, 0x9D,  // .t._....
                /* 0088 */  0x57, 0x44, 0x01, 0x02, 0xC2, 0x81, 0xE0, 0x48,  // WD.....H
                /* 0090 */  0x7E, 0x18, 0xE1, 0x43, 0x8B, 0xB1, 0x62, 0xF4,  // ~..C..b.
                /* 0098 */  0x82, 0xCC, 0x66, 0x9C, 0x52, 0x44, 0x01, 0x02,  // ..f.RD..
                /* 00A0 */  0xB8, 0xE2, 0x02, 0xE7, 0x12, 0x41, 0x76, 0x47,  // .....AvG
                /* 00A8 */  0x98, 0xB3, 0xCC, 0x1B, 0x0C, 0x73, 0x92, 0xB4,  // .....s..
                /* 00B0 */  0x57, 0x50, 0x01, 0x02, 0xED, 0xD2, 0x94, 0x2B,  // WP.....+
                /* 00B8 */  0x48, 0x25, 0xDE, 0x4F, 0xAC, 0x72, 0x96, 0xCA,  // H%.O.r..
                /* 00C0 */  0x99, 0xC6, 0xBF, 0xE6, 0x52, 0x50, 0x01, 0x01,  // ....RP..
                /* 00C8 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 00D0 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 00D8 */  0x42, 0x45, 0x01, 0x00                           // BE..
            })
            Name (RETN, Package (0x0A)
            {
                "SUCCESS", 
                "ERROR: NOT_SUPPORTED", 
                "ERROR: INVALID_PARAMETER", 
                "ERROR: ACCESS_DENIED", 
                "ERROR: SYSTEM_BUSY", 
                "ERROR: OUT_OF_RESOURCES", 
                "ERROR: NOT_FOUND", 
                "ERROR: SECURITY_VIORATION", 
                "ERROR: ABORTED", 
                "ERROR: BUFFERTOOSMALL"
            })
            Method (CARU, 2, NotSerialized)
            {
                Local0 = Arg1
                If ((Local0 == Zero))
                {
                    ^^WMI1.IBUF = Zero
                    ^^WMI1.ILEN = Zero
                    Return (Zero)
                }

                Local1 = SizeOf (^^WMI1.IBUF)
                Local1--
                If ((Local0 >= Local1))
                {
                    Return (0x02)
                }

                ^^WMI1.IBUF = Zero
                Local2 = Zero
                While ((Local2 < Local0))
                {
                    Local3 = (Local2 * 0x02)
                    ^^WMI1.IBUF [Local2] = DerefOf (Arg0 [Local3])
                    Local2++
                }

                Local0--
                Local1 = DerefOf (^^WMI1.IBUF [Local0])
                If (((Local1 == 0x3B) || (Local1 == 0x2A)))
                {
                    ^^WMI1.IBUF [Local0] = Zero
                    ^^WMI1.ILEN = Local0
                }
                Else
                {
                    ^^WMI1.ILEN = Arg1
                }

                Return (Zero)
            }

            Method (WQGN, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WMIS (0x0E, Zero)
                Release (^^WMI1.MWMI)
                Return (SNMA) /* \SNMA */
            }

            Method (WQGM, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WMIS (0x0E, One)
                Release (^^WMI1.MWMI)
                Return (SNMA) /* \SNMA */
            }

            Method (WMSC, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                SCSB = Arg2
                Local0 = SSPL /* \SSPL */
                If ((Local0 == Zero))
                {
                    SSPB = Zero
                }
                Else
                {
                    Local0 /= 0x02
                }

                Local1 = CARU (SSPB, Local0)
                SSPB = Zero
                SSPL = Zero
                If ((Local1 == Zero))
                {
                    If ((^^WMI1.ILEN != Zero))
                    {
                        Local1 = ^^WMI1.CPAS (^^WMI1.IBUF, Zero)
                    }

                    If ((Local1 == Zero))
                    {
                        Local1 = WMIS (0x0E, 0x02)
                    }
                }

                If ((Local1 != Zero))
                {
                    SCSB = Zero
                    ^^WMI1.CLRP ()
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (RETN [Local1]))
            }

            Method (WMGC, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                SCSB = Arg2
                Local0 = SGPL /* \SGPL */
                If ((SGPL == Zero))
                {
                    SGPB = Zero
                }
                Else
                {
                    Local0 /= 0x02
                }

                Local1 = CARU (SGPB, Local0)
                SGPB = Zero
                SGPL = Zero
                If ((Local1 == Zero))
                {
                    If ((^^WMI1.ILEN != Zero))
                    {
                        Local1 = ^^WMI1.CPAS (^^WMI1.IBUF, Zero)
                    }

                    If ((Local1 == Zero))
                    {
                        Local1 = WMIS (0x0E, 0x03)
                    }
                }

                If ((Local1 != Zero))
                {
                    SCSB = Zero
                    ^^WMI1.CLRP ()
                }

                Release (^^WMI1.MWMI)
                Return (SGSB) /* \SGSB */
            }

            Method (WQEC, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = WMIS (0x0E, 0x04)
                If ((Local0 != Zero))
                {
                    SCSB = Zero
                }

                Release (^^WMI1.MWMI)
                Return (SEDL) /* \SEDL */
            }

            Method (WQNS, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = WMIS (0x0E, 0x04)
                If ((Local0 != Zero))
                {
                    SCSB = Zero
                }

                Release (^^WMI1.MWMI)
                Return (SENS) /* \SENS */
            }

            Method (WMWD, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                SCSB = Arg2
                Local0 = SWAL /* \SWAL */
                If ((Local0 == Zero))
                {
                    SWAB = Zero
                }
                Else
                {
                    Local0 /= 0x02
                }

                Local1 = CARU (SWAB, Local0)
                SWAL = Zero
                SWAB = Zero
                If ((Local1 == Zero))
                {
                    If ((^^WMI1.ILEN != Zero))
                    {
                        Local1 = ^^WMI1.CPAS (^^WMI1.IBUF, Zero)
                    }

                    If ((Local1 == Zero))
                    {
                        Local1 = WMIS (0x0E, 0x05)
                    }
                }

                If ((Local1 != Zero))
                {
                    SCSB = Zero
                    ^^WMI1.CLRP ()
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (RETN [Local1]))
            }

            Method (WMRD, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                SCSB = Arg2
                Local1 = WMIS (0x0E, 0x08)
                If ((Local1 != Zero))
                {
                    SCSB = Zero
                    ^^WMI1.CLRP ()
                }

                Release (^^WMI1.MWMI)
                Return (GWMB) /* \GWMB */
            }

            Method (WMWP, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                SCSB = Arg2
                Local0 = WMIS (0x0E, 0x06)
                If ((Local0 != Zero))
                {
                    SCSB = Zero
                    ^^WMI1.CLRP ()
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WQRP, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = WMIS (0x0E, 0x07)
                If ((Local0 != Zero))
                {
                    SCSB = Zero
                }

                Release (^^WMI1.MWMI)
                Return (GPMB) /* \GPMB */
            }

            Name (WQBE, Buffer (0x1019)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x09, 0x10, 0x00, 0x00, 0x0C, 0x5C, 0x00, 0x00,  // .....\..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0xC4, 0xAC, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
                /* 0020 */  0x10, 0x1B, 0x10, 0x92, 0x40, 0x62, 0x02, 0x09,  // ....@b..
                /* 0028 */  0x83, 0x50, 0x68, 0x16, 0x06, 0x43, 0xB8, 0x2C,  // .Ph..C.,
                /* 0030 */  0x0A, 0x42, 0x2E, 0xA0, 0xA8, 0x14, 0x08, 0x19,  // .B......
                /* 0038 */  0x16, 0xA0, 0x58, 0x80, 0x73, 0x01, 0xD2, 0x05,  // ..X.s...
                /* 0040 */  0x28, 0x47, 0x91, 0x63, 0x10, 0x11, 0xB8, 0x7F,  // (G.c....
                /* 0048 */  0x7F, 0x88, 0xE1, 0x40, 0xA4, 0x00, 0x42, 0xA2,  // ...@..B.
                /* 0050 */  0x21, 0x24, 0x02, 0x98, 0x0A, 0x81, 0x23, 0x04,  // !$....#.
                /* 0058 */  0xFD, 0x0A, 0x40, 0xE8, 0x50, 0x80, 0x4C, 0x01,  // ..@.P.L.
                /* 0060 */  0x06, 0x05, 0x38, 0x45, 0x10, 0x41, 0x94, 0x96,  // ..8E.A..
                /* 0068 */  0x05, 0xE8, 0x16, 0xE0, 0x5B, 0x80, 0x76, 0x08,  // ....[.v.
                /* 0070 */  0xA1, 0x19, 0xE7, 0x1C, 0x4E, 0xA1, 0x69, 0x01,  // ....N.i.
                /* 0078 */  0x9A, 0x21, 0x34, 0x8A, 0xC3, 0x08, 0x13, 0x29,  // .!4....)
                /* 0080 */  0x68, 0x8C, 0x78, 0x67, 0x62, 0xCF, 0x38, 0xB2,  // h.xgb.8.
                /* 0088 */  0x28, 0x40, 0x36, 0x86, 0x6C, 0x83, 0x93, 0xD1,  // (@6.l...
                /* 0090 */  0x30, 0x91, 0x43, 0x41, 0x89, 0x19, 0x0A, 0x4A,  // 0.CA...J
                /* 0098 */  0xE7, 0x4C, 0x64, 0x13, 0x58, 0x03, 0x28, 0x14,  // .Ld.X.(.
                /* 00A0 */  0x45, 0xE3, 0x88, 0x92, 0xE0, 0x0C, 0x4E, 0x21,  // E.....N!
                /* 00A8 */  0x42, 0xF0, 0x72, 0x05, 0x48, 0x9E, 0x80, 0x66,  // B.r.H..f
                /* 00B0 */  0x72, 0x14, 0xAD, 0x0F, 0x42, 0x43, 0x60, 0x23,  // r...BC`#
                /* 00B8 */  0xE0, 0x92, 0x2D, 0x80, 0x30, 0x51, 0xAB, 0x95,  // ..-.0Q..
                /* 00C0 */  0x48, 0x18, 0x94, 0x04, 0x10, 0xC9, 0x19, 0x31,  // H......1
                /* 00C8 */  0x0A, 0xD8, 0x5E, 0x27, 0x22, 0x93, 0xC3, 0xA5,  // ..^'"...
                /* 00D0 */  0xD2, 0x06, 0x8B, 0x1E, 0xE7, 0xA9, 0x1C, 0xA1,  // ........
                /* 00D8 */  0x07, 0x67, 0x02, 0xA3, 0x9E, 0xD2, 0xE1, 0xBC,  // .g......
                /* 00E0 */  0x03, 0x14, 0x8F, 0x2A, 0x8C, 0xE6, 0xA0, 0xC8,  // ...*....
                /* 00E8 */  0xC8, 0x71, 0xE3, 0xB3, 0x44, 0x58, 0x9D, 0x02,  // .q..DX..
                /* 00F0 */  0x62, 0x1F, 0xDA, 0x01, 0x17, 0x3E, 0x65, 0x32,  // b....>e2
                /* 00F8 */  0x82, 0x43, 0x4D, 0x70, 0x7C, 0x31, 0x4E, 0xED,  // .CMp|1N.
                /* 0100 */  0x6C, 0x3D, 0x64, 0xCF, 0xDA, 0x03, 0x2C, 0x08,  // l=d...,.
                /* 0108 */  0x54, 0x83, 0x87, 0x03, 0x16, 0x2E, 0x8A, 0x21,  // T......!
                /* 0110 */  0xA2, 0x1C, 0x43, 0xA0, 0xF3, 0xF4, 0x50, 0x70,  // ..C...Pp
                /* 0118 */  0x32, 0x20, 0xE4, 0x51, 0x80, 0x55, 0x01, 0xFF,  // 2 .Q.U..
                /* 0120 */  0xFF, 0xE1, 0x9D, 0x4B, 0x02, 0xCF, 0xC0, 0x93,  // ...K....
                /* 0128 */  0x6A, 0x4C, 0x80, 0x32, 0x04, 0x89, 0x1B, 0x96,  // jL.2....
                /* 0130 */  0x6C, 0x1D, 0x13, 0x34, 0xB0, 0xDA, 0x90, 0x84,  // l..4....
                /* 0138 */  0x12, 0x2C, 0x50, 0x94, 0x60, 0x51, 0xA2, 0xC5,  // .,P.`Q..
                /* 0140 */  0x8A, 0x74, 0x28, 0xA1, 0x0C, 0x6A, 0xAC, 0x40,  // .t(..j.@
                /* 0148 */  0xAD, 0x41, 0x68, 0x2C, 0x31, 0x02, 0xC5, 0x78,  // .Ah,1..x
                /* 0150 */  0x73, 0x30, 0x41, 0x41, 0x2B, 0x97, 0x86, 0x91,  // s0AA+...
                /* 0158 */  0x78, 0xF0, 0x32, 0xB2, 0x9F, 0xA7, 0x06, 0x4A,  // x.2....J
                /* 0160 */  0x70, 0x34, 0x6C, 0x82, 0x67, 0x16, 0x35, 0x81,  // p4l.g.5.
                /* 0168 */  0x63, 0x43, 0x08, 0xD4, 0xA7, 0x08, 0x3B, 0x38,  // cC....;8
                /* 0170 */  0x45, 0xA0, 0x0E, 0x01, 0x47, 0x1A, 0xF2, 0xB0,  // E...G...
                /* 0178 */  0x0E, 0x90, 0x4D, 0x2C, 0xAE, 0xCF, 0x13, 0xDE,  // ..M,....
                /* 0180 */  0x82, 0x8F, 0x03, 0x7C, 0x0C, 0x9E, 0xED, 0xD1,  // ...|....
                /* 0188 */  0x05, 0x3C, 0x06, 0x76, 0x1E, 0x30, 0x20, 0xDE,  // .<.v.0 .
                /* 0190 */  0xFB, 0x05, 0x80, 0xCC, 0xD9, 0xE7, 0x02, 0x18,  // ........
                /* 0198 */  0x47, 0x01, 0xB8, 0x23, 0xC3, 0x9D, 0x15, 0x3C,  // G..#...<
                /* 01A0 */  0x2E, 0x0E, 0xEF, 0x03, 0xC2, 0x1B, 0x44, 0xB1,  // ......D.
                /* 01A8 */  0xE7, 0x04, 0x2A, 0xEB, 0xAC, 0x80, 0xBE, 0x47,  // ..*....G
                /* 01B0 */  0x1C, 0x5B, 0xC0, 0x52, 0x05, 0xFC, 0x41, 0x9E,  // .[.R..A.
                /* 01B8 */  0x25, 0x1E, 0x25, 0x3C, 0x03, 0x1F, 0x2C, 0x3C,  // %.%<..,<
                /* 01C0 */  0xF4, 0x04, 0xA3, 0x43, 0xC8, 0x09, 0x2C, 0x1D,  // ...C..,.
                /* 01C8 */  0x33, 0x47, 0x6D, 0x7E, 0x38, 0x3A, 0x36, 0xB0,  // 3Gm~8:6.
                /* 01D0 */  0xA8, 0x10, 0xFA, 0x49, 0x78, 0xCC, 0xE0, 0x38,  // ...Ix..8
                /* 01D8 */  0x86, 0x78, 0xCC, 0xC0, 0xE3, 0xFF, 0x3F, 0x66,  // .x....?f
                /* 01E0 */  0xF8, 0x23, 0xC3, 0xDD, 0x13, 0x3C, 0x58, 0x70,  // .#...<Xp
                /* 01E8 */  0x38, 0x3B, 0x33, 0x88, 0xC0, 0x47, 0x18, 0x8F,  // 8;3..G..
                /* 01F0 */  0x16, 0x37, 0x48, 0x4F, 0x91, 0xDF, 0x38, 0xC2,  // .7HO..8.
                /* 01F8 */  0x56, 0x3F, 0x0C, 0x1A, 0x77, 0xBC, 0xA0, 0x02,  // V?..w...
                /* 0200 */  0xF4, 0x78, 0xC1, 0x2F, 0x6F, 0xBC, 0xA0, 0x19,  // .x./o...
                /* 0208 */  0x1B, 0x9C, 0x11, 0x83, 0xEF, 0xEC, 0xE0, 0x03,  // ........
                /* 0210 */  0x0F, 0x70, 0x18, 0x13, 0xE6, 0x8C, 0xC2, 0x0E,  // .p......
                /* 0218 */  0x3B, 0xC0, 0xE3, 0xFF, 0x8F, 0xE1, 0x21, 0xF0,  // ;.....!.
                /* 0220 */  0xB3, 0x86, 0x87, 0xC0, 0x07, 0xF0, 0xDC, 0x72,  // .......r
                /* 0228 */  0x92, 0x56, 0x3A, 0x35, 0xE4, 0xD9, 0x08, 0x58,  // .V:5...X
                /* 0230 */  0x0C, 0x86, 0x07, 0x7C, 0x03, 0x99, 0x40, 0x51,  // ...|..@Q
                /* 0238 */  0x8E, 0x0E, 0x8A, 0x04, 0x83, 0xF2, 0x70, 0x12,  // ......p.
                /* 0240 */  0x82, 0x2E, 0x09, 0x0E, 0x75, 0x0A, 0xF0, 0xB8,  // ....u...
                /* 0248 */  0x9F, 0x2C, 0x8E, 0xE3, 0x5C, 0xDE, 0x1D, 0x3C,  // .,..\..<
                /* 0250 */  0xA2, 0x07, 0x0D, 0x18, 0x67, 0x08, 0x8F, 0xF1,  // ....g...
                /* 0258 */  0x8C, 0x3D, 0xBB, 0xC7, 0x14, 0x8F, 0xCE, 0x04,  // .=......
                /* 0260 */  0x1E, 0x05, 0x43, 0xE3, 0x87, 0x14, 0x76, 0xA0,  // ..C...v.
                /* 0268 */  0xE0, 0xA7, 0x00, 0x1F, 0x28, 0xD8, 0x00, 0x9F,  // ....(...
                /* 0270 */  0x8D, 0x5E, 0x38, 0x3C, 0x91, 0x47, 0x20, 0x13,  // .^8<.G .
                /* 0278 */  0xF8, 0x4C, 0x63, 0xEC, 0x67, 0x18, 0xF0, 0x1C,  // .Lc.g...
                /* 0280 */  0x0E, 0x7C, 0xA9, 0x78, 0x3D, 0x62, 0x57, 0x9F,  // .|.x=bW.
                /* 0288 */  0xE3, 0x31, 0x4E, 0xB8, 0x83, 0x7F, 0x2C, 0xF2,  // .1N...,.
                /* 0290 */  0xB4, 0x1F, 0x0B, 0x0C, 0xF2, 0x5C, 0x04, 0xFB,  // .....\..
                /* 0298 */  0x0A, 0xF1, 0x36, 0xF1, 0x30, 0xE4, 0xF3, 0x81,  // ..6.0...
                /* 02A0 */  0x27, 0xF0, 0x3E, 0xE4, 0x43, 0xD1, 0xB9, 0x06,  // '.>.C...
                /* 02A8 */  0x79, 0x33, 0x32, 0x58, 0x6F, 0x93, 0x14, 0x94,  // y32Xo...
                /* 02B0 */  0xD1, 0xA2, 0x3C, 0x17, 0x05, 0x8B, 0xF2, 0x5A,  // ..<....Z
                /* 02B8 */  0x64, 0x98, 0x63, 0x8A, 0xFD, 0x46, 0x11, 0x22,  // d.c..F."
                /* 02C0 */  0x48, 0xD0, 0x60, 0x31, 0x42, 0x26, 0xF0, 0xC1,  // H.`1B&..
                /* 02C8 */  0x0A, 0xFF, 0xFF, 0x3F, 0x58, 0x81, 0x43, 0xC8,  // ...?X.C.
                /* 02D0 */  0xAA, 0x75, 0x34, 0x72, 0x24, 0x78, 0xD4, 0xD1,  // .u4r$x..
                /* 02D8 */  0xC1, 0x27, 0x03, 0x8F, 0xEC, 0xB0, 0x7D, 0xAD,  // .'....}.
                /* 02E0 */  0x30, 0xC8, 0x13, 0x94, 0x0F, 0x14, 0x8F, 0x04,  // 0.......
                /* 02E8 */  0x1E, 0x03, 0xBB, 0x2B, 0xF8, 0x10, 0xE0, 0x33,  // ...+...3
                /* 02F0 */  0x02, 0xDE, 0x35, 0xA0, 0x2E, 0x07, 0xCF, 0x26,  // ..5....&
                /* 02F8 */  0xB0, 0xCE, 0x28, 0xF8, 0xC3, 0x08, 0xFC, 0xF3,  // ..(.....
                /* 0300 */  0x1C, 0x3B, 0x8D, 0xF8, 0x2C, 0x91, 0xC0, 0xF2,  // .;..,...
                /* 0308 */  0x07, 0x81, 0x1A, 0x99, 0xA1, 0x7D, 0xBF, 0x78,  // .....}.x
                /* 0310 */  0xAD, 0x33, 0xE4, 0x93, 0xC2, 0x61, 0xB1, 0x53,  // .3...a.S
                /* 0318 */  0x89, 0x4F, 0x40, 0xE0, 0x18, 0x0F, 0xFC, 0xCB,  // .O@.....
                /* 0320 */  0xC0, 0x63, 0x88, 0xA7, 0xEF, 0xF9, 0x9A, 0x60,  // .c.....`
                /* 0328 */  0xD8, 0x93, 0x12, 0x7A, 0xB8, 0x1E, 0xF4, 0xE3,  // ...z....
                /* 0330 */  0x02, 0xC6, 0xE7, 0x89, 0x40, 0xF7, 0x80, 0xA7,  // ....@...
                /* 0338 */  0x05, 0x4C, 0xA8, 0x81, 0xD3, 0x03, 0x17, 0x78,  // .L.....x
                /* 0340 */  0x4E, 0x2B, 0xF8, 0xD3, 0x04, 0xBC, 0xD1, 0xE0,  // N+......
                /* 0348 */  0xCE, 0x12, 0x70, 0x86, 0x89, 0xFB, 0xFF, 0x9F,  // ..p.....
                /* 0350 */  0x70, 0xC0, 0x81, 0xF6, 0x84, 0x03, 0xBE, 0xDB,  // p.......
                /* 0358 */  0x06, 0x1B, 0x2F, 0xDC, 0x03, 0x0E, 0xE0, 0x50,  // ../....P
                /* 0360 */  0xC8, 0xB1, 0x91, 0xC6, 0x7A, 0x17, 0x28, 0xFA,  // ....z.(.
                /* 0368 */  0x01, 0x87, 0xC2, 0xF8, 0x80, 0x03, 0x38, 0x3A,  // ......8:
                /* 0370 */  0xCC, 0xF0, 0xFF, 0xFF, 0x01, 0x07, 0x3C, 0x53,  // ......<S
                /* 0378 */  0x38, 0xB0, 0x43, 0x88, 0x15, 0xE4, 0x29, 0xC1,  // 8.C...).
                /* 0380 */  0xB7, 0x49, 0x98, 0x63, 0xF7, 0x99, 0xC4, 0x38,  // .I.c...8
                /* 0388 */  0x27, 0xE2, 0x63, 0x0E, 0xEC, 0xCB, 0x8D, 0x2F,  // '.c..../
                /* 0390 */  0x32, 0x81, 0x83, 0x9C, 0xEB, 0x03, 0x64, 0x90,  // 2.....d.
                /* 0398 */  0x07, 0x49, 0xDF, 0x21, 0x7D, 0x9C, 0x78, 0xCC,  // .I.!}.x.
                /* 03A0 */  0xF1, 0xE9, 0xE6, 0x2D, 0xD2, 0x28, 0xA7, 0xF1,  // ...-.(..
                /* 03A8 */  0x3E, 0x69, 0x14, 0xCF, 0x24, 0x42, 0xAC, 0x87,  // >i..$B..
                /* 03B0 */  0x1D, 0xDF, 0x2C, 0x0D, 0x16, 0x2B, 0xCA, 0x4B,  // ..,..+.K
                /* 03B8 */  0xA5, 0x8F, 0x39, 0xE0, 0x15, 0x79, 0xCC, 0x01,  // ..9..y..
                /* 03C0 */  0x28, 0xF0, 0xFF, 0x3F, 0xE6, 0x80, 0xE3, 0xF1,  // (..?....
                /* 03C8 */  0xE0, 0x63, 0x0E, 0xEE, 0x28, 0x61, 0xE0, 0x87,  // .c..(a..
                /* 03D0 */  0x06, 0x1F, 0x40, 0x60, 0x9D, 0x44, 0xD8, 0x89,  // ..@`.D..
                /* 03D8 */  0x01, 0x13, 0xF0, 0xA8, 0x03, 0x3A, 0xC1, 0xE7,  // .....:..
                /* 03E0 */  0x0A, 0xD0, 0x8C, 0x88, 0x9D, 0x2A, 0xC0, 0x78,  // .....*.x
                /* 03E8 */  0xE0, 0x01, 0xDF, 0xB0, 0x7C, 0xE0, 0x01, 0xE7,  // ....|...
                /* 03F0 */  0xC8, 0xC1, 0x75, 0xE8, 0x01, 0xDE, 0xFF, 0xFF,  // ..u.....
                /* 03F8 */  0x43, 0x0F, 0x70, 0xD1, 0x69, 0x02, 0x84, 0x05,  // C.p.i...
                /* 0400 */  0x7B, 0x21, 0x28, 0xF2, 0x53, 0x81, 0xC2, 0xF8,  // {!(.S...
                /* 0408 */  0xD0, 0x03, 0x38, 0x1A, 0xE5, 0xD3, 0x04, 0x58,  // ..8....X
                /* 0410 */  0x0E, 0xA4, 0xEC, 0x16, 0xE6, 0x73, 0x98, 0xC7,  // .....s..
                /* 0418 */  0xE3, 0x39, 0xFB, 0x28, 0xC1, 0xCE, 0xE2, 0xBE,  // .9.(....
                /* 0420 */  0x93, 0xC3, 0x3F, 0xF5, 0xC0, 0x3F, 0x57, 0x3C,  // ..?..?W<
                /* 0428 */  0x4D, 0xBC, 0xD7, 0xBC, 0x20, 0x1A, 0xE5, 0x55,  // M... ..U
                /* 0430 */  0x27, 0xC2, 0x03, 0x8F, 0x8F, 0xE1, 0x3E, 0x26,  // '.....>&
                /* 0438 */  0x7A, 0xC4, 0x2F, 0x3C, 0x86, 0xF2, 0xA5, 0xC7,  // z./<....
                /* 0440 */  0xB7, 0x1F, 0x9F, 0x15, 0x0D, 0xF2, 0x70, 0x6E,  // ......pn
                /* 0448 */  0x88, 0x77, 0x8B, 0x70, 0x91, 0x62, 0x44, 0xF7,  // .w.p.bD.
                /* 0450 */  0xDC, 0x7D, 0xEA, 0x01, 0xCB, 0xFF, 0xFF, 0xD4,  // .}......
                /* 0458 */  0x83, 0x97, 0xF6, 0x80, 0xD1, 0x2F, 0xCB, 0xA7,  // ...../..
                /* 0460 */  0x1E, 0x80, 0x1F, 0x07, 0x56, 0xDC, 0xA9, 0x05,  // ....V...
                /* 0468 */  0x2C, 0xD7, 0x07, 0x76, 0x11, 0x81, 0x75, 0x60,  // ,..v..u`
                /* 0470 */  0x01, 0xE6, 0xFF, 0xFF, 0x03, 0x0B, 0x70, 0xD0,  // ......p.
                /* 0478 */  0xFA, 0x78, 0xD0, 0x09, 0xC4, 0x3A, 0x41, 0x64,  // .x...:Ad
                /* 0480 */  0xE3, 0x29, 0xE0, 0xC3, 0x00, 0xD5, 0x7D, 0xEA,  // .)....}.
                /* 0488 */  0xD3, 0x6C, 0x61, 0x43, 0x0B, 0x52, 0xF0, 0x3E,  // .laC.R.>
                /* 0490 */  0x19, 0x58, 0x21, 0x8C, 0x34, 0xBE, 0x20, 0x34,  // .X!.4. 4
                /* 0498 */  0x3A, 0xC3, 0x59, 0x15, 0x8C, 0xE0, 0x0C, 0xE2,  // :.Y.....
                /* 04A0 */  0xA3, 0x99, 0x03, 0x41, 0xC8, 0xC8, 0x40, 0x28,  // ...A..@(
                /* 04A8 */  0xA4, 0x55, 0x9C, 0x3F, 0xC8, 0xDD, 0xC8, 0x47,  // .U.?...G
                /* 04B0 */  0x04, 0x27, 0xB8, 0xCC, 0x7B, 0xFE, 0xF4, 0xAA,  // .'..{...
                /* 04B8 */  0xC0, 0xB1, 0x7D, 0x78, 0x30, 0xB0, 0xE7, 0xEC,  // ..}x0...
                /* 04C0 */  0x3B, 0x0B, 0x9F, 0xB8, 0x6F, 0x01, 0x67, 0xFC,  // ;...o.g.
                /* 04C8 */  0xDE, 0xE0, 0xFB, 0x81, 0xD5, 0xC0, 0xA1, 0xA0,  // ........
                /* 04D0 */  0x7D, 0x27, 0xE1, 0x27, 0x18, 0x76, 0x76, 0x02,  // }'.'.vv.
                /* 04D8 */  0xC7, 0x6D, 0x24, 0xC1, 0x0C, 0x07, 0x56, 0xF4,  // .m$...V.
                /* 04E0 */  0xC0, 0x8C, 0xFA, 0xBE, 0xF1, 0x2E, 0xE3, 0xDB,  // ........
                /* 04E8 */  0x0A, 0x1B, 0x89, 0x07, 0x06, 0x6F, 0x44, 0xB0,  // .....oD.
                /* 04F0 */  0x06, 0x6C, 0x5D, 0x87, 0x2B, 0x90, 0xE5, 0x98,  // .l].+...
                /* 04F8 */  0x11, 0x5A, 0xC9, 0x15, 0x1F, 0xD2, 0x9C, 0xF8,  // .Z......
                /* 0500 */  0xFF, 0x7F, 0x4E, 0x60, 0xBB, 0x19, 0x78, 0x4E,  // ..N`..xN
                /* 0508 */  0x60, 0x3B, 0x1D, 0xC0, 0x99, 0x13, 0x3F, 0x1D,  // `;....?.
                /* 0510 */  0x80, 0xF9, 0x83, 0xE2, 0x89, 0xC1, 0x42, 0xF2,  // ......B.
                /* 0518 */  0xE9, 0x00, 0x5C, 0x41, 0x8E, 0x3A, 0xE8, 0x73,  // ..\A.:.s
                /* 0520 */  0x14, 0x1B, 0xD7, 0xBB, 0x86, 0x4F, 0x1A, 0x3E,  // .....O.>
                /* 0528 */  0x5A, 0xF8, 0x1E, 0xE5, 0xC1, 0x83, 0x75, 0x9C,  // Z.....u.
                /* 0530 */  0x1E, 0x3C, 0xFC, 0x5B, 0x0E, 0x56, 0xDF, 0x31,  // .<.[.V.1
                /* 0538 */  0x06, 0x14, 0x40, 0xBE, 0xB3, 0xF8, 0x8C, 0xF2,  // ..@.....
                /* 0540 */  0xDC, 0xC2, 0xC6, 0xF0, 0x98, 0x62, 0x34, 0xA3,  // .....b4.
                /* 0548 */  0xF3, 0xF0, 0xE8, 0x14, 0xC6, 0x71, 0x6F, 0x10,  // .....qo.
                /* 0550 */  0x14, 0xC4, 0x07, 0x04, 0x47, 0x99, 0x2C, 0xF2,  // ....G.,.
                /* 0558 */  0xFF, 0x7F, 0xFB, 0x61, 0x77, 0x1E, 0xCF, 0xE8,  // ...aw...
                /* 0560 */  0xB0, 0x83, 0x3C, 0x2C, 0x92, 0xCB, 0x85, 0xEE,  // ..<,....
                /* 0568 */  0x48, 0xB0, 0x6E, 0x2C, 0x21, 0x9F, 0x56, 0x3C,  // H.n,!.V<
                /* 0570 */  0x0D, 0x9F, 0x0B, 0xF0, 0xA7, 0x0F, 0x7E, 0x7F,  // ......~.
                /* 0578 */  0xF2, 0x15, 0x09, 0x7C, 0x02, 0x67, 0x0B, 0x72,  // ...|.g.r
                /* 0580 */  0x78, 0x4C, 0xCC, 0x0B, 0x03, 0x6A, 0x78, 0xFC,  // xL...jx.
                /* 0588 */  0x72, 0xE0, 0xF9, 0x3C, 0x23, 0x1C, 0xE5, 0xE3,  // r..<#...
                /* 0590 */  0x0D, 0x0E, 0xE3, 0xE9, 0xC5, 0x43, 0xF4, 0xCD,  // .....C..
                /* 0598 */  0x0D, 0xD6, 0x44, 0x4E, 0xDA, 0xB7, 0x85, 0x93,  // ..DN....
                /* 05A0 */  0x0D, 0xFA, 0x5A, 0x89, 0xB9, 0xB9, 0x01, 0x57,  // ..Z....W
                /* 05A8 */  0x4D, 0x4B, 0xA1, 0x81, 0x96, 0xA3, 0xA8, 0x0B,  // MK......
                /* 05B0 */  0xA3, 0x30, 0xBE, 0x03, 0x02, 0x9B, 0xFF, 0xFF,  // .0......
                /* 05B8 */  0x1D, 0x10, 0x58, 0x5D, 0xAB, 0x0E, 0x1D, 0x2C,  // ..X]...,
                /* 05C0 */  0x07, 0x84, 0xC7, 0x09, 0xCC, 0xB4, 0xC1, 0x73,  // .......s
                /* 05C8 */  0xFF, 0x83, 0x7B, 0x6F, 0x8E, 0xFD, 0xEA, 0xFC,  // ..{o....
                /* 05D0 */  0x3E, 0x11, 0xE2, 0xCD, 0xEF, 0xC5, 0x2F, 0xCE,  // >...../.
                /* 05D8 */  0x83, 0x5F, 0x24, 0xCF, 0xF5, 0xFD, 0x8F, 0x1D,  // ._$.....
                /* 05E0 */  0xA6, 0x7D, 0x5A, 0x79, 0x93, 0x36, 0xCA, 0x41,  // .}Zy.6.A
                /* 05E8 */  0x3C, 0x02, 0x1A, 0x24, 0x42, 0xD8, 0x47, 0x9B,  // <..$B.G.
                /* 05F0 */  0x27, 0x30, 0x03, 0x1D, 0x4A, 0xC8, 0x28, 0x8F,  // '0..J.(.
                /* 05F8 */  0x37, 0x51, 0xDE, 0xFF, 0x00, 0xD3, 0xFF, 0xFF,  // 7Q......
                /* 0600 */  0xFB, 0x1F, 0xE0, 0xE9, 0x12, 0xCC, 0xEE, 0x7F,  // ........
                /* 0608 */  0x80, 0x53, 0x7D, 0x17, 0x3E, 0xAA, 0x0D, 0x44,  // .S}.>..D
                /* 0610 */  0xF7, 0x3F, 0x9C, 0xE6, 0x47, 0x83, 0x66, 0x0B,  // .?..G.f.
                /* 0618 */  0xFB, 0xEE, 0xC7, 0xEE, 0x7F, 0x5C, 0x1D, 0x8C,  // .....\..
                /* 0620 */  0x92, 0xD0, 0xE8, 0xB8, 0xC4, 0xB5, 0xC3, 0x08,  // ........
                /* 0628 */  0xCE, 0x20, 0x3E, 0x47, 0xF8, 0xFE, 0x07, 0xEB,  // . >G....
                /* 0630 */  0xFF, 0x7F, 0xFF, 0x03, 0x4C, 0x5C, 0xC9, 0x80,  // ....L\..
                /* 0638 */  0xDD, 0x11, 0x10, 0x1C, 0x57, 0x32, 0xE0, 0x14,  // ....W2..
                /* 0640 */  0xE9, 0x52, 0x80, 0x0A, 0x71, 0x29, 0xA0, 0x20,  // .R..q). 
                /* 0648 */  0x9E, 0x98, 0xC3, 0x5C, 0x0D, 0xD1, 0x93, 0xF5,  // ...\....
                /* 0650 */  0xD5, 0x10, 0xC6, 0x9D, 0x0C, 0xEC, 0xD7, 0x06,  // ........
                /* 0658 */  0xDF, 0x4B, 0xE0, 0xFE, 0xFF, 0x0F, 0xFB, 0x70,  // .K.....p
                /* 0660 */  0x42, 0x5D, 0x1D, 0xD0, 0x97, 0x15, 0x9F, 0x0E,  // B]......
                /* 0668 */  0x31, 0x03, 0xD4, 0xD9, 0x81, 0x0E, 0x0A, 0x5C,  // 1......\
                /* 0670 */  0xD7, 0x43, 0xDC, 0xD8, 0xE0, 0x9D, 0x0F, 0xC1,  // .C......
                /* 0678 */  0x77, 0x7B, 0x03, 0x1E, 0xF1, 0x6E, 0x6F, 0x40,  // w{...no@
                /* 0680 */  0xEF, 0xCE, 0x05, 0xDC, 0x04, 0xFE, 0xA5, 0x4C,  // .......L
                /* 0688 */  0xA0, 0x38, 0x4B, 0x91, 0x24, 0x18, 0xD4, 0xCD,  // .8K.$...
                /* 0690 */  0x0D, 0x3C, 0xFF, 0xFF, 0x9B, 0x1B, 0x70, 0x3F,  // .<....p?
                /* 0698 */  0x34, 0x78, 0xD8, 0xE0, 0xC0, 0x8F, 0x71, 0xD6,  // 4x....q.
                /* 06A0 */  0x4F, 0x04, 0x3E, 0xB3, 0x78, 0xC2, 0x6C, 0xDA,  // O.>.x.l.
                /* 06A8 */  0xB0, 0xF0, 0x13, 0xF8, 0xE2, 0x06, 0xF7, 0xA2,  // ........
                /* 06B0 */  0xF1, 0xEE, 0xEF, 0xD3, 0x5A, 0xE4, 0x28, 0x9E,  // ....Z.(.
                /* 06B8 */  0xE8, 0x13, 0xDB, 0x7B, 0x47, 0x84, 0x28, 0x0C,  // ...{G.(.
                /* 06C0 */  0xE2, 0xDD, 0x2D, 0xDC, 0x19, 0x44, 0x39, 0x87,  // ..-..D9.
                /* 06C8 */  0xD7, 0x26, 0x5F, 0xE0, 0x9E, 0xDD, 0x3C, 0xD6,  // .&_...<.
                /* 06D0 */  0xB0, 0x8F, 0x6E, 0xBE, 0xBA, 0x19, 0x21, 0x46,  // ..n...!F
                /* 06D8 */  0xDC, 0x10, 0x41, 0x5F, 0xDC, 0xC0, 0x1B, 0xE2,  // ..A_....
                /* 06E0 */  0x8C, 0x4D, 0x2F, 0x6E, 0x80, 0x87, 0xFF, 0xFF,  // .M/n....
                /* 06E8 */  0xC5, 0x0D, 0xF0, 0x22, 0xF1, 0xE1, 0xA0, 0x3B,  // ..."...;
                /* 06F0 */  0x17, 0x1F, 0x8F, 0x45, 0x41, 0x93, 0xD3, 0x02,  // ...EA...
                /* 06F8 */  0x9C, 0xCB, 0x0F, 0xE6, 0xFE, 0xE1, 0x0B, 0x83,  // ........
                /* 0700 */  0x45, 0xC0, 0xEB, 0x60, 0x63, 0x68, 0x9F, 0x29,  // E..`ch.)
                /* 0708 */  0xF8, 0x01, 0xC3, 0x67, 0x0A, 0x06, 0xCC, 0x0F,  // ...g....
                /* 0710 */  0x26, 0x98, 0x23, 0x05, 0xF0, 0x3A, 0xF1, 0xC0,  // &.#..:..
                /* 0718 */  0x1B, 0x97, 0xC7, 0xE3, 0x41, 0xC3, 0x9D, 0xCC,  // ....A...
                /* 0720 */  0x49, 0x57, 0x3D, 0x05, 0xDD, 0x05, 0xAC, 0xEE,  // IW=.....
                /* 0728 */  0x28, 0x07, 0x92, 0x21, 0x63, 0x09, 0x2C, 0xF8,  // (..!c.,.
                /* 0730 */  0xE0, 0x03, 0x8A, 0xFF, 0xFF, 0x34, 0xB0, 0x13,  // .....4..
                /* 0738 */  0x85, 0x31, 0x16, 0x58, 0x03, 0x65, 0xB7, 0x41,  // .1.X.e.A
                /* 0740 */  0xC0, 0xDD, 0x60, 0xB8, 0x84, 0xD3, 0x0F, 0x2A,  // ..`....*
                /* 0748 */  0xF4, 0xB3, 0xC0, 0x07, 0x20, 0x40, 0xF7, 0xFF,  // .... @..
                /* 0750 */  0xFF, 0x00, 0x04, 0xBE, 0xE9, 0x3D, 0xE2, 0x3C,  // .....=.<
                /* 0758 */  0xBA, 0x3D, 0xF0, 0xBC, 0x57, 0x9C, 0x67, 0xEC,  // .=..W.g.
                /* 0760 */  0xF0, 0x2F, 0x3E, 0x2F, 0xC3, 0x86, 0x79, 0xFB,  // ./>/..y.
                /* 0768 */  0x31, 0x46, 0xBC, 0x47, 0x95, 0xC7, 0x60, 0x43,  // 1F.G..`C
                /* 0770 */  0x86, 0x79, 0x10, 0x0A, 0x13, 0xCA, 0x47, 0x21,  // .y....G!
                /* 0778 */  0x23, 0x86, 0x88, 0x1B, 0xE1, 0x25, 0xE8, 0x50,  // #....%.P
                /* 0780 */  0x02, 0x1D, 0xC0, 0x69, 0xFB, 0x00, 0x04, 0x56,  // ...i...V
                /* 0788 */  0x99, 0x07, 0x20, 0x80, 0x26, 0x0F, 0x07, 0x9F,  // .. .&...
                /* 0790 */  0x23, 0x71, 0x03, 0xF0, 0xA0, 0xDF, 0x18, 0x8C,  // #q......
                /* 0798 */  0xFA, 0xBA, 0x60, 0x9F, 0xC7, 0x03, 0x8D, 0xE9,  // ..`.....
                /* 07A0 */  0x8C, 0xFE, 0xFF, 0x71, 0x8F, 0x29, 0x76, 0x8C,  // ...q.)v.
                /* 07A8 */  0x58, 0xE1, 0x7D, 0x18, 0x88, 0xF1, 0x66, 0xE2,  // X.}...f.
                /* 07B0 */  0x23, 0x03, 0x3B, 0xF6, 0xF1, 0x23, 0x10, 0x78,  // #.;..#.x
                /* 07B8 */  0x8E, 0x7A, 0xE0, 0x19, 0x12, 0xEE, 0xE4, 0xEF,  // .z......
                /* 07C0 */  0x29, 0xBD, 0xEB, 0x79, 0x4C, 0x78, 0xA8, 0xF0,  // )..yLx..
                /* 07C8 */  0xE7, 0x84, 0x39, 0x61, 0x82, 0xEF, 0x84, 0x81,  // ..9a....
                /* 07D0 */  0xBB, 0x48, 0x83, 0x6B, 0xE4, 0xE0, 0x3B, 0xF1,  // .H.k..;.
                /* 07D8 */  0x00, 0xFE, 0xFE, 0xFF, 0x04, 0x8E, 0xA5, 0x03,  // ........
                /* 07E0 */  0x84, 0x49, 0x7B, 0x21, 0x28, 0x08, 0x0C, 0xEA,  // .I{!(...
                /* 07E8 */  0xA4, 0x0A, 0xE7, 0xC4, 0x83, 0x3B, 0xA0, 0x80,  // .....;..
                /* 07F0 */  0x73, 0xA8, 0xB8, 0x93, 0x03, 0xDC, 0xA1, 0x1C,  // s.......
                /* 07F8 */  0x23, 0xBB, 0x31, 0xC4, 0x3A, 0x7C, 0xC3, 0xF8,  // #.1.:|..
                /* 0800 */  0xD6, 0xC0, 0x8E, 0x0A, 0xC6, 0x39, 0x4C, 0x8F,  // .....9L.
                /* 0808 */  0xF1, 0x50, 0x8D, 0xCC, 0x4E, 0x9D, 0x98, 0xE3,  // .P..N...
                /* 0810 */  0x83, 0x8F, 0x24, 0x3E, 0x07, 0xBC, 0x8A, 0xF8,  // ..$>....
                /* 0818 */  0x90, 0x03, 0xFF, 0x92, 0xEA, 0x5B, 0xCD, 0x79,  // .....[.y
                /* 0820 */  0x3D, 0x36, 0xB2, 0x1B, 0xA3, 0x0F, 0x38, 0x91,  // =6....8.
                /* 0828 */  0x82, 0x3C, 0x34, 0x62, 0xC0, 0x1E, 0x72, 0x7C,  // .<4b..r|
                /* 0830 */  0x8C, 0x78, 0xC2, 0x79, 0xC8, 0x31, 0x6C, 0xD4,  // .x.y.1l.
                /* 0838 */  0xF7, 0x1D, 0xE3, 0x9C, 0xCA, 0xB3, 0x84, 0x21,  // .......!
                /* 0840 */  0x62, 0xBD, 0xEF, 0x98, 0xC0, 0x72, 0x6D, 0x40,  // b....rm@
                /* 0848 */  0xDC, 0xBF, 0x65, 0x8C, 0x5F, 0x07, 0x60, 0xFC,  // ..e._.`.
                /* 0850 */  0xF1, 0xC0, 0xA3, 0xE1, 0xB1, 0xAF, 0xD5, 0xF4,  // ........
                /* 0858 */  0x18, 0x02, 0x9E, 0x73, 0x0B, 0x7C, 0x40, 0xBC,  // ...s.|@.
                /* 0860 */  0xF7, 0x3B, 0x00, 0x39, 0xB9, 0xB3, 0xA3, 0x01,  // .;.9....
                /* 0868 */  0xFE, 0x34, 0x80, 0xFF, 0xFF, 0x9F, 0x06, 0x70,  // .4.....p
                /* 0870 */  0x23, 0xC3, 0x9D, 0xEF, 0xE0, 0x19, 0x3A, 0x19,  // #.....:.
                /* 0878 */  0x83, 0x4E, 0xC8, 0x98, 0x7D, 0x34, 0x42, 0x5F,  // .N..}4B_
                /* 0880 */  0xEC, 0x3C, 0x9F, 0x47, 0x5D, 0xCF, 0xCC, 0xF7,  // .<.G]...
                /* 0888 */  0xA1, 0xE8, 0x21, 0xDE, 0xB3, 0x4C, 0xE0, 0xC0,  // ..!..L..
                /* 0890 */  0x10, 0xFA, 0x94, 0x79, 0xDC, 0xE0, 0x38, 0xFE,  // ...y..8.
                /* 0898 */  0x80, 0x63, 0xDC, 0xF0, 0xE7, 0xEA, 0x71, 0x83,  // .c....q.
                /* 08A0 */  0x65, 0x74, 0x30, 0x07, 0x0D, 0x7E, 0xC8, 0x93,  // et0..~..
                /* 08A8 */  0x3B, 0x86, 0x07, 0x81, 0xF7, 0x6F, 0x9F, 0x2D,  // ;....o.-
                /* 08B0 */  0x9E, 0xA0, 0x71, 0x83, 0x06, 0x1B, 0xA0, 0x07,  // ..q.....
                /* 08B8 */  0x0D, 0xBE, 0xFF, 0xFF, 0xA0, 0xC1, 0x3B, 0x3A,  // ......;:
                /* 08C0 */  0xB8, 0x83, 0x06, 0x97, 0xA0, 0x41, 0xA3, 0x8F,  // .....A..
                /* 08C8 */  0x81, 0x1E, 0x07, 0xBB, 0x0C, 0xB0, 0x89, 0xC0,  // ........
                /* 08D0 */  0x3A, 0x1B, 0x6A, 0xD8, 0xA0, 0x3A, 0xE2, 0x78,  // :.j..:.x
                /* 08D8 */  0xD8, 0xE0, 0x3F, 0xE7, 0x1C, 0x36, 0xB8, 0xC6,  // ..?..6..
                /* 08E0 */  0x07, 0x7B, 0xE0, 0xE0, 0x3A, 0xE3, 0x7A, 0xE0,  // .{..:.z.
                /* 08E8 */  0xB8, 0xF1, 0x78, 0x1E, 0x6F, 0x42, 0x46, 0x3C,  // ..x.oBF<
                /* 08F0 */  0x90, 0x10, 0x6F, 0x14, 0x27, 0x1B, 0xE6, 0x05,  // ..o.'...
                /* 08F8 */  0xCF, 0x04, 0xE3, 0x8E, 0x1A, 0x54, 0xA0, 0x1E,  // .....T..
                /* 0900 */  0xAD, 0xFF, 0xFF, 0xA3, 0x06, 0xB7, 0xC0, 0xF3,  // ........
                /* 0908 */  0x07, 0x88, 0x06, 0x07, 0x6B, 0xC8, 0xE0, 0x92,  // ....k...
                /* 0910 */  0x74, 0x0A, 0x42, 0x0F, 0xC6, 0x67, 0x01, 0x36,  // t.B..g.6
                /* 0918 */  0x48, 0x9F, 0xB2, 0xD8, 0xB5, 0x84, 0x11, 0x0C,  // H.......
                /* 0920 */  0x7F, 0x10, 0x02, 0x15, 0xA8, 0x87, 0x0C, 0x3C,  // .......<
                /* 0928 */  0x07, 0x07, 0xEF, 0x2C, 0x04, 0xCF, 0xCA, 0xC8,  // ...,....
                /* 0930 */  0x81, 0x02, 0xF0, 0xD1, 0xBC, 0xB7, 0xF1, 0xE3,  // ........
                /* 0938 */  0x56, 0x5C, 0x0F, 0x93, 0x8D, 0x9C, 0xFF, 0xFF,  // V\......
                /* 0940 */  0x47, 0x0E, 0x8E, 0x33, 0xAF, 0x47, 0x0E, 0x3C,  // G..3.G.<
                /* 0948 */  0x07, 0x07, 0x6F, 0xE4, 0xF0, 0x46, 0xED, 0x91,  // ..o..F..
                /* 0950 */  0x83, 0xEB, 0x98, 0xE7, 0x91, 0xE3, 0x58, 0x0C,  // ......X.
                /* 0958 */  0xFC, 0x1A, 0x17, 0xF1, 0xA9, 0x80, 0x8D, 0x07,  // ........
                /* 0960 */  0xCE, 0x8B, 0xCC, 0x63, 0x07, 0xCF, 0x90, 0x3C,  // ...c...<
                /* 0968 */  0x76, 0xF0, 0x9F, 0x22, 0xF1, 0x63, 0x87, 0x39,  // v..".c.9
                /* 0970 */  0x3C, 0xD8, 0xA3, 0x07, 0xC7, 0xFF, 0x7F, 0xF4,  // <.......
                /* 0978 */  0xE0, 0x90, 0x35, 0x7A, 0xF4, 0x30, 0x3C, 0x1E,  // ..5z.0<.
                /* 0980 */  0x1C, 0x72, 0x97, 0xC3, 0x41, 0xC6, 0x3F, 0x47,  // .r..A.?G
                /* 0988 */  0x80, 0xCA, 0xC4, 0xE9, 0x0A, 0xA8, 0x8E, 0x0E,  // ........
                /* 0990 */  0xEE, 0xD8, 0x81, 0xC7, 0xD1, 0x06, 0x26, 0xEC,  // ......&.
                /* 0998 */  0xE1, 0x1D, 0xCB, 0x13, 0x09, 0x78, 0x55, 0x9C,  // .....xU.
                /* 09A0 */  0x48, 0x80, 0xD6, 0xFF, 0xFF, 0x68, 0x03, 0x73,  // H....h.s
                /* 09A8 */  0x70, 0x30, 0x46, 0x0E, 0xDC, 0x30, 0x4F, 0xE9,  // p0F..0O.
                /* 09B0 */  0x99, 0xFC, 0xC8, 0xC1, 0x3E, 0x5E, 0x8F, 0x1C,  // ....>^..
                /* 09B8 */  0x78, 0x0E, 0x0E, 0xDE, 0xC8, 0x81, 0x07, 0xD6,  // x.......
                /* 09C0 */  0x03, 0x36, 0xF8, 0x2E, 0xBF, 0x7C, 0x0C, 0x0F,  // .6...|..
                /* 09C8 */  0xBF, 0xB8, 0x53, 0xBF, 0xEF, 0xBE, 0x3E, 0x5B,  // ..S...>[
                /* 09D0 */  0xC3, 0xFB, 0xFF, 0x9F, 0xAD, 0x01, 0x5F, 0x09,  // ......_.
                /* 09D8 */  0x1E, 0x2F, 0x26, 0x50, 0xC8, 0x13, 0x84, 0xC2,  // ./&P....
                /* 09E0 */  0x3F, 0x05, 0x28, 0x8C, 0x4F, 0x56, 0x3E, 0x5B,  // ?.(.OV>[
                /* 09E8 */  0xC3, 0x3D, 0x46, 0x1A, 0x8E, 0x1F, 0x02, 0x7C,  // .=F....|
                /* 09F0 */  0x4C, 0x78, 0x1D, 0x3B, 0x8E, 0x73, 0x79, 0x83,  // Lx.;.sy.
                /* 09F8 */  0xF0, 0x88, 0x1E, 0x7D, 0x61, 0x9C, 0x24, 0x7C,  // ...}a.$|
                /* 0A00 */  0x05, 0x60, 0xB3, 0x7B, 0x4E, 0xF0, 0xE8, 0x4C,  // .`.{N..L
                /* 0A08 */  0xE0, 0x51, 0x30, 0x34, 0x7E, 0x4A, 0x60, 0x87,  // .Q04~J`.
                /* 0A10 */  0x05, 0x7E, 0x0A, 0xF0, 0xB1, 0x82, 0x0D, 0xF0,  // .~......
                /* 0A18 */  0x69, 0xFB, 0xBD, 0xD5, 0x13, 0x79, 0x73, 0x78,  // i....ysx
                /* 0A20 */  0x72, 0x65, 0x47, 0x64, 0x47, 0x38, 0xCB, 0x82,  // reGdG8..
                /* 0A28 */  0x0A, 0xE7, 0xA9, 0xDF, 0x10, 0x8F, 0xDC, 0x98,  // ........
                /* 0A30 */  0xE1, 0xC3, 0x41, 0x66, 0xBE, 0x06, 0x45, 0x60,  // ..Af..E`
                /* 0A38 */  0x5E, 0xED, 0x7D, 0x06, 0xF0, 0x35, 0x27, 0xC4,  // ^.}..5'.
                /* 0A40 */  0x79, 0xC6, 0x32, 0xD0, 0x81, 0x44, 0x78, 0xB2,  // y.2..Dx.
                /* 0A48 */  0x78, 0x0D, 0xF0, 0xC1, 0x82, 0x9D, 0xB9, 0xF1,  // x.......
                /* 0A50 */  0xFF, 0xFF, 0x33, 0x37, 0xEE, 0xB6, 0xEF, 0x73,  // ..37...s
                /* 0A58 */  0x76, 0x84, 0x87, 0x0F, 0x0F, 0x24, 0xC2, 0xE3,  // v....$..
                /* 0A60 */  0xB6, 0x11, 0x9E, 0xB4, 0x7D, 0xE6, 0xF6, 0x65,  // ....}..e
                /* 0A68 */  0xDB, 0x60, 0xA1, 0x8C, 0xF9, 0xE4, 0xFD, 0xE0,  // .`......
                /* 0A70 */  0x6D, 0xC4, 0x47, 0x6E, 0xCF, 0x29, 0x46, 0xE8,  // m.Gn.)F.
                /* 0A78 */  0x37, 0x6E, 0x0F, 0xC0, 0x78, 0x87, 0xC2, 0xCE,  // 7n..x...
                /* 0A80 */  0xED, 0xE0, 0x14, 0xF6, 0x48, 0xD6, 0xB1, 0xD2,  // ....H...
                /* 0A88 */  0x91, 0xE0, 0x51, 0x87, 0x29, 0x7E, 0xC4, 0xF0,  // ..Q.)~..
                /* 0A90 */  0x31, 0xDD, 0x47, 0x48, 0x0F, 0xE1, 0x08, 0x9E,  // 1.GH....
                /* 0A98 */  0x2E, 0x9E, 0x0F, 0x3C, 0x06, 0x76, 0x71, 0xF0,  // ...<.vq.
                /* 0AA0 */  0x89, 0xC0, 0x07, 0x06, 0xFC, 0xC1, 0xE4, 0x90,  // ........
                /* 0AA8 */  0x7D, 0x5C, 0x81, 0x75, 0x6C, 0xC1, 0x8F, 0xE8,  // }\.ul...
                /* 0AB0 */  0xB9, 0x04, 0xF6, 0x29, 0x9E, 0x1D, 0x4C, 0x7C,  // ...)..L|
                /* 0AB8 */  0xB0, 0x48, 0x60, 0xF9, 0x83, 0x40, 0x8D, 0xCC,  // .H`..@..
                /* 0AC0 */  0xD0, 0xBE, 0x6C, 0xBC, 0xCC, 0xFB, 0x48, 0xE0,  // ..l...H.
                /* 0AC8 */  0x61, 0xB1, 0xE3, 0x8A, 0x4F, 0xD6, 0xE0, 0x18,  // a...O...
                /* 0AD0 */  0x0F, 0xFC, 0x63, 0xC0, 0x33, 0x89, 0xA7, 0xEF,  // ..c.3...
                /* 0AD8 */  0xF9, 0xFA, 0x4C, 0x8B, 0x3D, 0xB7, 0x80, 0xE5,  // ..L.=...
                /* 0AE0 */  0x12, 0xC1, 0xCE, 0x10, 0xFC, 0xF6, 0xC3, 0x09,  // ........
                /* 0AE8 */  0xFC, 0xFF, 0x3F, 0xB5, 0x00, 0xEE, 0xB4, 0xBF,  // ..?.....
                /* 0AF0 */  0x1D, 0x74, 0x0C, 0xB1, 0x6E, 0x10, 0xD9, 0x38,  // .t..n..8
                /* 0AF8 */  0x44, 0xD1, 0x11, 0x5A, 0xFB, 0x63, 0x59, 0x93,  // D..Z.cY.
                /* 0B00 */  0x85, 0xA7, 0x17, 0x4E, 0xD0, 0x3E, 0x16, 0x58,  // ...N.>.X
                /* 0B08 */  0x29, 0x8C, 0xB4, 0x3E, 0x1F, 0x34, 0x36, 0xC3,  // )..>.46.
                /* 0B10 */  0x5B, 0x1D, 0x8C, 0xE0, 0x0C, 0xE2, 0xD3, 0x94,  // [.......
                /* 0B18 */  0x03, 0x41, 0xE8, 0x68, 0x85, 0x3B, 0x91, 0xF9,  // .A.h.;..
                /* 0B20 */  0xAC, 0x84, 0x49, 0x70, 0x8D, 0xA6, 0x93, 0xF1,  // ..Ip....
                /* 0B28 */  0x3D, 0x81, 0x63, 0xFB, 0xE4, 0x60, 0x60, 0x5F,  // =.c..``_
                /* 0B30 */  0x99, 0xE0, 0xAA, 0x81, 0x43, 0x41, 0xFB, 0x42,  // ....CA.B
                /* 0B38 */  0xC2, 0x4F, 0x4E, 0x60, 0xCB, 0x02, 0x21, 0x27,  // .ON`..!'
                /* 0B40 */  0x27, 0x0A, 0xD4, 0x2C, 0x3C, 0x59, 0xFC, 0xD1,  // '..,<Y..
                /* 0B48 */  0x1E, 0x73, 0x5D, 0xF1, 0x68, 0x3C, 0x38, 0xEC,  // .s].h<8.
                /* 0B50 */  0xFF, 0x7F, 0x70, 0x98, 0x51, 0xC1, 0x1A, 0xB4,  // ..p.Q...
                /* 0B58 */  0x75, 0x8D, 0x0A, 0x34, 0x47, 0x97, 0x67, 0x97,  // u..4G.g.
                /* 0B60 */  0x04, 0x73, 0xCC, 0x0A, 0xAD, 0xE4, 0xAA, 0x43,  // .s.....C
                /* 0B68 */  0xE6, 0xC4, 0x6E, 0x05, 0x51, 0xAB, 0x9F, 0x13,  // ..n.Q...
                /* 0B70 */  0xA8, 0x6F, 0x07, 0x9E, 0x13, 0xD8, 0x4E, 0x08,  // .o....N.
                /* 0B78 */  0x70, 0xEE, 0x0C, 0x98, 0x13, 0x02, 0x78, 0x83,  // p.....x.
                /* 0B80 */  0xD9, 0x39, 0x21, 0xC0, 0x43, 0xF2, 0x09, 0x01,  // .9!.C...
                /* 0B88 */  0x5C, 0x41, 0xCE, 0x3A, 0xE8, 0xE3, 0x14, 0x1B,  // \A.:....
                /* 0B90 */  0xD7, 0xDB, 0x86, 0xCF, 0x1A, 0x3E, 0x72, 0xF8,  // .....>r.
                /* 0B98 */  0x3A, 0xE5, 0xC1, 0x83, 0x75, 0x9C, 0x1E, 0x3C,  // :...u..<
                /* 0BA0 */  0xEC, 0xFF, 0xFF, 0x35, 0x07, 0xAF, 0xEF, 0x1C,  // ...5....
                /* 0BA8 */  0x03, 0x0A, 0x20, 0xDF, 0x5A, 0x7C, 0x4A, 0x79,  // .. .Z|Jy
                /* 0BB0 */  0x72, 0x61, 0x63, 0x78, 0x50, 0x31, 0x9A, 0xD1,  // racxP1..
                /* 0BB8 */  0xF9, 0xED, 0xD0, 0xB7, 0x10, 0x7E, 0xAB, 0xF7,  // .....~..
                /* 0BC0 */  0x0D, 0xC2, 0x20, 0x3E, 0x20, 0x38, 0xCA, 0x64,  // .. > 8.d
                /* 0BC8 */  0xD1, 0x33, 0xF1, 0xA5, 0xC7, 0x33, 0x3A, 0xEC,  // .3...3:.
                /* 0BD0 */  0x20, 0xE7, 0x68, 0x82, 0x97, 0x8B, 0x97, 0x24,  //  .h....$
                /* 0BD8 */  0x58, 0x77, 0x96, 0x90, 0xCF, 0x2B, 0x9E, 0x86,  // Xw...+..
                /* 0BE0 */  0xCF, 0x05, 0xF8, 0x13, 0x08, 0xBF, 0x40, 0xF9,  // ......@.
                /* 0BE8 */  0x8E, 0x04, 0xBE, 0xDB, 0x22, 0x6E, 0xB6, 0x60,  // ...."n.`
                /* 0BF0 */  0x84, 0xC7, 0x44, 0xBE, 0x30, 0xA0, 0x86, 0xC7,  // ..D.0...
                /* 0BF8 */  0x2F, 0x07, 0x9E, 0xCF, 0x33, 0xC2, 0x51, 0x3E,  // /...3.Q>
                /* 0C00 */  0xE0, 0xE0, 0x30, 0x9E, 0x60, 0x3C, 0x44, 0x5F,  // ..0.`<D_
                /* 0C08 */  0xE0, 0x60, 0x4D, 0xE4, 0xA4, 0x7D, 0x5B, 0x38,  // .`M..}[8
                /* 0C10 */  0xD9, 0xA0, 0xEF, 0x99, 0xEC, 0x02, 0x07, 0xAC,  // ........
                /* 0C18 */  0xFE, 0xFF, 0x17, 0x38, 0x30, 0x2A, 0x5D, 0x10,  // ...80*].
                /* 0C20 */  0x8D, 0xB6, 0x28, 0x45, 0x5E, 0x1E, 0x85, 0xF1,  // ..(E^...
                /* 0C28 */  0x85, 0x10, 0x70, 0x74, 0x8C, 0xF0, 0x01, 0x00,  // ..pt....
                /* 0C30 */  0x1C, 0x37, 0xA5, 0x07, 0x00, 0x58, 0xD7, 0x85,  // .7...X..
                /* 0C38 */  0xA3, 0x7E, 0x83, 0xC6, 0x9D, 0x02, 0xE0, 0xDE,  // .~......
                /* 0C40 */  0x05, 0xE1, 0x8F, 0xF5, 0x81, 0x25, 0xFC, 0xAB,  // .....%..
                /* 0C48 */  0x45, 0x8C, 0xF7, 0xBF, 0xE0, 0xCF, 0x36, 0x0F,  // E.....6.
                /* 0C50 */  0x81, 0x41, 0xC2, 0xBC, 0x06, 0x86, 0x7A, 0x17,  // .A....z.
                /* 0C58 */  0xF4, 0xFD, 0xE6, 0x99, 0xD0, 0x28, 0x91, 0xDE,  // .....(..
                /* 0C60 */  0xD7, 0x1E, 0x04, 0x8D, 0x52, 0x1B, 0xA4, 0x46,  // ....R..F
                /* 0C68 */  0x12, 0xDB, 0x20, 0xEF, 0x85, 0x06, 0x8A, 0xF0,  // .. .....
                /* 0C70 */  0xF8, 0x77, 0xFA, 0xBE, 0x0B, 0x82, 0xFB, 0xFF,  // .w......
                /* 0C78 */  0x7F, 0x17, 0x04, 0x38, 0x75, 0x7F, 0x60, 0x77,  // ...8u.`w
                /* 0C80 */  0x41, 0xC0, 0xD2, 0xFF, 0xFF, 0x2E, 0x08, 0x26,  // A......&
                /* 0C88 */  0xB5, 0xD7, 0x3F, 0x7A, 0xFB, 0xF3, 0x5D, 0x10,  // ..?z..].
                /* 0C90 */  0xA7, 0xFB, 0xCD, 0xA0, 0xC9, 0xC2, 0xBB, 0x07,  // ........
                /* 0C98 */  0xFA, 0x2E, 0xC8, 0x55, 0xC2, 0x48, 0x01, 0x8D,  // ...U.H..
                /* 0CA0 */  0x8E, 0x4D, 0x3C, 0xF3, 0xA9, 0x84, 0x82, 0x18,  // .M<.....
                /* 0CA8 */  0xD0, 0x77, 0x41, 0xC0, 0xCF, 0xB5, 0x0B, 0x58,  // .wA....X
                /* 0CB0 */  0x48, 0xDC, 0xAA, 0x26, 0xCC, 0x45, 0xC1, 0x68,  // H..&.E.h
                /* 0CB8 */  0xC2, 0x06, 0xF1, 0x38, 0x3D, 0x61, 0x5F, 0xFF,  // ...8=a_.
                /* 0CC0 */  0x70, 0xA3, 0xF4, 0x21, 0x11, 0xE6, 0xCD, 0x0B,  // p..!....
                /* 0CC8 */  0xEC, 0xC3, 0xF1, 0x95, 0xC3, 0xFF, 0xFF, 0x2B,  // .......+
                /* 0CD0 */  0x20, 0x98, 0x08, 0x86, 0x19, 0x18, 0xFA, 0x62,  //  ......b
                /* 0CD8 */  0xE4, 0x6B, 0x22, 0x8C, 0x61, 0x81, 0xFD, 0xCA,  // .k".a...
                /* 0CE0 */  0xE0, 0x61, 0x81, 0x2F, 0xD4, 0xF5, 0x01, 0x7D,  // .a./...}
                /* 0CE8 */  0x5B, 0xF1, 0x6D, 0x04, 0x17, 0xE2, 0xFC, 0x40,  // [.m....@
                /* 0CF0 */  0x07, 0x05, 0xAE, 0xAB, 0x22, 0x6E, 0x6C, 0xF0,  // ...."nl.
                /* 0CF8 */  0xCE, 0x8A, 0xE0, 0xBB, 0xC9, 0x01, 0x8F, 0xA0,  // ........
                /* 0D00 */  0x37, 0x39, 0xA0, 0xF2, 0xFF, 0xBF, 0xC9, 0xC1,  // 79......
                /* 0D08 */  0xB9, 0x79, 0x01, 0xDF, 0xF8, 0xAF, 0x12, 0x5F,  // .y....._
                /* 0D10 */  0x1B, 0xBD, 0x1E, 0x85, 0x5C, 0x19, 0x85, 0xF1,  // ....\...
                /* 0D18 */  0x25, 0x0E, 0x70, 0x84, 0xFD, 0x52, 0x08, 0xEE,  // %.p..R..
                /* 0D20 */  0xD1, 0x30, 0x18, 0x5F, 0xCD, 0xF8, 0xE5, 0x0D,  // .0._....
                /* 0D28 */  0x2E, 0xE2, 0x7B, 0xDB, 0x73, 0xC7, 0xD3, 0x46,  // ..{.s..F
                /* 0D30 */  0x90, 0x10, 0x6F, 0x56, 0x2F, 0x11, 0x8F, 0x6E,  // ..oV/..n
                /* 0D38 */  0xBE, 0xB6, 0x45, 0x78, 0x7E, 0x33, 0x4A, 0xB8,  // ..Ex~3J.
                /* 0D40 */  0x08, 0x2F, 0x6D, 0x51, 0xDE, 0xD3, 0x9E, 0xDE,  // ./mQ....
                /* 0D48 */  0x7C, 0xEE, 0x88, 0xF2, 0xE6, 0x66, 0xBC, 0x30,  // |....f.0
                /* 0D50 */  0xA1, 0x83, 0x84, 0x8B, 0x14, 0x2D, 0xB8, 0x27,  // .....-.'
                /* 0D58 */  0xED, 0x61, 0x63, 0xFE, 0xFF, 0x97, 0x37, 0x70,  // .ac...7p
                /* 0D60 */  0x49, 0xBB, 0xBC, 0x01, 0x34, 0x39, 0x35, 0xE0,  // I...495.
                /* 0D68 */  0x2E, 0x6F, 0x60, 0xB9, 0xDB, 0x63, 0x6F, 0x0D,  // .o`..co.
                /* 0D70 */  0xF8, 0xDB, 0x1B, 0x70, 0xFB, 0xFF, 0xDF, 0xDE,  // ...p....
                /* 0D78 */  0x80, 0x9F, 0xA0, 0x0B, 0x1B, 0x15, 0x03, 0xA2,  // ........
                /* 0D80 */  0xDB, 0x1B, 0xE7, 0xB0, 0xD4, 0xE7, 0x80, 0x66,  // .......f
                /* 0D88 */  0x0B, 0xFB, 0x30, 0xC1, 0xEE, 0x6F, 0xFC, 0xE4,  // ..0..o..
                /* 0D90 */  0x65, 0x59, 0xF7, 0x37, 0x94, 0x10, 0x18, 0xC1,  // eY.7....
                /* 0D98 */  0x19, 0xC4, 0x80, 0x4E, 0x09, 0x21, 0x1B, 0x87,  // ...N.!..
                /* 0DA0 */  0x05, 0xD4, 0x48, 0x3C, 0x0D, 0x58, 0x57, 0x0B,  // ..H<.XW.
                /* 0DA8 */  0xC3, 0x04, 0x4A, 0x30, 0xCB, 0x29, 0x1C, 0xA4,  // ..J0.)..
                /* 0DB0 */  0x04, 0xBE, 0x07, 0xBC, 0x34, 0xC0, 0x9E, 0xC7,  // ....4...
                /* 0DB8 */  0x53, 0x43, 0xD5, 0x63, 0xD1, 0x61, 0xC2, 0xEA,  // SC.c.a..
                /* 0DC0 */  0x8E, 0x00, 0xE8, 0x59, 0xC1, 0xBF, 0x90, 0x03,  // ...Y....
                /* 0DC8 */  0xDB, 0xFF, 0xFF, 0x85, 0x1C, 0x38, 0x9D, 0xE3,  // .....8..
                /* 0DD0 */  0xC0, 0x71, 0x21, 0x07, 0x5E, 0xC1, 0xCE, 0x5D,  // .q!.^..]
                /* 0DD8 */  0x40, 0xEF, 0xB0, 0x04, 0x7C, 0x82, 0x3C, 0x82,  // @...|.<.
                /* 0DE0 */  0x4C, 0xA0, 0xA8, 0xEB, 0x90, 0x74, 0x18, 0xD4,  // L....t..
                /* 0DE8 */  0x79, 0x0B, 0x78, 0xFE, 0xFF, 0xCF, 0x5B, 0xE0,  // y.x...[.
                /* 0DF0 */  0x0E, 0x72, 0x74, 0x03, 0xE5, 0x00, 0x0C, 0x13,  // .rt.....
                /* 0DF8 */  0x23, 0xCA, 0x21, 0x7B, 0xDC, 0x30, 0x81, 0x9E,  // #.!{.0..
                /* 0E00 */  0x07, 0x7C, 0x92, 0x31, 0x4A, 0xA4, 0xC0, 0xBE,  // .|.1J...
                /* 0E08 */  0x3C, 0xF8, 0x2A, 0xE3, 0xE3, 0x81, 0xA1, 0x3C,  // <.*....<
                /* 0E10 */  0x8D, 0x50, 0x9E, 0x6D, 0x30, 0xDF, 0x12, 0x7C,  // .P.m0..|
                /* 0E18 */  0xFE, 0x82, 0x7D, 0xDD, 0xF2, 0x0D, 0xEB, 0xA4,  // ..}.....
                /* 0E20 */  0xC3, 0x3F, 0x80, 0x19, 0xE3, 0xBD, 0x2B, 0x48,  // .?....+H
                /* 0E28 */  0x6B, 0x77, 0x70, 0x72, 0xFE, 0xF2, 0x6C, 0x4E,  // kwpr..lN
                /* 0E30 */  0xDA, 0x28, 0x07, 0xF3, 0xEA, 0xE5, 0x43, 0x98,  // .(....C.
                /* 0E38 */  0x61, 0x9F, 0xC1, 0x9E, 0x74, 0x0C, 0xF2, 0x24,  // a...t..$
                /* 0E40 */  0x6E, 0x98, 0xF8, 0x21, 0x23, 0x06, 0x79, 0xFE,  // n..!#.y.
                /* 0E48 */  0x02, 0x6F, 0xA0, 0x57, 0x80, 0x4E, 0x30, 0x3E,  // .o.W.N0>
                /* 0E50 */  0x7F, 0x01, 0x3E, 0xFE, 0xFF, 0xE7, 0x2F, 0xC0,  // ..>.../.
                /* 0E58 */  0x87, 0xEC, 0x67, 0x84, 0x8E, 0x4E, 0xFC, 0x88,  // ..g..N..
                /* 0E60 */  0x04, 0x1E, 0x71, 0xD0, 0x3A, 0xA8, 0x5A, 0xD4,  // ..q.:.Z.
                /* 0E68 */  0xF9, 0x02, 0x75, 0xD8, 0xF0, 0xF9, 0x82, 0x5D,  // ..u....]
                /* 0E70 */  0x59, 0xF9, 0x09, 0x05, 0x73, 0xBC, 0x00, 0x7C,  // Y...s..|
                /* 0E78 */  0x9C, 0x67, 0xE1, 0xFD, 0x59, 0x7C, 0x95, 0x02,  // .g..Y|..
                /* 0E80 */  0x6E, 0x67, 0x1C, 0xFF, 0xFF, 0xAF, 0xF9, 0xE0,  // ng......
                /* 0E88 */  0x3E, 0xDA, 0x01, 0x2E, 0x07, 0xC3, 0x15, 0xDA,  // >.......
                /* 0E90 */  0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35,  // ....U.25
                /* 0E98 */  0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6,  // .4...Rc.
                /* 0EA0 */  0xEC, 0x42, 0x49, 0xDE, 0xBB, 0x40, 0xA7, 0x28,  // .BI..@.(
                /* 0EA8 */  0xF2, 0x92, 0x10, 0x88, 0x85, 0x3D, 0x0B, 0x04,  // .....=..
                /* 0EB0 */  0xE2, 0x68, 0x8F, 0x14, 0x1D, 0x22, 0x1C, 0x88,  // .h..."..
                /* 0EB8 */  0x5E, 0x27, 0x13, 0x62, 0x02, 0x84, 0x45, 0x07,  // ^'.b..E.
                /* 0EC0 */  0xA1, 0xD2, 0x9F, 0x1D, 0x02, 0xB4, 0xF8, 0x67,  // .......g
                /* 0EC8 */  0x9D, 0xC0, 0x08, 0x08, 0xD7, 0x01, 0xC2, 0x22,  // ......."
                /* 0ED0 */  0xBC, 0x06, 0x04, 0xE8, 0x18, 0x4A, 0x80, 0x98,  // .....J..
                /* 0ED8 */  0x88, 0x77, 0xB8, 0x40, 0xAC, 0xC1, 0xCA, 0x21,  // .w.@...!
                /* 0EE0 */  0x5B, 0xE7, 0x10, 0x83, 0x08, 0xC8, 0x29, 0x80,  // [.....).
                /* 0EE8 */  0x68, 0x24, 0x20, 0x2A, 0x46, 0x0B, 0x10, 0x53,  // h$ *F..S
                /* 0EF0 */  0x06, 0x22, 0x20, 0xA7, 0x03, 0xA2, 0x51, 0x81,  // ." ...Q.
                /* 0EF8 */  0xA8, 0x48, 0x2F, 0x40, 0x4C, 0x31, 0x88, 0x80,  // .H/@L1..
                /* 0F00 */  0xAC, 0xEE, 0x4D, 0x20, 0x20, 0x6B, 0x05, 0x11,  // ..M  k..
                /* 0F08 */  0x90, 0x93, 0x9A, 0x19, 0x0E, 0x4B, 0xE9, 0x06,  // .....K..
                /* 0F10 */  0xE2, 0xFF, 0x1F, 0xC8, 0x1A, 0x5F, 0x02, 0x02,  // ....._..
                /* 0F18 */  0xB1, 0x44, 0x3D, 0xA0, 0x4C, 0x2F, 0x88, 0x40,  // .D=.L/.@
                /* 0F20 */  0x09, 0x10, 0x8D, 0x0D, 0x44, 0x43, 0xFA, 0x01,  // ....DC..
                /* 0F28 */  0x62, 0x91, 0x41, 0x34, 0x50, 0xF2, 0x2E, 0x11,  // b.A4P...
                /* 0F30 */  0x90, 0x83, 0x80, 0x08, 0xC8, 0xE1, 0x0D, 0x0D,  // ........
                /* 0F38 */  0x83, 0xC5, 0x76, 0x04, 0xC4, 0x44, 0xBF, 0xAC,  // ..v..D..
                /* 0F40 */  0x04, 0x62, 0xF1, 0x96, 0x40, 0x98, 0x38, 0x4F,  // .b..@.8O
                /* 0F48 */  0x80, 0x4C, 0x96, 0x29, 0x20, 0x16, 0x0A, 0x84,  // .L.) ...
                /* 0F50 */  0xAB, 0x02, 0x61, 0xD2, 0x74, 0x0D, 0x89, 0xFE,  // ..a.t...
                /* 0F58 */  0x9F, 0x83, 0x10, 0xA9, 0xEF, 0x17, 0x0D, 0x85,  // ........
                /* 0F60 */  0xBC, 0x70, 0x83, 0x10, 0xF9, 0x7F, 0x75, 0x81,  // .p....u.
                /* 0F68 */  0x38, 0xD0, 0x17, 0x37, 0x08, 0x89, 0xF8, 0x24,  // 8..7...$
                /* 0F70 */  0xD2, 0x70, 0xC8, 0x13, 0x29, 0x08, 0x91, 0xF4,  // .p..)...
                /* 0F78 */  0x3D, 0x3A, 0x60, 0xF6, 0x16, 0x17, 0x88, 0x65,  // =:`....e
                /* 0F80 */  0x7F, 0x87, 0x04, 0xE2, 0xD0, 0xCF, 0x8E, 0xC3,  // ........
                /* 0F88 */  0x21, 0x22, 0xEC, 0x1D, 0x07, 0x28, 0x08, 0xD5,  // !"...(..
                /* 0F90 */  0xEE, 0x6F, 0x80, 0x14, 0x44, 0x40, 0x56, 0xF1,  // .o..D@V.
                /* 0F98 */  0xA2, 0x13, 0x90, 0x25, 0x81, 0x08, 0xC8, 0x61,  // ...%...a
                /* 0FA0 */  0x80, 0x68, 0x32, 0x20, 0xAA, 0xEE, 0x33, 0x11,  // .h2 ..3.
                /* 0FA8 */  0x88, 0x48, 0x05, 0xD1, 0xA0, 0x09, 0x10, 0x4D,  // .H.....M
                /* 0FB0 */  0x0C, 0x44, 0xD3, 0x29, 0x04, 0x62, 0x59, 0x41,  // .D.).bYA
                /* 0FB8 */  0x04, 0x64, 0xD5, 0xDF, 0x29, 0x0D, 0xC7, 0xDA,  // .d..)...
                /* 0FC0 */  0x35, 0x02, 0xB1, 0xE4, 0x20, 0x34, 0xF2, 0xD3,  // 5... 4..
                /* 0FC8 */  0x43, 0xA0, 0xCE, 0x0F, 0x22, 0x20, 0x07, 0x7E,  // C..." .~
                /* 0FD0 */  0xA5, 0x09, 0xC8, 0xF1, 0x41, 0x34, 0x78, 0xA2,  // ....A4x.
                /* 0FD8 */  0x12, 0x88, 0x45, 0x01, 0xD1, 0x30, 0x89, 0x4B,  // ..E..0.K
                /* 0FE0 */  0x20, 0x26, 0x10, 0x44, 0x40, 0x8E, 0xF7, 0xD8,  //  &.D@...
                /* 0FE8 */  0x38, 0x0C, 0x12, 0xEA, 0x19, 0x12, 0x90, 0xF9,  // 8.......
                /* 0FF0 */  0x3C, 0x50, 0x50, 0xA3, 0xA0, 0x4C, 0x1B, 0x88,  // <PP..L..
                /* 0FF8 */  0x80, 0x2C, 0xEF, 0xE9, 0x11, 0x88, 0x88, 0x05,  // .,......
                /* 1000 */  0x11, 0x90, 0xC3, 0xFD, 0x3D, 0x04, 0xEE, 0xC8,  // ....=...
                /* 1008 */  0x3F, 0x90, 0x40, 0x44, 0xB0, 0x56, 0x88, 0xFF,  // ?.@D.V..
                /* 1010 */  0xFF, 0x43, 0x00, 0x79, 0xA4, 0x04, 0x21, 0xFF,  // .C.y..!.
                /* 1018 */  0x7F                                             // .
            })
        }

        Device (WMI6)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Name (_WDG, Buffer (0x78)
            {
                /* 0000 */  0x9F, 0x1C, 0x86, 0x26, 0xE9, 0x47, 0xC4, 0x44,  // ...&.G.D
                /* 0008 */  0xBD, 0x8B, 0xDF, 0xE7, 0xFA, 0x26, 0x10, 0xFE,  // .....&..
                /* 0010 */  0x44, 0x30, 0x01, 0x06, 0x0A, 0x18, 0xA3, 0x9A,  // D0......
                /* 0018 */  0x50, 0x97, 0xF7, 0x41, 0xB9, 0xF7, 0xD5, 0xD3,  // P..A....
                /* 0020 */  0xB1, 0xBA, 0xC3, 0xCE, 0x44, 0x31, 0x01, 0x06,  // ....D1..
                /* 0028 */  0xA7, 0x39, 0xBC, 0xB2, 0xDD, 0x78, 0x71, 0x4D,  // .9...xqM
                /* 0030 */  0xB0, 0x59, 0xA5, 0x10, 0xDE, 0xC4, 0x48, 0x90,  // .Y....H.
                /* 0038 */  0x44, 0x32, 0x01, 0x06, 0x0D, 0x59, 0xE8, 0x0D,  // D2...Y..
                /* 0040 */  0x10, 0x55, 0x44, 0x40, 0x96, 0x21, 0x77, 0xC2,  // .UD@.!w.
                /* 0048 */  0x27, 0xF5, 0xA7, 0x0D, 0x44, 0x33, 0x01, 0x06,  // '...D3..
                /* 0050 */  0xED, 0x19, 0x91, 0xC5, 0x0D, 0x1C, 0x06, 0x48,  // .......H
                /* 0058 */  0xA8, 0xE9, 0x59, 0xAA, 0x31, 0x81, 0x76, 0xC4,  // ..Y.1.v.
                /* 0060 */  0x44, 0x34, 0x01, 0x06, 0x21, 0x12, 0x90, 0x05,  // D4..!...
                /* 0068 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0070 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x46, 0x01, 0x00   // ..).BF..
            })
            Method (WMD0, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = CARC (Arg2)
                If ((Local0 == Zero))
                {
                    Local0 = 0x02
                    Local0 = WMIS (0x12, Zero)
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (^^WMI1.RETN [Local0]))
            }

            Method (WMD1, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = CARC (Arg2)
                If ((Local0 == Zero))
                {
                    Local0 = 0x02
                    Local0 = WMIS (0x12, One)
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (^^WMI1.RETN [Local0]))
            }

            Method (WMD2, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = CARC (Arg2)
                If ((Local0 == Zero))
                {
                    Local0 = 0x02
                    Local0 = WMIS (0x12, 0x02)
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (^^WMI1.RETN [Local0]))
            }

            Method (WMD3, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = CARC (Arg2)
                If ((Local0 == Zero))
                {
                    Local0 = 0x02
                    Local0 = WMIS (0x12, 0x03)
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (^^WMI1.RETN [Local0]))
            }

            Method (WMD4, 3, NotSerialized)
            {
                Name (ITEM, Package (0x03)
                {
                    Package (0x02)
                    {
                        Zero, 
                        "Sha1"
                    }, 

                    Package (0x02)
                    {
                        One, 
                        "Sha256"
                    }, 

                    Package (0x02)
                    {
                        0x02, 
                        "Md5"
                    }
                })
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = CARC (Arg2)
                If ((Local0 == Zero))
                {
                    Local1 = ^^WMI1.GITM (CBFF, ITEM)
                    If ((Local1 == Ones))
                    {
                        Local0 = 0x02
                    }
                    Else
                    {
                        CBFF = Zero
                        Local0 = WMIS (0x12, 0x04)
                        If ((Local0 == Zero))
                        {
                            If ((Local1 == Zero))
                            {
                                Local2 = GETS (CBFF, Zero, 0x14)
                            }
                            ElseIf ((Local1 == One))
                            {
                                Local2 = GETS (CBFF, 0x14, 0x20)
                            }
                            ElseIf ((Local1 == 0x02))
                            {
                                Local2 = GETS (CBFF, 0x34, 0x10)
                            }
                        }
                    }
                }

                If ((Local0 == Zero))
                {
                    Release (^^WMI1.MWMI)
                    Return (Local2)
                }
                Else
                {
                    Release (^^WMI1.MWMI)
                    Return (DerefOf (^^WMI1.RETN [Local0]))
                }
            }

            Method (CARC, 1, NotSerialized)
            {
                CBFF = Zero
                Local0 = SizeOf (Arg0)
                If ((Local0 == Zero))
                {
                    Return (0x02)
                }

                If ((ObjectType (Arg0) != 0x02))
                {
                    Return (0x02)
                }

                If ((Local0 >= 0x1000))
                {
                    Return (0x02)
                }

                CBFF = Arg0
                Return (Zero)
            }

            Method (GETS, 3, NotSerialized)
            {
                Local0 = Arg1
                Local1 = GETB (Arg0, Local0)
                Local3 = GETC (Local1)
                Local4 = (Local0 + Arg2)
                Local0++
                While ((Local0 < Local4))
                {
                    Local1 = GETB (Arg0, Local0)
                    Local2 = GETC (Local1)
                    Concatenate (Local3, Local2, Local3)
                    Local0++
                }

                Return (Local3)
            }

            Method (GETB, 2, NotSerialized)
            {
                CreateByteField (Arg0, Arg1, TMPB)
                Return (TMPB) /* \_SB_.WMI6.GETB.TMPB */
            }

            Method (GETC, 1, NotSerialized)
            {
                Name (RETB, Buffer (0x08)
                {
                     0x00                                             // .
                })
                CreateWordField (RETB, Zero, RTB0)
                CreateWordField (RETB, One, RTB1)
                Name (ASCI, Package (0x10)
                {
                    "0", 
                    "1", 
                    "2", 
                    "3", 
                    "4", 
                    "5", 
                    "6", 
                    "7", 
                    "8", 
                    "9", 
                    "A", 
                    "B", 
                    "C", 
                    "D", 
                    "E", 
                    "F"
                })
                Name (TMPW, Zero)
                TMPW = Arg0
                RTB0 = DerefOf (ASCI [((TMPW >> 0x04) & 0x0F)]
                    )
                RTB1 = DerefOf (ASCI [(TMPW & 0x0F)])
                Return (ToString (RETB, Ones))
            }

            Name (WQBF, Buffer (0x05D7)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xC7, 0x05, 0x00, 0x00, 0x1A, 0x25, 0x00, 0x00,  // .....%..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0xDB, 0x91, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0D, 0x10, 0x8A, 0x0F, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x60, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .P`...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x18, 0x88, 0x14, 0x40, 0x48, 0x30, 0x84,  // 1...@H0.
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0x0A, 0x90, 0x29, 0xC0, 0xA0,  // .....)..
                /* 0060 */  0x00, 0xA7, 0x08, 0x22, 0x88, 0xD2, 0xB2, 0x00,  // ..."....
                /* 0068 */  0xDD, 0x02, 0x7C, 0x0B, 0xD0, 0x0E, 0x21, 0xB4,  // ..|...!.
                /* 0070 */  0x0A, 0x05, 0x98, 0x14, 0xE0, 0x13, 0x4C, 0x88,  // ......L.
                /* 0078 */  0xB1, 0xCE, 0xE2, 0x24, 0x9A, 0x16, 0xA0, 0x19,  // ...$....
                /* 0080 */  0x42, 0xE3, 0x38, 0x90, 0x30, 0x91, 0x5A, 0x14,  // B.8.0.Z.
                /* 0088 */  0x20, 0x1B, 0x43, 0xB6, 0x91, 0xC9, 0x5C, 0x2C,  //  .C...\,
                /* 0090 */  0x72, 0x20, 0x28, 0x31, 0x03, 0x41, 0xE9, 0x9C,  // r (1.A..
                /* 0098 */  0x87, 0x6C, 0xE2, 0x6A, 0x08, 0x85, 0xA2, 0x68,  // .l.j...h
                /* 00A0 */  0x0C, 0x51, 0x12, 0x9C, 0xC3, 0x81, 0x44, 0x88,  // .Q....D.
                /* 00A8 */  0x5D, 0xAE, 0x00, 0xC9, 0x03, 0xD0, 0x2C, 0x4E,  // ].....,N
                /* 00B0 */  0xA2, 0xF5, 0x39, 0x68, 0x74, 0x6C, 0x04, 0x3C,  // ..9htl.<
                /* 00B8 */  0xE9, 0x82, 0x4D, 0xA0, 0x30, 0x6B, 0x55, 0x4C,  // ..M.0kUL
                /* 00C0 */  0x07, 0x30, 0x18, 0x0F, 0x20, 0x92, 0x33, 0x5E,  // .0.. .3^
                /* 00C8 */  0x14, 0xB0, 0xBD, 0x4E, 0x44, 0x63, 0x3B, 0x58,  // ...NDc;X
                /* 00D0 */  0x26, 0x09, 0x0E, 0x35, 0x54, 0x4B, 0x14, 0x60,  // &..5TK.`
                /* 00D8 */  0x7E, 0x62, 0x9A, 0xC8, 0xA9, 0x1D, 0x9F, 0x21,  // ~b.....!
                /* 00E0 */  0x99, 0xB4, 0xA1, 0xA0, 0xC6, 0xEF, 0x69, 0x9D,  // ......i.
                /* 00E8 */  0x94, 0x67, 0x1B, 0xF1, 0xA0, 0x0C, 0x93, 0xC0,  // .g......
                /* 00F0 */  0xA3, 0x60, 0x68, 0x9C, 0xA0, 0x2C, 0x08, 0xED,  // .`h..,..
                /* 00F8 */  0x88, 0x0E, 0x94, 0x00, 0x9E, 0x84, 0xE7, 0x58,  // .......X
                /* 0100 */  0xBC, 0x00, 0xE1, 0x23, 0x26, 0xE7, 0x81, 0x18,  // ...#&...
                /* 0108 */  0x09, 0x7C, 0x2E, 0xB0, 0xD4, 0x31, 0xA3, 0x47,  // .|...1.G
                /* 0110 */  0x14, 0x2E, 0xE0, 0xF9, 0x1C, 0x43, 0xE4, 0xB8,  // .....C..
                /* 0118 */  0xAF, 0x00, 0x1E, 0x45, 0xE4, 0x04, 0x47, 0x1D,  // ...E..G.
                /* 0120 */  0x2C, 0x4E, 0x41, 0x57, 0x01, 0xF2, 0xFF, 0xBF,  // ,NAW....
                /* 0128 */  0x0A, 0x18, 0xE5, 0x59, 0x00, 0x16, 0x81, 0x45,  // ...Y...E
                /* 0130 */  0x8F, 0x02, 0x25, 0x03, 0x42, 0x1E, 0x05, 0x58,  // ..%.B..X
                /* 0138 */  0xC5, 0xD6, 0x34, 0x12, 0x58, 0x99, 0x00, 0x6D,  // ..4.X..m
                /* 0140 */  0x02, 0xC4, 0x41, 0xC8, 0xD8, 0x00, 0x64, 0x4E,  // ..A...dN
                /* 0148 */  0x80, 0x46, 0x01, 0xB6, 0x26, 0x2A, 0x6F, 0xE3,  // .F..&*o.
                /* 0150 */  0x12, 0x4C, 0x14, 0x23, 0xC4, 0x0A, 0x11, 0xE5,  // .L.#....
                /* 0158 */  0x4C, 0xE2, 0xC6, 0x8C, 0x11, 0x25, 0x48, 0xC8,  // L....%H.
                /* 0160 */  0x78, 0x11, 0x63, 0xBC, 0x14, 0x84, 0x37, 0xF8,  // x.c...7.
                /* 0168 */  0x5B, 0x44, 0x24, 0x13, 0x78, 0xDC, 0xB8, 0x03,  // [D$.x...
                /* 0170 */  0x80, 0x4F, 0x0D, 0xC7, 0x76, 0x48, 0xBE, 0x2B,  // .O..vH.+
                /* 0178 */  0x98, 0xC0, 0xB3, 0x3E, 0xB4, 0xC7, 0x83, 0xC0,  // ...>....
                /* 0180 */  0x87, 0x1B, 0x35, 0xC6, 0x89, 0x84, 0x26, 0x0F,  // ..5...&.
                /* 0188 */  0x09, 0x59, 0x00, 0x51, 0x24, 0x78, 0xD4, 0x81,  // .Y.Q$x..
                /* 0190 */  0xC1, 0x47, 0x03, 0x8F, 0xEC, 0xB8, 0x3D, 0xC3,  // .G....=.
                /* 0198 */  0x13, 0x08, 0x72, 0x08, 0x47, 0xF0, 0xD0, 0xF0,  // ..r.G...
                /* 01A0 */  0x4C, 0xE0, 0x31, 0xB0, 0xCB, 0x82, 0x4F, 0x01,  // L.1...O.
                /* 01A8 */  0x3E, 0x24, 0xE0, 0x5D, 0x03, 0xEA, 0x76, 0xF0,  // >$.]..v.
                /* 01B0 */  0x6C, 0xC0, 0x46, 0x1D, 0x0E, 0x33, 0x5C, 0xCF,  // l.F..3\.
                /* 01B8 */  0x3B, 0xDC, 0x09, 0x3C, 0x1A, 0x3C, 0x68, 0xF0,  // ;..<.<h.
                /* 01C0 */  0x43, 0x87, 0x07, 0x87, 0x1B, 0xEB, 0xC9, 0x1C,  // C.......
                /* 01C8 */  0xD9, 0x0B, 0x41, 0xB3, 0xE7, 0x03, 0x4D, 0xD2,  // ..A...M.
                /* 01D0 */  0xA7, 0x0E, 0x76, 0x06, 0x38, 0x9F, 0x9E, 0x21,  // ..v.8..!
                /* 01D8 */  0x89, 0xFC, 0x41, 0xA0, 0x46, 0x66, 0x68, 0xCF,  // ..A.Ffh.
                /* 01E0 */  0xF8, 0xE5, 0xC3, 0x90, 0x8F, 0x0A, 0x87, 0xC5,  // ........
                /* 01E8 */  0xC4, 0x9E, 0x3E, 0xE8, 0x78, 0xC0, 0x7F, 0x29,  // ..>.x..)
                /* 01F0 */  0x79, 0xD4, 0xF0, 0xF4, 0x3D, 0x5F, 0x0F, 0x83,  // y...=_..
                /* 01F8 */  0x9D, 0x48, 0xE0, 0xFD, 0xFF, 0x4F, 0x24, 0xB0,  // .H...O$.
                /* 0200 */  0x2E, 0x0E, 0xEC, 0x74, 0xF0, 0xF2, 0xE0, 0x29,  // ...t...)
                /* 0208 */  0xBE, 0x37, 0xC0, 0x3B, 0x8F, 0x00, 0x0F, 0x90,  // .7.;....
                /* 0210 */  0x43, 0xC0, 0x9C, 0x0A, 0x3C, 0x04, 0x3E, 0x80,  // C...<.>.
                /* 0218 */  0x67, 0x89, 0x93, 0xB4, 0xD2, 0xA9, 0x21, 0x0F,  // g.....!.
                /* 0220 */  0x2F, 0x30, 0x66, 0x06, 0xF7, 0xF0, 0x82, 0x4F,  // /0f....O
                /* 0228 */  0xFE, 0x10, 0xD0, 0xD9, 0xC3, 0xA9, 0x41, 0x64,  // ......Ad
                /* 0230 */  0xE3, 0x29, 0xE0, 0x53, 0x0E, 0x55, 0x04, 0xA4,  // .).S.U..
                /* 0238 */  0xD9, 0x82, 0x85, 0x60, 0xFA, 0x05, 0x68, 0x04,  // ...`..h.
                /* 0240 */  0x3E, 0x1B, 0x38, 0x37, 0x89, 0x92, 0x8F, 0x8E,  // >.87....
                /* 0248 */  0xC2, 0x39, 0xEB, 0x99, 0x84, 0x82, 0x18, 0xD0,  // .9......
                /* 0250 */  0x41, 0xCE, 0x15, 0xE8, 0xE3, 0x8A, 0xCF, 0x24,  // A......$
                /* 0258 */  0xC7, 0xF0, 0xF0, 0xE3, 0x59, 0x79, 0x14, 0xBE,  // ....Yy..
                /* 0260 */  0xAE, 0xF8, 0x28, 0xE2, 0x53, 0x85, 0x8F, 0x00,  // ..(.S...
                /* 0268 */  0x3E, 0x2F, 0xF0, 0x2F, 0x8D, 0x2F, 0x10, 0x46,  // >/././.F
                /* 0270 */  0xB7, 0x9A, 0x23, 0x0B, 0x0A, 0xCC, 0x27, 0x12,  // ..#...'.
                /* 0278 */  0x4E, 0x50, 0xD7, 0x95, 0x02, 0x64, 0xFA, 0x70,  // NP...d.p
                /* 0280 */  0xD1, 0xFF, 0xFF, 0x33, 0x03, 0x1C, 0x20, 0x5F,  // ...3.. _
                /* 0288 */  0x0F, 0x7C, 0x1C, 0x78, 0x44, 0x60, 0x63, 0x78,  // .|.xD`cx
                /* 0290 */  0x22, 0x30, 0x9A, 0xD1, 0x79, 0xF8, 0xC9, 0xA2,  // "0..y...
                /* 0298 */  0xE2, 0x4E, 0x96, 0x82, 0x78, 0xB2, 0x8E, 0x32,  // .N..x..2
                /* 02A0 */  0x59, 0xF4, 0x4C, 0x7C, 0xC1, 0xF0, 0x8C, 0x5E,  // Y.L|...^
                /* 02A8 */  0x16, 0x82, 0x9C, 0xA3, 0x27, 0xEC, 0x0B, 0x09,  // ....'...
                /* 02B0 */  0xAC, 0xE3, 0x40, 0xC8, 0x37, 0x03, 0x4F, 0xC3,  // ..@.7.O.
                /* 02B8 */  0x70, 0x9E, 0x2C, 0x87, 0xF3, 0x64, 0xF9, 0x58,  // p.,..d.X
                /* 02C0 */  0x7C, 0x1F, 0x01, 0x9F, 0xC0, 0xD9, 0x82, 0x1C,  // |.......
                /* 02C8 */  0x1E, 0x13, 0x6D, 0x54, 0xF4, 0x56, 0xE4, 0xE1,  // ..mT.V..
                /* 02D0 */  0xF1, 0xCB, 0x81, 0xE7, 0xF3, 0x8C, 0x70, 0x94,  // ......p.
                /* 02D8 */  0xAF, 0x12, 0x38, 0x8C, 0x87, 0x13, 0x0F, 0xD1,  // ..8.....
                /* 02E0 */  0x17, 0x24, 0x58, 0x13, 0x39, 0x69, 0xDF, 0x16,  // .$X.9i..
                /* 02E8 */  0x4E, 0x36, 0x68, 0xFC, 0xB0, 0xBE, 0x20, 0x01,  // N6h... .
                /* 02F0 */  0xAF, 0xCC, 0x97, 0x2C, 0x1A, 0x67, 0x21, 0x0A,  // ...,.g!.
                /* 02F8 */  0xBB, 0x24, 0x0A, 0xE3, 0x4B, 0x16, 0xFB, 0xFF,  // .$..K...
                /* 0300 */  0x5F, 0xB2, 0x00, 0x3B, 0xD7, 0x1B, 0xDC, 0xA0,  // _..;....
                /* 0308 */  0xE1, 0x1E, 0x5D, 0xE2, 0x9C, 0xCC, 0xD1, 0xB2,  // ..].....
                /* 0310 */  0x59, 0x83, 0xE3, 0x96, 0x05, 0xF7, 0x1C, 0xF5,  // Y.......
                /* 0318 */  0xC0, 0x10, 0xA1, 0xB3, 0x7B, 0x95, 0x6E, 0x57,  // ....{.nW
                /* 0320 */  0x8F, 0x12, 0x51, 0x1E, 0xAF, 0x22, 0x3D, 0x5D,  // ..Q.."=]
                /* 0328 */  0xB5, 0x06, 0xA3, 0x5B, 0x96, 0xB1, 0x5E, 0xAE,  // ...[..^.
                /* 0330 */  0xE2, 0xBC, 0x65, 0xF9, 0xB2, 0x65, 0x14, 0x63,  // ..e..e.c
                /* 0338 */  0x87, 0x0B, 0x11, 0x38, 0x52, 0xB8, 0x10, 0x0F,  // ...8R...
                /* 0340 */  0x3B, 0x86, 0x79, 0xDA, 0x61, 0xB7, 0x2C, 0xB0,  // ;.y.a.,.
                /* 0348 */  0xCA, 0xBB, 0x65, 0x01, 0xD9, 0xFF, 0xFF, 0x2D,  // ..e....-
                /* 0350 */  0x0B, 0x30, 0x77, 0x8D, 0x04, 0xE3, 0xCD, 0x01,  // .0w.....
                /* 0358 */  0x77, 0x53, 0x02, 0xC3, 0x3D, 0x0B, 0x70, 0x96,  // wS..=.p.
                /* 0360 */  0xFE, 0x9E, 0x45, 0x6F, 0x5A, 0xBE, 0x67, 0xF1,  // ..EoZ.g.
                /* 0368 */  0xC3, 0x88, 0x35, 0x01, 0x69, 0xBE, 0xB0, 0xFE,  // ..5.i...
                /* 0370 */  0xFF, 0xF3, 0x85, 0x75, 0xD1, 0x02, 0x98, 0xFE,  // ...u....
                /* 0378 */  0xFF, 0xBF, 0x68, 0xE1, 0xC3, 0x5D, 0xB4, 0x80,  // ..h..]..
                /* 0380 */  0xDE, 0x25, 0x09, 0x78, 0x25, 0xBE, 0x69, 0xA1,  // .%.x%.i.
                /* 0388 */  0xA2, 0xDE, 0xB4, 0x00, 0xAD, 0xE3, 0x7D, 0xDF,  // ......}.
                /* 0390 */  0x61, 0x60, 0xCF, 0xC7, 0xC0, 0x60, 0x00, 0x2F,  // a`...`./
                /* 0398 */  0xC4, 0x21, 0xC2, 0xFF, 0xFF, 0x9F, 0xAD, 0x1E,  // .!......
                /* 03A0 */  0xB6, 0x7C, 0xC4, 0x32, 0xC4, 0xC3, 0x56, 0xB8,  // .|.2..V.
                /* 03A8 */  0x08, 0x6F, 0x5A, 0xC6, 0x88, 0xF3, 0x8E, 0xF5,  // .oZ.....
                /* 03B0 */  0xA6, 0xE5, 0x23, 0xC5, 0x7B, 0xD6, 0x43, 0xB2,  // ..#.{.C.
                /* 03B8 */  0x21, 0x83, 0x3C, 0x1C, 0x1B, 0xED, 0x08, 0x1F,  // !.<.....
                /* 03C0 */  0x93, 0x8D, 0x10, 0x37, 0xD8, 0x9B, 0x85, 0x6F,  // ...7...o
                /* 03C8 */  0x5A, 0x60, 0x15, 0x77, 0xD3, 0x02, 0x68, 0x32,  // Z`.w..h2
                /* 03D0 */  0xFC, 0x37, 0x2D, 0xF0, 0xDD, 0x1C, 0x30, 0x07,  // .7-...0.
                /* 03D8 */  0x64, 0x70, 0xFC, 0xFF, 0x2F, 0x5A, 0x80, 0xCB,  // dp../Z..
                /* 03E0 */  0xE9, 0x82, 0xE9, 0xA2, 0x05, 0x30, 0xE1, 0xFF,  // .....0..
                /* 03E8 */  0x7F, 0xD1, 0x02, 0x98, 0x77, 0x47, 0x02, 0x9F,  // ....wG..
                /* 03F0 */  0xBE, 0x2F, 0x96, 0x4F, 0xD4, 0x5E, 0x89, 0x24,  // ./.O.^.$
                /* 03F8 */  0x48, 0x80, 0xC1, 0x5C, 0xB4, 0xC0, 0xFE, 0xFF,  // H..\....
                /* 0400 */  0xBF, 0x68, 0x01, 0xCB, 0xB3, 0x83, 0x47, 0x0D,  // .h....G.
                /* 0408 */  0x96, 0x3B, 0xC0, 0xE3, 0x8E, 0x2F, 0x0B, 0x6F,  // .;.../.o
                /* 0410 */  0x6B, 0xEC, 0x86, 0xC2, 0x66, 0x0D, 0x0F, 0x2C,  // k...f..,
                /* 0418 */  0x46, 0xC0, 0x18, 0x47, 0x15, 0x28, 0x66, 0x84,  // F..G.(f.
                /* 0420 */  0xDE, 0x71, 0x84, 0xF9, 0x48, 0xE0, 0xEB, 0x16,  // .q..H...
                /* 0428 */  0xDC, 0x13, 0x16, 0xBB, 0x5F, 0x3D, 0x66, 0x19,  // ...._=f.
                /* 0430 */  0xC6, 0xE7, 0xAC, 0x28, 0xCF, 0x59, 0xEC, 0xBA,  // ...(.Y..
                /* 0438 */  0x65, 0x8C, 0xE7, 0x2C, 0x9F, 0x96, 0xAD, 0xED,  // e..,....
                /* 0440 */  0xE2, 0xA5, 0x13, 0x97, 0xAF, 0x5C, 0x11, 0x0E,  // .....\..
                /* 0448 */  0x28, 0x4C, 0x84, 0x20, 0x2F, 0xCB, 0x51, 0xDF,  // (L. /.Q.
                /* 0450 */  0xBD, 0x0C, 0xEE, 0xEB, 0x16, 0x78, 0x85, 0x5E,  // .....x.^
                /* 0458 */  0xB7, 0x00, 0x19, 0xFF, 0xFF, 0xEB, 0x16, 0x60,  // .......`
                /* 0460 */  0x66, 0xB0, 0xBE, 0x6E, 0x81, 0xEF, 0xFE, 0x80,  // f..n....
                /* 0468 */  0xB9, 0x30, 0xC1, 0x9E, 0x4D, 0xB8, 0xB7, 0x07,  // .0..M...
                /* 0470 */  0x18, 0x97, 0x2E, 0xC0, 0x9A, 0xA6, 0x57, 0x83,  // ......W.
                /* 0478 */  0x4E, 0x22, 0xD6, 0x03, 0xA2, 0x4B, 0x17, 0x3F,  // N"...K.?
                /* 0480 */  0xFB, 0x58, 0xDD, 0xA5, 0x8B, 0x4C, 0x1A, 0xFE,  // .X...L..
                /* 0488 */  0xFF, 0x7F, 0xD2, 0xB0, 0x6F, 0x5E, 0x00, 0xC3,  // ....o^..
                /* 0490 */  0xFF, 0xFF, 0x37, 0x2F, 0x78, 0x41, 0x6F, 0x5E,  // ..7/xAo^
                /* 0498 */  0x40, 0xEF, 0xD2, 0x04, 0xBC, 0x8E, 0x18, 0xBE,  // @.......
                /* 04A0 */  0x34, 0xC1, 0xD1, 0x70, 0xFF, 0xA2, 0x91, 0xD6,  // 4..p....
                /* 04A8 */  0xA3, 0xD0, 0x2B, 0xA3, 0x30, 0xBE, 0x7F, 0x01,  // ..+.0...
                /* 04B0 */  0x8E, 0x04, 0x8F, 0x1D, 0x34, 0x37, 0x38, 0xF8,  // ....478.
                /* 04B8 */  0xF3, 0xF6, 0x1D, 0xE0, 0x71, 0xE2, 0x54, 0x9E,  // ....q.T.
                /* 04C0 */  0x85, 0x82, 0xBF, 0x3D, 0xB0, 0xFF, 0xFF, 0x89,  // ...=....
                /* 04C8 */  0xC2, 0x77, 0x2F, 0xB8, 0x53, 0x78, 0xF4, 0xF2,  // .w/.Sx..
                /* 04D0 */  0x91, 0x2B, 0x42, 0x8C, 0xF3, 0x7A, 0xF7, 0x32,  // .+B..z.2
                /* 04D8 */  0x4A, 0xA8, 0xC7, 0x2F, 0x76, 0x62, 0x36, 0xCA,  // J../vb6.
                /* 04E0 */  0xA3, 0xD7, 0x7B, 0xB3, 0x51, 0xE2, 0x3D, 0x3A,  // ..{.Q.=:
                /* 04E8 */  0x1B, 0xD7, 0x38, 0x11, 0x1E, 0xA3, 0x83, 0x86,  // ..8.....
                /* 04F0 */  0x0A, 0xF1, 0xEC, 0x15, 0xF0, 0xE1, 0xD9, 0x77,  // .......w
                /* 04F8 */  0x2F, 0xF0, 0x4A, 0xBC, 0x7B, 0x01, 0x34, 0x39,  // /.J.{.49
                /* 0500 */  0x21, 0xE0, 0xEE, 0x5E, 0x60, 0x39, 0x83, 0xB0,  // !..^`9..
                /* 0508 */  0xFF, 0xFF, 0xA1, 0x09, 0xE6, 0xD5, 0x01, 0xCE,  // ........
                /* 0510 */  0xC5, 0x0B, 0xB0, 0xA6, 0xE2, 0xE2, 0x45, 0x15,  // ......E.
                /* 0518 */  0x5C, 0xBC, 0x50, 0x67, 0x0A, 0xEB, 0x7A, 0x12,  // \.Pg..z.
                /* 0520 */  0x68, 0xC6, 0xE0, 0xBC, 0x75, 0x01, 0x2E, 0xFF,  // h...u...
                /* 0528 */  0xFF, 0xB7, 0x2E, 0x80, 0x2D, 0x01, 0x6F, 0x5D,  // ....-.o]
                /* 0530 */  0x40, 0xEF, 0xAA, 0x04, 0xFC, 0x14, 0xDA, 0xF4,  // @.......
                /* 0538 */  0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35, 0xCA,  // ...U.25.
                /* 0540 */  0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6, 0x1C,  // 4...Rc..
                /* 0548 */  0x09, 0xF8, 0xFF, 0x5F, 0x52, 0x74, 0xC7, 0xA0,  // ..._Rt..
                /* 0550 */  0xE2, 0x56, 0xA6, 0xA1, 0x39, 0x1A, 0x08, 0x0D,  // .V..9...
                /* 0558 */  0xF5, 0x1B, 0x92, 0x11, 0x10, 0x25, 0x04, 0x11,  // .....%..
                /* 0560 */  0x90, 0xD3, 0xFC, 0x26, 0x04, 0xE4, 0x6C, 0x20,  // ...&..l 
                /* 0568 */  0x02, 0xB2, 0x9A, 0xA5, 0x09, 0xDC, 0x3A, 0x54,  // ......:T
                /* 0570 */  0x00, 0xB1, 0x14, 0x20, 0xFC, 0x8F, 0x23, 0x50,  // ... ..#P
                /* 0578 */  0x47, 0x02, 0x11, 0x90, 0xE5, 0xDB, 0x00, 0x62,  // G......b
                /* 0580 */  0x61, 0x40, 0x34, 0x64, 0xE2, 0x03, 0x9C, 0x45,  // a@4d...E
                /* 0588 */  0x7F, 0x12, 0x08, 0xC8, 0xC2, 0xE9, 0x04, 0x62,  // .......b
                /* 0590 */  0xD9, 0x4E, 0x40, 0x59, 0x06, 0x10, 0x01, 0x59,  // .N@Y...Y
                /* 0598 */  0xEF, 0xD7, 0x43, 0x40, 0x56, 0x0F, 0x22, 0x20,  // ..C@V." 
                /* 05A0 */  0x27, 0xB6, 0x02, 0xCE, 0x72, 0x7B, 0x01, 0x62,  // '...r{.b
                /* 05A8 */  0xAA, 0x17, 0x2E, 0x10, 0x27, 0xF9, 0x76, 0x08,  // ....'.v.
                /* 05B0 */  0xD4, 0xB1, 0x40, 0x04, 0xE4, 0x08, 0x6E, 0x80,  // ..@...n.
                /* 05B8 */  0x58, 0x20, 0x10, 0x01, 0x59, 0x90, 0x1D, 0x70,  // X ..Y..p
                /* 05C0 */  0x26, 0xC7, 0x0F, 0x10, 0x0B, 0x03, 0x42, 0x43,  // &.....BC
                /* 05C8 */  0x19, 0x1A, 0x28, 0x05, 0xD1, 0x40, 0x89, 0xA2,  // ..(..@..
                /* 05D0 */  0x81, 0x52, 0x10, 0x01, 0xF9, 0xFF, 0x0F         // .R.....
            })
        }

        Device (WMI7)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x24, 0xD8, 0x06, 0x0F, 0x18, 0xF9, 0x8A, 0x43,  // $......C
                /* 0008 */  0xA6, 0x70, 0x84, 0x35, 0x1E, 0x08, 0xDC, 0xC6,  // .p.5....
                /* 0010 */  0x43, 0x30, 0x01, 0x05, 0x21, 0x12, 0x90, 0x05,  // C0..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x43, 0x31, 0x01, 0x00   // ..).C1..
            })
            Name (VSEL, Package (0x02)
            {
                "Disable", 
                "Enable"
            })
            Method (WQC0, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                Local0 = DerefOf (VSEL [SDBM])
                Release (^^WMI1.MWMI)
                Return (Local0)
            }

            Name (WQC1, Buffer (0x027E)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x6E, 0x02, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00,  // n.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xD8, 0x82, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x05, 0x10, 0x0A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x4C, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PL...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0xCE, 0x18, 0xA8, 0x4C, 0x08, 0x89, 0x00,  // 1...L...
                /* 0050 */  0xA6, 0x42, 0xE0, 0x08, 0x41, 0xBF, 0x02, 0x10,  // .B..A...
                /* 0058 */  0x3A, 0x44, 0x93, 0x41, 0x01, 0x4E, 0x11, 0x04,  // :D.A.N..
                /* 0060 */  0x69, 0xCB, 0x02, 0x74, 0x0B, 0xF0, 0x2D, 0x40,  // i..t..-@
                /* 0068 */  0x3B, 0x84, 0xD0, 0x22, 0x95, 0x28, 0x40, 0xA1,  // ;..".(@.
                /* 0070 */  0x00, 0x9B, 0x02, 0x2C, 0x0A, 0x90, 0x0D, 0x26,  // ...,...&
                /* 0078 */  0xDB, 0x70, 0x64, 0x18, 0x4C, 0xE4, 0x18, 0x50,  // .pd.L..P
                /* 0080 */  0x62, 0xC6, 0x80, 0xD2, 0x39, 0x05, 0x01, 0x1B,  // b...9...
                /* 0088 */  0xBD, 0x50, 0x14, 0x4D, 0x23, 0x4A, 0x82, 0x83,  // .P.M#J..
                /* 0090 */  0x3A, 0x86, 0x08, 0xC1, 0xCB, 0x15, 0x20, 0x79,  // :..... y
                /* 0098 */  0x02, 0xD2, 0x3C, 0x2F, 0x59, 0x1F, 0x84, 0x86,  // ..</Y...
                /* 00A0 */  0xC0, 0x46, 0xC0, 0x23, 0x4B, 0x00, 0x61, 0xA1,  // .F.#K.a.
                /* 00A8 */  0x96, 0xA9, 0x90, 0x30, 0x28, 0x0F, 0x20, 0x92,  // ...0(. .
                /* 00B0 */  0x33, 0x54, 0x14, 0xB0, 0xBD, 0x4E, 0x44, 0x26,  // 3T...ND&
                /* 00B8 */  0xC7, 0x49, 0x25, 0xC1, 0xA1, 0x46, 0xE9, 0xC1,  // .I%..F..
                /* 00C0 */  0x35, 0x3F, 0x32, 0x4D, 0xE4, 0xD8, 0x9A, 0x1E,  // 5?2M....
                /* 00C8 */  0xB1, 0x20, 0x99, 0xB4, 0xA1, 0xA0, 0x86, 0xEE,  // . ......
                /* 00D0 */  0x69, 0x9D, 0x94, 0x27, 0x1A, 0xF1, 0xA0, 0x0C,  // i..'....
                /* 00D8 */  0x93, 0xC0, 0xA3, 0x60, 0x68, 0x9C, 0xA0, 0x2C,  // ...`h..,
                /* 00E0 */  0x08, 0x39, 0x18, 0x28, 0x0A, 0xF0, 0x24, 0x3C,  // .9.(..$<
                /* 00E8 */  0xC7, 0xE2, 0x05, 0x08, 0x9F, 0x31, 0x39, 0x0A,  // .....19.
                /* 00F0 */  0xC4, 0x48, 0xE0, 0x23, 0x81, 0x05, 0x8F, 0x19,  // .H.#....
                /* 00F8 */  0x3D, 0xA2, 0x70, 0x01, 0xCF, 0xE7, 0x18, 0x22,  // =.p...."
                /* 0100 */  0xC7, 0x3D, 0xD4, 0x18, 0x47, 0x11, 0x39, 0xC1,  // .=..G.9.
                /* 0108 */  0x51, 0x1F, 0xD7, 0x83, 0x81, 0xAF, 0x00, 0x16,  // Q.......
                /* 0110 */  0x84, 0x49, 0xF0, 0x0E, 0x39, 0x5C, 0xAC, 0xD7,  // .I..9\..
                /* 0118 */  0x00, 0xF6, 0xFF, 0x47, 0x8B, 0xF5, 0x2E, 0x70,  // ...G...p
                /* 0120 */  0xEC, 0x0C, 0xE5, 0xA0, 0x82, 0x1C, 0x98, 0x09,  // ........
                /* 0128 */  0x42, 0x1E, 0x08, 0x46, 0x06, 0x84, 0x3C, 0x0A,  // B..F..<.
                /* 0130 */  0xB0, 0x3A, 0x36, 0x0D, 0x20, 0x81, 0xDD, 0xDF,  // .:6. ...
                /* 0138 */  0x19, 0xA4, 0x11, 0x42, 0xDA, 0x80, 0x24, 0x4E,  // ...B..$N
                /* 0140 */  0x80, 0xB2, 0xB1, 0xCA, 0x16, 0x90, 0xCC, 0x09,  // ........
                /* 0148 */  0x30, 0x86, 0x23, 0x94, 0x38, 0x9D, 0x81, 0xE8,  // 0.#.8...
                /* 0150 */  0x48, 0x10, 0x25, 0x44, 0xC4, 0xDE, 0x40, 0x85,  // H.%D..@.
                /* 0158 */  0x12, 0x28, 0x96, 0xAD, 0x21, 0x6A, 0x8E, 0x81,  // .(..!j..
                /* 0160 */  0xE2, 0x04, 0x7F, 0x33, 0x88, 0x10, 0xAF, 0xFD,  // ...3....
                /* 0168 */  0x41, 0x90, 0xB1, 0xE3, 0x0E, 0x01, 0x3E, 0x34,  // A.....>4
                /* 0170 */  0x9C, 0xD1, 0x29, 0x3E, 0x04, 0x3C, 0x30, 0x98,  // ..)>.<0.
                /* 0178 */  0xC0, 0xB3, 0x3A, 0xC3, 0x47, 0x84, 0xE0, 0x87,  // ..:.G...
                /* 0180 */  0x1C, 0x35, 0xC6, 0xA1, 0x24, 0xB0, 0xA0, 0xA5,  // .5..$...
                /* 0188 */  0x4B, 0x03, 0x88, 0x22, 0xC1, 0xA3, 0x0E, 0x0D,  // K.."....
                /* 0190 */  0x3E, 0x1E, 0x78, 0x68, 0xC7, 0xEE, 0x41, 0x9E,  // >.xh..A.
                /* 0198 */  0x40, 0x90, 0x43, 0x38, 0x82, 0x07, 0x87, 0xE7,  // @.C8....
                /* 01A0 */  0x02, 0x8F, 0x81, 0x5D, 0x18, 0x7C, 0x12, 0xF0,  // ...].|..
                /* 01A8 */  0x41, 0x01, 0xEF, 0x1A, 0x50, 0xA3, 0x7E, 0x3E,  // A...P.~>
                /* 01B0 */  0x60, 0x43, 0x0E, 0x87, 0x19, 0xAF, 0x4F, 0x01,  // `C....O.
                /* 01B8 */  0xE1, 0x4E, 0xE0, 0xB0, 0x9F, 0x33, 0xF8, 0x99,  // .N...3..
                /* 01C0 */  0xC3, 0x83, 0xC3, 0x4D, 0xF1, 0x64, 0x8E, 0xAC,  // ...M.d..
                /* 01C8 */  0x54, 0x01, 0x66, 0xCF, 0x08, 0x3A, 0x4F, 0xF8,  // T.f..:O.
                /* 01D0 */  0xD0, 0xC1, 0x2E, 0x04, 0xE7, 0xD3, 0x33, 0x24,  // ......3$
                /* 01D8 */  0x91, 0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED, 0x71,  // .?.....q
                /* 01E0 */  0xBF, 0x7B, 0x18, 0xF2, 0x71, 0xE1, 0xB0, 0x98,  // .{..q...
                /* 01E8 */  0xD8, 0xC3, 0x07, 0x1D, 0x0F, 0xF8, 0xEF, 0x24,  // .......$
                /* 01F0 */  0xCF, 0x08, 0x9E, 0xBE, 0xE7, 0x6B, 0x82, 0xD1,  // .....k..
                /* 01F8 */  0x07, 0x8E, 0x1E, 0x88, 0xA1, 0x9F, 0x39, 0x0E,  // ......9.
                /* 0200 */  0xE3, 0x34, 0x8C, 0xF8, 0xFF, 0x3F, 0xA2, 0xE7,  // .4...?..
                /* 0208 */  0x80, 0x20, 0x31, 0x8E, 0xC9, 0x83, 0xE3, 0x01,  // . 1.....
                /* 0210 */  0x47, 0x4E, 0xCF, 0x2A, 0x3E, 0x54, 0xF0, 0x13,  // GN.*>T..
                /* 0218 */  0x86, 0x0F, 0x15, 0xEC, 0x7C, 0x70, 0x1A, 0xCF,  // ....|p..
                /* 0220 */  0x01, 0x1E, 0xCE, 0x59, 0xF9, 0x4C, 0x01, 0x1C,  // ...Y.L..
                /* 0228 */  0x0F, 0x03, 0xE0, 0x1B, 0x96, 0x4F, 0x33, 0xE0,  // .....O3.
                /* 0230 */  0x9B, 0x16, 0x66, 0x58, 0x70, 0x66, 0xC5, 0x47,  // ..fXpf.G
                /* 0238 */  0x85, 0x39, 0xD3, 0x00, 0x8F, 0xE3, 0x82, 0x87,  // .9......
                /* 0240 */  0xC0, 0x4F, 0x15, 0x1E, 0x02, 0x1F, 0xC0, 0xC3,  // .O......
                /* 0248 */  0xC8, 0x79, 0x5A, 0xE9, 0xEC, 0x90, 0x67, 0x1F,  // .yZ...g.
                /* 0250 */  0x30, 0x8D, 0x82, 0x2B, 0xB4, 0xE9, 0x53, 0xA3,  // 0..+..S.
                /* 0258 */  0x51, 0xAB, 0x06, 0x65, 0x6A, 0x94, 0x69, 0x50,  // Q..ej.iP
                /* 0260 */  0xAB, 0x4F, 0xA5, 0xC6, 0x8C, 0xFD, 0x74, 0x2C,  // .O....t,
                /* 0268 */  0xED, 0x75, 0xA0, 0xE3, 0x81, 0xA5, 0xBD, 0x13,  // .u......
                /* 0270 */  0xF4, 0xFF, 0x3F, 0x28, 0x38, 0x18, 0x08, 0x8D,  // ..?(8...
                /* 0278 */  0x44, 0x27, 0x10, 0xFF, 0xFF, 0x01               // D'....
            })
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB.PC00.SBUS)
    {
        Name (RID, Zero)
        Name (_S3D, 0x03)  // _S3D: S3 Device State
        OperationRegion (SMBP, PCI_Config, 0x50, 0x04)
        Field (SMBP, DWordAcc, NoLock, Preserve)
        {
                ,   5, 
            TCOB,   11, 
            Offset (0x04)
        }

        Name (TCBV, Zero)
        Method (TCBS, 0, NotSerialized)
        {
            If ((TCBV == Zero))
            {
                TCBV = (TCOB << 0x05)
            }

            Return (TCBV) /* \_SB_.PC00.SBUS.TCBV */
        }

        OperationRegion (TCBA, SystemIO, TCBS (), 0x10)
        Field (TCBA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x04), 
                ,   9, 
            CPSC,   1
        }
    }

    Scope (_SB.PC00.PEG0)
    {
        Name (RID, Zero)
    }

    Scope (_SB.PC00.GFX0)
    {
        Name (RID, Zero)
    }

    Scope (_SB.PC00.SAT0)
    {
        Name (RID, Zero)
    }

    Scope (_SB.PC00.LPCB)
    {
        Name (RID, Zero)
        Device (SIO)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0010,             // Range Minimum
                        0x0010,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                    IO (Decode16,
                        0x0090,             // Range Minimum
                        0x0090,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                    IO (Decode16,
                        0x0024,             // Range Minimum
                        0x0024,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x0028,             // Range Minimum
                        0x0028,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x002C,             // Range Minimum
                        0x002C,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x0030,             // Range Minimum
                        0x0030,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x0034,             // Range Minimum
                        0x0034,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x0038,             // Range Minimum
                        0x0038,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x003C,             // Range Minimum
                        0x003C,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x00A4,             // Range Minimum
                        0x00A4,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x00A8,             // Range Minimum
                        0x00A8,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x00AC,             // Range Minimum
                        0x00AC,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x00B0,             // Range Minimum
                        0x00B0,             // Range Maximum
                        0x01,               // Alignment
                        0x06,               // Length
                        )
                    IO (Decode16,
                        0x00B8,             // Range Minimum
                        0x00B8,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x00BC,             // Range Minimum
                        0x00BC,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IO (Decode16,
                        0x0050,             // Range Minimum
                        0x0050,             // Range Maximum
                        0x01,               // Alignment
                        0x04,               // Length
                        )
                    IO (Decode16,
                        0x0072,             // Range Minimum
                        0x0072,             // Range Maximum
                        0x01,               // Alignment
                        0x06,               // Length
                        )
                    IO (Decode16,
                        0x1800,             // Range Minimum
                        0x1800,             // Range Maximum
                        0x01,               // Alignment
                        0xA0,               // Length
                        )
                    IO (Decode16,
                        0x0800,             // Range Minimum
                        0x0800,             // Range Maximum
                        0x01,               // Alignment
                        0x80,               // Length
                        )
                    IO (Decode16,
                        0x0880,             // Range Minimum
                        0x0880,             // Range Maximum
                        0x01,               // Alignment
                        0x80,               // Length
                        )
                    IO (Decode16,
                        0x0900,             // Range Minimum
                        0x0900,             // Range Maximum
                        0x01,               // Alignment
                        0x80,               // Length
                        )
                    IO (Decode16,
                        0x0980,             // Range Minimum
                        0x0980,             // Range Maximum
                        0x01,               // Alignment
                        0x80,               // Length
                        )
                    IO (Decode16,
                        0x0A00,             // Range Minimum
                        0x0A00,             // Range Maximum
                        0x01,               // Alignment
                        0x80,               // Length
                        )
                    IO (Decode16,
                        0x0A80,             // Range Minimum
                        0x0A80,             // Range Maximum
                        0x01,               // Alignment
                        0x80,               // Length
                        )
                    IO (Decode16,
                        0x0B00,             // Range Minimum
                        0x0B00,             // Range Maximum
                        0x01,               // Alignment
                        0x80,               // Length
                        )
                    IO (Decode16,
                        0x0B80,             // Range Minimum
                        0x0B80,             // Range Maximum
                        0x01,               // Alignment
                        0x80,               // Length
                        )
                    IO (Decode16,
                        0x15E0,             // Range Minimum
                        0x15E0,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                    IO (Decode16,
                        0x1600,             // Range Minimum
                        0x1600,             // Range Maximum
                        0x01,               // Alignment
                        0x80,               // Length
                        )
                    IO (Decode16,
                        0x1640,             // Range Minimum
                        0x1640,             // Range Maximum
                        0x01,               // Alignment
                        0x20,               // Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xC0000000,         // Address Base
                        0x10000000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED10000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED18000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED19000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEB00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED20000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFED90000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        )
                })
                Return (BUF) /* \_SB_.PC00.LPCB.SIO_._CRS.BUF_ */
            }
        }

        OperationRegion (LPCS, PCI_Config, Zero, 0x0100)
        Field (LPCS, AnyAcc, NoLock, Preserve)
        {
            Offset (0x60), 
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            SERQ,   8, 
            Offset (0x68), 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x80), 
            XU1A,   3, 
                ,   1, 
            XU2A,   3, 
            Offset (0x81), 
            XPA,    2, 
                ,   2, 
            XFA,    1, 
            Offset (0x82), 
            XU1E,   1, 
            XU2E,   1, 
            XPE,    1, 
            XFE,    1, 
            Offset (0x84), 
            XG1E,   1, 
                ,   1, 
            XG1A,   14, 
            Offset (0x88), 
            XG2E,   1, 
                ,   1, 
            XG2A,   14, 
            Offset (0xA0), 
                ,   2, 
            CLKR,   1, 
                ,   7, 
            EXPE,   1, 
            Offset (0xA2), 
            Offset (0xAC), 
            Offset (0xAD), 
            Offset (0xAE), 
            XUSB,   1, 
            Offset (0xB8), 
            GR00,   2, 
                ,   10, 
            GR06,   2
        }

        OperationRegion (GDIO, SystemMemory, 0xFDAF04C0, 0x10)
        Field (GDIO, DWordAcc, NoLock, Preserve)
        {
                ,   30, 
            DOI0,   1, 
            Offset (0x04), 
                ,   30, 
            DOI1,   1, 
            Offset (0x08), 
                ,   30, 
            DOI2,   1, 
            Offset (0x0C), 
                ,   30, 
            DOI3,   1
        }

        OperationRegion (LPIO, SystemIO, 0x0800, 0x0400)
        Field (LPIO, DWordAcc, NoLock, Preserve)
        {
            Offset (0x180), 
                ,   3, 
            XHPD,   1, 
            Offset (0x1B0), 
                ,   31, 
            GLIS,   1, 
            Offset (0x308), 
            Offset (0x30C)
        }

        OperationRegion (PMIO, SystemIO, 0x1800, 0x0100)
        Field (PMIO, AnyAcc, NoLock, Preserve)
        {
            Offset (0x2A), 
                ,   6, 
            XHPE,   1, 
            Offset (0x42), 
                ,   1, 
            SWGE,   1, 
            Offset (0x64), 
                ,   9, 
            Offset (0x8C), 
            SCIS,   1, 
                ,   6
        }

        OperationRegion (IMGA, SystemIO, 0x15E0, 0x10)
        Field (IMGA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
            Offset (0x02), 
            Offset (0x03), 
            WAKR,   16, 
            Offset (0x0C), 
            GAIX,   8, 
            Offset (0x0E), 
            GADT,   8, 
            Offset (0x10)
        }

        IndexField (GAIX, GADT, ByteAcc, NoLock, Preserve)
        {
            Offset (0x60), 
            EPWG,   1, 
                ,   1, 
            CSON,   1, 
            DSCI,   1, 
            DSCS,   1, 
            DLAN,   1, 
            Offset (0xC2), 
            GAID,   8
        }
    }

    Scope (_SB.PC00.LPCB.EC)
    {
        Mutex (MCPU, 0x00)
        Method (_Q1F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (^HKEY.MHKK (One, 0x00020000))
            {
                If ((PKLI & 0x0C00))
                {
                    ^HKEY.MHKQ (0x1012)
                }
            }

            SCMS (0x0E)
            SCMS (0x20)
        }

        Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (^HKEY.MHKK (One, 0x40))
            {
                ^HKEY.MHKQ (0x1007)
            }
        }

        Method (_Q1C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (^HKEY.MHKK (One, 0x01000000))
            {
                ^HKEY.MHKQ (0x1019)
            }
        }

        Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (^HKEY.MHKK (One, 0x02000000))
            {
                ^HKEY.MHKQ (0x101A)
            }
        }

        Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (^HKEY.DHKC)
            {
                ^HKEY.MHKQ (0x1004)
            }
            Else
            {
                Notify (SLPB, 0x80) // Status Change
            }
        }

        Method (_Q64, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (^HKEY.MHKK (One, 0x10))
            {
                ^HKEY.MHKQ (0x1005)
            }
        }

        Method (_Q62, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (^HKEY.MHKK (0x03, 0x00010000))
            {
                ^HKEY.MHKQ (0x1311)
            }
        }

        Method (_Q6B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ADBG ("Fn + D")
            If (^HKEY.MHKK (0x03, 0x4000))
            {
                ^HKEY.TSSS ()
            }
        }

        Method (_Q65, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (^HKEY.MHKK (0x03, 0x00020000))
            {
                ^HKEY.MHKQ (0x1312)
            }
        }

        Method (_Q76, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (^HKEY.MHKK (0x03, 0x00040000))
            {
                ^HKEY.MHKQ (0x1313)
            }
        }

        Method (_Q78, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (^HKEY.MHKK (0x03, 0x00400000))
            {
                ^HKEY.MHKQ (0x1317)
            }
        }

        Method (_Q79, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (^HKEY.MHKK (0x03, 0x00800000))
            {
                ^HKEY.MHKQ (0x1318)
            }
        }

        Method (_Q7A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (^HKEY.MHKK (0x03, 0x01000000))
            {
                ^HKEY.MHKQ (0x1319)
            }
        }

        Method (_Q6C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ^HKEY.MHKQ (0x131A)
        }

        Method (_Q3C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((CQLS == One))
            {
                ^HKEY.DYTC (0x001F1001)
            }
            ElseIf ((CQLS == Zero))
            {
                ^HKEY.DYTC (0x000F1001)
            }
        }

        Method (_Q6D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (CondRefOf (\_SB.IETM.DPTE))
            {
                If ((^^^^IETM.DPTE == Zero))
                {
                    ^HKEY.DYTC (0x0012B001)
                }
            }
            Else
            {
                ^HKEY.DYTC (0x0012B001)
            }
        }

        Method (_Q6E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ^HKEY.DYTC (0x000FB001)
        }

        Method (_Q6F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (CondRefOf (\_SB.IETM.DPTE))
            {
                If ((^^^^IETM.DPTE == Zero))
                {
                    ^HKEY.DYTC (0x0013B001)
                }
            }
            Else
            {
                ^HKEY.DYTC (0x0013B001)
            }
        }

        Method (_Q26, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (VIGD)
            {
                If (WVIS)
                {
                    VBTD ()
                }

                BRNS ()
            }
            Else
            {
                SCMS (0x12)
            }

            ^HKEY.DYTC (0x000FA001)
            Sleep (0x01F4)
            Notify (AC, 0x80) // Status Change
            Notify (\_TZ.THM0, 0x80) // Thermal Status Change
            If (WXPF)
            {
                Acquire (MCPU, 0xFFFF)
            }

            PWRS = One
            If ((CFGD & One))
            {
                If ((OSPX || CPPX))
                {
                    PNTF (0x80)
                }
            }

            If (WXPF)
            {
                Sleep (0x64)
            }

            If (OSC4)
            {
                PNTF (0x81)
            }

            If (WXPF)
            {
                Release (MCPU)
            }

            ^HKEY.MHKQ (0x6040)
            ATMC ()
        }

        Method (_Q27, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (VIGD)
            {
                If (WVIS)
                {
                    VBTD ()
                }

                BRNS ()
            }
            Else
            {
                SCMS (0x12)
            }

            If ((^^^^LID._LID () == Zero))
            {
                ^HKEY.DYTC (0x001FA001)
            }

            Sleep (0x01F4)
            Notify (AC, 0x80) // Status Change
            Notify (\_TZ.THM0, 0x80) // Thermal Status Change
            If (WXPF)
            {
                Acquire (MCPU, 0xFFFF)
            }

            PWRS = Zero
            If ((CFGD & One))
            {
                If ((OSPX || CPPX))
                {
                    PNTF (0x80)
                }
            }

            If (WXPF)
            {
                Sleep (0x64)
            }

            If (OSC4)
            {
                PNTF (0x81)
            }

            If (WXPF)
            {
                Release (MCPU)
            }

            ^HKEY.MHKQ (0x6040)
            ATMC ()
        }

        Method (_Q2A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ADBG ("LIDO")
            VCMS (One, ^^^^LID._LID ())
            SCMS (0x21)
            ^HKEY.DYTC (0x000FA001)
            If ((ILNF == Zero))
            {
                If (IOST)
                {
                    If (!ISOC (Zero))
                    {
                        IOST = Zero
                        ^HKEY.MHKQ (0x60D0)
                    }
                }

                ^HKEY.MHKQ (0x5002)
                If ((PLUX == Zero))
                {
                    If (VIGD)
                    {
                        ^^^GFX0.VLOC (One)
                    }

                    Notify (LID, 0x80) // Status Change
                }
            }
        }

        Method (_Q2B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ADBG ("LIDC")
            SCMS (0x0D)
            VCMS (One, ^^^^LID._LID ())
            If ((^AC._PSR () == Zero))
            {
                ^HKEY.DYTC (0x001FA001)
            }

            If ((ILNF == Zero))
            {
                If ((IOEN && !IOST))
                {
                    If (!ISOC (One))
                    {
                        IOST = One
                        ^HKEY.MHKQ (0x60D0)
                    }
                }

                ^HKEY.MHKQ (0x5001)
                If ((PLUX == Zero))
                {
                    If (VIGD)
                    {
                        ^^^GFX0.VLOC (Zero)
                    }

                    Notify (LID, 0x80) // Status Change
                }
            }
        }

        Method (_Q3D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
        }

        Method (_Q48, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((CFGD & One))
            {
                If ((OSPX || CPPX))
                {
                    PNTF (0x80)
                }
                Else
                {
                    STEP (0x04)
                }

                CALM = One
            }
        }

        Method (_Q49, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((CFGD & One))
            {
                If ((OSPX || CPPX))
                {
                    PNTF (0x80)
                }
                Else
                {
                    STEP (0x05)
                }
            }
        }

        Method (_Q7F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Fatal (0x01, 0x80010000, 0x0002F161)
        }

        Method (_Q46, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ^HKEY.MHKQ (0x6012)
        }

        Method (_Q3B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((WLAC == 0x02)) {}
            ElseIf ((ELNK && (WLAC == One)))
            {
                DCWL = Zero
            }
            Else
            {
                DCWL = One
            }
        }

        Method (_Q4F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ADBG ("QUERY_METHOD_UCSI")
            If (CondRefOf (\_SB.UBTC.NTFY))
            {
                ^^^^UBTC.NTFY ()
            }
        }

        Method (_Q2F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            BFCC ()
        }

        ADBG ("Fn + RightShift")
        Method (_Q71, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ^HKEY.MHKQ (0x1316)
        }

        Method (_Q28, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (PWSE)
            {
                Notify (PWRB, 0x80) // Status Change
            }
        }

        Scope (\_SB.PC00.LPCB.EC)
        {
            Method (_Q6A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (HDMC)
                {
                    Noop
                }
                ElseIf (^HKEY.MHKK (One, 0x04000000))
                {
                    ^HKEY.MHKQ (0x101B)
                }
            }
        }

        Scope (HKEY)
        {
            Method (MMTG, 0, NotSerialized)
            {
                Local0 = 0x0101
                If (HDMC)
                {
                    Local0 |= 0x00010000
                }

                Return (Local0)
            }

            Method (MMTS, 1, NotSerialized)
            {
                If (HDMC)
                {
                    Noop
                }
                ElseIf ((Arg0 == 0x02))
                {
                    LED (0x0E, 0x80)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    LED (0x0E, 0xC0)
                }
                Else
                {
                    LED (0x0E, Zero)
                }
            }
        }

        Scope (\_SB.PC00.LPCB.EC)
        {
            Field (ECOR, ByteAcc, NoLock, Preserve)
            {
                Offset (0xA0), 
                VIDA,   16, 
                PIDA,   16, 
                VIDB,   16, 
                PIDB,   16
            }

            Method (_Q45, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Local0 = DKID ()
                If ((Local0 != Zero))
                {
                    ^HKEY.MHKQ (0x4010)
                }
                Else
                {
                    ^HKEY.MHKQ (0x4011)
                }
            }

            Method (DKID, 0, NotSerialized)
            {
                Acquire (BATM, 0xFFFF)
                Local0 = Zero
                HIID = 0x59
                Local1 = VIDA /* \_SB_.PC00.LPCB.EC__.VIDA */
                Local2 = PIDA /* \_SB_.PC00.LPCB.EC__.PIDA */
                If (((Local1 == Zero) && (Local2 == Zero)))
                {
                    Local1 = VIDB /* \_SB_.PC00.LPCB.EC__.VIDB */
                    Local2 = PIDB /* \_SB_.PC00.LPCB.EC__.PIDB */
                }

                If ((Local1 == 0x17EF))
                {
                    If ((Local2 == 0x306E))
                    {
                        Local0 = One
                    }

                    If ((Local2 == 0x306D))
                    {
                        Local0 = 0x02
                    }

                    If ((Local2 == 0x306C))
                    {
                        Local0 = 0x03
                    }
                }

                Release (BATM)
                Return (Local0)
            }
        }

        Scope (HKEY)
        {
            Method (GDKS, 0, NotSerialized)
            {
                Local0 = Zero
                Local1 = DKID ()
                If (Local1)
                {
                    Local0 |= One
                    Local1 <<= 0x08
                    Local0 |= Local1
                }

                Local0 |= 0x000A0000
                Return (Local0)
            }
        }

        Scope (\_SB.PC00.LPCB.EC)
        {
            Method (_Q3F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^HKEY.MHKQ (0x6000)
            }

            Method (_Q74, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^HKEY.MHKQ (0x6060)
            }
        }

        Scope (HKEY)
        {
        }

        Scope (\_SB.PC00.LPCB.EC)
        {
            Name (BRTW, Package (0x12)
            {
                0x64, 
                0x64, 
                0x05, 
                0x0A, 
                0x14, 
                0x19, 
                0x1E, 
                0x23, 
                0x28, 
                0x2D, 
                0x32, 
                0x37, 
                0x3C, 
                0x41, 
                0x46, 
                0x50, 
                0x5A, 
                0x64
            })
            Name (BRTB, Package (0x08)
            {
                Package (0x16)
                {
                    0x1E, 
                    0x04, 
                    0x04, 
                    0x07, 
                    0x0B, 
                    0x11, 
                    0x17, 
                    0x1E, 
                    0x25, 
                    0x2C, 
                    0x37, 
                    0x42, 
                    0x4E, 
                    0x5C, 
                    0x6E, 
                    0x8A, 
                    0xB9, 
                    0xFF, 
                    0x0587, 
                    0x0587, 
                    0x04, 
                    0x04
                }, 

                Package (0x16)
                {
                    0x28, 
                    0x03, 
                    0x03, 
                    0x05, 
                    0x08, 
                    0x0A, 
                    0x0D, 
                    0x0F, 
                    0x12, 
                    0x19, 
                    0x22, 
                    0x2E, 
                    0x3E, 
                    0x54, 
                    0x6E, 
                    0x93, 
                    0xC1, 
                    0xFF, 
                    0x0587, 
                    0x0587, 
                    0x03, 
                    0x03
                }, 

                Package (0x16)
                {
                    0x31, 
                    0x03, 
                    0x03, 
                    0x05, 
                    0x08, 
                    0x0A, 
                    0x0D, 
                    0x0F, 
                    0x12, 
                    0x19, 
                    0x22, 
                    0x2E, 
                    0x3E, 
                    0x54, 
                    0x6E, 
                    0x93, 
                    0xC1, 
                    0xFF, 
                    0x0587, 
                    0x0587, 
                    0x03, 
                    0x03
                }, 

                Package (0x16)
                {
                    0x32, 
                    0x03, 
                    0x03, 
                    0x05, 
                    0x08, 
                    0x0A, 
                    0x0D, 
                    0x0F, 
                    0x12, 
                    0x19, 
                    0x22, 
                    0x2E, 
                    0x3E, 
                    0x54, 
                    0x6E, 
                    0x93, 
                    0xC1, 
                    0xFF, 
                    0x0587, 
                    0x0587, 
                    0x03, 
                    0x03
                }, 

                Package (0x16)
                {
                    0x1E, 
                    0x03, 
                    0x03, 
                    0x05, 
                    0x08, 
                    0x0A, 
                    0x0D, 
                    0x0F, 
                    0x12, 
                    0x19, 
                    0x22, 
                    0x2E, 
                    0x3E, 
                    0x54, 
                    0x6E, 
                    0x93, 
                    0xC1, 
                    0xFF, 
                    0x0587, 
                    0x0587, 
                    0x03, 
                    0x03
                }, 

                Package (0x16)
                {
                    0x28, 
                    0x03, 
                    0x03, 
                    0x05, 
                    0x08, 
                    0x0A, 
                    0x0D, 
                    0x0F, 
                    0x12, 
                    0x19, 
                    0x22, 
                    0x2E, 
                    0x3E, 
                    0x54, 
                    0x6E, 
                    0x93, 
                    0xC1, 
                    0xFF, 
                    0x0587, 
                    0x0587, 
                    0x03, 
                    0x03
                }, 

                Package (0x16)
                {
                    0x31, 
                    0x03, 
                    0x03, 
                    0x05, 
                    0x08, 
                    0x0A, 
                    0x0D, 
                    0x0F, 
                    0x12, 
                    0x19, 
                    0x22, 
                    0x2E, 
                    0x3E, 
                    0x54, 
                    0x6E, 
                    0x93, 
                    0xC1, 
                    0xFF, 
                    0x0587, 
                    0x0587, 
                    0x03, 
                    0x03
                }, 

                Package (0x16)
                {
                    0x32, 
                    0x03, 
                    0x03, 
                    0x05, 
                    0x08, 
                    0x0A, 
                    0x0D, 
                    0x0F, 
                    0x12, 
                    0x19, 
                    0x22, 
                    0x2E, 
                    0x3E, 
                    0x54, 
                    0x6E, 
                    0x93, 
                    0xC1, 
                    0xFF, 
                    0x0587, 
                    0x0587, 
                    0x03, 
                    0x03
                }
            })
            Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (^HKEY.MHKK (One, 0x8000))
                {
                    ^HKEY.MHKQ (0x1010)
                }

                If (VIGD)
                {
                    Notify (^^^GFX0.DD1F, 0x86) // Device-Specific
                }
            }

            Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (^HKEY.MHKK (One, 0x00010000))
                {
                    ^HKEY.MHKQ (0x1011)
                }

                If (VIGD)
                {
                    Notify (^^^GFX0.DD1F, 0x87) // Device-Specific
                }

                Return (Zero)
            }

            Method (BRNS, 0, NotSerialized)
            {
                Local0 = (BRLV + 0x02)
                Local3 = BNTN /* \BNTN */
                If (^^^GFX0.DRDY)
                {
                    Local2 = DerefOf (DerefOf (BRTB [Local3]) [Local0])
                    ^^^GFX0.AINT (One, Local2)
                }
            }

            Method (BFRQ, 0, NotSerialized)
            {
                Local0 = 0x80000100
                Local1 = DerefOf (DerefOf (BRTB [BNTN]) [0x13])
                Local0 |= (Local1 << 0x09)
                Local1 = DerefOf (DerefOf (BRTB [BNTN]) [0x15])
                Local0 |= Local1
                Return (Local0)
            }
        }

        Scope (\_SB.PC00.LPCB.EC)
        {
            Name (BDEV, 0xFF)
            Name (BSTS, Zero)
            Name (BHKE, Zero)
            Method (_Q2C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If ((BSTS == Zero))
                {
                    BDEV = BGID (Zero)
                    NBRE (BDEV)
                }
            }

            Method (_Q2D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                BDEV = BGID (Zero)
                NBIN (BDEV)
            }

            Method (_Q38, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Local0 = BGID (Zero)
                If ((Local0 == 0x0F))
                {
                    BDIS ()
                    BHDP (One, Zero)
                    NBEJ (BDEV)
                    BDEV = Local0
                    If ((BIDE == 0x03))
                    {
                        ^^^SAT0.PRIM.GTME = Zero
                        ^^^SAT0.SCND.GTME = Zero
                    }
                }
                ElseIf (HPBU) {}
                Else
                {
                    BDEV = Local0
                    NBIN (Local0)
                }
            }

            Method (NBRE, 1, NotSerialized)
            {
                If ((Arg0 < 0x0C))
                {
                    If ((BIDE == 0x03))
                    {
                        Notify (^^^SAT0.SCND.MSTR, 0x03) // Eject Request
                    }
                    Else
                    {
                        Notify (^^^SAT0.PRT1, 0x03) // Eject Request
                    }
                }
            }

            Method (NBEJ, 1, NotSerialized)
            {
                If ((BSTS == Zero))
                {
                    If ((Arg0 < 0x0C))
                    {
                        If ((BIDE == 0x03))
                        {
                            Notify (^^^SAT0.SCND.MSTR, One) // Device Check
                        }
                        Else
                        {
                            Notify (^^^SAT0.PRT1, One) // Device Check
                        }
                    }
                }

                BEEP (Zero)
                BSTS = Zero
            }

            Method (NBIN, 1, NotSerialized)
            {
                If ((Arg0 < 0x0C))
                {
                    BEN (One)
                    If ((BIDE == 0x03))
                    {
                        Notify (^^^SAT0.SCND.MSTR, One) // Device Check
                    }
                    Else
                    {
                        Notify (^^^SAT0.PRT1, One) // Device Check
                    }
                }

                BEEP (Zero)
                BSTS = Zero
            }

            Method (BEJ0, 1, NotSerialized)
            {
                If (Arg0)
                {
                    BDIS ()
                    BHDP (One, Zero)
                    BSTS = One
                    If (BHKE)
                    {
                        BHKE = Zero
                        ^HKEY.MHKQ (0x3003)
                    }
                }
                Else
                {
                    BSTS = Zero
                }
            }

            Method (BEJ3, 1, NotSerialized)
            {
                If (Arg0)
                {
                    BDIS ()
                    BSTS = One
                }
                Else
                {
                    BSTS = Zero
                }
            }

            Method (BPTS, 1, NotSerialized)
            {
                HDBM = One
                If ((BSTS != Zero))
                {
                    BDEV = 0x0F
                    BSTS = Zero
                }

                BHKE = Zero
                BUWK (Zero)
            }

            Method (BWAK, 1, NotSerialized)
            {
                BUWK (Zero)
                Local0 = BGID (Zero)
                If ((BSTS == Zero))
                {
                    If ((Local0 != BDEV))
                    {
                        NBEJ (BDEV)
                        BDEV = Local0
                        NBIN (Local0)
                    }
                    ElseIf ((LFDC || (BDEV != 0x0D)))
                    {
                        If ((Local0 != 0x0F))
                        {
                            If (HPBU)
                            {
                                If ((Arg0 <= 0x02)) {}
                                Else
                                {
                                    NBRE (Local0)
                                }
                            }
                        }
                    }
                }

                If ((BDEV < 0x0C))
                {
                    UBIS (Zero)
                }
                Else
                {
                    UBIS (One)
                }
            }

            Method (BDIS, 0, NotSerialized)
            {
                If (!CSON)
                {
                    If (!GLIS)
                    {
                        UBIS (One)
                    }

                    CSON = One
                    IDET = 0x0F
                }
            }

            Method (BPON, 1, NotSerialized)
            {
                If (CSON)
                {
                    CSON = Zero
                    If (GLIS)
                    {
                        UBIS (Zero)
                    }
                }
            }

            Method (BEN, 1, NotSerialized)
            {
                If (CSON)
                {
                    BPON (Arg0)
                    If (Arg0)
                    {
                        IRDY ()
                    }
                }
            }

            Method (BSTA, 1, NotSerialized)
            {
                If (CSON)
                {
                    Return (Zero)
                }

                BINI ()
                If ((Arg0 == One))
                {
                    Return ((BDEV < 0x0C))
                }

                Return (Zero)
            }

            Method (BUWK, 1, NotSerialized)
            {
                If (H8DR)
                {
                    If (Arg0)
                    {
                        HWBU = One
                    }
                    Else
                    {
                        HWBU = Zero
                    }
                }
                ElseIf (Arg0)
                {
                    MBEC (0x32, 0xFF, 0x80)
                }
                Else
                {
                    MBEC (0x32, 0x7F, Zero)
                }
            }

            Method (BINI, 0, NotSerialized)
            {
                If ((BDEV == 0xFF))
                {
                    BDEV = BGID (Zero)
                }
            }

            Method (BGID, 1, NotSerialized)
            {
                If (Arg0)
                {
                    Local0 = 0xFF
                }
                Else
                {
                    If (H8DR)
                    {
                        Local2 = HBID /* \_SB_.PC00.LPCB.EC__.HBID */
                    }
                    Else
                    {
                        Local2 = RBEC (0x47)
                        Local2 &= 0x04
                        Local2 >>= 0x02
                    }

                    If (Local2)
                    {
                        Local0 = 0x0F
                    }
                    ElseIf (HDUB)
                    {
                        Local0 = 0x0F
                    }
                    ElseIf (((IDET == 0x03) || (IDET == 0x06)))
                    {
                        Local0 = IDET /* \IDET */
                    }
                    Else
                    {
                        Local0 = 0x07
                    }

                    If ((Local0 == 0x0F)) {}
                }

                If ((HDUB && (Local0 < 0x0C)))
                {
                    Local0 = 0x0F
                }

                Return (Local0)
            }

            Method (IRDY, 0, NotSerialized)
            {
                Local0 = 0x01F4
                Local1 = 0x3C
                Local2 = Zero
                While (Local1)
                {
                    Sleep (Local0)
                    Local3 = BCHK ()
                    If (!Local3)
                    {
                        Break
                    }

                    If ((Local3 == 0x02))
                    {
                        Local2 = One
                        Break
                    }

                    Local1--
                }

                Return (Local2)
            }
        }

        Scope (\_SB.PC00.LPCB.EC)
        {
            Method (_Q43, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCMS (0x18)
            }

            Method (SAUM, 1, NotSerialized)
            {
                If ((Arg0 > 0x03))
                {
                    Noop
                }
                ElseIf (H8DR)
                {
                    HAUM = Arg0
                }
                Else
                {
                    MBEC (0x03, 0x9F, (Arg0 << 0x05))
                }
            }
        }

        Scope (HKEY)
        {
            Method (GSMS, 1, NotSerialized)
            {
                Return (AUDC (Zero, Zero))
            }

            Method (SSMS, 1, NotSerialized)
            {
                Return (AUDC (One, (Arg0 & One)))
            }

            Method (SHDA, 1, NotSerialized)
            {
                Local0 = Arg0
                If (((OSYS >= 0x07DF) && (Local0 == One)))
                {
                    Local0 = 0x02
                }

                Return (AUDC (0x02, (Local0 & 0x03)))
            }
        }

        Scope (\_SB.PC00.LPCB.EC)
        {
            Method (_Q19, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (^HKEY.MHKK (One, 0x00800000))
                {
                    ^HKEY.MHKQ (0x1018)
                }

                SCMS (0x03)
            }
        }

        Scope (\_SB.PC00.LPCB.EC)
        {
            Method (_Q63, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (^HKEY.MHKK (One, 0x00080000))
                {
                    ^HKEY.MHKQ (0x1014)
                }

                SCMS (0x0B)
            }
        }

        Scope (\_SB.PC00.LPCB.EC)
        {
            Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                FNST ()
            }

            Method (_Q72, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                FNST ()
            }

            Method (_Q73, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                FNST ()
            }

            Method (FNST, 0, NotSerialized)
            {
                If (H8DR)
                {
                    Local0 = HFNS /* \_SB_.PC00.LPCB.EC__.HFNS */
                    Local1 = HFNE /* \_SB_.PC00.LPCB.EC__.HFNE */
                }
                Else
                {
                    Local0 = (RBEC (0x0E) & 0x03)
                    Local1 = (RBEC (Zero) & 0x08)
                }

                If (Local1)
                {
                    If ((Local0 == Zero))
                    {
                        SCMS (0x11)
                    }

                    If ((Local0 == One))
                    {
                        SCMS (0x0F)
                    }

                    If ((Local0 == 0x02))
                    {
                        SCMS (0x10)
                    }

                    ^HKEY.MHKQ (0x6005)
                }
            }
        }

        Scope (HKEY)
        {
            Method (GHSL, 1, NotSerialized)
            {
                Return (FNSC (Zero, Zero))
            }

            Method (SHSL, 1, NotSerialized)
            {
                Return (FNSC (One, (Arg0 & 0x00010001)))
            }
        }

        Scope (HKEY)
        {
            Name (INDV, Zero)
            Method (MHQI, 0, NotSerialized)
            {
                If ((IPMS & One))
                {
                    INDV |= One
                }

                If ((IPMS & 0x02))
                {
                    INDV |= 0x02
                }

                If ((IPMS & 0x04))
                {
                    INDV |= 0x0100
                }

                If ((IPMS & 0x08))
                {
                    INDV |= 0x0200
                }

                If ((IPMS & 0x10))
                {
                    INDV |= 0x04
                }

                Return (INDV) /* \_SB_.PC00.LPCB.EC__.HKEY.INDV */
            }

            Method (MHGI, 1, NotSerialized)
            {
                Name (RETB, Buffer (0x10) {})
                CreateByteField (RETB, Zero, MHGS)
                Local0 = (One << Arg0)
                If ((INDV & Local0))
                {
                    If ((Arg0 == Zero))
                    {
                        CreateField (RETB, 0x08, 0x78, BRBU)
                        BRBU = IPMB /* \IPMB */
                        MHGS = 0x10
                    }
                    ElseIf ((Arg0 == One))
                    {
                        CreateField (RETB, 0x08, 0x18, RRBU)
                        RRBU = IPMR /* \IPMR */
                        MHGS = 0x04
                    }
                    ElseIf ((Arg0 == 0x08))
                    {
                        CreateField (RETB, 0x10, 0x18, ODBU)
                        CreateByteField (RETB, One, MHGZ)
                        ODBU = IPMO /* \IPMO */
                        If (((BSTS == Zero) && (BDEV == 0x03)))
                        {
                            MHGZ |= One /* \_SB_.PC00.LPCB.EC__.HKEY.MHGI.MHGZ */
                            MHGZ |= 0x02 /* \_SB_.PC00.LPCB.EC__.HKEY.MHGI.MHGZ */
                        }

                        MHGS = 0x05
                    }
                    ElseIf ((Arg0 == 0x09))
                    {
                        CreateField (RETB, 0x10, 0x08, AUBU)
                        AUBU = IPMA /* \IPMA */
                        RETB [One] = One
                        MHGS = 0x03
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        Local1 = VDYN (Zero, Zero)
                        RETB [0x02] = (Local1 & 0x0F)
                        Local1 >>= 0x04
                        RETB [One] = (Local1 & 0x0F)
                        MHGS = 0x03
                    }
                }

                Return (RETB) /* \_SB_.PC00.LPCB.EC__.HKEY.MHGI.RETB */
            }

            Method (MHSI, 2, NotSerialized)
            {
                Local0 = (One << Arg0)
                If ((INDV & Local0))
                {
                    If ((Arg0 == 0x08))
                    {
                        If (Arg1)
                        {
                            If (H8DR)
                            {
                                Local1 = HPBU /* \_SB_.PC00.LPCB.EC__.HPBU */
                            }
                            Else
                            {
                                Local1 = (RBEC (0x47) & One)
                            }

                            If (!Local1)
                            {
                                BDEV = BGID (Zero)
                                NBIN (Local1)
                            }
                        }
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        VDYN (One, Arg1)
                    }
                }
            }
        }

        Scope (HKEY)
        {
            Method (PWMC, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (PWMG, 0, NotSerialized)
            {
                Local0 = PWMH /* \_SB_.PC00.LPCB.EC__.PWMH */
                Local0 <<= 0x08
                Local0 |= PWML /* \_SB_.PC00.LPCB.EC__.PWML */
                Return (Local0)
            }
        }

        Scope (HKEY)
        {
            Name (WGFL, Zero)
            Method (WSIF, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (WLSW, 0, NotSerialized)
            {
                Return (0x10010001)
            }

            Method (GWAN, 0, NotSerialized)
            {
                Local0 = Zero
                If ((WGFL & One))
                {
                    Local0 |= One
                }

                If ((WGFL & 0x08))
                {
                    Return (Local0)
                }

                If (WPWS ())
                {
                    Local0 |= 0x02
                }

                Local0 |= 0x04
                Return (Local0)
            }

            Method (SWAN, 1, NotSerialized)
            {
                If ((Arg0 & 0x02))
                {
                    WPWC (One)
                }
                Else
                {
                    WPWC (Zero)
                }
            }

            Method (GBDC, 0, NotSerialized)
            {
                Local0 = Zero
                If ((WGFL & 0x10))
                {
                    Local0 |= One
                }

                If ((WGFL & 0x80))
                {
                    Return (Local0)
                }

                If (BPWS ())
                {
                    Local0 |= 0x02
                }

                Local0 |= 0x04
                Return (Local0)
            }

            Method (SBDC, 1, NotSerialized)
            {
                If ((Arg0 & 0x02))
                {
                    BPWC (One)
                }
                Else
                {
                    BPWC (Zero)
                }
            }

            Method (WPWS, 0, NotSerialized)
            {
                Local0 = Zero
                If ((GGOV (0x0908000F) == Zero))
                {
                    Local0 = Zero
                }
                Else
                {
                    Local0 = One
                }

                Return (Local0)
            }

            Method (WPWC, 1, NotSerialized)
            {
                If ((Arg0 && ((WGFL & One) && !(WGFL & 0x08
                    ))))
                {
                    SGOV (0x0908000F, One)
                    WGFL |= 0x02
                }
                Else
                {
                    SGOV (0x0908000F, Zero)
                    WGFL &= 0xFFFFFFFFFFFFFFFD
                }
            }

            Method (BPWS, 0, NotSerialized)
            {
                Local0 = Zero
                If ((GGOV (0x0902000D) == One))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (BPWC, 1, NotSerialized)
            {
                If ((Arg0 && ((WGFL & 0x10) && !(WGFL & 0x80
                    ))))
                {
                    SGOV (0x0902000D, One)
                    WGFL |= 0x20
                }
                Else
                {
                    SGOV (0x0902000D, Zero)
                    WGFL &= 0xFFFFFFFFFFFFFFDF
                }
            }

            Method (WGIN, 0, NotSerialized)
            {
                WGFL = Zero
                WGFL = WGSV (One)
                If (WIN8)
                {
                    If ((WGFL && 0x10))
                    {
                        BPWC (One)
                    }
                }

                If (WPWS ())
                {
                    WGFL |= 0x02
                }

                If (BPWS ())
                {
                    WGFL |= 0x20
                }
            }

            Method (WGPS, 1, NotSerialized)
            {
                If ((Arg0 >= 0x04))
                {
                    BLTH (0x05)
                }
            }

            Method (WGWK, 1, NotSerialized)
            {
                Noop
            }
        }

        Scope (\_SB.PC00.LPCB.EC)
        {
            Method (_Q41, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^HKEY.MHKQ (0x7000)
            }
        }

        Scope (HKEY)
        {
            Mutex (BFWM, 0x00)
            Method (MHCF, 1, NotSerialized)
            {
                Local0 = BFWC (Arg0)
                BSWR = (Arg0 >> 0x05)
                Return (Local0)
            }

            Method (MHPF, 1, NotSerialized)
            {
                Name (RETB, Buffer (0x25) {})
                Acquire (BFWM, 0xFFFF)
                If ((SizeOf (Arg0) <= 0x25))
                {
                    BFWB = Arg0
                    If (BFWP ())
                    {
                        CHKS ()
                        BFWL ()
                    }

                    RETB = BFWB /* \BFWB */
                }

                Release (BFWM)
                Return (RETB) /* \_SB_.PC00.LPCB.EC__.HKEY.MHPF.RETB */
            }

            Method (MHIF, 1, NotSerialized)
            {
                Name (RETB, Buffer (0x0A) {})
                Acquire (BFWM, 0xFFFF)
                BFWG (Arg0)
                RETB = BFWB /* \BFWB */
                Release (BFWM)
                Return (RETB) /* \_SB_.PC00.LPCB.EC__.HKEY.MHIF.RETB */
            }

            Method (MHDM, 1, NotSerialized)
            {
                BDMC (Arg0)
            }
        }

        Scope (HKEY)
        {
            Method (PSSG, 1, NotSerialized)
            {
                Return (PSIF (Zero, Zero))
            }

            Method (PSSS, 1, NotSerialized)
            {
                Return (PSIF (One, Arg0))
            }

            Method (PSBS, 1, NotSerialized)
            {
                Return (PSIF (0x02, Arg0))
            }

            Method (BICG, 1, NotSerialized)
            {
                Return (PSIF (0x03, Arg0))
            }

            Method (BICS, 1, NotSerialized)
            {
                Return (PSIF (0x04, Arg0))
            }

            Method (BCTG, 1, NotSerialized)
            {
                Return (PSIF (0x05, Arg0))
            }

            Method (BCCS, 1, NotSerialized)
            {
                Return (PSIF (0x06, Arg0))
            }

            Method (BCSG, 1, NotSerialized)
            {
                Return (PSIF (0x07, Arg0))
            }

            Method (BCSS, 1, NotSerialized)
            {
                Return (PSIF (0x08, Arg0))
            }

            Method (BDSG, 1, NotSerialized)
            {
                Return (PSIF (0x09, Arg0))
            }

            Method (BDSS, 1, NotSerialized)
            {
                Return (PSIF (0x0A, Arg0))
            }
        }

        Scope (HKEY)
        {
            Method (GILN, 0, NotSerialized)
            {
                Return ((0x02 | ILNF))
            }

            Method (SILN, 1, NotSerialized)
            {
                If ((One == Arg0))
                {
                    ILNF = One
                    BBLS = Zero
                    Return (Zero)
                }
                ElseIf ((0x02 == Arg0))
                {
                    ILNF = Zero
                    BBLS = One
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (GLSI, 0, NotSerialized)
            {
                If (H8DR)
                {
                    Return ((0x02 + HPLD))
                }
                ElseIf ((RBEC (0x46) & 0x04))
                {
                    Return (0x03)
                }
                Else
                {
                    Return (0x02)
                }
            }
        }

        Scope (HKEY)
        {
            Method (GDLN, 0, NotSerialized)
            {
                Return ((0x02 | PLUX))
            }

            Method (SDLN, 1, NotSerialized)
            {
                If ((One == Arg0))
                {
                    PLUX = One
                    Return (Zero)
                }
                ElseIf ((0x02 == Arg0))
                {
                    PLUX = Zero
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }
        }

        Method (DTRD, 0, NotSerialized)
        {
            If (PSST)
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (DTNR, 0, NotSerialized)
        {
            If (^^^RP01.PXSX.IS5G ())
            {
                If (((RBEC (0x46) & 0x40) || (RBEC (0x47) & 0x02)))
                {
                    Return (One)
                }
            }
            ElseIf ((RBEC (0x46) & 0x40))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (DTPS, 0, NotSerialized)
        {
            If (H8DR)
            {
                Return (DTRD ())
            }
            Else
            {
                Return (DTNR ())
            }
        }

        Method (LAPS, 0, NotSerialized)
        {
            If (DPRL)
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Scope (\_SB.PC00.LPCB.EC)
        {
            Name (WDPR, Package (0x02)
            {
                0x090E000D, 
                Zero
            })
            Method (DPRS, 0, Serialized)
            {
                Local0 = DTPS ()
                Local1 = LAPS ()
                Local1 |= (Local0 << One)
                ADBG (Concatenate ("DPRS status=", ToHexString (Local1)))
                Switch (ToInteger (Local1))
                {
                    Case (Zero)
                    {
                        ADBG ("P:OFF L:OFF -> DPR:OFF")
                        \PIN.OFF (WDPR)
                    }
                    Case (One)
                    {
                        ADBG ("P:OFF L:ON -> DPR:OFF")
                        \PIN.OFF (WDPR)
                    }
                    Case (0x02)
                    {
                        ADBG ("P:ON L:OFF -> DPR:OFF")
                        \PIN.OFF (WDPR)
                    }
                    Case (0x03)
                    {
                        ADBG ("P:ON L:ON -> DPR:ON")
                        \PIN.ON (WDPR)
                    }

                }
            }

            Method (_Q4E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ADBG ("PSNR state change")
                DPRS ()
            }

            Method (_Q75, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ADBG ("DPR state change")
                DPRS ()
            }
        }

        Scope (HKEY)
        {
            Method (GPSS, 0, NotSerialized)
            {
                If (H8DR)
                {
                    If (DTRD ())
                    {
                        Local1 = One
                    }
                    Else
                    {
                        Local1 = Zero
                    }
                }
                ElseIf (DTNR ())
                {
                    Local1 = One
                }
                Else
                {
                    Local1 = Zero
                }

                Local0 = One
                Local0 |= (Local1 << One)
                Local0 &= 0x03
                Return (Local0)
            }
        }

        Scope (HKEY)
        {
            Method (CHPD, 1, NotSerialized)
            {
                Return (LVSS (Zero, (Arg0 & 0x00300001)))
            }
        }

        Scope (HKEY)
        {
            Method (GSSS, 1, NotSerialized)
            {
                Local0 = Zero
                CreateByteField (VEDI, 0x66, EFB1)
                If ((((SHDW & 0x80) == Zero) && ((EFB1 & 0x80
                    ) == 0x80)))
                {
                    Local0 |= 0x00010000
                    If (((EPAO & One) && (SHDW & One)))
                    {
                        Local0 |= 0x00020000
                    }
                }

                If ((SHDW & One))
                {
                    Local0 |= One
                }

                Local0 |= 0x32000000
                Return (Local0)
            }

            Method (SSSS, 1, NotSerialized)
            {
                CreateByteField (VEDI, 0x66, EFB1)
                If ((((SHDW & 0x80) == Zero) && ((EFB1 & 0x80
                    ) == 0x80)))
                {
                    If (((EPAO & One) == Zero))
                    {
                        If ((Arg0 == Zero))
                        {
                            If (((SHDW & One) != Zero))
                            {
                                SCMS (0x1E)
                                SHDW = (SHDW & 0xFFFFFFFFFFFFFFFE)
                                MHKQ (0x130F)
                                Return (Zero)
                            }
                        }

                        If ((Arg0 == One))
                        {
                            If (((SHDW & One) == Zero))
                            {
                                SCMS (0x1F)
                                SHDW = (SHDW | One)
                                MHKQ (0x130F)
                                Return (Zero)
                            }
                        }
                    }

                    If (((EPAO & One) == One))
                    {
                        Return (Zero)
                    }
                }

                Return (0x80000000)
            }

            Method (TSSS, 0, NotSerialized)
            {
                CreateByteField (VEDI, 0x66, EFB1)
                If ((((SHDW & 0x80) == Zero) && ((EFB1 & 0x80
                    ) == 0x80)))
                {
                    If (((SHDW & One) != Zero))
                    {
                        SSSS (Zero)
                        Return (Zero)
                    }

                    If (((SHDW & One) == Zero))
                    {
                        SSSS (One)
                        Return (Zero)
                    }
                }

                Return (0x80000000)
            }

            Method (CSSS, 0, NotSerialized)
            {
                If ((((SHDW & 0x80) == Zero) && ((SHDW & 
                    One) != Zero)))
                {
                    Return (SSSS (One))
                }
                Else
                {
                    Return (SSSS (Zero))
                }
            }
        }

        Scope (HKEY)
        {
            Name (WWOP, Package (0x02)
            {
                0x0908000F, 
                Zero
            })
            Method (SWWR, 1, Serialized)
            {
                ADBG (Concatenate ("DPRC SWWR ", ToHexString (Arg0)))
                If ((Arg0 == One))
                {
                    \PINP.OFF (WWOP)
                }
                Else
                {
                    \PINP.ON (WWOP)
                }

                Return (Zero)
            }

            Method (GWWR, 0, Serialized)
            {
                ADBG ("DRRC GWWR")
                If (\PINP.STA (WWOP))
                {
                    Return (0x10)
                }
                Else
                {
                    Return (0x0100)
                }
            }

            Method (GANT, 0, Serialized)
            {
                ADBG ("DPRC GANT")
                If (H8DR)
                {
                    If (ANTT)
                    {
                        Return (0x0100)
                    }
                    Else
                    {
                        Return (0x10)
                    }
                }
                ElseIf ((RBEC (0x0F) & 0x80))
                {
                    Return (0x0100)
                }
                Else
                {
                    Return (0x10)
                }
            }

            Method (DPRC, 1, Serialized)
            {
                Local0 = (Arg0 & 0x000F0000)
                Local0 >>= 0x10
                If ((Local0 == Zero))
                {
                    Return (GWWR ())
                }
                ElseIf ((Local0 == One))
                {
                    If ((Arg0 && ((WGFL & One) && !(WGFL & 0x08
                        ))))
                    {
                        Local1 = (Arg0 & 0xFFFF)
                        If ((Local1 == 0x10))
                        {
                            Return (SWWR (Zero))
                        }

                        If ((Local1 == 0x0100))
                        {
                            Return (SWWR (One))
                        }
                    }
                }
                ElseIf ((Local0 == 0x04))
                {
                    Return (GANT ())
                }

                Return (0x80000000)
            }
        }

        Scope (HKEY)
        {
            Name (AM00, Zero)
            Name (AM01, Zero)
            Name (AM02, Zero)
            Name (AM03, Zero)
            Name (AM04, Zero)
            Name (AM05, Zero)
            Name (AM06, Zero)
            Name (AM07, Zero)
            Name (AM08, Zero)
            Name (AM09, Zero)
            Name (AM0A, Zero)
            Name (AM0B, Zero)
            Name (AM0C, Zero)
            Name (AM0D, Zero)
            Name (AM0E, Zero)
            Name (AM0F, Zero)
            Name (FNLB, Zero)
            Name (QCKB, Zero)
            Name (QCMS, Zero)
            Method (LQCC, 1, NotSerialized)
            {
                Local1 = (Arg0 & 0xFFFF)
                Local0 = Zero
                ADBG (Concatenate ("LQCC=", ToHexString (Arg0)))
                ADBG (Concatenate ("  Current Mode QCMS=", ToHexString (QCMS)))
                If ((Local1 == 0x0100))
                {
                    Local1 = One
                    ADBG (Concatenate (" GET Capability=>", ToHexString (Local1)))
                    Return (Local1)
                }

                If ((Local1 == 0x0101))
                {
                    If (((Arg0 & 0x00010000) == 0x00010000))
                    {
                        If ((QCMS == Zero))
                        {
                            ADBG (">> QuickClean ON")
                            AM00 = (HAM0 & Zero)
                            AM01 = (HAM1 & Zero)
                            AM02 = (HAM2 & 0x78)
                            AM03 = (HAM3 & 0xB2)
                            AM04 = (HAM4 & Zero)
                            AM05 = (HAM5 & Zero)
                            AM06 = (HAM6 & Zero)
                            AM07 = (HAM7 & 0x70)
                            AM08 = (HAM8 & 0x08)
                            AM09 = (HAM9 & Zero)
                            AM0A = (HAMA & Zero)
                            AM0B = (HAMB & Zero)
                            AM0C = (HAMC & 0xFF)
                            AM0D = (HAMD & 0xFF)
                            AM0E = (HAME & 0x5D)
                            AM0F = (HAMF & 0x07)
                            HAM0 &= Ones
                            HAM1 &= Ones
                            HAM2 &= 0xFFFFFFFFFFFFFF87
                            HAM3 &= 0xFFFFFFFFFFFFFF4D
                            HAM4 &= Ones
                            HAM5 &= Ones
                            HAM6 &= Ones
                            HAM7 &= 0xFFFFFFFFFFFFFF8F
                            HAM8 &= 0xFFFFFFFFFFFFFFF7
                            HAM9 &= Ones
                            HAMA &= Ones
                            HAMB &= Ones
                            HAMC &= 0xFFFFFFFFFFFFFF00
                            HAMD &= 0xFFFFFFFFFFFFFF00
                            HAME &= 0xFFFFFFFFFFFFFFA2
                            HAMF &= 0xFFFFFFFFFFFFFFF8
                            FNLB = ESFL /* \_SB_.PC00.LPCB.EC__.ESFL */
                            ESFL = Zero
                            QCKB = QCON /* \_SB_.PC00.LPCB.EC__.QCON */
                            QCON = One
                            QCMS = One
                            Local0 = Zero
                            ADBG (Concatenate (" QuickClean ON : PASS : QCMS=", ToHexString (QCMS)))
                        }
                        Else
                        {
                            Local0 = Zero
                            ADBG (Concatenate (" QuickClean ON : DO NOTHING : QCMS=", ToHexString (QCMS)))
                        }
                    }
                    ElseIf ((QCMS == One))
                    {
                        ADBG (">> QuickClean OFF")
                        HAM0 |= AM00 /* \_SB_.PC00.LPCB.EC__.HAM0 */
                        HAM1 |= AM01 /* \_SB_.PC00.LPCB.EC__.HAM1 */
                        HAM2 |= AM02 /* \_SB_.PC00.LPCB.EC__.HAM2 */
                        HAM3 |= AM03 /* \_SB_.PC00.LPCB.EC__.HAM3 */
                        HAM4 |= AM04 /* \_SB_.PC00.LPCB.EC__.HAM4 */
                        HAM5 |= AM05 /* \_SB_.PC00.LPCB.EC__.HAM5 */
                        HAM6 |= AM06 /* \_SB_.PC00.LPCB.EC__.HAM6 */
                        HAM7 |= AM07 /* \_SB_.PC00.LPCB.EC__.HAM7 */
                        HAM8 |= AM08 /* \_SB_.PC00.LPCB.EC__.HAM8 */
                        HAM9 |= AM09 /* \_SB_.PC00.LPCB.EC__.HAM9 */
                        HAMA |= AM0A /* \_SB_.PC00.LPCB.EC__.HAMA */
                        HAMB |= AM0B /* \_SB_.PC00.LPCB.EC__.HAMB */
                        HAMC |= AM0C /* \_SB_.PC00.LPCB.EC__.HAMC */
                        HAMD |= AM0D /* \_SB_.PC00.LPCB.EC__.HAMD */
                        HAME |= AM0E /* \_SB_.PC00.LPCB.EC__.HAME */
                        HAMF |= AM0F /* \_SB_.PC00.LPCB.EC__.HAMF */
                        ESFL = FNLB /* \_SB_.PC00.LPCB.EC__.HKEY.FNLB */
                        QCON = QCKB /* \_SB_.PC00.LPCB.EC__.HKEY.QCKB */
                        QCMS = Zero
                        Local0 = Zero
                        ADBG (Concatenate (" QuickClean OFF : PASS : QCMS=", ToHexString (QCMS)))
                    }
                    Else
                    {
                        Local0 = Zero
                        ADBG (Concatenate (" QuickClean OFF : DO NOTHING : QCMS=", ToHexString (QCMS)))
                    }
                }

                Return (Local0)
            }
        }

        Scope (\_SB.PC00.LPCB.EC)
        {
            Field (ECOR, ByteAcc, NoLock, Preserve)
            {
                Offset (0xA0), 
                CTST,   15, 
                Offset (0xA2), 
                CTET,   15
            }

            Field (ECOR, ByteAcc, NoLock, Preserve)
            {
                Offset (0xA0), 
                CTSC,   8, 
                CTEC,   8
            }

            Method (SWTC, 2, Serialized)
            {
                If ((Arg0 > 0x7FFF))
                {
                    Return (0x80000000)
                }

                If ((Arg1 > 0x7FFF))
                {
                    Return (0x80000000)
                }

                If (((Arg0 == Zero) && (Arg1 == Zero))) {}
                ElseIf ((Arg0 >= Arg1))
                {
                    Return (0x80000000)
                }

                Acquire (^HKEY.BFWM, 0xFFFF)
                SSTI (Arg0, Arg1)
                Local0 = CHKS ()
                Release (^HKEY.BFWM)
                If ((Local0 != Zero))
                {
                    Return (0x80000000)
                }

                Return (Zero)
            }

            Method (SWCT, 2, Serialized)
            {
                If ((Arg0 > 0x64))
                {
                    Return (0x80000000)
                }

                If ((Arg1 > 0x64))
                {
                    Return (0x80000000)
                }

                If (((Arg0 == Zero) && (Arg1 == Zero))) {}
                ElseIf ((Arg0 >= Arg1))
                {
                    Return (0x80000000)
                }

                Acquire (^HKEY.BFWM, 0xFFFF)
                SSTH (Arg0, Arg1)
                Local0 = CHKS ()
                Release (^HKEY.BFWM)
                If ((Local0 != Zero))
                {
                    Return (0x80000000)
                }

                Return (Zero)
            }

            Method (SRRT, 0, Serialized)
            {
                Local0 = Zero
                Acquire (BATM, 0xFFFF)
                HIID = 0x80
                Local1 = CTST /* \_SB_.PC00.LPCB.EC__.CTST */
                Local2 = CTET /* \_SB_.PC00.LPCB.EC__.CTET */
                Release (BATM)
                Local0 |= Local1
                Local0 |= (Local2 << 0x10)
                Return (Local0)
            }

            Method (SRCT, 0, Serialized)
            {
                Local0 = Zero
                Acquire (BATM, 0xFFFF)
                HIID = 0x81
                Local1 = CTSC /* \_SB_.PC00.LPCB.EC__.CTSC */
                Local2 = CTEC /* \_SB_.PC00.LPCB.EC__.CTEC */
                Release (BATM)
                Local0 |= Local1
                Local0 |= (Local2 << 0x08)
                Return (Local0)
            }

            Method (_Q3E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^HKEY.MHKQ (0x6013)
                If (HB0A)
                {
                    Notify (BAT0, 0x80) // Status Change
                }
            }
        }

        Scope (HKEY)
        {
            Method (SOCH, 1, NotSerialized)
            {
                Local0 = (Arg0 & 0xFF)
                Local1 = ((Arg0 >> 0x08) & 0xFF)
                If ((Arg0 & 0x80000000))
                {
                    Local2 = SWCT (Local0, Local1)
                }
                Else
                {
                    Local2 = SRCT ()
                }

                Return (Local2)
            }

            Method (SOCT, 1, NotSerialized)
            {
                Local0 = (Arg0 & 0x7FFF)
                Local1 = ((Arg0 >> 0x10) & 0x7FFF)
                If ((Arg0 & 0x80000000))
                {
                    Local2 = SWTC (Local0, Local1)
                }
                Else
                {
                    Local2 = SRRT ()
                }

                Return (Local2)
            }
        }
    }

    Scope (_SB.PC00.LPCB.EC)
    {
        Device (LSSD)
        {
            Name (_HID, EisaId ("LEN0111"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB.PC00.LPCB.EC.HKEY)
    {
        Method (MHQT, 1, NotSerialized)
        {
            If ((WNTF && TATC))
            {
                If ((Arg0 == Zero))
                {
                    Local0 = TATC /* \TATC */
                    Return (Local0)
                }
                ElseIf ((Arg0 == One))
                {
                    Local0 = TDFA /* \TDFA */
                    Local0 += (TDTA << 0x04)
                    Local0 += (TDFD << 0x08)
                    Local0 += (TDTD << 0x0C)
                    Local0 += (TNFT << 0x10)
                    Local0 += (TNTT << 0x14)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = TCFA /* \TCFA */
                    Local0 += (TCTA << 0x04)
                    Local0 += (TCFD << 0x08)
                    Local0 += (TCTD << 0x0C)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03)) {}
                ElseIf ((Arg0 == 0x04))
                {
                    Local0 = TATW /* \TATW */
                    Return (Local0)
                }
                Else
                {
                    Noop
                }
            }

            Return (Zero)
        }

        Method (MHAT, 1, NotSerialized)
        {
            If ((WNTF && TATC))
            {
                Local0 = (Arg0 & 0xFF)
                If (!ATMV (Local0))
                {
                    Return (Zero)
                }

                Local0 = ((Arg0 >> 0x08) & 0xFF)
                If (!ATMV (Local0))
                {
                    Return (Zero)
                }

                TCFA = (Arg0 & 0x0F)
                TCTA = ((Arg0 >> 0x04) & 0x0F)
                TCFD = ((Arg0 >> 0x08) & 0x0F)
                TCTD = ((Arg0 >> 0x0C) & 0x0F)
                ATMC ()
                If ((CFGD & 0x0100))
                {
                    Local1 = FTPS /* \FTPS */
                    If ((Arg0 & 0x00010000))
                    {
                        If (CLVL)
                        {
                            FTPS = CTPR /* \CTPR */
                            FTPS++
                        }
                        Else
                        {
                            FTPS = One
                        }
                    }
                    ElseIf (CLVL)
                    {
                        FTPS = CTPR /* \CTPR */
                    }
                    Else
                    {
                        FTPS = Zero
                    }

                    If ((FTPS ^ Local1))
                    {
                        If ((OSPX || CPPX))
                        {
                            PNTF (0x80)
                        }
                    }
                }

                If ((HFSP == 0x40))
                {
                    ADBG ("MAX FAN speed")
                    If ((Arg0 & 0x00040000))
                    {
                        SCRM = One
                    }
                    Else
                    {
                        SCRM = Zero
                    }
                }
                Else
                {
                    ADBG ("Allow to change FAN speed")
                    If ((Arg0 & 0x00040000))
                    {
                        SCRM = One
                        HFSP = 0x07
                    }
                    Else
                    {
                        SCRM = Zero
                        HFSP = 0x80
                    }
                }

                If ((Arg0 & 0x00020000))
                {
                    ETAU = One
                }
                Else
                {
                    ETAU = Zero
                }

                Return (One)
            }

            Return (Zero)
        }

        Method (MHGT, 1, NotSerialized)
        {
            If ((WNTF && TATC))
            {
                Local0 = 0x01000000
                If ((CFGD & 0x0100))
                {
                    Local0 |= 0x08000000
                }

                If (SCRM)
                {
                    Local0 |= 0x10000000
                }

                If (ETAU)
                {
                    Local0 |= 0x04000000
                }

                If ((CTPR < FTPS))
                {
                    Local0 |= 0x02000000
                }

                Local0 += (TSFT << 0x10)
                Local0 += (TSTT << 0x14)
                Local1 = (Arg0 & 0xFF)
                If (!ATMV (Local1))
                {
                    Local0 |= 0xFFFF
                    Return (Local0)
                }

                Local1 = (Arg0 & 0x0F)
                If ((Local1 == Zero))
                {
                    Local0 += TIF0 /* \TIF0 */
                }
                ElseIf ((Local1 == One))
                {
                    Local0 += TIF1 /* \TIF1 */
                }
                ElseIf ((Local1 == 0x02))
                {
                    Local0 += TIF2 /* \TIF2 */
                }
                Else
                {
                    Local0 += 0xFF
                }

                Local1 = ((Arg0 >> 0x04) & 0x0F)
                If ((Local1 == Zero))
                {
                    Local0 += (TIT0 << 0x08)
                }
                ElseIf ((Local1 == One))
                {
                    Local0 += (TIT1 << 0x08)
                }
                ElseIf ((Local1 == 0x02))
                {
                    Local0 += (TIT2 << 0x08)
                }
                Else
                {
                    Local0 += 0xFF00
                }

                Return (Local0)
            }

            Return (Zero)
        }

        Method (ATMV, 1, NotSerialized)
        {
            Local1 = (Arg0 & 0x0F)
            Local0 = TNFT /* \TNFT */
            If ((Local1 >= Local0))
            {
                Return (Zero)
            }

            Local2 = ((Arg0 >> 0x04) & 0x0F)
            Local0 = TNTT /* \TNTT */
            If ((Local2 >= Local0))
            {
                Return (Zero)
            }

            If (TATL)
            {
                If ((Local1 ^ Local2))
                {
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (MHCT, 1, NotSerialized)
        {
            Local0 = Zero
            If (SPEN)
            {
                Local0 = LWST /* \LWST */
                Local0++
                Local0 <<= 0x08
            }

            Local1 = 0x08
            Local1 <<= 0x08
            If ((Arg0 == 0xFFFFFFFF))
            {
                Local1 |= TPCR /* \TPCR */
                If (SPEN)
                {
                    Local0 |= PPCR /* \PPCR */
                    If (!(CFGD && 0x02000000))
                    {
                        Local1 |= 0x80
                    }

                    If (!(CFGD && 0x08000000))
                    {
                        Local1 |= 0x40
                    }
                }
                Else
                {
                    Local1 |= 0xC0
                }
            }
            Else
            {
                If (((OSPX || CPPX) && SPEN))
                {
                    Local2 = (Arg0 & 0x00FF0000)
                    Local2 >>= 0x10
                    Local0 |= Local2
                    If ((Local2 ^ PPCR))
                    {
                        PPCA = Local2
                        PNTF (0x80)
                    }
                }

                If (WVIS)
                {
                    Local2 = (Arg0 & 0x1F)
                    Local1 |= Local2
                    If ((Local2 ^ TPCR))
                    {
                        TPCA = Local2
                        PNTF (0x82)
                    }
                }
            }

            Local0 <<= 0x10
            Local0 |= Local1
            Return (Local0)
        }

        Name (OEMV, Buffer (0x15)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00                     // .....
        })
        Name (MSCB, Zero)
        Method (DYTC, 1, Serialized)
        {
            Local0 = Arg0
            Local1 = Zero
            ADBG (Concatenate ("DYTC STT=", ToHexString (Local0)))
            If ((WNTF && TATC))
            {
                Switch (ToInteger ((Local0 & 0x01FF)))
                {
                    Case (Zero)
                    {
                        Local1 = 0x0100
                        Local1 |= 0x80000000
                        Local1 |= Zero
                        Local1 |= One
                    }
                    Case (One)
                    {
                        Local2 = ((Local0 >> 0x0C) & 0x0F)
                        Local3 = ((Local0 >> 0x10) & 0x0F)
                        Local4 = ((Local0 >> 0x14) & One)
                        ADBG ("DYTC_CMD_SET")
                        ADBG (Concatenate ("ICFunc=", ToHexString (Local2)))
                        ADBG (Concatenate ("ICMode=", ToHexString (Local3)))
                        ADBG (Concatenate ("ValidF=", ToHexString (Local4)))
                        If (((Local0 == 0x800F0001) || ((Local2 == One) || ((Local2 == 
                            0x0B) || ((Local2 == 0x0E) || ((Local2 == 0x0A) || (Local2 == 0x04))))))) {}
                        ElseIf (CondRefOf (\_SB.IETM.DPTE))
                        {
                            If ((^^^^^IETM.DPTE == Zero))
                            {
                                Local1 = 0x06
                                ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                Return (Local1)
                            }
                        }
                        Else
                        {
                            Local1 = 0x06
                            ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                            Return (Local1)
                        }

                        If ((((FCAP >> Local2) & One) == Zero))
                        {
                            Local1 = 0x08
                            ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                            Return (Local1)
                        }

                        Switch (ToInteger (Local2))
                        {
                            Case (One)
                            {
                                If ((Local3 != 0x0F))
                                {
                                    Local1 = 0x0A
                                    ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                    Return (Local1)
                                }

                                If ((Local4 == Zero))
                                {
                                    VCQL = Zero
                                }
                                Else
                                {
                                    VCQL = One
                                }
                            }
                            Case (0x04)
                            {
                                If ((Local3 != 0x0F))
                                {
                                    Local1 = 0x0A
                                    ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                    Return (Local1)
                                }

                                If ((Local4 == Zero))
                                {
                                    VSTP = Zero
                                }
                                Else
                                {
                                    VSTP = One
                                }
                            }
                            Case (0x07)
                            {
                                If ((Local3 == One))
                                {
                                    If ((Local4 != One))
                                    {
                                        Local1 = 0x0A
                                        ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                        Return (Local1)
                                    }
                                }
                                ElseIf ((Local3 == 0x0F))
                                {
                                    If ((Local4 != Zero))
                                    {
                                        Local1 = 0x0A
                                        ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                        Return (Local1)
                                    }
                                }
                                Else
                                {
                                    Local1 = 0x0A
                                    ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                    Return (Local1)
                                }

                                If ((Local4 == Zero))
                                {
                                    VADM = Zero
                                    SADM = Zero
                                }
                                Else
                                {
                                    VADM = One
                                    SADM = Local3
                                }
                            }
                            Case (0x09)
                            {
                                If ((Local3 != 0x0F))
                                {
                                    Local1 = 0x0A
                                    ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                    Return (Local1)
                                }

                                If ((Local4 == Zero))
                                {
                                    VTMS = Zero
                                }
                                Else
                                {
                                    VTMS = One
                                }
                            }
                            Case (0x0A)
                            {
                                If ((Local3 != 0x0F))
                                {
                                    Local1 = 0x0A
                                    ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                    Return (Local1)
                                }

                                If ((Local4 == Zero))
                                {
                                    VDLS = Zero
                                }
                                Else
                                {
                                    VDLS = One
                                }
                            }
                            Case (0x0B)
                            {
                                Switch (ToInteger (Local3))
                                {
                                    Case (Zero)
                                    {
                                        If ((Local4 != One))
                                        {
                                            Local1 = 0x0A
                                            ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                            Return (Local1)
                                        }
                                    }
                                    Case (0x02)
                                    {
                                        If ((Local4 != One))
                                        {
                                            Local1 = 0x0A
                                            ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                            Return (Local1)
                                        }
                                    }
                                    Case (0x03)
                                    {
                                        If ((Local4 != One))
                                        {
                                            Local1 = 0x0A
                                            ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                            Return (Local1)
                                        }
                                    }
                                    Case (0x0F)
                                    {
                                        If ((Local4 != Zero))
                                        {
                                            Local1 = 0x0A
                                            ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                            Return (Local1)
                                        }
                                    }
                                    Default
                                    {
                                        Local1 = 0x0A
                                        ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                        Return (Local1)
                                    }

                                }

                                If ((Local4 == Zero))
                                {
                                    VMMC = Zero
                                    SMMC = Zero
                                }
                                Else
                                {
                                    VMMC = One
                                    SMMC = Local3
                                }
                            }
                            Case (0x0C)
                            {
                                If ((Local3 != 0x0F))
                                {
                                    Local1 = 0x0A
                                    ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                    Return (Local1)
                                }

                                If ((Local4 == Zero))
                                {
                                    VMSC = Zero
                                }
                                Else
                                {
                                    VMSC = One
                                }
                            }
                            Case (0x0D)
                            {
                                If (((Local3 <= 0x08) && (Local3 >= One)))
                                {
                                    If ((Local4 != One))
                                    {
                                        Local1 = 0x0A
                                        ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                        Return (Local1)
                                    }
                                }
                                ElseIf ((Local3 == 0x0F))
                                {
                                    If ((Local4 != Zero))
                                    {
                                        Local1 = 0x0A
                                        ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                        Return (Local1)
                                    }
                                }
                                Else
                                {
                                    Local1 = 0x0A
                                    ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                    Return (Local1)
                                }

                                If ((Local4 == Zero))
                                {
                                    VPSC = Zero
                                    SPSC = Zero
                                }
                                Else
                                {
                                    VPSC = One
                                    SPSC = Local3
                                }

                                ^^^^^FAN0.CRNF ()
                            }
                            Case (0x0E)
                            {
                                If ((Local3 != 0x0F))
                                {
                                    Local1 = 0x0A
                                    ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                    Return (Local1)
                                }

                                If ((Local4 == Zero))
                                {
                                    VCSC = Zero
                                }
                                Else
                                {
                                    VCSC = One
                                }
                            }
                            Case (0x0F)
                            {
                                If (((Local3 <= 0x02) && (Local3 >= Zero)))
                                {
                                    If ((Local4 != One))
                                    {
                                        Local1 = 0x0A
                                        ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                        Return (Local1)
                                    }
                                }
                                ElseIf ((Local3 == 0x0F))
                                {
                                    If ((Local4 != Zero))
                                    {
                                        Local1 = 0x0A
                                        ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                        Return (Local1)
                                    }
                                }
                                Else
                                {
                                    Local1 = 0x0A
                                    ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                    Return (Local1)
                                }

                                If ((Local4 == Zero))
                                {
                                    VAMT = Zero
                                    SAMT = Zero
                                }
                                Else
                                {
                                    VAMT = One
                                    SAMT = (Local3 + One)
                                }
                            }
                            Case (Zero)
                            {
                                If ((Local3 != 0x0F))
                                {
                                    Local1 = 0x0A
                                    ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                    Return (Local1)
                                }
                            }
                            Default
                            {
                                Local1 = 0x02
                                ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
                                Return (Local1)
                            }

                        }

                        If ((FANE == One))
                        {
                            VSTP = One
                        }

                        ADBG (" Set ODM Variable")
                        If (CondRefOf (\_SB.IETM.DPTE))
                        {
                            If ((^^^^^IETM.DPTE == One))
                            {
                                OEMV [Zero] = STDV /* \STDV */
                                ODV0 = STDV /* \STDV */
                                OEMV [One] = VCQL /* \VCQL */
                                ODV1 = VCQL /* \VCQL */
                                OEMV [0x02] = VTIO /* \VTIO */
                                ODV2 = VTIO /* \VTIO */
                                If (((VMYH == One) && (SMYH == Zero)))
                                {
                                    OEMV [0x03] = One
                                    ODV3 = One
                                }
                                Else
                                {
                                    OEMV [0x03] = Zero
                                    ODV3 = Zero
                                }

                                If (((VMYH == One) && (SMYH == One)))
                                {
                                    OEMV [0x04] = One
                                    ODV4 = One
                                }
                                Else
                                {
                                    OEMV [0x04] = Zero
                                    ODV4 = Zero
                                }

                                If (((VMYH == One) && (SMYH == 0x02)))
                                {
                                    OEMV [0x05] = One
                                    ODV5 = One
                                }
                                Else
                                {
                                    OEMV [0x05] = Zero
                                    ODV5 = Zero
                                }

                                OEMV [0x06] = VSTP /* \VSTP */
                                OEMV [0x07] = VLCM /* \VLCM */
                                OEMV [0x08] = VDGM /* \VDGM */
                                ODV6 = VSTP /* \VSTP */
                                ODV7 = VLCM /* \VLCM */
                                ODV8 = VDGM /* \VDGM */
                                If ((VADM == One))
                                {
                                    OEMV [0x09] = SADM /* \SADM */
                                    ODV9 = SADM /* \SADM */
                                }
                                Else
                                {
                                    OEMV [0x09] = Zero
                                    ODV9 = Zero
                                }

                                OEMV [0x0A] = VDMC /* \VDMC */
                                OEMV [0x0B] = VTMS /* \VTMS */
                                OEMV [0x0C] = VDLS /* \VDLS */
                                ODVA = VDMC /* \VDMC */
                                ODVB = VTMS /* \VTMS */
                                ODVC = VDLS /* \VDLS */
                                If (((VMMC == One) && (SMMC == Zero)))
                                {
                                    OEMV [0x0D] = One
                                    ODVD = One
                                }
                                Else
                                {
                                    OEMV [0x0D] = Zero
                                    ODVD = Zero
                                }

                                If (((VMMC == One) && (SMMC == One)))
                                {
                                    OEMV [0x0E] = One
                                    ODVE = One
                                }
                                Else
                                {
                                    OEMV [0x0E] = Zero
                                    ODVE = Zero
                                }

                                If (((VMMC == One) && (SMMC == 0x02)))
                                {
                                    OEMV [0x0F] = One
                                    ODVF = One
                                }
                                Else
                                {
                                    OEMV [0x0F] = Zero
                                    ODVF = Zero
                                }

                                If (((VMMC == One) && (SMMC == 0x03)))
                                {
                                    OEMV [0x11] = One
                                    ODVH = One
                                }
                                Else
                                {
                                    OEMV [0x11] = Zero
                                    ODVH = Zero
                                }

                                OEMV [0x10] = VMSC /* \VMSC */
                                ODVG = VMSC /* \VMSC */
                                If ((VPSC == One))
                                {
                                    OEMV [0x12] = SPSC /* \SPSC */
                                    ODVI = SPSC /* \SPSC */
                                }
                                Else
                                {
                                    OEMV [0x12] = Zero
                                    ODVI = Zero
                                }

                                OEMV [0x13] = VCSC /* \VCSC */
                                ODVJ = VCSC /* \VCSC */
                                If ((VAMT == One))
                                {
                                    OEMV [0x14] = SAMT /* \SAMT */
                                    ODVK = SAMT /* \SAMT */
                                }
                                Else
                                {
                                    OEMV [0x14] = Zero
                                    ODVK = Zero
                                }
                            }
                        }

                        If ((VSTP == One))
                        {
                            SCPF (0x04)
                        }
                        ElseIf ((VMSC == One))
                        {
                            SCPF (0x0C)
                        }
                        ElseIf ((VCSC == One))
                        {
                            SCPF (0x0E)
                        }
                        ElseIf ((VDLS == One))
                        {
                            SCPF (0x0A)
                        }
                        ElseIf ((VAMT == One))
                        {
                            CICF = 0x0F
                            SCPF (0x0F)
                            If (CondRefOf (\_SB.IETM))
                            {
                                Notify (IETM, 0x88) // Device-Specific
                            }
                        }
                        ElseIf ((VTMS == One))
                        {
                            SCPF (0x09)
                        }
                        ElseIf ((VPSC == One))
                        {
                            SCPF (0x0D)
                        }
                        ElseIf ((VADM == One))
                        {
                            SCPF (0x07)
                        }
                        ElseIf ((VCQL == One))
                        {
                            SCPF (One)
                        }
                        ElseIf ((VMMC == One))
                        {
                            SCPF (0x0B)
                        }
                        Else
                        {
                            SCPF (Zero)
                        }

                        Local5 = One
                        Local5 |= (VCQL << One)
                        Local5 |= (VTIO << 0x02)
                        Local5 |= (VMYH << 0x03)
                        Local5 |= (VSTP << 0x04)
                        Local5 |= (VLCM << 0x05)
                        Local5 |= (VDGM << 0x06)
                        Local5 |= (VADM << 0x07)
                        Local5 |= (VDMC << 0x08)
                        Local5 |= (VTMS << 0x09)
                        Local5 |= (VDLS << 0x0A)
                        Local5 |= (VMMC << 0x0B)
                        Local5 |= (VMSC << 0x0C)
                        Local5 |= (VPSC << 0x0D)
                        Local5 |= (VCSC << 0x0E)
                        Local5 |= (VAMT << 0x0F)
                        Local1 = (CICF << 0x08)
                        If ((CICF == 0x03))
                        {
                            CICM = SMYH /* \SMYH */
                        }
                        ElseIf ((CICF == 0x0B))
                        {
                            CICM = SMMC /* \SMMC */
                        }
                        ElseIf ((CICF == 0x0D))
                        {
                            CICM = SPSC /* \SPSC */
                        }
                        ElseIf ((CICF == 0x0F))
                        {
                            CICM = SAMT /* \SAMT */
                        }
                        ElseIf ((CICF == 0x07))
                        {
                            CICM = SADM /* \SADM */
                        }
                        Else
                        {
                            CICM = 0x0F
                        }

                        Local1 |= (CICM << 0x0C)
                        Local1 |= (Local5 << 0x10)
                        Local1 |= One
                        If (DHKC)
                        {
                            MHKQ (0x6032)
                        }
                    }
                    Case (0x07)
                    {
                        Local1 = ((Local0 >> 0x10) & 0xFF)
                        Local2 = ((Local0 >> 0x18) & 0xFF)
                        If ((CICF == 0x0F))
                        {
                            ADBG ("Set Thermal Table by DTT")
                            ADBG ("ID:")
                            ADBG (Local1)
                            TTCI = Local1
                            If ((Local2 == One))
                            {
                                MHKQ (0x8034)
                            }
                            Else
                            {
                                MHKQ (0x8035)
                            }
                        }
                        Else
                        {
                            Local1 = Zero
                        }

                        Local1 = (Local1 << 0x10)
                        Local1 |= One
                    }
                    Case (0x08)
                    {
                        Local1 = (VMMC << 0x08)
                        Local1 |= (SMMC << 0x0C)
                        Local1 |= Zero
                        Local1 |= One
                    }
                    Case (0x02)
                    {
                        Local5 = One
                        Local5 |= (VCQL << One)
                        Local5 |= (VTIO << 0x02)
                        Local5 |= (VMYH << 0x03)
                        Local5 |= (VSTP << 0x04)
                        Local5 |= (VLCM << 0x05)
                        Local5 |= (VDGM << 0x06)
                        Local5 |= (VADM << 0x07)
                        Local5 |= (VDMC << 0x08)
                        Local5 |= (VTMS << 0x09)
                        Local5 |= (VDLS << 0x0A)
                        Local5 |= (VMMC << 0x0B)
                        Local5 |= (VMSC << 0x0C)
                        Local5 |= (VPSC << 0x0D)
                        Local5 |= (VCSC << 0x0E)
                        Local5 |= (VAMT << 0x0F)
                        Local1 = (CICF << 0x08)
                        If ((CICF == 0x03))
                        {
                            CICM = SMYH /* \SMYH */
                        }
                        ElseIf ((CICF == 0x0B))
                        {
                            CICM = SMMC /* \SMMC */
                        }
                        ElseIf ((CICF == 0x0D))
                        {
                            CICM = SPSC /* \SPSC */
                        }
                        ElseIf ((CICF == 0x0F))
                        {
                            CICM = SAMT /* \SAMT */
                        }
                        ElseIf ((CICF == 0x07))
                        {
                            CICM = SADM /* \SADM */
                        }
                        Else
                        {
                            CICM = 0x0F
                        }

                        Local1 |= (CICM << 0x0C)
                        Local1 |= (Local5 << 0x10)
                        Local1 |= One
                    }
                    Case (0x09)
                    {
                        MSCB = One
                        Local1 = Zero
                        Local1 |= One
                    }
                    Case (0x0A)
                    {
                        If ((UPMC == One))
                        {
                            ADBG ("Ultra-Performance mode supported")
                            Local1 = 0x0100
                            Local1 |= One
                        }
                        Else
                        {
                            ADBG ("Ultra-Performance mode not supported")
                            Local1 = Zero
                            Local1 |= One
                        }
                    }
                    Case (0x03)
                    {
                        Local1 = (FCAP << 0x10)
                        Local1 |= One
                    }
                    Case (0x04)
                    {
                        Local1 = (MYHC << 0x10)
                        Local1 |= One
                    }
                    Case (0x06)
                    {
                        Local2 = ((Local0 >> 0x09) & 0x0F)
                        If ((Local2 != One))
                        {
                            Local1 = (MMCC << 0x10)
                        }
                        Else
                        {
                            Local1 = Zero
                        }

                        Local1 |= One
                    }
                    Case (0x05)
                    {
                        If (Ones)
                        {
                            Local1 = 0x0500
                            Local1 |= 0x10E00000
                        }

                        Local1 |= One
                    }
                    Case (0x0100)
                    {
                        Local1 = 0x10010000
                        Local1 |= One
                    }
                    Case (0x01FF)
                    {
                        ADBG (" DYTC_CMD_RESET")
                        VCQL = Zero
                        VTIO = Zero
                        VMYH = Zero
                        VSTP = Zero
                        VLCM = Zero
                        VDGM = Zero
                        VADM = Zero
                        VDMC = Zero
                        VTMS = Zero
                        VDLS = Zero
                        VMMC = Zero
                        VMSC = Zero
                        VPSC = Zero
                        VCSC = Zero
                        VAMT = Zero
                        SMYH = Zero
                        SMMC = Zero
                        SPSC = Zero
                        SAMT = Zero
                        SADM = Zero
                        SCPF (Zero)
                        CICM = 0x0F
                        Local5 = VSTD /* \VSTD */
                        Local5 |= (VCQL << One)
                        Local5 |= (VTIO << 0x02)
                        Local5 |= (VMYH << 0x03)
                        Local5 |= (VSTP << 0x04)
                        Local5 |= (VLCM << 0x05)
                        Local5 |= (VDGM << 0x06)
                        Local5 |= (VADM << 0x07)
                        Local5 |= (VDMC << 0x08)
                        Local5 |= (VTMS << 0x09)
                        Local5 |= (VDLS << 0x0A)
                        Local5 |= (VMMC << 0x0B)
                        Local5 |= (VMSC << 0x0C)
                        Local5 |= (VPSC << 0x0D)
                        Local5 |= (VCSC << 0x0E)
                        Local5 |= (VAMT << 0x0F)
                        Local1 = (CICF << 0x08)
                        Local1 |= (CICM << 0x0C)
                        Local1 |= (Local5 << 0x10)
                        Local1 |= One
                    }
                    Default
                    {
                        Local1 = 0x04
                    }

                }
            }
            Else
            {
                Local1 = 0x08
            }

            ADBG (Concatenate ("DYTC END=", ToHexString (Local1)))
            Return (Local1)
        }

        Name (ANGN, Zero)
        Name (WKSX, Zero)
        Name (GPTL, 0x41)
        Name (LDST, 0xD1)
        Method (NVST, 1, NotSerialized)
        {
            GPTL = Arg0
            If (CondRefOf (\_SB.PC00.PEG2.PEGP.NVST))
            {
                ^^^^PEG2.PEGP.RQTC = One
                ^^^^PEG2.PEGP.NVST ()
            }
        }

        Method (NVSD, 1, NotSerialized)
        {
            ADBG ("NVSD Entry")
            ADBG (Concatenate ("ANGN =", ToHexString (ANGN)))
            ADBG (Concatenate ("Input Arg0 =", ToHexString (Arg0)))
            ADBG (Concatenate ("DGPU_SCOPE =", ToHexString (Arg0)))
            If ((ANGN == One))
            {
                Notify (^^^^PEG2.PEGP, Arg0)
                LDST = Arg0
            }

            ADBG ("NVSD End")
        }

        Name (NDPT, Zero)
        Method (SCPF, 1, Serialized)
        {
            CICF = Arg0
            ADBG ("SCPF Start")
            ADBG (Concatenate ("CICF =", ToHexString (CICF)))
            ADBG (Concatenate ("CICM =", ToHexString (CICM)))
            If (!CondRefOf (\_SB.IETM.DPTE))
            {
                ADBG (" No DPTE")
                If ((CLVL > One))
                {
                    NDPT = One
                }
            }
            ElseIf ((^^^^^IETM.DPTE == Zero))
            {
                ADBG (" DPTE = 0 ")
                If ((CLVL > One))
                {
                    NDPT = One
                }
            }
            Else
            {
                ADBG (" DPTE = 1 ")
                NDPT = Zero
            }

            FLPF (NDPT)
            If (((NDPT == One) && (CPL1 != Zero)))
            {
                ADBG (Concatenate ("PL1 Setting=", ToHexString (CPL1)))
                PPL1 = CPL1 /* \CPL1 */
                PL1E = One
                PL1S (CPL1)
            }

            If (CondRefOf (\_SB.IETM.DPTE))
            {
                If ((^^^^^IETM.DPTE & One))
                {
                    Notify (IETM, 0x88) // Device-Specific
                }
            }

            ADBG (Concatenate ("DGPU TC Setting=", ToHexString (CGTC)))
            If ((CGTC != Zero))
            {
                NVST (CGTC)
            }

            If (CondRefOf (\_SB.PC00.PEG2.PEGP.NVDN))
            {
                ^^^^PEG2.PEGP.NVDN ()
            }

            ADBG ("SCPF End")
        }
    }

    Scope (_SB.PC00)
    {
        Method (PL1S, 1, NotSerialized)
        {
            ADBG (Concatenate ("PL1S Value1=", ToHexString (Arg0)))
            ADBG (Concatenate ("PL1S PTDP1 =", ToHexString (PTDP)))
            If ((PTDP == Arg0))
            {
                PT0D = Arg0
                CTCN ()
                ADBG (" MMIO 1")
            }
            ElseIf ((PTDP > Arg0))
            {
                If ((CLVL >= One))
                {
                    PT1D = Arg0
                    CTCD ()
                    ADBG (" MMIO 2")
                }
                Else
                {
                    PT0D = Arg0
                    CTCN ()
                    ADBG (" MMIO 3")
                }
            }
            ElseIf ((PTDP < Arg0))
            {
                If ((CLVL > 0x02))
                {
                    PT0D = Arg0
                    CTCN ()
                    ADBG (" MMIO 4")
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
    }

    Scope (_SB.PC00.LPCB.EC)
    {
        Method (ATMC, 0, NotSerialized)
        {
            If ((WNTF && TATC))
            {
                If (HPAC)
                {
                    Local0 = TCFA /* \TCFA */
                    Local1 = TCTA /* \TCTA */
                    Local2 = ((Local1 << 0x04) | Local0)
                    Local3 = (Local2 ^ ATMX) /* \_SB_.PC00.LPCB.EC__.ATMX */
                    ATMX = Local2
                    If ((TCTA == Zero))
                    {
                        TCRT = TCR0 /* \TCR0 */
                        TPSV = TPS0 /* \TPS0 */
                    }
                    ElseIf ((TCTA == One))
                    {
                        TCRT = TCR1 /* \TCR1 */
                        TPSV = TPS1 /* \TPS1 */
                    }
                    Else
                    {
                    }
                }
                Else
                {
                    Local0 = TCFD /* \TCFD */
                    Local1 = TCTD /* \TCTD */
                    Local2 = ((Local1 << 0x04) | Local0)
                    Local3 = (Local2 ^ ATMX) /* \_SB_.PC00.LPCB.EC__.ATMX */
                    ATMX = Local2
                    If ((TCTD == Zero))
                    {
                        TCRT = TCR0 /* \TCR0 */
                        TPSV = TPS0 /* \TPS0 */
                    }
                    ElseIf ((TCTD == One))
                    {
                        TCRT = TCR1 /* \TCR1 */
                        TPSV = TPS1 /* \TPS1 */
                    }
                    Else
                    {
                    }
                }

                If (Local3)
                {
                    If (^HKEY.DHKC)
                    {
                        ^HKEY.MHKQ (0x6030)
                    }
                }

                Notify (\_TZ.THM0, 0x81) // Thermal Trip Point Change
            }
        }
    }

    Scope (_SB.PC00.LPCB.EC)
    {
        Device (ITSD)
        {
            Name (_HID, EisaId ("LEN0100"))  // _HID: Hardware ID
            _HID = 0x0001AE30
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_TZ)
    {
        ThermalZone (THM0)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (TCRT) /* \TCRT */
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (H8DR)
                {
                    Local0 = \_SB.PC00.LPCB.EC.TMP0
                    Local1 = \_SB.PC00.LPCB.EC.TSL2
                    Local2 = \_SB.PC00.LPCB.EC.TSL3
                }
                Else
                {
                    Local0 = RBEC (0x78)
                    Local1 = (RBEC (0x8A) & 0x7F)
                    Local2 = (RBEC (0x8B) & 0x7F)
                }

                If ((Local0 == 0x80))
                {
                    Local0 = 0x30
                }

                If (Local2)
                {
                    TSDL ()
                    Return (TCRT) /* \TCRT */
                }

                If (!\_SB.PC00.LPCB.EC.HKEY.DHKC)
                {
                    If (Local1)
                    {
                        TSDL ()
                        Return (TCRT) /* \TCRT */
                    }
                }

                Return (TC2K (Local0))
            }
        }

        Method (TC2K, 1, Serialized)
        {
            Local0 = ((Arg0 * 0x0A) + 0x0AAC)
            If ((Local0 <= 0x0AAC))
            {
                Local0 = 0x0C8C
            }
            ElseIf ((Local0 > 0x0FAC))
            {
                Local0 = 0x0C8C
            }

            Return (Local0)
        }

        Method (_DEP, 0, Serialized)  // _DEP: Dependencies
        {
            Return (Package (0x01)
            {
                \_SB.MSKN
            })
        }
    }

    Scope (_SB.PC00.LPCB.EC)
    {
        Method (_Q40, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Notify (\_TZ.THM0, 0x80) // Thermal Status Change
            If (H8DR)
            {
                Local1 = TSL2 /* \_SB_.PC00.LPCB.EC__.TSL2 */
                Local2 = TSL1 /* \_SB_.PC00.LPCB.EC__.TSL1 */
                Local0 = TSL0 /* \_SB_.PC00.LPCB.EC__.TSL0 */
            }
            Else
            {
                Local1 = (RBEC (0x8A) & 0x7F)
                Local2 = (RBEC (0x89) & 0x7F)
                Local0 = (RBEC (0x88) & 0x7F)
            }

            If ((Local2 & 0x76))
            {
                ^HKEY.DYTC (0x001F4001)
            }
            Else
            {
                ^HKEY.DYTC (0x000F4001)
            }

            If ((Local0 & 0x76))
            {
                If (CondRefOf (\_SB.IETM.DPTE))
                {
                    If ((^^^^IETM.DPTE == Zero))
                    {
                        ^HKEY.DYTC (0x001FE001)
                    }
                }
                Else
                {
                    ^HKEY.DYTC (0x001FE001)
                }
            }
            Else
            {
                ^HKEY.DYTC (0x000FE001)
            }

            If ((^HKEY.DHKC && Local1))
            {
                ^HKEY.MHKQ (0x6022)
            }

            If (!VIGD)
            {
                VTHR ()
            }
        }
    }

    Scope (_SI)
    {
        Method (_SST, 1, NotSerialized)  // _SST: System Status
        {
            If ((Arg0 == Zero))
            {
                \_SB.PC00.LPCB.EC.LED (Zero, Zero)
                \_SB.PC00.LPCB.EC.LED (0x0A, Zero)
                \_SB.PC00.LPCB.EC.LED (0x07, Zero)
            }

            If ((Arg0 == One))
            {
                If ((SPS || WNTF))
                {
                    \_SB.PC00.LPCB.EC.BEEP (0x05)
                }

                \_SB.PC00.LPCB.EC.LED (Zero, 0x80)
                \_SB.PC00.LPCB.EC.LED (0x0A, 0x80)
                \_SB.PC00.LPCB.EC.LED (0x07, Zero)
            }

            If ((Arg0 == 0x02))
            {
                \_SB.PC00.LPCB.EC.LED (Zero, 0xC0)
                \_SB.PC00.LPCB.EC.LED (0x0A, 0xC0)
                \_SB.PC00.LPCB.EC.LED (0x07, 0xC0)
            }

            If ((Arg0 == 0x03))
            {
                If ((SPS > 0x03))
                {
                    \_SB.PC00.LPCB.EC.BEEP (0x07)
                }
                ElseIf ((SPS == 0x03))
                {
                    \_SB.PC00.LPCB.EC.BEEP (0x03)
                }
                Else
                {
                    \_SB.PC00.LPCB.EC.BEEP (0x04)
                }

                If ((SPS == 0x03)) {}
                Else
                {
                    \_SB.PC00.LPCB.EC.LED (Zero, 0x80)
                    \_SB.PC00.LPCB.EC.LED (0x0A, 0x80)
                }

                \_SB.PC00.LPCB.EC.LED (0x07, 0xC0)
                \_SB.PC00.LPCB.EC.LED (Zero, 0xC0)
                \_SB.PC00.LPCB.EC.LED (0x0A, 0xC0)
            }

            If ((Arg0 == 0x04))
            {
                \_SB.PC00.LPCB.EC.BEEP (0x03)
                \_SB.PC00.LPCB.EC.LED (0x07, 0xC0)
                \_SB.PC00.LPCB.EC.LED (Zero, 0xC0)
                \_SB.PC00.LPCB.EC.LED (0x0A, 0xC0)
            }
        }
    }

    Scope (_SB.PC00.RP01.PXSX)
    {
        Name (WW5G, Zero)
        Name (WWQC, Zero)
        Name (WWFC, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If (CondRefOf (VDID))
            {
                If ((VDID == 0x10011EAC))
                {
                    WWQC = One
                }

                If ((VDID == 0x10021EAC))
                {
                    WWQC = One
                }

                If ((VDID == 0xE0AB105B))
                {
                    WW5G = One
                    WWFC = One
                }

                If ((VDID == 0x4D7514C3))
                {
                    WW5G = One
                }
            }

            ^^^LPCB.EC.DPRS ()
        }

        Method (ISQC, 0, NotSerialized)
        {
            Return (WWQC) /* \_SB_.PC00.RP01.PXSX.WWQC */
        }

        Method (ISFC, 0, NotSerialized)
        {
            Return (WWFC) /* \_SB_.PC00.RP01.PXSX.WWFC */
        }

        Method (IS5G, 0, NotSerialized)
        {
            Return (WW5G) /* \_SB_.PC00.RP01.PXSX.WW5G */
        }
    }

    Scope (_SB)
    {
        Device (MSKN)
        {
            Name (_HID, "LEN009F")  // _HID: Hardware ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (^^PC00.RP01.PXSX.ISFC ())
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (\)
    {
        Name (UPC1, Package (0x04)
        {
            0xFF, 
            0x09, 
            Zero, 
            Zero
        })
        Name (PLU1, Buffer (0x10)
        {
            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00,  // ........
            /* 0008 */  0x01, 0x04, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00   // ........
        })
        Name (UPC3, Package (0x04)
        {
            0xFF, 
            0x09, 
            Zero, 
            Zero
        })
        Name (PLD3, Buffer (0x10)
        {
            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00,  // ........
            /* 0008 */  0x01, 0x04, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00   // ........
        })
        Name (UPCL, Package (0x04)
        {
            0xFF, 
            Zero, 
            Zero, 
            Zero
        })
        Name (PLDL, Buffer (0x10)
        {
            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x51, 0x11, 0x80, 0x01, 0x03, 0x00, 0x00, 0x00   // Q.......
        })
        Name (UPCR, Package (0x04)
        {
            0xFF, 
            Zero, 
            Zero, 
            Zero
        })
        Name (PLDR, Buffer (0x10)
        {
            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x59, 0x12, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00   // Y.......
        })
        Name (UPCI, Package (0x04)
        {
            Zero, 
            0xFF, 
            Zero, 
            Zero
        })
        Name (PLDI, Buffer (0x10)
        {
            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
        })
        Name (PLDC, Buffer (0x14)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // $.......
            /* 0010 */  0xDD, 0x00, 0x95, 0x00                           // ....
        })
        Method (UCPD, 2, Serialized)
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PLDP, Buffer (0x10) {})
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    If ((Arg1 == One))
                    {
                        CopyObject (UPC1, UPCP) /* \UCPD.UPCP */
                        Return (UPCP) /* \UCPD.UPCP */
                    }
                    Else
                    {
                        PLDP = PLU1 /* \PLU1 */
                        Return (PLDP) /* \UCPD.PLDP */
                    }
                }
                Case (0x02)
                {
                    If ((Arg1 == One))
                    {
                        CopyObject (UPC3, UPCP) /* \UCPD.UPCP */
                        Return (UPCP) /* \UCPD.UPCP */
                    }
                    Else
                    {
                        PLDP = PLD3 /* \PLD3 */
                        Return (PLDP) /* \UCPD.PLDP */
                    }
                }
                Default
                {
                    If ((Arg1 == One))
                    {
                        CopyObject (UPCI, UPCP) /* \UCPD.UPCP */
                        Return (UPCP) /* \UCPD.UPCP */
                    }
                    Else
                    {
                        PLDP = PLDI /* \PLDI */
                        Return (PLDP) /* \UCPD.PLDP */
                    }
                }

            }
        }

        Method (CCPD, 2, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Return (UCPD (0xFF, Arg1))
                }
                Case (One)
                {
                    Return (UCPD (One, Arg1))
                }
                Case (0x02)
                {
                    Return (UCPD (0xFF, Arg1))
                }
                Case (0x03)
                {
                    Return (UCPD (0x02, Arg1))
                }
                Case (0x04)
                {
                    Return (UCPD (0xFF, Arg1))
                }
                Default
                {
                    Return (UCPD (0xFF, Arg1))
                }

            }
        }
    }

    Scope (_SB)
    {
        Device (FAN0)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_STR, Unicode ("CPU fan"))  // _STR: Description String
            Name (LRPM, Zero)
            Name (URPM, 0x2710)
            Name (GRAN, 0x64)
            Name (CRPM, Zero)
            Name (TFST, Package (0x03)
            {
                Zero, 
                One, 
                0xFFFFFFFF
            })
            Method (SRPM, 1, Serialized)
            {
                CRPM = (Arg0 * GRAN) /* \_SB_.FAN0.GRAN */
            }

            Method (GRPM, 0, Serialized)
            {
                Local0 = Zero
                If (((SPSC >= 0x05) && (SPSC <= 0x06)))
                {
                    Local0 = CRPM /* \_SB_.FAN0.CRPM */
                }

                Return (Local0)
            }

            Method (_FST, 0, NotSerialized)  // _FST: Fan Status
            {
                TFST [0x02] = GRPM ()
                Return (TFST) /* \_SB_.FAN0.TFST */
            }

            Method (CRNF, 0, Serialized)
            {
                Local0 = GRPM ()
                If (((Local0 > URPM) || (Local0 < LRPM)))
                {
                    Notify (FAN0, 0x80) // Status Change
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("a7611840-99fe-41ae-a488-35c75926c8eb") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (GRAN) /* \_SB_.FAN0.GRAN */
                        }
                        Case (0x02)
                        {
                            LRPM = DerefOf (Arg3 [Zero])
                            URPM = DerefOf (Arg3 [One])
                            Return (Zero)
                        }
                        Case (0x03)
                        {
                            Return (Package (0x04)
                            {
                                0x03E8, 
                                0x07D0, 
                                ((DPNT - One) * GRAN),                                 0x2710
                            })
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }
}



ECDT
----
[000h 0000   4]                    Signature : "ECDT"    [Embedded Controller Boot Resources Table]
[004h 0004   4]                 Table Length : 00000053
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 8D
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


[024h 0036  12]      Command/Status Register : [Generic Address Structure]
[024h 0036   1]                     Space ID : 01 [SystemIO]
[025h 0037   1]                    Bit Width : 08
[026h 0038   1]                   Bit Offset : 00
[027h 0039   1]         Encoded Access Width : 00 [Undefined/Legacy]
[028h 0040   8]                      Address : 0000000000000066

[030h 0048  12]                Data Register : [Generic Address Structure]
[030h 0048   1]                     Space ID : 01 [SystemIO]
[031h 0049   1]                    Bit Width : 08
[032h 0050   1]                   Bit Offset : 00
[033h 0051   1]         Encoded Access Width : 00 [Undefined/Legacy]
[034h 0052   8]                      Address : 0000000000000062

[03Ch 0060   4]                          UID : 00000000
[040h 0064   1]                   GPE Number : 6E
[041h 0065  18]                     Namepath : "\_SB.PC00.LPCB.EC"

Raw Table Data: Length 83 (0x53)

    0000: 45 43 44 54 53 00 00 00 01 8D 4C 45 4E 4F 56 4F  // ECDTS.....LENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 01 08 00 00 66 00 00 00 00 00 00 00  // ........f.......
    0030: 01 08 00 00 62 00 00 00 00 00 00 00 00 00 00 00  // ....b...........
    0040: 6E 5C 5F 53 42 2E 50 43 30 30 2E 4C 50 43 42 2E  // n\_SB.PC00.LPCB.
    0050: 45 43 00                                         // EC.


FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : 83
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]                 FACS Address : 93693000
[028h 0040   4]                 DSDT Address : 8F844000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : F0
[035h 0053   1]           ACPI Disable Value : F1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00001800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00001804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00001850
[04Ch 0076   4]       PM Timer Block Address : 00001808
[050h 0080   4]           GPE0 Block Address : 00001860
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 20
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 10
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0001
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0020C4F5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 1
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 1
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 1

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 03
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 000000008F844000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000001800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000001804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000001850

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000001808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 00
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000001860

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 83 4C 45 4E 4F 56 4F  // FACP......LENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 00 30 69 93 00 40 84 8F 00 02 09 00  // .....0i..@......
    0030: B2 00 00 00 F0 F1 00 00 00 18 00 00 00 00 00 00  // ................
    0040: 04 18 00 00 00 00 00 00 50 18 00 00 08 18 00 00  // ........P.......
    0050: 60 18 00 00 00 00 00 00 04 02 01 04 20 00 10 00  // `........... ...
    0060: 65 00 E9 03 00 00 00 00 01 03 0D 00 32 01 00 00  // e...........2...
    0070: F5 C4 20 00 01 08 00 01 F9 0C 00 00 00 00 00 00  // .. .............
    0080: 06 00 00 03 00 00 00 00 00 00 00 00 00 40 84 8F  // .............@..
    0090: 00 00 00 00 01 20 00 02 00 18 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 18 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 18 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 18 00 00 00 00 00 00 01 00 00 01  // . ..............
    00E0: 60 18 00 00 00 00 00 00 01 00 00 01 00 00 00 00  // `...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00002DAD
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 AD 2D 00 00 00 00 00 00  // FACS@....-......
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000034
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 20
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00001150


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 00000000904CF000

Raw Table Data: Length 52 (0x34)

    0000: 46 50 44 54 34 00 00 00 01 20 4C 45 4E 4F 56 4F  // FPDT4.... LENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 50 11 00 00 00 00 10 01 00 00 00 00 00 F0 4C 90  // P.............L.
    0030: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 1E
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 1E 4C 45 4E 4F 56 4F  // HPET8.....LENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 01 A2 86 80 00 40 00 00 00 00 D0 FE  // .........@......
    0030: 00 00 00 00 00 80 00 00                          // ........


LPIT
----
[000h 0000   4]                    Signature : "LPIT"    [Low Power Idle Table]
[004h 0004   4]                 Table Length : 000000CC
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 7B
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[028h 0040   4]                       Length : 00000038
[02Ch 0044   2]                    Unique ID : 0000
[02Eh 0046   2]                     Reserved : 0000
[030h 0048   4]        Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[034h 0052  12]                Entry Trigger : [Generic Address Structure]
[034h 0052   1]                     Space ID : 7F [FunctionalFixedHW]
[035h 0053   1]                    Bit Width : 01
[036h 0054   1]                   Bit Offset : 02
[037h 0055   1]         Encoded Access Width : 00 [Undefined/Legacy]
[038h 0056   8]                      Address : 0000000000000060

[040h 0064   4]                    Residency : 00007530
[044h 0068   4]                      Latency : 00000BB8
[048h 0072  12]            Residency Counter : [Generic Address Structure]
[048h 0072   1]                     Space ID : 7F [FunctionalFixedHW]
[049h 0073   1]                    Bit Width : 40
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 00 [Undefined/Legacy]
[04Ch 0076   8]                      Address : 0000000000000632

[054h 0084   8]            Counter Frequency : 0000000000000000

[05Ch 0092   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[060h 0096   4]                       Length : 00000038
[064h 0100   2]                    Unique ID : 0001
[066h 0102   2]                     Reserved : 0000
[068h 0104   4]        Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[06Ch 0108  12]                Entry Trigger : [Generic Address Structure]
[06Ch 0108   1]                     Space ID : 7F [FunctionalFixedHW]
[06Dh 0109   1]                    Bit Width : 01
[06Eh 0110   1]                   Bit Offset : 02
[06Fh 0111   1]         Encoded Access Width : 00 [Undefined/Legacy]
[070h 0112   8]                      Address : 0000000000000060

[078h 0120   4]                    Residency : 00007530
[07Ch 0124   4]                      Latency : 00000BB8
[080h 0128  12]            Residency Counter : [Generic Address Structure]
[080h 0128   1]                     Space ID : 00 [SystemMemory]
[081h 0129   1]                    Bit Width : 20
[082h 0130   1]                   Bit Offset : 00
[083h 0131   1]         Encoded Access Width : 03 [DWord Access:32]
[084h 0132   8]                      Address : 00000000FE00193C

[08Ch 0140   8]            Counter Frequency : 0000000000002005

[094h 0148   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[098h 0152   4]                       Length : 00000038
[09Ch 0156   2]                    Unique ID : 0002
[09Eh 0158   2]                     Reserved : 0000
[0A0h 0160   4]        Flags (decoded below) : 00000001
                              State Disabled : 1
                                  No Counter : 0

[0A4h 0164  12]                Entry Trigger : [Generic Address Structure]
[0A4h 0164   1]                     Space ID : 7F [FunctionalFixedHW]
[0A5h 0165   1]                    Bit Width : 01
[0A6h 0166   1]                   Bit Offset : 02
[0A7h 0167   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A8h 0168   8]                      Address : 0000000000000060

[0B0h 0176   4]                    Residency : 00007530
[0B4h 0180   4]                      Latency : 00000BB8
[0B8h 0184  12]            Residency Counter : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 20
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 03 [DWord Access:32]
[0BCh 0188   8]                      Address : 00000000000000FF

[0C4h 0196   8]            Counter Frequency : 0000000000000000


Raw Table Data: Length 204 (0xCC)

    0000: 4C 50 49 54 CC 00 00 00 01 7B 4C 45 4E 4F 56 4F  // LPIT.....{LENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00  // ........8.......
    0030: 00 00 00 00 7F 01 02 00 60 00 00 00 00 00 00 00  // ........`.......
    0040: 30 75 00 00 B8 0B 00 00 7F 40 00 00 32 06 00 00  // 0u.......@..2...
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 38 00 00 00 01 00 00 00 00 00 00 00 7F 01 02 00  // 8...............
    0070: 60 00 00 00 00 00 00 00 30 75 00 00 B8 0B 00 00  // `.......0u......
    0080: 00 20 00 03 3C 19 00 FE 00 00 00 00 05 20 00 00  // . ..<........ ..
    0090: 00 00 00 00 00 00 00 00 38 00 00 00 02 00 00 00  // ........8.......
    00A0: 01 00 00 00 7F 01 02 00 60 00 00 00 00 00 00 00  // ........`.......
    00B0: 30 75 00 00 B8 0B 00 00 00 20 00 03 FF 00 00 00  // 0u....... ......
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : A6
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000C0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 A6 4C 45 4E 4F 56 4F  // MCFG<.....LENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


MSDM
----
[000h 0000   4]                    Signature : "MSDM"    [Microsoft Data Management table]
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 78
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036  49] Software Licensing Structure : \
    01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 \
    1D 00 00 00 43 47 48 54 4E 2D 46 48 39 43 4A 2D \
    43 34 4D 42 59 2D 59 37 42 44 36 2D 57 58 43 32 \
    54 

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 78 4C 45 4E 4F 56 4F  // MSDMU....xLENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 43 47 48 54 4E 2D 46 48  // ........CGHTN-FH
    0040: 39 43 4A 2D 43 34 4D 42 59 2D 59 37 42 44 36 2D  // 9CJ-C4MBY-Y7BD6-
    0050: 57 58 43 32 54                                   // WXC2T


NHLT
----
[000h 0000   4]                    Signature : "NHLT"    
[004h 0004   4]                 Table Length : 00001B64
[008h 0008   1]                     Revision : 00
[009h 0009   1]                     Checksum : 7A
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [NHLT]


Raw Table Data: Length 7012 (0x1B64)

    0000: 4E 48 4C 54 64 1B 00 00 00 7A 4C 45 4E 4F 56 4F  // NHLTd....zLENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 03 AB 01 00 00 03 00 86 80 30 AE 01  // .............0..
    0030: 00 01 00 00 00 00 00 02 02 00 00 00 00 00 03 FE  // ................
    0040: FF 01 00 40 1F 00 00 80 3E 00 00 02 00 10 00 16  // ...@....>.......
    0050: 00 10 00 04 00 00 00 01 00 00 00 00 00 10 00 80  // ................
    0060: 00 00 AA 00 38 9B 71 54 00 00 00 00 00 00 00 F0  // ....8.qT........
    0070: FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3F  // ...............?
    0090: 00 C0 80 00 00 40 D3 00 00 00 00 05 00 00 02 01  // .....@..........
    00A0: 00 00 00 01 00 00 00 02 40 00 00 00 00 00 00 00  // ........@.......
    00B0: 00 02 07 00 00 00 00 01 00 00 00 00 00 00 00 FE  // ................
    00C0: FF 01 00 80 3E 00 00 00 7D 00 00 02 00 10 00 16  // ....>...}.......
    00D0: 00 10 00 04 00 00 00 01 00 00 00 00 00 10 00 80  // ................
    00E0: 00 00 AA 00 38 9B 71 54 00 00 00 00 00 00 00 F0  // ....8.qT........
    00F0: FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3F  // ...............?
    0110: 00 C0 80 00 00 40 D3 00 00 00 00 05 00 00 02 01  // .....@..........
    0120: 00 00 00 01 00 00 00 02 40 00 00 00 00 00 00 00  // ........@.......
    0130: 00 02 07 00 00 00 00 01 00 00 00 00 00 00 00 FE  // ................
    0140: FF 02 00 80 BB 00 00 00 EE 02 00 04 00 10 00 16  // ................
    0150: 00 10 00 03 00 00 00 01 00 00 00 00 00 10 00 80  // ................
    0160: 00 00 AA 00 38 9B 71 64 00 00 00 00 00 00 00 10  // ....8.qd........
    0170: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0180: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 7F  // ................
    0190: 18 C0 C1 00 00 70 C0 00 00 00 00 05 02 01 02 03  // .....p..........
    01A0: 00 00 00 03 00 00 00 02 40 00 00 00 00 00 00 00  // ........@.......
    01B0: 0F 07 07 20 00 00 00 01 00 00 00 FF 0F 00 00 00  // ... ............
    01C0: 00 00 00 08 00 00 00 01 00 00 00 01 00 00 00 00  // ................
    01D0: 1B 01 00 00 03 00 86 80 30 AE 01 00 01 00 00 00  // ........0.......
    01E0: 00 01 02 02 00 00 00 00 00 02 FE FF 01 00 40 1F  // ..............@.
    01F0: 00 00 80 3E 00 00 02 00 10 00 16 00 10 00 04 00  // ...>............
    0200: 00 00 01 00 00 00 00 00 10 00 80 00 00 AA 00 38  // ...............8
    0210: 9B 71 54 00 00 00 00 00 00 00 F0 FF FF FF 00 00  // .qT.............
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0230: 00 00 00 00 00 00 00 00 00 00 3F 00 C0 80 00 00  // ..........?.....
    0240: 40 D3 00 00 00 00 05 00 00 02 01 00 00 00 01 00  // @...............
    0250: 00 00 02 40 00 00 00 00 00 00 00 00 02 07 00 00  // ...@............
    0260: 00 00 01 00 00 00 00 00 00 00 FE FF 01 00 80 3E  // ...............>
    0270: 00 00 00 7D 00 00 02 00 10 00 16 00 10 00 04 00  // ...}............
    0280: 00 00 01 00 00 00 00 00 10 00 80 00 00 AA 00 38  // ...............8
    0290: 9B 71 54 00 00 00 00 00 00 00 F0 FF FF FF 00 00  // .qT.............
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 00 00 00 00 00 00 00 00 00 3F 00 C0 80 00 00  // ..........?.....
    02C0: 40 D3 00 00 00 00 05 00 00 02 01 00 00 00 01 00  // @...............
    02D0: 00 00 02 40 00 00 00 00 00 00 00 00 02 07 00 00  // ...@............
    02E0: 00 00 01 00 00 00 00 00 00 00 00 71 18 00 00 02  // ...........q....
    02F0: 00 86 80 20 AE 01 00 01 00 00 00 00 01 00 30 00  // ... ..........0.
    0300: 00 00 00 01 0F 02 01 04 00 00 E7 FF 00 00 14 28  // ...............(
    0310: 00 00 00 00 C4 FF 3C 00 CE FF 32 00 01 04 00 00  // ......<...2.....
    0320: 19 00 00 00 14 28 00 00 00 00 C4 FF 3C 00 CE FF  // .....(......<...
    0330: 32 00 02 FE FF 02 00 80 BB 00 00 00 EE 02 00 04  // 2...............
    0340: 00 10 00 16 00 10 00 03 00 00 00 01 00 00 00 00  // ................
    0350: 00 10 00 80 00 00 AA 00 38 9B 71 E8 0B 00 00 01  // ........8.q.....
    0360: 00 00 00 10 FF FF FF 10 FF FF FF FF FF FF FF FF  // ................
    0370: FF FF FF 03 00 00 00 03 00 00 00 03 00 30 00 03  // .............0..
    0380: 00 30 00 03 00 00 00 01 C0 00 00 03 18 00 0B 00  // .0..............
    0390: 00 00 00 03 0E 00 00 00 00 00 00 00 00 00 00 00  // ................
    03A0: 00 00 00 00 00 00 00 91 00 00 00 76 00 01 00 00  // ...........v....
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 00 00 00 00 00 00 91 00 00 00 E8 01 05 00 00  // ................
    03D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03E0: 00 00 00 00 00 00 00 49 00 00 40 81 01 40 40 6D  // .......I..@..@@m
    03F0: 03 80 40 53 04 C0 40 78 02 00 41 19 FF 4F 41 ED  // ..@S..@x..A..OA.
    0400: FD 8F 41 37 00 C0 41 45 02 00 42 8C 00 40 42 9B  // ..A7..AE..B..@B.
    0410: FD 8F 42 9D FE CF 42 6C 02 00 43 67 02 40 43 B1  // ..B...Bl..Cg.@C.
    0420: FD 8F 43 25 FC CF 43 6F 01 00 44 21 05 40 44 F3  // ..C%..Co..D!.@D.
    0430: FF 8F 44 C4 F9 CF 44 F9 FD 0F 45 BF 06 40 45 8E  // ..D...D...E..@E.
    0440: 04 80 45 73 F9 CF 45 96 F8 0F 46 72 05 40 46 69  // ..Es..E...Fr.@Fi
    0450: 0A 80 46 CF FC CF 46 D1 F2 0F 47 A4 FF 4F 47 25  // ..F...F...G..OG%
    0460: 0F 80 47 FC 04 C0 47 13 F0 0F 48 93 F5 4F 48 33  // ..G...G...H..OH3
    0470: 0F 80 48 68 10 C0 48 75 F3 0F 49 99 E9 4F 49 A2  // ..Hh..Hu..I..OI.
    0480: 07 80 49 90 1B C0 49 65 FF 0F 4A C2 E0 4F 4A 99  // ..I...Ie..J..OJ.
    0490: F7 8F 4A 92 20 C0 4A C4 12 00 4B 03 E1 4F 4B 2C  // ..J. .J...K..OK,
    04A0: E2 8F 4B F2 19 C0 4B A3 28 00 4C F5 EE 4F 4C 29  // ..K...K.(.L..OL)
    04B0: CE 8F 4C 84 04 C0 4C 40 38 00 4D 2C 0B 40 4D 5E  // ..L...L@8.M,.@M^
    04C0: C5 8F 4D E9 E2 CF 4D F5 37 00 4E F8 2F 40 4E 92  // ..M...M.7.N./@N.
    04D0: D0 8F 4E E1 BD CF 4E DD 20 00 4F 18 52 40 4F 4F  // ..N...N. .O.R@OO
    04E0: F4 8F 4F B2 A2 CF 4F 4D F0 0F 50 08 60 40 50 78  // ..O...OM..P.`@Px
    04F0: 2D 80 50 80 A5 CF 50 54 B3 0F 51 82 4A 40 51 A2  // -.P...PT..Q.J@Q.
    0500: 69 80 51 00 D0 CF 51 F5 7E 0F 52 5C 0B 40 52 CF  // i.Q...Q.~.R\.@R.
    0510: 8E 80 52 52 21 C0 52 DC 70 0F 53 96 AD 4F 53 06  // ..RR!.R.p.S..OS.
    0520: 7F 80 53 C7 82 C0 53 0A A3 0F 54 8D 53 4F 54 C1  // ..S...S...T.SOT.
    0530: 28 80 54 14 C8 C0 54 21 1B 00 55 23 32 4F 55 41  // (.T...T!..U#2OUA
    0540: 97 8F 55 F2 B6 C0 55 87 B6 00 56 02 81 4F 56 43  // ..U...U...V..OVC
    0550: 08 8F 56 34 25 C0 56 19 1C 01 57 7E 50 40 57 24  // ..V4%.V...W~P@W$
    0560: EE 8E 57 FD 2C CF 57 1C C9 00 58 71 47 41 58 01  // ..W.,.W...XqGAX.
    0570: C6 8F 58 BA 79 CE 58 6B 6E 0F 59 BE 5E 41 59 00  // ..X.y.Xkn.Y.^AY.
    0580: 70 81 59 76 5B CF 59 77 F7 0D 5A AC 51 4F 5A 09  // p.Yv[.Yw..Z.QOZ.
    0590: CF 81 5A 53 36 C2 5A 37 CE 0F 5B A8 3D 4D 5B B8  // ..ZS6.Z7..[.=M[.
    05A0: 65 8D 5B EF 50 C0 5B 37 8E 03 5C B2 E2 44 5C A5  // e.[.P.[7..\..D\.
    05B0: 11 84 5C A3 59 C2 5C 48 F2 00 5D 0E 3F 40 5D 39  // ..\.Y.\H..].?@]9
    05C0: 08 80 5D 1B 00 00 80 18 00 40 80 0A 00 80 80 D7  // ..]......@......
    05D0: FF CF 80 67 FF 0F 81 A2 FE 4F 81 76 FD 8F 81 DD  // ...g.....O.v....
    05E0: FB CF 81 E2 F9 0F 82 A8 F7 4F 82 67 F5 8F 82 6C  // .........O.g...l
    05F0: F3 CF 82 0B F2 0F 83 97 F1 4F 83 4A F2 8F 83 3B  // .........O.J...;
    0600: F4 CF 83 51 F7 0F 84 3F FB 4F 84 88 FF 8F 84 92  // ...Q...?.O......
    0610: 03 C0 84 C0 06 00 85 8B 08 40 85 A2 08 80 85 FD  // .........@......
    0620: 06 C0 85 E9 03 00 86 FC FF 4F 86 FF FB 8F 86 C8  // .........O......
    0630: F8 CF 86 0F F7 0F 87 45 F7 4F 87 75 F9 8F 87 3D  // .......E.O.u...=
    0640: FD CF 87 DA 01 00 88 4C 06 40 88 8F 09 80 88 D0  // .......L.@......
    0650: 0A C0 88 A4 09 00 89 27 06 40 89 FF 00 80 89 43  // .......'.@.....C
    0660: FB CF 89 3C F6 0F 8A 26 F3 4F 8A DD F2 8F 8A A5  // ...<...&.O......
    0670: F5 CF 8A 11 FB 0F 8B 0C 02 40 8B 0E 09 80 8B 72  // .........@.....r
    0680: 0E C0 8B D3 10 00 8C 69 0F 40 8C 42 0A 80 8C 4F  // .......i.@.B...O
    0690: 02 C0 8C 3E F9 0F 8D 20 F1 4F 8D F1 EB 8F 8D 25  // ...>... .O.....%
    06A0: EB CF 8D 3D EF 0F 8E 9D F7 4F 8E 96 02 80 8E BD  // ...=.....O......
    06B0: 0D C0 8E 6D 16 00 8F 67 1A 40 8F 5F 18 80 8F 61  // ...m...g.@._...a
    06C0: 10 C0 8F E4 03 00 90 8F F5 4F 90 AB E8 8F 90 66  // .........O.....f
    06D0: E0 CF 90 12 DF 0F 91 83 E5 4F 91 C3 F2 8F 91 27  // .........O.....'
    06E0: 04 C0 91 D6 15 00 92 99 23 40 92 D9 29 80 92 84  // ........#@..)...
    06F0: 26 C0 92 AA 19 00 93 A6 05 40 93 B6 EE 8F 93 21  // &........@.....!
    0700: DA CF 93 09 CD 0F 94 2C CB 4F 94 E8 D5 8F 94 B1  // .......,.O......
    0710: EB CF 94 38 08 00 95 31 25 40 95 AF 3B 80 95 B6  // ...8...1%@..;...
    0720: 45 C0 95 C0 3F 00 96 C6 29 40 96 99 07 80 96 4C  // E...?...)@.....L
    0730: E0 CF 96 DB BC 0F 97 3A A6 4F 97 39 A3 8F 97 AF  // .......:.O.9....
    0740: B6 CF 97 6D DE 0F 98 33 13 40 98 D5 49 80 98 5A  // ...m...3.@..I..Z
    0750: 75 C0 98 C4 89 00 99 ED 7E 40 99 D5 52 80 99 E7  // u.......~@..R...
    0760: 0A C0 99 CC B3 0F 9A B8 5F 4F 9A 67 23 8F 9A 59  // ........_O.g#..Y
    0770: 12 CF 9A EA 3A 0F 9B 13 A3 4F 9B 87 46 80 9B 8B  // ....:....O..F...
    0780: 16 C1 9B BC FB 01 9C 6F D9 42 9C 33 92 83 9C 98  // .......o.B.3....
    0790: 0C C4 9C 6B 37 04 9D 98 0C 44 9D 33 92 83 9D 6F  // ...k7....D.3...o
    07A0: D9 C2 9D BC FB 01 9E 8B 16 41 9E 87 46 80 9E 13  // .........A..F...
    07B0: A3 CF 9E EA 3A 0F 9F 59 12 4F 9F 67 23 8F 9F B8  // ....:..Y.O.g#...
    07C0: 5F CF 9F CC B3 0F A0 E7 0A 40 A0 D5 52 80 A0 ED  // _........@..R...
    07D0: 7E C0 A0 C4 89 00 A1 5A 75 40 A1 D5 49 80 A1 33  // ~......Zu@..I..3
    07E0: 13 C0 A1 6D DE 0F A2 AF B6 4F A2 39 A3 8F A2 3A  // ...m.....O.9...:
    07F0: A6 CF A2 DB BC 0F A3 4C E0 4F A3 99 07 80 A3 C6  // .......L.O......
    0800: 29 C0 A3 C0 3F 00 A4 B6 45 40 A4 AF 3B 80 A4 31  // )...?...E@..;..1
    0810: 25 C0 A4 38 08 00 A5 B1 EB 4F A5 E8 D5 8F A5 2C  // %..8.....O.....,
    0820: CB CF A5 09 CD 0F A6 21 DA 4F A6 B6 EE 8F A6 A6  // .......!.O......
    0830: 05 C0 A6 AA 19 00 A7 84 26 40 A7 D9 29 80 A7 99  // ........&@..)...
    0840: 23 C0 A7 D6 15 00 A8 27 04 40 A8 C3 F2 8F A8 83  // #......'.@......
    0850: E5 CF A8 12 DF 0F A9 66 E0 4F A9 AB E8 8F A9 8F  // .......f.O......
    0860: F5 CF A9 E4 03 00 AA 61 10 40 AA 5F 18 80 AA 67  // .......a.@._...g
    0870: 1A C0 AA 6D 16 00 AB BD 0D 40 AB 96 02 80 AB 9D  // ...m.....@......
    0880: F7 CF AB 3D EF 0F AC 25 EB 4F AC F1 EB 8F AC 20  // ...=...%.O..... 
    0890: F1 CF AC 3E F9 0F AD 4F 02 40 AD 42 0A 80 AD 69  // ...>...O.@.B...i
    08A0: 0F C0 AD D3 10 00 AE 72 0E 40 AE 0E 09 80 AE 0C  // .......r.@......
    08B0: 02 C0 AE 11 FB 0F AF A5 F5 4F AF DD F2 8F AF 26  // .........O.....&
    08C0: F3 CF AF 3C F6 0F B0 43 FB 4F B0 FF 00 80 B0 27  // ...<...C.O.....'
    08D0: 06 C0 B0 A4 09 00 B1 D0 0A 40 B1 8F 09 80 B1 4C  // .........@.....L
    08E0: 06 C0 B1 DA 01 00 B2 3D FD 4F B2 75 F9 8F B2 45  // .......=.O.u...E
    08F0: F7 CF B2 0F F7 0F B3 C8 F8 4F B3 FF FB 8F B3 FC  // .........O......
    0900: FF CF B3 E9 03 00 B4 FD 06 40 B4 A2 08 80 B4 8B  // .........@......
    0910: 08 C0 B4 C0 06 00 B5 92 03 40 B5 88 FF 8F B5 3F  // .........@.....?
    0920: FB CF B5 51 F7 0F B6 3B F4 4F B6 4A F2 8F B6 97  // ...Q...;.O.J....
    0930: F1 CF B6 0B F2 0F B7 6C F3 4F B7 67 F5 8F B7 A8  // .......l.O.g....
    0940: F7 CF B7 E2 F9 0F B8 DD FB 4F B8 76 FD 8F B8 A2  // .........O.v....
    0950: FE CF B8 67 FF 0F B9 D7 FF 4F B9 0A 00 80 B9 18  // ...g.....O......
    0960: 00 C0 B9 1B 00 00 BA 01 C0 00 00 03 18 00 0B 00  // ................
    0970: 00 00 00 03 0E 00 00 00 00 00 00 00 00 00 00 00  // ................
    0980: 00 00 00 00 00 00 00 91 00 00 00 76 00 01 00 00  // ...........v....
    0990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09A0: 00 00 00 00 00 00 00 91 00 00 00 E8 01 05 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 00 00 00 00 00 00 49 00 00 40 81 01 40 40 6D  // .......I..@..@@m
    09D0: 03 80 40 53 04 C0 40 78 02 00 41 19 FF 4F 41 ED  // ..@S..@x..A..OA.
    09E0: FD 8F 41 37 00 C0 41 45 02 00 42 8C 00 40 42 9B  // ..A7..AE..B..@B.
    09F0: FD 8F 42 9D FE CF 42 6C 02 00 43 67 02 40 43 B1  // ..B...Bl..Cg.@C.
    0A00: FD 8F 43 25 FC CF 43 6F 01 00 44 21 05 40 44 F3  // ..C%..Co..D!.@D.
    0A10: FF 8F 44 C4 F9 CF 44 F9 FD 0F 45 BF 06 40 45 8E  // ..D...D...E..@E.
    0A20: 04 80 45 73 F9 CF 45 96 F8 0F 46 72 05 40 46 69  // ..Es..E...Fr.@Fi
    0A30: 0A 80 46 CF FC CF 46 D1 F2 0F 47 A4 FF 4F 47 25  // ..F...F...G..OG%
    0A40: 0F 80 47 FC 04 C0 47 13 F0 0F 48 93 F5 4F 48 33  // ..G...G...H..OH3
    0A50: 0F 80 48 68 10 C0 48 75 F3 0F 49 99 E9 4F 49 A2  // ..Hh..Hu..I..OI.
    0A60: 07 80 49 90 1B C0 49 65 FF 0F 4A C2 E0 4F 4A 99  // ..I...Ie..J..OJ.
    0A70: F7 8F 4A 92 20 C0 4A C4 12 00 4B 03 E1 4F 4B 2C  // ..J. .J...K..OK,
    0A80: E2 8F 4B F2 19 C0 4B A3 28 00 4C F5 EE 4F 4C 29  // ..K...K.(.L..OL)
    0A90: CE 8F 4C 84 04 C0 4C 40 38 00 4D 2C 0B 40 4D 5E  // ..L...L@8.M,.@M^
    0AA0: C5 8F 4D E9 E2 CF 4D F5 37 00 4E F8 2F 40 4E 92  // ..M...M.7.N./@N.
    0AB0: D0 8F 4E E1 BD CF 4E DD 20 00 4F 18 52 40 4F 4F  // ..N...N. .O.R@OO
    0AC0: F4 8F 4F B2 A2 CF 4F 4D F0 0F 50 08 60 40 50 78  // ..O...OM..P.`@Px
    0AD0: 2D 80 50 80 A5 CF 50 54 B3 0F 51 82 4A 40 51 A2  // -.P...PT..Q.J@Q.
    0AE0: 69 80 51 00 D0 CF 51 F5 7E 0F 52 5C 0B 40 52 CF  // i.Q...Q.~.R\.@R.
    0AF0: 8E 80 52 52 21 C0 52 DC 70 0F 53 96 AD 4F 53 06  // ..RR!.R.p.S..OS.
    0B00: 7F 80 53 C7 82 C0 53 0A A3 0F 54 8D 53 4F 54 C1  // ..S...S...T.SOT.
    0B10: 28 80 54 14 C8 C0 54 21 1B 00 55 23 32 4F 55 41  // (.T...T!..U#2OUA
    0B20: 97 8F 55 F2 B6 C0 55 87 B6 00 56 02 81 4F 56 43  // ..U...U...V..OVC
    0B30: 08 8F 56 34 25 C0 56 19 1C 01 57 7E 50 40 57 24  // ..V4%.V...W~P@W$
    0B40: EE 8E 57 FD 2C CF 57 1C C9 00 58 71 47 41 58 01  // ..W.,.W...XqGAX.
    0B50: C6 8F 58 BA 79 CE 58 6B 6E 0F 59 BE 5E 41 59 00  // ..X.y.Xkn.Y.^AY.
    0B60: 70 81 59 76 5B CF 59 77 F7 0D 5A AC 51 4F 5A 09  // p.Yv[.Yw..Z.QOZ.
    0B70: CF 81 5A 53 36 C2 5A 37 CE 0F 5B A8 3D 4D 5B B8  // ..ZS6.Z7..[.=M[.
    0B80: 65 8D 5B EF 50 C0 5B 37 8E 03 5C B2 E2 44 5C A5  // e.[.P.[7..\..D\.
    0B90: 11 84 5C A3 59 C2 5C 48 F2 00 5D 0E 3F 40 5D 39  // ..\.Y.\H..].?@]9
    0BA0: 08 80 5D 1B 00 00 80 18 00 40 80 0A 00 80 80 D7  // ..]......@......
    0BB0: FF CF 80 67 FF 0F 81 A2 FE 4F 81 76 FD 8F 81 DD  // ...g.....O.v....
    0BC0: FB CF 81 E2 F9 0F 82 A8 F7 4F 82 67 F5 8F 82 6C  // .........O.g...l
    0BD0: F3 CF 82 0B F2 0F 83 97 F1 4F 83 4A F2 8F 83 3B  // .........O.J...;
    0BE0: F4 CF 83 51 F7 0F 84 3F FB 4F 84 88 FF 8F 84 92  // ...Q...?.O......
    0BF0: 03 C0 84 C0 06 00 85 8B 08 40 85 A2 08 80 85 FD  // .........@......
    0C00: 06 C0 85 E9 03 00 86 FC FF 4F 86 FF FB 8F 86 C8  // .........O......
    0C10: F8 CF 86 0F F7 0F 87 45 F7 4F 87 75 F9 8F 87 3D  // .......E.O.u...=
    0C20: FD CF 87 DA 01 00 88 4C 06 40 88 8F 09 80 88 D0  // .......L.@......
    0C30: 0A C0 88 A4 09 00 89 27 06 40 89 FF 00 80 89 43  // .......'.@.....C
    0C40: FB CF 89 3C F6 0F 8A 26 F3 4F 8A DD F2 8F 8A A5  // ...<...&.O......
    0C50: F5 CF 8A 11 FB 0F 8B 0C 02 40 8B 0E 09 80 8B 72  // .........@.....r
    0C60: 0E C0 8B D3 10 00 8C 69 0F 40 8C 42 0A 80 8C 4F  // .......i.@.B...O
    0C70: 02 C0 8C 3E F9 0F 8D 20 F1 4F 8D F1 EB 8F 8D 25  // ...>... .O.....%
    0C80: EB CF 8D 3D EF 0F 8E 9D F7 4F 8E 96 02 80 8E BD  // ...=.....O......
    0C90: 0D C0 8E 6D 16 00 8F 67 1A 40 8F 5F 18 80 8F 61  // ...m...g.@._...a
    0CA0: 10 C0 8F E4 03 00 90 8F F5 4F 90 AB E8 8F 90 66  // .........O.....f
    0CB0: E0 CF 90 12 DF 0F 91 83 E5 4F 91 C3 F2 8F 91 27  // .........O.....'
    0CC0: 04 C0 91 D6 15 00 92 99 23 40 92 D9 29 80 92 84  // ........#@..)...
    0CD0: 26 C0 92 AA 19 00 93 A6 05 40 93 B6 EE 8F 93 21  // &........@.....!
    0CE0: DA CF 93 09 CD 0F 94 2C CB 4F 94 E8 D5 8F 94 B1  // .......,.O......
    0CF0: EB CF 94 38 08 00 95 31 25 40 95 AF 3B 80 95 B6  // ...8...1%@..;...
    0D00: 45 C0 95 C0 3F 00 96 C6 29 40 96 99 07 80 96 4C  // E...?...)@.....L
    0D10: E0 CF 96 DB BC 0F 97 3A A6 4F 97 39 A3 8F 97 AF  // .......:.O.9....
    0D20: B6 CF 97 6D DE 0F 98 33 13 40 98 D5 49 80 98 5A  // ...m...3.@..I..Z
    0D30: 75 C0 98 C4 89 00 99 ED 7E 40 99 D5 52 80 99 E7  // u.......~@..R...
    0D40: 0A C0 99 CC B3 0F 9A B8 5F 4F 9A 67 23 8F 9A 59  // ........_O.g#..Y
    0D50: 12 CF 9A EA 3A 0F 9B 13 A3 4F 9B 87 46 80 9B 8B  // ....:....O..F...
    0D60: 16 C1 9B BC FB 01 9C 6F D9 42 9C 33 92 83 9C 98  // .......o.B.3....
    0D70: 0C C4 9C 6B 37 04 9D 98 0C 44 9D 33 92 83 9D 6F  // ...k7....D.3...o
    0D80: D9 C2 9D BC FB 01 9E 8B 16 41 9E 87 46 80 9E 13  // .........A..F...
    0D90: A3 CF 9E EA 3A 0F 9F 59 12 4F 9F 67 23 8F 9F B8  // ....:..Y.O.g#...
    0DA0: 5F CF 9F CC B3 0F A0 E7 0A 40 A0 D5 52 80 A0 ED  // _........@..R...
    0DB0: 7E C0 A0 C4 89 00 A1 5A 75 40 A1 D5 49 80 A1 33  // ~......Zu@..I..3
    0DC0: 13 C0 A1 6D DE 0F A2 AF B6 4F A2 39 A3 8F A2 3A  // ...m.....O.9...:
    0DD0: A6 CF A2 DB BC 0F A3 4C E0 4F A3 99 07 80 A3 C6  // .......L.O......
    0DE0: 29 C0 A3 C0 3F 00 A4 B6 45 40 A4 AF 3B 80 A4 31  // )...?...E@..;..1
    0DF0: 25 C0 A4 38 08 00 A5 B1 EB 4F A5 E8 D5 8F A5 2C  // %..8.....O.....,
    0E00: CB CF A5 09 CD 0F A6 21 DA 4F A6 B6 EE 8F A6 A6  // .......!.O......
    0E10: 05 C0 A6 AA 19 00 A7 84 26 40 A7 D9 29 80 A7 99  // ........&@..)...
    0E20: 23 C0 A7 D6 15 00 A8 27 04 40 A8 C3 F2 8F A8 83  // #......'.@......
    0E30: E5 CF A8 12 DF 0F A9 66 E0 4F A9 AB E8 8F A9 8F  // .......f.O......
    0E40: F5 CF A9 E4 03 00 AA 61 10 40 AA 5F 18 80 AA 67  // .......a.@._...g
    0E50: 1A C0 AA 6D 16 00 AB BD 0D 40 AB 96 02 80 AB 9D  // ...m.....@......
    0E60: F7 CF AB 3D EF 0F AC 25 EB 4F AC F1 EB 8F AC 20  // ...=...%.O..... 
    0E70: F1 CF AC 3E F9 0F AD 4F 02 40 AD 42 0A 80 AD 69  // ...>...O.@.B...i
    0E80: 0F C0 AD D3 10 00 AE 72 0E 40 AE 0E 09 80 AE 0C  // .......r.@......
    0E90: 02 C0 AE 11 FB 0F AF A5 F5 4F AF DD F2 8F AF 26  // .........O.....&
    0EA0: F3 CF AF 3C F6 0F B0 43 FB 4F B0 FF 00 80 B0 27  // ...<...C.O.....'
    0EB0: 06 C0 B0 A4 09 00 B1 D0 0A 40 B1 8F 09 80 B1 4C  // .........@.....L
    0EC0: 06 C0 B1 DA 01 00 B2 3D FD 4F B2 75 F9 8F B2 45  // .......=.O.u...E
    0ED0: F7 CF B2 0F F7 0F B3 C8 F8 4F B3 FF FB 8F B3 FC  // .........O......
    0EE0: FF CF B3 E9 03 00 B4 FD 06 40 B4 A2 08 80 B4 8B  // .........@......
    0EF0: 08 C0 B4 C0 06 00 B5 92 03 40 B5 88 FF 8F B5 3F  // .........@.....?
    0F00: FB CF B5 51 F7 0F B6 3B F4 4F B6 4A F2 8F B6 97  // ...Q...;.O.J....
    0F10: F1 CF B6 0B F2 0F B7 6C F3 4F B7 67 F5 8F B7 A8  // .......l.O.g....
    0F20: F7 CF B7 E2 F9 0F B8 DD FB 4F B8 76 FD 8F B8 A2  // .........O.v....
    0F30: FE CF B8 67 FF 0F B9 D7 FF 4F B9 0A 00 80 B9 18  // ...g.....O......
    0F40: 00 C0 B9 1B 00 00 BA FE FF 02 00 80 BB 00 00 00  // ................
    0F50: DC 05 00 08 00 20 00 16 00 20 00 03 00 00 00 01  // ..... ... ......
    0F60: 00 00 00 00 00 10 00 80 00 00 AA 00 38 9B 71 E8  // ............8.q.
    0F70: 0B 00 00 01 00 00 00 10 FF FF FF 10 FF FF FF FF  // ................
    0F80: FF FF FF FF FF FF FF 03 00 00 00 03 00 00 00 03  // ................
    0F90: 00 38 00 03 00 38 00 03 00 00 00 01 C0 00 00 03  // .8...8..........
    0FA0: 18 00 0B 00 00 00 00 03 0E 00 00 00 00 00 00 00  // ................
    0FB0: 00 00 00 00 00 00 00 00 00 00 00 91 00 00 00 76  // ...............v
    0FC0: 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FD0: 00 00 00 00 00 00 00 00 00 00 00 91 00 00 00 E8  // ................
    0FE0: 01 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FF0: 00 00 00 00 00 00 00 00 00 00 00 49 00 00 40 81  // ...........I..@.
    1000: 01 40 40 6D 03 80 40 53 04 C0 40 78 02 00 41 19  // .@@m..@S..@x..A.
    1010: FF 4F 41 ED FD 8F 41 37 00 C0 41 45 02 00 42 8C  // .OA...A7..AE..B.
    1020: 00 40 42 9B FD 8F 42 9D FE CF 42 6C 02 00 43 67  // .@B...B...Bl..Cg
    1030: 02 40 43 B1 FD 8F 43 25 FC CF 43 6F 01 00 44 21  // .@C...C%..Co..D!
    1040: 05 40 44 F3 FF 8F 44 C4 F9 CF 44 F9 FD 0F 45 BF  // .@D...D...D...E.
    1050: 06 40 45 8E 04 80 45 73 F9 CF 45 96 F8 0F 46 72  // .@E...Es..E...Fr
    1060: 05 40 46 69 0A 80 46 CF FC CF 46 D1 F2 0F 47 A4  // .@Fi..F...F...G.
    1070: FF 4F 47 25 0F 80 47 FC 04 C0 47 13 F0 0F 48 93  // .OG%..G...G...H.
    1080: F5 4F 48 33 0F 80 48 68 10 C0 48 75 F3 0F 49 99  // .OH3..Hh..Hu..I.
    1090: E9 4F 49 A2 07 80 49 90 1B C0 49 65 FF 0F 4A C2  // .OI...I...Ie..J.
    10A0: E0 4F 4A 99 F7 8F 4A 92 20 C0 4A C4 12 00 4B 03  // .OJ...J. .J...K.
    10B0: E1 4F 4B 2C E2 8F 4B F2 19 C0 4B A3 28 00 4C F5  // .OK,..K...K.(.L.
    10C0: EE 4F 4C 29 CE 8F 4C 84 04 C0 4C 40 38 00 4D 2C  // .OL)..L...L@8.M,
    10D0: 0B 40 4D 5E C5 8F 4D E9 E2 CF 4D F5 37 00 4E F8  // .@M^..M...M.7.N.
    10E0: 2F 40 4E 92 D0 8F 4E E1 BD CF 4E DD 20 00 4F 18  // /@N...N...N. .O.
    10F0: 52 40 4F 4F F4 8F 4F B2 A2 CF 4F 4D F0 0F 50 08  // R@OO..O...OM..P.
    1100: 60 40 50 78 2D 80 50 80 A5 CF 50 54 B3 0F 51 82  // `@Px-.P...PT..Q.
    1110: 4A 40 51 A2 69 80 51 00 D0 CF 51 F5 7E 0F 52 5C  // J@Q.i.Q...Q.~.R\
    1120: 0B 40 52 CF 8E 80 52 52 21 C0 52 DC 70 0F 53 96  // .@R...RR!.R.p.S.
    1130: AD 4F 53 06 7F 80 53 C7 82 C0 53 0A A3 0F 54 8D  // .OS...S...S...T.
    1140: 53 4F 54 C1 28 80 54 14 C8 C0 54 21 1B 00 55 23  // SOT.(.T...T!..U#
    1150: 32 4F 55 41 97 8F 55 F2 B6 C0 55 87 B6 00 56 02  // 2OUA..U...U...V.
    1160: 81 4F 56 43 08 8F 56 34 25 C0 56 19 1C 01 57 7E  // .OVC..V4%.V...W~
    1170: 50 40 57 24 EE 8E 57 FD 2C CF 57 1C C9 00 58 71  // P@W$..W.,.W...Xq
    1180: 47 41 58 01 C6 8F 58 BA 79 CE 58 6B 6E 0F 59 BE  // GAX...X.y.Xkn.Y.
    1190: 5E 41 59 00 70 81 59 76 5B CF 59 77 F7 0D 5A AC  // ^AY.p.Yv[.Yw..Z.
    11A0: 51 4F 5A 09 CF 81 5A 53 36 C2 5A 37 CE 0F 5B A8  // QOZ...ZS6.Z7..[.
    11B0: 3D 4D 5B B8 65 8D 5B EF 50 C0 5B 37 8E 03 5C B2  // =M[.e.[.P.[7..\.
    11C0: E2 44 5C A5 11 84 5C A3 59 C2 5C 48 F2 00 5D 0E  // .D\...\.Y.\H..].
    11D0: 3F 40 5D 39 08 80 5D 1B 00 00 80 18 00 40 80 0A  // ?@]9..]......@..
    11E0: 00 80 80 D7 FF CF 80 67 FF 0F 81 A2 FE 4F 81 76  // .......g.....O.v
    11F0: FD 8F 81 DD FB CF 81 E2 F9 0F 82 A8 F7 4F 82 67  // .............O.g
    1200: F5 8F 82 6C F3 CF 82 0B F2 0F 83 97 F1 4F 83 4A  // ...l.........O.J
    1210: F2 8F 83 3B F4 CF 83 51 F7 0F 84 3F FB 4F 84 88  // ...;...Q...?.O..
    1220: FF 8F 84 92 03 C0 84 C0 06 00 85 8B 08 40 85 A2  // .............@..
    1230: 08 80 85 FD 06 C0 85 E9 03 00 86 FC FF 4F 86 FF  // .............O..
    1240: FB 8F 86 C8 F8 CF 86 0F F7 0F 87 45 F7 4F 87 75  // ...........E.O.u
    1250: F9 8F 87 3D FD CF 87 DA 01 00 88 4C 06 40 88 8F  // ...=.......L.@..
    1260: 09 80 88 D0 0A C0 88 A4 09 00 89 27 06 40 89 FF  // ...........'.@..
    1270: 00 80 89 43 FB CF 89 3C F6 0F 8A 26 F3 4F 8A DD  // ...C...<...&.O..
    1280: F2 8F 8A A5 F5 CF 8A 11 FB 0F 8B 0C 02 40 8B 0E  // .............@..
    1290: 09 80 8B 72 0E C0 8B D3 10 00 8C 69 0F 40 8C 42  // ...r.......i.@.B
    12A0: 0A 80 8C 4F 02 C0 8C 3E F9 0F 8D 20 F1 4F 8D F1  // ...O...>... .O..
    12B0: EB 8F 8D 25 EB CF 8D 3D EF 0F 8E 9D F7 4F 8E 96  // ...%...=.....O..
    12C0: 02 80 8E BD 0D C0 8E 6D 16 00 8F 67 1A 40 8F 5F  // .......m...g.@._
    12D0: 18 80 8F 61 10 C0 8F E4 03 00 90 8F F5 4F 90 AB  // ...a.........O..
    12E0: E8 8F 90 66 E0 CF 90 12 DF 0F 91 83 E5 4F 91 C3  // ...f.........O..
    12F0: F2 8F 91 27 04 C0 91 D6 15 00 92 99 23 40 92 D9  // ...'........#@..
    1300: 29 80 92 84 26 C0 92 AA 19 00 93 A6 05 40 93 B6  // )...&........@..
    1310: EE 8F 93 21 DA CF 93 09 CD 0F 94 2C CB 4F 94 E8  // ...!.......,.O..
    1320: D5 8F 94 B1 EB CF 94 38 08 00 95 31 25 40 95 AF  // .......8...1%@..
    1330: 3B 80 95 B6 45 C0 95 C0 3F 00 96 C6 29 40 96 99  // ;...E...?...)@..
    1340: 07 80 96 4C E0 CF 96 DB BC 0F 97 3A A6 4F 97 39  // ...L.......:.O.9
    1350: A3 8F 97 AF B6 CF 97 6D DE 0F 98 33 13 40 98 D5  // .......m...3.@..
    1360: 49 80 98 5A 75 C0 98 C4 89 00 99 ED 7E 40 99 D5  // I..Zu.......~@..
    1370: 52 80 99 E7 0A C0 99 CC B3 0F 9A B8 5F 4F 9A 67  // R..........._O.g
    1380: 23 8F 9A 59 12 CF 9A EA 3A 0F 9B 13 A3 4F 9B 87  // #..Y....:....O..
    1390: 46 80 9B 8B 16 C1 9B BC FB 01 9C 6F D9 42 9C 33  // F..........o.B.3
    13A0: 92 83 9C 98 0C C4 9C 6B 37 04 9D 98 0C 44 9D 33  // .......k7....D.3
    13B0: 92 83 9D 6F D9 C2 9D BC FB 01 9E 8B 16 41 9E 87  // ...o.........A..
    13C0: 46 80 9E 13 A3 CF 9E EA 3A 0F 9F 59 12 4F 9F 67  // F.......:..Y.O.g
    13D0: 23 8F 9F B8 5F CF 9F CC B3 0F A0 E7 0A 40 A0 D5  // #..._........@..
    13E0: 52 80 A0 ED 7E C0 A0 C4 89 00 A1 5A 75 40 A1 D5  // R...~......Zu@..
    13F0: 49 80 A1 33 13 C0 A1 6D DE 0F A2 AF B6 4F A2 39  // I..3...m.....O.9
    1400: A3 8F A2 3A A6 CF A2 DB BC 0F A3 4C E0 4F A3 99  // ...:.......L.O..
    1410: 07 80 A3 C6 29 C0 A3 C0 3F 00 A4 B6 45 40 A4 AF  // ....)...?...E@..
    1420: 3B 80 A4 31 25 C0 A4 38 08 00 A5 B1 EB 4F A5 E8  // ;..1%..8.....O..
    1430: D5 8F A5 2C CB CF A5 09 CD 0F A6 21 DA 4F A6 B6  // ...,.......!.O..
    1440: EE 8F A6 A6 05 C0 A6 AA 19 00 A7 84 26 40 A7 D9  // ............&@..
    1450: 29 80 A7 99 23 C0 A7 D6 15 00 A8 27 04 40 A8 C3  // )...#......'.@..
    1460: F2 8F A8 83 E5 CF A8 12 DF 0F A9 66 E0 4F A9 AB  // ...........f.O..
    1470: E8 8F A9 8F F5 CF A9 E4 03 00 AA 61 10 40 AA 5F  // ...........a.@._
    1480: 18 80 AA 67 1A C0 AA 6D 16 00 AB BD 0D 40 AB 96  // ...g...m.....@..
    1490: 02 80 AB 9D F7 CF AB 3D EF 0F AC 25 EB 4F AC F1  // .......=...%.O..
    14A0: EB 8F AC 20 F1 CF AC 3E F9 0F AD 4F 02 40 AD 42  // ... ...>...O.@.B
    14B0: 0A 80 AD 69 0F C0 AD D3 10 00 AE 72 0E 40 AE 0E  // ...i.......r.@..
    14C0: 09 80 AE 0C 02 C0 AE 11 FB 0F AF A5 F5 4F AF DD  // .............O..
    14D0: F2 8F AF 26 F3 CF AF 3C F6 0F B0 43 FB 4F B0 FF  // ...&...<...C.O..
    14E0: 00 80 B0 27 06 C0 B0 A4 09 00 B1 D0 0A 40 B1 8F  // ...'.........@..
    14F0: 09 80 B1 4C 06 C0 B1 DA 01 00 B2 3D FD 4F B2 75  // ...L.......=.O.u
    1500: F9 8F B2 45 F7 CF B2 0F F7 0F B3 C8 F8 4F B3 FF  // ...E.........O..
    1510: FB 8F B3 FC FF CF B3 E9 03 00 B4 FD 06 40 B4 A2  // .............@..
    1520: 08 80 B4 8B 08 C0 B4 C0 06 00 B5 92 03 40 B5 88  // .............@..
    1530: FF 8F B5 3F FB CF B5 51 F7 0F B6 3B F4 4F B6 4A  // ...?...Q...;.O.J
    1540: F2 8F B6 97 F1 CF B6 0B F2 0F B7 6C F3 4F B7 67  // ...........l.O.g
    1550: F5 8F B7 A8 F7 CF B7 E2 F9 0F B8 DD FB 4F B8 76  // .............O.v
    1560: FD 8F B8 A2 FE CF B8 67 FF 0F B9 D7 FF 4F B9 0A  // .......g.....O..
    1570: 00 80 B9 18 00 C0 B9 1B 00 00 BA 01 C0 00 00 03  // ................
    1580: 18 00 0B 00 00 00 00 03 0E 00 00 00 00 00 00 00  // ................
    1590: 00 00 00 00 00 00 00 00 00 00 00 91 00 00 00 76  // ...............v
    15A0: 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    15B0: 00 00 00 00 00 00 00 00 00 00 00 91 00 00 00 E8  // ................
    15C0: 01 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    15D0: 00 00 00 00 00 00 00 00 00 00 00 49 00 00 40 81  // ...........I..@.
    15E0: 01 40 40 6D 03 80 40 53 04 C0 40 78 02 00 41 19  // .@@m..@S..@x..A.
    15F0: FF 4F 41 ED FD 8F 41 37 00 C0 41 45 02 00 42 8C  // .OA...A7..AE..B.
    1600: 00 40 42 9B FD 8F 42 9D FE CF 42 6C 02 00 43 67  // .@B...B...Bl..Cg
    1610: 02 40 43 B1 FD 8F 43 25 FC CF 43 6F 01 00 44 21  // .@C...C%..Co..D!
    1620: 05 40 44 F3 FF 8F 44 C4 F9 CF 44 F9 FD 0F 45 BF  // .@D...D...D...E.
    1630: 06 40 45 8E 04 80 45 73 F9 CF 45 96 F8 0F 46 72  // .@E...Es..E...Fr
    1640: 05 40 46 69 0A 80 46 CF FC CF 46 D1 F2 0F 47 A4  // .@Fi..F...F...G.
    1650: FF 4F 47 25 0F 80 47 FC 04 C0 47 13 F0 0F 48 93  // .OG%..G...G...H.
    1660: F5 4F 48 33 0F 80 48 68 10 C0 48 75 F3 0F 49 99  // .OH3..Hh..Hu..I.
    1670: E9 4F 49 A2 07 80 49 90 1B C0 49 65 FF 0F 4A C2  // .OI...I...Ie..J.
    1680: E0 4F 4A 99 F7 8F 4A 92 20 C0 4A C4 12 00 4B 03  // .OJ...J. .J...K.
    1690: E1 4F 4B 2C E2 8F 4B F2 19 C0 4B A3 28 00 4C F5  // .OK,..K...K.(.L.
    16A0: EE 4F 4C 29 CE 8F 4C 84 04 C0 4C 40 38 00 4D 2C  // .OL)..L...L@8.M,
    16B0: 0B 40 4D 5E C5 8F 4D E9 E2 CF 4D F5 37 00 4E F8  // .@M^..M...M.7.N.
    16C0: 2F 40 4E 92 D0 8F 4E E1 BD CF 4E DD 20 00 4F 18  // /@N...N...N. .O.
    16D0: 52 40 4F 4F F4 8F 4F B2 A2 CF 4F 4D F0 0F 50 08  // R@OO..O...OM..P.
    16E0: 60 40 50 78 2D 80 50 80 A5 CF 50 54 B3 0F 51 82  // `@Px-.P...PT..Q.
    16F0: 4A 40 51 A2 69 80 51 00 D0 CF 51 F5 7E 0F 52 5C  // J@Q.i.Q...Q.~.R\
    1700: 0B 40 52 CF 8E 80 52 52 21 C0 52 DC 70 0F 53 96  // .@R...RR!.R.p.S.
    1710: AD 4F 53 06 7F 80 53 C7 82 C0 53 0A A3 0F 54 8D  // .OS...S...S...T.
    1720: 53 4F 54 C1 28 80 54 14 C8 C0 54 21 1B 00 55 23  // SOT.(.T...T!..U#
    1730: 32 4F 55 41 97 8F 55 F2 B6 C0 55 87 B6 00 56 02  // 2OUA..U...U...V.
    1740: 81 4F 56 43 08 8F 56 34 25 C0 56 19 1C 01 57 7E  // .OVC..V4%.V...W~
    1750: 50 40 57 24 EE 8E 57 FD 2C CF 57 1C C9 00 58 71  // P@W$..W.,.W...Xq
    1760: 47 41 58 01 C6 8F 58 BA 79 CE 58 6B 6E 0F 59 BE  // GAX...X.y.Xkn.Y.
    1770: 5E 41 59 00 70 81 59 76 5B CF 59 77 F7 0D 5A AC  // ^AY.p.Yv[.Yw..Z.
    1780: 51 4F 5A 09 CF 81 5A 53 36 C2 5A 37 CE 0F 5B A8  // QOZ...ZS6.Z7..[.
    1790: 3D 4D 5B B8 65 8D 5B EF 50 C0 5B 37 8E 03 5C B2  // =M[.e.[.P.[7..\.
    17A0: E2 44 5C A5 11 84 5C A3 59 C2 5C 48 F2 00 5D 0E  // .D\...\.Y.\H..].
    17B0: 3F 40 5D 39 08 80 5D 1B 00 00 80 18 00 40 80 0A  // ?@]9..]......@..
    17C0: 00 80 80 D7 FF CF 80 67 FF 0F 81 A2 FE 4F 81 76  // .......g.....O.v
    17D0: FD 8F 81 DD FB CF 81 E2 F9 0F 82 A8 F7 4F 82 67  // .............O.g
    17E0: F5 8F 82 6C F3 CF 82 0B F2 0F 83 97 F1 4F 83 4A  // ...l.........O.J
    17F0: F2 8F 83 3B F4 CF 83 51 F7 0F 84 3F FB 4F 84 88  // ...;...Q...?.O..
    1800: FF 8F 84 92 03 C0 84 C0 06 00 85 8B 08 40 85 A2  // .............@..
    1810: 08 80 85 FD 06 C0 85 E9 03 00 86 FC FF 4F 86 FF  // .............O..
    1820: FB 8F 86 C8 F8 CF 86 0F F7 0F 87 45 F7 4F 87 75  // ...........E.O.u
    1830: F9 8F 87 3D FD CF 87 DA 01 00 88 4C 06 40 88 8F  // ...=.......L.@..
    1840: 09 80 88 D0 0A C0 88 A4 09 00 89 27 06 40 89 FF  // ...........'.@..
    1850: 00 80 89 43 FB CF 89 3C F6 0F 8A 26 F3 4F 8A DD  // ...C...<...&.O..
    1860: F2 8F 8A A5 F5 CF 8A 11 FB 0F 8B 0C 02 40 8B 0E  // .............@..
    1870: 09 80 8B 72 0E C0 8B D3 10 00 8C 69 0F 40 8C 42  // ...r.......i.@.B
    1880: 0A 80 8C 4F 02 C0 8C 3E F9 0F 8D 20 F1 4F 8D F1  // ...O...>... .O..
    1890: EB 8F 8D 25 EB CF 8D 3D EF 0F 8E 9D F7 4F 8E 96  // ...%...=.....O..
    18A0: 02 80 8E BD 0D C0 8E 6D 16 00 8F 67 1A 40 8F 5F  // .......m...g.@._
    18B0: 18 80 8F 61 10 C0 8F E4 03 00 90 8F F5 4F 90 AB  // ...a.........O..
    18C0: E8 8F 90 66 E0 CF 90 12 DF 0F 91 83 E5 4F 91 C3  // ...f.........O..
    18D0: F2 8F 91 27 04 C0 91 D6 15 00 92 99 23 40 92 D9  // ...'........#@..
    18E0: 29 80 92 84 26 C0 92 AA 19 00 93 A6 05 40 93 B6  // )...&........@..
    18F0: EE 8F 93 21 DA CF 93 09 CD 0F 94 2C CB 4F 94 E8  // ...!.......,.O..
    1900: D5 8F 94 B1 EB CF 94 38 08 00 95 31 25 40 95 AF  // .......8...1%@..
    1910: 3B 80 95 B6 45 C0 95 C0 3F 00 96 C6 29 40 96 99  // ;...E...?...)@..
    1920: 07 80 96 4C E0 CF 96 DB BC 0F 97 3A A6 4F 97 39  // ...L.......:.O.9
    1930: A3 8F 97 AF B6 CF 97 6D DE 0F 98 33 13 40 98 D5  // .......m...3.@..
    1940: 49 80 98 5A 75 C0 98 C4 89 00 99 ED 7E 40 99 D5  // I..Zu.......~@..
    1950: 52 80 99 E7 0A C0 99 CC B3 0F 9A B8 5F 4F 9A 67  // R..........._O.g
    1960: 23 8F 9A 59 12 CF 9A EA 3A 0F 9B 13 A3 4F 9B 87  // #..Y....:....O..
    1970: 46 80 9B 8B 16 C1 9B BC FB 01 9C 6F D9 42 9C 33  // F..........o.B.3
    1980: 92 83 9C 98 0C C4 9C 6B 37 04 9D 98 0C 44 9D 33  // .......k7....D.3
    1990: 92 83 9D 6F D9 C2 9D BC FB 01 9E 8B 16 41 9E 87  // ...o.........A..
    19A0: 46 80 9E 13 A3 CF 9E EA 3A 0F 9F 59 12 4F 9F 67  // F.......:..Y.O.g
    19B0: 23 8F 9F B8 5F CF 9F CC B3 0F A0 E7 0A 40 A0 D5  // #..._........@..
    19C0: 52 80 A0 ED 7E C0 A0 C4 89 00 A1 5A 75 40 A1 D5  // R...~......Zu@..
    19D0: 49 80 A1 33 13 C0 A1 6D DE 0F A2 AF B6 4F A2 39  // I..3...m.....O.9
    19E0: A3 8F A2 3A A6 CF A2 DB BC 0F A3 4C E0 4F A3 99  // ...:.......L.O..
    19F0: 07 80 A3 C6 29 C0 A3 C0 3F 00 A4 B6 45 40 A4 AF  // ....)...?...E@..
    1A00: 3B 80 A4 31 25 C0 A4 38 08 00 A5 B1 EB 4F A5 E8  // ;..1%..8.....O..
    1A10: D5 8F A5 2C CB CF A5 09 CD 0F A6 21 DA 4F A6 B6  // ...,.......!.O..
    1A20: EE 8F A6 A6 05 C0 A6 AA 19 00 A7 84 26 40 A7 D9  // ............&@..
    1A30: 29 80 A7 99 23 C0 A7 D6 15 00 A8 27 04 40 A8 C3  // )...#......'.@..
    1A40: F2 8F A8 83 E5 CF A8 12 DF 0F A9 66 E0 4F A9 AB  // ...........f.O..
    1A50: E8 8F A9 8F F5 CF A9 E4 03 00 AA 61 10 40 AA 5F  // ...........a.@._
    1A60: 18 80 AA 67 1A C0 AA 6D 16 00 AB BD 0D 40 AB 96  // ...g...m.....@..
    1A70: 02 80 AB 9D F7 CF AB 3D EF 0F AC 25 EB 4F AC F1  // .......=...%.O..
    1A80: EB 8F AC 20 F1 CF AC 3E F9 0F AD 4F 02 40 AD 42  // ... ...>...O.@.B
    1A90: 0A 80 AD 69 0F C0 AD D3 10 00 AE 72 0E 40 AE 0E  // ...i.......r.@..
    1AA0: 09 80 AE 0C 02 C0 AE 11 FB 0F AF A5 F5 4F AF DD  // .............O..
    1AB0: F2 8F AF 26 F3 CF AF 3C F6 0F B0 43 FB 4F B0 FF  // ...&...<...C.O..
    1AC0: 00 80 B0 27 06 C0 B0 A4 09 00 B1 D0 0A 40 B1 8F  // ...'.........@..
    1AD0: 09 80 B1 4C 06 C0 B1 DA 01 00 B2 3D FD 4F B2 75  // ...L.......=.O.u
    1AE0: F9 8F B2 45 F7 CF B2 0F F7 0F B3 C8 F8 4F B3 FF  // ...E.........O..
    1AF0: FB 8F B3 FC FF CF B3 E9 03 00 B4 FD 06 40 B4 A2  // .............@..
    1B00: 08 80 B4 8B 08 C0 B4 C0 06 00 B5 92 03 40 B5 88  // .............@..
    1B10: FF 8F B5 3F FB CF B5 51 F7 0F B6 3B F4 4F B6 4A  // ...?...Q...;.O.J
    1B20: F2 8F B6 97 F1 CF B6 0B F2 0F B7 6C F3 4F B7 67  // ...........l.O.g
    1B30: F5 8F B7 A8 F7 CF B7 E2 F9 0F B8 DD FB 4F B8 76  // .............O.v
    1B40: FD 8F B8 A2 FE CF B8 67 FF 0F B9 D7 FF 4F B9 0A  // .......g.....O..
    1B50: 00 80 B9 18 00 C0 B9 1B 00 00 BA 00 04 00 00 00  // ................
    1B60: DE AD BE EF                                      // ....


PHAT
----
[000h 0000   4]                    Signature : "PHAT"    
[004h 0004   4]                 Table Length : 00000598
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4B
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [PHAT]


Raw Table Data: Length 1432 (0x598)

    0000: 50 48 41 54 98 05 00 00 01 4B 4C 45 4E 4F 56 4F  // PHAT.....KLENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 00 00 44 00 01 00 00 00 02 00 00 00  // ......D.........
    0030: 55 03 4F DC 97 52 DB 4E B4 D7 9B 83 61 51 36 E4  // U.O..R.N....aQ6.
    0040: 9D 13 00 00 02 00 00 00 49 4E 54 43 FD 7C 09 27  // ........INTC.|.'
    0050: E5 46 39 4E B8 E4 33 E4 39 A1 3E AF 74 00 69 01  // .F9N..3.9.>.t.i.
    0060: 0C 00 00 00 49 4E 54 43 01 00 C7 01 01 00 00 01  // ....INTC........
    0070: 2F 1C A4 93 9F A0 C2 E7 AC 1F F2 48 8F 03 EE C3  // /..........H....
    0080: 74 00 00 00 56 00 65 00 6E 00 48 00 77 00 28 00  // t...V.e.n.H.w.(.
    0090: 39 00 33 00 41 00 34 00 31 00 43 00 32 00 46 00  // 9.3.A.4.1.C.2.F.
    00A0: 2D 00 41 00 30 00 39 00 46 00 2D 00 45 00 37 00  // -.A.0.9.F.-.E.7.
    00B0: 43 00 32 00 2D 00 41 00 43 00 31 00 46 00 2D 00  // C.2.-.A.C.1.F.-.
    00C0: 46 00 32 00 34 00 38 00 38 00 46 00 30 00 33 00  // F.2.4.8.8.F.0.3.
    00D0: 45 00 45 00 43 00 33 00 29 00 00 00 01 00 00 00  // E.E.C.3.).......
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 8B  // ................
    0100: 06 88 4E B2 41 05 4E 89 3C DB 0B 43 F7 D3 48 00  // ..N.A.N.<..C..H.
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 92  // ................
    0120: 5D 58 69 0A B5 D7 4A B2 65 2E B1 AE 06 65 74 00  // ]Xi...J.e....et.
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07  // ................
    0140: 23 19 23 67 D6 DF 4B AF 1A 60 59 DB 17 12 46 00  // #.#g..K..`Y...F.
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 D8  // ................
    0160: 0A CA 76 14 4A 89 43 B7 E5 FD 88 79 17 62 AD 00  // ..v.J.C....y.b..
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB  // ................
    0180: 93 6D 62 42 2C C3 48 91 5A 71 F9 68 A8 1B 04 00  // .mbB,.H.Zq.h....
    0190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 35  // ...............5
    01A0: 8F 8C 7C C9 30 50 00 03 19 5D 5E 08 11 74 6B 00  // ..|.0P...]^..tk.
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 91  // ................
    01C0: 88 E1 41 01 FB A3 4D A4 83 5B 05 CC BB 57 67 00  // ..A...M..[...Wg.
    01D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 A9  // ................
    01E0: BD B9 0E 10 30 3A 49 A6 A8 B5 E8 0E DD F8 70 00  // ....0:I.......p.
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C  // ...............L
    0200: 73 CB 54 5C 97 74 4A 95 56 57 AE 6D 9A 22 29 00  // s.T\.tJ.VW.m.").
    0210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 8B  // ................
    0220: 33 3A 02 6F 24 E0 47 B4 E5 30 42 03 18 4E C1 01  // 3:.o$.G..0B..N..
    0230: 00 7D 00 01 00 00 01 09 FF 0D A3 BF 56 22 46 A9  // .}..........V"F.
    0240: E7 39 9B 0A 79 E7 C7 74 00 00 00 56 00 65 00 6E  // .9..y..t...V.e.n
    0250: 00 48 00 77 00 28 00 41 00 33 00 30 00 44 00 46  // .H.w.(.A.3.0.D.F
    0260: 00 46 00 30 00 39 00 2D 00 35 00 36 00 42 00 46  // .F.0.9.-.5.6.B.F
    0270: 00 2D 00 34 00 36 00 32 00 32 00 2D 00 41 00 39  // .-.4.6.2.2.-.A.9
    0280: 00 45 00 37 00 2D 00 33 00 39 00 39 00 42 00 30  // .E.7.-.3.9.9.B.0
    0290: 00 41 00 37 00 39 00 45 00 37 00 43 00 37 00 29  // .A.7.9.E.7.C.7.)
    02A0: 00 00 00 01 01 05 00 00 00 00 01 00 01 00 A1 00  // ................
    02B0: 01 00 00 01 08 98 B2 46 F0 06 A0 4C 9F 92 5C 49  // .......F...L..\I
    02C0: 67 82 92 78 74 00 00 00 56 00 65 00 6E 00 48 00  // g..xt...V.e.n.H.
    02D0: 77 00 28 00 34 00 36 00 42 00 32 00 39 00 38 00  // w.(.4.6.B.2.9.8.
    02E0: 30 00 38 00 2D 00 30 00 36 00 46 00 30 00 2D 00  // 0.8.-.0.6.F.0.-.
    02F0: 34 00 43 00 41 00 30 00 2D 00 39 00 46 00 39 00  // 4.C.A.0.-.9.F.9.
    0300: 32 00 2D 00 35 00 43 00 34 00 39 00 36 00 37 00  // 2.-.5.C.4.9.6.7.
    0310: 38 00 32 00 39 00 32 00 37 00 38 00 29 00 00 00  // 8.2.9.2.7.8.)...
    0320: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 4B  // ...............K
    0350: 02 01 00 00 01 C5 1F 72 24 60 27 91 43 AA 5A 5C  // .......r$`'.C.Z\
    0360: 03 24 BE 94 19 36 00 00 00 50 00 63 00 69 00 52  // .$...6...P.c.i.R
    0370: 00 6F 00 6F 00 74 00 28 00 30 00 78 00 30 00 29  // .o.o.t.(.0.x.0.)
    0380: 00 00 00 01 01 00 00 00 02 00 00 00 FF FF FF FF  // ................
    0390: 00 00 00 00 00 02 00 00 00 2E 01 64 0A 00 00 00  // ...........d....
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 98 1C 5E 00 00 00 00 00  // ..........^.....
    03C0: 00 00 00 00 00 00 00 00 AF E0 70 00 00 00 00 00  // ..........p.....
    03D0: 00 00 00 00 00 00 00 00 DE 57 4C 02 00 00 00 00  // .........WL.....
    03E0: 00 00 00 00 00 00 00 00 C6 1D 74 04 00 00 00 00  // ..........t.....
    03F0: 00 00 00 00 00 00 00 00 BA 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 00 00 00 00 91 00 00 00 00 00 00 00  // ................
    0410: 00 00 00 00 00 00 00 00 57 00 00 00 00 00 00 00  // ........W.......
    0420: 00 00 00 00 00 00 00 00 29 00 00 00 00 00 00 00  // ........).......
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 00 00 00 00 D4 29 00 00 00 00 00 00  // .........)......
    0450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0460: 2E 01 35 01 00 00 00 00 00 00 00 00 00 00 00 00  // ..5.............
    0470: 08 00 00 00 03 00 00 00 06 04 00 00 8E 03 00 00  // ................
    0480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0590: 00 00 00 00 00 00 00 00                          // ........


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "DptfTabl", 0x00001000)
{
    External (_SB_.AAC0, FieldUnitObj)
    External (_SB_.ACRT, FieldUnitObj)
    External (_SB_.APSV, FieldUnitObj)
    External (_SB_.CBMI, FieldUnitObj)
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.CLVL, FieldUnitObj)
    External (_SB_.CPPC, FieldUnitObj)
    External (_SB_.CTC0, FieldUnitObj)
    External (_SB_.CTC1, FieldUnitObj)
    External (_SB_.CTC2, FieldUnitObj)
    External (_SB_.FAN0.CRNF, MethodObj)    // 0 Arguments
    External (_SB_.FAN0.SRPM, MethodObj)    // 1 Arguments
    External (_SB_.IETM.GBDV, MethodObj)    // 0 Arguments
    External (_SB_.OSCP, IntObj)
    External (_SB_.PAGD, DeviceObj)
    External (_SB_.PAGD._PUR, PkgObj)
    External (_SB_.PAGD._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.LPCB.EC__, DeviceObj)
    External (_SB_.PC00.LPCB.EC__.GSTM, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.EC__.HKEY.DHKC, IntObj)
    External (_SB_.PC00.LPCB.EC__.HKEY.DYTC, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.EC__.HKEY.OEMV, IntObj)
    External (_SB_.PC00.MC__.MHBR, FieldUnitObj)
    External (_SB_.PC00.TCPU, DeviceObj)
    External (_SB_.PL10, FieldUnitObj)
    External (_SB_.PL11, FieldUnitObj)
    External (_SB_.PL12, FieldUnitObj)
    External (_SB_.PL20, FieldUnitObj)
    External (_SB_.PL21, FieldUnitObj)
    External (_SB_.PL22, FieldUnitObj)
    External (_SB_.PLW0, FieldUnitObj)
    External (_SB_.PLW1, FieldUnitObj)
    External (_SB_.PLW2, FieldUnitObj)
    External (_SB_.PR00, ProcessorObj)
    External (_SB_.PR00._PSS, MethodObj)    // 0 Arguments
    External (_SB_.PR00._TPC, IntObj)
    External (_SB_.PR00._TSD, MethodObj)    // 0 Arguments
    External (_SB_.PR00._TSS, MethodObj)    // 0 Arguments
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.PR00.TSMC, PkgObj)
    External (_SB_.PR00.TSMF, PkgObj)
    External (_SB_.PR01, ProcessorObj)
    External (_SB_.PR02, ProcessorObj)
    External (_SB_.PR03, ProcessorObj)
    External (_SB_.PR04, ProcessorObj)
    External (_SB_.PR05, ProcessorObj)
    External (_SB_.PR06, ProcessorObj)
    External (_SB_.PR07, ProcessorObj)
    External (_SB_.PR08, ProcessorObj)
    External (_SB_.PR09, ProcessorObj)
    External (_SB_.PR10, ProcessorObj)
    External (_SB_.PR11, ProcessorObj)
    External (_SB_.PR12, ProcessorObj)
    External (_SB_.PR13, ProcessorObj)
    External (_SB_.PR14, ProcessorObj)
    External (_SB_.PR15, ProcessorObj)
    External (_SB_.PR16, ProcessorObj)
    External (_SB_.PR17, ProcessorObj)
    External (_SB_.PR18, ProcessorObj)
    External (_SB_.PR19, ProcessorObj)
    External (_SB_.PR20, ProcessorObj)
    External (_SB_.PR21, ProcessorObj)
    External (_SB_.PR22, ProcessorObj)
    External (_SB_.PR23, ProcessorObj)
    External (_SB_.PR24, ProcessorObj)
    External (_SB_.PR25, ProcessorObj)
    External (_SB_.PR26, ProcessorObj)
    External (_SB_.PR27, ProcessorObj)
    External (_SB_.PR28, ProcessorObj)
    External (_SB_.PR29, ProcessorObj)
    External (_SB_.PR30, ProcessorObj)
    External (_SB_.PR31, ProcessorObj)
    External (_SB_.SLPB, DeviceObj)
    External (_SB_.TAR0, FieldUnitObj)
    External (_SB_.TAR1, FieldUnitObj)
    External (_SB_.TAR2, FieldUnitObj)
    External (_TZ_.TC2K, MethodObj)    // 1 Arguments
    External (_TZ_.THM0, ThermalZoneObj)
    External (_TZ_.THM0._TMP, MethodObj)    // 0 Arguments
    External (ACTT, IntObj)
    External (ADBG, MethodObj)    // 1 Arguments
    External (ATPC, IntObj)
    External (BATR, IntObj)
    External (CHGE, IntObj)
    External (CRTT, IntObj)
    External (DCFE, IntObj)
    External (DPCP, IntObj)
    External (DPTF, IntObj)
    External (ECON, IntObj)
    External (FND1, IntObj)
    External (FND2, IntObj)
    External (FND3, IntObj)
    External (GTST, MethodObj)    // 1 Arguments
    External (HIDW, MethodObj)    // 4 Arguments
    External (HIWC, MethodObj)    // 1 Arguments
    External (IN34, IntObj)
    External (MPID, IntObj)
    External (ODV0, UnknownObj)
    External (ODV1, UnknownObj)
    External (ODV2, UnknownObj)
    External (ODV3, UnknownObj)
    External (ODV4, UnknownObj)
    External (ODV5, UnknownObj)
    External (ODV6, UnknownObj)
    External (ODV7, UnknownObj)
    External (ODV8, UnknownObj)
    External (ODV9, UnknownObj)
    External (ODVA, UnknownObj)
    External (ODVB, UnknownObj)
    External (ODVC, UnknownObj)
    External (ODVD, UnknownObj)
    External (ODVE, UnknownObj)
    External (ODVF, UnknownObj)
    External (ODVG, UnknownObj)
    External (ODVH, UnknownObj)
    External (ODVI, UnknownObj)
    External (ODVJ, UnknownObj)
    External (ODVK, UnknownObj)
    External (PCHE, FieldUnitObj)
    External (PF00, IntObj)
    External (PLID, IntObj)
    External (PNHM, IntObj)
    External (PPPR, IntObj)
    External (PPSZ, IntObj)
    External (PSVT, IntObj)
    External (PTPC, IntObj)
    External (PWRE, IntObj)
    External (PWRS, IntObj)
    External (S1AT, IntObj)
    External (S1CT, IntObj)
    External (S1DE, IntObj)
    External (S1HT, IntObj)
    External (S1PT, IntObj)
    External (S1S3, IntObj)
    External (S2AT, IntObj)
    External (S2CT, IntObj)
    External (S2DE, IntObj)
    External (S2HT, IntObj)
    External (S2PT, IntObj)
    External (S2S3, IntObj)
    External (S3DE, IntObj)
    External (S4DE, IntObj)
    External (S5DE, IntObj)
    External (S6DE, IntObj)
    External (S6P2, IntObj)
    External (SADE, IntObj)
    External (SSP1, IntObj)
    External (SSP2, IntObj)
    External (SSP3, IntObj)
    External (SSP4, IntObj)
    External (SSP5, IntObj)
    External (STDV, IntObj)
    External (TCNT, IntObj)
    External (TSOD, IntObj)

    Scope (\_SB)
    {
        Device (IETM)
        {
            Method (GHID, 1, Serialized)
            {
                If ((Arg0 == "IETM"))
                {
                    Return ("INTC1041")
                }

                If ((Arg0 == "SEN1"))
                {
                    Return ("INTC1046")
                }

                If ((Arg0 == "SEN2"))
                {
                    Return ("INTC1046")
                }

                If ((Arg0 == "SEN3"))
                {
                    Return ("INTC1046")
                }

                If ((Arg0 == "SEN4"))
                {
                    Return ("INTC1046")
                }

                If ((Arg0 == "SEN5"))
                {
                    Return ("INTC1046")
                }

                If ((Arg0 == "TPCH"))
                {
                    Return ("INTC1049")
                }

                If ((Arg0 == "TFN1"))
                {
                    Return ("INTC1048")
                }

                If ((Arg0 == "TFN2"))
                {
                    Return ("INTC1048")
                }

                If ((Arg0 == "TFN3"))
                {
                    Return ("INTC1048")
                }

                If ((Arg0 == "TPWR"))
                {
                    Return ("INTC1060")
                }

                If ((Arg0 == "1"))
                {
                    Return ("INTC1061")
                }

                If ((Arg0 == "CHRG"))
                {
                    Return ("INTC1046")
                }

                Return ("XXXX9999")
            }

            Name (_UID, "IETM")  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (\_SB.IETM.GHID (_UID))
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((\DPTF == One) && (\IN34 == One)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (PTRP, Zero)
            Name (PSEM, Zero)
            Name (ATRP, Zero)
            Name (ASEM, Zero)
            Name (YTRP, Zero)
            Name (YSEM, Zero)
            Name (DPTE, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, Zero, STS1)
                CreateDWordField (Arg3, 0x04, CAP1)
                If ((CAP1 & One))
                {
                    If ((DPTE == Zero))
                    {
                        DPTE = One
                        \_SB.PC00.LPCB.EC.HKEY.DYTC (0x800F0001)
                        If (\_SB.PC00.LPCB.EC.HKEY.DHKC) {}
                    }
                }
                ElseIf ((DPTE == One))
                {
                    DPTE = Zero
                    \_SB.PC00.LPCB.EC.HKEY.DYTC (0x01FF)
                    If (\_SB.PC00.LPCB.EC.HKEY.DHKC) {}
                }

                ADBG (Concatenate ("OSC->DPTE=", ToHexString (DPTE)))
                If ((Arg1 != One))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x0A
                    Return (Arg3)
                }

                If ((Arg2 != 0x02))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x02
                    Return (Arg3)
                }

                If (CondRefOf (\_SB.APSV))
                {
                    If ((PSEM == Zero))
                    {
                        PSEM = One
                        PTRP = \_SB.APSV /* External reference */
                    }
                }

                If (CondRefOf (\_SB.AAC0))
                {
                    If ((ASEM == Zero))
                    {
                        ASEM = One
                        ATRP = \_SB.AAC0 /* External reference */
                    }
                }

                If (CondRefOf (\_SB.ACRT))
                {
                    If ((YSEM == Zero))
                    {
                        YSEM = One
                        YTRP = \_SB.ACRT /* External reference */
                    }
                }

                If ((Arg0 == ToUUID ("b23ba85d-c8b7-3542-88de-8de2ffcfd698") /* Unknown UUID */))
                {
                    If (~(STS1 & One))
                    {
                        If ((CAP1 & One))
                        {
                            If ((CAP1 & 0x02))
                            {
                                \_SB.AAC0 = 0x6E
                            }
                            Else
                            {
                                \_SB.AAC0 = ATRP /* \_SB_.IETM.ATRP */
                            }

                            If ((CAP1 & 0x04))
                            {
                                \_SB.APSV = 0x6E
                            }
                            Else
                            {
                                \_SB.APSV = PTRP /* \_SB_.IETM.PTRP */
                            }

                            If ((CAP1 & 0x08))
                            {
                                \_SB.ACRT = 0xD2
                            }
                            Else
                            {
                                \_SB.ACRT = YTRP /* \_SB_.IETM.YTRP */
                            }

                            Notify (\_TZ.THM0, 0x81) // Information Change
                        }
                        Else
                        {
                            \_SB.ACRT = YTRP /* \_SB_.IETM.YTRP */
                            \_SB.APSV = PTRP /* \_SB_.IETM.PTRP */
                            \_SB.AAC0 = ATRP /* \_SB_.IETM.ATRP */
                        }

                        Notify (\_TZ.THM0, 0x81) // Information Change
                    }

                    Return (Arg3)
                }

                Return (Arg3)
            }

            Method (DCFG, 0, NotSerialized)
            {
                Return (\DCFE) /* External reference */
            }

            Name (ODVX, Package (0x15)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (ODVP, 0, Serialized)
            {
                ODVX [Zero] = \ODV0 /* External reference */
                ODVX [One] = \ODV1 /* External reference */
                ODVX [0x02] = \ODV2 /* External reference */
                ODVX [0x03] = \ODV3 /* External reference */
                ODVX [0x04] = \ODV4 /* External reference */
                ODVX [0x05] = \ODV5 /* External reference */
                ODVX [0x06] = ODV6 /* External reference */
                ODVX [0x07] = ODV7 /* External reference */
                ODVX [0x08] = ODV8 /* External reference */
                ODVX [0x09] = ODV9 /* External reference */
                ODVX [0x0A] = ODVA /* External reference */
                ODVX [0x0B] = ODVB /* External reference */
                ODVX [0x0C] = ODVC /* External reference */
                ODVX [0x0D] = ODVD /* External reference */
                ODVX [0x0E] = ODVE /* External reference */
                ODVX [0x0F] = ODVF /* External reference */
                ODVX [0x10] = ODVG /* External reference */
                ODVX [0x11] = ODVH /* External reference */
                ODVX [0x12] = ODVI /* External reference */
                ODVX [0x13] = ODVJ /* External reference */
                ODVX [0x14] = ODVK /* External reference */
                Return (ODVX) /* \_SB_.IETM.ODVX */
            }
        }
    }

    Scope (\_SB.PC00.LPCB.EC)
    {
        Device (SEN1)
        {
            Name (_UID, "SEN1")  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (\_SB.IETM.GHID (_UID))
            }

            Name (_STR, Unicode ("Sensor 1 Ambient Remote 0 S9"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\S1DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (CondRefOf (\_SB.PC00.LPCB.EC.GSTM))
                {
                    Local0 = \_SB.PC00.LPCB.EC.GSTM (0x02)
                }
                Else
                {
                    Local0 = \GTST (0x02)
                    If ((Local0 == 0x80))
                    {
                        Local0 = One
                    }
                }

                Local1 = \_TZ.TC2K (Local0)
                Return (Local1)
            }

            Name (PATC, Zero)
            Name (GTSH, 0x14)
            Name (LSTM, Zero)
            Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
            {
                LSTM = Arg0
                Notify (\_SB.PC00.LPCB.EC.SEN1, 0x91) // Device-Specific
            }

            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
                Return (0x0ADE)
            }

            Name (S1AC, 0x3C)
            Name (S1A1, 0x32)
            Name (S1A2, 0x28)
            Name (S1PV, 0x50)
            Name (S1CC, 0x50)
            Name (S1C3, 0x46)
            Name (S1HP, 0x4B)
            Name (SSP1, 0x32)
            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (SSP1) /* \_SB_.PC00.LPCB.EC__.SEN1.SSP1 */
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (S1PV))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (\_SB.IETM.CTOK (S1CC))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                Return (\_SB.IETM.CTOK (S1C3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (\_SB.IETM.CTOK (S1HP))
            }
        }
    }

    Scope (\_SB.PC00.LPCB.EC)
    {
        Device (SEN2)
        {
            Name (_UID, "SEN2")  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (\_SB.IETM.GHID (_UID))
            }

            Name (_STR, Unicode ("Sensor 2 FAN Remote 5 S2"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\S2DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (CondRefOf (\_SB.PC00.LPCB.EC.GSTM))
                {
                    Local0 = \_SB.PC00.LPCB.EC.GSTM (0x03)
                }
                Else
                {
                    Local0 = \GTST (0x03)
                    If ((Local0 == 0x80))
                    {
                        Local0 = One
                    }
                }

                Local1 = \_TZ.TC2K (Local0)
                \_SB.FAN0.SRPM (Local0)
                \_SB.FAN0.CRNF ()
                Return (Local1)
            }

            Name (PATC, Zero)
            Name (GTSH, 0x14)
            Name (LSTM, Zero)
            Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
            {
                LSTM = Arg0
                Notify (\_SB.PC00.LPCB.EC.SEN2, 0x91) // Device-Specific
            }

            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
                Return (0x0ADE)
            }

            Name (S2AC, 0x3C)
            Name (S2A1, 0x32)
            Name (S2A2, 0x28)
            Name (S2PV, 0x50)
            Name (S2CC, 0x50)
            Name (S2C3, 0x46)
            Name (S2HP, 0x4B)
            Name (SSP2, 0x32)
            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (SSP2) /* \_SB_.PC00.LPCB.EC__.SEN2.SSP2 */
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (S2PV))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (\_SB.IETM.CTOK (S2CC))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                Return (\_SB.IETM.CTOK (S2C3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (\_SB.IETM.CTOK (S2HP))
            }
        }
    }

    Scope (\_SB.PC00.LPCB.EC)
    {
        Device (SEN3)
        {
            Name (_UID, "SEN3")  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (\_SB.IETM.GHID (_UID))
            }

            Name (_STR, Unicode ("Sensor 3 VRAM Sa"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\S3DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (CondRefOf (\_SB.PC00.LPCB.EC.GSTM))
                {
                    Local0 = \_SB.PC00.LPCB.EC.GSTM (0x04)
                }
                Else
                {
                    Local0 = \GTST (0x04)
                    If ((Local0 == 0x80))
                    {
                        Local0 = One
                    }
                }

                Local1 = \_TZ.TC2K (Local0)
                Return (Local1)
            }

            Name (PATC, Zero)
            Name (GTSH, 0x14)
            Name (LSTM, Zero)
            Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
            {
                LSTM = Arg0
                Notify (\_SB.PC00.LPCB.EC.SEN3, 0x91) // Device-Specific
            }

            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
                Return (0x0ADE)
            }

            Name (S3AC, 0x3C)
            Name (S3A1, 0x32)
            Name (S3A2, 0x28)
            Name (S3PV, 0x50)
            Name (S3CC, 0x50)
            Name (S3C3, 0x46)
            Name (S3HP, 0x4B)
            Name (SSP3, 0x32)
            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (SSP3) /* \_SB_.PC00.LPCB.EC__.SEN3.SSP3 */
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (S3PV))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (\_SB.IETM.CTOK (S3CC))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                Return (\_SB.IETM.CTOK (S3C3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (\_SB.IETM.CTOK (S3HP))
            }
        }
    }

    Scope (\_SB.PC00.LPCB.EC)
    {
        Device (SEN4)
        {
            Name (_UID, "SEN4")  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (\_SB.IETM.GHID (_UID))
            }

            Name (_STR, Unicode ("Sensor 4 DCDC S8"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\S4DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (CondRefOf (\_SB.PC00.LPCB.EC.GSTM))
                {
                    Local0 = \_SB.PC00.LPCB.EC.GSTM (0x05)
                }
                Else
                {
                    Local0 = \GTST (0x05)
                    If ((Local0 == 0x80))
                    {
                        Local0 = One
                    }
                }

                Local1 = \_TZ.TC2K (Local0)
                Return (Local1)
            }

            Name (PATC, Zero)
            Name (GTSH, 0x14)
            Name (LSTM, Zero)
            Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
            {
                LSTM = Arg0
                Notify (\_SB.PC00.LPCB.EC.SEN4, 0x91) // Device-Specific
            }

            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
                Return (0x0ADE)
            }

            Name (S4AC, 0x3C)
            Name (S4A1, 0x32)
            Name (S4A2, 0x28)
            Name (S4PV, 0x50)
            Name (S4CC, 0x50)
            Name (S4C3, 0x46)
            Name (S4HP, 0x4B)
            Name (SSP4, 0x32)
            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (SSP4) /* \_SB_.PC00.LPCB.EC__.SEN4.SSP4 */
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (S4PV))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (\_SB.IETM.CTOK (S4CC))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                Return (\_SB.IETM.CTOK (S4C3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (\_SB.IETM.CTOK (S4HP))
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Name (TRT0, Package (0x01)
        {
            Package (0x08)
            {
                \_SB.PC00.TCPU, 
                \_SB.PC00.TCPU, 
                0x12, 
                0x32, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }
        })
        Method (_TRT, 0, NotSerialized)  // _TRT: Thermal Relationship Table
        {
            Return (TRT0) /* \_SB_.IETM.TRT0 */
        }
    }

    Scope (\_SB.IETM)
    {
        Name (PTTL, 0x14)
        Name (PSVT, Package (0x06)
        {
            0x02, 
            Package (0x0C)
            {
                \_SB.PC00.TCPU, 
                \_SB.PC00.TCPU, 
                0x02, 
                0x05, 
                0x0E94, 
                Zero, 
                0x00010000, 
                "MIN", 
                0x7D, 
                0x0A, 
                0x0190, 
                Zero
            }, 

            Package (0x0C)
            {
                \_SB.PC00.TCPU, 
                \_SB.PC00.LPCB.EC.SEN1, 
                One, 
                0x0A, 
                0x0E8A, 
                0x0E, 
                0x00010000, 
                "MIN", 
                0x01F4, 
                0x0A, 
                0x14, 
                Zero
            }, 

            Package (0x0C)
            {
                \_SB.PC00.TCPU, 
                \_SB.PC00.LPCB.EC.SEN2, 
                One, 
                0x0A, 
                0x0E8A, 
                0x0E, 
                0x00010000, 
                "MIN", 
                0x01F4, 
                0x0A, 
                0x14, 
                Zero
            }, 

            Package (0x0C)
            {
                \_SB.PC00.TCPU, 
                \_SB.PC00.LPCB.EC.SEN3, 
                One, 
                0x0A, 
                0x0E8A, 
                0x0E, 
                0x00010000, 
                "MIN", 
                0x01F4, 
                0x0A, 
                0x14, 
                Zero
            }, 

            Package (0x0C)
            {
                \_SB.PC00.TCPU, 
                \_SB.PC00.LPCB.EC.SEN4, 
                One, 
                0x0A, 
                0x0E8A, 
                0x0E, 
                0x00010000, 
                "MIN", 
                0x01F4, 
                0x0A, 
                0x14, 
                Zero
            }
        })
    }

    Scope (\_SB.IETM)
    {
        Method (KTOC, 1, Serialized)
        {
            If ((Arg0 > 0x0AAC))
            {
                Return (((Arg0 - 0x0AAC) / 0x0A))
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (CTOK, 1, Serialized)
        {
            Return (((Arg0 * 0x0A) + 0x0AAC))
        }

        Method (C10K, 1, Serialized)
        {
            Name (TMP1, Buffer (0x10)
            {
                 0x00                                             // .
            })
            CreateByteField (TMP1, Zero, TMPL)
            CreateByteField (TMP1, One, TMPH)
            Local0 = (Arg0 + 0x0AAC)
            TMPL = (Local0 & 0xFF)
            TMPH = ((Local0 & 0xFF00) >> 0x08)
            ToInteger (TMP1, Local1)
            Return (Local1)
        }

        Method (K10C, 1, Serialized)
        {
            If ((Arg0 > 0x0AAC))
            {
                Return ((Arg0 - 0x0AAC))
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PC00.TCPU)
    {
        Name (PFLG, Zero)
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((\SADE == One))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }

        OperationRegion (CPWR, SystemMemory, ((\_SB.PC00.MC.MHBR << 0x0F) + 0x5000), 0x1000)
        Field (CPWR, ByteAcc, NoLock, Preserve)
        {
            Offset (0x930), 
            PTDP,   15, 
            Offset (0x932), 
            PMIN,   15, 
            Offset (0x934), 
            PMAX,   15, 
            Offset (0x936), 
            TMAX,   7, 
            Offset (0x938), 
            PWRU,   4, 
            Offset (0x939), 
            EGYU,   5, 
            Offset (0x93A), 
            TIMU,   4, 
            Offset (0x958), 
            Offset (0x95C), 
            LPMS,   1, 
            CTNL,   2, 
            Offset (0x978), 
            PCTP,   8, 
            Offset (0x998), 
            RP0C,   8, 
            RP1C,   8, 
            RPNC,   8, 
            Offset (0xF3C), 
            TRAT,   8, 
            Offset (0xF40), 
            PTD1,   15, 
            Offset (0xF42), 
            TRA1,   8, 
            Offset (0xF44), 
            PMX1,   15, 
            Offset (0xF46), 
            PMN1,   15, 
            Offset (0xF48), 
            PTD2,   15, 
            Offset (0xF4A), 
            TRA2,   8, 
            Offset (0xF4C), 
            PMX2,   15, 
            Offset (0xF4E), 
            PMN2,   15, 
            Offset (0xF50), 
            CTCL,   2, 
                ,   29, 
            CLCK,   1, 
            MNTR,   8
        }

        Name (XPCC, Zero)
        Method (PPCC, 0, Serialized)
        {
            If (((XPCC == Zero) && CondRefOf (\_SB.CBMI)))
            {
                Switch (ToInteger (\_SB.CBMI))
                {
                    Case (Zero)
                    {
                        If (((\_SB.CLVL >= One) && (\_SB.CLVL <= 0x03)))
                        {
                            CPL0 ()
                            XPCC = One
                        }
                    }
                    Case (One)
                    {
                        If (((\_SB.CLVL == 0x02) || (\_SB.CLVL == 0x03)))
                        {
                            CPL1 ()
                            XPCC = One
                        }
                    }
                    Case (0x02)
                    {
                        If ((\_SB.CLVL == 0x03))
                        {
                            CPL2 ()
                            XPCC = One
                        }
                    }

                }
            }

            Return (NPCC) /* \_SB_.PC00.TCPU.NPCC */
        }

        Name (NPCC, Package (0x03)
        {
            0x02, 
            Package (0x06)
            {
                Zero, 
                0x88B8, 
                0xAFC8, 
                0x6D60, 
                0x7D00, 
                0x03E8
            }, 

            Package (0x06)
            {
                One, 
                0xDBBA, 
                0xDBBA, 
                Zero, 
                Zero, 
                0x03E8
            }
        })
        Method (CPNU, 2, Serialized)
        {
            Name (CNVT, Zero)
            Name (PPUU, Zero)
            Name (RMDR, Zero)
            If ((PWRU == Zero))
            {
                PPUU = One
            }
            Else
            {
                PPUU = (PWRU-- << 0x02)
            }

            Divide (Arg0, PPUU, RMDR, CNVT) /* \_SB_.PC00.TCPU.CPNU.CNVT */
            If ((Arg1 == Zero))
            {
                Return (CNVT) /* \_SB_.PC00.TCPU.CPNU.CNVT */
            }
            Else
            {
                CNVT *= 0x03E8
                RMDR *= 0x03E8
                RMDR /= PPUU
                CNVT += RMDR /* \_SB_.PC00.TCPU.CPNU.RMDR */
                Return (CNVT) /* \_SB_.PC00.TCPU.CPNU.CNVT */
            }
        }

        Method (CPL0, 0, NotSerialized)
        {
            \_SB.PC00.TCPU.NPCC [Zero] = 0x02
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [One] = 0x7D
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x02] = CPNU (\_SB.PL10, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x03] = (\_SB.PLW0 * 0x03E8)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x04] = ((\_SB.PLW0 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x05] = PPSZ /* External reference */
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [One] = CPNU (\_SB.PL20, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x02] = CPNU (\_SB.PL20, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x05] = PPSZ /* External reference */
        }

        Method (CPL1, 0, NotSerialized)
        {
            \_SB.PC00.TCPU.NPCC [Zero] = 0x02
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [One] = 0x7D
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x02] = CPNU (\_SB.PL11, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x03] = (\_SB.PLW1 * 0x03E8)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x04] = ((\_SB.PLW1 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x05] = PPSZ /* External reference */
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [One] = CPNU (\_SB.PL21, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x02] = CPNU (\_SB.PL21, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x05] = PPSZ /* External reference */
        }

        Method (CPL2, 0, NotSerialized)
        {
            \_SB.PC00.TCPU.NPCC [Zero] = 0x02
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [One] = 0x7D
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x02] = CPNU (\_SB.PL12, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x03] = (\_SB.PLW2 * 0x03E8)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x04] = ((\_SB.PLW2 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x05] = PPSZ /* External reference */
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [One] = CPNU (\_SB.PL22, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x02] = CPNU (\_SB.PL22, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x05] = PPSZ /* External reference */
        }

        Name (LSTM, Zero)
        Name (_PPC, Zero)  // _PPC: Performance Present Capabilities
        Method (SPPC, 1, Serialized)
        {
            If (CondRefOf (\_SB.CPPC))
            {
                \_SB.CPPC = Arg0
            }

            If ((ToInteger (\TCNT) > Zero))
            {
                Notify (\_SB.PR00, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > One))
            {
                Notify (\_SB.PR01, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x02))
            {
                Notify (\_SB.PR02, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x03))
            {
                Notify (\_SB.PR03, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x04))
            {
                Notify (\_SB.PR04, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x05))
            {
                Notify (\_SB.PR05, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x06))
            {
                Notify (\_SB.PR06, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x07))
            {
                Notify (\_SB.PR07, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x08))
            {
                Notify (\_SB.PR08, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x09))
            {
                Notify (\_SB.PR09, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x0A))
            {
                Notify (\_SB.PR10, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x0B))
            {
                Notify (\_SB.PR11, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x0C))
            {
                Notify (\_SB.PR12, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x0D))
            {
                Notify (\_SB.PR13, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x0E))
            {
                Notify (\_SB.PR14, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x0F))
            {
                Notify (\_SB.PR15, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x10))
            {
                Notify (\_SB.PR16, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x11))
            {
                Notify (\_SB.PR17, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x12))
            {
                Notify (\_SB.PR18, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x13))
            {
                Notify (\_SB.PR19, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x14))
            {
                Notify (\_SB.PR20, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x15))
            {
                Notify (\_SB.PR21, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x16))
            {
                Notify (\_SB.PR22, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x17))
            {
                Notify (\_SB.PR23, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x18))
            {
                Notify (\_SB.PR24, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x19))
            {
                Notify (\_SB.PR25, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x1A))
            {
                Notify (\_SB.PR26, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x1B))
            {
                Notify (\_SB.PR27, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x1C))
            {
                Notify (\_SB.PR28, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x1D))
            {
                Notify (\_SB.PR29, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x1E))
            {
                Notify (\_SB.PR30, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x1F))
            {
                Notify (\_SB.PR31, 0x80) // Status Change
            }
        }

        Method (SPUR, 1, NotSerialized)
        {
            If ((Arg0 <= \TCNT))
            {
                If ((\_SB.PAGD._STA () == 0x0F))
                {
                    \_SB.PAGD._PUR [One] = Arg0
                    Notify (\_SB.PAGD, 0x80) // Status Change
                }
            }
        }

        Method (PCCC, 0, Serialized)
        {
            PCCX [Zero] = One
            Switch (ToInteger (CPNU (PTDP, Zero)))
            {
                Case (0x39)
                {
                    DerefOf (PCCX [One]) [Zero] = 0xA7F8
                    DerefOf (PCCX [One]) [One] = 0x00017318
                }
                Case (0x2F)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x9858
                    DerefOf (PCCX [One]) [One] = 0x00014C08
                }
                Case (0x25)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x7148
                    DerefOf (PCCX [One]) [One] = 0xD6D8
                }
                Case (0x19)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x3E80
                    DerefOf (PCCX [One]) [One] = 0x7D00
                }
                Case (0x0F)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x36B0
                    DerefOf (PCCX [One]) [One] = 0x7D00
                }
                Case (0x0B)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x36B0
                    DerefOf (PCCX [One]) [One] = 0x61A8
                }
                Default
                {
                    DerefOf (PCCX [One]) [Zero] = 0xFF
                    DerefOf (PCCX [One]) [One] = 0xFF
                }

            }

            Return (PCCX) /* \_SB_.PC00.TCPU.PCCX */
        }

        Name (PCCX, Package (0x02)
        {
            0x80000000, 
            Package (0x02)
            {
                0x80000000, 
                0x80000000
            }
        })
        Name (KEFF, Package (0x1E)
        {
            Package (0x02)
            {
                0x01BC, 
                Zero
            }, 

            Package (0x02)
            {
                0x01CF, 
                0x27
            }, 

            Package (0x02)
            {
                0x01E1, 
                0x4B
            }, 

            Package (0x02)
            {
                0x01F3, 
                0x6C
            }, 

            Package (0x02)
            {
                0x0206, 
                0x8B
            }, 

            Package (0x02)
            {
                0x0218, 
                0xA8
            }, 

            Package (0x02)
            {
                0x022A, 
                0xC3
            }, 

            Package (0x02)
            {
                0x023D, 
                0xDD
            }, 

            Package (0x02)
            {
                0x024F, 
                0xF4
            }, 

            Package (0x02)
            {
                0x0261, 
                0x010B
            }, 

            Package (0x02)
            {
                0x0274, 
                0x011F
            }, 

            Package (0x02)
            {
                0x032C, 
                0x01BD
            }, 

            Package (0x02)
            {
                0x03D7, 
                0x0227
            }, 

            Package (0x02)
            {
                0x048B, 
                0x026D
            }, 

            Package (0x02)
            {
                0x053E, 
                0x02A1
            }, 

            Package (0x02)
            {
                0x05F7, 
                0x02C6
            }, 

            Package (0x02)
            {
                0x06A8, 
                0x02E6
            }, 

            Package (0x02)
            {
                0x075D, 
                0x02FF
            }, 

            Package (0x02)
            {
                0x0818, 
                0x0311
            }, 

            Package (0x02)
            {
                0x08CF, 
                0x0322
            }, 

            Package (0x02)
            {
                0x179C, 
                0x0381
            }, 

            Package (0x02)
            {
                0x2DDC, 
                0x039C
            }, 

            Package (0x02)
            {
                0x44A8, 
                0x039E
            }, 

            Package (0x02)
            {
                0x5C35, 
                0x0397
            }, 

            Package (0x02)
            {
                0x747D, 
                0x038D
            }, 

            Package (0x02)
            {
                0x8D7F, 
                0x0382
            }, 

            Package (0x02)
            {
                0xA768, 
                0x0376
            }, 

            Package (0x02)
            {
                0xC23B, 
                0x0369
            }, 

            Package (0x02)
            {
                0xDE26, 
                0x035A
            }, 

            Package (0x02)
            {
                0xFB7C, 
                0x034A
            }
        })
        Name (CEUP, Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        })
        Method (_TMP, 0, Serialized)  // _TMP: Temperature
        {
            Return (\_TZ.THM0._TMP ())
        }

        Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
        {
            LSTM = Arg0
            Notify (\_SB.PC00.TCPU, 0x91) // Device-Specific
        }

        Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
        {
            Return (0x0ADE)
        }

        Name (PTYP, Zero)
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (CondRefOf (\_SB.PR00._PSS))
            {
                Return (\_SB.PR00._PSS ())
            }
            Else
            {
                Return (Package (0x02)
                {
                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
            }
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If (CondRefOf (\_SB.PR00._TSS))
            {
                Return (\_SB.PR00._TSS ())
            }
            Else
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
            }
        }

        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            If (CondRefOf (\_SB.PR00._TPC))
            {
                Return (\_SB.PR00._TPC) /* External reference */
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((CondRefOf (\PF00) && (\PF00 != 0x80000000)))
            {
                If ((\PF00 & 0x04))
                {
                    Return (Package (0x02)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x05,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001810, // Address
                                ,)
                        }, 

                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x05,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001810, // Address
                                ,)
                        }
                    })
                }
            }
            Else
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (CondRefOf (\_SB.PR00._TSD))
            {
                Return (\_SB.PR00._TSD ())
            }
            Else
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFC, 
                        Zero
                    }
                })
            }
        }

        Method (_TDL, 0, NotSerialized)  // _TDL: T-State Depth Limit
        {
            If ((CondRefOf (\_SB.PR00._TSS) && CondRefOf (\_SB.CFGD)))
            {
                If ((\_SB.CFGD & 0x2000))
                {
                    Return ((SizeOf (\_SB.PR00.TSMF) - One))
                }
                Else
                {
                    Return ((SizeOf (\_SB.PR00.TSMC) - One))
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PDL, 0, NotSerialized)  // _PDL: P-state Depth Limit
        {
            If (CondRefOf (\_SB.PR00._PSS))
            {
                If ((\_SB.OSCP & 0x0400))
                {
                    Return ((SizeOf (\_SB.PR00.TPSS) - One))
                }
                Else
                {
                    Return ((SizeOf (\_SB.PR00.LPSS) - One))
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Name (TJMX, 0x6E)
        Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
        {
            Return (Zero)
        }

        Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
        {
            Return (\_SB.IETM.CTOK (TJMX))
        }

        Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
        {
            Return (\_SB.IETM.CTOK (TJMX))
        }

        Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
        {
            Return (\_SB.IETM.CTOK (TJMX))
        }

        Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
        {
            Return (\_SB.IETM.CTOK (TJMX))
        }
    }

    Scope (\_SB.IETM)
    {
        Name (CTSP, Package (0x01)
        {
            ToUUID ("e145970a-e4c1-4d73-900e-c9c5a69dd067") /* Unknown UUID */
        })
    }

    Scope (\_SB.PC00.TCPU)
    {
        Method (TDPL, 0, Serialized)
        {
            Name (AAAA, Zero)
            Name (BBBB, Zero)
            Name (CCCC, Zero)
            Local0 = CTNL /* \_SB_.PC00.TCPU.CTNL */
            If (((Local0 == One) || (Local0 == 0x02)))
            {
                Local0 = \_SB.CLVL /* External reference */
            }
            Else
            {
                Return (Package (0x01)
                {
                    Zero
                })
            }

            If ((CLCK == One))
            {
                Local0 = One
            }

            AAAA = CPNU (\_SB.PL10, One)
            BBBB = CPNU (\_SB.PL11, One)
            CCCC = CPNU (\_SB.PL12, One)
            Name (TMP1, Package (0x01)
            {
                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Name (TMP2, Package (0x02)
            {
                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Name (TMP3, Package (0x03)
            {
                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            If ((Local0 == 0x03))
            {
                If ((AAAA > BBBB))
                {
                    If ((AAAA > CCCC))
                    {
                        If ((BBBB > CCCC))
                        {
                            Local3 = Zero
                            LEV0 = Zero
                            Local4 = One
                            LEV1 = One
                            Local5 = 0x02
                            LEV2 = 0x02
                        }
                        Else
                        {
                            Local3 = Zero
                            LEV0 = Zero
                            Local5 = One
                            LEV1 = 0x02
                            Local4 = 0x02
                            LEV2 = One
                        }
                    }
                    Else
                    {
                        Local5 = Zero
                        LEV0 = 0x02
                        Local3 = One
                        LEV1 = Zero
                        Local4 = 0x02
                        LEV2 = One
                    }
                }
                ElseIf ((BBBB > CCCC))
                {
                    If ((AAAA > CCCC))
                    {
                        Local4 = Zero
                        LEV0 = One
                        Local3 = One
                        LEV1 = Zero
                        Local5 = 0x02
                        LEV2 = 0x02
                    }
                    Else
                    {
                        Local4 = Zero
                        LEV0 = One
                        Local5 = One
                        LEV1 = 0x02
                        Local3 = 0x02
                        LEV2 = Zero
                    }
                }
                Else
                {
                    Local5 = Zero
                    LEV0 = 0x02
                    Local4 = One
                    LEV1 = One
                    Local3 = 0x02
                    LEV2 = Zero
                }

                Local1 = (\_SB.TAR0 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP3 [Local3]) [Zero] = AAAA /* \_SB_.PC00.TCPU.TDPL.AAAA */
                DerefOf (TMP3 [Local3]) [One] = Local2
                DerefOf (TMP3 [Local3]) [0x02] = \_SB.CTC0 /* External reference */
                DerefOf (TMP3 [Local3]) [0x03] = Local1
                DerefOf (TMP3 [Local3]) [0x04] = Zero
                Local1 = (\_SB.TAR1 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP3 [Local4]) [Zero] = BBBB /* \_SB_.PC00.TCPU.TDPL.BBBB */
                DerefOf (TMP3 [Local4]) [One] = Local2
                DerefOf (TMP3 [Local4]) [0x02] = \_SB.CTC1 /* External reference */
                DerefOf (TMP3 [Local4]) [0x03] = Local1
                DerefOf (TMP3 [Local4]) [0x04] = Zero
                Local1 = (\_SB.TAR2 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP3 [Local5]) [Zero] = CCCC /* \_SB_.PC00.TCPU.TDPL.CCCC */
                DerefOf (TMP3 [Local5]) [One] = Local2
                DerefOf (TMP3 [Local5]) [0x02] = \_SB.CTC2 /* External reference */
                DerefOf (TMP3 [Local5]) [0x03] = Local1
                DerefOf (TMP3 [Local5]) [0x04] = Zero
                Return (TMP3) /* \_SB_.PC00.TCPU.TDPL.TMP3 */
            }

            If ((Local0 == 0x02))
            {
                If ((AAAA > BBBB))
                {
                    Local3 = Zero
                    Local4 = One
                    LEV0 = Zero
                    LEV1 = One
                    LEV2 = Zero
                }
                Else
                {
                    Local4 = Zero
                    Local3 = One
                    LEV0 = One
                    LEV1 = Zero
                    LEV2 = Zero
                }

                Local1 = (\_SB.TAR0 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP2 [Local3]) [Zero] = AAAA /* \_SB_.PC00.TCPU.TDPL.AAAA */
                DerefOf (TMP2 [Local3]) [One] = Local2
                DerefOf (TMP2 [Local3]) [0x02] = \_SB.CTC0 /* External reference */
                DerefOf (TMP2 [Local3]) [0x03] = Local1
                DerefOf (TMP2 [Local3]) [0x04] = Zero
                Local1 = (\_SB.TAR1 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP2 [Local4]) [Zero] = BBBB /* \_SB_.PC00.TCPU.TDPL.BBBB */
                DerefOf (TMP2 [Local4]) [One] = Local2
                DerefOf (TMP2 [Local4]) [0x02] = \_SB.CTC1 /* External reference */
                DerefOf (TMP2 [Local4]) [0x03] = Local1
                DerefOf (TMP2 [Local4]) [0x04] = Zero
                Return (TMP2) /* \_SB_.PC00.TCPU.TDPL.TMP2 */
            }

            If ((Local0 == One))
            {
                Switch (ToInteger (\_SB.CBMI))
                {
                    Case (Zero)
                    {
                        Local1 = (\_SB.TAR0 + One)
                        Local2 = (Local1 * 0x64)
                        DerefOf (TMP1 [Zero]) [Zero] = AAAA /* \_SB_.PC00.TCPU.TDPL.AAAA */
                        DerefOf (TMP1 [Zero]) [One] = Local2
                        DerefOf (TMP1 [Zero]) [0x02] = \_SB.CTC0 /* External reference */
                        DerefOf (TMP1 [Zero]) [0x03] = Local1
                        DerefOf (TMP1 [Zero]) [0x04] = Zero
                        LEV0 = Zero
                        LEV1 = Zero
                        LEV2 = Zero
                    }
                    Case (One)
                    {
                        Local1 = (\_SB.TAR1 + One)
                        Local2 = (Local1 * 0x64)
                        DerefOf (TMP1 [Zero]) [Zero] = BBBB /* \_SB_.PC00.TCPU.TDPL.BBBB */
                        DerefOf (TMP1 [Zero]) [One] = Local2
                        DerefOf (TMP1 [Zero]) [0x02] = \_SB.CTC1 /* External reference */
                        DerefOf (TMP1 [Zero]) [0x03] = Local1
                        DerefOf (TMP1 [Zero]) [0x04] = Zero
                        LEV0 = One
                        LEV1 = One
                        LEV2 = One
                    }
                    Case (0x02)
                    {
                        Local1 = (\_SB.TAR2 + One)
                        Local2 = (Local1 * 0x64)
                        DerefOf (TMP1 [Zero]) [Zero] = CCCC /* \_SB_.PC00.TCPU.TDPL.CCCC */
                        DerefOf (TMP1 [Zero]) [One] = Local2
                        DerefOf (TMP1 [Zero]) [0x02] = \_SB.CTC2 /* External reference */
                        DerefOf (TMP1 [Zero]) [0x03] = Local1
                        DerefOf (TMP1 [Zero]) [0x04] = Zero
                        LEV0 = 0x02
                        LEV1 = 0x02
                        LEV2 = 0x02
                    }

                }

                Return (TMP1) /* \_SB_.PC00.TCPU.TDPL.TMP1 */
            }

            Return (Zero)
        }

        Name (MAXT, Zero)
        Method (TDPC, 0, NotSerialized)
        {
            Return (MAXT) /* \_SB_.PC00.TCPU.MAXT */
        }

        Name (LEV0, Zero)
        Name (LEV1, Zero)
        Name (LEV2, Zero)
        Method (STDP, 1, Serialized)
        {
            If ((Arg0 >= \_SB.CLVL))
            {
                Return (Zero)
            }

            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Local0 = LEV0 /* \_SB_.PC00.TCPU.LEV0 */
                }
                Case (One)
                {
                    Local0 = LEV1 /* \_SB_.PC00.TCPU.LEV1 */
                }
                Case (0x02)
                {
                    Local0 = LEV2 /* \_SB_.PC00.TCPU.LEV2 */
                }

            }

            Switch (ToInteger (Local0))
            {
                Case (Zero)
                {
                    CPL0 ()
                }
                Case (One)
                {
                    CPL1 ()
                }
                Case (0x02)
                {
                    CPL2 ()
                }

            }

            Notify (\_SB.PC00.TCPU, 0x83) // Device-Specific Change
        }
    }

    Scope (\_SB.IETM)
    {
        Name (DP2P, Package (0x01)
        {
            ToUUID ("9e04115a-ae87-4d1c-9500-0f3e340bfe75") /* Unknown UUID */
        })
        Name (DPSP, Package (0x01)
        {
            ToUUID ("42a441d6-ae6a-462b-a84b-4a8ce79027d3") /* Unknown UUID */
        })
        Name (DASP, Package (0x01)
        {
            ToUUID ("3a95c389-e4b8-4629-a526-c52c88626bae") /* Unknown UUID */
        })
        Name (DA2P, Package (0x01)
        {
            ToUUID ("0e56fab6-bdfc-4e8c-8246-40ecfd4d74ea") /* Unknown UUID */
        })
        Name (DCSP, Package (0x01)
        {
            ToUUID ("97c68ae7-15fa-499c-b8c9-5da81d606e0a") /* Unknown UUID */
        })
        Name (RFIP, Package (0x01)
        {
            ToUUID ("c4ce1849-243a-49f3-b8d5-f97002f38e6a") /* Unknown UUID */
        })
        Name (POBP, Package (0x01)
        {
            ToUUID ("f5a35014-c209-46a4-993a-eb56de7530a1") /* Unknown UUID */
        })
        Name (DAPP, Package (0x01)
        {
            ToUUID ("63be270f-1c11-48fd-a6f7-3af253ff3e2d") /* Unknown UUID */
        })
        Name (DVSP, Package (0x01)
        {
            ToUUID ("6ed722a7-9240-48a5-b479-31eef723d7cf") /* Unknown UUID */
        })
        Name (DPID, Package (0x01)
        {
            ToUUID ("42496e14-bc1b-46e8-a798-ca915464426f") /* Unknown UUID */
        })
    }

    Scope (\_SB.IETM)
    {
        Method (GDDV, 0, Serialized)
        {
            If (CondRefOf (\_SB.IETM.GBDV))
            {
                Return (\_SB.IETM.GBDV ())
            }
            Else
            {
                Return (Package (0x01)
                {
                    Buffer (Zero) {}
                })
            }
        }

        Method (IMOK, 1, NotSerialized)
        {
            Local1 = ((Arg0 << 0x10) & 0x01FF0000)
            Local1 |= 0x07
            ADBG (Concatenate ("IMOK to DYTC=", ToHexString (Local1)))
            \_SB.PC00.LPCB.EC.HKEY.DYTC (Local1)
            Return (Arg0)
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CtdpB", 0x00001000)
{
    External (_SB_.CPPC, IntObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.GMHB, MethodObj)    // 0 Arguments
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (CTPC, UnknownObj)
    External (CTPR, UnknownObj)
    External (FTPS, UnknownObj)
    External (PNHM, FieldUnitObj)
    External (PNTF, MethodObj)    // 1 Arguments
    External (PT0D, UnknownObj)
    External (PT1D, UnknownObj)
    External (PT2D, UnknownObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PC00)
    {
        OperationRegion (CTDP, SystemMemory, (\_SB.PC00.GMHB () + 0x5000), 0x1000)
        Field (CTDP, ByteAcc, NoLock, Preserve)
        {
            Offset (0x930), 
            PTDP,   15, 
            Offset (0x932), 
            PMIN,   15, 
            Offset (0x934), 
            PMAX,   15, 
            Offset (0x936), 
            TMAX,   7, 
            Offset (0x938), 
            PWRU,   4, 
            Offset (0x939), 
            EGYU,   5, 
            Offset (0x93A), 
            TIMU,   4, 
            Offset (0x958), 
            Offset (0x95C), 
            LPMS,   1, 
            CTNL,   2, 
            Offset (0x9A0), 
            PPL1,   15, 
            PL1E,   1, 
                ,   1, 
            PL1T,   7, 
            Offset (0x9A4), 
            PPL2,   15, 
            PL2E,   1, 
                ,   1, 
            PL2T,   7, 
            Offset (0xF3C), 
            TARN,   8, 
            Offset (0xF40), 
            PTD1,   15, 
            Offset (0xF42), 
            TAR1,   8, 
            Offset (0xF44), 
            PMX1,   15, 
            Offset (0xF46), 
            PMN1,   15, 
            Offset (0xF48), 
            PTD2,   15, 
            Offset (0xF4A), 
            TAR2,   8, 
            Offset (0xF4C), 
            PMX2,   15, 
            Offset (0xF4E), 
            PMN2,   15, 
            Offset (0xF50), 
            CTCL,   2, 
                ,   29, 
            CLCK,   1, 
            TAR,    8
        }

        Name (TRAT, Zero)
        Name (PRAT, Zero)
        Name (TMPI, Zero)
        Method (CTCU, 0, NotSerialized)
        {
            PPL1 = PT2D /* External reference */
            PL1E = One
            \CTPC = One
            If ((Zero == \FTPS))
            {
                \CTPR = \CTPC /* External reference */
            }
            ElseIf ((\CTPR == \FTPS))
            {
                \CTPR = \CTPC /* External reference */
                \FTPS = \CTPC /* External reference */
            }
            Else
            {
                \CTPR = \CTPC /* External reference */
                \FTPS = \CTPC /* External reference */
                \FTPS++
            }

            \PNTF (0x80)
            TAR = (TAR2 - One)
            CTCL = 0x02
        }

        Method (CTCN, 0, NotSerialized)
        {
            If ((CTCL == One))
            {
                PPL1 = PT0D /* External reference */
                PL1E = One
                NPPC (TARN)
                TAR = (TARN - One)
                CTCL = Zero
            }
            ElseIf ((CTCL == 0x02))
            {
                CTCL = Zero
                TAR = (TARN - One)
                NPPC (TARN)
                PPL1 = PT0D /* External reference */
                PL1E = One
            }
            Else
            {
                CTCL = Zero
                TAR = (TARN - One)
                NPPC (TARN)
                PPL1 = PT0D /* External reference */
                PL1E = One
            }
        }

        Method (CTCD, 0, NotSerialized)
        {
            CTCL = One
            TAR = (TAR1 - One)
            NPPC (TAR1)
            PPL1 = PT1D /* External reference */
            PL1E = One
        }

        Method (NPPC, 1, NotSerialized)
        {
            TRAT = Arg0
            If (CondRefOf (\_SB.PR00._PSS))
            {
                If ((\_SB.OSCP & 0x0400))
                {
                    TMPI = SizeOf (\_SB.PR00.TPSS)
                }
                Else
                {
                    TMPI = SizeOf (\_SB.PR00.LPSS)
                }

                While ((TMPI != Zero))
                {
                    TMPI--
                    If ((\_SB.OSCP & 0x0400))
                    {
                        PRAT = DerefOf (DerefOf (\_SB.PR00.TPSS [TMPI]) [0x04])
                    }
                    Else
                    {
                        PRAT = DerefOf (DerefOf (\_SB.PR00.LPSS [TMPI]) [0x04])
                    }

                    PRAT >>= 0x08
                    If ((PRAT >= TRAT))
                    {
                        \CTPC = TMPI /* \_SB_.PC00.TMPI */
                        If ((Zero == \FTPS))
                        {
                            \CTPR = \CTPC /* External reference */
                        }
                        ElseIf ((\CTPR == \FTPS))
                        {
                            \CTPR = \CTPC /* External reference */
                            \FTPS = \CTPC /* External reference */
                        }
                        Else
                        {
                            \CTPR = \CTPC /* External reference */
                            \FTPS = \CTPC /* External reference */
                            \FTPS++
                        }

                        \PNTF (0x80)
                        Break
                    }
                }
            }
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "Pmax_Dev", 0x00000001)
{
    External (PXAC, IntObj)
    External (PXDC, IntObj)
    External (PXFD, IntObj)
    External (PXUC, IntObj)
    External (PXWC, IntObj)

    Scope (\_SB)
    {
        Device (PMAX)
        {
            Name (_HID, "INT3533")  // _HID: Hardware ID
            Name (RTKS, "\\_SB.PC00.HDAS")
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Name (RTK0, 0x0BB8)
            Name (RTKX, 0x0000)
            Name (WFCS, "\\_SB.PC00.LNK0")
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Name (WFC0, 0x032A)
            Name (WFCX, 0x0000)
            Name (UFCS, "\\_SB.PC00.LNK1")
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Name (UFC0, 0x033E)
            Name (UFCX, 0x0000)
            Name (FLDS, "\\_SB.PC00.FLM0")
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Name (FLD0, 0x2328)
            Name (FLDX, 0x0000)
            Name (DSMP, Package (0x04)
            {
                Package (0x02)
                {
                    "", 
                    Package (0x02)
                    {
                        Package (0x02)
                        {
                            Zero, 
                            0xFFFF
                        }, 

                        Package (0x02)
                        {
                            One, 
                            0xFFFF
                        }
                    }
                }, 

                Package (0x02)
                {
                    "", 
                    Package (0x02)
                    {
                        Package (0x02)
                        {
                            Zero, 
                            0xFFFF
                        }, 

                        Package (0x02)
                        {
                            One, 
                            0xFFFF
                        }
                    }
                }, 

                Package (0x02)
                {
                    "", 
                    Package (0x02)
                    {
                        Package (0x02)
                        {
                            Zero, 
                            0xFFFF
                        }, 

                        Package (0x02)
                        {
                            One, 
                            0xFFFF
                        }
                    }
                }, 

                Package (0x02)
                {
                    "", 
                    Package (0x02)
                    {
                        Package (0x02)
                        {
                            Zero, 
                            0xFFFF
                        }, 

                        Package (0x02)
                        {
                            One, 
                            0xFFFF
                        }
                    }
                }
            })
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("2256364f-a3a9-4c9a-bcec-a34a34a57144") /* Unknown UUID */))
                {
                    DerefOf (DSMP [Zero]) [Zero] = RTKS /* \_SB_.PMAX.RTKS */
                    DerefOf (DerefOf (DerefOf (DSMP [Zero]) [One]
                        ) [Zero]) [One] = RTK0 /* \_SB_.PMAX.RTK0 */
                    DerefOf (DerefOf (DerefOf (DSMP [Zero]) [One]
                        ) [One]) [One] = RTKX /* \_SB_.PMAX.RTKX */
                    DerefOf (DSMP [One]) [Zero] = WFCS /* \_SB_.PMAX.WFCS */
                    DerefOf (DerefOf (DerefOf (DSMP [One]) [One]
                        ) [Zero]) [One] = WFC0 /* \_SB_.PMAX.WFC0 */
                    DerefOf (DerefOf (DerefOf (DSMP [One]) [One]
                        ) [One]) [One] = WFCX /* \_SB_.PMAX.WFCX */
                    DerefOf (DSMP [0x02]) [Zero] = UFCS /* \_SB_.PMAX.UFCS */
                    DerefOf (DerefOf (DerefOf (DSMP [0x02]) [One]
                        ) [Zero]) [One] = UFC0 /* \_SB_.PMAX.UFC0 */
                    DerefOf (DerefOf (DerefOf (DSMP [0x02]) [One]
                        ) [One]) [One] = UFCX /* \_SB_.PMAX.UFCX */
                    DerefOf (DSMP [0x03]) [Zero] = FLDS /* \_SB_.PMAX.FLDS */
                    DerefOf (DerefOf (DerefOf (DSMP [0x03]) [One]
                        ) [Zero]) [One] = FLD0 /* \_SB_.PMAX.FLD0 */
                    DerefOf (DerefOf (DerefOf (DSMP [0x03]) [One]
                        ) [One]) [One] = FLDX /* \_SB_.PMAX.FLDX */
                    If ((Arg1 == Zero))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }

                        If ((Arg2 == One))
                        {
                            If ((PXAC == One))
                            {
                                DerefOf (DSMP [Zero]) [One] = Package (0x02)
                                    {
                                        Package (0x02)
                                        {
                                            Zero, 
                                            Zero
                                        }, 

                                        Package (0x02)
                                        {
                                            One, 
                                            Zero
                                        }
                                    }
                            }

                            If ((PXWC == One))
                            {
                                DerefOf (DSMP [One]) [One] = Package (0x02)
                                    {
                                        Package (0x02)
                                        {
                                            Zero, 
                                            Zero
                                        }, 

                                        Package (0x02)
                                        {
                                            One, 
                                            Zero
                                        }
                                    }
                            }

                            If ((PXUC == One))
                            {
                                DerefOf (DSMP [0x02]) [One] = Package (0x02)
                                    {
                                        Package (0x02)
                                        {
                                            Zero, 
                                            Zero
                                        }, 

                                        Package (0x02)
                                        {
                                            One, 
                                            Zero
                                        }
                                    }
                            }

                            If ((PXFD == One))
                            {
                                DerefOf (DSMP [0x03]) [One] = Package (0x02)
                                    {
                                        Package (0x02)
                                        {
                                            Zero, 
                                            Zero
                                        }, 

                                        Package (0x02)
                                        {
                                            One, 
                                            Zero
                                        }
                                    }
                            }

                            Return (DSMP) /* \_SB_.PMAX.DSMP */
                        }
                    }

                    Return (Zero)
                }

                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PXDC == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Psd", 0x00003000)
{
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.PR00, DeviceObj)
    External (BCNT, UnknownObj)
    External (CM00, UnknownObj)
    External (CORE, UnknownObj)
    External (HTRO, UnknownObj)
    External (MDID, UnknownObj)
    External (PF00, IntObj)
    External (SCM0, UnknownObj)
    External (SCM1, UnknownObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR00)
    {
        Method (GPSD, 2, NotSerialized)
        {
            Name (HPSD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    Zero, 
                    0xFE, 
                    0x80
                }
            })
            Name (SPSD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    Zero, 
                    0xFC, 
                    0x80
                }
            })
            If (((\_SB.CFGD & 0x02000000) && (\_SB.CFGD & 0x00400000)))
            {
                DerefOf (HPSD [Zero]) [0x02] = Arg0
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            ElseIf (HTRO)
            {
                DerefOf (HPSD [Zero]) [0x04] = ((Arg1 & 
                    0xF0) >> 0x04)
                DerefOf (SPSD [Zero]) [0x04] = ((Arg1 & 
                    0xF0) >> 0x04)
                DerefOf (HPSD [Zero]) [0x02] = (Arg1 & 0x0F
                    )
                DerefOf (SPSD [Zero]) [0x02] = (Arg1 & 0x0F
                    )
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PF00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR00.GPSD.HPSD */
            }

            Return (SPSD) /* \_SB_.PR00.GPSD.SPSD */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (GPSD (Zero, CM00))
        }
    }
}



SSDT13
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "SocCmn ", 0x00003000)
{
    External (_SB_.CPPC, FieldUnitObj)
    External (_SB_.PC00.RP01, DeviceObj)
    External (_SB_.PC00.RP01.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP01.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP01.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP01.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP01.VDID, FieldUnitObj)
    External (_SB_.PC00.RP02, DeviceObj)
    External (_SB_.PC00.RP02.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP02.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP02.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP02.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP02.VDID, FieldUnitObj)
    External (_SB_.PC00.RP03, DeviceObj)
    External (_SB_.PC00.RP03.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP03.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP03.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP03.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP03.VDID, FieldUnitObj)
    External (_SB_.PC00.RP04, DeviceObj)
    External (_SB_.PC00.RP04.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP04.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP04.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP04.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP04.VDID, FieldUnitObj)
    External (_SB_.PC00.RP05, DeviceObj)
    External (_SB_.PC00.RP05.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP05.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP05.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP05.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP05.VDID, FieldUnitObj)
    External (_SB_.PC00.RP06, DeviceObj)
    External (_SB_.PC00.RP06.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP06.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP06.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP06.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP06.VDID, FieldUnitObj)
    External (_SB_.PC00.RP07, DeviceObj)
    External (_SB_.PC00.RP07.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP07.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP07.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP07.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP07.VDID, FieldUnitObj)
    External (_SB_.PC00.RP08, DeviceObj)
    External (_SB_.PC00.RP08.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP08.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP08.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP08.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP08.VDID, FieldUnitObj)
    External (_SB_.PC00.RP09, DeviceObj)
    External (_SB_.PC00.RP09.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP09.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP09.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP09.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP09.VDID, FieldUnitObj)
    External (_SB_.PC00.RP10, DeviceObj)
    External (_SB_.PC00.RP10.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP10.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP10.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP10.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP10.VDID, FieldUnitObj)
    External (_SB_.PC00.RP11, DeviceObj)
    External (_SB_.PC00.RP11.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP11.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP11.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP11.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP11.VDID, FieldUnitObj)
    External (_SB_.PC00.RP12, DeviceObj)
    External (_SB_.PC00.RP12.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP12.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP12.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP12.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP12.VDID, FieldUnitObj)
    External (_SB_.PC00.RP13, DeviceObj)
    External (_SB_.PC00.RP13.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP13.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP13.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP13.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP13.VDID, FieldUnitObj)
    External (_SB_.PC00.RP14, DeviceObj)
    External (_SB_.PC00.RP14.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP14.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP14.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP14.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP14.VDID, FieldUnitObj)
    External (_SB_.PC00.RP15, DeviceObj)
    External (_SB_.PC00.RP15.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP15.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP15.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP15.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP15.VDID, FieldUnitObj)
    External (_SB_.PC00.RP16, DeviceObj)
    External (_SB_.PC00.RP16.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP16.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP16.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP16.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP16.VDID, FieldUnitObj)
    External (_SB_.PC00.RP17, DeviceObj)
    External (_SB_.PC00.RP17.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP17.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP17.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP17.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP17.VDID, FieldUnitObj)
    External (_SB_.PC00.RP18, DeviceObj)
    External (_SB_.PC00.RP18.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP18.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP18.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP18.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP18.VDID, FieldUnitObj)
    External (_SB_.PC00.RP19, DeviceObj)
    External (_SB_.PC00.RP19.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP19.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP19.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP19.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP19.VDID, FieldUnitObj)
    External (_SB_.PC00.RP20, DeviceObj)
    External (_SB_.PC00.RP20.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP20.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP20.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP20.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP20.VDID, FieldUnitObj)
    External (_SB_.PC00.RP21, DeviceObj)
    External (_SB_.PC00.RP21.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP21.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP21.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP21.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP21.VDID, FieldUnitObj)
    External (_SB_.PC00.RP22, DeviceObj)
    External (_SB_.PC00.RP22.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP22.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP22.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP22.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP22.VDID, FieldUnitObj)
    External (_SB_.PC00.RP23, DeviceObj)
    External (_SB_.PC00.RP23.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP23.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP23.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP23.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP23.VDID, FieldUnitObj)
    External (_SB_.PC00.RP24, DeviceObj)
    External (_SB_.PC00.RP24.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP24.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP24.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP24.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP24.VDID, FieldUnitObj)
    External (_SB_.PC00.RP25, DeviceObj)
    External (_SB_.PC00.RP25.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP25.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP25.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP25.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP25.VDID, FieldUnitObj)
    External (_SB_.PC00.RP26, DeviceObj)
    External (_SB_.PC00.RP26.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP26.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP26.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP26.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP26.VDID, FieldUnitObj)
    External (_SB_.PC00.RP27, DeviceObj)
    External (_SB_.PC00.RP27.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP27.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP27.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP27.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP27.VDID, FieldUnitObj)
    External (_SB_.PC00.RP28, DeviceObj)
    External (_SB_.PC00.RP28.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP28.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP28.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP28.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP28.VDID, FieldUnitObj)
    External (_SB_.PC00.TCON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TG0N, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TG1N, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP0.HPEX, IntObj)
    External (_SB_.PC00.TRP0.HPSX, IntObj)
    External (_SB_.PC00.TRP0.PMEX, IntObj)
    External (_SB_.PC00.TRP0.PMSX, IntObj)
    External (_SB_.PC00.TRP1.HPEX, IntObj)
    External (_SB_.PC00.TRP1.HPSX, IntObj)
    External (_SB_.PC00.TRP1.PMEX, IntObj)
    External (_SB_.PC00.TRP1.PMSX, IntObj)
    External (_SB_.PC00.TRP2.HPEX, IntObj)
    External (_SB_.PC00.TRP2.HPSX, IntObj)
    External (_SB_.PC00.TRP2.PMEX, IntObj)
    External (_SB_.PC00.TRP2.PMSX, IntObj)
    External (_SB_.PC00.TRP3.HPEX, IntObj)
    External (_SB_.PC00.TRP3.HPSX, IntObj)
    External (_SB_.PC00.TRP3.PMEX, IntObj)
    External (_SB_.PC00.TRP3.PMSX, IntObj)
    External (_SB_.PC00.TXHC, DeviceObj)
    External (_SB_.PC01.TRP0.HPEX, IntObj)
    External (_SB_.PC01.TRP0.HPSX, IntObj)
    External (_SB_.PC01.TRP0.PMEX, IntObj)
    External (_SB_.PC01.TRP0.PMSX, IntObj)
    External (_SB_.PC01.TRP1.HPEX, IntObj)
    External (_SB_.PC01.TRP1.HPSX, IntObj)
    External (_SB_.PC01.TRP1.PMEX, IntObj)
    External (_SB_.PC01.TRP1.PMSX, IntObj)
    External (_SB_.PC01.TRP2.HPEX, IntObj)
    External (_SB_.PC01.TRP2.HPSX, IntObj)
    External (_SB_.PC01.TRP2.PMEX, IntObj)
    External (_SB_.PC01.TRP2.PMSX, IntObj)
    External (_SB_.PC01.TRP3.HPEX, IntObj)
    External (_SB_.PC01.TRP3.HPSX, IntObj)
    External (_SB_.PC01.TRP3.PMEX, IntObj)
    External (_SB_.PC01.TRP3.PMSX, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (_SB_.PR24, DeviceObj)
    External (_SB_.PR25, DeviceObj)
    External (_SB_.PR26, DeviceObj)
    External (_SB_.PR27, DeviceObj)
    External (_SB_.PR28, DeviceObj)
    External (_SB_.PR29, DeviceObj)
    External (_SB_.PR30, DeviceObj)
    External (_SB_.PR31, DeviceObj)
    External (_SB_.PR32, DeviceObj)
    External (_SB_.PR33, DeviceObj)
    External (_SB_.PR34, DeviceObj)
    External (_SB_.PR35, DeviceObj)
    External (_SB_.PR36, DeviceObj)
    External (_SB_.PR37, DeviceObj)
    External (_SB_.PR38, DeviceObj)
    External (_SB_.PR39, DeviceObj)
    External (_SB_.PR40, DeviceObj)
    External (_SB_.PR41, DeviceObj)
    External (_SB_.PR42, DeviceObj)
    External (_SB_.PR43, DeviceObj)
    External (_SB_.PR44, DeviceObj)
    External (_SB_.PR45, DeviceObj)
    External (_SB_.PR46, DeviceObj)
    External (_SB_.PR47, DeviceObj)
    External (_SB_.PR48, DeviceObj)
    External (_SB_.PR49, DeviceObj)
    External (_SB_.PR50, DeviceObj)
    External (_SB_.PR51, DeviceObj)
    External (_SB_.PR52, DeviceObj)
    External (_SB_.PR53, DeviceObj)
    External (_SB_.PR54, DeviceObj)
    External (_SB_.PR55, DeviceObj)
    External (_SB_.PR56, DeviceObj)
    External (_SB_.PR57, DeviceObj)
    External (_SB_.PR58, DeviceObj)
    External (_SB_.PR59, DeviceObj)
    External (_SB_.PR60, DeviceObj)
    External (_SB_.PR61, DeviceObj)
    External (_SB_.PR62, DeviceObj)
    External (_SB_.PR63, DeviceObj)
    External (_SB_.TCWK, MethodObj)    // 1 Arguments
    External (ITRT, FieldUnitObj)
    External (NEXP, FieldUnitObj)
    External (OSCC, FieldUnitObj)
    External (PCHS, FieldUnitObj)
    External (PCHX, IntObj)
    External (PF00, IntObj)
    External (PF01, IntObj)
    External (PF02, IntObj)
    External (PF03, IntObj)
    External (PF04, IntObj)
    External (PF05, IntObj)
    External (PF06, IntObj)
    External (PF07, IntObj)
    External (PF08, IntObj)
    External (PF09, IntObj)
    External (PF10, IntObj)
    External (PF11, IntObj)
    External (PF12, IntObj)
    External (PF13, IntObj)
    External (PF14, IntObj)
    External (PF15, IntObj)
    External (PF16, IntObj)
    External (PF17, IntObj)
    External (PF18, IntObj)
    External (PF19, IntObj)
    External (PF20, IntObj)
    External (PF21, IntObj)
    External (PF22, IntObj)
    External (PF23, IntObj)
    External (PF24, IntObj)
    External (PF25, IntObj)
    External (PF26, IntObj)
    External (PF27, IntObj)
    External (PF28, IntObj)
    External (PF29, IntObj)
    External (PF30, IntObj)
    External (PF31, IntObj)
    External (PF32, IntObj)
    External (PF33, IntObj)
    External (PF34, IntObj)
    External (PF35, IntObj)
    External (PF36, IntObj)
    External (PF37, IntObj)
    External (PF38, IntObj)
    External (PF39, IntObj)
    External (PF40, IntObj)
    External (PF41, IntObj)
    External (PF42, IntObj)
    External (PF43, IntObj)
    External (PF44, IntObj)
    External (PF45, IntObj)
    External (PF46, IntObj)
    External (PF47, IntObj)
    External (PF48, IntObj)
    External (PF49, IntObj)
    External (PF50, IntObj)
    External (PF51, IntObj)
    External (PF52, IntObj)
    External (PF53, IntObj)
    External (PF54, IntObj)
    External (PF55, IntObj)
    External (PF56, IntObj)
    External (PF57, IntObj)
    External (PF58, IntObj)
    External (PF59, IntObj)
    External (PF60, IntObj)
    External (PF61, IntObj)
    External (PF62, IntObj)
    External (PF63, IntObj)
    External (TCNT, FieldUnitObj)
    External (TRTD, FieldUnitObj)

    Method (NHPG, 0, Serialized)
    {
        \_SB.PC00.RP01.HPEX = Zero
        \_SB.PC00.RP02.HPEX = Zero
        \_SB.PC00.RP03.HPEX = Zero
        \_SB.PC00.RP04.HPEX = Zero
        \_SB.PC00.RP05.HPEX = Zero
        \_SB.PC00.RP06.HPEX = Zero
        \_SB.PC00.RP07.HPEX = Zero
        \_SB.PC00.RP08.HPEX = Zero
        \_SB.PC00.RP09.HPEX = Zero
        \_SB.PC00.RP10.HPEX = Zero
        \_SB.PC00.RP11.HPEX = Zero
        \_SB.PC00.RP12.HPEX = Zero
        If ((PCHS == PCHX))
        {
            \_SB.PC00.RP13.HPEX = Zero
            \_SB.PC00.RP14.HPEX = Zero
            \_SB.PC00.RP15.HPEX = Zero
            \_SB.PC00.RP16.HPEX = Zero
            \_SB.PC00.RP17.HPEX = Zero
            \_SB.PC00.RP18.HPEX = Zero
            \_SB.PC00.RP19.HPEX = Zero
            \_SB.PC00.RP20.HPEX = Zero
            \_SB.PC00.RP21.HPEX = Zero
            \_SB.PC00.RP22.HPEX = Zero
            \_SB.PC00.RP23.HPEX = Zero
            \_SB.PC00.RP24.HPEX = Zero
            \_SB.PC00.RP25.HPEX = Zero
            \_SB.PC00.RP26.HPEX = Zero
            \_SB.PC00.RP27.HPEX = Zero
            \_SB.PC00.RP28.HPEX = Zero
        }

        If (CondRefOf (\_SB.PC00.TXHC))
        {
            If (CondRefOf (\_SB.PC01))
            {
                \_SB.PC01.TRP0.HPEX = Zero
                \_SB.PC01.TRP1.HPEX = Zero
                \_SB.PC01.TRP2.HPEX = Zero
                \_SB.PC01.TRP3.HPEX = Zero
            }
            Else
            {
                \_SB.PC00.TRP0.HPEX = Zero
                \_SB.PC00.TRP1.HPEX = Zero
                \_SB.PC00.TRP2.HPEX = Zero
                \_SB.PC00.TRP3.HPEX = Zero
            }
        }

        \_SB.PC00.RP01.HPSX = One
        \_SB.PC00.RP02.HPSX = One
        \_SB.PC00.RP03.HPSX = One
        \_SB.PC00.RP04.HPSX = One
        \_SB.PC00.RP05.HPSX = One
        \_SB.PC00.RP06.HPSX = One
        \_SB.PC00.RP07.HPSX = One
        \_SB.PC00.RP08.HPSX = One
        \_SB.PC00.RP09.HPSX = One
        \_SB.PC00.RP10.HPSX = One
        \_SB.PC00.RP11.HPSX = One
        \_SB.PC00.RP12.HPSX = One
        If ((PCHS == PCHX))
        {
            \_SB.PC00.RP13.HPSX = One
            \_SB.PC00.RP14.HPSX = One
            \_SB.PC00.RP15.HPSX = One
            \_SB.PC00.RP16.HPSX = One
            \_SB.PC00.RP17.HPSX = One
            \_SB.PC00.RP18.HPSX = One
            \_SB.PC00.RP19.HPSX = One
            \_SB.PC00.RP20.HPSX = One
            \_SB.PC00.RP21.HPSX = One
            \_SB.PC00.RP22.HPSX = One
            \_SB.PC00.RP23.HPSX = One
            \_SB.PC00.RP24.HPSX = One
            \_SB.PC00.RP25.HPSX = One
            \_SB.PC00.RP26.HPSX = One
            \_SB.PC00.RP27.HPSX = One
            \_SB.PC00.RP28.HPSX = One
        }

        If (CondRefOf (\_SB.PC00.TXHC))
        {
            If (CondRefOf (\_SB.PC01))
            {
                \_SB.PC01.TRP0.HPSX = One
                \_SB.PC01.TRP1.HPSX = One
                \_SB.PC01.TRP2.HPSX = One
                \_SB.PC01.TRP3.HPSX = One
            }
            Else
            {
                \_SB.PC00.TRP0.HPSX = One
                \_SB.PC00.TRP1.HPSX = One
                \_SB.PC00.TRP2.HPSX = One
                \_SB.PC00.TRP3.HPSX = One
            }
        }
    }

    Method (NPME, 0, Serialized)
    {
        \_SB.PC00.RP01.PMEX = Zero
        \_SB.PC00.RP02.PMEX = Zero
        \_SB.PC00.RP03.PMEX = Zero
        \_SB.PC00.RP04.PMEX = Zero
        \_SB.PC00.RP05.PMEX = Zero
        \_SB.PC00.RP06.PMEX = Zero
        \_SB.PC00.RP07.PMEX = Zero
        \_SB.PC00.RP08.PMEX = Zero
        \_SB.PC00.RP09.PMEX = Zero
        \_SB.PC00.RP10.PMEX = Zero
        \_SB.PC00.RP11.PMEX = Zero
        \_SB.PC00.RP12.PMEX = Zero
        If ((PCHS == PCHX))
        {
            \_SB.PC00.RP13.PMEX = Zero
            \_SB.PC00.RP14.PMEX = Zero
            \_SB.PC00.RP15.PMEX = Zero
            \_SB.PC00.RP16.PMEX = Zero
            \_SB.PC00.RP17.PMEX = Zero
            \_SB.PC00.RP18.PMEX = Zero
            \_SB.PC00.RP19.PMEX = Zero
            \_SB.PC00.RP20.PMEX = Zero
            \_SB.PC00.RP21.PMEX = Zero
            \_SB.PC00.RP22.PMEX = Zero
            \_SB.PC00.RP23.PMEX = Zero
            \_SB.PC00.RP24.PMEX = Zero
            \_SB.PC00.RP21.PMEX = Zero
            \_SB.PC00.RP22.PMEX = Zero
            \_SB.PC00.RP23.PMEX = Zero
            \_SB.PC00.RP24.PMEX = Zero
            \_SB.PC00.RP25.PMEX = Zero
            \_SB.PC00.RP26.PMEX = Zero
            \_SB.PC00.RP27.PMEX = Zero
            \_SB.PC00.RP28.PMEX = Zero
        }

        If (CondRefOf (\_SB.PC00.TXHC))
        {
            If (CondRefOf (\_SB.PC01))
            {
                \_SB.PC01.TRP0.PMEX = Zero
                \_SB.PC01.TRP1.PMEX = Zero
                \_SB.PC01.TRP2.PMEX = Zero
                \_SB.PC01.TRP3.PMEX = Zero
            }
            Else
            {
                \_SB.PC00.TRP0.PMEX = Zero
                \_SB.PC00.TRP1.PMEX = Zero
                \_SB.PC00.TRP2.PMEX = Zero
                \_SB.PC00.TRP3.PMEX = Zero
            }
        }

        \_SB.PC00.RP01.PMSX = One
        \_SB.PC00.RP02.PMSX = One
        \_SB.PC00.RP03.PMSX = One
        \_SB.PC00.RP04.PMSX = One
        \_SB.PC00.RP05.PMSX = One
        \_SB.PC00.RP06.PMSX = One
        \_SB.PC00.RP07.PMSX = One
        \_SB.PC00.RP08.PMSX = One
        \_SB.PC00.RP09.PMSX = One
        \_SB.PC00.RP10.PMSX = One
        \_SB.PC00.RP11.PMSX = One
        \_SB.PC00.RP12.PMSX = One
        If ((PCHS == PCHX))
        {
            \_SB.PC00.RP13.PMSX = One
            \_SB.PC00.RP14.PMSX = One
            \_SB.PC00.RP15.PMSX = One
            \_SB.PC00.RP16.PMSX = One
            \_SB.PC00.RP17.PMSX = One
            \_SB.PC00.RP18.PMSX = One
            \_SB.PC00.RP19.PMSX = One
            \_SB.PC00.RP20.PMSX = One
            \_SB.PC00.RP21.PMSX = One
            \_SB.PC00.RP22.PMSX = One
            \_SB.PC00.RP23.PMSX = One
            \_SB.PC00.RP24.PMSX = One
            \_SB.PC00.RP25.PMSX = One
            \_SB.PC00.RP26.PMSX = One
            \_SB.PC00.RP27.PMSX = One
            \_SB.PC00.RP28.PMSX = One
        }

        If (CondRefOf (\_SB.PC00.TXHC))
        {
            If (CondRefOf (\_SB.PC01))
            {
                \_SB.PC01.TRP0.PMSX = One
                \_SB.PC01.TRP1.PMSX = One
                \_SB.PC01.TRP2.PMSX = One
                \_SB.PC01.TRP3.PMSX = One
            }
            Else
            {
                \_SB.PC00.TRP0.PMSX = One
                \_SB.PC00.TRP1.PMSX = One
                \_SB.PC00.TRP2.PMSX = One
                \_SB.PC00.TRP3.PMSX = One
            }
        }
    }

    Method (SPNT, 0, Serialized)
    {
        If ((\PF00 & 0x0400))
        {
            If (CondRefOf (\_SB.PR00.TPSS))
            {
                \_SB.CPPC = Zero
            }
        }
        ElseIf (CondRefOf (\_SB.PR00.LPSS))
        {
            \_SB.CPPC = Zero
        }

        If ((TCNT > One))
        {
            If ((\PF00 & 0x08))
            {
                Notify (\_SB.PR00, 0x80) // Status Change
            }

            If ((\PF01 & 0x08))
            {
                Notify (\_SB.PR01, 0x80) // Status Change
            }

            If ((\PF02 & 0x08))
            {
                Notify (\_SB.PR02, 0x80) // Status Change
            }

            If ((\PF03 & 0x08))
            {
                Notify (\_SB.PR03, 0x80) // Status Change
            }

            If ((\PF04 & 0x08))
            {
                Notify (\_SB.PR04, 0x80) // Status Change
            }

            If ((\PF05 & 0x08))
            {
                Notify (\_SB.PR05, 0x80) // Status Change
            }

            If ((\PF06 & 0x08))
            {
                Notify (\_SB.PR06, 0x80) // Status Change
            }

            If ((\PF07 & 0x08))
            {
                Notify (\_SB.PR07, 0x80) // Status Change
            }

            If ((\PF08 & 0x08))
            {
                Notify (\_SB.PR08, 0x80) // Status Change
            }

            If ((\PF09 & 0x08))
            {
                Notify (\_SB.PR09, 0x80) // Status Change
            }

            If ((\PF10 & 0x08))
            {
                Notify (\_SB.PR10, 0x80) // Status Change
            }

            If ((\PF11 & 0x08))
            {
                Notify (\_SB.PR11, 0x80) // Status Change
            }

            If ((\PF12 & 0x08))
            {
                Notify (\_SB.PR12, 0x80) // Status Change
            }

            If ((\PF13 & 0x08))
            {
                Notify (\_SB.PR13, 0x80) // Status Change
            }

            If ((\PF14 & 0x08))
            {
                Notify (\_SB.PR14, 0x80) // Status Change
            }

            If ((\PF15 & 0x08))
            {
                Notify (\_SB.PR15, 0x80) // Status Change
            }

            If ((\PF16 & 0x08))
            {
                Notify (\_SB.PR16, 0x80) // Status Change
            }

            If ((\PF17 & 0x08))
            {
                Notify (\_SB.PR17, 0x80) // Status Change
            }

            If ((\PF18 & 0x08))
            {
                Notify (\_SB.PR18, 0x80) // Status Change
            }

            If ((\PF19 & 0x08))
            {
                Notify (\_SB.PR19, 0x80) // Status Change
            }

            If ((\PF20 & 0x08))
            {
                Notify (\_SB.PR20, 0x80) // Status Change
            }

            If ((\PF21 & 0x08))
            {
                Notify (\_SB.PR21, 0x80) // Status Change
            }

            If ((\PF22 & 0x08))
            {
                Notify (\_SB.PR22, 0x80) // Status Change
            }

            If ((\PF23 & 0x08))
            {
                Notify (\_SB.PR23, 0x80) // Status Change
            }

            If ((\PF24 & 0x08))
            {
                Notify (\_SB.PR24, 0x80) // Status Change
            }

            If ((\PF25 & 0x08))
            {
                Notify (\_SB.PR25, 0x80) // Status Change
            }

            If ((\PF26 & 0x08))
            {
                Notify (\_SB.PR26, 0x80) // Status Change
            }

            If ((\PF27 & 0x08))
            {
                Notify (\_SB.PR27, 0x80) // Status Change
            }

            If ((\PF28 & 0x08))
            {
                Notify (\_SB.PR28, 0x80) // Status Change
            }

            If ((\PF29 & 0x08))
            {
                Notify (\_SB.PR29, 0x80) // Status Change
            }

            If ((\PF30 & 0x08))
            {
                Notify (\_SB.PR30, 0x80) // Status Change
            }

            If ((\PF31 & 0x08))
            {
                Notify (\_SB.PR31, 0x80) // Status Change
            }

            If ((\PF32 & 0x08))
            {
                Notify (\_SB.PR32, 0x80) // Status Change
            }

            If ((\PF33 & 0x08))
            {
                Notify (\_SB.PR33, 0x80) // Status Change
            }

            If ((\PF34 & 0x08))
            {
                Notify (\_SB.PR34, 0x80) // Status Change
            }

            If ((\PF35 & 0x08))
            {
                Notify (\_SB.PR35, 0x80) // Status Change
            }

            If ((\PF36 & 0x08))
            {
                Notify (\_SB.PR36, 0x80) // Status Change
            }

            If ((\PF37 & 0x08))
            {
                Notify (\_SB.PR37, 0x80) // Status Change
            }

            If ((\PF38 & 0x08))
            {
                Notify (\_SB.PR38, 0x80) // Status Change
            }

            If ((\PF39 & 0x08))
            {
                Notify (\_SB.PR39, 0x80) // Status Change
            }

            If ((\PF40 & 0x08))
            {
                Notify (\_SB.PR40, 0x80) // Status Change
            }

            If ((\PF41 & 0x08))
            {
                Notify (\_SB.PR41, 0x80) // Status Change
            }

            If ((\PF42 & 0x08))
            {
                Notify (\_SB.PR42, 0x80) // Status Change
            }

            If ((\PF43 & 0x08))
            {
                Notify (\_SB.PR43, 0x80) // Status Change
            }

            If ((\PF44 & 0x08))
            {
                Notify (\_SB.PR44, 0x80) // Status Change
            }

            If ((\PF45 & 0x08))
            {
                Notify (\_SB.PR45, 0x80) // Status Change
            }

            If ((\PF46 & 0x08))
            {
                Notify (\_SB.PR46, 0x80) // Status Change
            }

            If ((\PF47 & 0x08))
            {
                Notify (\_SB.PR47, 0x80) // Status Change
            }

            If ((\PF48 & 0x08))
            {
                Notify (\_SB.PR48, 0x80) // Status Change
            }

            If ((\PF49 & 0x08))
            {
                Notify (\_SB.PR49, 0x80) // Status Change
            }

            If ((\PF50 & 0x08))
            {
                Notify (\_SB.PR50, 0x80) // Status Change
            }

            If ((\PF51 & 0x08))
            {
                Notify (\_SB.PR51, 0x80) // Status Change
            }

            If ((\PF52 & 0x08))
            {
                Notify (\_SB.PR52, 0x80) // Status Change
            }

            If ((\PF53 & 0x08))
            {
                Notify (\_SB.PR53, 0x80) // Status Change
            }

            If ((\PF54 & 0x08))
            {
                Notify (\_SB.PR54, 0x80) // Status Change
            }

            If ((\PF55 & 0x08))
            {
                Notify (\_SB.PR55, 0x80) // Status Change
            }

            If ((\PF56 & 0x08))
            {
                Notify (\_SB.PR56, 0x80) // Status Change
            }

            If ((\PF57 & 0x08))
            {
                Notify (\_SB.PR57, 0x80) // Status Change
            }

            If ((\PF58 & 0x08))
            {
                Notify (\_SB.PR58, 0x80) // Status Change
            }

            If ((\PF59 & 0x08))
            {
                Notify (\_SB.PR59, 0x80) // Status Change
            }

            If ((\PF60 & 0x08))
            {
                Notify (\_SB.PR60, 0x80) // Status Change
            }

            If ((\PF61 & 0x08))
            {
                Notify (\_SB.PR61, 0x80) // Status Change
            }

            If ((\PF62 & 0x08))
            {
                Notify (\_SB.PR62, 0x80) // Status Change
            }

            If ((\PF63 & 0x08))
            {
                Notify (\_SB.PR63, 0x80) // Status Change
            }
        }
        Else
        {
            Notify (\_SB.PR00, 0x80) // Status Change
        }

        If ((TCNT > One))
        {
            If (((\PF00 & 0x08) && (\PF00 & 0x10)))
            {
                Notify (\_SB.PR00, 0x81) // Information Change
            }

            If (((\PF01 & 0x08) && (\PF01 & 0x10)))
            {
                Notify (\_SB.PR01, 0x81) // Information Change
            }

            If (((\PF02 & 0x08) && (\PF02 & 0x10)))
            {
                Notify (\_SB.PR02, 0x81) // Information Change
            }

            If (((\PF03 & 0x08) && (\PF03 & 0x10)))
            {
                Notify (\_SB.PR03, 0x81) // Information Change
            }

            If (((\PF04 & 0x08) && (\PF04 & 0x10)))
            {
                Notify (\_SB.PR04, 0x81) // Information Change
            }

            If (((\PF05 & 0x08) && (\PF05 & 0x10)))
            {
                Notify (\_SB.PR05, 0x81) // Information Change
            }

            If (((\PF06 & 0x08) && (\PF06 & 0x10)))
            {
                Notify (\_SB.PR06, 0x81) // Information Change
            }

            If (((\PF07 & 0x08) && (\PF07 & 0x10)))
            {
                Notify (\_SB.PR07, 0x81) // Information Change
            }

            If (((\PF08 & 0x08) && (\PF08 & 0x10)))
            {
                Notify (\_SB.PR08, 0x81) // Information Change
            }

            If (((\PF09 & 0x08) && (\PF09 & 0x10)))
            {
                Notify (\_SB.PR09, 0x81) // Information Change
            }

            If (((\PF10 & 0x08) && (\PF10 & 0x10)))
            {
                Notify (\_SB.PR10, 0x81) // Information Change
            }

            If (((\PF11 & 0x08) && (\PF11 & 0x10)))
            {
                Notify (\_SB.PR11, 0x81) // Information Change
            }

            If (((\PF12 & 0x08) && (\PF12 & 0x10)))
            {
                Notify (\_SB.PR12, 0x81) // Information Change
            }

            If (((\PF13 & 0x08) && (\PF13 & 0x10)))
            {
                Notify (\_SB.PR13, 0x81) // Information Change
            }

            If (((\PF14 & 0x08) && (\PF14 & 0x10)))
            {
                Notify (\_SB.PR14, 0x81) // Information Change
            }

            If (((\PF15 & 0x08) && (\PF15 & 0x10)))
            {
                Notify (\_SB.PR15, 0x81) // Information Change
            }

            If (((\PF16 & 0x08) && (\PF16 & 0x10)))
            {
                Notify (\_SB.PR16, 0x81) // Information Change
            }

            If (((\PF17 & 0x08) && (\PF17 & 0x10)))
            {
                Notify (\_SB.PR17, 0x81) // Information Change
            }

            If (((\PF18 & 0x08) && (\PF18 & 0x10)))
            {
                Notify (\_SB.PR18, 0x81) // Information Change
            }

            If (((\PF19 & 0x08) && (\PF19 & 0x10)))
            {
                Notify (\_SB.PR19, 0x81) // Information Change
            }

            If (((\PF20 & 0x08) && (\PF20 & 0x10)))
            {
                Notify (\_SB.PR20, 0x81) // Information Change
            }

            If (((\PF21 & 0x08) && (\PF21 & 0x10)))
            {
                Notify (\_SB.PR21, 0x81) // Information Change
            }

            If (((\PF22 & 0x08) && (\PF22 & 0x10)))
            {
                Notify (\_SB.PR22, 0x81) // Information Change
            }

            If (((\PF23 & 0x08) && (\PF23 & 0x10)))
            {
                Notify (\_SB.PR23, 0x81) // Information Change
            }

            If (((\PF24 & 0x08) && (\PF24 & 0x10)))
            {
                Notify (\_SB.PR24, 0x81) // Information Change
            }

            If (((\PF25 & 0x08) && (\PF25 & 0x10)))
            {
                Notify (\_SB.PR25, 0x81) // Information Change
            }

            If (((\PF26 & 0x08) && (\PF26 & 0x10)))
            {
                Notify (\_SB.PR26, 0x81) // Information Change
            }

            If (((\PF27 & 0x08) && (\PF27 & 0x10)))
            {
                Notify (\_SB.PR27, 0x81) // Information Change
            }

            If (((\PF28 & 0x08) && (\PF28 & 0x10)))
            {
                Notify (\_SB.PR28, 0x81) // Information Change
            }

            If (((\PF29 & 0x08) && (\PF29 & 0x10)))
            {
                Notify (\_SB.PR29, 0x81) // Information Change
            }

            If (((\PF30 & 0x08) && (\PF30 & 0x10)))
            {
                Notify (\_SB.PR30, 0x81) // Information Change
            }

            If (((\PF31 & 0x08) && (\PF31 & 0x10)))
            {
                Notify (\_SB.PR31, 0x81) // Information Change
            }

            If (((\PF32 & 0x08) && (\PF32 & 0x10)))
            {
                Notify (\_SB.PR32, 0x81) // Information Change
            }

            If (((\PF33 & 0x08) && (\PF33 & 0x10)))
            {
                Notify (\_SB.PR33, 0x81) // Information Change
            }

            If (((\PF34 & 0x08) && (\PF34 & 0x10)))
            {
                Notify (\_SB.PR34, 0x81) // Information Change
            }

            If (((\PF35 & 0x08) && (\PF35 & 0x10)))
            {
                Notify (\_SB.PR35, 0x81) // Information Change
            }

            If (((\PF36 & 0x08) && (\PF36 & 0x10)))
            {
                Notify (\_SB.PR36, 0x81) // Information Change
            }

            If (((\PF37 & 0x08) && (\PF37 & 0x10)))
            {
                Notify (\_SB.PR37, 0x81) // Information Change
            }

            If (((\PF38 & 0x08) && (\PF38 & 0x10)))
            {
                Notify (\_SB.PR38, 0x81) // Information Change
            }

            If (((\PF39 & 0x08) && (\PF39 & 0x10)))
            {
                Notify (\_SB.PR39, 0x81) // Information Change
            }

            If (((\PF40 & 0x08) && (\PF40 & 0x10)))
            {
                Notify (\_SB.PR40, 0x81) // Information Change
            }

            If (((\PF41 & 0x08) && (\PF41 & 0x10)))
            {
                Notify (\_SB.PR41, 0x81) // Information Change
            }

            If (((\PF42 & 0x08) && (\PF42 & 0x10)))
            {
                Notify (\_SB.PR42, 0x81) // Information Change
            }

            If (((\PF43 & 0x08) && (\PF43 & 0x10)))
            {
                Notify (\_SB.PR43, 0x81) // Information Change
            }

            If (((\PF44 & 0x08) && (\PF44 & 0x10)))
            {
                Notify (\_SB.PR44, 0x81) // Information Change
            }

            If (((\PF45 & 0x08) && (\PF45 & 0x10)))
            {
                Notify (\_SB.PR45, 0x81) // Information Change
            }

            If (((\PF46 & 0x08) && (\PF46 & 0x10)))
            {
                Notify (\_SB.PR46, 0x81) // Information Change
            }

            If (((\PF47 & 0x08) && (\PF47 & 0x10)))
            {
                Notify (\_SB.PR47, 0x81) // Information Change
            }

            If (((\PF48 & 0x08) && (\PF48 & 0x10)))
            {
                Notify (\_SB.PR48, 0x81) // Information Change
            }

            If (((\PF49 & 0x08) && (\PF49 & 0x10)))
            {
                Notify (\_SB.PR49, 0x81) // Information Change
            }

            If (((\PF50 & 0x08) && (\PF50 & 0x10)))
            {
                Notify (\_SB.PR50, 0x81) // Information Change
            }

            If (((\PF51 & 0x08) && (\PF51 & 0x10)))
            {
                Notify (\_SB.PR51, 0x81) // Information Change
            }

            If (((\PF52 & 0x08) && (\PF52 & 0x10)))
            {
                Notify (\_SB.PR52, 0x81) // Information Change
            }

            If (((\PF53 & 0x08) && (\PF53 & 0x10)))
            {
                Notify (\_SB.PR53, 0x81) // Information Change
            }

            If (((\PF54 & 0x08) && (\PF54 & 0x10)))
            {
                Notify (\_SB.PR54, 0x81) // Information Change
            }

            If (((\PF55 & 0x08) && (\PF55 & 0x10)))
            {
                Notify (\_SB.PR55, 0x81) // Information Change
            }

            If (((\PF56 & 0x08) && (\PF56 & 0x10)))
            {
                Notify (\_SB.PR56, 0x81) // Information Change
            }

            If (((\PF57 & 0x08) && (\PF57 & 0x10)))
            {
                Notify (\_SB.PR57, 0x81) // Information Change
            }

            If (((\PF58 & 0x08) && (\PF58 & 0x10)))
            {
                Notify (\_SB.PR58, 0x81) // Information Change
            }

            If (((\PF59 & 0x08) && (\PF59 & 0x10)))
            {
                Notify (\_SB.PR59, 0x81) // Information Change
            }

            If (((\PF60 & 0x08) && (\PF60 & 0x10)))
            {
                Notify (\_SB.PR60, 0x81) // Information Change
            }

            If (((\PF61 & 0x08) && (\PF61 & 0x10)))
            {
                Notify (\_SB.PR61, 0x81) // Information Change
            }

            If (((\PF62 & 0x08) && (\PF62 & 0x10)))
            {
                Notify (\_SB.PR62, 0x81) // Information Change
            }

            If (((\PF63 & 0x08) && (\PF63 & 0x10)))
            {
                Notify (\_SB.PR63, 0x81) // Information Change
            }
        }
        Else
        {
            Notify (\_SB.PR00, 0x81) // Information Change
        }
    }

    Method (SPTS, 1, NotSerialized)
    {
        If (CondRefOf (\_SB.PC00.TXHC))
        {
            If (TRTD)
            {
                \_SB.PC00.TCON ()
            }

            If (ITRT)
            {
                \_SB.PC00.TG0N ()
                \_SB.PC00.TG1N ()
            }
        }
    }

    Method (SWAK, 2, NotSerialized)
    {
        If (NEXP)
        {
            If ((OSCC & One))
            {
                NHPG ()
            }

            If ((OSCC & 0x04))
            {
                NPME ()
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((\_SB.PC00.RP01.VDID != 0xFFFFFFFF))
            {
                If (((Arg1 & 0x02) != One))
                {
                    Notify (\_SB.PC00.RP01, Zero) // Bus Check
                }
            }

            If ((\_SB.PC00.RP02.VDID != 0xFFFFFFFF))
            {
                If (((Arg1 & 0x04) != One))
                {
                    Notify (\_SB.PC00.RP02, Zero) // Bus Check
                }
            }

            If ((\_SB.PC00.RP03.VDID != 0xFFFFFFFF))
            {
                If (((Arg1 & 0x08) != One))
                {
                    Notify (\_SB.PC00.RP03, Zero) // Bus Check
                }
            }

            If ((\_SB.PC00.RP04.VDID != 0xFFFFFFFF))
            {
                If (((Arg1 & 0x10) != One))
                {
                    Notify (\_SB.PC00.RP04, Zero) // Bus Check
                }
            }

            If ((\_SB.PC00.RP05.VDID != 0xFFFFFFFF))
            {
                If (((Arg1 & 0x20) != One))
                {
                    Notify (\_SB.PC00.RP05, Zero) // Bus Check
                }
            }

            If ((\_SB.PC00.RP06.VDID != 0xFFFFFFFF))
            {
                If (((Arg1 & 0x40) != One))
                {
                    Notify (\_SB.PC00.RP06, Zero) // Bus Check
                }
            }

            If ((\_SB.PC00.RP07.VDID != 0xFFFFFFFF))
            {
                If (((Arg1 & 0x80) != One))
                {
                    Notify (\_SB.PC00.RP07, Zero) // Bus Check
                }
            }

            If ((\_SB.PC00.RP08.VDID != 0xFFFFFFFF))
            {
                If (((Arg1 & 0x0100) != One))
                {
                    Notify (\_SB.PC00.RP08, Zero) // Bus Check
                }
            }

            If ((\_SB.PC00.RP09.VDID != 0xFFFFFFFF))
            {
                If (((Arg1 & 0x0200) != One))
                {
                    Notify (\_SB.PC00.RP09, Zero) // Bus Check
                }
            }

            If ((\_SB.PC00.RP10.VDID != 0xFFFFFFFF))
            {
                If (((Arg1 & 0x0400) != One))
                {
                    Notify (\_SB.PC00.RP10, Zero) // Bus Check
                }
            }

            If ((\_SB.PC00.RP11.VDID != 0xFFFFFFFF))
            {
                If (((Arg1 & 0x0800) != One))
                {
                    Notify (\_SB.PC00.RP11, Zero) // Bus Check
                }
            }

            If ((\_SB.PC00.RP12.VDID != 0xFFFFFFFF))
            {
                If (((Arg1 & 0x1000) != One))
                {
                    Notify (\_SB.PC00.RP12, Zero) // Bus Check
                }
            }

            If ((PCHS == PCHX))
            {
                If ((\_SB.PC00.RP13.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x2000) != One))
                    {
                        Notify (\_SB.PC00.RP13, Zero) // Bus Check
                    }
                }

                If ((\_SB.PC00.RP14.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x4000) != One))
                    {
                        Notify (\_SB.PC00.RP14, Zero) // Bus Check
                    }
                }

                If ((\_SB.PC00.RP15.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x8000) != One))
                    {
                        Notify (\_SB.PC00.RP15, Zero) // Bus Check
                    }
                }

                If ((\_SB.PC00.RP16.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x00010000) != One))
                    {
                        Notify (\_SB.PC00.RP16, Zero) // Bus Check
                    }
                }

                If ((\_SB.PC00.RP17.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x00020000) != One))
                    {
                        Notify (\_SB.PC00.RP17, Zero) // Bus Check
                    }
                }

                If ((\_SB.PC00.RP18.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x00040000) != One))
                    {
                        Notify (\_SB.PC00.RP18, Zero) // Bus Check
                    }
                }

                If ((\_SB.PC00.RP19.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x00080000) != One))
                    {
                        Notify (\_SB.PC00.RP19, Zero) // Bus Check
                    }
                }

                If ((\_SB.PC00.RP20.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x00100000) != One))
                    {
                        Notify (\_SB.PC00.RP20, Zero) // Bus Check
                    }
                }

                If ((\_SB.PC00.RP21.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x00200000) != One))
                    {
                        Notify (\_SB.PC00.RP21, Zero) // Bus Check
                    }
                }

                If ((\_SB.PC00.RP22.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x00400000) != One))
                    {
                        Notify (\_SB.PC00.RP22, Zero) // Bus Check
                    }
                }

                If ((\_SB.PC00.RP23.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x00800000) != One))
                    {
                        Notify (\_SB.PC00.RP23, Zero) // Bus Check
                    }
                }

                If ((\_SB.PC00.RP24.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x01000000) != One))
                    {
                        Notify (\_SB.PC00.RP24, Zero) // Bus Check
                    }
                }

                If ((\_SB.PC00.RP25.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x02000000) != One))
                    {
                        Notify (\_SB.PC00.RP25, Zero) // Bus Check
                    }
                }

                If ((\_SB.PC00.RP26.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x04000000) != One))
                    {
                        Notify (\_SB.PC00.RP26, Zero) // Bus Check
                    }
                }

                If ((\_SB.PC00.RP27.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x08000000) != One))
                    {
                        Notify (\_SB.PC00.RP27, Zero) // Bus Check
                    }
                }

                If ((\_SB.PC00.RP28.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x10000000) != One))
                    {
                        Notify (\_SB.PC00.RP28, Zero) // Bus Check
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.TXHC))
            {
                \_SB.TCWK (Arg0)
            }
        }
    }
}



SSDT14
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "ProjSsdt", 0x00000010)
{
    External (_SB_.IETM, DeviceObj)
    External (_SB_.PC00.LPCB.EC__.DOCD, UnknownObj)
    External (_SB_.PC00.SAT0, DeviceObj)
    External (_SB_.PC00.SAT0.PRT0, DeviceObj)
    External (_SB_.PC00.SAT0.PRT1, DeviceObj)
    External (_SB_.PC00.SAT0.PRT2, DeviceObj)
    External (_SB_.PC00.SAT0.PRT3, DeviceObj)
    External (_SB_.PC00.SAT0.PRT4, DeviceObj)
    External (_SB_.PC00.SAT0.PRT5, DeviceObj)
    External (_SB_.PC00.XHCI, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS01, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS02, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS03, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS04, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS05, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS06, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS07, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS08, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS09, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS10, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS01, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS02, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS03, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS04, DeviceObj)
    External (ADBG, MethodObj)    // 1 Arguments
    External (DPP0, UnknownObj)
    External (DPP1, UnknownObj)
    External (DPP2, UnknownObj)
    External (DPP3, UnknownObj)
    External (DPP4, UnknownObj)
    External (DVS0, UnknownObj)
    External (DVS1, UnknownObj)
    External (DVS2, UnknownObj)
    External (DVS3, UnknownObj)
    External (MPID, UnknownObj)
    External (PLD3, BuffObj)
    External (PLDC, BuffObj)
    External (PLDI, BuffObj)
    External (PLDL, BuffObj)
    External (PLDR, BuffObj)
    External (PLU1, BuffObj)
    External (UCPD, MethodObj)    // 2 Arguments
    External (UPC1, PkgObj)
    External (UPC3, PkgObj)
    External (UPCI, PkgObj)
    External (UPCL, PkgObj)
    External (UPCR, PkgObj)
    External (WIN8, UnknownObj)

    Scope (\_SB.PC00.XHCI.RHUB.HS01)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCL, UPCP) /* \_SB_.PC00.XHCI.RHUB.HS01._UPC.UPCP */
            Return (UPCP) /* \_SB_.PC00.XHCI.RHUB.HS01._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            PLDP = \PLDL /* External reference */
            Return (PLDP) /* \_SB_.PC00.XHCI.RHUB.HS01._PLD.PLDP */
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS02)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP) /* \_SB_.PC00.XHCI.RHUB.HS02._UPC.UPCP */
            Return (UPCP) /* \_SB_.PC00.XHCI.RHUB.HS02._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            PLDP = \PLDI /* External reference */
            Return (PLDP) /* \_SB_.PC00.XHCI.RHUB.HS02._PLD.PLDP */
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS03)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP) /* \_SB_.PC00.XHCI.RHUB.HS03._UPC.UPCP */
            Return (UPCP) /* \_SB_.PC00.XHCI.RHUB.HS03._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            PLDP = \PLDI /* External reference */
            Return (PLDP) /* \_SB_.PC00.XHCI.RHUB.HS03._PLD.PLDP */
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS04)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP) /* \_SB_.PC00.XHCI.RHUB.HS04._UPC.UPCP */
            Return (UPCP) /* \_SB_.PC00.XHCI.RHUB.HS04._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            PLDP = \PLDI /* External reference */
            Return (PLDP) /* \_SB_.PC00.XHCI.RHUB.HS04._PLD.PLDP */
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS05)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (UCPD (One, One), UPCP) /* \_SB_.PC00.XHCI.RHUB.HS05._UPC.UPCP */
            Return (UPCP) /* \_SB_.PC00.XHCI.RHUB.HS05._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            CopyObject (UCPD (One, 0x02), PLDP) /* \_SB_.PC00.XHCI.RHUB.HS05._PLD.PLDP */
            Return (PLDP) /* \_SB_.PC00.XHCI.RHUB.HS05._PLD.PLDP */
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS06)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (UCPD (0x02, One), UPCP) /* \_SB_.PC00.XHCI.RHUB.HS06._UPC.UPCP */
            Return (UPCP) /* \_SB_.PC00.XHCI.RHUB.HS06._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            CopyObject (UCPD (0x02, 0x02), PLDP) /* \_SB_.PC00.XHCI.RHUB.HS06._PLD.PLDP */
            Return (PLDP) /* \_SB_.PC00.XHCI.RHUB.HS06._PLD.PLDP */
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS07)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCR, UPCP) /* \_SB_.PC00.XHCI.RHUB.HS07._UPC.UPCP */
            Return (UPCP) /* \_SB_.PC00.XHCI.RHUB.HS07._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            PLDP = \PLDR /* External reference */
            Return (PLDP) /* \_SB_.PC00.XHCI.RHUB.HS07._PLD.PLDP */
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS08)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP) /* \_SB_.PC00.XHCI.RHUB.HS08._UPC.UPCP */
            Return (UPCP) /* \_SB_.PC00.XHCI.RHUB.HS08._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            PLDP = \PLDI /* External reference */
            Return (PLDP) /* \_SB_.PC00.XHCI.RHUB.HS08._PLD.PLDP */
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS09)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP) /* \_SB_.PC00.XHCI.RHUB.HS09._UPC.UPCP */
            Return (UPCP) /* \_SB_.PC00.XHCI.RHUB.HS09._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            PLDP = \PLDI /* External reference */
            Return (PLDP) /* \_SB_.PC00.XHCI.RHUB.HS09._PLD.PLDP */
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS10)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP) /* \_SB_.PC00.XHCI.RHUB.HS10._UPC.UPCP */
            Return (UPCP) /* \_SB_.PC00.XHCI.RHUB.HS10._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            PLDP = \PLDI /* External reference */
            Return (PLDP) /* \_SB_.PC00.XHCI.RHUB.HS10._PLD.PLDP */
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS01)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCL, UPCP) /* \_SB_.PC00.XHCI.RHUB.SS01._UPC.UPCP */
            Return (UPCP) /* \_SB_.PC00.XHCI.RHUB.SS01._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            PLDP = \PLDL /* External reference */
            Return (PLDP) /* \_SB_.PC00.XHCI.RHUB.SS01._PLD.PLDP */
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS02)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCR, UPCP) /* \_SB_.PC00.XHCI.RHUB.SS02._UPC.UPCP */
            Return (UPCP) /* \_SB_.PC00.XHCI.RHUB.SS02._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            PLDP = \PLDR /* External reference */
            Return (PLDP) /* \_SB_.PC00.XHCI.RHUB.SS02._PLD.PLDP */
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS03)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP) /* \_SB_.PC00.XHCI.RHUB.SS03._UPC.UPCP */
            Return (UPCP) /* \_SB_.PC00.XHCI.RHUB.SS03._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            PLDP = \PLDI /* External reference */
            Return (PLDP) /* \_SB_.PC00.XHCI.RHUB.SS03._PLD.PLDP */
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS04)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CopyObject (\UPCI, UPCP) /* \_SB_.PC00.XHCI.RHUB.SS04._UPC.UPCP */
            Return (UPCP) /* \_SB_.PC00.XHCI.RHUB.SS04._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Buffer (0x10) {})
            PLDP = \PLDI /* External reference */
            Return (PLDP) /* \_SB_.PC00.XHCI.RHUB.SS04._PLD.PLDP */
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS04)
    {
        Device (WCAM)
        {
            Name (_ADR, 0x04)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\WIN8)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
            {
                Return (\UPCI) /* External reference */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (\PLDC) /* External reference */
            }
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS04)
    {
        Device (ICAM)
        {
            Name (_ADR, 0x06)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\WIN8)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
            {
                Return (\UPCI) /* External reference */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (\PLDC) /* External reference */
            }
        }
    }

    Scope (\_SB.PC00.SAT0)
    {
        Scope (PRT0)
        {
            Name (DIP0, Zero)
            Name (FDEV, Zero)
            Name (FDRP, Zero)
            Name (HDTF, Buffer (0x0E)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5               // ......
            })
            Name (HETF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x09,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (ERTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HPTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HQTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x09, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (HXTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x03, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (DDTF, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3               // ......
            })
            CreateByteField (DDTF, One, DTAT)
            CreateByteField (DDTF, 0x08, DTFT)
            Name (DGTF, Buffer (0x15)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            CreateByteField (DGTF, One, GTAT)
            CreateByteField (DGTF, 0x08, GTFT)
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                ADBG ("PRT0: _SDD")
                DIP0 = Zero
                If ((SizeOf (Arg0) == 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, M078)
                    If ((\DPP0 && (M078 & 0x08)))
                    {
                        DIP0 = One
                    }

                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PC00.SAT0.PRT0.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PC00.SAT0.PRT0.FDRP */
                }
            }

            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                ADBG ("PRT0: _GTF")
                If (DIP0)
                {
                    If ((((DVS0 == One) && ((FDEV & One) == One)) && 
                        ((FDRP & 0x80) == 0x80)))
                    {
                        Return (HQTF) /* \_SB_.PC00.SAT0.PRT0.HQTF */
                    }
                    Else
                    {
                        Return (HPTF) /* \_SB_.PC00.SAT0.PRT0.HPTF */
                    }
                }
                ElseIf ((((DVS0 == One) && ((FDEV & One) == 
                    One)) && ((FDRP & 0x80) == 0x80)))
                {
                    Return (HETF) /* \_SB_.PC00.SAT0.PRT0.HETF */
                }
                Else
                {
                    Return (HDTF) /* \_SB_.PC00.SAT0.PRT0.HDTF */
                }
            }
        }

        Scope (PRT1)
        {
            Name (DIP0, Zero)
            Name (FDEV, Zero)
            Name (FDRP, Zero)
            Name (HDTF, Buffer (0x0E)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5               // ......
            })
            Name (HETF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x09,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (ERTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HPTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HQTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x09, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (HXTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x03, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (DDTF, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3               // ......
            })
            CreateByteField (DDTF, One, DTAT)
            CreateByteField (DDTF, 0x08, DTFT)
            Name (DGTF, Buffer (0x15)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            CreateByteField (DGTF, One, GTAT)
            CreateByteField (DGTF, 0x08, GTFT)
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                ADBG ("PRT1: _SDD")
                DIP0 = Zero
                If ((SizeOf (Arg0) == 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, M078)
                    If ((\DPP1 && (M078 & 0x08)))
                    {
                        DIP0 = One
                    }

                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PC00.SAT0.PRT1.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PC00.SAT0.PRT1.FDRP */
                }
            }

            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                ADBG ("PRT1: _GTF")
                If (DIP0)
                {
                    If ((((DVS1 == One) && ((FDEV & One) == One)) && 
                        ((FDRP & 0x80) == 0x80)))
                    {
                        Return (HQTF) /* \_SB_.PC00.SAT0.PRT1.HQTF */
                    }
                    Else
                    {
                        Return (HPTF) /* \_SB_.PC00.SAT0.PRT1.HPTF */
                    }
                }
                ElseIf ((((DVS1 == One) && ((FDEV & One) == 
                    One)) && ((FDRP & 0x80) == 0x80)))
                {
                    Return (HETF) /* \_SB_.PC00.SAT0.PRT1.HETF */
                }
                Else
                {
                    Return (HDTF) /* \_SB_.PC00.SAT0.PRT1.HDTF */
                }
            }
        }

        Scope (PRT2)
        {
            Name (DIP0, Zero)
            Name (FDEV, Zero)
            Name (FDRP, Zero)
            Name (HDTF, Buffer (0x0E)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5               // ......
            })
            Name (HETF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x09,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (ERTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HPTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HQTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x09, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (HXTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x03, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (DDTF, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3               // ......
            })
            CreateByteField (DDTF, One, DTAT)
            CreateByteField (DDTF, 0x08, DTFT)
            Name (DGTF, Buffer (0x15)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            CreateByteField (DGTF, One, GTAT)
            CreateByteField (DGTF, 0x08, GTFT)
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                ADBG ("PRT2: _SDD")
                DIP0 = Zero
                If ((SizeOf (Arg0) == 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, M078)
                    If ((\DPP2 && (M078 & 0x08)))
                    {
                        DIP0 = One
                    }

                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PC00.SAT0.PRT2.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PC00.SAT0.PRT2.FDRP */
                }
            }

            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                ADBG ("PRT2: _GTF")
                If (DIP0)
                {
                    If ((((DVS2 == One) && ((FDEV & One) == One)) && 
                        ((FDRP & 0x80) == 0x80)))
                    {
                        Return (HQTF) /* \_SB_.PC00.SAT0.PRT2.HQTF */
                    }
                    Else
                    {
                        Return (HPTF) /* \_SB_.PC00.SAT0.PRT2.HPTF */
                    }
                }
                ElseIf ((((DVS2 == One) && ((FDEV & One) == 
                    One)) && ((FDRP & 0x80) == 0x80)))
                {
                    Return (HETF) /* \_SB_.PC00.SAT0.PRT2.HETF */
                }
                Else
                {
                    Return (HDTF) /* \_SB_.PC00.SAT0.PRT2.HDTF */
                }
            }
        }

        Scope (PRT3)
        {
            Name (DIP0, Zero)
            Name (FDEV, Zero)
            Name (FDRP, Zero)
            Name (HDTF, Buffer (0x0E)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5               // ......
            })
            Name (HETF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x09,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (ERTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HPTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HQTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x09, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (HXTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x03, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (DDTF, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3               // ......
            })
            CreateByteField (DDTF, One, DTAT)
            CreateByteField (DDTF, 0x08, DTFT)
            Name (DGTF, Buffer (0x15)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            CreateByteField (DGTF, One, GTAT)
            CreateByteField (DGTF, 0x08, GTFT)
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                ADBG ("PRT3: _SDD")
                DIP0 = Zero
                If ((SizeOf (Arg0) == 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, M078)
                    If ((\DPP3 && (M078 & 0x08)))
                    {
                        DIP0 = One
                    }

                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PC00.SAT0.PRT3.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PC00.SAT0.PRT3.FDRP */
                }
            }

            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                ADBG ("PRT3: _GTF")
                If (DIP0)
                {
                    If ((((DVS3 == One) && ((FDEV & One) == One)) && 
                        ((FDRP & 0x80) == 0x80)))
                    {
                        Return (HQTF) /* \_SB_.PC00.SAT0.PRT3.HQTF */
                    }
                    Else
                    {
                        Return (HPTF) /* \_SB_.PC00.SAT0.PRT3.HPTF */
                    }
                }
                ElseIf ((((DVS3 == One) && ((FDEV & One) == 
                    One)) && ((FDRP & 0x80) == 0x80)))
                {
                    Return (HETF) /* \_SB_.PC00.SAT0.PRT3.HETF */
                }
                Else
                {
                    Return (HDTF) /* \_SB_.PC00.SAT0.PRT3.HDTF */
                }
            }
        }

        Scope (PRT4)
        {
            Name (DIP0, Zero)
            Name (HDTF, Buffer (0x0E)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5               // ......
            })
            Name (HETF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x09,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (ERTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HPTF, Buffer (0x15)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            Name (HQTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x09, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (HXTF, Buffer (0x1C)
            {
                /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5, 0x5F, 0x00,  // ......_.
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10, 0x03, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0xA0, 0xEF                           // ....
            })
            Name (DDTF, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3               // ......
            })
            CreateByteField (DDTF, One, DTAT)
            CreateByteField (DDTF, 0x08, DTFT)
            Name (DGTF, Buffer (0x15)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xE3, 0x10, 0x03,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0xA0, 0xEF                     // .....
            })
            CreateByteField (DGTF, One, GTAT)
            CreateByteField (DGTF, 0x08, GTFT)
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                ADBG ("PRT4: _SDD")
                DIP0 = Zero
                If ((SizeOf (Arg0) == 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, M078)
                    If ((\DPP4 && (M078 & 0x08)))
                    {
                        DIP0 = One
                    }
                }
            }

            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                ADBG ("PRT4: _GTF")
                If (DIP0)
                {
                    Return (HPTF) /* \_SB_.PC00.SAT0.PRT4.HPTF */
                }

                Return (HDTF) /* \_SB_.PC00.SAT0.PRT4.HDTF */
            }
        }
    }

    Scope (\_SB.PC00.SAT0)
    {
        Scope (PRT0)
        {
            Name (PORT, Zero)
            Name (PBAR, 0x0118)
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
        }

        Scope (PRT1)
        {
            Name (PORT, One)
            Name (PBAR, 0x0198)
            Name (PWRG, Package (0x04)
            {
                0x02, 
                Zero, 
                Zero, 
                Zero
            })
        }

        Scope (PRT2)
        {
            Name (PORT, 0x02)
            Name (PBAR, 0x0218)
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                One
            })
        }
    }

    If (CondRefOf (\_SB.IETM))
    {
        Scope (\_SB.IETM)
        {
            Name (DBDF, Package (0x01)
            {
                Buffer (0x017F)
                {
                    /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                    /* 0030 */  0x45, 0x6D, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,  // Embedded
                    /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                    /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x21, 0x27, 0x73, 0xE6,  // ....!'s.
                    /* 0070 */  0x10, 0x52, 0x5C, 0xAC, 0x87, 0xA8, 0x4E, 0xC2,  // .R\...N.
                    /* 0078 */  0x61, 0x22, 0xB7, 0x21, 0xF4, 0xEA, 0x60, 0xC1,  // a".!..`.
                    /* 0080 */  0x99, 0xBB, 0xA8, 0x9F, 0xA6, 0x6B, 0x0B, 0x73,  // .....k.s
                    /* 0088 */  0xE1, 0x42, 0xC0, 0x4F, 0xEB, 0x00, 0x00, 0x00,  // .B.O....
                    /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                    /* 0098 */  0x01, 0x94, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                    /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                    /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                    /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                    /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                    /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x43, 0x9C, 0xF1,  // u8...C..
                    /* 00D0 */  0x7A, 0xD3, 0x23, 0x3E, 0x0C, 0xFD, 0x9C, 0xBB,  // z.#>....
                    /* 00D8 */  0x48, 0x8A, 0x0C, 0x3A, 0x02, 0xFF, 0x4B, 0x8D,  // H..:..K.
                    /* 00E0 */  0xC0, 0x54, 0x72, 0x0C, 0x61, 0xE9, 0x8A, 0x92,  // .Tr.a...
                    /* 00E8 */  0x65, 0x6D, 0xFB, 0x84, 0x3B, 0x27, 0xE6, 0x18,  // em..;'..
                    /* 00F0 */  0xDA, 0x84, 0x22, 0xC5, 0x23, 0xE7, 0x49, 0x75,  // ..".#.Iu
                    /* 00F8 */  0xA1, 0x99, 0xC3, 0x7E, 0x71, 0x2C, 0x02, 0xCC,  // ...~q,..
                    /* 0100 */  0x76, 0x57, 0x44, 0xC6, 0x05, 0xB7, 0xEF, 0x65,  // vWD....e
                    /* 0108 */  0xDA, 0x69, 0x05, 0x5B, 0x43, 0x1F, 0x9E, 0x9B,  // .i.[C...
                    /* 0110 */  0x04, 0xF8, 0x02, 0xB5, 0x37, 0x7F, 0x63, 0xDC,  // ....7.c.
                    /* 0118 */  0xD9, 0x38, 0xA6, 0xB6, 0x43, 0x1F, 0x4D, 0x94,  // .8..C.M.
                    /* 0120 */  0x8C, 0xF3, 0xDE, 0x9E, 0x39, 0x6D, 0xF0, 0x25,  // ....9m.%
                    /* 0128 */  0x53, 0xE9, 0x37, 0x09, 0x7D, 0x18, 0x8A, 0x76,  // S.7.}..v
                    /* 0130 */  0x00, 0x78, 0x70, 0x41, 0x58, 0xF7, 0x5C, 0x92,  // .xpAX.\.
                    /* 0138 */  0xD1, 0xD4, 0xAD, 0xF7, 0xE4, 0xDC, 0xB0, 0x80,  // ........
                    /* 0140 */  0x97, 0x51, 0xE8, 0x2F, 0x99, 0x0F, 0x54, 0xB6,  // .Q./..T.
                    /* 0148 */  0xB7, 0x9C, 0x8E, 0x3F, 0xE5, 0xE5, 0x71, 0xF5,  // ...?..q.
                    /* 0150 */  0x08, 0xB0, 0xED, 0x11, 0x3A, 0xBD, 0xB2, 0x52,  // ....:..R
                    /* 0158 */  0x2A, 0x0B, 0x55, 0x39, 0xE1, 0x26, 0x70, 0x46,  // *.U9.&pF
                    /* 0160 */  0xF8, 0x75, 0x3E, 0x4B, 0x5A, 0x87, 0x7B, 0x63,  // .u>KZ.{c
                    /* 0168 */  0x03, 0x3A, 0xEB, 0xB6, 0x70, 0xEC, 0xCC, 0x83,  // .:..p...
                    /* 0170 */  0x34, 0xD4, 0xF9, 0xD6, 0x81, 0x60, 0xAB, 0xC9,  // 4....`..
                    /* 0178 */  0x29, 0x0C, 0xEB, 0xC6, 0x62, 0x83, 0x00         // )...b..
                }
            })
            Name (DBD0, Package (0x01)
            {
                Buffer (0x0A6A)
                {
                    /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                    /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                    /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                    /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x25, 0x2A, 0x2D, 0xD4,  // ....%*-.
                    /* 0070 */  0x12, 0x90, 0xF6, 0x14, 0x9A, 0x69, 0x1B, 0x5D,  // .....i.]
                    /* 0078 */  0x83, 0x41, 0xF8, 0x1D, 0x69, 0x6D, 0x0B, 0xF2,  // .A..im..
                    /* 0080 */  0xAC, 0x2A, 0x06, 0xFE, 0x96, 0x42, 0xC8, 0x30,  // .*...B.0
                    /* 0088 */  0xE1, 0x76, 0x44, 0x8F, 0xD6, 0x09, 0x00, 0x00,  // .vD.....
                    /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                    /* 0098 */  0x01, 0x0F, 0xD9, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                    /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                    /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                    /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                    /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                    /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x44, 0x5D, 0xF6,  // u8...D].
                    /* 00D0 */  0xDD, 0xCC, 0x43, 0x5F, 0x07, 0xA1, 0xA7, 0xD4,  // ..C_....
                    /* 00D8 */  0xF2, 0xEE, 0x2A, 0x24, 0xBC, 0x35, 0xEF, 0x39,  // ..*$.5.9
                    /* 00E0 */  0xE1, 0x1E, 0xC9, 0xD1, 0xBF, 0x10, 0xE8, 0x85,  // ........
                    /* 00E8 */  0x15, 0x6E, 0x0E, 0xDD, 0x87, 0xCF, 0x31, 0xEF,  // .n....1.
                    /* 00F0 */  0x24, 0xF4, 0x70, 0xA8, 0xD8, 0xD1, 0x67, 0x67,  // $.p...gg
                    /* 00F8 */  0xE5, 0x1A, 0x11, 0x87, 0xCD, 0x3F, 0x24, 0x21,  // .....?$!
                    /* 0100 */  0x8E, 0xF1, 0x70, 0x68, 0x69, 0xDD, 0xBA, 0xB6,  // ..phi...
                    /* 0108 */  0x63, 0xE4, 0x7C, 0x41, 0x95, 0x76, 0xAA, 0x14,  // c.|A.v..
                    /* 0110 */  0x39, 0xB0, 0xAF, 0xDA, 0xE4, 0xE0, 0x7C, 0x0E,  // 9.....|.
                    /* 0118 */  0xAE, 0x54, 0x24, 0x67, 0x73, 0xC6, 0x75, 0x0C,  // .T$gs.u.
                    /* 0120 */  0x98, 0x55, 0xE0, 0x38, 0x17, 0x10, 0x57, 0xAB,  // .U.8..W.
                    /* 0128 */  0x26, 0xB3, 0x01, 0xE5, 0xD1, 0x29, 0x38, 0x9F,  // &....)8.
                    /* 0130 */  0x33, 0x8C, 0x1D, 0xF0, 0xA7, 0x54, 0xE6, 0x15,  // 3....T..
                    /* 0138 */  0xE5, 0x15, 0x06, 0x03, 0x17, 0xCC, 0xD0, 0x18,  // ........
                    /* 0140 */  0x07, 0xCF, 0x47, 0x81, 0xC0, 0x82, 0x9B, 0xDD,  // ..G.....
                    /* 0148 */  0x1E, 0x64, 0x3F, 0xB1, 0xA5, 0xE0, 0xC6, 0x6E,  // .d?....n
                    /* 0150 */  0x49, 0x6B, 0xC2, 0x10, 0x4A, 0xA1, 0x57, 0x06,  // Ik..J.W.
                    /* 0158 */  0x19, 0x39, 0xD8, 0x64, 0x2E, 0xA4, 0xC6, 0x0C,  // .9.d....
                    /* 0160 */  0x9A, 0xE3, 0x49, 0xD1, 0x02, 0xE4, 0x9A, 0x9E,  // ..I.....
                    /* 0168 */  0xF2, 0x96, 0x4F, 0xEE, 0x6A, 0xC2, 0x1A, 0x58,  // ..O.j..X
                    /* 0170 */  0x06, 0xCE, 0x0A, 0x7B, 0x46, 0x71, 0xDA, 0xBA,  // ...{Fq..
                    /* 0178 */  0x45, 0xC9, 0x26, 0x53, 0x62, 0x31, 0x35, 0xC7,  // E.&Sb15.
                    /* 0180 */  0xE6, 0x97, 0x7C, 0xE0, 0x79, 0x7F, 0xB7, 0xB6,  // ..|.y...
                    /* 0188 */  0xC5, 0x5E, 0xEE, 0xE4, 0x38, 0xF9, 0x17, 0x04,  // .^..8...
                    /* 0190 */  0x82, 0xB6, 0x1A, 0x52, 0xE7, 0x8B, 0x84, 0xF6,  // ...R....
                    /* 0198 */  0xAB, 0x63, 0x45, 0xE9, 0x99, 0xD9, 0x74, 0x91,  // .cE...t.
                    /* 01A0 */  0xD8, 0x88, 0x44, 0x67, 0x5F, 0x6D, 0xA8, 0xBE,  // ..Dg_m..
                    /* 01A8 */  0x6C, 0xEC, 0xCD, 0x35, 0x63, 0x65, 0x46, 0x2F,  // l..5ceF/
                    /* 01B0 */  0x10, 0x25, 0x8E, 0xB2, 0x91, 0x61, 0x03, 0x55,  // .%...a.U
                    /* 01B8 */  0xE2, 0x22, 0xB7, 0x4B, 0x38, 0xA1, 0x48, 0x27,  // .".K8.H'
                    /* 01C0 */  0x67, 0xFF, 0x6D, 0x74, 0xBA, 0xFD, 0x96, 0xD9,  // g.mt....
                    /* 01C8 */  0x58, 0x8A, 0xBF, 0xCF, 0xEF, 0x57, 0x01, 0xAB,  // X....W..
                    /* 01D0 */  0x2C, 0x50, 0xB0, 0xF8, 0xD6, 0xC8, 0xAB, 0x5C,  // ,P.....\
                    /* 01D8 */  0xE0, 0x2A, 0x5E, 0x48, 0x48, 0xE9, 0x94, 0x8B,  // .*^HH...
                    /* 01E0 */  0xA4, 0x5F, 0x35, 0x49, 0x93, 0x50, 0xE0, 0xBB,  // ._5I.P..
                    /* 01E8 */  0x74, 0x56, 0xE3, 0x3D, 0xBB, 0x31, 0x2B, 0x2B,  // tV.=.1++
                    /* 01F0 */  0x0D, 0x71, 0x66, 0xC9, 0xEA, 0x77, 0xF3, 0x0B,  // .qf..w..
                    /* 01F8 */  0x15, 0xF9, 0x0F, 0x9F, 0x43, 0x17, 0xF2, 0xE7,  // ....C...
                    /* 0200 */  0x37, 0x1E, 0x1D, 0x1C, 0xDA, 0xB0, 0x7C, 0x09,  // 7.....|.
                    /* 0208 */  0xFB, 0x92, 0xD1, 0xBD, 0x6E, 0x7B, 0x69, 0xF5,  // ....n{i.
                    /* 0210 */  0xF1, 0x7A, 0x8A, 0x52, 0xAB, 0xAD, 0xC8, 0x30,  // .z.R...0
                    /* 0218 */  0x38, 0xE1, 0xB5, 0x0D, 0x40, 0xCF, 0x86, 0x51,  // 8...@..Q
                    /* 0220 */  0xD6, 0xB2, 0x4F, 0x55, 0x1B, 0xCD, 0x20, 0xCA,  // ..OU.. .
                    /* 0228 */  0x10, 0x9C, 0x15, 0x5A, 0x49, 0x2B, 0x4A, 0x0F,  // ...ZI+J.
                    /* 0230 */  0xEE, 0xD4, 0x00, 0x5D, 0xD8, 0x57, 0x80, 0x0A,  // ...].W..
                    /* 0238 */  0xEE, 0x83, 0x40, 0x2F, 0xA5, 0xDE, 0x79, 0x69,  // ..@/..yi
                    /* 0240 */  0xC9, 0xD5, 0x14, 0x73, 0x9B, 0x3A, 0x7C, 0xC1,  // ...s.:|.
                    /* 0248 */  0x15, 0xB5, 0x5F, 0x78, 0x95, 0xDC, 0xD6, 0x62,  // .._x...b
                    /* 0250 */  0x2C, 0xA6, 0xE9, 0x1C, 0xC8, 0xF3, 0xED, 0x86,  // ,.......
                    /* 0258 */  0xC7, 0x02, 0x10, 0xCD, 0x25, 0x72, 0xB5, 0xCA,  // ....%r..
                    /* 0260 */  0xEC, 0x2A, 0x4C, 0xD9, 0x82, 0xB6, 0x05, 0x18,  // .*L.....
                    /* 0268 */  0x09, 0xF8, 0x97, 0x35, 0xCA, 0x54, 0x77, 0xB6,  // ...5.Tw.
                    /* 0270 */  0x42, 0x39, 0x2D, 0x79, 0xEE, 0x59, 0x92, 0x21,  // B9-y.Y.!
                    /* 0278 */  0x1A, 0x32, 0x12, 0xBA, 0x6C, 0x0C, 0x8C, 0x83,  // .2..l...
                    /* 0280 */  0x23, 0xED, 0x75, 0x92, 0xD3, 0xAF, 0x83, 0x23,  // #.u....#
                    /* 0288 */  0x7F, 0x6A, 0xA4, 0xC0, 0x32, 0xC6, 0x89, 0xDB,  // .j..2...
                    /* 0290 */  0x4E, 0xDD, 0xA1, 0xA9, 0x51, 0xEE, 0x4A, 0x09,  // N...Q.J.
                    /* 0298 */  0xB6, 0x85, 0xB1, 0x4D, 0xB0, 0xAF, 0xFE, 0x61,  // ...M...a
                    /* 02A0 */  0x86, 0x09, 0xFF, 0xFA, 0x72, 0xA6, 0x3E, 0x8A,  // ....r.>.
                    /* 02A8 */  0x1B, 0xCC, 0x93, 0x9C, 0x23, 0xF6, 0x7C, 0x03,  // ....#.|.
                    /* 02B0 */  0xB6, 0x75, 0x68, 0xD2, 0x25, 0x93, 0x7A, 0x24,  // .uh.%.z$
                    /* 02B8 */  0x33, 0x1F, 0x75, 0xBD, 0xF9, 0xD9, 0xCA, 0x7D,  // 3.u....}
                    /* 02C0 */  0xFA, 0x91, 0x94, 0xC7, 0xB1, 0xCD, 0xB9, 0xFA,  // ........
                    /* 02C8 */  0x7A, 0x7D, 0xD5, 0x5A, 0x7B, 0x0E, 0x94, 0xBA,  // z}.Z{...
                    /* 02D0 */  0xFD, 0xFF, 0x4D, 0x9E, 0xD9, 0x88, 0xF7, 0xE8,  // ..M.....
                    /* 02D8 */  0x2F, 0x07, 0xB1, 0x93, 0xC2, 0x0D, 0x56, 0xF1,  // /.....V.
                    /* 02E0 */  0xCA, 0x53, 0x09, 0x6E, 0xA7, 0xB1, 0xCE, 0xAD,  // .S.n....
                    /* 02E8 */  0x9B, 0x27, 0xB5, 0x0C, 0x96, 0xDC, 0xBB, 0x75,  // .'.....u
                    /* 02F0 */  0x2B, 0x07, 0xF1, 0x24, 0x7A, 0x2F, 0x75, 0xC6,  // +..$z/u.
                    /* 02F8 */  0x6C, 0x97, 0xBC, 0xDD, 0xF3, 0xAF, 0xC5, 0x98,  // l.......
                    /* 0300 */  0x70, 0xFF, 0xDF, 0x10, 0x9D, 0x78, 0xBD, 0xFC,  // p....x..
                    /* 0308 */  0x92, 0x98, 0x3A, 0x67, 0x40, 0x2B, 0xEF, 0x38,  // ..:g@+.8
                    /* 0310 */  0x89, 0x1C, 0xCE, 0x5B, 0x76, 0x43, 0x31, 0x2A,  // ...[vC1*
                    /* 0318 */  0x34, 0x7D, 0x21, 0x84, 0xEB, 0xAF, 0xCB, 0x47,  // 4}!....G
                    /* 0320 */  0xA8, 0xC9, 0x04, 0x44, 0x90, 0x97, 0x67, 0x40,  // ...D..g@
                    /* 0328 */  0x04, 0x61, 0xCC, 0xD7, 0xAA, 0x93, 0xE8, 0x57,  // .a.....W
                    /* 0330 */  0x97, 0xBE, 0xCB, 0x59, 0x6E, 0x50, 0x7F, 0x86,  // ...YnP..
                    /* 0338 */  0x5F, 0x15, 0x89, 0x0D, 0x4E, 0x90, 0x98, 0xFD,  // _...N...
                    /* 0340 */  0x2C, 0xE1, 0x28, 0x4A, 0xFF, 0x04, 0xE5, 0x7F,  // ,.(J....
                    /* 0348 */  0x23, 0xE5, 0x8F, 0xC3, 0x54, 0x24, 0x11, 0xDC,  // #...T$..
                    /* 0350 */  0xDD, 0x6A, 0xF6, 0xAB, 0xBD, 0xE4, 0x01, 0xB5,  // .j......
                    /* 0358 */  0x3C, 0x9B, 0x92, 0xB1, 0x80, 0x3D, 0x88, 0x9E,  // <....=..
                    /* 0360 */  0x2A, 0x63, 0x56, 0x93, 0x9F, 0xA2, 0x9B, 0xB1,  // *cV.....
                    /* 0368 */  0xA5, 0xF7, 0x4E, 0x8D, 0x20, 0xF6, 0xC0, 0x13,  // ..N. ...
                    /* 0370 */  0xA2, 0xFD, 0x9B, 0x58, 0x0D, 0x59, 0x78, 0xA0,  // ...X.Yx.
                    /* 0378 */  0xB8, 0xBC, 0x5D, 0xA4, 0xB7, 0x52, 0xBB, 0xE0,  // ..]..R..
                    /* 0380 */  0x57, 0xE8, 0x9C, 0x37, 0x0F, 0xB3, 0xED, 0xB0,  // W..7....
                    /* 0388 */  0xF2, 0x50, 0x3A, 0xAE, 0x0F, 0xD8, 0x17, 0x28,  // .P:....(
                    /* 0390 */  0x6A, 0xD9, 0xDA, 0x8C, 0xE5, 0x3C, 0x07, 0x72,  // j....<.r
                    /* 0398 */  0x86, 0x49, 0x0F, 0x14, 0x23, 0x81, 0xD7, 0x90,  // .I..#...
                    /* 03A0 */  0x9C, 0x35, 0x67, 0xA6, 0x15, 0x9E, 0xE9, 0x44,  // .5g....D
                    /* 03A8 */  0x93, 0x49, 0x5F, 0x1F, 0x80, 0x86, 0x30, 0x25,  // .I_...0%
                    /* 03B0 */  0xEA, 0xA1, 0x5D, 0xB8, 0x8E, 0x19, 0x10, 0x1F,  // ..].....
                    /* 03B8 */  0x34, 0x9B, 0xC9, 0x6B, 0xB9, 0xA7, 0x2F, 0x15,  // 4..k../.
                    /* 03C0 */  0xD3, 0x23, 0x24, 0xFD, 0x81, 0x97, 0x0B, 0xC1,  // .#$.....
                    /* 03C8 */  0x9D, 0x49, 0xE0, 0x30, 0x2F, 0x0A, 0x6C, 0x2E,  // .I.0/.l.
                    /* 03D0 */  0x5C, 0xDD, 0x7C, 0x25, 0xD1, 0xBB, 0x81, 0xD4,  // \.|%....
                    /* 03D8 */  0xAE, 0x63, 0x88, 0x39, 0x14, 0x3C, 0x60, 0x4D,  // .c.9.<`M
                    /* 03E0 */  0x08, 0xCE, 0x6F, 0x62, 0xE0, 0xD3, 0x27, 0x66,  // ..ob..'f
                    /* 03E8 */  0xD7, 0xBC, 0xD7, 0x54, 0x26, 0xC0, 0x1B, 0x1A,  // ...T&...
                    /* 03F0 */  0x48, 0xD2, 0x80, 0x0C, 0xFB, 0x24, 0x95, 0xEE,  // H....$..
                    /* 03F8 */  0xFD, 0x19, 0x8E, 0x4D, 0xDB, 0x97, 0x05, 0xF3,  // ...M....
                    /* 0400 */  0xF1, 0xF1, 0x0D, 0x45, 0x49, 0x47, 0x1A, 0x70,  // ...EIG.p
                    /* 0408 */  0xB8, 0x88, 0xB3, 0x70, 0x95, 0x00, 0x5A, 0x99,  // ...p..Z.
                    /* 0410 */  0xAB, 0xEF, 0x17, 0xF5, 0x74, 0x01, 0xE2, 0x93,  // ....t...
                    /* 0418 */  0x8A, 0xE9, 0xB4, 0x22, 0x1A, 0x57, 0xBF, 0x44,  // ...".W.D
                    /* 0420 */  0x60, 0x3A, 0x3F, 0x28, 0x15, 0x79, 0xAB, 0x72,  // `:?(.y.r
                    /* 0428 */  0xD2, 0xF6, 0x00, 0xF3, 0xA6, 0x5F, 0x24, 0x73,  // ....._$s
                    /* 0430 */  0x6F, 0xD3, 0x40, 0xF0, 0x71, 0xA9, 0x9F, 0xBE,  // o.@.q...
                    /* 0438 */  0xCE, 0xC5, 0xA0, 0x7F, 0x42, 0x31, 0xA1, 0x6E,  // ....B1.n
                    /* 0440 */  0x8C, 0x41, 0xCD, 0x34, 0xC4, 0x70, 0x0A, 0x90,  // .A.4.p..
                    /* 0448 */  0xD5, 0xB8, 0xCC, 0x83, 0x9F, 0x79, 0x13, 0x30,  // .....y.0
                    /* 0450 */  0x20, 0x19, 0xC0, 0x05, 0xB2, 0xEE, 0xDC, 0x97,  //  .......
                    /* 0458 */  0xF3, 0xE3, 0x67, 0x6F, 0x8E, 0x06, 0x66, 0xB9,  // ..go..f.
                    /* 0460 */  0xBD, 0x4D, 0x2D, 0xAC, 0xAF, 0xF4, 0xB1, 0xD4,  // .M-.....
                    /* 0468 */  0x68, 0xDB, 0xD0, 0x35, 0xBF, 0x9A, 0x86, 0xB8,  // h..5....
                    /* 0470 */  0x2E, 0x15, 0x69, 0xD0, 0x12, 0x02, 0xDA, 0x76,  // ..i....v
                    /* 0478 */  0xCA, 0xDA, 0x2A, 0x4D, 0xD6, 0x7C, 0x7E, 0xAB,  // ..*M.|~.
                    /* 0480 */  0x94, 0x9F, 0x96, 0xDC, 0xE6, 0x84, 0x00, 0x4D,  // .......M
                    /* 0488 */  0x5A, 0xE2, 0x9E, 0x4D, 0x40, 0xDE, 0x13, 0xEA,  // Z..M@...
                    /* 0490 */  0xE2, 0x8E, 0x1B, 0xB4, 0x4C, 0x23, 0xD2, 0x29,  // ....L#.)
                    /* 0498 */  0x81, 0x8C, 0x50, 0x48, 0xAC, 0x57, 0x17, 0x68,  // ..PH.W.h
                    /* 04A0 */  0x8E, 0x87, 0xFC, 0x8A, 0x90, 0xF8, 0xB6, 0x1E,  // ........
                    /* 04A8 */  0x9F, 0x43, 0xDE, 0x9C, 0x39, 0x33, 0x43, 0xA8,  // .C..93C.
                    /* 04B0 */  0x75, 0x7D, 0xD2, 0x06, 0x14, 0x7F, 0x2A, 0xBC,  // u}....*.
                    /* 04B8 */  0xE8, 0x30, 0x63, 0x72, 0x17, 0x54, 0x9A, 0xC5,  // .0cr.T..
                    /* 04C0 */  0x45, 0xBE, 0x8D, 0x62, 0x3F, 0x7F, 0x02, 0x74,  // E..b?..t
                    /* 04C8 */  0xA0, 0xF6, 0x4B, 0xB7, 0xDA, 0x46, 0x4E, 0x78,  // ..K..FNx
                    /* 04D0 */  0xC4, 0x81, 0x58, 0xAE, 0x3E, 0xA8, 0x31, 0x75,  // ..X.>.1u
                    /* 04D8 */  0xAE, 0xB3, 0xE3, 0x8C, 0x8A, 0xED, 0xCB, 0x77,  // .......w
                    /* 04E0 */  0x55, 0x88, 0xEA, 0xD4, 0xB9, 0x24, 0xFE, 0xA4,  // U....$..
                    /* 04E8 */  0x9B, 0x32, 0x81, 0x2C, 0xCA, 0x54, 0x3B, 0xB2,  // .2.,.T;.
                    /* 04F0 */  0xC9, 0x0C, 0x9F, 0xC3, 0x91, 0xCF, 0x58, 0xFC,  // ......X.
                    /* 04F8 */  0xB5, 0x43, 0xC3, 0xBE, 0x0F, 0x9F, 0xDD, 0x40,  // .C.....@
                    /* 0500 */  0x32, 0xEA, 0xAC, 0x63, 0xB6, 0x2A, 0x1E, 0xDE,  // 2..c.*..
                    /* 0508 */  0x16, 0x77, 0x59, 0xA7, 0xDF, 0x23, 0x0F, 0x09,  // .wY..#..
                    /* 0510 */  0xE9, 0x39, 0x89, 0x45, 0x8F, 0xE7, 0x0B, 0x78,  // .9.E...x
                    /* 0518 */  0x25, 0x8A, 0x99, 0xA2, 0xEB, 0x72, 0x77, 0x79,  // %....rwy
                    /* 0520 */  0xB5, 0x9E, 0xFD, 0xE8, 0xA7, 0x88, 0x34, 0x6D,  // ......4m
                    /* 0528 */  0xE3, 0x01, 0xD9, 0xE7, 0x0A, 0x52, 0xFF, 0xAA,  // .....R..
                    /* 0530 */  0xE9, 0xCA, 0x94, 0x9E, 0x43, 0xC7, 0xBF, 0x3E,  // ....C..>
                    /* 0538 */  0xAD, 0xB8, 0x62, 0x40, 0x95, 0x16, 0x39, 0xEC,  // ..b@..9.
                    /* 0540 */  0x83, 0xF4, 0x4A, 0x9F, 0x41, 0xD5, 0xAF, 0xDF,  // ..J.A...
                    /* 0548 */  0x68, 0x18, 0x7C, 0xA4, 0x6F, 0xB3, 0x55, 0x5F,  // h.|.o.U_
                    /* 0550 */  0x67, 0xF1, 0xBA, 0x9E, 0x88, 0xE3, 0xB8, 0x70,  // g......p
                    /* 0558 */  0xC1, 0xE4, 0x8B, 0x88, 0xF6, 0x2C, 0x15, 0xC8,  // .....,..
                    /* 0560 */  0xB3, 0x7A, 0x87, 0x1A, 0x97, 0x9C, 0xD0, 0x55,  // .z.....U
                    /* 0568 */  0x0F, 0x5D, 0x2E, 0x54, 0x11, 0xC0, 0x48, 0xD3,  // .].T..H.
                    /* 0570 */  0xD7, 0x84, 0xBB, 0x86, 0xB4, 0x35, 0xC4, 0x0A,  // .....5..
                    /* 0578 */  0xA5, 0x08, 0xD7, 0xC8, 0x1B, 0xFE, 0x0F, 0xEE,  // ........
                    /* 0580 */  0x71, 0x89, 0x58, 0x65, 0xBE, 0x0D, 0x16, 0x34,  // q.Xe...4
                    /* 0588 */  0x22, 0x1C, 0x10, 0xEC, 0x27, 0x92, 0xBB, 0xDF,  // "...'...
                    /* 0590 */  0xCB, 0x88, 0x38, 0xE1, 0xB3, 0xE0, 0xE3, 0x73,  // ..8....s
                    /* 0598 */  0x88, 0x4A, 0x2F, 0x0B, 0xF0, 0x9C, 0x9E, 0x74,  // .J/....t
                    /* 05A0 */  0xC7, 0x36, 0x77, 0xE1, 0x42, 0x48, 0x4E, 0x46,  // .6w.BHNF
                    /* 05A8 */  0xAB, 0xFF, 0xBB, 0xBE, 0x27, 0x49, 0x5A, 0x48,  // ....'IZH
                    /* 05B0 */  0x08, 0xB8, 0x89, 0x08, 0x05, 0x52, 0xD5, 0x84,  // .....R..
                    /* 05B8 */  0x77, 0xE6, 0x95, 0xD4, 0x84, 0xED, 0x0C, 0xA0,  // w.......
                    /* 05C0 */  0x36, 0x23, 0x5D, 0x1C, 0x56, 0xD6, 0xBB, 0xD4,  // 6#].V...
                    /* 05C8 */  0x84, 0x1E, 0x89, 0xCF, 0x39, 0xAE, 0x74, 0x74,  // ....9.tt
                    /* 05D0 */  0x85, 0x62, 0x54, 0xCC, 0x9B, 0x7C, 0xAF, 0x22,  // .bT..|."
                    /* 05D8 */  0xE4, 0xDD, 0x70, 0xE5, 0x9C, 0x10, 0xCA, 0xCA,  // ..p.....
                    /* 05E0 */  0x5D, 0x3A, 0xF2, 0x4F, 0xAF, 0xC2, 0xA2, 0x8F,  // ]:.O....
                    /* 05E8 */  0x3D, 0x6E, 0x0A, 0xC5, 0xCD, 0xA9, 0xD4, 0x4A,  // =n.....J
                    /* 05F0 */  0x82, 0xC4, 0x94, 0x5C, 0x3C, 0x9B, 0x23, 0x92,  // ...\<.#.
                    /* 05F8 */  0x4B, 0x54, 0xC1, 0xA0, 0xE4, 0x06, 0x07, 0x04,  // KT......
                    /* 0600 */  0x46, 0x6F, 0x16, 0xE1, 0x58, 0xC6, 0x8A, 0x4A,  // Fo..X..J
                    /* 0608 */  0xFA, 0x81, 0xCA, 0x1B, 0xA3, 0xE9, 0x74, 0x9F,  // ......t.
                    /* 0610 */  0x0D, 0x5B, 0xFF, 0xDA, 0xBC, 0xDE, 0x5E, 0xE8,  // .[....^.
                    /* 0618 */  0x2B, 0x86, 0x02, 0x5F, 0xDD, 0x51, 0x96, 0xB3,  // +.._.Q..
                    /* 0620 */  0xC9, 0x48, 0xA0, 0x3D, 0x8F, 0x1C, 0xCD, 0x64,  // .H.=...d
                    /* 0628 */  0x36, 0x39, 0x19, 0xB8, 0xDF, 0x69, 0x8C, 0x25,  // 69...i.%
                    /* 0630 */  0xBB, 0x18, 0x5F, 0xC9, 0xFE, 0x40, 0x2B, 0x25,  // .._..@+%
                    /* 0638 */  0x19, 0xCC, 0xD0, 0x6B, 0xAE, 0xBC, 0x72, 0xB5,  // ...k..r.
                    /* 0640 */  0x77, 0xC9, 0x90, 0x07, 0x2A, 0x09, 0x28, 0xA2,  // w...*.(.
                    /* 0648 */  0x31, 0x2B, 0x2D, 0x94, 0xA5, 0x9B, 0x0C, 0x89,  // 1+-.....
                    /* 0650 */  0x36, 0x67, 0xDF, 0x28, 0xEC, 0xC0, 0xA7, 0x50,  // 6g.(...P
                    /* 0658 */  0xC3, 0xE3, 0x37, 0x1E, 0x39, 0xB0, 0xDE, 0x30,  // ..7.9..0
                    /* 0660 */  0x02, 0xF4, 0xE7, 0xCE, 0x97, 0x61, 0x8E, 0xB7,  // .....a..
                    /* 0668 */  0x5A, 0x50, 0x8F, 0xFF, 0x61, 0x27, 0xAC, 0xD8,  // ZP..a'..
                    /* 0670 */  0x68, 0x12, 0x0C, 0x44, 0x3F, 0x03, 0xA9, 0xCC,  // h..D?...
                    /* 0678 */  0x68, 0x35, 0xC1, 0x15, 0xEA, 0x42, 0x6F, 0xCF,  // h5...Bo.
                    /* 0680 */  0x83, 0x98, 0x02, 0x9B, 0xB9, 0x86, 0x2D, 0x87,  // ......-.
                    /* 0688 */  0xFD, 0x92, 0x5F, 0x47, 0x59, 0x4D, 0x01, 0xA8,  // .._GYM..
                    /* 0690 */  0x2A, 0x4E, 0x5D, 0xFA, 0x98, 0xDF, 0xA6, 0xE6,  // *N].....
                    /* 0698 */  0xB4, 0xBE, 0x67, 0xA5, 0x6A, 0xF9, 0xC6, 0xA0,  // ..g.j...
                    /* 06A0 */  0x69, 0x4B, 0x0D, 0x85, 0xC3, 0x3C, 0x01, 0xD9,  // iK...<..
                    /* 06A8 */  0xEC, 0xF5, 0xC6, 0xC3, 0x9D, 0xEE, 0xD6, 0xB7,  // ........
                    /* 06B0 */  0xF6, 0xC7, 0x5E, 0xCE, 0x75, 0xE2, 0x33, 0xF2,  // ..^.u.3.
                    /* 06B8 */  0xD9, 0x9B, 0xFB, 0x5D, 0x82, 0x11, 0x9C, 0x6D,  // ...]...m
                    /* 06C0 */  0xA0, 0xBC, 0x7E, 0x04, 0x83, 0xFE, 0x47, 0x7D,  // ..~...G}
                    /* 06C8 */  0x52, 0x5D, 0xF0, 0xB2, 0xE4, 0xF1, 0x8C, 0x27,  // R].....'
                    /* 06D0 */  0x3F, 0x04, 0x54, 0x79, 0x68, 0xBC, 0x0D, 0x66,  // ?.Tyh..f
                    /* 06D8 */  0xC0, 0x81, 0x22, 0xA9, 0xEF, 0x40, 0xAF, 0xFA,  // .."..@..
                    /* 06E0 */  0xE6, 0x88, 0xBB, 0xC4, 0x4F, 0xED, 0xDB, 0x1E,  // ....O...
                    /* 06E8 */  0xA7, 0x43, 0xA9, 0x25, 0x57, 0xCF, 0x13, 0xBD,  // .C.%W...
                    /* 06F0 */  0xCA, 0x3B, 0xCE, 0x07, 0x93, 0x6F, 0x1F, 0x7B,  // .;...o.{
                    /* 06F8 */  0xB1, 0xEA, 0x12, 0x42, 0x64, 0x89, 0x37, 0x77,  // ...Bd.7w
                    /* 0700 */  0xD9, 0x78, 0x69, 0x96, 0xBB, 0xFA, 0xD7, 0x9E,  // .xi.....
                    /* 0708 */  0x04, 0x0F, 0xCA, 0x2F, 0x50, 0x00, 0x78, 0xF2,  // .../P.x.
                    /* 0710 */  0xC9, 0xE7, 0x16, 0x23, 0xF0, 0x6A, 0xE7, 0xBC,  // ...#.j..
                    /* 0718 */  0x43, 0x33, 0x6F, 0xFA, 0x2E, 0x0F, 0x72, 0x48,  // C3o...rH
                    /* 0720 */  0xBE, 0x1B, 0x09, 0x72, 0xD3, 0x8A, 0x11, 0x99,  // ...r....
                    /* 0728 */  0xD4, 0xB2, 0x99, 0xE2, 0x87, 0xC5, 0xB0, 0x98,  // ........
                    /* 0730 */  0x63, 0x7E, 0x85, 0x60, 0xB1, 0x66, 0xB1, 0x28,  // c~.`.f.(
                    /* 0738 */  0x69, 0xD5, 0x87, 0x4D, 0x7B, 0x60, 0x8B, 0x25,  // i..M{`.%
                    /* 0740 */  0x74, 0x8F, 0x1A, 0x97, 0xCC, 0xCD, 0x70, 0x01,  // t.....p.
                    /* 0748 */  0x0A, 0x01, 0xDD, 0x06, 0x5B, 0x80, 0x4C, 0x73,  // ....[.Ls
                    /* 0750 */  0xF9, 0x7B, 0xCA, 0x94, 0x0A, 0x40, 0xDD, 0xA0,  // .{...@..
                    /* 0758 */  0x8B, 0xFE, 0x80, 0x1F, 0x13, 0x1E, 0x0A, 0x53,  // .......S
                    /* 0760 */  0xCE, 0xFC, 0xDC, 0xBA, 0x3A, 0x9D, 0x31, 0xFF,  // ....:.1.
                    /* 0768 */  0xB6, 0x33, 0x74, 0x34, 0x1A, 0xA3, 0xCA, 0xA4,  // .3t4....
                    /* 0770 */  0xAE, 0x3F, 0xCF, 0xDA, 0x85, 0x53, 0xEA, 0xDF,  // .?...S..
                    /* 0778 */  0x79, 0x85, 0xD7, 0x6C, 0x69, 0x0D, 0xF9, 0x3C,  // y..li..<
                    /* 0780 */  0x95, 0x4D, 0x58, 0x7D, 0x31, 0xC1, 0xAF, 0xA7,  // .MX}1...
                    /* 0788 */  0x35, 0x2A, 0x4A, 0x8E, 0x9B, 0x13, 0x3C, 0x58,  // 5*J...<X
                    /* 0790 */  0xB3, 0x8A, 0x25, 0xE0, 0x0F, 0xD4, 0x96, 0xBE,  // ..%.....
                    /* 0798 */  0x79, 0x24, 0xDC, 0xA7, 0x66, 0xC1, 0xB5, 0xD6,  // y$..f...
                    /* 07A0 */  0xEC, 0x16, 0xAB, 0x7C, 0x5F, 0x8B, 0x0E, 0xFB,  // ...|_...
                    /* 07A8 */  0x17, 0xBC, 0x9B, 0x3E, 0x14, 0x15, 0x52, 0x33,  // ...>..R3
                    /* 07B0 */  0x70, 0x96, 0x22, 0xA7, 0x67, 0xE1, 0x88, 0xC2,  // p.".g...
                    /* 07B8 */  0x27, 0x79, 0xBB, 0x43, 0xC8, 0x94, 0x45, 0x33,  // 'y.C..E3
                    /* 07C0 */  0xAB, 0x96, 0xE1, 0x1E, 0x5C, 0xF2, 0xD0, 0x3A,  // ....\..:
                    /* 07C8 */  0x2C, 0xC6, 0x46, 0x6D, 0x73, 0x01, 0x79, 0x5F,  // ,.Fms.y_
                    /* 07D0 */  0xD1, 0xDB, 0xA1, 0x44, 0x08, 0xF3, 0xAE, 0x55,  // ...D...U
                    /* 07D8 */  0x1F, 0xEB, 0x5D, 0xA4, 0x33, 0x78, 0xF5, 0x51,  // ..].3x.Q
                    /* 07E0 */  0xE3, 0x58, 0x3F, 0x29, 0x5A, 0x02, 0xA6, 0xB6,  // .X?)Z...
                    /* 07E8 */  0xE8, 0x9C, 0xCC, 0x93, 0xE5, 0x67, 0x34, 0x63,  // .....g4c
                    /* 07F0 */  0xCA, 0x3C, 0x69, 0x2B, 0xD7, 0x4E, 0x23, 0x9B,  // .<i+.N#.
                    /* 07F8 */  0x8F, 0x61, 0xD1, 0x04, 0x8A, 0x2C, 0xB6, 0xCF,  // .a...,..
                    /* 0800 */  0x21, 0x79, 0xCA, 0x11, 0x31, 0xEB, 0x3B, 0xD9,  // !y..1.;.
                    /* 0808 */  0xC7, 0xAA, 0x67, 0xA1, 0xAF, 0x9E, 0xA2, 0xD4,  // ..g.....
                    /* 0810 */  0x2D, 0xC8, 0xEF, 0x90, 0x16, 0xB0, 0x4D, 0xE2,  // -.....M.
                    /* 0818 */  0x99, 0x28, 0xC5, 0xAE, 0xBB, 0x8B, 0x31, 0x83,  // .(....1.
                    /* 0820 */  0xF0, 0xBE, 0xC5, 0xB0, 0x52, 0x85, 0x9A, 0xF6,  // ....R...
                    /* 0828 */  0x83, 0x56, 0xBB, 0xDE, 0x69, 0x56, 0x07, 0x50,  // .V..iV.P
                    /* 0830 */  0xE3, 0x40, 0x79, 0xF6, 0x78, 0x0A, 0xFE, 0x07,  // .@y.x...
                    /* 0838 */  0x88, 0xB4, 0xAA, 0x88, 0x23, 0xE1, 0xD2, 0xCC,  // ....#...
                    /* 0840 */  0x7D, 0x28, 0xE6, 0x75, 0x92, 0x3E, 0x1E, 0xC2,  // }(.u.>..
                    /* 0848 */  0xD3, 0x3A, 0xA3, 0xA6, 0x44, 0xE0, 0x55, 0xA3,  // .:..D.U.
                    /* 0850 */  0x98, 0x0D, 0x72, 0xEE, 0xDC, 0x97, 0x90, 0xA9,  // ..r.....
                    /* 0858 */  0x6A, 0xF8, 0x96, 0x97, 0xAB, 0x9E, 0xB9, 0x0D,  // j.......
                    /* 0860 */  0x76, 0x33, 0xD7, 0x62, 0x67, 0x86, 0xC1, 0xBB,  // v3.bg...
                    /* 0868 */  0x44, 0x7C, 0xDC, 0xD8, 0xF9, 0xB0, 0x09, 0x75,  // D|.....u
                    /* 0870 */  0xFC, 0x42, 0xB2, 0x1D, 0x8C, 0x4A, 0x96, 0x02,  // .B...J..
                    /* 0878 */  0x71, 0x3B, 0x40, 0x4E, 0xED, 0x3A, 0xC7, 0xE8,  // q;@N.:..
                    /* 0880 */  0x8E, 0xA9, 0x01, 0x74, 0x3F, 0xE2, 0x11, 0x48,  // ...t?..H
                    /* 0888 */  0x1E, 0x14, 0x6B, 0x4E, 0xF6, 0x8E, 0x43, 0xCD,  // ..kN..C.
                    /* 0890 */  0x51, 0x40, 0x45, 0x64, 0x19, 0x3D, 0xAA, 0x7B,  // Q@Ed.=.{
                    /* 0898 */  0x02, 0xFA, 0x1F, 0xA0, 0x16, 0xD0, 0xD9, 0x17,  // ........
                    /* 08A0 */  0x1B, 0x88, 0xE5, 0x13, 0x2A, 0x0A, 0xD2, 0x3F,  // ....*..?
                    /* 08A8 */  0x11, 0xF1, 0xF3, 0xA6, 0x70, 0xB6, 0xBC, 0x4F,  // ....p..O
                    /* 08B0 */  0x0B, 0xA7, 0xD7, 0x21, 0x97, 0x1D, 0x91, 0xD6,  // ...!....
                    /* 08B8 */  0x5F, 0x96, 0x8F, 0x33, 0xF8, 0x3D, 0xC6, 0xFF,  // _..3.=..
                    /* 08C0 */  0xA5, 0x5D, 0x21, 0xBD, 0xF4, 0x2B, 0x94, 0x3A,  // .]!..+.:
                    /* 08C8 */  0x1C, 0xD9, 0x73, 0x71, 0x38, 0x39, 0xCB, 0x93,  // ..sq89..
                    /* 08D0 */  0x34, 0xDE, 0x46, 0x47, 0x71, 0x52, 0x68, 0x52,  // 4.FGqRhR
                    /* 08D8 */  0x7D, 0xDD, 0x76, 0x86, 0xEA, 0xF2, 0x01, 0x7A,  // }.v....z
                    /* 08E0 */  0xFB, 0xFC, 0xC1, 0x31, 0xE4, 0x90, 0x5E, 0xF5,  // ...1..^.
                    /* 08E8 */  0xBF, 0x7C, 0xF8, 0x4E, 0x1D, 0xB3, 0x78, 0x3C,  // .|.N..x<
                    /* 08F0 */  0x1E, 0x98, 0xDC, 0x23, 0x79, 0x21, 0x5D, 0xF8,  // ...#y!].
                    /* 08F8 */  0x75, 0xE2, 0x07, 0x1B, 0x92, 0xF1, 0x16, 0x74,  // u......t
                    /* 0900 */  0x93, 0x39, 0xA9, 0xF9, 0xA6, 0x94, 0x14, 0x12,  // .9......
                    /* 0908 */  0x11, 0x7E, 0x12, 0x52, 0xA8, 0x72, 0xBB, 0x40,  // .~.R.r.@
                    /* 0910 */  0x54, 0x50, 0xE5, 0x9E, 0x16, 0x2F, 0x62, 0xD2,  // TP.../b.
                    /* 0918 */  0xD0, 0xFD, 0xAC, 0x4B, 0x81, 0x44, 0x25, 0x07,  // ...K.D%.
                    /* 0920 */  0x2A, 0x7B, 0xE0, 0x60, 0x7A, 0x80, 0x11, 0x68,  // *{.`z..h
                    /* 0928 */  0xEB, 0x9E, 0x65, 0x52, 0x63, 0x41, 0x4F, 0x30,  // ..eRcAO0
                    /* 0930 */  0x94, 0x55, 0xE3, 0xCE, 0x24, 0x4E, 0x1A, 0xB6,  // .U..$N..
                    /* 0938 */  0xBA, 0xF7, 0x4C, 0x72, 0xA3, 0x11, 0x66, 0x66,  // ..Lr..ff
                    /* 0940 */  0xC1, 0x47, 0xE5, 0x60, 0x5E, 0xAB, 0x80, 0xF6,  // .G.`^...
                    /* 0948 */  0xD4, 0x8E, 0x9F, 0x99, 0x29, 0xCA, 0x4C, 0x3D,  // ....).L=
                    /* 0950 */  0x77, 0x79, 0xE5, 0xB3, 0x53, 0x4C, 0xFE, 0xB8,  // wy..SL..
                    /* 0958 */  0xA5, 0x4C, 0xB0, 0xDB, 0x80, 0xD4, 0xE1, 0x86,  // .L......
                    /* 0960 */  0xA5, 0xF5, 0x5C, 0x59, 0x0C, 0x87, 0x64, 0xA1,  // ..\Y..d.
                    /* 0968 */  0x2B, 0xA5, 0x16, 0x7D, 0x91, 0x3E, 0x66, 0x49,  // +..}.>fI
                    /* 0970 */  0x8A, 0x45, 0x6F, 0x0B, 0x91, 0x5C, 0xD9, 0xB2,  // .Eo..\..
                    /* 0978 */  0x7D, 0x7C, 0x59, 0x9C, 0xE1, 0x3F, 0x40, 0xF4,  // }|Y..?@.
                    /* 0980 */  0xA2, 0x09, 0x7E, 0xE1, 0x11, 0x39, 0x16, 0x5F,  // ..~..9._
                    /* 0988 */  0xA8, 0x1B, 0xF1, 0xE4, 0x25, 0x41, 0x63, 0x5E,  // ....%Ac^
                    /* 0990 */  0x05, 0x5E, 0x56, 0x9A, 0x8E, 0xCE, 0x12, 0xC1,  // .^V.....
                    /* 0998 */  0x04, 0xCC, 0x6C, 0x5B, 0xB6, 0x4E, 0xB9, 0xFC,  // ..l[.N..
                    /* 09A0 */  0x84, 0xE7, 0x65, 0x6A, 0xBB, 0xCC, 0x1D, 0xB8,  // ..ej....
                    /* 09A8 */  0xAE, 0xC3, 0xD3, 0x06, 0xED, 0x32, 0x98, 0x5E,  // .....2.^
                    /* 09B0 */  0x9D, 0xCF, 0x65, 0x6D, 0xFB, 0xA8, 0x63, 0x69,  // ..em..ci
                    /* 09B8 */  0x28, 0x60, 0x54, 0x6B, 0x6B, 0xC2, 0xB0, 0xD3,  // (`Tkk...
                    /* 09C0 */  0x6A, 0xD6, 0x10, 0x16, 0x74, 0xB0, 0x46, 0x15,  // j...t.F.
                    /* 09C8 */  0xFE, 0x66, 0xAD, 0x72, 0xF6, 0xDA, 0x70, 0x88,  // .f.r..p.
                    /* 09D0 */  0x67, 0x47, 0x84, 0xD0, 0xF0, 0xB4, 0xC5, 0xD1,  // gG......
                    /* 09D8 */  0x4B, 0xA9, 0x7F, 0xB6, 0x4B, 0x5C, 0xF3, 0xA2,  // K...K\..
                    /* 09E0 */  0xE1, 0x79, 0xCF, 0xCA, 0xF2, 0x17, 0xE7, 0x31,  // .y.....1
                    /* 09E8 */  0x64, 0xED, 0x43, 0x10, 0x9B, 0x37, 0x0E, 0x5D,  // d.C..7.]
                    /* 09F0 */  0x1A, 0x1B, 0xEA, 0x8B, 0xBC, 0x63, 0x9D, 0x16,  // .....c..
                    /* 09F8 */  0x5E, 0xA7, 0x2D, 0xCF, 0xA9, 0xDE, 0x9B, 0xD0,  // ^.-.....
                    /* 0A00 */  0x9D, 0x50, 0x49, 0xE2, 0x70, 0xEB, 0xE9, 0x17,  // .PI.p...
                    /* 0A08 */  0x47, 0xE3, 0xAF, 0x6A, 0xB1, 0xDD, 0xD1, 0xB3,  // G..j....
                    /* 0A10 */  0xB9, 0x45, 0x33, 0x13, 0x67, 0xDC, 0x92, 0xA5,  // .E3.g...
                    /* 0A18 */  0xE5, 0x80, 0xD0, 0x8D, 0x11, 0x9E, 0xE3, 0x25,  // .......%
                    /* 0A20 */  0x0D, 0x8B, 0x62, 0xD4, 0xBF, 0xC4, 0xB3, 0x65,  // ..b....e
                    /* 0A28 */  0x0E, 0x87, 0x9C, 0x3C, 0x3B, 0x42, 0x1F, 0xDE,  // ...<;B..
                    /* 0A30 */  0x23, 0xBE, 0x1D, 0x9D, 0xCF, 0x11, 0x03, 0xDF,  // #.......
                    /* 0A38 */  0xE8, 0x22, 0x71, 0x42, 0xA7, 0x6E, 0x69, 0xB5,  // ."qB.ni.
                    /* 0A40 */  0x95, 0xB1, 0x4E, 0x2A, 0x21, 0xBC, 0x53, 0x4C,  // ..N*!.SL
                    /* 0A48 */  0x19, 0x8F, 0x3D, 0x4E, 0x58, 0xE6, 0xF1, 0xD9,  // ..=NX...
                    /* 0A50 */  0xB0, 0x3D, 0xB5, 0x4D, 0x42, 0x0A, 0x73, 0x49,  // .=.MB.sI
                    /* 0A58 */  0xED, 0x80, 0xDE, 0xED, 0xB0, 0x1C, 0x51, 0x74,  // ......Qt
                    /* 0A60 */  0x4F, 0x45, 0x6B, 0xCF, 0x18, 0xF7, 0x30, 0x93,  // OEk...0.
                    /* 0A68 */  0xEC, 0x00                                       // ..
                }
            })
            Name (DBD1, Package (0x01)
            {
                Buffer (0x0A54)
                {
                    /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                    /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                    /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                    /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0xF8, 0xAC, 0x8A, 0xCC,  // ........
                    /* 0070 */  0xC6, 0xC8, 0x31, 0xE7, 0x68, 0xBE, 0x53, 0x79,  // ..1.h.Sy
                    /* 0078 */  0x96, 0xB1, 0x0B, 0x7C, 0x6F, 0x4D, 0x79, 0xE9,  // ...|oMy.
                    /* 0080 */  0xDD, 0x24, 0xE7, 0xA8, 0xF9, 0x67, 0x05, 0xD0,  // .$...g..
                    /* 0088 */  0xFE, 0x32, 0x67, 0xD6, 0xC0, 0x09, 0x00, 0x00,  // .2g.....
                    /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                    /* 0098 */  0x01, 0x3D, 0xD9, 0x00, 0x00, 0x00, 0x00, 0x00,  // .=......
                    /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                    /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                    /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                    /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                    /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                    /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x41, 0x95, 0x6D,  // u8...A.m
                    /* 00D0 */  0xCD, 0x4E, 0x64, 0x88, 0x4A, 0x69, 0x74, 0xDC,  // .Nd.Jit.
                    /* 00D8 */  0xD7, 0x24, 0x03, 0xC1, 0x83, 0x2D, 0x59, 0xC3,  // .$...-Y.
                    /* 00E0 */  0x91, 0xBB, 0x62, 0xD4, 0x3B, 0x18, 0x05, 0x79,  // ..b.;..y
                    /* 00E8 */  0x21, 0x3A, 0x3B, 0xF2, 0xFE, 0xB8, 0xD2, 0x4D,  // !:;....M
                    /* 00F0 */  0xE0, 0x57, 0x92, 0x91, 0x48, 0xC8, 0x5B, 0x16,  // .W..H.[.
                    /* 00F8 */  0xA9, 0xA4, 0x95, 0x61, 0xFF, 0x5F, 0x45, 0x67,  // ...a._Eg
                    /* 0100 */  0x13, 0x70, 0xDC, 0x7F, 0x64, 0xFD, 0x02, 0x2B,  // .p..d..+
                    /* 0108 */  0xE2, 0x02, 0x36, 0x28, 0x24, 0x6E, 0x5D, 0x1E,  // ..6($n].
                    /* 0110 */  0x0B, 0x54, 0x80, 0xB0, 0xF7, 0xA4, 0x84, 0x4D,  // .T.....M
                    /* 0118 */  0x25, 0x1A, 0x12, 0x1D, 0xDD, 0x3C, 0xC9, 0x87,  // %....<..
                    /* 0120 */  0x17, 0x6C, 0xEB, 0x22, 0xB6, 0x0C, 0x98, 0x8B,  // .l."....
                    /* 0128 */  0xEE, 0x70, 0xB4, 0xAF, 0x7C, 0xC9, 0xA9, 0xAE,  // .p..|...
                    /* 0130 */  0x75, 0x3D, 0x9E, 0x93, 0xC9, 0x01, 0xC8, 0x61,  // u=.....a
                    /* 0138 */  0x34, 0xB1, 0x22, 0xD0, 0xE4, 0x34, 0x76, 0xE8,  // 4."..4v.
                    /* 0140 */  0x9F, 0x83, 0x0F, 0x5F, 0xFE, 0x0C, 0xF8, 0xC5,  // ..._....
                    /* 0148 */  0x97, 0x1D, 0xC7, 0x4D, 0xC8, 0x8A, 0x24, 0x26,  // ...M..$&
                    /* 0150 */  0x3F, 0x98, 0xA4, 0x6A, 0x62, 0x41, 0xD1, 0xA5,  // ?..jbA..
                    /* 0158 */  0xA3, 0x75, 0x08, 0x76, 0x77, 0x37, 0xAA, 0xAC,  // .u.vw7..
                    /* 0160 */  0xC9, 0xF9, 0x84, 0x49, 0x2D, 0xAB, 0x65, 0x40,  // ...I-.e@
                    /* 0168 */  0x58, 0xB3, 0xC1, 0x0A, 0x26, 0xD1, 0xEB, 0x63,  // X...&..c
                    /* 0170 */  0x80, 0x50, 0xD6, 0xFA, 0x3D, 0x39, 0xD1, 0x67,  // .P..=9.g
                    /* 0178 */  0x98, 0xE6, 0x90, 0x48, 0x28, 0x1A, 0xBF, 0xD4,  // ...H(...
                    /* 0180 */  0x03, 0xFE, 0x5A, 0x52, 0x2D, 0x36, 0x74, 0x99,  // ..ZR-6t.
                    /* 0188 */  0x86, 0xD6, 0x65, 0x0F, 0x6E, 0x06, 0x81, 0xA0,  // ..e.n...
                    /* 0190 */  0x10, 0xA1, 0x30, 0x06, 0x84, 0xFC, 0x74, 0xCF,  // ..0...t.
                    /* 0198 */  0x18, 0xF4, 0x02, 0xDA, 0x11, 0xED, 0x65, 0xA4,  // ......e.
                    /* 01A0 */  0xA7, 0xB6, 0xD4, 0x18, 0x2A, 0x01, 0x84, 0x86,  // ....*...
                    /* 01A8 */  0x06, 0x45, 0x19, 0x03, 0x8E, 0x6A, 0x28, 0x76,  // .E...j(v
                    /* 01B0 */  0x5D, 0x36, 0x6D, 0x04, 0xCE, 0x99, 0xA6, 0xB6,  // ]6m.....
                    /* 01B8 */  0xF5, 0xF6, 0x1E, 0xE8, 0x4E, 0x47, 0x11, 0xBF,  // ....NG..
                    /* 01C0 */  0x71, 0x07, 0xCB, 0x5F, 0xF2, 0x37, 0x45, 0xF1,  // q.._.7E.
                    /* 01C8 */  0x2B, 0x6A, 0x42, 0xC6, 0x7B, 0xAD, 0x3C, 0x4D,  // +jB.{.<M
                    /* 01D0 */  0x8C, 0x50, 0x10, 0x43, 0x54, 0xCC, 0xA4, 0x9E,  // .P.CT...
                    /* 01D8 */  0x81, 0x46, 0x88, 0x99, 0x2C, 0x00, 0x8A, 0x67,  // .F..,..g
                    /* 01E0 */  0x3E, 0xFB, 0xD4, 0xE2, 0x7C, 0xB4, 0x13, 0x36,  // >...|..6
                    /* 01E8 */  0x14, 0x56, 0x3E, 0x3A, 0xAB, 0x21, 0x80, 0x9D,  // .V>:.!..
                    /* 01F0 */  0x0A, 0x90, 0x34, 0x18, 0x6E, 0x3A, 0xCE, 0x23,  // ..4.n:.#
                    /* 01F8 */  0x5F, 0x3A, 0xFB, 0x80, 0x5C, 0x2D, 0x71, 0xE2,  // _:..\-q.
                    /* 0200 */  0x07, 0x2A, 0xC2, 0xC0, 0xA0, 0x65, 0x0A, 0xE4,  // .*...e..
                    /* 0208 */  0xB8, 0xF5, 0x8A, 0x71, 0x77, 0x33, 0x19, 0x1E,  // ...qw3..
                    /* 0210 */  0x51, 0xF6, 0xD5, 0x69, 0xE1, 0xB9, 0xB9, 0x43,  // Q..i...C
                    /* 0218 */  0x55, 0x1E, 0xCB, 0x43, 0xCF, 0x91, 0xB9, 0x18,  // U..C....
                    /* 0220 */  0xCF, 0xEA, 0x01, 0x6D, 0xC4, 0xBB, 0xA3, 0x3C,  // ...m...<
                    /* 0228 */  0xB7, 0x81, 0x95, 0x80, 0xBD, 0xDE, 0x58, 0x94,  // ......X.
                    /* 0230 */  0x5C, 0x72, 0xDB, 0x97, 0x14, 0x10, 0xF4, 0x68,  // \r.....h
                    /* 0238 */  0xC0, 0xD2, 0x09, 0x74, 0x98, 0x08, 0xAB, 0x50,  // ...t...P
                    /* 0240 */  0xB3, 0x71, 0xA4, 0x1A, 0xD7, 0xAA, 0xD4, 0x1D,  // .q......
                    /* 0248 */  0xF2, 0x9F, 0x25, 0x91, 0x36, 0xF6, 0xB5, 0xA3,  // ..%.6...
                    /* 0250 */  0xE5, 0x9B, 0xD1, 0x43, 0x32, 0x53, 0x38, 0x8D,  // ...C2S8.
                    /* 0258 */  0xCC, 0xCE, 0x2D, 0x04, 0x2F, 0x52, 0xF2, 0xAF,  // ..-./R..
                    /* 0260 */  0x72, 0x78, 0x4D, 0x5D, 0x5A, 0xED, 0x1B, 0xF7,  // rxM]Z...
                    /* 0268 */  0x8F, 0x24, 0x86, 0xB3, 0x49, 0xDB, 0xA0, 0xE0,  // .$..I...
                    /* 0270 */  0x23, 0x5E, 0x1C, 0xD1, 0xAB, 0x31, 0x96, 0xF2,  // #^...1..
                    /* 0278 */  0xAF, 0x40, 0x89, 0x00, 0xF8, 0x80, 0x59, 0x95,  // .@....Y.
                    /* 0280 */  0xD1, 0x7A, 0xD9, 0x07, 0xB0, 0xF2, 0x35, 0xCC,  // .z....5.
                    /* 0288 */  0x8F, 0x0F, 0x2B, 0x42, 0xB2, 0xF7, 0x1D, 0xE8,  // ..+B....
                    /* 0290 */  0x61, 0xA1, 0x72, 0x70, 0xDD, 0x92, 0x11, 0x6E,  // a.rp...n
                    /* 0298 */  0xE5, 0x57, 0x66, 0x4B, 0x10, 0x07, 0x27, 0x76,  // .WfK..'v
                    /* 02A0 */  0xAF, 0xF5, 0xEB, 0x63, 0x9E, 0xA2, 0xC1, 0x67,  // ...c...g
                    /* 02A8 */  0x2B, 0x73, 0x15, 0x82, 0x17, 0xA5, 0x68, 0x1B,  // +s....h.
                    /* 02B0 */  0x39, 0xD7, 0x33, 0x4E, 0x39, 0x85, 0x57, 0x6A,  // 9.3N9.Wj
                    /* 02B8 */  0x16, 0x30, 0x3F, 0xFC, 0x7C, 0x14, 0x1E, 0x1A,  // .0?.|...
                    /* 02C0 */  0x5E, 0x71, 0x9C, 0x9C, 0xBC, 0x7F, 0x49, 0x65,  // ^q....Ie
                    /* 02C8 */  0xD1, 0x4C, 0x68, 0x87, 0x2C, 0xCC, 0x8D, 0xC5,  // .Lh.,...
                    /* 02D0 */  0x43, 0x83, 0x6E, 0x2B, 0x63, 0xF0, 0x0D, 0x2C,  // C.n+c..,
                    /* 02D8 */  0x18, 0xBB, 0x6E, 0x4F, 0x1A, 0x9B, 0x59, 0x86,  // ..nO..Y.
                    /* 02E0 */  0x40, 0xBF, 0xBB, 0xC9, 0xC8, 0x6D, 0x44, 0x72,  // @....mDr
                    /* 02E8 */  0x10, 0x29, 0xEF, 0x42, 0xEE, 0xF3, 0x4A, 0xD1,  // .).B..J.
                    /* 02F0 */  0xF8, 0xF1, 0x39, 0x5A, 0x01, 0xFF, 0xCE, 0x3C,  // ..9Z...<
                    /* 02F8 */  0x90, 0xA6, 0xCF, 0x28, 0x94, 0x7E, 0xEE, 0xFF,  // ...(.~..
                    /* 0300 */  0x39, 0xCB, 0x03, 0x79, 0xB0, 0xFF, 0x39, 0xA4,  // 9..y..9.
                    /* 0308 */  0x6F, 0xFA, 0xCB, 0x05, 0xFD, 0x26, 0x16, 0x50,  // o....&.P
                    /* 0310 */  0xFF, 0x3D, 0x4D, 0x4D, 0x4B, 0x90, 0xBD, 0x4A,  // .=MMK..J
                    /* 0318 */  0x7F, 0x31, 0x5C, 0x62, 0x9D, 0xCD, 0x66, 0x00,  // .1\b..f.
                    /* 0320 */  0x11, 0x3F, 0x49, 0xD9, 0x3C, 0x3C, 0xF7, 0x4B,  // .?I.<<.K
                    /* 0328 */  0x1C, 0xF8, 0x65, 0x84, 0xA6, 0xDF, 0xA6, 0x8B,  // ..e.....
                    /* 0330 */  0x61, 0xA8, 0x9F, 0x9C, 0xAE, 0x52, 0x9E, 0x09,  // a....R..
                    /* 0338 */  0x13, 0x50, 0x1B, 0x6F, 0xB6, 0x28, 0xCF, 0x63,  // .P.o.(.c
                    /* 0340 */  0x45, 0xAE, 0xCA, 0x9B, 0x02, 0x55, 0x5E, 0x89,  // E....U^.
                    /* 0348 */  0x0C, 0x14, 0xB4, 0x49, 0xCE, 0x82, 0xF0, 0x53,  // ...I...S
                    /* 0350 */  0x43, 0x72, 0x11, 0x87, 0x4C, 0xF4, 0x95, 0x67,  // Cr..L..g
                    /* 0358 */  0x48, 0x08, 0x95, 0x37, 0x70, 0x63, 0x28, 0x39,  // H..7pc(9
                    /* 0360 */  0x48, 0xF7, 0xE3, 0xB4, 0x28, 0xF4, 0xA4, 0xA3,  // H...(...
                    /* 0368 */  0xF8, 0x08, 0x62, 0xC8, 0xCA, 0x0A, 0xCB, 0xBC,  // ..b.....
                    /* 0370 */  0x1F, 0xF2, 0xC7, 0xE2, 0x2C, 0xBB, 0x66, 0x22,  // ....,.f"
                    /* 0378 */  0x44, 0x9D, 0x4B, 0x87, 0x6A, 0x9D, 0x2F, 0x97,  // D.K.j./.
                    /* 0380 */  0x73, 0x8B, 0x42, 0x8C, 0x89, 0x32, 0xCF, 0x85,  // s.B..2..
                    /* 0388 */  0x6D, 0x66, 0x01, 0x54, 0x9D, 0xE3, 0x87, 0xA7,  // mf.T....
                    /* 0390 */  0xD6, 0xEB, 0x27, 0x98, 0x2D, 0x5F, 0x21, 0x60,  // ..'.-_!`
                    /* 0398 */  0x3C, 0x32, 0x93, 0x42, 0x12, 0x4C, 0xAF, 0xCB,  // <2.B.L..
                    /* 03A0 */  0x17, 0xD5, 0x8E, 0xD4, 0x53, 0x83, 0xCC, 0x38,  // ....S..8
                    /* 03A8 */  0x7A, 0x86, 0x1C, 0x64, 0x59, 0xE1, 0xB0, 0xBF,  // z..dY...
                    /* 03B0 */  0xBD, 0x33, 0x67, 0x31, 0x43, 0x46, 0x5D, 0x34,  // .3g1CF]4
                    /* 03B8 */  0x0E, 0x85, 0x5D, 0x01, 0x80, 0xBB, 0x1D, 0xB2,  // ..].....
                    /* 03C0 */  0x89, 0x71, 0xA6, 0x01, 0x0B, 0x0C, 0xFC, 0x3A,  // .q.....:
                    /* 03C8 */  0x16, 0x87, 0x01, 0x40, 0x0A, 0xC3, 0xA5, 0xAB,  // ...@....
                    /* 03D0 */  0xD9, 0x27, 0x9E, 0x4C, 0x18, 0x0B, 0x0F, 0xA8,  // .'.L....
                    /* 03D8 */  0x27, 0x48, 0x68, 0xEB, 0x2B, 0x5F, 0x00, 0x8C,  // 'Hh.+_..
                    /* 03E0 */  0xC8, 0xE6, 0xAC, 0xCD, 0x9F, 0x8F, 0xCB, 0x1A,  // ........
                    /* 03E8 */  0xE3, 0xB4, 0x38, 0xBB, 0x3D, 0x79, 0xFA, 0x16,  // ..8.=y..
                    /* 03F0 */  0xC8, 0xC6, 0xB2, 0x4F, 0x17, 0x90, 0x11, 0x3E,  // ...O...>
                    /* 03F8 */  0x37, 0xF5, 0x7C, 0xA6, 0x9F, 0xC7, 0x8D, 0x9D,  // 7.|.....
                    /* 0400 */  0xFC, 0xF6, 0xFD, 0xED, 0x0C, 0x44, 0x94, 0xA0,  // .....D..
                    /* 0408 */  0xEA, 0x4B, 0x39, 0x43, 0x94, 0x5E, 0xE6, 0x74,  // .K9C.^.t
                    /* 0410 */  0x98, 0x7D, 0x6F, 0xED, 0x30, 0x34, 0x06, 0x59,  // .}o.04.Y
                    /* 0418 */  0x7D, 0x00, 0xDD, 0xB4, 0xAE, 0xA0, 0xB3, 0xA9,  // }.......
                    /* 0420 */  0x42, 0x90, 0x90, 0x26, 0xC4, 0x0E, 0x41, 0xA6,  // B..&..A.
                    /* 0428 */  0x5A, 0xBF, 0x05, 0x79, 0x9E, 0x5E, 0x6A, 0xED,  // Z..y.^j.
                    /* 0430 */  0x75, 0x69, 0x7A, 0x79, 0x0D, 0xCA, 0xCF, 0x4A,  // uizy...J
                    /* 0438 */  0x1E, 0xD8, 0x6A, 0xDB, 0x35, 0xAF, 0xEF, 0x5E,  // ..j.5..^
                    /* 0440 */  0x52, 0x87, 0xD4, 0x57, 0x16, 0x1C, 0xC8, 0x43,  // R..W...C
                    /* 0448 */  0x53, 0x60, 0xC7, 0xC4, 0x52, 0x6A, 0x86, 0x8A,  // S`..Rj..
                    /* 0450 */  0xC9, 0x90, 0x20, 0x0C, 0xF9, 0x75, 0x7E, 0x80,  // .. ..u~.
                    /* 0458 */  0x8D, 0xCD, 0xA1, 0xEC, 0x6E, 0x0A, 0x5F, 0x95,  // ....n._.
                    /* 0460 */  0xAE, 0xBE, 0xA8, 0x28, 0xC6, 0x79, 0xA1, 0x72,  // ...(.y.r
                    /* 0468 */  0xB2, 0x95, 0x2E, 0x7C, 0xA5, 0x87, 0x08, 0x7C,  // ...|...|
                    /* 0470 */  0x47, 0x4F, 0x87, 0xEB, 0x62, 0xEC, 0xC9, 0x4E,  // GO..b..N
                    /* 0478 */  0x1C, 0x6C, 0x14, 0xC4, 0x8A, 0xA1, 0x75, 0x8F,  // .l....u.
                    /* 0480 */  0x5D, 0x22, 0x9C, 0x77, 0x60, 0x45, 0xFA, 0xAA,  // ]".w`E..
                    /* 0488 */  0x5E, 0xC7, 0x7E, 0x0A, 0x1C, 0x6E, 0x71, 0x89,  // ^.~..nq.
                    /* 0490 */  0x1A, 0xE1, 0x46, 0xBD, 0xAC, 0x4A, 0xCF, 0x52,  // ..F..J.R
                    /* 0498 */  0x0E, 0xA0, 0x2C, 0x2C, 0x3A, 0x04, 0x96, 0xC0,  // ..,,:...
                    /* 04A0 */  0xFB, 0xC8, 0x25, 0x1D, 0x60, 0x6E, 0x13, 0xD8,  // ..%.`n..
                    /* 04A8 */  0xD9, 0x8D, 0x6B, 0x9F, 0x79, 0x73, 0x62, 0x16,  // ..k.ysb.
                    /* 04B0 */  0xD5, 0xBD, 0xD6, 0xB3, 0xC9, 0x71, 0xBB, 0xDA,  // .....q..
                    /* 04B8 */  0x35, 0xDE, 0xA7, 0xCD, 0x9B, 0xDA, 0xAD, 0xED,  // 5.......
                    /* 04C0 */  0x05, 0x93, 0x25, 0xAF, 0x74, 0x41, 0x01, 0x92,  // ..%.tA..
                    /* 04C8 */  0x6F, 0x8C, 0x03, 0x6F, 0x53, 0x35, 0x35, 0x69,  // o..oS55i
                    /* 04D0 */  0xCC, 0xAE, 0xF1, 0x6C, 0xDC, 0x8C, 0x6C, 0x78,  // ...l..lx
                    /* 04D8 */  0x3E, 0x86, 0x2D, 0x49, 0x75, 0x70, 0x6F, 0xED,  // >.-Iupo.
                    /* 04E0 */  0x19, 0x84, 0xA3, 0xAF, 0x2B, 0xA6, 0x2F, 0x13,  // ....+./.
                    /* 04E8 */  0xCA, 0x0E, 0xFD, 0x6E, 0x3A, 0x11, 0xA4, 0x49,  // ...n:..I
                    /* 04F0 */  0xFC, 0x4B, 0xE7, 0xD7, 0x0A, 0x7A, 0x1F, 0x40,  // .K...z.@
                    /* 04F8 */  0x1B, 0x03, 0x89, 0xF2, 0xF9, 0xBA, 0x49, 0x57,  // ......IW
                    /* 0500 */  0x66, 0x7B, 0x75, 0x05, 0x3D, 0x62, 0x3B, 0x09,  // f{u.=b;.
                    /* 0508 */  0x96, 0x93, 0xC4, 0xA1, 0xF2, 0x0A, 0xEC, 0x78,  // .......x
                    /* 0510 */  0xAF, 0x5B, 0x85, 0xF9, 0x60, 0x7B, 0x6D, 0x52,  // .[..`{mR
                    /* 0518 */  0x46, 0x02, 0x5B, 0x47, 0x6B, 0x45, 0x8C, 0x4E,  // F.[GkE.N
                    /* 0520 */  0xD1, 0x7E, 0x61, 0xE0, 0xB6, 0x39, 0xD1, 0xE1,  // .~a..9..
                    /* 0528 */  0xD0, 0x1E, 0xF4, 0x58, 0xEE, 0xC0, 0x3B, 0x58,  // ...X..;X
                    /* 0530 */  0x17, 0x7B, 0xD7, 0xF5, 0xD9, 0x2E, 0x48, 0x8F,  // .{....H.
                    /* 0538 */  0x1D, 0x87, 0xF9, 0x68, 0x5D, 0xE1, 0x5F, 0x3C,  // ...h]._<
                    /* 0540 */  0x4B, 0x72, 0x62, 0xDD, 0xFB, 0x0A, 0x2A, 0xC9,  // Krb...*.
                    /* 0548 */  0xBB, 0x7D, 0xA9, 0xE8, 0xD0, 0x59, 0xBE, 0xDE,  // .}...Y..
                    /* 0550 */  0x5C, 0x69, 0x69, 0xB5, 0xF6, 0x32, 0x1B, 0x55,  // \ii..2.U
                    /* 0558 */  0xF8, 0xB2, 0x13, 0xE5, 0xED, 0x79, 0xB0, 0xB3,  // .....y..
                    /* 0560 */  0xCA, 0x8D, 0x36, 0x17, 0xA1, 0xD6, 0x4D, 0x23,  // ..6...M#
                    /* 0568 */  0xF4, 0x26, 0x27, 0xDF, 0x57, 0x54, 0xD5, 0x8D,  // .&'.WT..
                    /* 0570 */  0x88, 0xFA, 0x78, 0xB3, 0xFD, 0xE0, 0xEB, 0x11,  // ..x.....
                    /* 0578 */  0x84, 0xD2, 0xE3, 0x19, 0xE7, 0x16, 0xFF, 0x21,  // .......!
                    /* 0580 */  0x90, 0xD8, 0x7D, 0xA0, 0x2E, 0xEB, 0xD4, 0x05,  // ..}.....
                    /* 0588 */  0xCB, 0x6B, 0xC6, 0x2F, 0xCC, 0x70, 0xA7, 0x11,  // .k./.p..
                    /* 0590 */  0xF4, 0x3D, 0x77, 0x4D, 0xC3, 0xC8, 0x88, 0x17,  // .=wM....
                    /* 0598 */  0x3D, 0xBB, 0x0C, 0xA7, 0x59, 0x07, 0x56, 0xEE,  // =...Y.V.
                    /* 05A0 */  0xBD, 0xAE, 0x56, 0x36, 0x55, 0x6C, 0xF8, 0x08,  // ..V6Ul..
                    /* 05A8 */  0x27, 0xC8, 0x07, 0xEF, 0xB6, 0x67, 0x37, 0x7D,  // '....g7}
                    /* 05B0 */  0x0C, 0xB2, 0xF2, 0x31, 0x0E, 0x4F, 0xDC, 0xFD,  // ...1.O..
                    /* 05B8 */  0x1E, 0xB6, 0x65, 0x86, 0x18, 0x3C, 0x72, 0x72,  // ..e..<rr
                    /* 05C0 */  0x92, 0x06, 0x89, 0x3A, 0xA3, 0x68, 0x78, 0x1B,  // ...:.hx.
                    /* 05C8 */  0x5A, 0x35, 0x87, 0xFD, 0xDF, 0x85, 0x3E, 0x7A,  // Z5....>z
                    /* 05D0 */  0x80, 0xE3, 0x71, 0x6E, 0x0F, 0xCC, 0xBE, 0x98,  // ..qn....
                    /* 05D8 */  0x15, 0x5F, 0xBC, 0x8E, 0x89, 0x12, 0x1F, 0xAC,  // ._......
                    /* 05E0 */  0xDC, 0x57, 0xD3, 0x0E, 0x22, 0x88, 0x09, 0x96,  // .W.."...
                    /* 05E8 */  0xB2, 0xDB, 0x78, 0x7E, 0xC8, 0xE3, 0xE7, 0x4C,  // ..x~...L
                    /* 05F0 */  0x6D, 0xE4, 0xC4, 0x17, 0xC0, 0x3D, 0x7C, 0x28,  // m....=|(
                    /* 05F8 */  0x3C, 0xF0, 0x3F, 0xB0, 0x3C, 0x85, 0xC8, 0x83,  // <.?.<...
                    /* 0600 */  0x8A, 0xF8, 0x57, 0x30, 0x9B, 0x92, 0xC7, 0x56,  // ..W0...V
                    /* 0608 */  0xE9, 0xA2, 0x99, 0xA6, 0x6E, 0x81, 0x26, 0xD6,  // ....n.&.
                    /* 0610 */  0x19, 0x5F, 0x29, 0xFB, 0xCB, 0x37, 0x73, 0xB8,  // ._)..7s.
                    /* 0618 */  0x68, 0x6B, 0xD9, 0x26, 0x89, 0xA1, 0xFB, 0x96,  // hk.&....
                    /* 0620 */  0x0A, 0x34, 0x15, 0xB3, 0xF9, 0x5F, 0x6D, 0xD9,  // .4..._m.
                    /* 0628 */  0x92, 0x1C, 0x12, 0xD3, 0x92, 0x37, 0x98, 0x6F,  // .....7.o
                    /* 0630 */  0x2A, 0x9E, 0xC0, 0x85, 0x54, 0x92, 0x6A, 0xAD,  // *...T.j.
                    /* 0638 */  0x1F, 0x84, 0x45, 0x85, 0x7E, 0xA3, 0xBE, 0xE4,  // ..E.~...
                    /* 0640 */  0xD5, 0xE7, 0xF9, 0xB3, 0xC2, 0xC2, 0x11, 0x80,  // ........
                    /* 0648 */  0xF7, 0xA9, 0xB0, 0x22, 0xDA, 0x64, 0xBC, 0xEB,  // ...".d..
                    /* 0650 */  0x1A, 0xA9, 0x06, 0xEA, 0x5B, 0x5D, 0x8A, 0x0F,  // ....[]..
                    /* 0658 */  0x4F, 0x74, 0xC7, 0x22, 0x87, 0xE6, 0xDA, 0x4B,  // Ot."...K
                    /* 0660 */  0xE6, 0x28, 0xCD, 0xB6, 0xCE, 0xDE, 0x61, 0x62,  // .(....ab
                    /* 0668 */  0x6A, 0xAC, 0x3E, 0x03, 0x01, 0x76, 0x3E, 0x8D,  // j.>..v>.
                    /* 0670 */  0x76, 0xB5, 0x06, 0x9A, 0x10, 0x41, 0x52, 0x91,  // v....AR.
                    /* 0678 */  0x8F, 0x3D, 0xDD, 0x52, 0x28, 0xF8, 0xEF, 0x62,  // .=.R(..b
                    /* 0680 */  0x7E, 0x51, 0x3C, 0x29, 0x21, 0x28, 0xFC, 0x2E,  // ~Q<)!(..
                    /* 0688 */  0xCA, 0xBF, 0xD1, 0x76, 0x31, 0x8E, 0x66, 0xD7,  // ...v1.f.
                    /* 0690 */  0x7F, 0xF5, 0xE9, 0x19, 0x1C, 0x96, 0xE4, 0x1D,  // ........
                    /* 0698 */  0xE4, 0x83, 0xD1, 0x05, 0xA7, 0x32, 0x25, 0xA7,  // .....2%.
                    /* 06A0 */  0xF6, 0x4F, 0x74, 0x72, 0x9E, 0x9F, 0xDA, 0x8D,  // .Otr....
                    /* 06A8 */  0x19, 0xA7, 0x36, 0x13, 0xF4, 0x9D, 0x60, 0xFA,  // ..6...`.
                    /* 06B0 */  0x59, 0x6B, 0xD9, 0x10, 0x29, 0xDE, 0x59, 0xD3,  // Yk..).Y.
                    /* 06B8 */  0x0E, 0x15, 0x28, 0x40, 0x00, 0xCA, 0xB5, 0x3D,  // ..(@...=
                    /* 06C0 */  0x33, 0xD4, 0xA4, 0xC5, 0xA4, 0xB4, 0x0A, 0x28,  // 3......(
                    /* 06C8 */  0xFF, 0x04, 0xE2, 0x01, 0xBB, 0x76, 0x7C, 0x87,  // .....v|.
                    /* 06D0 */  0x9E, 0x57, 0x8A, 0xB1, 0x50, 0xF3, 0x7B, 0x50,  // .W..P.{P
                    /* 06D8 */  0xB3, 0xC3, 0x53, 0x68, 0xE3, 0xF4, 0xE1, 0xE4,  // ..Sh....
                    /* 06E0 */  0x2C, 0xB4, 0x8F, 0xD2, 0x69, 0x87, 0x47, 0x09,  // ,...i.G.
                    /* 06E8 */  0x3B, 0x7A, 0x74, 0xC6, 0x0B, 0x2A, 0x3C, 0xD8,  // ;zt..*<.
                    /* 06F0 */  0x4C, 0xFE, 0x7C, 0x36, 0x96, 0x5E, 0x6B, 0xD0,  // L.|6.^k.
                    /* 06F8 */  0xA8, 0xF7, 0x96, 0x94, 0x8D, 0x7A, 0x4C, 0xB2,  // .....zL.
                    /* 0700 */  0x51, 0x31, 0xE3, 0x5B, 0x5F, 0xFB, 0xB5, 0xC1,  // Q1.[_...
                    /* 0708 */  0x0B, 0x9B, 0x87, 0x74, 0x02, 0xAA, 0x2F, 0xF4,  // ...t../.
                    /* 0710 */  0x3B, 0x7F, 0xDE, 0x85, 0xB0, 0xB5, 0x96, 0xAF,  // ;.......
                    /* 0718 */  0xEE, 0x61, 0x40, 0xF2, 0xE9, 0x8F, 0xB0, 0x91,  // .a@.....
                    /* 0720 */  0x18, 0x2B, 0x56, 0xF4, 0x62, 0xDE, 0xF6, 0x1C,  // .+V.b...
                    /* 0728 */  0xA5, 0xA6, 0x33, 0x31, 0x8F, 0x4F, 0x96, 0x61,  // ..31.O.a
                    /* 0730 */  0xBA, 0x36, 0xA6, 0xC7, 0x86, 0x42, 0x2D, 0x42,  // .6...B-B
                    /* 0738 */  0xB4, 0x44, 0x73, 0xE1, 0xA2, 0x6A, 0xA6, 0xC9,  // .Ds..j..
                    /* 0740 */  0x63, 0x6F, 0x14, 0xC4, 0xB7, 0x49, 0xE6, 0x76,  // co...I.v
                    /* 0748 */  0x40, 0x20, 0xE7, 0x72, 0xFD, 0xB6, 0xE9, 0x23,  // @ .r...#
                    /* 0750 */  0x89, 0x2D, 0xC1, 0xC8, 0x23, 0x6C, 0xAC, 0xFD,  // .-..#l..
                    /* 0758 */  0x58, 0xFC, 0x2E, 0xFD, 0x45, 0xFE, 0x38, 0xDA,  // X...E.8.
                    /* 0760 */  0xB1, 0xDB, 0xC6, 0x60, 0xDD, 0xD8, 0xC9, 0xCF,  // ...`....
                    /* 0768 */  0xA6, 0xB1, 0x83, 0x07, 0xBF, 0x50, 0x9E, 0x65,  // .....P.e
                    /* 0770 */  0x02, 0x73, 0x37, 0x3D, 0x03, 0xDC, 0xFC, 0x19,  // .s7=....
                    /* 0778 */  0x29, 0xF2, 0xB5, 0x7C, 0x5C, 0xD6, 0x92, 0x68,  // )..|\..h
                    /* 0780 */  0x26, 0x34, 0x64, 0x51, 0x7C, 0x19, 0x3C, 0xB5,  // &4dQ|.<.
                    /* 0788 */  0xB0, 0x7F, 0x25, 0x9C, 0x76, 0xAC, 0x72, 0x38,  // ..%.v.r8
                    /* 0790 */  0x63, 0x92, 0x50, 0x3D, 0xFF, 0x6E, 0x90, 0x55,  // c.P=.n.U
                    /* 0798 */  0x31, 0xEC, 0xC6, 0x1E, 0x6E, 0x86, 0x10, 0xCF,  // 1...n...
                    /* 07A0 */  0xA2, 0x6E, 0xD2, 0xCD, 0x26, 0x39, 0x4B, 0xF4,  // .n..&9K.
                    /* 07A8 */  0x7E, 0x60, 0xB7, 0x60, 0xC3, 0xF2, 0x97, 0xDB,  // ~`.`....
                    /* 07B0 */  0x03, 0x14, 0x41, 0xFA, 0x33, 0xAB, 0x36, 0x69,  // ..A.3.6i
                    /* 07B8 */  0xE5, 0x97, 0x7D, 0xFC, 0x4B, 0xEB, 0xE2, 0xC7,  // ..}.K...
                    /* 07C0 */  0x1C, 0xE2, 0x03, 0x84, 0x8B, 0xB5, 0xAD, 0x7D,  // .......}
                    /* 07C8 */  0x0A, 0x6C, 0x18, 0x4E, 0xDA, 0xFB, 0x0E, 0x54,  // .l.N...T
                    /* 07D0 */  0xC7, 0x2D, 0xF4, 0xC9, 0xBA, 0x12, 0xA8, 0x8B,  // .-......
                    /* 07D8 */  0xA5, 0x40, 0xB9, 0x93, 0xA2, 0x55, 0x1C, 0x12,  // .@...U..
                    /* 07E0 */  0xA3, 0x14, 0x3B, 0x16, 0x79, 0xC8, 0x0E, 0xAB,  // ..;.y...
                    /* 07E8 */  0xE3, 0x1F, 0xC5, 0xE7, 0xAD, 0xC7, 0x17, 0x5E,  // .......^
                    /* 07F0 */  0x2B, 0x5C, 0x6F, 0x6E, 0x7D, 0x14, 0x06, 0x14,  // +\on}...
                    /* 07F8 */  0x49, 0x0F, 0x02, 0xEF, 0xD8, 0x83, 0x56, 0xFD,  // I.....V.
                    /* 0800 */  0x7C, 0xA2, 0x2F, 0x33, 0xB6, 0xCA, 0xE0, 0x68,  // |./3...h
                    /* 0808 */  0x21, 0xDF, 0x90, 0x70, 0xD5, 0x78, 0x6A, 0xC5,  // !..p.xj.
                    /* 0810 */  0x38, 0x9A, 0x43, 0x5D, 0xFC, 0x15, 0x50, 0xBC,  // 8.C]..P.
                    /* 0818 */  0xD4, 0x60, 0x10, 0x8D, 0x3C, 0xC8, 0x94, 0x92,  // .`..<...
                    /* 0820 */  0xF0, 0x93, 0x08, 0x80, 0x6B, 0xE8, 0xA4, 0x1B,  // ....k...
                    /* 0828 */  0x38, 0xE5, 0xD2, 0x7B, 0x48, 0x26, 0xAE, 0x76,  // 8..{H&.v
                    /* 0830 */  0x46, 0x97, 0xC9, 0x1D, 0xA9, 0x07, 0xAE, 0x0B,  // F.......
                    /* 0838 */  0x22, 0xB6, 0x2D, 0x3F, 0xBC, 0xF5, 0x05, 0x29,  // ".-?...)
                    /* 0840 */  0x06, 0x47, 0x89, 0x2D, 0x08, 0x59, 0xAC, 0x51,  // .G.-.Y.Q
                    /* 0848 */  0xA6, 0xB5, 0x42, 0xEC, 0x20, 0x4B, 0xBD, 0x1A,  // ..B. K..
                    /* 0850 */  0x1C, 0x00, 0x83, 0x80, 0x56, 0xA5, 0x44, 0x09,  // ....V.D.
                    /* 0858 */  0x21, 0x4A, 0xF8, 0xA8, 0x78, 0xB1, 0xAB, 0x2F,  // !J..x../
                    /* 0860 */  0x2F, 0x80, 0xB2, 0x33, 0xA0, 0x8B, 0x21, 0x05,  // /..3..!.
                    /* 0868 */  0x59, 0x8D, 0xEA, 0x9C, 0x54, 0xD9, 0x3A, 0x96,  // Y...T.:.
                    /* 0870 */  0x49, 0xF4, 0xE2, 0x75, 0xB3, 0xC4, 0x28, 0x04,  // I..u..(.
                    /* 0878 */  0x43, 0x70, 0x3B, 0x93, 0xB2, 0x70, 0x7C, 0xFF,  // Cp;..p|.
                    /* 0880 */  0x59, 0x91, 0x09, 0x0C, 0x87, 0x8B, 0x86, 0x6C,  // Y......l
                    /* 0888 */  0xDD, 0x5E, 0x8D, 0xC6, 0xA5, 0x6B, 0x6C, 0x7D,  // .^...kl}
                    /* 0890 */  0xA9, 0x73, 0x8E, 0x79, 0x7E, 0x02, 0xE7, 0xFC,  // .s.y~...
                    /* 0898 */  0xA3, 0x43, 0x2E, 0x47, 0x49, 0xE3, 0x47, 0x59,  // .C.GI.GY
                    /* 08A0 */  0x17, 0xD6, 0xA4, 0xAB, 0x3F, 0xB9, 0x6F, 0x5F,  // ....?.o_
                    /* 08A8 */  0xAF, 0x3D, 0xDB, 0x28, 0x06, 0x69, 0x20, 0x80,  // .=.(.i .
                    /* 08B0 */  0xD0, 0xC1, 0xE9, 0x0A, 0x7E, 0xF3, 0x90, 0x48,  // ....~..H
                    /* 08B8 */  0xC1, 0x54, 0xE8, 0x09, 0x26, 0x83, 0x5C, 0x46,  // .T..&.\F
                    /* 08C0 */  0x60, 0xA2, 0x82, 0x73, 0x96, 0xEE, 0xCF, 0xA0,  // `..s....
                    /* 08C8 */  0xB2, 0x02, 0x82, 0x09, 0x6F, 0x46, 0xE2, 0x6E,  // ....oF.n
                    /* 08D0 */  0xA9, 0x14, 0x70, 0xB8, 0x04, 0xD3, 0x23, 0x79,  // ..p...#y
                    /* 08D8 */  0x01, 0xB3, 0x0F, 0xE3, 0x8E, 0xF4, 0xA1, 0x42,  // .......B
                    /* 08E0 */  0xD4, 0x37, 0xC0, 0x8D, 0x74, 0x62, 0x12, 0x33,  // .7..tb.3
                    /* 08E8 */  0x79, 0x33, 0x00, 0xE4, 0xE3, 0x58, 0xC7, 0xF7,  // y3...X..
                    /* 08F0 */  0x82, 0xA6, 0xE9, 0x1D, 0x0E, 0x1E, 0x47, 0x08,  // ......G.
                    /* 08F8 */  0x78, 0x8D, 0xB6, 0xDF, 0x78, 0xDE, 0x9E, 0xAB,  // x...x...
                    /* 0900 */  0xC3, 0x37, 0xC6, 0xB2, 0x53, 0xC7, 0xE3, 0x34,  // .7..S..4
                    /* 0908 */  0x18, 0x8B, 0x70, 0x80, 0x3C, 0x5F, 0xDB, 0x1C,  // ..p.<_..
                    /* 0910 */  0x8C, 0x2C, 0x51, 0xFA, 0x4E, 0xBE, 0xFD, 0x75,  // .,Q.N..u
                    /* 0918 */  0x7C, 0xE1, 0x11, 0x86, 0x59, 0xFF, 0xDA, 0x52,  // |...Y..R
                    /* 0920 */  0xFD, 0xA5, 0xE4, 0xB6, 0x54, 0xFE, 0x89, 0x1D,  // ....T...
                    /* 0928 */  0x7B, 0x45, 0xAD, 0x15, 0x35, 0x48, 0xB8, 0xF5,  // {E..5H..
                    /* 0930 */  0x12, 0x9D, 0xC5, 0x9B, 0x59, 0x05, 0xEF, 0x65,  // ....Y..e
                    /* 0938 */  0xA9, 0x19, 0x50, 0xED, 0x05, 0xBD, 0x99, 0x10,  // ..P.....
                    /* 0940 */  0x8F, 0x63, 0xF3, 0xE0, 0x19, 0x54, 0x2A, 0xAB,  // .c...T*.
                    /* 0948 */  0x15, 0x26, 0xF6, 0xC2, 0x92, 0x07, 0x6A, 0xAD,  // .&....j.
                    /* 0950 */  0xD4, 0x2A, 0xC7, 0xDC, 0x5A, 0xEB, 0xD1, 0x17,  // .*..Z...
                    /* 0958 */  0xD3, 0xC2, 0xD9, 0xD8, 0xEB, 0xFB, 0x34, 0x93,  // ......4.
                    /* 0960 */  0x1C, 0x58, 0xE3, 0x1F, 0x5C, 0x92, 0x47, 0xC9,  // .X..\.G.
                    /* 0968 */  0x5B, 0xD6, 0x3D, 0x0B, 0xDD, 0xF3, 0xC7, 0xF8,  // [.=.....
                    /* 0970 */  0x7A, 0xBF, 0xFA, 0xD4, 0x8F, 0x81, 0xD9, 0x41,  // z......A
                    /* 0978 */  0x48, 0xC2, 0x5B, 0xB9, 0xC0, 0xFD, 0x21, 0x66,  // H.[...!f
                    /* 0980 */  0xFB, 0xAB, 0xB2, 0xD2, 0x82, 0x54, 0xDC, 0x73,  // .....T.s
                    /* 0988 */  0x92, 0xEF, 0xF1, 0xCC, 0x56, 0x59, 0xEA, 0xC5,  // ....VY..
                    /* 0990 */  0xA0, 0x93, 0xE2, 0xA4, 0xAA, 0x0B, 0x6F, 0x3A,  // ......o:
                    /* 0998 */  0xD9, 0x1C, 0x57, 0x4F, 0x29, 0x21, 0x4C, 0x12,  // ..WO)!L.
                    /* 09A0 */  0xC1, 0x84, 0x7D, 0xDB, 0x89, 0x9F, 0x3F, 0x69,  // ..}...?i
                    /* 09A8 */  0x69, 0xBA, 0xF2, 0x87, 0x97, 0x49, 0x77, 0x12,  // i....Iw.
                    /* 09B0 */  0x72, 0x6C, 0xC7, 0x50, 0xE1, 0x39, 0x26, 0xC1,  // rl.P.9&.
                    /* 09B8 */  0xEA, 0x11, 0x49, 0xBD, 0x16, 0x9C, 0xBF, 0xC3,  // ..I.....
                    /* 09C0 */  0xA4, 0xAB, 0x96, 0x14, 0xA2, 0xA1, 0x93, 0x41,  // .......A
                    /* 09C8 */  0x8C, 0x28, 0xAB, 0xDF, 0x5D, 0xCA, 0xB7, 0x61,  // .(..]..a
                    /* 09D0 */  0x97, 0x1D, 0xC6, 0x93, 0x92, 0x44, 0xF8, 0xD5,  // .....D..
                    /* 09D8 */  0x42, 0x45, 0xA8, 0x03, 0xDB, 0x18, 0xC3, 0xE7,  // BE......
                    /* 09E0 */  0x5F, 0x04, 0xD9, 0x2E, 0xE2, 0x4B, 0x61, 0xB6,  // _....Ka.
                    /* 09E8 */  0x00, 0x8A, 0x94, 0x8B, 0xC8, 0x49, 0x28, 0xCD,  // .....I(.
                    /* 09F0 */  0x8E, 0x0B, 0x1F, 0xE2, 0x1A, 0xE7, 0xFC, 0xAF,  // ........
                    /* 09F8 */  0x23, 0x79, 0x06, 0x41, 0xAC, 0xEF, 0xB0, 0x6B,  // #y.A...k
                    /* 0A00 */  0xD3, 0xD2, 0xDD, 0xE4, 0x8A, 0xF5, 0x6F, 0x04,  // ......o.
                    /* 0A08 */  0x38, 0xFD, 0x9B, 0x3B, 0x61, 0x22, 0x7F, 0x29,  // 8..;a".)
                    /* 0A10 */  0x2B, 0x29, 0x23, 0x0F, 0x21, 0x63, 0x76, 0x17,  // +)#.!cv.
                    /* 0A18 */  0x00, 0xA7, 0x7B, 0x37, 0xF6, 0x06, 0x41, 0xA9,  // ..{7..A.
                    /* 0A20 */  0xD8, 0x3A, 0x2D, 0x2C, 0xED, 0x36, 0x71, 0xA2,  // .:-,.6q.
                    /* 0A28 */  0x83, 0x3B, 0x7C, 0xC0, 0x9B, 0x24, 0x22, 0xC9,  // .;|..$".
                    /* 0A30 */  0x53, 0x93, 0x85, 0x15, 0x9E, 0xA8, 0x63, 0x16,  // S.....c.
                    /* 0A38 */  0x2C, 0xD2, 0x65, 0x6D, 0xB5, 0xC2, 0xD1, 0x8D,  // ,.em....
                    /* 0A40 */  0xEC, 0x24, 0xFB, 0x1C, 0x4D, 0x8C, 0xAE, 0xD4,  // .$..M...
                    /* 0A48 */  0x2E, 0xA7, 0x0F, 0xDB, 0x98, 0xFA, 0x2F, 0x27,  // ....../'
                    /* 0A50 */  0x3F, 0x72, 0xE0, 0x00                           // ?r..
                }
            })
            Name (DBD2, Package (0x01)
            {
                Buffer (0x0A5F)
                {
                    /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                    /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                    /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                    /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x54, 0xB2, 0x1D, 0x0B,  // ....T...
                    /* 0070 */  0x75, 0x99, 0x45, 0xA1, 0x0F, 0x89, 0xDC, 0xE0,  // u.E.....
                    /* 0078 */  0xBB, 0x4B, 0x6C, 0xC2, 0x3D, 0x87, 0xFA, 0x3A,  // .Kl.=..:
                    /* 0080 */  0xBD, 0xBF, 0xF0, 0x10, 0xAB, 0x59, 0x93, 0xF8,  // .....Y..
                    /* 0088 */  0xBE, 0xA0, 0x72, 0xEF, 0xCB, 0x09, 0x00, 0x00,  // ..r.....
                    /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                    /* 0098 */  0x01, 0x32, 0xDA, 0x00, 0x00, 0x00, 0x00, 0x00,  // .2......
                    /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                    /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                    /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                    /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                    /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                    /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x44, 0x49, 0x47,  // u8...DIG
                    /* 00D0 */  0xAC, 0x2B, 0xA0, 0x74, 0x87, 0xB2, 0x6D, 0x30,  // .+.t..m0
                    /* 00D8 */  0xDD, 0x69, 0x8B, 0xC8, 0x1A, 0x67, 0x2B, 0x56,  // .i...g+V
                    /* 00E0 */  0xBD, 0xFE, 0x67, 0x1F, 0x99, 0xF3, 0xFE, 0x70,  // ..g....p
                    /* 00E8 */  0x9D, 0x87, 0x34, 0x57, 0x2E, 0xD7, 0x37, 0x78,  // ..4W..7x
                    /* 00F0 */  0x73, 0x0B, 0x88, 0xF6, 0x62, 0xC7, 0x9B, 0x45,  // s...b..E
                    /* 00F8 */  0x7F, 0x85, 0xB1, 0x17, 0x9E, 0x93, 0xE7, 0xFA,  // ........
                    /* 0100 */  0x6A, 0x0F, 0xA6, 0xDB, 0x65, 0xC4, 0x03, 0xB3,  // j...e...
                    /* 0108 */  0xBE, 0x61, 0xCF, 0x84, 0xE7, 0x4A, 0x76, 0x79,  // .a...Jvy
                    /* 0110 */  0x19, 0x44, 0x05, 0xEE, 0x03, 0xE0, 0x88, 0xF6,  // .D......
                    /* 0118 */  0xDE, 0x1A, 0x16, 0x5E, 0xD9, 0xBA, 0x57, 0xC3,  // ...^..W.
                    /* 0120 */  0x5B, 0x63, 0x3B, 0xB9, 0x34, 0xB6, 0xF8, 0x94,  // [c;.4...
                    /* 0128 */  0x9C, 0x65, 0x7B, 0x74, 0xCB, 0x07, 0xC0, 0x80,  // .e{t....
                    /* 0130 */  0xA0, 0x5D, 0x59, 0x7C, 0xD9, 0xC2, 0xC6, 0x5C,  // .]Y|...\
                    /* 0138 */  0x50, 0x68, 0x05, 0x78, 0xE6, 0x76, 0xE1, 0xD3,  // Ph.x.v..
                    /* 0140 */  0x35, 0x7D, 0xC6, 0x08, 0x38, 0xA6, 0x0F, 0x0C,  // 5}..8...
                    /* 0148 */  0x8D, 0xA0, 0xC6, 0xE3, 0xE9, 0xD1, 0xAA, 0x9C,  // ........
                    /* 0150 */  0xFA, 0xBC, 0x27, 0xDA, 0x66, 0x7F, 0x04, 0xC0,  // ..'.f...
                    /* 0158 */  0x27, 0xFE, 0x1D, 0x31, 0x70, 0xAE, 0x02, 0x92,  // '..1p...
                    /* 0160 */  0xDC, 0xF7, 0x21, 0x14, 0xD6, 0x9B, 0x9A, 0x69,  // ..!....i
                    /* 0168 */  0xE2, 0xD8, 0xE9, 0x04, 0xB0, 0x0D, 0x2E, 0xDA,  // ........
                    /* 0170 */  0x29, 0x5F, 0xDC, 0xB2, 0xC0, 0xB8, 0xE7, 0x87,  // )_......
                    /* 0178 */  0x8E, 0x0C, 0x2F, 0x12, 0xB9, 0xE1, 0xDD, 0xB9,  // ../.....
                    /* 0180 */  0x55, 0x4A, 0xF8, 0x5F, 0x37, 0x24, 0x9C, 0x3E,  // UJ._7$.>
                    /* 0188 */  0x51, 0xB1, 0x31, 0xDE, 0x00, 0x2F, 0x67, 0xBF,  // Q.1../g.
                    /* 0190 */  0x7E, 0xC9, 0x06, 0x94, 0x84, 0xEF, 0x0C, 0x18,  // ~.......
                    /* 0198 */  0xD2, 0x24, 0x6E, 0xFC, 0x94, 0x94, 0x49, 0x3C,  // .$n...I<
                    /* 01A0 */  0x0C, 0x0F, 0x1B, 0x5A, 0xF2, 0x87, 0x88, 0x4E,  // ...Z...N
                    /* 01A8 */  0x9E, 0x00, 0x92, 0xFF, 0x90, 0xB3, 0x7D, 0x8A,  // ......}.
                    /* 01B0 */  0x33, 0x12, 0xC6, 0x82, 0xC6, 0x8A, 0x31, 0xFD,  // 3.....1.
                    /* 01B8 */  0x00, 0x1A, 0xB8, 0x28, 0xC6, 0xE2, 0xB6, 0x46,  // ...(...F
                    /* 01C0 */  0xF6, 0xB8, 0xA5, 0xA8, 0xAF, 0x65, 0x2E, 0xE0,  // .....e..
                    /* 01C8 */  0x31, 0xBA, 0xC7, 0xB3, 0x9E, 0xBF, 0xA6, 0x05,  // 1.......
                    /* 01D0 */  0x61, 0xAC, 0xF1, 0x7C, 0x18, 0xE9, 0x73, 0x53,  // a..|..sS
                    /* 01D8 */  0xC7, 0x25, 0xA2, 0x90, 0xCE, 0x18, 0xAA, 0x77,  // .%.....w
                    /* 01E0 */  0xB8, 0xEC, 0x62, 0x2A, 0xFE, 0x36, 0xCB, 0x2A,  // ..b*.6.*
                    /* 01E8 */  0x2B, 0x55, 0xDC, 0xCF, 0x7E, 0x17, 0xAE, 0x27,  // +U..~..'
                    /* 01F0 */  0xBF, 0xF9, 0x26, 0x40, 0xAB, 0x30, 0x04, 0xEE,  // ..&@.0..
                    /* 01F8 */  0x0F, 0xAA, 0x46, 0xFE, 0xE3, 0x5B, 0x49, 0x7C,  // ..F..[I|
                    /* 0200 */  0xB7, 0xD6, 0xB8, 0xB3, 0x07, 0xA5, 0x64, 0x94,  // ......d.
                    /* 0208 */  0x01, 0xD3, 0x4A, 0x57, 0xEB, 0xC0, 0xBE, 0x0B,  // ..JW....
                    /* 0210 */  0x25, 0xB8, 0xC2, 0x01, 0x6A, 0x9B, 0xDA, 0x01,  // %...j...
                    /* 0218 */  0x68, 0x7B, 0x6B, 0x2B, 0x73, 0xBA, 0xB2, 0x21,  // h{k+s..!
                    /* 0220 */  0x6D, 0xC2, 0x0A, 0xDB, 0xA1, 0x37, 0xCE, 0x3B,  // m....7.;
                    /* 0228 */  0x4F, 0x85, 0x90, 0x0A, 0x51, 0xB7, 0x36, 0x84,  // O...Q.6.
                    /* 0230 */  0x4F, 0x55, 0xFD, 0x71, 0xB3, 0x69, 0x4E, 0x96,  // OU.q.iN.
                    /* 0238 */  0xE3, 0xDA, 0xA7, 0xCC, 0xD1, 0x4E, 0x33, 0x19,  // .....N3.
                    /* 0240 */  0x04, 0x06, 0x6F, 0x07, 0x44, 0x65, 0xD3, 0xF5,  // ..o.De..
                    /* 0248 */  0xF0, 0x79, 0x3D, 0x30, 0x89, 0xF7, 0x13, 0xF0,  // .y=0....
                    /* 0250 */  0x41, 0x5A, 0x83, 0x94, 0x64, 0xA6, 0x75, 0x21,  // AZ..d.u!
                    /* 0258 */  0x78, 0xA8, 0x04, 0x7B, 0x78, 0xC0, 0x8E, 0x3A,  // x..{x..:
                    /* 0260 */  0x5E, 0x71, 0xB8, 0x02, 0xA9, 0x5E, 0xF0, 0xE7,  // ^q...^..
                    /* 0268 */  0x6E, 0x00, 0x53, 0x24, 0xA7, 0x6A, 0x78, 0xC1,  // n.S$.jx.
                    /* 0270 */  0x74, 0x07, 0x8F, 0x41, 0xD7, 0x8D, 0x60, 0xF4,  // t..A..`.
                    /* 0278 */  0x52, 0x8A, 0x7C, 0xCC, 0xF4, 0x93, 0xE6, 0x83,  // R.|.....
                    /* 0280 */  0x9A, 0xB3, 0x77, 0xFC, 0xDE, 0xAF, 0x55, 0xAA,  // ..w...U.
                    /* 0288 */  0x59, 0x1A, 0xF2, 0xE0, 0xC2, 0x1D, 0x1F, 0x99,  // Y.......
                    /* 0290 */  0x09, 0x54, 0x94, 0xAA, 0x02, 0x3B, 0x40, 0x74,  // .T...;@t
                    /* 0298 */  0xE6, 0x7A, 0xBC, 0xB1, 0x96, 0xC2, 0x88, 0x9C,  // .z......
                    /* 02A0 */  0x69, 0x15, 0xA3, 0xAD, 0xD9, 0xE1, 0x2D, 0x0B,  // i.....-.
                    /* 02A8 */  0x34, 0xE4, 0xCA, 0x51, 0x08, 0x6B, 0x26, 0x72,  // 4..Q.k&r
                    /* 02B0 */  0x5B, 0xDC, 0xDA, 0x9D, 0x1F, 0x6B, 0xA2, 0x59,  // [....k.Y
                    /* 02B8 */  0xF3, 0x30, 0x8D, 0xC0, 0x27, 0x0A, 0xF4, 0x2C,  // .0..'..,
                    /* 02C0 */  0xEC, 0x1F, 0xF8, 0x8C, 0x32, 0xD7, 0xBA, 0x16,  // ....2...
                    /* 02C8 */  0x89, 0x4E, 0xBD, 0xF0, 0xFE, 0x82, 0x75, 0x6E,  // .N....un
                    /* 02D0 */  0x45, 0x24, 0x24, 0x73, 0xED, 0xB2, 0xFE, 0x06,  // E$$s....
                    /* 02D8 */  0xF5, 0x3A, 0xCF, 0x11, 0x65, 0x0D, 0xE0, 0xA9,  // .:..e...
                    /* 02E0 */  0xA4, 0x6B, 0x30, 0xF1, 0x44, 0x75, 0xD7, 0xCF,  // .k0.Du..
                    /* 02E8 */  0xCF, 0x39, 0x49, 0x91, 0xE6, 0x53, 0x33, 0xEF,  // .9I..S3.
                    /* 02F0 */  0x78, 0xB6, 0x66, 0x0B, 0x93, 0x49, 0x9C, 0x68,  // x.f..I.h
                    /* 02F8 */  0xA5, 0xFC, 0xC9, 0x4C, 0xDA, 0xB5, 0xAE, 0xF3,  // ...L....
                    /* 0300 */  0x2A, 0xD4, 0xAC, 0xA2, 0x14, 0xBD, 0xB8, 0x43,  // *......C
                    /* 0308 */  0x08, 0x6A, 0xC6, 0x37, 0x9F, 0x53, 0xD0, 0x70,  // .j.7.S.p
                    /* 0310 */  0xB7, 0x7D, 0xB0, 0x98, 0x94, 0x0E, 0x65, 0x3A,  // .}....e:
                    /* 0318 */  0x23, 0x8A, 0x94, 0xC6, 0xC5, 0x14, 0x51, 0xBF,  // #.....Q.
                    /* 0320 */  0x04, 0x4D, 0xE8, 0x33, 0x89, 0xF1, 0x68, 0x4E,  // .M.3..hN
                    /* 0328 */  0xD5, 0x7C, 0x21, 0x86, 0x98, 0x47, 0x26, 0xAB,  // .|!..G&.
                    /* 0330 */  0x43, 0xB4, 0xA3, 0xDD, 0xBC, 0xA4, 0xA5, 0xD0,  // C.......
                    /* 0338 */  0x79, 0x7C, 0x64, 0x0B, 0x38, 0x92, 0x14, 0x7D,  // y|d.8..}
                    /* 0340 */  0xE8, 0x5F, 0x14, 0xD7, 0xD4, 0x7C, 0x9C, 0x4E,  // ._...|.N
                    /* 0348 */  0x4F, 0xB2, 0x0A, 0x20, 0x88, 0x74, 0x4A, 0x7C,  // O.. .tJ|
                    /* 0350 */  0x8C, 0xCA, 0x7C, 0xD7, 0xCB, 0x44, 0x3C, 0x8D,  // ..|..D<.
                    /* 0358 */  0x4B, 0x2C, 0x3A, 0x37, 0x98, 0x0D, 0xFD, 0xCB,  // K,:7....
                    /* 0360 */  0xD9, 0x1A, 0x2F, 0x0D, 0xE4, 0x35, 0x8F, 0x1A,  // ../..5..
                    /* 0368 */  0x87, 0x16, 0xAC, 0xFC, 0x0E, 0xC1, 0xEF, 0x54,  // .......T
                    /* 0370 */  0xE3, 0x32, 0x3A, 0x20, 0x33, 0x83, 0xA3, 0x13,  // .2: 3...
                    /* 0378 */  0x2D, 0x6B, 0x1F, 0xBA, 0x5F, 0xC4, 0x7B, 0x9C,  // -k.._.{.
                    /* 0380 */  0xE7, 0xA0, 0xFB, 0x59, 0x52, 0xB8, 0x7A, 0xED,  // ...YR.z.
                    /* 0388 */  0xE2, 0x65, 0x65, 0x55, 0xAC, 0xA8, 0x8A, 0x2B,  // .eeU...+
                    /* 0390 */  0xDD, 0x3F, 0xE2, 0xA1, 0x4B, 0x17, 0xCF, 0x55,  // .?..K..U
                    /* 0398 */  0xDB, 0x67, 0xE1, 0xCF, 0x65, 0xA6, 0x05, 0x9C,  // .g..e...
                    /* 03A0 */  0x81, 0x1E, 0x76, 0xDB, 0x9B, 0x7F, 0xC5, 0x31,  // ..v....1
                    /* 03A8 */  0x74, 0x9C, 0x0C, 0x11, 0x35, 0xDB, 0xDB, 0x1A,  // t...5...
                    /* 03B0 */  0xDF, 0x39, 0xD5, 0xD4, 0x63, 0xAB, 0xE0, 0x47,  // .9..c..G
                    /* 03B8 */  0x04, 0x0A, 0xF0, 0xF5, 0xF0, 0xF1, 0x3D, 0x10,  // ......=.
                    /* 03C0 */  0xB9, 0xAB, 0xC0, 0xB2, 0x55, 0x93, 0x18, 0x91,  // ....U...
                    /* 03C8 */  0x8C, 0x92, 0x48, 0xCC, 0x4B, 0xBB, 0xD6, 0x7E,  // ..H.K..~
                    /* 03D0 */  0xF3, 0x36, 0xF2, 0x34, 0x94, 0x8E, 0xE9, 0x92,  // .6.4....
                    /* 03D8 */  0xD2, 0x23, 0xCD, 0x14, 0x52, 0xD8, 0x9E, 0xD8,  // .#..R...
                    /* 03E0 */  0xEC, 0xDE, 0xBE, 0xC3, 0xBB, 0x46, 0x9F, 0xE1,  // .....F..
                    /* 03E8 */  0xA1, 0x8D, 0x79, 0xF9, 0x10, 0xEF, 0xFA, 0x73,  // ..y....s
                    /* 03F0 */  0xBF, 0xE9, 0x8A, 0x2E, 0xD1, 0x7F, 0x4C, 0x42,  // ......LB
                    /* 03F8 */  0x58, 0x2E, 0x9F, 0x7C, 0x8E, 0x65, 0x70, 0x30,  // X..|.ep0
                    /* 0400 */  0x75, 0x18, 0x7C, 0xEA, 0x44, 0xC6, 0x5E, 0xE8,  // u.|.D.^.
                    /* 0408 */  0x79, 0xCB, 0x82, 0xD1, 0xDB, 0x9B, 0x71, 0x01,  // y.....q.
                    /* 0410 */  0xC5, 0x3E, 0x3F, 0x8C, 0x49, 0x81, 0xBF, 0xE7,  // .>?.I...
                    /* 0418 */  0x99, 0xCD, 0x76, 0x70, 0xC5, 0x55, 0x98, 0xAA,  // ..vp.U..
                    /* 0420 */  0x18, 0x0D, 0xE0, 0xC2, 0xA3, 0x72, 0xBA, 0x7E,  // .....r.~
                    /* 0428 */  0x7C, 0xE4, 0x72, 0xFC, 0xB3, 0x24, 0x2F, 0x23,  // |.r..$/#
                    /* 0430 */  0x83, 0xBD, 0x6F, 0x51, 0x7E, 0x02, 0x6D, 0x03,  // ..oQ~.m.
                    /* 0438 */  0x59, 0xC0, 0x2D, 0xC8, 0x27, 0x41, 0x80, 0xE1,  // Y.-.'A..
                    /* 0440 */  0x9F, 0x1C, 0xA5, 0x46, 0xCF, 0x26, 0xDC, 0xA8,  // ...F.&..
                    /* 0448 */  0x7E, 0x0D, 0x38, 0x93, 0xBD, 0x10, 0x18, 0xF4,  // ~.8.....
                    /* 0450 */  0x3D, 0x76, 0xFE, 0x15, 0x03, 0x0C, 0xE9, 0x4C,  // =v.....L
                    /* 0458 */  0x91, 0x0A, 0xB1, 0xA9, 0xB7, 0xE7, 0xE7, 0xEA,  // ........
                    /* 0460 */  0x5C, 0x88, 0x31, 0xFC, 0xF3, 0x91, 0xDE, 0x06,  // \.1.....
                    /* 0468 */  0x3D, 0xBF, 0x34, 0x36, 0xD0, 0x1D, 0x68, 0xF8,  // =.46..h.
                    /* 0470 */  0x37, 0x94, 0xFD, 0x2F, 0x2B, 0xFD, 0xAF, 0x69,  // 7../+..i
                    /* 0478 */  0x64, 0xE9, 0x8A, 0x52, 0x04, 0x05, 0xA6, 0xE9,  // d..R....
                    /* 0480 */  0x47, 0x07, 0x03, 0x0B, 0xD4, 0x46, 0x5D, 0x2B,  // G....F]+
                    /* 0488 */  0xAA, 0x5C, 0x6D, 0xFB, 0x91, 0x0B, 0x63, 0xC5,  // .\m...c.
                    /* 0490 */  0xC9, 0x48, 0x1A, 0x7A, 0x19, 0x73, 0x82, 0x2D,  // .H.z.s.-
                    /* 0498 */  0xC1, 0xFB, 0x26, 0xA9, 0x46, 0x71, 0xCA, 0xB0,  // ..&.Fq..
                    /* 04A0 */  0x89, 0x1E, 0x68, 0xE6, 0xC4, 0x93, 0x8E, 0x01,  // ..h.....
                    /* 04A8 */  0x09, 0x89, 0x82, 0x11, 0xC5, 0xA9, 0xF2, 0x4A,  // .......J
                    /* 04B0 */  0x75, 0x1F, 0x30, 0x64, 0x23, 0x0B, 0x28, 0x82,  // u.0d#.(.
                    /* 04B8 */  0x6A, 0x00, 0xCC, 0x84, 0x89, 0xF8, 0x94, 0xCF,  // j.......
                    /* 04C0 */  0x5E, 0x53, 0xCA, 0x04, 0x8D, 0x55, 0x1E, 0xA5,  // ^S...U..
                    /* 04C8 */  0x34, 0x5C, 0x9D, 0x57, 0x33, 0xF0, 0x06, 0xE5,  // 4\.W3...
                    /* 04D0 */  0xAC, 0x98, 0x51, 0x4A, 0xD6, 0x01, 0x02, 0x05,  // ..QJ....
                    /* 04D8 */  0x79, 0xAA, 0x56, 0xF6, 0xF0, 0xA1, 0xF9, 0xFF,  // y.V.....
                    /* 04E0 */  0x63, 0x2F, 0x3E, 0x3C, 0x2F, 0x73, 0xB8, 0xC7,  // c/></s..
                    /* 04E8 */  0x08, 0x54, 0x3D, 0xDC, 0xA3, 0x62, 0x5B, 0xEF,  // .T=..b[.
                    /* 04F0 */  0xF2, 0x18, 0xD7, 0x05, 0x64, 0xDB, 0x61, 0xC4,  // ....d.a.
                    /* 04F8 */  0x21, 0x16, 0x41, 0xF1, 0xD4, 0x74, 0xF3, 0xD6,  // !.A..t..
                    /* 0500 */  0xAA, 0x33, 0xD2, 0x97, 0x17, 0xA7, 0xA1, 0xD2,  // .3......
                    /* 0508 */  0xB1, 0x0E, 0xD9, 0x95, 0xFB, 0x9E, 0xF7, 0x81,  // ........
                    /* 0510 */  0x19, 0xC9, 0x2D, 0xAE, 0xC9, 0x4A, 0x8C, 0x5D,  // ..-..J.]
                    /* 0518 */  0x26, 0x1B, 0x2A, 0x24, 0x46, 0x85, 0xBE, 0x7A,  // &.*$F..z
                    /* 0520 */  0x41, 0xD0, 0x5A, 0xFD, 0x71, 0x47, 0xCF, 0xC0,  // A.Z.qG..
                    /* 0528 */  0xBA, 0x7A, 0xEC, 0x13, 0xDC, 0x3D, 0x7F, 0xFD,  // .z...=..
                    /* 0530 */  0x2D, 0x00, 0xDA, 0xB8, 0x21, 0x87, 0x95, 0x9A,  // -...!...
                    /* 0538 */  0xF5, 0xCB, 0xCB, 0xF9, 0xCB, 0x7B, 0xBB, 0x40,  // .....{.@
                    /* 0540 */  0xF2, 0xCA, 0xF6, 0xB4, 0x0A, 0xDF, 0x32, 0xF5,  // ......2.
                    /* 0548 */  0x52, 0x99, 0xF1, 0xC3, 0x22, 0x53, 0xC1, 0x4E,  // R..."S.N
                    /* 0550 */  0x96, 0xCA, 0xFB, 0xB7, 0xE7, 0xC7, 0xF8, 0x4B,  // .......K
                    /* 0558 */  0x4F, 0xDD, 0x78, 0xE0, 0x2B, 0xB1, 0x45, 0xDE,  // O.x.+.E.
                    /* 0560 */  0xDC, 0x7D, 0xA9, 0x3F, 0x1D, 0x45, 0xF1, 0x28,  // .}.?.E.(
                    /* 0568 */  0x91, 0x70, 0xF7, 0xC6, 0x21, 0xB6, 0x6D, 0xD9,  // .p..!.m.
                    /* 0570 */  0x05, 0x9C, 0x6D, 0xDC, 0x8E, 0x0D, 0xCB, 0x97,  // ..m.....
                    /* 0578 */  0x1F, 0x92, 0x05, 0xF0, 0xDA, 0xDB, 0xF0, 0x26,  // .......&
                    /* 0580 */  0x56, 0x03, 0xB4, 0x65, 0xD9, 0xEA, 0x4B, 0x1C,  // V..e..K.
                    /* 0588 */  0xB7, 0xBC, 0xA3, 0x3B, 0x56, 0xA5, 0x6E, 0xFC,  // ...;V.n.
                    /* 0590 */  0x71, 0x39, 0xCC, 0x38, 0x32, 0x6B, 0xED, 0x5D,  // q9.82k.]
                    /* 0598 */  0x08, 0xE7, 0x4B, 0x7C, 0xBD, 0xD9, 0x2F, 0x1A,  // ..K|../.
                    /* 05A0 */  0x81, 0x86, 0x1A, 0xED, 0xC8, 0x44, 0xD1, 0xA2,  // .....D..
                    /* 05A8 */  0x7E, 0x4D, 0x3B, 0x67, 0xD4, 0xFA, 0x14, 0xBA,  // ~M;g....
                    /* 05B0 */  0xDC, 0x1B, 0xF4, 0xD4, 0x13, 0x80, 0x4D, 0x1B,  // ......M.
                    /* 05B8 */  0x24, 0x7F, 0x2D, 0xB3, 0x4D, 0x27, 0xFD, 0xC3,  // $.-.M'..
                    /* 05C0 */  0xD2, 0xAD, 0x09, 0xB5, 0xFA, 0x06, 0x6E, 0xBA,  // ......n.
                    /* 05C8 */  0x20, 0xA3, 0x9C, 0x16, 0x2F, 0x78, 0x62, 0x99,  //  .../xb.
                    /* 05D0 */  0x11, 0x92, 0xA7, 0x38, 0x43, 0xD9, 0x5D, 0xE8,  // ...8C.].
                    /* 05D8 */  0x3B, 0x43, 0xE3, 0xD3, 0x12, 0x08, 0x36, 0xE1,  // ;C....6.
                    /* 05E0 */  0xA6, 0x21, 0xAF, 0xF4, 0xF3, 0x63, 0xEF, 0xE9,  // .!...c..
                    /* 05E8 */  0xBB, 0xE0, 0xDC, 0x55, 0xEF, 0x9C, 0xBA, 0xF7,  // ...U....
                    /* 05F0 */  0xD4, 0xFF, 0x51, 0xA6, 0x3A, 0xD8, 0x84, 0x7B,  // ..Q.:..{
                    /* 05F8 */  0x69, 0x30, 0xBF, 0x3F, 0x29, 0x47, 0x75, 0x9F,  // i0.?)Gu.
                    /* 0600 */  0xC3, 0xF4, 0x96, 0xF5, 0x8D, 0xB0, 0x5C, 0x5F,  // ......\_
                    /* 0608 */  0xE1, 0x36, 0x4A, 0x76, 0x7C, 0x1F, 0x1E, 0xF5,  // .6Jv|...
                    /* 0610 */  0x1E, 0xD2, 0x88, 0xF5, 0x0B, 0x3B, 0x5F, 0x04,  // .....;_.
                    /* 0618 */  0x17, 0x05, 0x9E, 0x16, 0xD0, 0xC0, 0xDE, 0x55,  // .......U
                    /* 0620 */  0x26, 0xEE, 0x9E, 0xB2, 0x4B, 0x9E, 0xCF, 0x1E,  // &...K...
                    /* 0628 */  0x01, 0x2C, 0x73, 0xDB, 0x87, 0x54, 0x8A, 0x0B,  // .,s..T..
                    /* 0630 */  0xD0, 0xC2, 0xC0, 0x5B, 0xB7, 0x73, 0xBE, 0x54,  // ...[.s.T
                    /* 0638 */  0x12, 0x37, 0xF2, 0x31, 0x9E, 0x76, 0x9B, 0xEF,  // .7.1.v..
                    /* 0640 */  0xEA, 0x6A, 0x93, 0xE9, 0x38, 0xAC, 0xAE, 0xE4,  // .j..8...
                    /* 0648 */  0x7A, 0x59, 0xF7, 0x45, 0xCE, 0xE1, 0x06, 0x9A,  // zY.E....
                    /* 0650 */  0xF2, 0x9C, 0x0F, 0xA1, 0xBC, 0x82, 0xBB, 0xE9,  // ........
                    /* 0658 */  0xC9, 0x5E, 0x3D, 0x2E, 0x0F, 0xEA, 0x62, 0x37,  // .^=...b7
                    /* 0660 */  0x4F, 0x4E, 0x2E, 0xDC, 0x12, 0x5E, 0x68, 0xC4,  // ON...^h.
                    /* 0668 */  0x99, 0xAA, 0x27, 0x25, 0xC5, 0xEB, 0x31, 0xEB,  // ..'%..1.
                    /* 0670 */  0xBB, 0xC2, 0x77, 0x81, 0x8F, 0xF5, 0x0D, 0x71,  // ..w....q
                    /* 0678 */  0x4C, 0x1C, 0xA7, 0xD5, 0xCD, 0x28, 0x33, 0x9C,  // L....(3.
                    /* 0680 */  0x76, 0xEB, 0x84, 0x11, 0xA9, 0x4C, 0xF2, 0x78,  // v....L.x
                    /* 0688 */  0x30, 0x5A, 0x78, 0xFB, 0x69, 0x5A, 0x9F, 0xB9,  // 0Zx.iZ..
                    /* 0690 */  0xFE, 0xB4, 0xE8, 0xB6, 0xBA, 0x5B, 0xC7, 0xA9,  // .....[..
                    /* 0698 */  0xE1, 0x1B, 0xD6, 0xAA, 0xBC, 0xCD, 0x0B, 0xF2,  // ........
                    /* 06A0 */  0x8A, 0x60, 0x09, 0x1C, 0x5E, 0x16, 0xC0, 0xD5,  // .`..^...
                    /* 06A8 */  0x37, 0x08, 0xD9, 0xAC, 0xB7, 0x19, 0xE2, 0xFD,  // 7.......
                    /* 06B0 */  0xE5, 0x76, 0x1C, 0xB4, 0x99, 0xDF, 0x0A, 0x84,  // .v......
                    /* 06B8 */  0x44, 0xDA, 0xBF, 0x24, 0xB5, 0x79, 0x94, 0x54,  // D..$.y.T
                    /* 06C0 */  0xB9, 0xF7, 0x98, 0x5A, 0x9E, 0xB9, 0xD1, 0x8E,  // ...Z....
                    /* 06C8 */  0x3F, 0x50, 0xE4, 0x3C, 0x7B, 0x57, 0x21, 0xC9,  // ?P.<{W!.
                    /* 06D0 */  0x5E, 0x32, 0x6B, 0x50, 0x2B, 0xB9, 0xA4, 0x05,  // ^2kP+...
                    /* 06D8 */  0xBD, 0xA2, 0x53, 0x36, 0x1B, 0x5F, 0x3E, 0x44,  // ..S6._>D
                    /* 06E0 */  0x95, 0x74, 0x6C, 0x07, 0x42, 0x9B, 0x67, 0x55,  // .tl.B.gU
                    /* 06E8 */  0xAC, 0x9A, 0x20, 0x50, 0x26, 0x60, 0x08, 0xFF,  // .. P&`..
                    /* 06F0 */  0x54, 0x95, 0xE9, 0x66, 0x27, 0xDA, 0x61, 0xF1,  // T..f'.a.
                    /* 06F8 */  0x31, 0x0D, 0x84, 0x1E, 0xCF, 0x8B, 0x82, 0xC3,  // 1.......
                    /* 0700 */  0x84, 0x4C, 0xE1, 0x71, 0x67, 0x58, 0x3E, 0x9C,  // .L.qgX>.
                    /* 0708 */  0xE1, 0xA5, 0xB0, 0xB7, 0x7D, 0x5D, 0x89, 0x13,  // ....}]..
                    /* 0710 */  0xBA, 0x2C, 0x36, 0x6F, 0xDC, 0xFF, 0x77, 0xA3,  // .,6o..w.
                    /* 0718 */  0x7E, 0x7B, 0x33, 0x86, 0x14, 0x18, 0xC1, 0x24,  // ~{3....$
                    /* 0720 */  0x1A, 0xFE, 0xEC, 0xB2, 0x01, 0x4F, 0x5A, 0x96,  // .....OZ.
                    /* 0728 */  0xC8, 0x4C, 0x27, 0xDA, 0x17, 0xEC, 0xFF, 0x1F,  // .L'.....
                    /* 0730 */  0x19, 0xCC, 0x93, 0x33, 0x20, 0xC5, 0xF9, 0xF8,  // ...3 ...
                    /* 0738 */  0x5E, 0x86, 0x32, 0xF1, 0x99, 0xB7, 0x69, 0x47,  // ^.2...iG
                    /* 0740 */  0xB8, 0x1E, 0x9F, 0x1E, 0xFD, 0xC6, 0xD1, 0x3D,  // .......=
                    /* 0748 */  0xDD, 0x5E, 0x3E, 0xC2, 0x1C, 0x67, 0x04, 0xD4,  // .^>..g..
                    /* 0750 */  0x7D, 0x36, 0xA1, 0xAB, 0xE7, 0xA0, 0xF6, 0x91,  // }6......
                    /* 0758 */  0x59, 0xE9, 0xE7, 0x8A, 0x9F, 0xCB, 0xA3, 0xF4,  // Y.......
                    /* 0760 */  0x6E, 0xE8, 0x52, 0x53, 0xE2, 0x60, 0xAE, 0x92,  // n.RS.`..
                    /* 0768 */  0x52, 0x00, 0x2E, 0x4C, 0x0D, 0x02, 0x77, 0x32,  // R..L..w2
                    /* 0770 */  0xAE, 0x9C, 0xF5, 0x0F, 0xED, 0x87, 0x9F, 0x4D,  // .......M
                    /* 0778 */  0x3F, 0x3B, 0x85, 0xAC, 0xC4, 0x66, 0x2F, 0x9B,  // ?;...f/.
                    /* 0780 */  0x0C, 0xA2, 0x95, 0xC4, 0x94, 0x38, 0xE6, 0xF2,  // .....8..
                    /* 0788 */  0x1D, 0xA9, 0x51, 0x47, 0xA9, 0xF3, 0xD4, 0x8F,  // ..QG....
                    /* 0790 */  0x16, 0x21, 0xF0, 0x6E, 0xDB, 0x34, 0x2F, 0xB0,  // .!.n.4/.
                    /* 0798 */  0x7A, 0x6F, 0x30, 0x2A, 0x24, 0xCA, 0x1E, 0x1B,  // zo0*$...
                    /* 07A0 */  0x2B, 0x23, 0xB0, 0x98, 0xBD, 0xD2, 0xBF, 0xFA,  // +#......
                    /* 07A8 */  0x15, 0xA0, 0xC2, 0x85, 0x7C, 0xFB, 0x18, 0x06,  // ....|...
                    /* 07B0 */  0x5F, 0x21, 0xCF, 0x2C, 0x5D, 0x0D, 0x03, 0xE5,  // _!.,]...
                    /* 07B8 */  0x3E, 0xCF, 0x7F, 0xA9, 0xE1, 0x05, 0x40, 0x35,  // >.....@5
                    /* 07C0 */  0x91, 0xE0, 0x2C, 0x8B, 0xDA, 0x4E, 0x4D, 0xB9,  // ..,..NM.
                    /* 07C8 */  0x8D, 0x10, 0x2D, 0x6D, 0xD6, 0xE2, 0xAB, 0x5F,  // ..-m..._
                    /* 07D0 */  0xDE, 0x0D, 0x42, 0x2F, 0xB5, 0xD6, 0xA3, 0x86,  // ..B/....
                    /* 07D8 */  0xE6, 0x28, 0xFE, 0x98, 0x76, 0x68, 0x3D, 0x25,  // .(..vh=%
                    /* 07E0 */  0x14, 0xE2, 0x13, 0x11, 0x62, 0x20, 0xF5, 0xC6,  // ....b ..
                    /* 07E8 */  0xCA, 0xAD, 0x61, 0xEF, 0x1D, 0x5E, 0xEC, 0xA5,  // ..a..^..
                    /* 07F0 */  0xD3, 0xC9, 0xF0, 0xBB, 0x73, 0xEF, 0xAA, 0x24,  // ....s..$
                    /* 07F8 */  0x3D, 0x48, 0xB8, 0x75, 0x4C, 0x87, 0x8B, 0x49,  // =H.uL..I
                    /* 0800 */  0x06, 0x4A, 0xA5, 0x69, 0x28, 0x9A, 0xC5, 0x5D,  // .J.i(..]
                    /* 0808 */  0x0C, 0xB7, 0x17, 0x52, 0xE2, 0xB7, 0x84, 0xC6,  // ...R....
                    /* 0810 */  0x3A, 0xC8, 0x29, 0xB9, 0x02, 0xB6, 0x22, 0xAA,  // :.)...".
                    /* 0818 */  0xB0, 0x56, 0xE2, 0x65, 0x4E, 0x2C, 0x0F, 0xF3,  // .V.eN,..
                    /* 0820 */  0x09, 0xB2, 0xDC, 0x28, 0xF7, 0x66, 0x97, 0x6E,  // ...(.f.n
                    /* 0828 */  0x4B, 0xFE, 0xD3, 0x50, 0x2F, 0xB6, 0x56, 0xCB,  // K..P/.V.
                    /* 0830 */  0xF9, 0x56, 0x59, 0x31, 0x77, 0xBC, 0x9C, 0xBA,  // .VY1w...
                    /* 0838 */  0x4A, 0x25, 0x35, 0xAE, 0x75, 0x01, 0xC9, 0x1C,  // J%5.u...
                    /* 0840 */  0xC5, 0x4D, 0x8A, 0xCF, 0x09, 0x79, 0xAA, 0xB6,  // .M...y..
                    /* 0848 */  0x80, 0xAF, 0x5F, 0x51, 0x98, 0xFA, 0x65, 0xD2,  // .._Q..e.
                    /* 0850 */  0x63, 0xCF, 0xC2, 0xED, 0xD2, 0x27, 0x8C, 0xBE,  // c....'..
                    /* 0858 */  0x27, 0x89, 0x7B, 0x42, 0x3D, 0x98, 0x96, 0x37,  // '.{B=..7
                    /* 0860 */  0x0A, 0x9C, 0x69, 0x63, 0x35, 0x9F, 0x46, 0x5E,  // ..ic5.F^
                    /* 0868 */  0xB6, 0x50, 0xF0, 0x51, 0x60, 0xC1, 0x5D, 0x8E,  // .P.Q`.].
                    /* 0870 */  0x16, 0x21, 0x67, 0xFC, 0x5E, 0x1D, 0xB1, 0xE6,  // .!g.^...
                    /* 0878 */  0x09, 0x47, 0x3C, 0x9A, 0xE9, 0x4D, 0x94, 0xCB,  // .G<..M..
                    /* 0880 */  0x7E, 0x67, 0x86, 0xBF, 0x52, 0x38, 0x84, 0x17,  // ~g..R8..
                    /* 0888 */  0xE8, 0xE9, 0x1E, 0xBB, 0xD5, 0x03, 0x1C, 0x7C,  // .......|
                    /* 0890 */  0xE9, 0xD3, 0xEF, 0x39, 0x15, 0x96, 0xD8, 0x3D,  // ...9...=
                    /* 0898 */  0x38, 0xBD, 0x5D, 0xA7, 0x9B, 0xCA, 0x97, 0x22,  // 8.]...."
                    /* 08A0 */  0x3C, 0x8B, 0x28, 0xD8, 0xFD, 0xDC, 0xFD, 0xF7,  // <.(.....
                    /* 08A8 */  0x62, 0x3E, 0xA7, 0xBA, 0x55, 0xA3, 0x60, 0x67,  // b>..U.`g
                    /* 08B0 */  0x1F, 0xA9, 0xB0, 0x0E, 0xFA, 0xA5, 0x13, 0x52,  // .......R
                    /* 08B8 */  0x3D, 0x77, 0x01, 0x84, 0x3F, 0x9C, 0x33, 0xC4,  // =w..?.3.
                    /* 08C0 */  0x98, 0x57, 0x1A, 0x4A, 0x06, 0x97, 0x90, 0xDD,  // .W.J....
                    /* 08C8 */  0x2B, 0xC3, 0xDE, 0x22, 0x83, 0x3E, 0x65, 0x63,  // +..".>ec
                    /* 08D0 */  0x57, 0x04, 0xBB, 0x8F, 0x3A, 0x2A, 0xE1, 0x21,  // W...:*.!
                    /* 08D8 */  0xBB, 0x4D, 0xCD, 0x6F, 0x0A, 0x8B, 0xCD, 0x34,  // .M.o...4
                    /* 08E0 */  0xD1, 0xC8, 0xC8, 0xEA, 0xE2, 0x10, 0x4C, 0x05,  // ......L.
                    /* 08E8 */  0xA7, 0x43, 0x9D, 0x13, 0x97, 0x9E, 0xAE, 0x41,  // .C.....A
                    /* 08F0 */  0xD6, 0x5A, 0xDA, 0xCE, 0x3B, 0x06, 0x32, 0x51,  // .Z..;.2Q
                    /* 08F8 */  0xA8, 0xCC, 0xB5, 0x97, 0xF2, 0x6D, 0xD7, 0x67,  // .....m.g
                    /* 0900 */  0xC5, 0x74, 0x47, 0xE9, 0x92, 0x95, 0x35, 0xD0,  // .tG...5.
                    /* 0908 */  0x45, 0x02, 0xFD, 0x67, 0xF5, 0xE3, 0xCF, 0x69,  // E..g...i
                    /* 0910 */  0xF3, 0x36, 0xFA, 0x30, 0xC7, 0x91, 0x6C, 0x01,  // .6.0..l.
                    /* 0918 */  0x61, 0xF4, 0x2B, 0x8F, 0x49, 0x58, 0xBB, 0x22,  // a.+.IX."
                    /* 0920 */  0x75, 0xBE, 0x8F, 0x74, 0x95, 0x04, 0xC5, 0x27,  // u..t...'
                    /* 0928 */  0xEE, 0x3C, 0x8F, 0xD9, 0xBC, 0xB2, 0x47, 0xA1,  // .<....G.
                    /* 0930 */  0x9E, 0x6F, 0x03, 0x2B, 0x7F, 0x64, 0x22, 0x9B,  // .o.+.d".
                    /* 0938 */  0x46, 0x64, 0x35, 0x20, 0x24, 0x67, 0x14, 0x7E,  // Fd5 $g.~
                    /* 0940 */  0x2A, 0x40, 0x99, 0x8A, 0x4E, 0x49, 0xF0, 0x43,  // *@..NI.C
                    /* 0948 */  0x50, 0x4F, 0xB6, 0xBC, 0x4D, 0x4F, 0xB9, 0xD3,  // PO..MO..
                    /* 0950 */  0xA0, 0x38, 0xC4, 0xE4, 0xE9, 0x72, 0xCF, 0x95,  // .8...r..
                    /* 0958 */  0xA8, 0x4D, 0x51, 0xB0, 0x9D, 0xC7, 0x02, 0x0C,  // .MQ.....
                    /* 0960 */  0x0E, 0x04, 0x23, 0x87, 0x40, 0x93, 0x42, 0x76,  // ..#.@.Bv
                    /* 0968 */  0x11, 0xD5, 0x94, 0x93, 0x8B, 0x77, 0xC0, 0x50,  // .....w.P
                    /* 0970 */  0x98, 0x73, 0xD4, 0xB0, 0xD6, 0xD9, 0x8B, 0xFF,  // .s......
                    /* 0978 */  0x36, 0x79, 0x9D, 0xB3, 0x39, 0xAB, 0x87, 0xA9,  // 6y..9...
                    /* 0980 */  0xBB, 0x26, 0x48, 0x09, 0xE7, 0x3F, 0x94, 0x0C,  // .&H..?..
                    /* 0988 */  0x29, 0x1C, 0x05, 0x09, 0xE3, 0xC8, 0xF2, 0x07,  // ).......
                    /* 0990 */  0x7E, 0xC2, 0x15, 0x4A, 0x45, 0xD8, 0x0C, 0x2A,  // ~..JE..*
                    /* 0998 */  0x1F, 0x59, 0xE5, 0x20, 0x4A, 0x45, 0xEB, 0xD1,  // .Y. JE..
                    /* 09A0 */  0x18, 0x9C, 0xB8, 0xD3, 0xB5, 0xDA, 0xAD, 0x77,  // .......w
                    /* 09A8 */  0x1F, 0x02, 0xF4, 0x79, 0x6F, 0xFE, 0x0A, 0xB2,  // ...yo...
                    /* 09B0 */  0xBC, 0xF6, 0xB6, 0xC0, 0x84, 0x3F, 0xA0, 0xA2,  // .....?..
                    /* 09B8 */  0xBA, 0x8B, 0xB9, 0x3B, 0x4C, 0x2A, 0x0B, 0xAB,  // ...;L*..
                    /* 09C0 */  0xC9, 0x3D, 0xE9, 0x04, 0x8F, 0x7D, 0x65, 0x90,  // .=...}e.
                    /* 09C8 */  0xD1, 0xF5, 0x7F, 0x18, 0x6B, 0x72, 0x09, 0x48,  // ....kr.H
                    /* 09D0 */  0x1B, 0x10, 0xE5, 0xE8, 0xA2, 0xD6, 0x86, 0x63,  // .......c
                    /* 09D8 */  0x43, 0xE1, 0xCA, 0x24, 0xF5, 0xC5, 0xFE, 0xEF,  // C..$....
                    /* 09E0 */  0x6D, 0xF1, 0xFD, 0xF3, 0x02, 0x6F, 0x6C, 0x34,  // m....ol4
                    /* 09E8 */  0xDE, 0xF0, 0x30, 0xF5, 0x53, 0xCB, 0x2F, 0x53,  // ..0.S./S
                    /* 09F0 */  0xB0, 0x63, 0xAF, 0x6C, 0x3B, 0x4C, 0xE7, 0x90,  // .c.l;L..
                    /* 09F8 */  0x74, 0xF1, 0xF0, 0x84, 0xAC, 0xAB, 0xCD, 0x6A,  // t......j
                    /* 0A00 */  0xED, 0xB1, 0x92, 0x51, 0x4A, 0x0E, 0x0E, 0xA7,  // ...QJ...
                    /* 0A08 */  0x92, 0x38, 0x8F, 0xE0, 0x02, 0xDC, 0x06, 0x0B,  // .8......
                    /* 0A10 */  0xDB, 0xBA, 0xAD, 0x12, 0x1A, 0xB3, 0x2E, 0x7D,  // .......}
                    /* 0A18 */  0x49, 0x91, 0x14, 0x92, 0xF2, 0xD9, 0xC6, 0x93,  // I.......
                    /* 0A20 */  0xC1, 0xCF, 0x74, 0xBF, 0x55, 0x27, 0x5E, 0x7F,  // ..t.U'^.
                    /* 0A28 */  0x59, 0x84, 0x5D, 0xCA, 0xDA, 0x50, 0xF4, 0x00,  // Y.]..P..
                    /* 0A30 */  0xA5, 0xC5, 0x6C, 0x4F, 0x16, 0x2B, 0x30, 0x82,  // ..lO.+0.
                    /* 0A38 */  0xFD, 0x7E, 0x70, 0xF0, 0x50, 0x1C, 0x0E, 0x63,  // .~p.P..c
                    /* 0A40 */  0x71, 0x01, 0xAA, 0x9F, 0x61, 0x50, 0xE7, 0xA1,  // q...aP..
                    /* 0A48 */  0x20, 0x73, 0x13, 0x23, 0x75, 0x4B, 0x00, 0xB3,  //  s.#uK..
                    /* 0A50 */  0x34, 0xB6, 0x36, 0xC2, 0x64, 0xB6, 0x6E, 0x65,  // 4.6.d.ne
                    /* 0A58 */  0x1D, 0xD1, 0x6A, 0x71, 0xC5, 0x00, 0x00         // ..jq...
                }
            })
            Name (DBD3, Package (0x01)
            {
                Buffer (0x0A4B)
                {
                    /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                    /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                    /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                    /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x08, 0xC9, 0xC7, 0x43,  // .......C
                    /* 0070 */  0x9E, 0xBA, 0xD6, 0x66, 0xF7, 0x5D, 0x6E, 0x53,  // ...f.]nS
                    /* 0078 */  0x90, 0xAA, 0x5E, 0x34, 0xE0, 0xBA, 0x03, 0x64,  // ..^4...d
                    /* 0080 */  0x74, 0xE0, 0x16, 0x2B, 0x3B, 0xD7, 0x7A, 0xC0,  // t..+;.z.
                    /* 0088 */  0xAC, 0xC9, 0xA0, 0x47, 0xB7, 0x09, 0x00, 0x00,  // ...G....
                    /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                    /* 0098 */  0x01, 0x3D, 0xD9, 0x00, 0x00, 0x00, 0x00, 0x00,  // .=......
                    /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                    /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                    /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                    /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                    /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                    /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x43, 0xF6, 0x06,  // u8...C..
                    /* 00D0 */  0xB3, 0xFB, 0xA6, 0xBD, 0x8C, 0xC9, 0x8D, 0x03,  // ........
                    /* 00D8 */  0x02, 0xD5, 0x86, 0xB5, 0x87, 0x8E, 0x7E, 0xA1,  // ......~.
                    /* 00E0 */  0x0B, 0xFB, 0x57, 0x34, 0x3A, 0x30, 0x81, 0xCE,  // ..W4:0..
                    /* 00E8 */  0x65, 0x5D, 0x44, 0xBC, 0x8F, 0x18, 0x43, 0xB9,  // e]D...C.
                    /* 00F0 */  0x8F, 0xFA, 0xA7, 0xF5, 0x0F, 0x8D, 0xD9, 0xF5,  // ........
                    /* 00F8 */  0x1F, 0x56, 0x50, 0x13, 0x8E, 0x0B, 0x2A, 0xE8,  // .VP...*.
                    /* 0100 */  0x83, 0x2D, 0x75, 0xCF, 0x0A, 0xA8, 0x80, 0xC1,  // .-u.....
                    /* 0108 */  0x19, 0x2C, 0x20, 0x93, 0x56, 0xC7, 0x54, 0x7C,  // ., .V.T|
                    /* 0110 */  0x68, 0x5E, 0xC6, 0x23, 0xB9, 0x4C, 0xA7, 0x85,  // h^.#.L..
                    /* 0118 */  0xFF, 0x9A, 0x52, 0x60, 0xAF, 0xEA, 0xFB, 0x00,  // ..R`....
                    /* 0120 */  0xF5, 0x8B, 0xCD, 0x40, 0x9B, 0x1E, 0x16, 0xB8,  // ...@....
                    /* 0128 */  0x33, 0xA3, 0x5B, 0x49, 0x99, 0xE8, 0xA1, 0x0A,  // 3.[I....
                    /* 0130 */  0x69, 0xE5, 0x91, 0x52, 0x45, 0x54, 0x58, 0xA8,  // i..RETX.
                    /* 0138 */  0x77, 0x01, 0xDA, 0xBA, 0xD6, 0x0E, 0xB2, 0x28,  // w......(
                    /* 0140 */  0xD5, 0x8D, 0x1D, 0xDD, 0xD8, 0xC6, 0xF5, 0xD4,  // ........
                    /* 0148 */  0x1F, 0x4A, 0x02, 0xB0, 0xB1, 0xE6, 0x0E, 0xCD,  // .J......
                    /* 0150 */  0xD9, 0xC8, 0x26, 0xF9, 0x46, 0xAB, 0xEA, 0x2F,  // ..&.F../
                    /* 0158 */  0x76, 0xD5, 0xB8, 0x75, 0xD5, 0x86, 0xC7, 0x33,  // v..u...3
                    /* 0160 */  0x35, 0x48, 0x5A, 0xC3, 0x87, 0x8C, 0xED, 0x15,  // 5HZ.....
                    /* 0168 */  0x30, 0xC5, 0x72, 0x14, 0x8B, 0x88, 0x63, 0x70,  // 0.r...cp
                    /* 0170 */  0x44, 0x17, 0xAA, 0x0B, 0xF1, 0x1F, 0x64, 0x6B,  // D.....dk
                    /* 0178 */  0xB7, 0xF0, 0x96, 0x51, 0x7D, 0x38, 0x0C, 0x58,  // ...Q}8.X
                    /* 0180 */  0x10, 0x52, 0x2E, 0x97, 0x8E, 0x7D, 0x1E, 0xA1,  // .R...}..
                    /* 0188 */  0xCC, 0x61, 0x64, 0x7C, 0x59, 0x3A, 0xE2, 0xD0,  // .ad|Y:..
                    /* 0190 */  0x4A, 0x5B, 0x98, 0x9C, 0x82, 0x3A, 0x90, 0xDE,  // J[...:..
                    /* 0198 */  0x3B, 0x91, 0x7C, 0xFC, 0xFC, 0x0E, 0x45, 0x1D,  // ;.|...E.
                    /* 01A0 */  0x03, 0x49, 0x89, 0x6E, 0x86, 0xF1, 0xBF, 0xD7,  // .I.n....
                    /* 01A8 */  0x03, 0x86, 0x64, 0x6F, 0x1F, 0x4C, 0x5F, 0x7A,  // ..do.L_z
                    /* 01B0 */  0x7C, 0x8F, 0xD2, 0x18, 0x19, 0xBD, 0xA4, 0x04,  // |.......
                    /* 01B8 */  0xB3, 0x1E, 0x6D, 0xEB, 0x24, 0x9F, 0x96, 0xBD,  // ..m.$...
                    /* 01C0 */  0xDB, 0x3B, 0xCA, 0xCF, 0x9A, 0x58, 0x92, 0xB7,  // .;...X..
                    /* 01C8 */  0xC8, 0x59, 0x86, 0xE5, 0x0D, 0xB5, 0x23, 0x82,  // .Y....#.
                    /* 01D0 */  0x5A, 0xEE, 0xB2, 0x84, 0x0D, 0x4E, 0xF0, 0x43,  // Z....N.C
                    /* 01D8 */  0x92, 0x3B, 0x47, 0x2A, 0x43, 0x0A, 0x07, 0x92,  // .;G*C...
                    /* 01E0 */  0x11, 0x70, 0x2C, 0x86, 0xB2, 0x64, 0x4D, 0xF8,  // .p,..dM.
                    /* 01E8 */  0xC9, 0xA8, 0x6B, 0x24, 0x31, 0xF0, 0xF6, 0x2F,  // ..k$1../
                    /* 01F0 */  0x5F, 0xBB, 0x4C, 0x09, 0xD6, 0x5E, 0xC9, 0xD5,  // _.L..^..
                    /* 01F8 */  0x8C, 0x1B, 0xBB, 0x13, 0x09, 0x1E, 0x19, 0x48,  // .......H
                    /* 0200 */  0xB6, 0x71, 0x54, 0xBB, 0x37, 0x0C, 0x5F, 0x5D,  // .qT.7._]
                    /* 0208 */  0x5A, 0x15, 0x89, 0xE5, 0xC1, 0x67, 0x7D, 0x84,  // Z....g}.
                    /* 0210 */  0xB7, 0x17, 0x99, 0x41, 0x40, 0xBA, 0x36, 0xE1,  // ...A@.6.
                    /* 0218 */  0x5B, 0x10, 0x83, 0xD9, 0x60, 0x47, 0x89, 0x39,  // [...`G.9
                    /* 0220 */  0x4F, 0x9B, 0xAD, 0xCA, 0x60, 0xDB, 0xE2, 0xFF,  // O...`...
                    /* 0228 */  0x15, 0xE0, 0x79, 0x7D, 0x0B, 0xB8, 0xCD, 0x07,  // ..y}....
                    /* 0230 */  0x2A, 0x23, 0xD9, 0xF4, 0x0D, 0x60, 0x11, 0xA9,  // *#...`..
                    /* 0238 */  0xF1, 0x83, 0x5D, 0xCF, 0xB2, 0xE1, 0x2B, 0x93,  // ..]...+.
                    /* 0240 */  0x1E, 0x05, 0xCA, 0xE9, 0x0F, 0xF8, 0x61, 0x6F,  // ......ao
                    /* 0248 */  0xA7, 0xC4, 0x51, 0x92, 0xE5, 0x06, 0xF9, 0x7B,  // ..Q....{
                    /* 0250 */  0xBD, 0xA2, 0x85, 0x72, 0x3B, 0x29, 0x86, 0x88,  // ...r;)..
                    /* 0258 */  0x26, 0xF9, 0xCC, 0xD8, 0x5A, 0xFD, 0x16, 0x18,  // &...Z...
                    /* 0260 */  0xE6, 0x98, 0xAD, 0xFC, 0x5D, 0x61, 0x79, 0xBA,  // ....]ay.
                    /* 0268 */  0x76, 0xEE, 0x94, 0x7D, 0xBB, 0xA5, 0xD6, 0x49,  // v..}...I
                    /* 0270 */  0xA6, 0x4D, 0xA9, 0xDF, 0x18, 0x21, 0x72, 0xD5,  // .M...!r.
                    /* 0278 */  0x0B, 0xF0, 0x80, 0x8B, 0x32, 0xC6, 0x6A, 0x52,  // ....2.jR
                    /* 0280 */  0x8F, 0x61, 0x7C, 0x2E, 0x84, 0x2E, 0x07, 0x0B,  // .a|.....
                    /* 0288 */  0x3A, 0x17, 0x27, 0x00, 0x4F, 0x5F, 0xC0, 0x41,  // :.'.O_.A
                    /* 0290 */  0x68, 0x9C, 0x86, 0xA4, 0x92, 0xCC, 0x9F, 0x9F,  // h.......
                    /* 0298 */  0xE3, 0x94, 0x92, 0x49, 0x1A, 0xA7, 0x8D, 0x99,  // ...I....
                    /* 02A0 */  0x23, 0x26, 0x22, 0x83, 0xD6, 0xCC, 0x88, 0xA0,  // #&".....
                    /* 02A8 */  0xE5, 0x5F, 0xE3, 0x09, 0xC3, 0x7A, 0x72, 0x90,  // ._...zr.
                    /* 02B0 */  0x36, 0xB5, 0x0C, 0x91, 0x7A, 0xAD, 0xD5, 0x8F,  // 6...z...
                    /* 02B8 */  0x93, 0x14, 0x93, 0x9B, 0x37, 0xA6, 0x5F, 0x6A,  // ....7._j
                    /* 02C0 */  0x37, 0x38, 0x2B, 0xC4, 0x70, 0xC1, 0xC1, 0x6A,  // 78+.p..j
                    /* 02C8 */  0xC6, 0x34, 0x69, 0x4C, 0xAF, 0x73, 0x43, 0x76,  // .4iL.sCv
                    /* 02D0 */  0xD0, 0x1A, 0xAB, 0x55, 0xF9, 0x67, 0xB6, 0xBB,  // ...U.g..
                    /* 02D8 */  0x56, 0x9A, 0x5F, 0xE4, 0xAC, 0x8D, 0x4C, 0x38,  // V._...L8
                    /* 02E0 */  0xD4, 0xC0, 0xA6, 0x80, 0x26, 0xC8, 0x05, 0x5C,  // ....&..\
                    /* 02E8 */  0x7B, 0xC5, 0xB8, 0xBE, 0xED, 0x98, 0xE8, 0xCB,  // {.......
                    /* 02F0 */  0xCD, 0x89, 0x19, 0x49, 0x59, 0xBA, 0x9F, 0x23,  // ...IY..#
                    /* 02F8 */  0x08, 0x42, 0x36, 0x6D, 0x48, 0x65, 0xA4, 0x10,  // .B6mHe..
                    /* 0300 */  0x91, 0x67, 0xB4, 0xB7, 0x84, 0xCA, 0x3B, 0x74,  // .g....;t
                    /* 0308 */  0x18, 0xD6, 0x3D, 0xA3, 0xE1, 0xEB, 0x1B, 0xBB,  // ..=.....
                    /* 0310 */  0xBF, 0xBB, 0x41, 0xC7, 0xED, 0xB7, 0x23, 0x25,  // ..A...#%
                    /* 0318 */  0x87, 0xE3, 0xA5, 0x90, 0x83, 0xE3, 0xF9, 0x93,  // ........
                    /* 0320 */  0x9C, 0x6B, 0x13, 0x49, 0x2B, 0xB8, 0xFA, 0x18,  // .k.I+...
                    /* 0328 */  0xAB, 0xB7, 0x68, 0x1B, 0x61, 0x15, 0x54, 0x54,  // ..h.a.TT
                    /* 0330 */  0xE2, 0x8D, 0xBD, 0x12, 0x3C, 0xB6, 0xF2, 0xF2,  // ....<...
                    /* 0338 */  0x5B, 0x95, 0x8E, 0x25, 0x12, 0x23, 0x73, 0x01,  // [..%.#s.
                    /* 0340 */  0x78, 0x25, 0x14, 0x6E, 0x32, 0xA4, 0x3B, 0x90,  // x%.n2.;.
                    /* 0348 */  0x21, 0x02, 0xB7, 0xB6, 0x78, 0x4C, 0xB8, 0x11,  // !...xL..
                    /* 0350 */  0xFF, 0xEF, 0xC6, 0x9C, 0x57, 0xE6, 0x6F, 0xF2,  // ....W.o.
                    /* 0358 */  0x57, 0x6E, 0xC0, 0x73, 0xF2, 0xDD, 0xE2, 0xCE,  // Wn.s....
                    /* 0360 */  0x00, 0x54, 0xFD, 0x8F, 0xDC, 0x47, 0x24, 0x11,  // .T...G$.
                    /* 0368 */  0x53, 0x4F, 0xA5, 0x84, 0x91, 0xC6, 0xFF, 0xC5,  // SO......
                    /* 0370 */  0x52, 0x94, 0x83, 0x19, 0x0C, 0xEC, 0xF5, 0x63,  // R......c
                    /* 0378 */  0xB0, 0x43, 0x98, 0x60, 0x48, 0xB3, 0x4A, 0x71,  // .C.`H.Jq
                    /* 0380 */  0x8F, 0x38, 0xD8, 0x0D, 0x29, 0x25, 0xFC, 0x1D,  // .8..)%..
                    /* 0388 */  0xA9, 0xD5, 0x09, 0x0C, 0xEF, 0x61, 0x9B, 0xAA,  // .....a..
                    /* 0390 */  0xBA, 0xDC, 0xC9, 0x6C, 0x9C, 0x5C, 0x7D, 0x8E,  // ...l.\}.
                    /* 0398 */  0x8C, 0xB1, 0xAB, 0x6C, 0x62, 0x25, 0x04, 0x84,  // ...lb%..
                    /* 03A0 */  0x45, 0x32, 0xB8, 0x9A, 0x0B, 0xA2, 0x8B, 0x74,  // E2.....t
                    /* 03A8 */  0x71, 0xC2, 0xD5, 0x1D, 0x18, 0x38, 0x13, 0x89,  // q....8..
                    /* 03B0 */  0x68, 0xBE, 0x31, 0x98, 0x4B, 0xC6, 0x0E, 0x8A,  // h.1.K...
                    /* 03B8 */  0x80, 0x9F, 0xE0, 0x01, 0xF7, 0xD7, 0xBD, 0x24,  // .......$
                    /* 03C0 */  0x69, 0x27, 0x67, 0x54, 0xD4, 0xA3, 0x91, 0xCA,  // i'gT....
                    /* 03C8 */  0xBF, 0x1B, 0xB6, 0x52, 0x75, 0x52, 0xDE, 0x01,  // ...RuR..
                    /* 03D0 */  0x66, 0x7F, 0x2C, 0x1A, 0x6C, 0xA8, 0xB7, 0x7D,  // f.,.l..}
                    /* 03D8 */  0xF0, 0xF1, 0x64, 0x27, 0xF3, 0x3F, 0xE2, 0x93,  // ..d'.?..
                    /* 03E0 */  0x01, 0xEE, 0x2C, 0x87, 0xB5, 0x1D, 0xEF, 0x27,  // ..,....'
                    /* 03E8 */  0x03, 0x97, 0xA9, 0x0D, 0x24, 0x1B, 0x69, 0xA4,  // ....$.i.
                    /* 03F0 */  0x26, 0x33, 0xCC, 0xB4, 0x27, 0x1A, 0xC7, 0x04,  // &3..'...
                    /* 03F8 */  0x98, 0xB2, 0x19, 0x7B, 0xA1, 0x0E, 0xC7, 0x91,  // ...{....
                    /* 0400 */  0x26, 0xB1, 0x29, 0xB7, 0x6E, 0xD5, 0x34, 0x51,  // &.).n.4Q
                    /* 0408 */  0xA5, 0x4B, 0x47, 0x6A, 0x47, 0x53, 0x2B, 0x49,  // .KGjGS+I
                    /* 0410 */  0x33, 0xA7, 0x2A, 0xC8, 0xF5, 0x86, 0xEC, 0x4B,  // 3.*....K
                    /* 0418 */  0x1C, 0x17, 0x0A, 0x24, 0xB9, 0x62, 0xA4, 0x25,  // ...$.b.%
                    /* 0420 */  0x2D, 0x19, 0xC7, 0x43, 0xAE, 0x6B, 0x86, 0x5A,  // -..C.k.Z
                    /* 0428 */  0x77, 0x15, 0x68, 0xD8, 0x16, 0x07, 0xC6, 0x07,  // w.h.....
                    /* 0430 */  0x60, 0x48, 0x16, 0x8B, 0x30, 0x1B, 0x6B, 0x21,  // `H..0.k!
                    /* 0438 */  0x4E, 0x63, 0x65, 0x7A, 0x95, 0xBB, 0x37, 0x75,  // Ncez..7u
                    /* 0440 */  0x2C, 0x08, 0x25, 0x1E, 0x24, 0xBB, 0x56, 0xBC,  // ,.%.$.V.
                    /* 0448 */  0xC3, 0x6D, 0x76, 0x1E, 0xA1, 0xBD, 0x4D, 0xC7,  // .mv...M.
                    /* 0450 */  0xFA, 0xA2, 0xDD, 0x74, 0x40, 0x0D, 0xC5, 0xFE,  // ...t@...
                    /* 0458 */  0x95, 0xD8, 0xC5, 0xF5, 0x20, 0x99, 0x08, 0xA3,  // .... ...
                    /* 0460 */  0x8E, 0x85, 0x71, 0x18, 0xAC, 0x97, 0x9E, 0x53,  // ..q....S
                    /* 0468 */  0x37, 0x34, 0x46, 0xB6, 0x67, 0x4B, 0x72, 0x30,  // 74F.gKr0
                    /* 0470 */  0x29, 0xB5, 0xFE, 0x8A, 0xAF, 0xEE, 0x9C, 0x9F,  // ).......
                    /* 0478 */  0x7D, 0x3B, 0x99, 0x68, 0x26, 0xF5, 0xE0, 0x43,  // };.h&..C
                    /* 0480 */  0x0D, 0xCA, 0x04, 0xB0, 0xAD, 0xF2, 0x9B, 0xFA,  // ........
                    /* 0488 */  0x65, 0x26, 0xB3, 0x1F, 0x15, 0xC3, 0xB5, 0x3F,  // e&.....?
                    /* 0490 */  0x3A, 0x67, 0x8D, 0xF8, 0x46, 0x58, 0xD0, 0x83,  // :g..FX..
                    /* 0498 */  0x75, 0x1D, 0xFB, 0x26, 0x49, 0xB7, 0x08, 0x6C,  // u..&I..l
                    /* 04A0 */  0x5E, 0x82, 0xCF, 0x04, 0x9D, 0x6B, 0xD3, 0x4E,  // ^....k.N
                    /* 04A8 */  0x2D, 0x8A, 0xB0, 0xB0, 0xEE, 0xBC, 0x30, 0xE4,  // -.....0.
                    /* 04B0 */  0xE6, 0x42, 0x34, 0x35, 0x19, 0xD4, 0xBF, 0xE5,  // .B45....
                    /* 04B8 */  0x52, 0x01, 0x88, 0x95, 0x82, 0x2D, 0xE6, 0xB2,  // R....-..
                    /* 04C0 */  0x07, 0x28, 0xE5, 0x20, 0x26, 0xD4, 0xFC, 0xE5,  // .(. &...
                    /* 04C8 */  0x03, 0x77, 0xFF, 0xCD, 0xD7, 0x02, 0x99, 0x6A,  // .w.....j
                    /* 04D0 */  0xBE, 0xD1, 0x9B, 0xC4, 0xCA, 0x62, 0x04, 0x5B,  // .....b.[
                    /* 04D8 */  0xE8, 0x71, 0xFD, 0xB2, 0xCA, 0x7A, 0x4E, 0x2D,  // .q...zN-
                    /* 04E0 */  0xF9, 0x19, 0xE3, 0x51, 0xCB, 0xEF, 0xC2, 0x45,  // ...Q...E
                    /* 04E8 */  0x72, 0xB1, 0xBA, 0x7E, 0xED, 0x24, 0x41, 0xBF,  // r..~.$A.
                    /* 04F0 */  0x88, 0x0E, 0xD1, 0x8A, 0x37, 0xDC, 0x55, 0x00,  // ....7.U.
                    /* 04F8 */  0x43, 0xA1, 0x3C, 0x2F, 0x5E, 0xAF, 0xB6, 0x25,  // C.</^..%
                    /* 0500 */  0x52, 0xB6, 0xB9, 0xBD, 0xC2, 0x5A, 0x2D, 0xAA,  // R....Z-.
                    /* 0508 */  0xDF, 0x6C, 0x7B, 0x7B, 0x9D, 0x6D, 0x23, 0x18,  // .l{{.m#.
                    /* 0510 */  0x60, 0x05, 0x05, 0x02, 0x25, 0x45, 0x44, 0xD6,  // `...%ED.
                    /* 0518 */  0x87, 0x5B, 0xC2, 0x6E, 0xFE, 0xB1, 0xC7, 0xE2,  // .[.n....
                    /* 0520 */  0x49, 0x3D, 0x06, 0xB8, 0xDB, 0x5F, 0xCF, 0x0B,  // I=..._..
                    /* 0528 */  0xE2, 0x11, 0x3A, 0x6A, 0xAD, 0x81, 0x90, 0xB2,  // ..:j....
                    /* 0530 */  0x9E, 0x8F, 0x11, 0x3E, 0x84, 0xEE, 0x95, 0x1B,  // ...>....
                    /* 0538 */  0x34, 0x27, 0x4D, 0xFD, 0xAD, 0xE1, 0x29, 0x8C,  // 4'M...).
                    /* 0540 */  0x02, 0x5A, 0xA5, 0x02, 0x0C, 0xA0, 0x9C, 0x3A,  // .Z.....:
                    /* 0548 */  0xFA, 0xA9, 0xFC, 0x4F, 0x28, 0xD6, 0x53, 0xDC,  // ...O(.S.
                    /* 0550 */  0x09, 0x47, 0x25, 0x6C, 0xD1, 0xD1, 0x97, 0xB0,  // .G%l....
                    /* 0558 */  0x98, 0x49, 0xA2, 0x40, 0xC0, 0x2C, 0x58, 0x98,  // .I.@.,X.
                    /* 0560 */  0xEB, 0x95, 0xDA, 0xDA, 0x0C, 0xAA, 0xF6, 0xB4,  // ........
                    /* 0568 */  0xD9, 0x94, 0xCB, 0xF7, 0x49, 0x72, 0x94, 0xF2,  // ....Ir..
                    /* 0570 */  0xA8, 0xF0, 0xEC, 0xBE, 0xEF, 0xC1, 0xBC, 0x60,  // .......`
                    /* 0578 */  0x7F, 0x08, 0x3E, 0x02, 0x23, 0x66, 0x86, 0xB1,  // ..>.#f..
                    /* 0580 */  0x44, 0xF6, 0x51, 0xBF, 0x72, 0x24, 0x4D, 0x91,  // D.Q.r$M.
                    /* 0588 */  0xF3, 0xC4, 0xA6, 0xE8, 0x2C, 0xF1, 0x4F, 0x41,  // ....,.OA
                    /* 0590 */  0x7B, 0xBC, 0xF5, 0x27, 0xF2, 0x0D, 0x47, 0x7C,  // {..'..G|
                    /* 0598 */  0x73, 0x22, 0xF4, 0x47, 0xF4, 0x83, 0x9A, 0x0F,  // s".G....
                    /* 05A0 */  0xAA, 0xEB, 0x5E, 0x35, 0x17, 0x5F, 0xE5, 0x49,  // ..^5._.I
                    /* 05A8 */  0x94, 0x83, 0x66, 0xD3, 0x9E, 0x26, 0xD1, 0xBF,  // ..f..&..
                    /* 05B0 */  0xE9, 0x15, 0xF4, 0xAD, 0xDA, 0xBA, 0x09, 0x6C,  // .......l
                    /* 05B8 */  0x87, 0x1F, 0x13, 0x9F, 0x00, 0xCA, 0xC4, 0xFB,  // ........
                    /* 05C0 */  0x61, 0xF1, 0x0F, 0x44, 0x52, 0x7F, 0x97, 0x48,  // a..DR..H
                    /* 05C8 */  0x83, 0x7B, 0x1D, 0xE9, 0xBC, 0xCD, 0xBE, 0xB5,  // .{......
                    /* 05D0 */  0x30, 0x37, 0x78, 0xBA, 0xDB, 0xE0, 0x85, 0xC8,  // 07x.....
                    /* 05D8 */  0x2C, 0xD2, 0x90, 0xDE, 0x95, 0x01, 0x68, 0x39,  // ,.....h9
                    /* 05E0 */  0x46, 0xC0, 0x4D, 0x78, 0xB2, 0x7C, 0xCF, 0x47,  // F.Mx.|.G
                    /* 05E8 */  0xC3, 0x00, 0x5A, 0xF8, 0x50, 0xD6, 0x30, 0x82,  // ..Z.P.0.
                    /* 05F0 */  0xC5, 0x04, 0xFE, 0x03, 0x60, 0xB6, 0x91, 0xBB,  // ....`...
                    /* 05F8 */  0xBF, 0x2A, 0xAE, 0x40, 0xD3, 0xD3, 0xBB, 0x45,  // .*.@...E
                    /* 0600 */  0xF2, 0xBA, 0x2D, 0x6A, 0x18, 0xDD, 0x16, 0x05,  // ..-j....
                    /* 0608 */  0x56, 0x2F, 0x2F, 0xBE, 0xA9, 0x6B, 0x58, 0x55,  // V//..kXU
                    /* 0610 */  0x13, 0xF3, 0x57, 0x66, 0xE3, 0x82, 0xD8, 0x41,  // ..Wf...A
                    /* 0618 */  0x8A, 0x06, 0x4B, 0x11, 0x31, 0xB6, 0xA8, 0x4E,  // ..K.1..N
                    /* 0620 */  0x93, 0xF3, 0x80, 0x19, 0xFB, 0x42, 0xC0, 0xE3,  // .....B..
                    /* 0628 */  0xE6, 0xEF, 0x52, 0x9F, 0x9E, 0x2C, 0x3B, 0xEC,  // ..R..,;.
                    /* 0630 */  0xAD, 0xCE, 0xAE, 0xD0, 0x35, 0x70, 0x3B, 0x53,  // ....5p;S
                    /* 0638 */  0x2C, 0x5F, 0xA2, 0xF9, 0xAA, 0xA1, 0xAB, 0x4A,  // ,_.....J
                    /* 0640 */  0xDB, 0x87, 0xE4, 0x66, 0xF7, 0xA2, 0x7D, 0x75,  // ...f..}u
                    /* 0648 */  0x79, 0x1C, 0x51, 0x59, 0xA8, 0x23, 0xD8, 0x43,  // y.QY.#.C
                    /* 0650 */  0x2C, 0x90, 0x12, 0xA5, 0xED, 0x9B, 0xE9, 0x8A,  // ,.......
                    /* 0658 */  0x96, 0x0E, 0x18, 0x32, 0x5A, 0xD2, 0xC8, 0xB1,  // ...2Z...
                    /* 0660 */  0x13, 0x83, 0x2C, 0x6B, 0xAF, 0x0D, 0x95, 0x6F,  // ..,k...o
                    /* 0668 */  0x1C, 0x22, 0xA8, 0x6F, 0xC9, 0x4D, 0x13, 0xA9,  // .".o.M..
                    /* 0670 */  0x9F, 0xC9, 0x38, 0x90, 0x1A, 0xAC, 0x57, 0x86,  // ..8...W.
                    /* 0678 */  0x6A, 0xBA, 0xCB, 0x7E, 0xBF, 0xA7, 0x6E, 0xC0,  // j..~..n.
                    /* 0680 */  0x1A, 0xD3, 0x46, 0x05, 0xE7, 0x0E, 0x93, 0x69,  // ..F....i
                    /* 0688 */  0xCF, 0x17, 0xE9, 0xC2, 0x8B, 0x64, 0xE6, 0x41,  // .....d.A
                    /* 0690 */  0xCB, 0x51, 0x8F, 0xAE, 0x50, 0xA3, 0xD2, 0x0E,  // .Q..P...
                    /* 0698 */  0xFE, 0x0C, 0x95, 0xE8, 0x29, 0x25, 0xA7, 0x7E,  // ....)%.~
                    /* 06A0 */  0xE8, 0x93, 0x00, 0x9A, 0x11, 0xE9, 0x80, 0xF2,  // ........
                    /* 06A8 */  0x56, 0x39, 0x62, 0xF4, 0xE4, 0x47, 0x99, 0xB4,  // V9b..G..
                    /* 06B0 */  0xF8, 0xAB, 0xDD, 0x9E, 0xD9, 0x04, 0xDA, 0xF6,  // ........
                    /* 06B8 */  0x6E, 0x39, 0xF1, 0xC2, 0x4F, 0x79, 0x03, 0x25,  // n9..Oy.%
                    /* 06C0 */  0x0C, 0x3A, 0x60, 0x1D, 0x03, 0x2D, 0xE6, 0xB6,  // .:`..-..
                    /* 06C8 */  0x39, 0xC8, 0xFA, 0x77, 0x8F, 0xFD, 0xC4, 0x25,  // 9..w...%
                    /* 06D0 */  0x08, 0x5A, 0x30, 0x13, 0x8E, 0x28, 0xC8, 0x0C,  // .Z0..(..
                    /* 06D8 */  0x51, 0x35, 0xBE, 0x78, 0xA2, 0x3D, 0xA8, 0x26,  // Q5.x.=.&
                    /* 06E0 */  0xB5, 0x1C, 0xE4, 0xFB, 0x57, 0xF6, 0xC4, 0x3D,  // ....W..=
                    /* 06E8 */  0x39, 0xFC, 0x45, 0x7E, 0x12, 0x8D, 0x79, 0x89,  // 9.E~..y.
                    /* 06F0 */  0x33, 0xAB, 0x43, 0xD8, 0x12, 0x14, 0x19, 0xAA,  // 3.C.....
                    /* 06F8 */  0x17, 0xB3, 0xD9, 0xCB, 0x4E, 0x88, 0x8D, 0xDF,  // ....N...
                    /* 0700 */  0x8E, 0xA8, 0x7D, 0xB4, 0xE1, 0xD1, 0xD7, 0xBE,  // ..}.....
                    /* 0708 */  0xD3, 0x1A, 0xA3, 0x08, 0x38, 0xBD, 0xDD, 0x0B,  // ....8...
                    /* 0710 */  0x4B, 0xEF, 0x98, 0x61, 0x2A, 0xC8, 0x89, 0x57,  // K..a*..W
                    /* 0718 */  0x54, 0xCD, 0xE7, 0xC8, 0x23, 0x7A, 0x75, 0x9B,  // T...#zu.
                    /* 0720 */  0x72, 0x4D, 0xB2, 0xAA, 0x18, 0x56, 0x32, 0x8B,  // rM...V2.
                    /* 0728 */  0x62, 0x67, 0x75, 0x95, 0x2F, 0x7E, 0x3A, 0x96,  // bgu./~:.
                    /* 0730 */  0x3A, 0xE9, 0x04, 0x26, 0xBD, 0xE6, 0x25, 0xA4,  // :..&..%.
                    /* 0738 */  0x08, 0x73, 0x33, 0x76, 0x39, 0xD8, 0x82, 0x6D,  // .s3v9..m
                    /* 0740 */  0x1F, 0xD4, 0x89, 0xE7, 0xE6, 0xE6, 0xC3, 0x5D,  // .......]
                    /* 0748 */  0x49, 0x64, 0xDC, 0xF8, 0x2F, 0x0D, 0x7B, 0x30,  // Id../.{0
                    /* 0750 */  0x86, 0x15, 0x56, 0x9C, 0x41, 0xB2, 0x9D, 0x9C,  // ..V.A...
                    /* 0758 */  0x93, 0x79, 0x75, 0x52, 0x48, 0x70, 0xE5, 0xE6,  // .yuRHp..
                    /* 0760 */  0xC6, 0x77, 0xE9, 0xF5, 0x7F, 0xAD, 0xE9, 0x50,  // .w.....P
                    /* 0768 */  0xDF, 0xCB, 0xD2, 0xB4, 0x78, 0xC7, 0x46, 0x74,  // ....x.Ft
                    /* 0770 */  0xFE, 0x63, 0xEB, 0x45, 0x09, 0x53, 0x0A, 0x88,  // .c.E.S..
                    /* 0778 */  0x0D, 0x2E, 0x03, 0x04, 0xD0, 0x44, 0xFB, 0x5A,  // .....D.Z
                    /* 0780 */  0xD9, 0xD4, 0xE0, 0x95, 0xCB, 0xA7, 0xE9, 0xCD,  // ........
                    /* 0788 */  0x82, 0xF2, 0xC0, 0xDA, 0x98, 0xCC, 0x69, 0x7F,  // ......i.
                    /* 0790 */  0x3D, 0xA9, 0xD5, 0x79, 0x4A, 0x4F, 0x5B, 0x79,  // =..yJO[y
                    /* 0798 */  0x7B, 0x7F, 0xA7, 0x53, 0x3D, 0xF6, 0xF8, 0xA4,  // {..S=...
                    /* 07A0 */  0xBF, 0x36, 0x98, 0x28, 0xA0, 0x6B, 0x9C, 0xFE,  // .6.(.k..
                    /* 07A8 */  0x12, 0x94, 0xFA, 0x5A, 0xCB, 0x82, 0x40, 0x64,  // ...Z..@d
                    /* 07B0 */  0x1F, 0x70, 0xD1, 0xDC, 0x1E, 0x04, 0x58, 0x7D,  // .p....X}
                    /* 07B8 */  0x96, 0x9D, 0x79, 0x02, 0xD0, 0x65, 0x55, 0xA4,  // ..y..eU.
                    /* 07C0 */  0x9C, 0x2F, 0x8B, 0x57, 0x79, 0x95, 0xE0, 0x7A,  // ./.Wy..z
                    /* 07C8 */  0xA0, 0x25, 0x7E, 0x78, 0x79, 0x3E, 0x47, 0x64,  // .%~xy>Gd
                    /* 07D0 */  0x5B, 0x4E, 0x92, 0x50, 0x69, 0xF2, 0x16, 0x90,  // [N.Pi...
                    /* 07D8 */  0xCF, 0xF5, 0x31, 0x07, 0xCD, 0x50, 0x44, 0xC1,  // ..1..PD.
                    /* 07E0 */  0x0B, 0x58, 0xFE, 0xA8, 0x4F, 0x75, 0xA2, 0x27,  // .X..Ou.'
                    /* 07E8 */  0x48, 0x3C, 0x0A, 0xB1, 0x2E, 0x05, 0xD3, 0x67,  // H<.....g
                    /* 07F0 */  0xAF, 0xD3, 0x1D, 0xC3, 0xCC, 0xCD, 0xDF, 0xFB,  // ........
                    /* 07F8 */  0xF4, 0xFE, 0xEC, 0xD2, 0x01, 0x68, 0x58, 0x9F,  // .....hX.
                    /* 0800 */  0xBA, 0xD6, 0x67, 0x0B, 0x2B, 0xB5, 0xEE, 0xC5,  // ..g.+...
                    /* 0808 */  0x20, 0x44, 0x9E, 0xA9, 0x1C, 0xE6, 0xD5, 0x47,  //  D.....G
                    /* 0810 */  0x4F, 0xF4, 0xBC, 0xB9, 0x6F, 0x09, 0x9B, 0x74,  // O...o..t
                    /* 0818 */  0x83, 0x4F, 0xF6, 0xAC, 0x74, 0x0A, 0xEC, 0x5F,  // .O..t.._
                    /* 0820 */  0x9B, 0x68, 0x21, 0x04, 0xC2, 0x03, 0x11, 0x4E,  // .h!....N
                    /* 0828 */  0x30, 0xFC, 0x11, 0x9F, 0xAB, 0x29, 0x8F, 0x82,  // 0....)..
                    /* 0830 */  0x8F, 0x66, 0x1F, 0xA4, 0x06, 0xDD, 0x2C, 0xD4,  // .f....,.
                    /* 0838 */  0x59, 0xC0, 0x37, 0xA3, 0xE8, 0xEA, 0xDF, 0x66,  // Y.7....f
                    /* 0840 */  0x72, 0x23, 0x70, 0x7E, 0xBB, 0xE7, 0x28, 0x63,  // r#p~..(c
                    /* 0848 */  0x7A, 0x84, 0xFF, 0x6F, 0xF6, 0xCD, 0xC8, 0x52,  // z..o...R
                    /* 0850 */  0x5A, 0x6A, 0x30, 0xA5, 0x3B, 0xE2, 0x34, 0x84,  // Zj0.;.4.
                    /* 0858 */  0x95, 0x56, 0x3C, 0xD4, 0x25, 0x64, 0x7E, 0x13,  // .V<.%d~.
                    /* 0860 */  0x6B, 0x6C, 0xDF, 0x38, 0xAB, 0xF4, 0x1C, 0x79,  // kl.8...y
                    /* 0868 */  0x76, 0x19, 0x5D, 0xEC, 0x16, 0xCE, 0xCF, 0xEE,  // v.].....
                    /* 0870 */  0x47, 0x78, 0x10, 0x9A, 0x17, 0xBF, 0xAD, 0xCE,  // Gx......
                    /* 0878 */  0x45, 0x0C, 0x0A, 0x29, 0x96, 0x65, 0xB3, 0x0F,  // E..).e..
                    /* 0880 */  0xBF, 0x32, 0x93, 0x56, 0xFE, 0x35, 0x92, 0x20,  // .2.V.5. 
                    /* 0888 */  0x8D, 0x10, 0x06, 0xD8, 0x26, 0xA0, 0xAC, 0xC1,  // ....&...
                    /* 0890 */  0x91, 0xE1, 0x70, 0xD7, 0xD1, 0xE0, 0x1A, 0x90,  // ..p.....
                    /* 0898 */  0x17, 0xF9, 0xD4, 0x56, 0xBA, 0xA8, 0x15, 0x79,  // ...V...y
                    /* 08A0 */  0x5E, 0x48, 0x2A, 0x0E, 0xB9, 0x83, 0x3C, 0x21,  // ^H*...<!
                    /* 08A8 */  0xD6, 0x77, 0xAA, 0x5B, 0x4B, 0xE0, 0xA5, 0xD2,  // .w.[K...
                    /* 08B0 */  0x4B, 0xA8, 0xFD, 0xDD, 0xEE, 0x9A, 0x6E, 0x88,  // K.....n.
                    /* 08B8 */  0x14, 0x5F, 0x6D, 0xEE, 0x94, 0x43, 0x8B, 0x18,  // ._m..C..
                    /* 08C0 */  0x14, 0x1B, 0xBC, 0x89, 0xAE, 0xA2, 0x4E, 0x2A,  // ......N*
                    /* 08C8 */  0x50, 0x95, 0x20, 0xFF, 0x47, 0x79, 0xDB, 0x54,  // P. .Gy.T
                    /* 08D0 */  0x75, 0xC3, 0x62, 0xEF, 0x54, 0x96, 0xCE, 0x79,  // u.b.T..y
                    /* 08D8 */  0xE8, 0xDB, 0xD9, 0x09, 0x43, 0xA6, 0xA0, 0x45,  // ....C..E
                    /* 08E0 */  0x5A, 0x9A, 0x21, 0xE2, 0x1B, 0xC8, 0x73, 0x27,  // Z.!...s'
                    /* 08E8 */  0xCC, 0xE0, 0xA1, 0x5C, 0xB3, 0xE4, 0x47, 0x7B,  // ...\..G{
                    /* 08F0 */  0xB0, 0x61, 0xAD, 0xBC, 0xC0, 0x05, 0xA9, 0x93,  // .a......
                    /* 08F8 */  0x3B, 0x37, 0x91, 0x08, 0x3B, 0xEB, 0xC1, 0x27,  // ;7..;..'
                    /* 0900 */  0x53, 0x22, 0x2B, 0xB5, 0xA5, 0x21, 0x95, 0xEB,  // S"+..!..
                    /* 0908 */  0xB8, 0x47, 0xC0, 0x83, 0x61, 0x2F, 0x52, 0x0E,  // .G..a/R.
                    /* 0910 */  0x5E, 0x76, 0x08, 0x5A, 0x08, 0x72, 0x0F, 0xCD,  // ^v.Z.r..
                    /* 0918 */  0x8C, 0xB9, 0x98, 0xCE, 0xDC, 0x19, 0xBB, 0xEA,  // ........
                    /* 0920 */  0x6A, 0x02, 0x7C, 0xA2, 0xAC, 0xC3, 0xA4, 0xD7,  // j.|.....
                    /* 0928 */  0x16, 0xB2, 0x40, 0xF7, 0x5A, 0xD5, 0xCC, 0xBF,  // ..@.Z...
                    /* 0930 */  0x7B, 0x09, 0x7B, 0xEA, 0x79, 0xC5, 0x6F, 0x3E,  // {.{.y.o>
                    /* 0938 */  0x06, 0xF5, 0xCA, 0x79, 0x4D, 0x67, 0x17, 0x69,  // ...yMg.i
                    /* 0940 */  0x51, 0xB4, 0xE9, 0x88, 0xFA, 0x30, 0x44, 0xEA,  // Q....0D.
                    /* 0948 */  0x39, 0x6B, 0xEE, 0x04, 0x9C, 0x70, 0x67, 0x06,  // 9k...pg.
                    /* 0950 */  0xD7, 0xB5, 0x98, 0x7C, 0x77, 0xC2, 0x3D, 0x2D,  // ...|w.=-
                    /* 0958 */  0xED, 0xEF, 0x36, 0x56, 0x5A, 0x35, 0x4D, 0x87,  // ..6VZ5M.
                    /* 0960 */  0x6F, 0xBE, 0x23, 0x4D, 0xA5, 0xF3, 0xAE, 0x23,  // o.#M...#
                    /* 0968 */  0xF8, 0x3E, 0xF8, 0xE7, 0x06, 0x38, 0x09, 0x1B,  // .>...8..
                    /* 0970 */  0xA5, 0x9A, 0xDE, 0xD8, 0xC6, 0x32, 0xA6, 0xD5,  // .....2..
                    /* 0978 */  0x4A, 0xF0, 0x22, 0x93, 0xE1, 0x2D, 0x64, 0xEA,  // J."..-d.
                    /* 0980 */  0x60, 0x6A, 0x2F, 0xEB, 0xF5, 0x43, 0x11, 0x69,  // `j/..C.i
                    /* 0988 */  0x8D, 0x74, 0x63, 0xDC, 0x24, 0x66, 0x1F, 0x87,  // .tc.$f..
                    /* 0990 */  0x49, 0x7F, 0xAB, 0x64, 0x89, 0x10, 0x28, 0x2B,  // I..d..(+
                    /* 0998 */  0xE5, 0x31, 0xC2, 0xCF, 0xD2, 0xAA, 0x21, 0x6F,  // .1....!o
                    /* 09A0 */  0xB3, 0x5F, 0x0E, 0xF3, 0x81, 0x99, 0x18, 0x95,  // ._......
                    /* 09A8 */  0x2B, 0x8B, 0x5B, 0x34, 0x47, 0xA8, 0x1B, 0x7F,  // +.[4G...
                    /* 09B0 */  0x7B, 0xD4, 0x5B, 0xB2, 0xD7, 0x66, 0x94, 0xCA,  // {.[..f..
                    /* 09B8 */  0xDE, 0xE8, 0xA3, 0xAF, 0x76, 0xE5, 0x88, 0xA7,  // ....v...
                    /* 09C0 */  0xBC, 0xF3, 0x6D, 0xA5, 0x83, 0x59, 0xB7, 0x5C,  // ..m..Y.\
                    /* 09C8 */  0x88, 0x89, 0xE3, 0x10, 0xE7, 0x8F, 0x32, 0xE6,  // ......2.
                    /* 09D0 */  0xA3, 0x67, 0xB6, 0xC0, 0x7A, 0x2B, 0xE2, 0xF4,  // .g..z+..
                    /* 09D8 */  0x7D, 0xC0, 0x66, 0x9B, 0xA2, 0x0F, 0xB9, 0x83,  // }.f.....
                    /* 09E0 */  0xFA, 0xA3, 0x0A, 0x2D, 0x01, 0x5A, 0x0C, 0x9B,  // ...-.Z..
                    /* 09E8 */  0x82, 0xEB, 0xB4, 0x55, 0xA2, 0x7E, 0x52, 0xA4,  // ...U.~R.
                    /* 09F0 */  0x8C, 0x54, 0xA4, 0x85, 0xAD, 0x28, 0x22, 0x4A,  // .T...("J
                    /* 09F8 */  0x47, 0xE8, 0xD4, 0x41, 0x6B, 0x0D, 0x4B, 0xEB,  // G..Ak.K.
                    /* 0A00 */  0xDD, 0xCA, 0x7A, 0x81, 0x9A, 0xFF, 0xEA, 0xA3,  // ..z.....
                    /* 0A08 */  0x93, 0xEA, 0xD8, 0xAA, 0x5C, 0x03, 0xE9, 0x0E,  // ....\...
                    /* 0A10 */  0xC2, 0xE1, 0x12, 0x2E, 0xFF, 0x35, 0x32, 0xC5,  // .....52.
                    /* 0A18 */  0xC3, 0x44, 0xDA, 0x65, 0x2D, 0x02, 0x61, 0x67,  // .D.e-.ag
                    /* 0A20 */  0xDC, 0x66, 0x58, 0x6C, 0xFC, 0x15, 0x50, 0x14,  // .fXl..P.
                    /* 0A28 */  0x39, 0xBE, 0x4C, 0x94, 0x5D, 0xCE, 0x6C, 0x17,  // 9.L.].l.
                    /* 0A30 */  0x2D, 0x05, 0x99, 0xB0, 0xC6, 0x5D, 0x80, 0x54,  // -....].T
                    /* 0A38 */  0xFA, 0xA0, 0x5D, 0x86, 0xA1, 0x12, 0x2F, 0x52,  // ..].../R
                    /* 0A40 */  0x4F, 0x85, 0x7F, 0x13, 0x57, 0x06, 0xFD, 0x0C,  // O...W...
                    /* 0A48 */  0xBE, 0xC4, 0x00                                 // ...
                }
            })
            Method (GBDV, 0, Serialized)
            {
                Switch (ToInteger (\MPID))
                {
                    Case (Zero)
                    {
                        ADBG ("Load DV File0")
                        Return (DBD0) /* \_SB_.IETM.DBD0 */
                    }
                    Case (One)
                    {
                        ADBG ("Load DV File1")
                        Return (DBD1) /* \_SB_.IETM.DBD1 */
                    }
                    Case (0x02)
                    {
                        ADBG ("Load DV File2")
                        Return (DBD2) /* \_SB_.IETM.DBD2 */
                    }
                    Case (0x03)
                    {
                        ADBG ("Load DV File3")
                        Return (DBD3) /* \_SB_.IETM.DBD3 */
                    }
                    Default
                    {
                        ADBG ("ERROR to load the DV")
                        Return (DBDF) /* \_SB_.IETM.DBDF */
                    }

                }
            }
        }
    }
}



SSDT15
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "UsbCTabl", 0x00001000)
{
    External (_SB_.PC00.LPCB.EC__.HKEY.MHPF, MethodObj)    // 1 Arguments
    External (_SB_.PC00.XHCI.RHUB, DeviceObj)
    External (P8XH, MethodObj)    // 2 Arguments
    External (TP1D, UnknownObj)
    External (TP1P, UnknownObj)
    External (TP1T, UnknownObj)
    External (TP1U, UnknownObj)
    External (TP2D, UnknownObj)
    External (TP2P, UnknownObj)
    External (TP2T, UnknownObj)
    External (TP2U, UnknownObj)
    External (TP3D, UnknownObj)
    External (TP3P, UnknownObj)
    External (TP3T, UnknownObj)
    External (TP3U, UnknownObj)
    External (TP4D, UnknownObj)
    External (TP4P, UnknownObj)
    External (TP4T, UnknownObj)
    External (TP4U, UnknownObj)
    External (TP5D, UnknownObj)
    External (TP5P, UnknownObj)
    External (TP5T, UnknownObj)
    External (TP5U, UnknownObj)
    External (TP6D, UnknownObj)
    External (TP6P, UnknownObj)
    External (TP6T, UnknownObj)
    External (TP6U, UnknownObj)
    External (TP7D, UnknownObj)
    External (TP7P, UnknownObj)
    External (TP7T, UnknownObj)
    External (TP7U, UnknownObj)
    External (TP8D, UnknownObj)
    External (TP8P, UnknownObj)
    External (TP8T, UnknownObj)
    External (TP8U, UnknownObj)
    External (TP9D, UnknownObj)
    External (TP9P, UnknownObj)
    External (TP9T, UnknownObj)
    External (TP9U, UnknownObj)
    External (TPAD, UnknownObj)
    External (TPAP, UnknownObj)
    External (TPAT, UnknownObj)
    External (TPAU, UnknownObj)
    External (TTUP, UnknownObj)
    External (UBCB, UnknownObj)
    External (UCMS, UnknownObj)
    External (UCPD, MethodObj)    // 2 Arguments
    External (UDRS, UnknownObj)
    External (USTC, UnknownObj)
    External (XDCE, UnknownObj)

    Scope (\_SB)
    {
        Device (UBTC)
        {
            Name (_HID, EisaId ("USBC000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0CA0"))  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "USB Type C")  // _DDN: DOS Device Name
            Name (CRS, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y00)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRS, \_SB.UBTC._Y00._BAS, CBAS)  // _BAS: Base Address
                CBAS = UBCB /* External reference */
                Return (CRS) /* \_SB_.UBTC.CRS_ */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((USTC == One))
                {
                    If ((UCMS == One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (RUCC, 2, Serialized)
            {
                Return (\UCPD (Arg0, Arg1))
            }

            Method (FTPT, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (One)
                    {
                        Local0 = (TP1D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x02)
                    {
                        Local0 = (TP2D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x03)
                    {
                        Local0 = (TP3D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x04)
                    {
                        Local0 = (TP4D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x05)
                    {
                        Local0 = (TP5D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x06)
                    {
                        Local0 = (TP6D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x07)
                    {
                        Local0 = (TP7D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x08)
                    {
                        Local0 = (TP8D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x09)
                    {
                        Local0 = (TP9D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x0A)
                    {
                        Local0 = (TPAD >> One)
                        Local0 &= 0x03
                    }
                    Default
                    {
                        Local0 = 0xFF
                    }

                }

                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        Return (0x09)
                    }
                    Case (One)
                    {
                        Return (0x09)
                    }
                    Case (0x02)
                    {
                        Return (0x09)
                    }
                    Case (0x03)
                    {
                        Return (Zero)
                    }

                }

                Return (0x09)
            }

            Method (FPMN, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (One)
                    {
                        Local0 = (TP1D >> One)
                        Local0 &= 0x03
                        Local1 = (TP1D & One)
                        Local2 = TP1P /* External reference */
                        Local3 = TP1T /* External reference */
                    }
                    Case (0x02)
                    {
                        Local0 = (TP2D >> One)
                        Local0 &= 0x03
                        Local1 = (TP2D & One)
                        Local2 = TP2P /* External reference */
                        Local3 = TP2T /* External reference */
                    }
                    Case (0x03)
                    {
                        Local0 = (TP3D >> One)
                        Local0 &= 0x03
                        Local1 = (TP3D & One)
                        Local2 = TP3P /* External reference */
                        Local3 = TP3T /* External reference */
                    }
                    Case (0x04)
                    {
                        Local0 = (TP4D >> One)
                        Local0 &= 0x03
                        Local1 = (TP4D & One)
                        Local2 = TP4P /* External reference */
                        Local3 = TP4T /* External reference */
                    }
                    Case (0x05)
                    {
                        Local0 = (TP5D >> One)
                        Local0 &= 0x03
                        Local1 = (TP5D & One)
                        Local2 = TP5P /* External reference */
                        Local3 = TP5T /* External reference */
                    }
                    Case (0x06)
                    {
                        Local0 = (TP6D >> One)
                        Local0 &= 0x03
                        Local1 = (TP6D & One)
                        Local2 = TP6P /* External reference */
                        Local3 = TP6T /* External reference */
                    }
                    Case (0x07)
                    {
                        Local0 = (TP7D >> One)
                        Local0 &= 0x03
                        Local1 = (TP7D & One)
                        Local2 = TP7P /* External reference */
                        Local3 = TP7T /* External reference */
                    }
                    Case (0x08)
                    {
                        Local0 = (TP8D >> One)
                        Local0 &= 0x03
                        Local1 = (TP8D & One)
                        Local2 = TP8P /* External reference */
                        Local3 = TP8T /* External reference */
                    }
                    Case (0x09)
                    {
                        Local0 = (TP9D >> One)
                        Local0 &= 0x03
                        Local1 = (TP9D & One)
                        Local2 = TP9P /* External reference */
                        Local3 = TP9T /* External reference */
                    }
                    Case (0x0A)
                    {
                        Local0 = (TPAD >> One)
                        Local0 &= 0x03
                        Local1 = (TPAD & One)
                        Local2 = TPAP /* External reference */
                        Local3 = TPAT /* External reference */
                    }
                    Default
                    {
                        Local0 = 0xFF
                        Local1 = Zero
                        Local2 = Zero
                        Local3 = Zero
                    }

                }

                If ((Local0 == Zero))
                {
                    Return (Local2)
                }
                ElseIf (((Local0 == One) || ((Local0 == 0x02) || (Local0 == 
                    0x03))))
                {
                    If ((Local1 == One))
                    {
                        Return (Local2)
                    }
                    Else
                    {
                        Return (Local3)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (TPLD, 2, Serialized)
            {
                Name (PCKG, Package (0x01)
                {
                    Buffer (0x10) {}
                })
                CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                REV = One
                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                VISI = Arg0
                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                GPOS = Arg1
                CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                SHAP = One
                CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                WID = 0x08
                CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                HGT = 0x03
                Return (PCKG) /* \_SB_.UBTC.TPLD.PCKG */
            }

            Method (TUPC, 2, Serialized)
            {
                Name (PCKG, Package (0x04)
                {
                    One, 
                    Zero, 
                    Zero, 
                    Zero
                })
                PCKG [Zero] = Arg0
                PCKG [One] = Arg1
                Return (PCKG) /* \_SB_.UBTC.TUPC.PCKG */
            }

            Method (ITCP, 1, Serialized)
            {
                Switch (ToInteger (FTPT (Arg0)))
                {
                    Case (Package (0x03)
                        {
                            0x08, 
                            0x09, 
                            0x0A
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            If (((TTUP >= One) && ((TP1U == One) && (ITCP (
                One) == One))))
            {
                Device (CR01)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (One, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (One, One))
                    }
                }
            }

            If (((TTUP >= 0x02) && ((TP2U == One) && (ITCP (
                0x02) == One))))
            {
                Device (CR02)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x02, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x02, One))
                    }
                }
            }

            If (((TTUP >= 0x03) && ((TP3U == One) && (ITCP (
                0x03) == One))))
            {
                Device (CR03)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x03, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x03, One))
                    }
                }
            }

            If (((TTUP >= 0x04) && ((TP4U == One) && (ITCP (
                0x04) == One))))
            {
                Device (CR04)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x04, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x04, One))
                    }
                }
            }

            If (((TTUP >= 0x05) && ((TP5U == One) && (ITCP (
                0x05) == One))))
            {
                Device (CR05)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x05, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x05, One))
                    }
                }
            }

            If (((TTUP >= 0x06) && ((TP6U == One) && (ITCP (
                0x06) == One))))
            {
                Device (CR06)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x06, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x06, One))
                    }
                }
            }

            If (((TTUP >= 0x07) && ((TP7U == One) && (ITCP (
                0x07) == One))))
            {
                Device (CR07)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x07, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x07, One))
                    }
                }
            }

            If (((TTUP >= 0x08) && ((TP8U == One) && (ITCP (
                0x08) == One))))
            {
                Device (CR08)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x08, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x08, One))
                    }
                }
            }

            If (((TTUP >= 0x09) && ((TP9U == One) && (ITCP (
                0x09) == One))))
            {
                Device (CR09)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x09, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x09, One))
                    }
                }
            }

            If (((TTUP >= 0x0A) && ((TPAU == One) && (ITCP (
                0x0A) == One))))
            {
                Device (CR0A)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x0A, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x0A, One))
                    }
                }
            }

            OperationRegion (USBC, SystemMemory, UBCB, 0x38)
            Field (USBC, ByteAcc, Lock, Preserve)
            {
                VER1,   8, 
                VER2,   8, 
                RSV1,   8, 
                RSV2,   8, 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8, 
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8, 
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8
            }

            Mutex (UBSY, 0x00)
            Method (ECWR, 0, Serialized)
            {
                Acquire (UBSY, 0xFFFF)
                Local0 = Buffer (0x25) {}
                Local0 [Zero] = 0x0A
                Local0 [One] = Zero
                Local0 [0x02] = 0x02
                Local0 [0x03] = 0x06
                Local0 [0x04] = MGO0 /* \_SB_.UBTC.MGO0 */
                Local0 [0x05] = MGO1 /* \_SB_.UBTC.MGO1 */
                Local0 [0x06] = MGO2 /* \_SB_.UBTC.MGO2 */
                Local0 [0x07] = MGO3 /* \_SB_.UBTC.MGO3 */
                Local0 [0x08] = MGO4 /* \_SB_.UBTC.MGO4 */
                Local0 [0x09] = MGO5 /* \_SB_.UBTC.MGO5 */
                Local0 [0x0A] = MGO6 /* \_SB_.UBTC.MGO6 */
                Local0 [0x0B] = MGO7 /* \_SB_.UBTC.MGO7 */
                Local0 [0x0C] = MGO8 /* \_SB_.UBTC.MGO8 */
                Local0 [0x0D] = MGO9 /* \_SB_.UBTC.MGO9 */
                Local0 [0x0E] = MGOA /* \_SB_.UBTC.MGOA */
                Local0 [0x0F] = MGOB /* \_SB_.UBTC.MGOB */
                Local0 [0x10] = MGOC /* \_SB_.UBTC.MGOC */
                Local0 [0x11] = MGOD /* \_SB_.UBTC.MGOD */
                Local0 [0x12] = MGOE /* \_SB_.UBTC.MGOE */
                Local0 [0x13] = MGOF /* \_SB_.UBTC.MGOF */
                Local0 [0x24] = 0x10
                \_SB.PC00.LPCB.EC.HKEY.MHPF (Local0)
                Local0 [Zero] = 0x0A
                Local0 [One] = Zero
                Local0 [0x02] = 0x02
                Local0 [0x03] = 0x04
                Local0 [0x04] = CTL0 /* \_SB_.UBTC.CTL0 */
                Local0 [0x05] = CTL1 /* \_SB_.UBTC.CTL1 */
                Local0 [0x06] = CTL2 /* \_SB_.UBTC.CTL2 */
                Local0 [0x07] = CTL3 /* \_SB_.UBTC.CTL3 */
                Local0 [0x08] = CTL4 /* \_SB_.UBTC.CTL4 */
                Local0 [0x09] = CTL5 /* \_SB_.UBTC.CTL5 */
                Local0 [0x0A] = CTL6 /* \_SB_.UBTC.CTL6 */
                Local0 [0x0B] = CTL7 /* \_SB_.UBTC.CTL7 */
                Local0 [0x24] = 0x08
                \_SB.PC00.LPCB.EC.HKEY.MHPF (Local0)
                Release (UBSY)
            }

            Method (ECRD, 0, Serialized)
            {
                Acquire (UBSY, 0xFFFF)
                Local0 = Buffer (0x25) {}
                Local0 [Zero] = 0x0B
                Local0 [One] = Zero
                Local0 [0x02] = 0x02
                Local0 [0x03] = 0x05
                Local0 [0x24] = 0x10
                Local1 = \_SB.PC00.LPCB.EC.HKEY.MHPF (Local0)
                MGI0 = DerefOf (Local1 [0x04])
                MGI1 = DerefOf (Local1 [0x05])
                MGI2 = DerefOf (Local1 [0x06])
                MGI3 = DerefOf (Local1 [0x07])
                MGI4 = DerefOf (Local1 [0x08])
                MGI5 = DerefOf (Local1 [0x09])
                MGI6 = DerefOf (Local1 [0x0A])
                MGI7 = DerefOf (Local1 [0x0B])
                MGI8 = DerefOf (Local1 [0x0C])
                MGI9 = DerefOf (Local1 [0x0D])
                MGIA = DerefOf (Local1 [0x0E])
                MGIB = DerefOf (Local1 [0x0F])
                MGIC = DerefOf (Local1 [0x10])
                MGID = DerefOf (Local1 [0x11])
                MGIE = DerefOf (Local1 [0x12])
                MGIF = DerefOf (Local1 [0x13])
                Local0 [Zero] = 0x0B
                Local0 [One] = Zero
                Local0 [0x02] = 0x02
                Local0 [0x03] = 0x03
                Local0 [0x24] = 0x04
                Local1 = \_SB.PC00.LPCB.EC.HKEY.MHPF (Local0)
                CCI0 = DerefOf (Local1 [0x04])
                CCI1 = DerefOf (Local1 [0x05])
                CCI2 = DerefOf (Local1 [0x06])
                CCI3 = DerefOf (Local1 [0x07])
                Release (UBSY)
            }

            Method (NTFY, 0, Serialized)
            {
                ECRD ()
                Sleep (One)
                Notify (\_SB.UBTC, 0x80) // Status Change
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("6f8398c2-7ca4-11e4-ad36-631042b5008f") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x1F                                             // .
                            })
                        }
                        Case (One)
                        {
                            ECWR ()
                            P8XH (Zero, 0xE0)
                        }
                        Case (0x02)
                        {
                            ECRD ()
                        }
                        Case (0x03)
                        {
                            Return (XDCE) /* External reference */
                        }
                        Case (0x04)
                        {
                            Return (UDRS) /* External reference */
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT16
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "AdlP_Rvp", 0x00001000)
{
    External (_SB_.CAGS, MethodObj)    // 1 Arguments
    External (_SB_.OSCO, UnknownObj)
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.GLAN, DeviceObj)
    External (_SB_.PC00.HDAS, DeviceObj)
    External (_SB_.PC00.HDAS.VDID, UnknownObj)
    External (_SB_.PC00.I2C0, DeviceObj)
    External (_SB_.PC00.I2C0.TPD0, DeviceObj)
    External (_SB_.PC00.I2C0.TPL1, DeviceObj)
    External (_SB_.PC00.I2C1, DeviceObj)
    External (_SB_.PC00.I2C1.TPL1, DeviceObj)
    External (_SB_.PC00.PEG0, DeviceObj)
    External (_SB_.PC00.PEG0.CEMP, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PEG0.D3HT, FieldUnitObj)
    External (_SB_.PC00.PEG0.DHDW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.DVES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.EHDW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.HBSL, FieldUnitObj)
    External (_SB_.PC00.PEG0.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PCPB, IntObj)
    External (_SB_.PC00.PEG0.PEGP, DeviceObj)
    External (_SB_.PC00.PEG0.PEGP.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PRMV, IntObj)
    External (_SB_.PC00.PEG0.PRTP, IntObj)
    External (_SB_.PC00.PEG0.RD3C, IntObj)
    External (_SB_.PC00.PEG0.SLOT, IntObj)
    External (_SB_.PC00.PEG0.TMCS, IntObj)
    External (_SB_.PC00.PEG0.VDID, UnknownObj)
    External (_SB_.PC00.PEG1, DeviceObj)
    External (_SB_.PC00.PEG1.PRMV, IntObj)
    External (_SB_.PC00.PEG1.PRTP, IntObj)
    External (_SB_.PC00.PEG1.RD3C, IntObj)
    External (_SB_.PC00.PEG1.SLOT, IntObj)
    External (_SB_.PC00.PEG1.VDID, UnknownObj)
    External (_SB_.PC00.PEG2, DeviceObj)
    External (_SB_.PC00.PEG2.PRMV, IntObj)
    External (_SB_.PC00.PEG2.PRTP, IntObj)
    External (_SB_.PC00.PEG2.RD3C, IntObj)
    External (_SB_.PC00.PEG2.SLOT, IntObj)
    External (_SB_.PC00.PEG2.VDID, UnknownObj)
    External (_SB_.PC00.RP01, DeviceObj)
    External (_SB_.PC00.RP01.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.LASX, UnknownObj)
    External (_SB_.PC00.RP01.PRMV, IntObj)
    External (_SB_.PC00.RP01.PRTP, IntObj)
    External (_SB_.PC00.RP01.PWRG, UnknownObj)
    External (_SB_.PC00.RP01.PXSX, DeviceObj)
    External (_SB_.PC00.RP01.PXSX.ISQC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.RD3C, IntObj)
    External (_SB_.PC00.RP01.SCLK, UnknownObj)
    External (_SB_.PC00.RP01.SLOT, IntObj)
    External (_SB_.PC00.RP01.TB2F, UnknownObj)
    External (_SB_.PC00.RP01.TB2R, UnknownObj)
    External (_SB_.PC00.RP01.TFDI, UnknownObj)
    External (_SB_.PC00.RP01.TN2B, UnknownObj)
    External (_SB_.PC00.RP01.TR2B, UnknownObj)
    External (_SB_.PC00.RP01.TR2P, UnknownObj)
    External (_SB_.PC00.RP01.VDID, UnknownObj)
    External (_SB_.PC00.RP01.WAKG, UnknownObj)
    External (_SB_.PC00.RP01.WAKP, UnknownObj)
    External (_SB_.PC00.RP01.WWEN, UnknownObj)
    External (_SB_.PC00.RP02, DeviceObj)
    External (_SB_.PC00.RP02.PRMV, IntObj)
    External (_SB_.PC00.RP02.PRTP, IntObj)
    External (_SB_.PC00.RP02.RD3C, IntObj)
    External (_SB_.PC00.RP02.SLOT, IntObj)
    External (_SB_.PC00.RP02.VDID, UnknownObj)
    External (_SB_.PC00.RP03, DeviceObj)
    External (_SB_.PC00.RP03.PRMV, IntObj)
    External (_SB_.PC00.RP03.PRTP, IntObj)
    External (_SB_.PC00.RP03.RD3C, IntObj)
    External (_SB_.PC00.RP03.SLOT, IntObj)
    External (_SB_.PC00.RP03.VDID, UnknownObj)
    External (_SB_.PC00.RP04, DeviceObj)
    External (_SB_.PC00.RP04.PRMV, IntObj)
    External (_SB_.PC00.RP04.PRTP, IntObj)
    External (_SB_.PC00.RP04.RD3C, IntObj)
    External (_SB_.PC00.RP04.SLOT, IntObj)
    External (_SB_.PC00.RP04.VDID, UnknownObj)
    External (_SB_.PC00.RP05, DeviceObj)
    External (_SB_.PC00.RP05.PRMV, IntObj)
    External (_SB_.PC00.RP05.PRTP, IntObj)
    External (_SB_.PC00.RP05.PXSX, DeviceObj)
    External (_SB_.PC00.RP05.RD3C, IntObj)
    External (_SB_.PC00.RP05.SLOT, IntObj)
    External (_SB_.PC00.RP05.VDID, UnknownObj)
    External (_SB_.PC00.RP06, DeviceObj)
    External (_SB_.PC00.RP06.PRMV, IntObj)
    External (_SB_.PC00.RP06.PRTP, IntObj)
    External (_SB_.PC00.RP06.RD3C, IntObj)
    External (_SB_.PC00.RP06.SLOT, IntObj)
    External (_SB_.PC00.RP06.VDID, UnknownObj)
    External (_SB_.PC00.RP07, DeviceObj)
    External (_SB_.PC00.RP07.PRMV, IntObj)
    External (_SB_.PC00.RP07.PRTP, IntObj)
    External (_SB_.PC00.RP07.RD3C, IntObj)
    External (_SB_.PC00.RP07.SLOT, IntObj)
    External (_SB_.PC00.RP07.VDID, UnknownObj)
    External (_SB_.PC00.RP08, DeviceObj)
    External (_SB_.PC00.RP08.PRMV, IntObj)
    External (_SB_.PC00.RP08.PRTP, IntObj)
    External (_SB_.PC00.RP08.RD3C, IntObj)
    External (_SB_.PC00.RP08.SLOT, IntObj)
    External (_SB_.PC00.RP08.VDID, UnknownObj)
    External (_SB_.PC00.RP09, DeviceObj)
    External (_SB_.PC00.RP09.PRMV, IntObj)
    External (_SB_.PC00.RP09.PRTP, IntObj)
    External (_SB_.PC00.RP09.RD3C, IntObj)
    External (_SB_.PC00.RP09.SLOT, IntObj)
    External (_SB_.PC00.RP09.VDID, UnknownObj)
    External (_SB_.PC00.RP10, DeviceObj)
    External (_SB_.PC00.RP10.PRMV, IntObj)
    External (_SB_.PC00.RP10.PRTP, IntObj)
    External (_SB_.PC00.RP10.RD3C, IntObj)
    External (_SB_.PC00.RP10.SLOT, IntObj)
    External (_SB_.PC00.RP10.VDID, UnknownObj)
    External (_SB_.PC00.RP11, DeviceObj)
    External (_SB_.PC00.RP11.PRMV, IntObj)
    External (_SB_.PC00.RP11.PRTP, IntObj)
    External (_SB_.PC00.RP11.RD3C, IntObj)
    External (_SB_.PC00.RP11.SLOT, IntObj)
    External (_SB_.PC00.RP11.VDID, UnknownObj)
    External (_SB_.PC00.RP12, DeviceObj)
    External (_SB_.PC00.RP12.PRMV, IntObj)
    External (_SB_.PC00.RP12.PRTP, IntObj)
    External (_SB_.PC00.RP12.RD3C, IntObj)
    External (_SB_.PC00.RP12.SLOT, IntObj)
    External (_SB_.PC00.RP12.VDID, UnknownObj)
    External (_SB_.PC00.RP13, DeviceObj)
    External (_SB_.PC00.RP13.PRMV, IntObj)
    External (_SB_.PC00.RP13.PRTP, IntObj)
    External (_SB_.PC00.RP13.RD3C, IntObj)
    External (_SB_.PC00.RP13.SLOT, IntObj)
    External (_SB_.PC00.RP13.VDID, UnknownObj)
    External (_SB_.PC00.RP14, DeviceObj)
    External (_SB_.PC00.RP14.PRMV, IntObj)
    External (_SB_.PC00.RP14.PRTP, IntObj)
    External (_SB_.PC00.RP14.RD3C, IntObj)
    External (_SB_.PC00.RP14.SLOT, IntObj)
    External (_SB_.PC00.RP14.VDID, UnknownObj)
    External (_SB_.PC00.RP15, DeviceObj)
    External (_SB_.PC00.RP15.PRMV, IntObj)
    External (_SB_.PC00.RP15.PRTP, IntObj)
    External (_SB_.PC00.RP15.RD3C, IntObj)
    External (_SB_.PC00.RP15.SLOT, IntObj)
    External (_SB_.PC00.RP15.VDID, UnknownObj)
    External (_SB_.PC00.RP16, DeviceObj)
    External (_SB_.PC00.RP16.PRMV, IntObj)
    External (_SB_.PC00.RP16.PRTP, IntObj)
    External (_SB_.PC00.RP16.RD3C, IntObj)
    External (_SB_.PC00.RP16.SLOT, IntObj)
    External (_SB_.PC00.RP16.VDID, UnknownObj)
    External (_SB_.PC00.RP17, DeviceObj)
    External (_SB_.PC00.RP17.PRMV, IntObj)
    External (_SB_.PC00.RP17.PRTP, IntObj)
    External (_SB_.PC00.RP17.RD3C, IntObj)
    External (_SB_.PC00.RP17.SLOT, IntObj)
    External (_SB_.PC00.RP17.VDID, UnknownObj)
    External (_SB_.PC00.RP18, DeviceObj)
    External (_SB_.PC00.RP18.PRMV, IntObj)
    External (_SB_.PC00.RP18.PRTP, IntObj)
    External (_SB_.PC00.RP18.RD3C, IntObj)
    External (_SB_.PC00.RP18.SLOT, IntObj)
    External (_SB_.PC00.RP18.VDID, UnknownObj)
    External (_SB_.PC00.RP19, DeviceObj)
    External (_SB_.PC00.RP19.PRMV, IntObj)
    External (_SB_.PC00.RP19.PRTP, IntObj)
    External (_SB_.PC00.RP19.RD3C, IntObj)
    External (_SB_.PC00.RP19.SLOT, IntObj)
    External (_SB_.PC00.RP19.VDID, UnknownObj)
    External (_SB_.PC00.RP20, DeviceObj)
    External (_SB_.PC00.RP20.PRMV, IntObj)
    External (_SB_.PC00.RP20.PRTP, IntObj)
    External (_SB_.PC00.RP20.RD3C, IntObj)
    External (_SB_.PC00.RP20.SLOT, IntObj)
    External (_SB_.PC00.RP20.VDID, UnknownObj)
    External (_SB_.PC00.RP21, DeviceObj)
    External (_SB_.PC00.RP21.PRMV, IntObj)
    External (_SB_.PC00.RP21.PRTP, IntObj)
    External (_SB_.PC00.RP21.RD3C, IntObj)
    External (_SB_.PC00.RP21.SLOT, IntObj)
    External (_SB_.PC00.RP21.VDID, UnknownObj)
    External (_SB_.PC00.RP22, DeviceObj)
    External (_SB_.PC00.RP22.PRMV, IntObj)
    External (_SB_.PC00.RP22.PRTP, IntObj)
    External (_SB_.PC00.RP22.RD3C, IntObj)
    External (_SB_.PC00.RP22.SLOT, IntObj)
    External (_SB_.PC00.RP22.VDID, UnknownObj)
    External (_SB_.PC00.RP23, DeviceObj)
    External (_SB_.PC00.RP23.PRMV, IntObj)
    External (_SB_.PC00.RP23.PRTP, IntObj)
    External (_SB_.PC00.RP23.RD3C, IntObj)
    External (_SB_.PC00.RP23.SLOT, IntObj)
    External (_SB_.PC00.RP23.VDID, UnknownObj)
    External (_SB_.PC00.RP24, DeviceObj)
    External (_SB_.PC00.RP24.PRMV, IntObj)
    External (_SB_.PC00.RP24.PRTP, IntObj)
    External (_SB_.PC00.RP24.RD3C, IntObj)
    External (_SB_.PC00.RP24.SLOT, IntObj)
    External (_SB_.PC00.RP24.VDID, UnknownObj)
    External (_SB_.PC00.RP25, DeviceObj)
    External (_SB_.PC00.RP25.PRMV, IntObj)
    External (_SB_.PC00.RP25.PRTP, IntObj)
    External (_SB_.PC00.RP25.RD3C, IntObj)
    External (_SB_.PC00.RP25.SLOT, IntObj)
    External (_SB_.PC00.RP25.VDID, UnknownObj)
    External (_SB_.PC00.RP26, DeviceObj)
    External (_SB_.PC00.RP26.PRMV, IntObj)
    External (_SB_.PC00.RP26.PRTP, IntObj)
    External (_SB_.PC00.RP26.RD3C, IntObj)
    External (_SB_.PC00.RP26.SLOT, IntObj)
    External (_SB_.PC00.RP26.VDID, UnknownObj)
    External (_SB_.PC00.RP27, DeviceObj)
    External (_SB_.PC00.RP27.PRMV, IntObj)
    External (_SB_.PC00.RP27.PRTP, IntObj)
    External (_SB_.PC00.RP27.RD3C, IntObj)
    External (_SB_.PC00.RP27.SLOT, IntObj)
    External (_SB_.PC00.RP27.VDID, UnknownObj)
    External (_SB_.PC00.RP28, DeviceObj)
    External (_SB_.PC00.RP28.PRMV, IntObj)
    External (_SB_.PC00.RP28.PRTP, IntObj)
    External (_SB_.PC00.RP28.RD3C, IntObj)
    External (_SB_.PC00.RP28.SLOT, IntObj)
    External (_SB_.PC00.RP28.VDID, UnknownObj)
    External (_SB_.PC00.SAT0, DeviceObj)
    External (_SB_.PC00.SAT0.PRT0, DeviceObj)
    External (_SB_.PC00.SAT0.PRT1, DeviceObj)
    External (_SB_.PC00.SAT0.PRT2, DeviceObj)
    External (_SB_.PC00.SAT0.PRT3, DeviceObj)
    External (_SB_.PC00.SAT0.PRT4, DeviceObj)
    External (_SB_.PC00.SAT0.PRT5, DeviceObj)
    External (_SB_.PC00.SAT0.PRT6, DeviceObj)
    External (_SB_.PC00.SAT0.PRT7, DeviceObj)
    External (_SB_.PC00.UA02.BTH0, DeviceObj)
    External (_SB_.PC00.XDCI, DeviceObj)
    External (_SB_.PC00.XDCI.D0I3, UnknownObj)
    External (_SB_.PC00.XDCI.XDCB, UnknownObj)
    External (_SB_.PC00.XHCI, DeviceObj)
    External (_SB_.PC00.XHCI.MEMB, UnknownObj)
    External (_SB_.PC00.XHCI.RHUB, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS01, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS02, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS10, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS01, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS02, DeviceObj)
    External (_SB_.PSD0, MethodObj)    // 1 Arguments
    External (_SB_.PSD3, MethodObj)    // 1 Arguments
    External (_SB_.SHPO, MethodObj)    // 2 Arguments
    External (AUDD, FieldUnitObj)
    External (DG2P, UnknownObj)
    External (DG2R, UnknownObj)
    External (DGBA, FieldUnitObj)
    External (DGOP, FieldUnitObj)
    External (DGP2, UnknownObj)
    External (DGR2, UnknownObj)
    External (DTFS, IntObj)
    External (DTOE, IntObj)
    External (DTRC, IntObj)
    External (DTRD, IntObj)
    External (DTRO, IntObj)
    External (DVID, UnknownObj)
    External (EDMX, UnknownObj)
    External (GBED, UnknownObj)
    External (GBEP, UnknownObj)
    External (GBES, UnknownObj)
    External (GPDI, UnknownObj)
    External (GPLI, UnknownObj)
    External (GPLP, UnknownObj)
    External (GPLR, UnknownObj)
    External (HBCL, FieldUnitObj)
    External (HBPL, FieldUnitObj)
    External (IC0D, FieldUnitObj)
    External (IC1D, FieldUnitObj)
    External (IC1S, FieldUnitObj)
    External (P1WK, FieldUnitObj)
    External (P1WP, UnknownObj)
    External (PBRS, UnknownObj)
    External (PEP0, UnknownObj)
    External (PFCP, UnknownObj)
    External (PIN_.OFF_, MethodObj)    // 1 Arguments
    External (PIN_.ON__, MethodObj)    // 1 Arguments
    External (PIN_.STA_, MethodObj)    // 1 Arguments
    External (PINP.OFF_, MethodObj)    // 1 Arguments
    External (PINP.ON__, MethodObj)    // 1 Arguments
    External (PPDI, UnknownObj)
    External (PPLI, UnknownObj)
    External (PPLP, UnknownObj)
    External (PPLR, UnknownObj)
    External (PPSP, UnknownObj)
    External (PPSR, UnknownObj)
    External (PRST, UnknownObj)
    External (PS2P, UnknownObj)
    External (PSP2, UnknownObj)
    External (PSPE, UnknownObj)
    External (PSPR, UnknownObj)
    External (PSR2, UnknownObj)
    External (PSW2, UnknownObj)
    External (PSWP, UnknownObj)
    External (R8DC, UnknownObj)
    External (R8WR, UnknownObj)
    External (RCG0, IntObj)
    External (RCG1, IntObj)
    External (RPS0, IntObj)
    External (RPT0, IntObj)
    External (SATP, UnknownObj)
    External (SD2P, UnknownObj)
    External (SD2R, UnknownObj)
    External (SD5P, UnknownObj)
    External (SD5R, UnknownObj)
    External (SDP1, UnknownObj)
    External (SDP5, UnknownObj)
    External (SDPP, UnknownObj)
    External (SDR1, UnknownObj)
    External (SDR2, UnknownObj)
    External (SDR5, UnknownObj)
    External (SDRP, UnknownObj)
    External (SDS0, FieldUnitObj)
    External (SDS1, FieldUnitObj)
    External (SHSB, FieldUnitObj)
    External (SPCO, MethodObj)    // 2 Arguments
    External (SPCX, MethodObj)    // 3 Arguments
    External (SR2P, UnknownObj)
    External (SSDP, UnknownObj)
    External (SSDR, UnknownObj)
    External (STPP, UnknownObj)
    External (TBPE, IntObj)
    External (TEDC, IntObj)
    External (TOFF, IntObj)
    External (TPDT, UnknownObj)
    External (TPLS, UnknownObj)
    External (TPLT, UnknownObj)
    External (UAMS, UnknownObj)
    External (VMDE, UnknownObj)
    External (VRRD, FieldUnitObj)
    External (WBRS, UnknownObj)
    External (WFCP, UnknownObj)
    External (WLWK, UnknownObj)
    External (WPRP, UnknownObj)
    External (WRTO, UnknownObj)
    External (WWKP, UnknownObj)
    External (WWMT, UnknownObj)
    External (XDCE, UnknownObj)
    External (XDST, IntObj)
    External (XHPR, UnknownObj)

    If ((GBES != Zero)) {}
    If ((WRTO != Zero))
    {
        Scope (\_SB.PC00.RP01)
        {
            Name (BRST, Package (0x02)
            {
                Zero, 
                Zero
            })
            BRST [Zero] = WBRS /* External reference */
            BRST [One] = PBRS /* External reference */
            Name (RSTG, Package (0x02)
            {
                Zero, 
                Zero
            })
            RSTG [Zero] = PRST /* External reference */
            RSTG [One] = WPRP /* External reference */
            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PWRG [Zero] = WFCP /* External reference */
            PWRG [One] = PFCP /* External reference */
            Name (WAKG, Zero)
            WAKG = WWKP /* External reference */
            Name (SCLK, 0x02)
            Name (WKEN, Zero)
            Name (WOFF, Zero)
            Name (OFEN, One)
            Name (ONEN, Zero)
            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
            {
                If ((WRTO == 0x03))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                }
            }

            If ((WWEN == 0x02))
            {
                PowerResource (PXP5, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }

                        Return (PSTA ())
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        Local0 = Acquire (\WWMT, 0x03E8)
                        If ((Local0 == Zero))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Release (\WWMT)
                                Return (Zero)
                            }

                            If ((OFEN == One))
                            {
                                Release (\WWMT)
                                Return (Zero)
                            }

                            \_SB.SHPO (WAKG, One)
                            PON5 ()
                            L23D ()
                            If (CondRefOf (WOFF))
                            {
                                If ((WOFF != Zero))
                                {
                                    WOFF = Zero
                                    Sleep (TR2P)
                                }
                            }

                            OFEN = One
                            Release (\WWMT)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        Local0 = Acquire (\WWMT, 0x03E8)
                        If ((Local0 == Zero))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                Release (\WWMT)
                                Return (Zero)
                            }

                            If ((OFEN == Zero))
                            {
                                Release (\WWMT)
                                Return (Zero)
                            }

                            DL23 ()
                            POF5 ()
                            WKEN = Zero
                            OFEN = Zero
                            Release (\WWMT)
                        }
                    }
                }

                Method (PON5, 0, Serialized)
                {
                    \_SB.PSD0 (SLOT)
                    If (CondRefOf (WOFF))
                    {
                        If ((WOFF != Zero))
                        {
                            Local0 = ((Timer - WOFF) / 0x2710)
                            If ((Local0 < TFDI))
                            {
                                Sleep ((TFDI - Local0))
                            }

                            If (CondRefOf (PWRG))
                            {
                                \PIN.ON (PWRG)
                            }

                            Sleep (TN2B)
                            If (CondRefOf (BRST))
                            {
                                \PINP.OFF (BRST)
                            }

                            Sleep (TB2R)
                        }
                    }

                    If (CondRefOf (SCLK))
                    {
                        SPCO (SCLK, One)
                    }

                    \PIN.OFF (RSTG)
                }

                Method (POF5, 0, Serialized)
                {
                    \PIN.ON (RSTG)
                    \_SB.PSD3 (SLOT)
                    If (CondRefOf (SCLK))
                    {
                        SPCO (SCLK, Zero)
                        Sleep (0x10)
                    }

                    If ((WKEN == Zero))
                    {
                        Sleep (TR2B)
                        If (CondRefOf (BRST))
                        {
                            \PINP.ON (BRST)
                        }

                        Sleep (TB2F)
                        If (CondRefOf (PWRG))
                        {
                            \PIN.OFF (PWRG)
                        }

                        If (CondRefOf (WOFF))
                        {
                            WOFF = Timer
                        }
                    }

                    If (CondRefOf (WAKG))
                    {
                        If (((WAKG != Zero) && WKEN))
                        {
                            \_SB.SHPO (WAKG, Zero)
                        }
                        Else
                        {
                            \_SB.SHPO (WAKG, One)
                        }
                    }
                }

                Scope (PXSX)
                {
                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        Local0 = Zero
                        While ((\_SB.PC00.RP01.LASX == Zero))
                        {
                            If ((Local0 > 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                    }
                }
            }
            Else
            {
                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }

                        Return (PSTA ())
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }

                        If ((ONEN == Zero))
                        {
                            Return (Zero)
                        }

                        \_SB.SHPO (WAKG, One)
                        If (CondRefOf (WOFF))
                        {
                            If ((WOFF != Zero))
                            {
                                Local0 = ((Timer - WOFF) / 0x2710)
                                If ((Local0 < 0x01F4))
                                {
                                    Sleep ((0x01F4 - Local0))
                                }
                            }
                        }

                        PON ()
                        L23D ()
                        If (CondRefOf (WOFF))
                        {
                            If ((WOFF != Zero))
                            {
                                WOFF = Zero
                                Sleep (0x01F4)
                            }
                        }

                        OFEN = One
                        ONEN = Zero
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }

                        If ((OFEN == Zero))
                        {
                            Return (Zero)
                        }

                        DL23 ()
                        POFF ()
                        If ((WKEN == Zero))
                        {
                            \PINP.ON (BRST)
                            Sleep (0x02)
                            \PIN.OFF (PWRG)
                            If (CondRefOf (WOFF))
                            {
                                WOFF = Timer
                            }
                        }

                        If (CondRefOf (WAKG))
                        {
                            If (((WAKG != Zero) && WKEN))
                            {
                                \_SB.SHPO (WAKG, Zero)
                            }
                            Else
                            {
                                \_SB.SHPO (WAKG, One)
                            }
                        }

                        WKEN = Zero
                        OFEN = Zero
                        ONEN = One
                    }
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If (CondRefOf (PWRG))
                {
                    If (!\PIN.STA (PWRG))
                    {
                        Return (Zero)
                    }
                }

                If (\PIN.STA (RSTG))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (PON, 0, NotSerialized)
            {
                \_SB.PSD0 (SLOT)
                If (CondRefOf (WOFF))
                {
                    If ((WOFF != Zero))
                    {
                        If (CondRefOf (PWRG))
                        {
                            \PIN.ON (PWRG)
                            Sleep (PEP0)
                        }

                        \PINP.OFF (BRST)
                        Sleep (0x14)
                    }
                    Else
                    {
                        Stall (0x14)
                    }
                }
                Else
                {
                    Stall (0x14)
                }

                If (CondRefOf (SCLK))
                {
                    SPCO (SCLK, One)
                }

                If (CondRefOf (WOFF))
                {
                    If ((WOFF != Zero))
                    {
                        Sleep (0x64)
                    }
                }

                \PIN.OFF (RSTG)
            }

            Method (POFF, 0, NotSerialized)
            {
                \PIN.ON (RSTG)
                \_SB.PSD3 (SLOT)
                If (CondRefOf (SCLK))
                {
                    SPCO (SCLK, Zero)
                    If (\_SB.PC00.RP01.PXSX.ISQC ())
                    {
                        Sleep (0x1E)
                    }
                    Else
                    {
                        Sleep (0x10)
                    }
                }
            }

            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
            {
                If ((WWEN == 0x02))
                {
                    Return (Package (0x01)
                    {
                        PXP5
                    })
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            If ((WRTO == 0x03))
            {
                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If ((WWEN == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            PXP5
                        })
                    }
                    Else
                    {
                        Return (Package (0x01)
                        {
                            PXP
                        })
                    }
                }
            }
        }

        Scope (\_SB.PC00.XHCI.RHUB.HS02)
        {
            PowerResource (WWPR, 0x00, 0x0000)
            {
                Name (_STA, One)  // _STA: Status
                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    _STA = One
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    _STA = Zero
                }
            }

            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                WWPR
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                WWPR
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                WWPR
            })
        }
    }

    If ((\_SB.PC00.RP05.VDID != 0xFFFFFFFF))
    {
        Scope (\_SB.PC00.RP05)
        {
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (_S4W, 0x04)  // _S4W: S4 Device Wake State
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Scope (PXSX)
            {
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_S4W, 0x04)  // _S4W: S4 Device Wake State
                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                }
            }
        }
    }

    Scope (\_SB.PC00.PEG0)
    {
        Name (RSTG, Package (0x02)
        {
            Zero, 
            Zero
        })
        Name (PWRG, Package (0x02)
        {
            Zero, 
            Zero
        })
        RSTG [Zero] = SD2R /* External reference */
        RSTG [One] = SDR1 /* External reference */
        PWRG [Zero] = SD2P /* External reference */
        PWRG [One] = SDP1 /* External reference */
        Name (WAKG, Zero)
        WAKG = Zero
        Name (WAKP, Zero)
        Name (SCLK, Zero)
        Name (WKEN, Zero)
        Name (WOFF, Zero)
        Name (LNRD, Zero)
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If (CondRefOf (RD3C))
            {
                If ((RD3C == 0x02))
                {
                    Return (0x04)
                }
            }

            Return (Zero)
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            If (Arg1)
            {
                WKEN = One
            }
            ElseIf ((Arg0 && Arg2))
            {
                WKEN = One
            }
            Else
            {
                WKEN = Zero
            }
        }

        Method (PPS0, 0, Serialized)
        {
        }

        Method (PPS3, 0, Serialized)
        {
        }

        PowerResource (PXP, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }

                If ((GPRS () == Zero))
                {
                    Return (Zero)
                }

                Return (PSTA ())
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If ((VDID == 0xFFFFFFFF)) {}
                ElseIf ((GPRS () == Zero)) {}
                Else
                {
                    PON ()
                    L23D ()
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If ((VDID == 0xFFFFFFFF)) {}
                ElseIf ((GPRS () == Zero)) {}
                Else
                {
                    DL23 ()
                    POFF ()
                }
            }
        }

        Method (GPPR, 0, NotSerialized)
        {
            If (CondRefOf (WAKP))
            {
                If (((WAKP != Zero) && (WKEN == Zero)))
                {
                    Return (Zero)
                }
            }

            If (CondRefOf (PCPB))
            {
                If ((PCPB != Zero))
                {
                    Return (Zero)
                }
            }

            If (CondRefOf (DVES))
            {
                If ((DVES () == Zero))
                {
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (GPRS, 0, NotSerialized)
        {
            If ((CondRefOf (PRTP) && (PRTP == 0x04)))
            {
                If (CondRefOf (\HBCL))
                {
                    If (((\HBCL != 0xFF) || (\HBCL <= 0x02)))
                    {
                        If ((\HBCL == SLOT))
                        {
                            Return (Zero)
                        }
                    }
                }
            }

            If ((CondRefOf (PRTP) && (PRTP == 0x02)))
            {
                If (CondRefOf (HBSL))
                {
                    Local0 = ((SLOT - One) / 0x04)
                    If ((HBSL & (One << Local0)))
                    {
                        Return (Zero)
                    }
                }

                If ((CondRefOf (\HBCL) && CondRefOf (\HBPL)))
                {
                    If (((\HBCL != 0xFF) || (\HBCL <= 0x02)))
                    {
                        If ((\HBPL == (SLOT - One)))
                        {
                            Return (Zero)
                        }
                    }
                }
            }

            If (CondRefOf (RD3C))
            {
                If ((RD3C != 0x02))
                {
                    Return (Zero)
                }
            }

            If (CondRefOf (PRMV))
            {
                If ((PRMV == One))
                {
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (PSTA, 0, NotSerialized)
        {
            If (\PIN.STA (RSTG))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }

        Method (PON, 0, NotSerialized)
        {
            If (CondRefOf (CEMP))
            {
                CEMP (One)
            }

            If (CondRefOf (WAKG))
            {
                \_SB.SHPO (WAKG, One)
                \_SB.CAGS (WAKG)
            }

            If (CondRefOf (DHDW))
            {
                DHDW ()
            }

            If ((CondRefOf (PRTP) && (PRTP == 0x02)))
            {
                \_SB.PSD0 (SLOT)
            }

            If (CondRefOf (PWRG))
            {
                If (CondRefOf (WOFF))
                {
                    If ((WOFF != Zero))
                    {
                        Local0 = ((Timer - WOFF) / 0x2710)
                        If ((Local0 < 0xC8))
                        {
                            Sleep ((0xC8 - Local0))
                        }

                        WOFF = Zero
                    }
                }

                \PIN.ON (PWRG)
                Sleep (PEP0)
            }

            If (CondRefOf (SCLK))
            {
                If (CondRefOf (TMCS))
                {
                    SPCX (SCLK, One, TMCS)
                }
                Else
                {
                    SPCO (SCLK, One)
                }
            }

            \PIN.OFF (RSTG)
        }

        Method (POFF, 0, NotSerialized)
        {
            Local1 = (LNRD / 0x03E8)
            Sleep (Local1)
            \PIN.ON (RSTG)
            If ((CondRefOf (PRTP) && (PRTP == 0x02)))
            {
                \_SB.PSD3 (SLOT)
            }

            If (CondRefOf (SCLK))
            {
                If (CondRefOf (TMCS))
                {
                    SPCX (SCLK, Zero, TMCS)
                }
                Else
                {
                    SPCO (SCLK, Zero)
                }
            }

            If (CondRefOf (PWRG))
            {
                If ((GPPR () == One))
                {
                    \PIN.OFF (PWRG)
                }

                If (CondRefOf (WOFF))
                {
                    WOFF = Timer
                }
            }

            If (CondRefOf (WAKG))
            {
                If (((WAKG != Zero) && WKEN))
                {
                    \_SB.SHPO (WAKG, Zero)
                }
            }

            If (CondRefOf (EHDW))
            {
                EHDW ()
            }

            If (CondRefOf (CEMP))
            {
                CEMP (Zero)
            }
        }

        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
        {
            Return (Package (0x01)
            {
                PXP
            })
        }

        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
        {
            Return (Package (0x01)
            {
                PXP
            })
        }

        Method (UPRD, 1, Serialized)
        {
            If ((Arg0 <= 0x2710))
            {
                LNRD = Arg0
            }

            Return (LNRD) /* \_SB_.PC00.PEG0.LNRD */
        }

        Scope (\_SB.PC00.PEG0.PEGP)
        {
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If (CondRefOf (^^RD3C))
                {
                    If ((^^RD3C == 0x02))
                    {
                        Return (0x04)
                    }
                }

                Return (0x03)
            }

            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
            {
                Return (^^_PR0 ())
            }

            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
            {
                Return (^^_PR0 ())
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
            }

            Device (MINI)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (CondRefOf (PAHC))
                    {
                        If (PAHC ())
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }

                Name (_ADR, 0xFFFF)  // _ADR: Address
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    Return (^^^_PR0 ())
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    Return (^^^_PR0 ())
                }
            }
        }
    }
}



SSDT17
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "TcssSsdt", 0x00001000)
{
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.GFX0, DeviceObj)
    External (_SB_.PC00.GMHB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TDM0.SCME, UnknownObj)
    External (_SB_.PC00.TDM1.SCME, UnknownObj)
    External (_SB_.PC01, DeviceObj)
    External (ADBG, MethodObj)    // 1 Arguments
    External (CCPD, MethodObj)    // 2 Arguments
    External (CPWE, UnknownObj)
    External (CPWS, UnknownObj)
    External (CSFR, UnknownObj)
    External (DME0, UnknownObj)
    External (DME1, UnknownObj)
    External (ECR1, UnknownObj)
    External (GPRW, MethodObj)    // 2 Arguments
    External (IMRY, UnknownObj)
    External (ITM0, UnknownObj)
    External (ITM1, UnknownObj)
    External (LTE0, UnknownObj)
    External (LTE1, UnknownObj)
    External (LTE2, UnknownObj)
    External (LTE3, UnknownObj)
    External (OTHC, UnknownObj)
    External (P2PS, UnknownObj)
    External (PCIC, MethodObj)    // 1 Arguments
    External (PCID, MethodObj)    // 4 Arguments
    External (PICM, UnknownObj)
    External (PNS0, UnknownObj)
    External (PNS1, UnknownObj)
    External (PNS2, UnknownObj)
    External (PNS3, UnknownObj)
    External (PSL0, UnknownObj)
    External (PSL1, UnknownObj)
    External (PSL2, UnknownObj)
    External (PSL3, UnknownObj)
    External (REGO, UnknownObj)
    External (TCDS, UnknownObj)
    External (TCIR, UnknownObj)
    External (TCIT, UnknownObj)
    External (TDCE, UnknownObj)
    External (THCE, UnknownObj)
    External (TIVS, UnknownObj)
    External (TPA0, UnknownObj)
    External (TPA1, UnknownObj)
    External (TPA2, UnknownObj)
    External (TPA3, UnknownObj)
    External (TRE0, UnknownObj)
    External (TRE1, UnknownObj)
    External (TRE2, UnknownObj)
    External (TRE3, UnknownObj)
    External (TRTD, UnknownObj)
    External (U4SE, IntObj)
    External (XDAT, MethodObj)    // 0 Arguments

    Name (ITNB, 0x93688000)
    Name (ITNL, 0x0012)
    OperationRegion (ITNV, SystemMemory, ITNB, ITNL)
    Field (ITNV, AnyAcc, Lock, Preserve)
    {
        ITSP,   8, 
        IDM0,   8, 
        IDM1,   8, 
        ITCP,   8, 
        IT0E,   8, 
        IT1E,   8, 
        IT2E,   8, 
        IT3E,   8, 
        IORB,   8, 
        ITRT,   8, 
        ITRE,   16, 
        ITIM,   8, 
        ITFP,   16, 
        ITCT,   16, 
        ITVD,   8
    }

    Scope (\_SB)
    {
        Name (C2PW, Zero)
        Method (C2PM, 4, Serialized)
        {
            Switch (ToInteger (Arg3))
            {
                Case (Zero)
                {
                    Local0 = "Tcss iTbt Pcie 0 RP 0"
                }
                Case (One)
                {
                    Local0 = "Tcss iTbt Pcie 0 RP 1"
                }
                Case (0x02)
                {
                    Local0 = "Tcss iTbt Pcie 0 RP 2"
                }
                Case (0x03)
                {
                    Local0 = "Tcss iTbt Pcie 0 RP 3"
                }
                Case (0x04)
                {
                    Local0 = "Tcss xHci"
                }
                Case (0x05)
                {
                    Local0 = "Tcss xDci"
                }
                Case (0x06)
                {
                    Local0 = "Tcss Dma 0"
                }
                Case (0x07)
                {
                    Local0 = "Tcss Dma 1"
                }
                Case (0x08)
                {
                    Local0 = "Tcss iTbt Pcie 1 RP 0"
                }
                Case (0x09)
                {
                    Local0 = "Tcss iTbt Pcie 1 RP 1"
                }
                Case (0x0A)
                {
                    Local0 = "Tcss iTbt Pcie 1 RP 2"
                }
                Case (0x0B)
                {
                    Local0 = "Tcss iTbt Pcie 1 RP 3"
                }
                Default
                {
                    Return (Zero)
                }

            }

            Local1 = Zero
            Local1 = (One << ToInteger (Arg3))
            ADBG (Concatenate ("Local1 = ", ToHexString (Local1)))
            ADBG (Concatenate ("Before CPU to PCH Wake capability configuration Start from ", Local0))
            ADBG (Concatenate (Local0, Concatenate (" Cpu Wake Status = ", ToHexString (CPWS))))
            ADBG (Concatenate (Local0, Concatenate (" Cpu Wake Enable = ", ToHexString (CPWE))))
            ADBG (Concatenate (Local0, Concatenate (" Cpu To Pch Wake Value = ", ToHexString (C2PW))))
            ADBG (Concatenate ("C2PM ", Local0))
            If ((Arg0 && Arg1))
            {
                If ((CPWE == Zero))
                {
                    If (CPWS)
                    {
                        CPWS = One
                    }

                    CPWE = One
                }

                If (((C2PW & Local1) == Zero))
                {
                    C2PW |= Local1
                }

                ADBG (Concatenate (Local0, " Sx EnWak"))
            }
            ElseIf ((Arg0 || Arg2))
            {
                If ((CPWE == Zero))
                {
                    If (CPWS)
                    {
                        CPWS = One
                    }

                    CPWE = One
                }

                If (((C2PW & Local1) == Zero))
                {
                    C2PW |= Local1
                }

                ADBG (Concatenate (Local0, " D3 En Wak"))
            }
            Else
            {
                If (((C2PW & Local1) != Zero))
                {
                    C2PW &= ~Local1
                }

                If (((CPWE != Zero) && (C2PW == Zero)))
                {
                    CPWE = Zero
                }

                ADBG (Concatenate (Local0, " DisWak"))
            }

            ADBG (Concatenate ("After CPU to PCH Wake capability configuration End from ", Local0))
            ADBG (Concatenate (Local0, Concatenate (" Cpu Wake Status = ", ToHexString (CPWS))))
            ADBG (Concatenate (Local0, Concatenate (" Cpu Wake Enable = ", ToHexString (CPWE))))
            ADBG (Concatenate (Local0, Concatenate (" Cpu To Pch Wake Value = ", ToHexString (C2PW))))
            Local0 = Zero
            Return (Local0)
        }
    }

    Scope (\_SB.PC00)
    {
        OperationRegion (MBAR, SystemMemory, (\_SB.PC00.GMHB () + REGO), 0x1000)
        Field (MBAR, ByteAcc, NoLock, Preserve)
        {
            RBAR,   64
        }

        OperationRegion (PBAR, SystemMemory, (\_SB.PC00.GMHB () + 0x5DA0), 0x08)
        Field (PBAR, DWordAcc, NoLock, Preserve)
        {
            PMBD,   32, 
            PMBC,   8, 
            PSCM,   8, 
                ,   15, 
            PMBR,   1
        }

        Method (PMBY, 0, NotSerialized)
        {
            Local0 = Zero
            While ((PMBR && (Local0 < 0x03E8)))
            {
                Local0++
                Stall (One)
            }

            If ((Local0 == 0x03E8))
            {
                Return (0xFF)
            }

            Return (Zero)
        }

        Method (IOMA, 0, NotSerialized)
        {
            Return ((^RBAR & 0xFFFFFFFFFFFFFFFE))
        }

        Method (PIDS, 0, NotSerialized)
        {
            Return (0x00C10000)
        }

        OperationRegion (IOMR, SystemMemory, (IOMA () + PIDS ()), 0x0100)
        Field (IOMR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x40), 
                ,   15, 
            TD3C,   1, 
            TACK,   1, 
            DPOF,   1, 
            Offset (0x70), 
            IMCD,   32, 
            IMDA,   32
        }

        Method (IMMD, 1, NotSerialized)
        {
            IMDA = Arg0
            ADBG (Concatenate ("IMMD :: ", ToHexString (IMDA)))
            Return (Zero)
        }

        Method (IMMC, 5, Serialized)
        {
            Name (OPTS, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            CreateByteField (OPTS, Zero, CMST)
            CreateByteField (OPTS, One, RTB1)
            IMMD (Arg4)
            Local1 = Arg3
            Local1 <<= 0x08
            Local1 += Arg2
            Local1 <<= 0x08
            Local1 += Arg0
            IMCD = Local1
            ADBG (Concatenate ("Set IMMC Command ", ToHexString (IMCD)))
            IMCD |= 0x80000000
            ADBG (Concatenate ("Set IMMC Run Bit ", ToHexString (IMCD)))
            Local0 = Arg1
            ADBG (Concatenate ("IMMC Delay ", ToHexString (Local0)))
            While ((((IMCD & 0x80000000) != Zero) && (Local0 != 
                Zero)))
            {
                Sleep (One)
                Local0--
            }

            Switch (ToInteger (Arg0))
            {
                Case (0x02)
                {
                    ADBG ("GEM_SB_TRAN_CMD")
                    Return (Zero)
                }
                Case (0x03)
                {
                    ADBG ("IOM_BIOS_MBX_GET_HPD_COUNT")
                    If (((IMCD & 0x80000000) != Zero))
                    {
                        ADBG ("Timeout!")
                        ADBG (Concatenate ("IOM MB CMD Reg ", ToHexString (IMCD)))
                        ADBG (Concatenate ("IOM MB DATA Reg ", ToHexString (IMDA)))
                        CMST = One
                        Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                    }
                    ElseIf (((IMCD & 0xFF) != Zero))
                    {
                        ADBG ("Completion Code Fail")
                        ADBG (Concatenate ("IOM MB CMD Reg ", ToHexString (IMCD)))
                        CMST = One
                    }
                    Else
                    {
                        ADBG ("Passed")
                        ADBG (Concatenate ("IOM MB CMD Reg :: ", ToHexString (IMCD)))
                        ADBG (Concatenate ("IOM MB DATA Reg :: ", ToHexString (IMDA)))
                        ADBG (Concatenate ("Arg2 is Port Number :: ", ToHexString (Arg2)))
                        CMST = Zero
                        RTB1 = IMDA /* \_SB_.PC00.IMDA */
                    }

                    Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                }
                Case (0x06)
                {
                    ADBG ("BIOS_MBX_DEC_HPD_COUNT")
                    RTB1 = Zero
                    If (((IMCD & 0x80000000) != Zero))
                    {
                        ADBG ("Timeout!")
                        CMST = One
                    }
                    ElseIf (((IMCD & 0xFF) != Zero))
                    {
                        ADBG ("Completion Code Fail")
                        ADBG (Concatenate ("IOM MB CMD Reg ", ToHexString (IMCD)))
                        CMST = One
                        RTB1 = IMDA /* \_SB_.PC00.IMDA */
                    }
                    Else
                    {
                        ADBG ("Passed")
                        CMST = Zero
                    }

                    Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                }
                Default
                {
                    CMST = One
                    Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                }

            }
        }

        Name (CTP0, Zero)
        Name (CTP1, Zero)
        Method (TG0N, 0, NotSerialized)
        {
            ADBG ("TG0N Start")
            ADBG (Concatenate ("DMA0 VDID -", ToHexString (\_SB.PC00.TDM0.VDID)))
            ADBG (Concatenate ("DMA0 PMST -", ToHexString (\_SB.PC00.TDM0.PMST)))
            ADBG (Concatenate ("DMA0 PMEE -", ToHexString (\_SB.PC00.TDM0.PMEE)))
            ADBG (Concatenate ("DMA0 PMES -", ToHexString (\_SB.PC00.TDM0.PMES)))
            ADBG (Concatenate ("DMA0 STAT -", ToHexString (\_SB.PC00.TDM0.STAT)))
            If ((\_SB.PC00.TDM0.VDID != 0xFFFFFFFF))
            {
                If ((\_SB.PC00.TDM0.STAT == Zero))
                {
                    \_SB.PC00.TDM0.D3CX ()
                    ADBG ("Let\'s bring TBT RPs out of D3Cold")
                    If (CondRefOf (\_SB.PC01))
                    {
                        If ((\_SB.PC01.TRP0.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC01.TRP0.D3CX ()
                        }

                        If ((\_SB.PC01.TRP1.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC01.TRP1.D3CX ()
                        }
                    }
                    Else
                    {
                        If ((\_SB.PC00.TRP0.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC00.TRP0.D3CX ()
                        }

                        If ((\_SB.PC00.TRP1.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC00.TRP1.D3CX ()
                        }
                    }

                    If ((\_SB.PC00.TDM0.ALCT == One))
                    {
                        If ((CTP0 == One))
                        {
                            \_SB.PC00.TDM0.CNTP ()
                            \_SB.PC00.TDM0.WACT = One
                            CTP0 = Zero
                        }

                        \_SB.PC00.TDM0.ALCT = Zero
                    }
                }
                Else
                {
                    ADBG ("Drop TG0N due to it is already exit D3 cold")
                }

                Sleep (ITRE)
            }

            ADBG ("TG0N End")
        }

        Method (TG0F, 0, NotSerialized)
        {
            ADBG ("TG0F Start")
            ADBG (Concatenate ("DMA0 VDID -", ToHexString (\_SB.PC00.TDM0.VDID)))
            ADBG (Concatenate ("DMA0 PMST -", ToHexString (\_SB.PC00.TDM0.PMST)))
            ADBG (Concatenate ("DMA0 PMEE -", ToHexString (\_SB.PC00.TDM0.PMEE)))
            ADBG (Concatenate ("DMA0 PMES -", ToHexString (\_SB.PC00.TDM0.PMES)))
            ADBG (Concatenate ("DMA0 STAT -", ToHexString (\_SB.PC00.TDM0.STAT)))
            ADBG (Concatenate ("DMA0 IFWR -", ToHexString (\_SB.PC00.TDM0.IFWR ())))
            ADBG (Concatenate ("DMA0 ITBT FW Version BIT30 -", ToHexString (\_SB.PC00.TDM0.IV30 ())))
            If ((\_SB.PC00.TDM0.VDID != 0xFFFFFFFF))
            {
                If ((\_SB.PC00.TDM0.STAT == One))
                {
                    \_SB.PC00.TDM0.D3CE ()
                    If ((\_SB.PC00.TDM0.IV30 () != One))
                    {
                        ADBG ("TG0F-IFVR: iTBT FW Version BIT30 is not Set. Exit iTBT RP AND DMA Group0 RTD3")
                        ADBG ("TG0F End")
                        Return (Zero)
                    }

                    ADBG ("Let\'s push TBT RPs to D3Cold together")
                    If (CondRefOf (\_SB.PC01))
                    {
                        If ((\_SB.PC01.TRP0.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC01.TRP0.PDSX -", ToHexString (\_SB.PC01.TRP0.PDSX)))
                            If ((\_SB.PC01.TRP0.PDSX == One))
                            {
                                CTP0 = One
                            }

                            \_SB.PC01.TRP0.D3CE ()
                        }

                        If ((\_SB.PC01.TRP1.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC01.TRP1.PDSX -", ToHexString (\_SB.PC01.TRP1.PDSX)))
                            If ((\_SB.PC01.TRP1.PDSX == One))
                            {
                                CTP0 = One
                            }

                            \_SB.PC01.TRP1.D3CE ()
                        }
                    }
                    Else
                    {
                        If ((\_SB.PC00.TRP0.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC00.TRP0.PDSX -", ToHexString (\_SB.PC00.TRP0.PDSX)))
                            If ((\_SB.PC00.TRP0.PDSX == One))
                            {
                                CTP0 = One
                            }

                            \_SB.PC00.TRP0.D3CE ()
                        }

                        If ((\_SB.PC00.TRP1.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC00.TRP1.PDSX -", ToHexString (\_SB.PC00.TRP1.PDSX)))
                            If ((\_SB.PC00.TRP1.PDSX == One))
                            {
                                CTP0 = One
                            }

                            \_SB.PC00.TRP1.D3CE ()
                        }
                    }
                }
            }

            ADBG ("TG0F End")
        }

        Method (TG1N, 0, NotSerialized)
        {
            ADBG ("TG1N Start")
            ADBG (Concatenate ("DMA1 VDID -", ToHexString (\_SB.PC00.TDM1.VDID)))
            ADBG (Concatenate ("DMA1 PMST -", ToHexString (\_SB.PC00.TDM1.PMST)))
            ADBG (Concatenate ("DMA1 PMEE -", ToHexString (\_SB.PC00.TDM1.PMEE)))
            ADBG (Concatenate ("DMA1 PMES -", ToHexString (\_SB.PC00.TDM1.PMES)))
            ADBG (Concatenate ("DMA1 STAT -", ToHexString (\_SB.PC00.TDM1.STAT)))
            If ((\_SB.PC00.TDM1.VDID != 0xFFFFFFFF))
            {
                If ((\_SB.PC00.TDM1.STAT == Zero))
                {
                    \_SB.PC00.TDM1.D3CX ()
                    ADBG ("Let\'s bring TBT RPs out of D3Cold")
                    If (CondRefOf (\_SB.PC01))
                    {
                        If ((\_SB.PC01.TRP2.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC01.TRP2.D3CX ()
                        }

                        If ((\_SB.PC01.TRP3.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC01.TRP3.D3CX ()
                        }
                    }
                    Else
                    {
                        If ((\_SB.PC00.TRP2.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC00.TRP2.D3CX ()
                        }

                        If ((\_SB.PC00.TRP3.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC00.TRP3.D3CX ()
                        }
                    }

                    If ((\_SB.PC00.TDM1.ALCT == One))
                    {
                        If ((CTP1 == One))
                        {
                            \_SB.PC00.TDM1.CNTP ()
                            \_SB.PC00.TDM1.WACT = One
                            CTP1 = Zero
                        }

                        \_SB.PC00.TDM1.ALCT = Zero
                    }
                }
                Else
                {
                    ADBG ("Drop TG1N due to it is already exit D3 cold")
                }

                Sleep (ITRE)
            }

            ADBG ("TG1N End")
        }

        Method (TG1F, 0, NotSerialized)
        {
            ADBG ("TG1F Start")
            ADBG (Concatenate ("DMA1 VDID -", ToHexString (\_SB.PC00.TDM1.VDID)))
            ADBG (Concatenate ("DMA1 PMST -", ToHexString (\_SB.PC00.TDM1.PMST)))
            ADBG (Concatenate ("DMA1 PMEE -", ToHexString (\_SB.PC00.TDM1.PMEE)))
            ADBG (Concatenate ("DMA1 PMES -", ToHexString (\_SB.PC00.TDM1.PMES)))
            ADBG (Concatenate ("DMA1 STAT -", ToHexString (\_SB.PC00.TDM1.STAT)))
            ADBG (Concatenate ("DMA1 IFWR -", ToHexString (\_SB.PC00.TDM1.IFWR ())))
            ADBG (Concatenate ("DMA1 ITBT FW Version BIT30 -", ToHexString (\_SB.PC00.TDM1.IV30 ())))
            If ((\_SB.PC00.TDM1.VDID != 0xFFFFFFFF))
            {
                If ((\_SB.PC00.TDM1.STAT == One))
                {
                    \_SB.PC00.TDM1.D3CE ()
                    If ((\_SB.PC00.TDM1.IV30 () != One))
                    {
                        ADBG ("TG1F-IFVR: iTBT FW Version BIT30 is not Set. Exit iTBT RP AND DMA Group1 RTD3")
                        ADBG ("TG1F End")
                        Return (Zero)
                    }

                    ADBG ("Let\'s push TBT RPs to D3Cold together")
                    If (CondRefOf (\_SB.PC01))
                    {
                        If ((\_SB.PC01.TRP2.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC01.TRP2.PDSX -", ToHexString (\_SB.PC01.TRP2.PDSX)))
                            If ((\_SB.PC01.TRP2.PDSX == One))
                            {
                                CTP1 = One
                            }

                            \_SB.PC01.TRP2.D3CE ()
                        }

                        If ((\_SB.PC01.TRP3.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC01.TRP3.PDSX -", ToHexString (\_SB.PC01.TRP3.PDSX)))
                            If ((\_SB.PC01.TRP3.PDSX == One))
                            {
                                CTP1 = One
                            }

                            \_SB.PC01.TRP3.D3CE ()
                        }
                    }
                    Else
                    {
                        If ((\_SB.PC00.TRP2.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC00.TRP2.PDSX -", ToHexString (\_SB.PC00.TRP2.PDSX)))
                            If ((\_SB.PC00.TRP2.PDSX == One))
                            {
                                CTP1 = One
                            }

                            \_SB.PC00.TRP2.D3CE ()
                        }

                        If ((\_SB.PC00.TRP3.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC00.TRP3.PDSX -", ToHexString (\_SB.PC00.TRP3.PDSX)))
                            If ((\_SB.PC00.TRP3.PDSX == One))
                            {
                                CTP1 = One
                            }

                            \_SB.PC00.TRP3.D3CE ()
                        }
                    }
                }
            }

            ADBG ("TG1F End")
        }

        If (ITRT)
        {
            Method (TBON, 1, NotSerialized)
            {
                If (ITIM)
                {
                    If ((Arg0 == Zero))
                    {
                        ADBG ("TBT0 Group ON Start")
                        TG0N ()
                        ADBG ("TBT0 Group ON End")
                    }
                    Else
                    {
                        ADBG ("TBT1 Group ON Start")
                        TG1N ()
                        ADBG ("TBT1 Group ON End")
                    }
                }
                Else
                {
                    ADBG ("TBT IMR is not valid")
                }
            }

            Method (TBOF, 1, NotSerialized)
            {
                If (ITIM)
                {
                    If ((Arg0 == Zero))
                    {
                        ADBG ("TBT0 Group OFF Start")
                        ADBG (Concatenate ("Skip D3C entry? ", ToHexString (\_SB.PC00.TDM0.SD3C)))
                        If ((\_SB.PC00.TDM0.SD3C == Zero))
                        {
                            TG0F ()
                        }

                        ADBG ("TBT0 Group OFF End")
                    }
                    Else
                    {
                        ADBG ("TBT1 Group OFF Start")
                        ADBG (Concatenate ("Skip D3C entry? ", ToHexString (\_SB.PC00.TDM1.SD3C)))
                        If ((\_SB.PC00.TDM1.SD3C == Zero))
                        {
                            TG1F ()
                        }

                        ADBG ("TBT1 Group OFF End")
                    }
                }
                Else
                {
                    ADBG ("TBT IMR is not valid")
                }
            }

            PowerResource (TBT0, 0x05, 0x0001)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("DMA0 D3C STAT -", ToHexString (\_SB.PC00.TDM0.STAT)))
                    Return (\_SB.PC00.TDM0.STAT)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("TBT0 _ON")
                    If ((\_SB.PC00.TDM0.SCME == Zero))
                    {
                        TBON (Zero)
                    }
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("TBT0 _OFF")
                    If ((\_SB.PC00.TDM0.SCME == Zero))
                    {
                        TBOF (Zero)
                    }
                }
            }

            PowerResource (TBT1, 0x05, 0x0001)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("DMA1 D3C STAT -", ToHexString (\_SB.PC00.TDM1.STAT)))
                    Return (\_SB.PC00.TDM1.STAT)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("TBT1 _ON")
                    If ((\_SB.PC00.TDM1.SCME == Zero))
                    {
                        TBON (One)
                    }
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("TBT1 _OFF")
                    If ((\_SB.PC00.TDM1.SCME == Zero))
                    {
                        TBOF (One)
                    }
                }
            }
        }

        If (TRTD)
        {
            Method (TCON, 0, NotSerialized)
            {
                ADBG ("TCSS ON")
                ADBG ("TCON")
                If ((TD3C == One))
                {
                    ADBG (Concatenate ("TACK before D3 cold exit -", ToHexString (TACK)))
                    TD3C = Zero
                    Local0 = Zero
                    While (((TACK != Zero) && (Local0 < 0x64)))
                    {
                        Sleep (One)
                        Local0++
                    }

                    ADBG (Concatenate ("TACK after D3 cold exit -", ToHexString (TACK)))
                    ADBG (Concatenate ("Time for wait TACK - ", ToHexString (Local0)))
                    If ((Local0 == 0x64))
                    {
                        ADBG ("Error: Timeout occurred")
                    }
                    Else
                    {
                        ADBG ("D3Cold Exit")
                        If (((TDCE == One) && (IMRY == One)))
                        {
                            ADBG ("IOM.D3.TDCE")
                            \_SB.PC00.TXDC.SINT (TCIT, TCIR)
                            ADBG ("IOM.D3.TDCE Done")
                        }
                    }
                }
                Else
                {
                    ADBG ("Drop TCON due to it is already exit D3 cold")
                    Return (Zero)
                }

                ADBG ("TCSS ON End")
            }

            Method (TCOF, 0, NotSerialized)
            {
                ADBG ("TCSS OFF Start")
                ADBG ("TCOF")
                ADBG (Concatenate ("DMA0 Skip D3C entry? ", ToHexString (\_SB.PC00.TDM0.SD3C)))
                ADBG (Concatenate ("DMA1 Skip D3C entry? ", ToHexString (\_SB.PC00.TDM1.SD3C)))
                ADBG (Concatenate ("XHCI Skip D3C entry? ", ToHexString (\_SB.PC00.TXHC.SD3C)))
                If (((\_SB.PC00.TXHC.SD3C != Zero) || ((\_SB.PC00.TDM0.SD3C != Zero) || 
                    (\_SB.PC00.TDM1.SD3C != Zero))))
                {
                    Return (Zero)
                }

                ADBG ("D3Cold Entry")
                TD3C = One
                ADBG (Concatenate ("IOM D3Cold -", ToHexString (TD3C)))
                ADBG ("TCSS OFF End")
            }

            PowerResource (D3C, 0x05, 0x0000)
            {
                Name (STAT, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS D3C STAT -", ToHexString (STAT)))
                    Return (STAT) /* \_SB_.PC00.D3C_.STAT */
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.PC00.TCON ()
                    STAT = One
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.PC00.TCOF ()
                    STAT = Zero
                }
            }
        }

        Device (TXHC)
        {
            Name (_ADR, 0x000D0000)  // _ADR: Address
            Name (_DDN, "ICL North XHCI controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("ICL North XHCI controller"))  // _STR: Description String
            Name (DCPM, 0x04)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("TCSS xHCI _STA", ToHexString (THCE)))
                If ((THCE == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (BASE, 0, NotSerialized)
            {
                Local0 = (_ADR & 0x07)
                Local1 = ((_ADR >> 0x10) & 0x1F)
                Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                Local3 = (\_SB.PC00.GPCB () + Local2)
                ADBG (Concatenate ("CPU XHCI PCIe MMIO Address", ToHexString (Local3)))
                Return (Local3)
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG ("CPU XHCI _PS0 Start")
                If ((\_SB.PC00.TXHC.PMEE == One))
                {
                    ADBG ("Clear PME_EN of CPU XHCI")
                    \_SB.PC00.TXHC.PMEE = Zero
                }

                ADBG ("CPU XHCI _PS0 End")
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG ("CPU XHCI _PS3 Start")
                If ((\_SB.PC00.TXHC.PMEE == Zero))
                {
                    ADBG ("PME_EN was not set. Set PME_EN of CPU XHCI")
                    \_SB.PC00.TXHC.PMEE = One
                }

                ADBG ("CPU XHCI _PS3 End")
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If (TRTD)
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x03)
                }
            }

            Name (SD3C, Zero)
            If (TRTD)
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    Return (Package (0x01)
                    {
                        \_SB.PC00.D3C
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    Return (Package (0x01)
                    {
                        \_SB.PC00.D3C
                    })
                }
            }

            OperationRegion (XPRT, SystemMemory, BASE (), 0x0100)
            Field (XPRT, ByteAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x74), 
                D0D3,   2, 
                Offset (0x75), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (XFLT, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("XHCI _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x03)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x03)
            }

            Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
            {
                Return (0x03)
            }

            Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG ("TCSS XHCI _DSW")
                ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                ADBG (Concatenate ("Arg2 -", ToHexString (Arg2)))
                C2PM (Arg0, Arg1, Arg2, DCPM)
                SD3C = Arg1
                ADBG (Concatenate ("SD3C -", ToHexString (SD3C)))
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (TPLD, 2, Serialized)
                {
                    Name (PCKG, Package (0x01)
                    {
                        Buffer (0x10) {}
                    })
                    CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                    REV = One
                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                    VISI = Arg0
                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                    GPOS = Arg1
                    CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                    SHAP = One
                    CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                    WID = 0x08
                    CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                    HGT = 0x03
                    Return (PCKG) /* \_SB_.PC00.TXHC.RHUB.TPLD.PCKG */
                }

                Method (TUPC, 2, Serialized)
                {
                    Name (PCKG, Package (0x04)
                    {
                        One, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    PCKG [Zero] = Arg0
                    PCKG [One] = Arg1
                    Return (PCKG) /* \_SB_.PC00.TXHC.RHUB.TUPC.PCKG */
                }

                Device (HS01)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (CCPD (Zero, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (CCPD (Zero, 0x02))
                    }
                }

                Device (SS01)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (CCPD (One, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (CCPD (One, 0x02))
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("_DSM U1/2")
                        If ((Arg0 == ToUUID ("ce2ee385-00e6-48cb-9f05-2edb927c4899") /* USB Controller */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    ADBG ("_DSM U1/2 F0")
                                    If ((Arg1 == Zero))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x21                                             // !
                                        })
                                    }
                                }
                                Case (0x05)
                                {
                                    ADBG ("_DSM U1/2 F5: U1/2=1")
                                    Return (One)
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    If (CondRefOf (U4SE))
                    {
                        If ((U4SE == One))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                ADBG ("XHC SS01 _DSD")
                                Return (Package (0x02)
                                {
                                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                    Package (0x02)
                                    {
                                        Package (0x02)
                                        {
                                            "usb4-host-interface", 
                                            \_SB.PC00.TDM0
                                        }, 

                                        Package (0x02)
                                        {
                                            "usb4-port-number", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Device (SS02)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (CCPD (0x02, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (CCPD (0x02, 0x02))
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("_DSM U1/2")
                        If ((Arg0 == ToUUID ("ce2ee385-00e6-48cb-9f05-2edb927c4899") /* USB Controller */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    ADBG ("_DSM U1/2 F0")
                                    If ((Arg1 == Zero))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x21                                             // !
                                        })
                                    }
                                }
                                Case (0x05)
                                {
                                    ADBG ("_DSM U1/2 F5: U1/2=1")
                                    Return (One)
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    If (CondRefOf (U4SE))
                    {
                        If ((U4SE == One))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                ADBG ("XHC SS02 _DSD")
                                Return (Package (0x02)
                                {
                                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                    Package (0x02)
                                    {
                                        Package (0x02)
                                        {
                                            "usb4-host-interface", 
                                            \_SB.PC00.TDM0
                                        }, 

                                        Package (0x02)
                                        {
                                            "usb4-port-number", 
                                            One
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Device (SS03)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (CCPD (0x03, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (CCPD (0x03, 0x02))
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("_DSM U1/2")
                        If ((Arg0 == ToUUID ("ce2ee385-00e6-48cb-9f05-2edb927c4899") /* USB Controller */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    ADBG ("_DSM U1/2 F0")
                                    If ((Arg1 == Zero))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x21                                             // !
                                        })
                                    }
                                }
                                Case (0x05)
                                {
                                    ADBG ("_DSM U1/2 F5: U1/2=1")
                                    Return (One)
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    If (CondRefOf (U4SE))
                    {
                        If ((U4SE == One))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                ADBG ("XHC SS03 _DSD")
                                Return (Package (0x02)
                                {
                                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                    Package (0x02)
                                    {
                                        Package (0x02)
                                        {
                                            "usb4-host-interface", 
                                            \_SB.PC00.TDM1
                                        }, 

                                        Package (0x02)
                                        {
                                            "usb4-port-number", 
                                            0x02
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Device (SS04)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (CCPD (0x04, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (CCPD (0x04, 0x02))
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("_DSM U1/2")
                        If ((Arg0 == ToUUID ("ce2ee385-00e6-48cb-9f05-2edb927c4899") /* USB Controller */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    ADBG ("_DSM U1/2 F0")
                                    If ((Arg1 == Zero))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x21                                             // !
                                        })
                                    }
                                }
                                Case (0x05)
                                {
                                    ADBG ("_DSM U1/2 F5: U1/2=1")
                                    Return (One)
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    If (CondRefOf (U4SE))
                    {
                        If ((U4SE == One))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                ADBG ("XHC SS04 _DSD")
                                Return (Package (0x02)
                                {
                                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                    Package (0x02)
                                    {
                                        Package (0x02)
                                        {
                                            "usb4-host-interface", 
                                            \_SB.PC00.TDM1
                                        }, 

                                        Package (0x02)
                                        {
                                            "usb4-port-number", 
                                            0x03
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG ("TCSS RHUB XHCI PS0")
                }

                Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                {
                    ADBG ("TCSS RHUB XHCI PS2")
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG ("TCSS RHUB XHCI PS3")
                }
            }
        }

        If ((TDCE == One))
        {
            Device (TXDC)
            {
                Name (_ADR, 0x000D0001)  // _ADR: Address
                Name (_DDN, "ICL North XDCI controller")  // _DDN: DOS Device Name
                Name (_STR, Unicode ("ICL North XDCI controller"))  // _STR: Description String
                Name (DCPM, 0x05)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS xDCI _STA", ToHexString (TDCE)))
                    If ((TDCE == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (SINT, 2, Serialized)
                {
                    ADBG ("xDCI.SINT")
                    If ((IMRY == One))
                    {
                        Local0 = (Arg0 << 0x08)
                        Local1 = (Arg1 << 0x14)
                        Local0 += Local1
                        ADBG (Concatenate ("TCSS xDCI SINT", ToHexString (Local0)))
                        IMMC (0x02, Zero, One, Zero, Local0)
                    }
                    Else
                    {
                        ADBG ("IOM not ready")
                    }

                    ADBG ("xDCI.SINT Done")
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x03)
                }

                OperationRegion (XDCS, PCI_Config, Zero, 0x0100)
                Field (XDCS, DWordAcc, NoLock, Preserve)
                {
                    DVID,   16, 
                    Offset (0x10), 
                    XDCB,   64
                }

                Field (XDCS, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    D0I3,   2, 
                    Offset (0x85), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1
                }

                Method (XDBA, 0, NotSerialized)
                {
                    Return ((^XDCB & 0xFFFFFFFFFFFFFF00))
                }

                OperationRegion (XDMM, SystemMemory, XDBA (), 0x00110000)
                Field (XDMM, WordAcc, NoLock, Preserve)
                {
                    Offset (0xC110), 
                    GCTL,   32, 
                    Offset (0x10F810), 
                    Offset (0x10F811), 
                    U2CP,   2, 
                    U3CP,   2, 
                    Offset (0x10F818), 
                    PUPS,   2, 
                        ,   1, 
                    PURC,   1, 
                    Offset (0x10F81A), 
                    Offset (0x10F81C), 
                        ,   3, 
                    UXPE,   2, 
                    Offset (0x10F81E)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    ADBG ("TXDC DSM")
                    If ((Arg0 == ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511") /* Unknown UUID */))
                    {
                        If ((Arg1 == One))
                        {
                            Method (SPPT, 2, Serialized)
                            {
                                ADBG ("TXDC Set PMU Power State")
                                Local1 = Arg0
                                Local2 = Arg1
                                If ((Local1 == Zero))
                                {
                                    ADBG ("TXDC PMU D0")
                                    UXPE = Zero
                                    Local0 = Zero
                                    While ((Local0 < 0x0A))
                                    {
                                        Stall (0x64)
                                        Local0++
                                    }

                                    PUPS = Zero
                                    Local0 = Zero
                                    While ((Local0 < 0x07D0))
                                    {
                                        Stall (0x64)
                                        If (((U2CP == Zero) && (U3CP == Zero)))
                                        {
                                            Break
                                        }

                                        Local0++
                                    }

                                    If ((U2CP != Zero))
                                    {
                                        ADBG ("TXDC U2 not in D0")
                                    }

                                    If ((U3CP != Zero))
                                    {
                                        ADBG ("TXDC U3 not in D0")
                                    }

                                    Return (Zero)
                                }

                                If ((Local1 == 0x03))
                                {
                                    ADBG ("TXDC PMU D3")
                                    If ((U2CP != Zero))
                                    {
                                        ADBG ("TXDC U2 not in D0")
                                    }

                                    If ((U3CP != Zero))
                                    {
                                        ADBG ("TXDC U3 not in D0")
                                    }

                                    PUPS = 0x03
                                    Local0 = Zero
                                    While ((Local0 < 0x07D0))
                                    {
                                        Stall (0x64)
                                        If (((U2CP == 0x03) && (U3CP == 0x03)))
                                        {
                                            Break
                                        }

                                        Local0++
                                    }

                                    If ((U2CP != 0x03))
                                    {
                                        ADBG ("TXDC U2 not in D3")
                                    }

                                    If ((U3CP != 0x03))
                                    {
                                        ADBG ("TXDC U3 not in D3")
                                    }

                                    UXPE = Local2
                                    Return (Zero)
                                }

                                Return (Zero)
                            }

                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    ADBG ("TXDC Fn0")
                                    Return (Buffer (0x02)
                                    {
                                         0xF3, 0x03                                       // ..
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("TXDC Fn1")
                                    Return (One)
                                }
                                Case (0x04)
                                {
                                    ADBG ("TXDC Fn4")
                                    Local1 = DerefOf (Arg3 [Zero])
                                    ADBG (Local1)
                                    SPPT (Local1, Zero)
                                }
                                Case (0x05)
                                {
                                    ADBG ("TXDC Fn5")
                                    If (CondRefOf (XDAT))
                                    {
                                        If ((XDAT () == One))
                                        {
                                            ADBG ("USB Attach")
                                            Notify (\_SB.PC00.TXDC, 0x80) // Status Change
                                        }
                                        Else
                                        {
                                            ADBG ("USB Detach")
                                            Notify (\_SB.PC00.TXDC, 0x81) // Information Change
                                        }
                                    }

                                    Return (Zero)
                                }
                                Case (0x06)
                                {
                                    ADBG ("TXDC Fn6")
                                    If ((OTHC == Zero))
                                    {
                                        CSFR = One
                                        Local0 = Zero
                                        While ((Local0 < 0x64))
                                        {
                                            If ((CSFR == Zero))
                                            {
                                                Break
                                            }

                                            Sleep (One)
                                        }
                                    }

                                    Return (Zero)
                                }
                                Case (0x07)
                                {
                                    ADBG ("TXDC Fn7")
                                    Local0 = PUPS /* \_SB_.PC00.TXDC.PUPS */
                                    Return (Local0)
                                }
                                Case (0x08)
                                {
                                    ADBG ("TXDC Fn8")
                                    Return (One)
                                }
                                Case (0x09)
                                {
                                    ADBG ("TXDC Fn9")
                                    Local1 = (TCDS & 0xFFF80000)
                                    Local1 >>= 0x13
                                    ADBG (Concatenate ("CPU XDCI: Func9 Return Val = ", ToHexString (Local1)))
                                    Return (Local1)
                                }

                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x6D, 0x04))
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }
            }
        }

        Device (TDM0)
        {
            Name (_ADR, 0x000D0002)  // _ADR: Address
            Name (_DDN, "ICL TBT DMA0 controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("ICL TBT DMA0 controller"))  // _STR: Description String
            Name (DUID, Zero)
            Name (DCPM, 0x06)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("TCSS DMA0 _STA", ToHexString (DME0)))
                If ((DME0 == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (BASE, 0, NotSerialized)
            {
                Local0 = (\_SB.PC00.GPCB () + 0x0006A000)
                ADBG (Concatenate ("TDM0 MMIO Address", ToHexString (Local0)))
                Return (Local0)
            }

            OperationRegion (DPME, SystemMemory, BASE (), 0x0100)
            Field (DPME, ByteAcc, NoLock, Preserve)
            {
                VDID,   32, 
                    ,   1, 
                MEMS,   1, 
                    ,   29, 
                Offset (0x84), 
                PMST,   2, 
                Offset (0x85), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                Offset (0xFC), 
                DD3E,   1, 
                DFPE,   1, 
                Offset (0xFF), 
                DMAD,   8
            }

            Name (STAT, One)
            Name (ALCT, Zero)
            Name (WACT, Zero)
            Name (SCME, Zero)
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                Sleep (0x03)
                ADBG (Concatenate ("TBT DMA PS0 Start, DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("DMA VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("PMST -", ToHexString (PMST)))
                ADBG (Concatenate ("PMEE -", ToHexString (PMEE)))
                ADBG (Concatenate ("PMES -", ToHexString (PMES)))
                ADBG (Concatenate ("SCME -", ToHexString (SCME)))
                If ((SCME == One))
                {
                    TBON (DUID)
                    ADBG ("SWCM Set Force Power _PS0")
                    DMAD = 0x22
                    DFPE = One
                }
                ElseIf ((WACT == One))
                {
                    WACT = 0x02
                    WFCC (ITCT)
                    WACT = Zero
                }
                ElseIf ((WACT == 0x02))
                {
                    ADBG ("Wait until other _PS0 get response")
                    While ((WACT != Zero))
                    {
                        Sleep (0x05)
                    }

                    ADBG ("Other _PS0 got response")
                }

                ADBG (Concatenate ("TBT DMA PS0 End, DUID -", ToHexString (DUID)))
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("TBT DMA PS3 Start, DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("DMA VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("PMST -", ToHexString (PMST)))
                ADBG (Concatenate ("PMEE -", ToHexString (PMEE)))
                ADBG (Concatenate ("PMES -", ToHexString (PMES)))
                ADBG (Concatenate ("SCME -", ToHexString (SCME)))
                If ((SCME == One))
                {
                    TBOF (DUID)
                }

                ADBG (Concatenate ("TBT DMA PS3 End, DUID -", ToHexString (DUID)))
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                ADBG ("TDMA S0W")
                If (ITRT)
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x03)
                }
            }

            If (ITRT)
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    If (TRTD)
                    {
                        If (SCME)
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.D3C
                            })
                        }

                        If ((DUID == Zero))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If ((DUID == Zero))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If (TRTD)
                    {
                        If (SCME)
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.D3C
                            })
                        }

                        If ((DUID == Zero))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If ((DUID == Zero))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }
            }

            Method (D3CX, 0, Serialized)
            {
                ADBG ("Disable DMA RTD3 bit")
                ADBG (Concatenate ("DUID -", ToHexString (DUID)))
                DD3E = Zero
                STAT = One
            }

            Method (D3CE, 0, Serialized)
            {
                ADBG ("Enable DMA RTD3 bit")
                ADBG (Concatenate ("DUID -", ToHexString (DUID)))
                DD3E = One
                STAT = Zero
                If ((SCME == Zero))
                {
                    ALCT = One
                }
            }

            Name (SD3C, Zero)
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG (Concatenate ("TCSS DMA _DSW DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                SD3C = Arg1
                ADBG (Concatenate ("SD3C -", ToHexString (SD3C)))
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("TBT _DSD IMR_VALID =", ToHexString (ITIM)))
                ADBG (Concatenate ("TBT _DSD WAKE_SUPPORTED =", ToHexString (TIVS)))
                If (ITIM)
                {
                    If (TIVS)
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "IMR_VALID", 
                                    One
                                }
                            }, 

                            ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "WAKE_SUPPORTED", 
                                    One
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "IMR_VALID", 
                                    One
                                }
                            }, 

                            ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "WAKE_SUPPORTED", 
                                    Zero
                                }
                            }
                        })
                    }
                }
                ElseIf (TIVS)
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "IMR_VALID", 
                                Zero
                            }
                        }, 

                        ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "WAKE_SUPPORTED", 
                                One
                            }
                        }
                    })
                }
                Else
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "IMR_VALID", 
                                Zero
                            }
                        }, 

                        ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "WAKE_SUPPORTED", 
                                Zero
                            }
                        }
                    })
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("197db5e0-f095-4f33-b915-71dd70833e55") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (PCPN, Buffer (One)
                        {
                             0x00                                             // .
                        })
                        CreateBitField (PCPN, Zero, PCP0)
                        CreateBitField (PCPN, One, PCP1)
                        If ((DUID == Zero))
                        {
                            If ((TRE0 == One))
                            {
                                PCP0 = One
                            }

                            If ((TRE1 == One))
                            {
                                PCP1 = One
                            }
                        }
                        Else
                        {
                            If ((TRE2 == One))
                            {
                                PCP0 = One
                            }

                            If ((TRE3 == One))
                            {
                                PCP1 = One
                            }
                        }

                        Return (PCPN) /* \_SB_.PC00.TDM0._DSM.PCPN */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Name (TCAP, Buffer (One)
                        {
                             0x00                                             // .
                        })
                        CreateBitField (TCAP, Zero, IMRV)
                        CreateBitField (TCAP, One, WAKE)
                        CreateBitField (TCAP, 0x02, TVDS)
                        If (ITIM)
                        {
                            IMRV = One
                        }

                        If (TIVS)
                        {
                            WAKE = One
                        }

                        If (ITVD)
                        {
                            TVDS = One
                        }

                        Return (TCAP) /* \_SB_.PC00.TDM0._DSM.TCAP */
                    }
                }
                ElseIf ((Arg0 == Buffer (0x10)
                        {
                            /* 0000 */  0x32, 0x52, 0x42, 0x1B, 0x4C, 0x15, 0x34, 0x4F,  // 2RB.L.4O
                            /* 0008 */  0x7B, 0x9E, 0xB6, 0x5C, 0x94, 0x64, 0x94, 0xA3   // {..\.d..
                        }))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            ADBG (Concatenate ("TBT DMA _DSM DUID:", ToHexString (DUID)))
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }

                            }

                            ADBG ("return buffer 0x00")
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                        Case (One)
                        {
                            ADBG (Concatenate ("TBT DMA _DSM Func 1 DUID:", ToHexString (DUID)))
                            If ((DUID == One))
                            {
                                ADBG (Concatenate ("ITM1:", ToHexString (ITM1)))
                                Return (ITM1) /* External reference */
                            }
                            Else
                            {
                                ADBG (Concatenate ("ITM0:", ToHexString (ITM0)))
                                Return (ITM0) /* External reference */
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (STCM, 2, Serialized)
            {
                ADBG (Concatenate ("STCM DUID = ", ToHexString (DUID)))
                ADBG (Concatenate ("Requested CM mode = ", Arg0))
                ADBG (Concatenate ("Pre-boot CM Info  = ", ToHexString (Arg1)))
                Local0 = (Arg1 & 0x07)
                Local1 = One
                If (((Arg1 & 0x80) != 0x80))
                {
                    ADBG ("U4CM valid bit is not set!")
                    Return (0xFF)
                }
                Else
                {
                    SCME = Local0
                    If ((Arg0 == Local0))
                    {
                        ADBG ("Pre-boot CM mode aligns with OS preferred CM mode")
                        Local1 = Zero
                    }
                }

                If ((Local1 == One))
                {
                    If ((CHCM (Arg0) == Zero))
                    {
                        ADBG (Concatenate ("Switch CM mode success, request mode = ", Arg0))
                        SCME = Arg0
                    }
                    Else
                    {
                        ADBG (Concatenate ("Switch CM mode failure, request mode = ", Arg0))
                        Return (0xFF)
                    }
                }

                ADBG (Concatenate ("SCME - ", ToHexString (SCME)))
                Return (SCME) /* \_SB_.PC00.TDM0.SCME */
            }

            Field (DPME, DWordAcc, NoLock, Preserve)
            {
                Offset (0xC8), 
                    ,   30, 
                IF30,   1, 
                INFR,   1, 
                Offset (0xEC), 
                TB2P,   32, 
                P2TB,   32
            }

            Method (ITMB, 1, Serialized)
            {
                Local0 = (Arg0 | One)
                P2TB = Local0
            }

            Method (WFCC, 1, Serialized)
            {
                WTBS (Arg0)
                P2TB = Zero
                WTBC (Arg0)
            }

            Method (WTBS, 1, Serialized)
            {
                Local0 = Arg0
                While ((Local0 > Zero))
                {
                    If ((TB2P & One))
                    {
                        Break
                    }

                    Local0--
                    Sleep (One)
                }

                Return (Local0)
            }

            Method (WTBC, 1, Serialized)
            {
                Local0 = Arg0
                While ((Local0 > Zero))
                {
                    If (((TB2P & One) != One))
                    {
                        Break
                    }

                    Local0--
                    Sleep (One)
                }
            }

            Method (CNTP, 0, Serialized)
            {
                Local0 = Zero
                If ((DFPE == Zero))
                {
                    DMAD = 0x22
                    DFPE = One
                    While (((INFR == Zero) && (Local0 < ITFP)))
                    {
                        Sleep (One)
                        Local0++
                    }
                }

                If ((Local0 != ITFP))
                {
                    ITMB (0x3E)
                }
            }

            Method (IFWR, 0, Serialized)
            {
                Return (INFR) /* \_SB_.PC00.TDM0.INFR */
            }

            Method (IV30, 0, Serialized)
            {
                Return (IF30) /* \_SB_.PC00.TDM0.IF30 */
            }

            Method (CMMB, 1, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    ITMB (0x44)
                }
                ElseIf ((Arg0 == One))
                {
                    ITMB (0x46)
                }

                Local0 = WTBS (0x01F4)
                If ((Local0 != Zero))
                {
                    Local1 = Zero
                }
                Else
                {
                    ADBG ("Set CM mode command timeout")
                    Local1 = 0xFF
                }

                P2TB = Zero
                Return (Local1)
            }

            Method (CHCM, 1, Serialized)
            {
                ADBG (Concatenate ("iTBT CHCM - Switch CM mode to ", Arg0))
                If ((Arg0 > One))
                {
                    ADBG ("Invalid CM mode value")
                    Return (0xFF)
                }

                Local0 = Zero
                If ((DFPE == Zero))
                {
                    ADBG ("Set Force Power")
                    DMAD = 0x22
                    DFPE = One
                    While (((INFR == Zero) && (Local0 < ITFP)))
                    {
                        Sleep (One)
                        Local0++
                    }
                }
                Else
                {
                    ADBG ("Force Power has been set")
                }

                If ((Local0 != ITFP))
                {
                    Local1 = CMMB (Arg0)
                    If (((Arg0 == Zero) && (Local1 == Zero)))
                    {
                        ADBG ("Send Connect Topology command")
                        ITMB (0x3E)
                        Local2 = WTBS (ITCT)
                        If ((Local2 != Zero))
                        {
                            Local1 = Zero
                        }
                        Else
                        {
                            ADBG ("Connect topology command timeout!")
                            Local1 = 0xFF
                        }

                        P2TB = Zero
                    }
                }
                Else
                {
                    ADBG ("Force Power Timeout occurred")
                    Local1 = 0xFF
                }

                ADBG (Concatenate ("iTBT change CM mode status = ", Local1))
                Return (Local1)
            }
        }

        Device (TDM1)
        {
            Name (_ADR, 0x000D0003)  // _ADR: Address
            Name (_DDN, "ICL TBT DMA1 controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("ICL TBT DMA1 controller"))  // _STR: Description String
            Name (DUID, One)
            Name (DCPM, 0x07)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("TCSS DMA1 _STA", ToHexString (DME1)))
                If ((DME1 == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (BASE, 0, NotSerialized)
            {
                Local0 = (\_SB.PC00.GPCB () + 0x0006B000)
                ADBG (Concatenate ("TDM1 MMIO Address", ToHexString (Local0)))
                Return (Local0)
            }

            OperationRegion (DPME, SystemMemory, BASE (), 0x0100)
            Field (DPME, ByteAcc, NoLock, Preserve)
            {
                VDID,   32, 
                    ,   1, 
                MEMS,   1, 
                    ,   29, 
                Offset (0x84), 
                PMST,   2, 
                Offset (0x85), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                Offset (0xFC), 
                DD3E,   1, 
                DFPE,   1, 
                Offset (0xFF), 
                DMAD,   8
            }

            Name (STAT, One)
            Name (ALCT, Zero)
            Name (WACT, Zero)
            Name (SCME, Zero)
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                Sleep (0x03)
                ADBG (Concatenate ("TBT DMA PS0 Start, DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("DMA VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("PMST -", ToHexString (PMST)))
                ADBG (Concatenate ("PMEE -", ToHexString (PMEE)))
                ADBG (Concatenate ("PMES -", ToHexString (PMES)))
                ADBG (Concatenate ("SCME -", ToHexString (SCME)))
                If ((SCME == One))
                {
                    TBON (DUID)
                    ADBG ("SWCM Set Force Power _PS0")
                    DMAD = 0x22
                    DFPE = One
                }
                ElseIf ((WACT == One))
                {
                    WACT = 0x02
                    WFCC (ITCT)
                    WACT = Zero
                }
                ElseIf ((WACT == 0x02))
                {
                    ADBG ("Wait until other _PS0 get response")
                    While ((WACT != Zero))
                    {
                        Sleep (0x05)
                    }

                    ADBG ("Other _PS0 got response")
                }

                ADBG (Concatenate ("TBT DMA PS0 End, DUID -", ToHexString (DUID)))
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("TBT DMA PS3 Start, DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("DMA VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("PMST -", ToHexString (PMST)))
                ADBG (Concatenate ("PMEE -", ToHexString (PMEE)))
                ADBG (Concatenate ("PMES -", ToHexString (PMES)))
                ADBG (Concatenate ("SCME -", ToHexString (SCME)))
                If ((SCME == One))
                {
                    TBOF (DUID)
                }

                ADBG (Concatenate ("TBT DMA PS3 End, DUID -", ToHexString (DUID)))
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                ADBG ("TDMA S0W")
                If (ITRT)
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x03)
                }
            }

            If (ITRT)
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    If (TRTD)
                    {
                        If (SCME)
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.D3C
                            })
                        }

                        If ((DUID == Zero))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If ((DUID == Zero))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If (TRTD)
                    {
                        If (SCME)
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.D3C
                            })
                        }

                        If ((DUID == Zero))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If ((DUID == Zero))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }
            }

            Method (D3CX, 0, Serialized)
            {
                ADBG ("Disable DMA RTD3 bit")
                ADBG (Concatenate ("DUID -", ToHexString (DUID)))
                DD3E = Zero
                STAT = One
            }

            Method (D3CE, 0, Serialized)
            {
                ADBG ("Enable DMA RTD3 bit")
                ADBG (Concatenate ("DUID -", ToHexString (DUID)))
                DD3E = One
                STAT = Zero
                If ((SCME == Zero))
                {
                    ALCT = One
                }
            }

            Name (SD3C, Zero)
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG (Concatenate ("TCSS DMA _DSW DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                SD3C = Arg1
                ADBG (Concatenate ("SD3C -", ToHexString (SD3C)))
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("TBT _DSD IMR_VALID =", ToHexString (ITIM)))
                ADBG (Concatenate ("TBT _DSD WAKE_SUPPORTED =", ToHexString (TIVS)))
                If (ITIM)
                {
                    If (TIVS)
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "IMR_VALID", 
                                    One
                                }
                            }, 

                            ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "WAKE_SUPPORTED", 
                                    One
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "IMR_VALID", 
                                    One
                                }
                            }, 

                            ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "WAKE_SUPPORTED", 
                                    Zero
                                }
                            }
                        })
                    }
                }
                ElseIf (TIVS)
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "IMR_VALID", 
                                Zero
                            }
                        }, 

                        ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "WAKE_SUPPORTED", 
                                One
                            }
                        }
                    })
                }
                Else
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "IMR_VALID", 
                                Zero
                            }
                        }, 

                        ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "WAKE_SUPPORTED", 
                                Zero
                            }
                        }
                    })
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("197db5e0-f095-4f33-b915-71dd70833e55") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (PCPN, Buffer (One)
                        {
                             0x00                                             // .
                        })
                        CreateBitField (PCPN, Zero, PCP0)
                        CreateBitField (PCPN, One, PCP1)
                        If ((DUID == Zero))
                        {
                            If ((TRE0 == One))
                            {
                                PCP0 = One
                            }

                            If ((TRE1 == One))
                            {
                                PCP1 = One
                            }
                        }
                        Else
                        {
                            If ((TRE2 == One))
                            {
                                PCP0 = One
                            }

                            If ((TRE3 == One))
                            {
                                PCP1 = One
                            }
                        }

                        Return (PCPN) /* \_SB_.PC00.TDM1._DSM.PCPN */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Name (TCAP, Buffer (One)
                        {
                             0x00                                             // .
                        })
                        CreateBitField (TCAP, Zero, IMRV)
                        CreateBitField (TCAP, One, WAKE)
                        CreateBitField (TCAP, 0x02, TVDS)
                        If (ITIM)
                        {
                            IMRV = One
                        }

                        If (TIVS)
                        {
                            WAKE = One
                        }

                        If (ITVD)
                        {
                            TVDS = One
                        }

                        Return (TCAP) /* \_SB_.PC00.TDM1._DSM.TCAP */
                    }
                }
                ElseIf ((Arg0 == Buffer (0x10)
                        {
                            /* 0000 */  0x32, 0x52, 0x42, 0x1B, 0x4C, 0x15, 0x34, 0x4F,  // 2RB.L.4O
                            /* 0008 */  0x7B, 0x9E, 0xB6, 0x5C, 0x94, 0x64, 0x94, 0xA3   // {..\.d..
                        }))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            ADBG (Concatenate ("TBT DMA _DSM DUID:", ToHexString (DUID)))
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }

                            }

                            ADBG ("return buffer 0x00")
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                        Case (One)
                        {
                            ADBG (Concatenate ("TBT DMA _DSM Func 1 DUID:", ToHexString (DUID)))
                            If ((DUID == One))
                            {
                                ADBG (Concatenate ("ITM1:", ToHexString (ITM1)))
                                Return (ITM1) /* External reference */
                            }
                            Else
                            {
                                ADBG (Concatenate ("ITM0:", ToHexString (ITM0)))
                                Return (ITM0) /* External reference */
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (STCM, 2, Serialized)
            {
                ADBG (Concatenate ("STCM DUID = ", ToHexString (DUID)))
                ADBG (Concatenate ("Requested CM mode = ", Arg0))
                ADBG (Concatenate ("Pre-boot CM Info  = ", ToHexString (Arg1)))
                Local0 = (Arg1 & 0x07)
                Local1 = One
                If (((Arg1 & 0x80) != 0x80))
                {
                    ADBG ("U4CM valid bit is not set!")
                    Return (0xFF)
                }
                Else
                {
                    SCME = Local0
                    If ((Arg0 == Local0))
                    {
                        ADBG ("Pre-boot CM mode aligns with OS preferred CM mode")
                        Local1 = Zero
                    }
                }

                If ((Local1 == One))
                {
                    If ((CHCM (Arg0) == Zero))
                    {
                        ADBG (Concatenate ("Switch CM mode success, request mode = ", Arg0))
                        SCME = Arg0
                    }
                    Else
                    {
                        ADBG (Concatenate ("Switch CM mode failure, request mode = ", Arg0))
                        Return (0xFF)
                    }
                }

                ADBG (Concatenate ("SCME - ", ToHexString (SCME)))
                Return (SCME) /* \_SB_.PC00.TDM1.SCME */
            }

            Field (DPME, DWordAcc, NoLock, Preserve)
            {
                Offset (0xC8), 
                    ,   30, 
                IF30,   1, 
                INFR,   1, 
                Offset (0xEC), 
                TB2P,   32, 
                P2TB,   32
            }

            Method (ITMB, 1, Serialized)
            {
                Local0 = (Arg0 | One)
                P2TB = Local0
            }

            Method (WFCC, 1, Serialized)
            {
                WTBS (Arg0)
                P2TB = Zero
                WTBC (Arg0)
            }

            Method (WTBS, 1, Serialized)
            {
                Local0 = Arg0
                While ((Local0 > Zero))
                {
                    If ((TB2P & One))
                    {
                        Break
                    }

                    Local0--
                    Sleep (One)
                }

                Return (Local0)
            }

            Method (WTBC, 1, Serialized)
            {
                Local0 = Arg0
                While ((Local0 > Zero))
                {
                    If (((TB2P & One) != One))
                    {
                        Break
                    }

                    Local0--
                    Sleep (One)
                }
            }

            Method (CNTP, 0, Serialized)
            {
                Local0 = Zero
                If ((DFPE == Zero))
                {
                    DMAD = 0x22
                    DFPE = One
                    While (((INFR == Zero) && (Local0 < ITFP)))
                    {
                        Sleep (One)
                        Local0++
                    }
                }

                If ((Local0 != ITFP))
                {
                    ITMB (0x3E)
                }
            }

            Method (IFWR, 0, Serialized)
            {
                Return (INFR) /* \_SB_.PC00.TDM1.INFR */
            }

            Method (IV30, 0, Serialized)
            {
                Return (IF30) /* \_SB_.PC00.TDM1.IF30 */
            }

            Method (CMMB, 1, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    ITMB (0x44)
                }
                ElseIf ((Arg0 == One))
                {
                    ITMB (0x46)
                }

                Local0 = WTBS (0x01F4)
                If ((Local0 != Zero))
                {
                    Local1 = Zero
                }
                Else
                {
                    ADBG ("Set CM mode command timeout")
                    Local1 = 0xFF
                }

                P2TB = Zero
                Return (Local1)
            }

            Method (CHCM, 1, Serialized)
            {
                ADBG (Concatenate ("iTBT CHCM - Switch CM mode to ", Arg0))
                If ((Arg0 > One))
                {
                    ADBG ("Invalid CM mode value")
                    Return (0xFF)
                }

                Local0 = Zero
                If ((DFPE == Zero))
                {
                    ADBG ("Set Force Power")
                    DMAD = 0x22
                    DFPE = One
                    While (((INFR == Zero) && (Local0 < ITFP)))
                    {
                        Sleep (One)
                        Local0++
                    }
                }
                Else
                {
                    ADBG ("Force Power has been set")
                }

                If ((Local0 != ITFP))
                {
                    Local1 = CMMB (Arg0)
                    If (((Arg0 == Zero) && (Local1 == Zero)))
                    {
                        ADBG ("Send Connect Topology command")
                        ITMB (0x3E)
                        Local2 = WTBS (ITCT)
                        If ((Local2 != Zero))
                        {
                            Local1 = Zero
                        }
                        Else
                        {
                            ADBG ("Connect topology command timeout!")
                            Local1 = 0xFF
                        }

                        P2TB = Zero
                    }
                }
                Else
                {
                    ADBG ("Force Power Timeout occurred")
                    Local1 = 0xFF
                }

                ADBG (Concatenate ("iTBT change CM mode status = ", Local1))
                Return (Local1)
            }
        }
    }

    If (CondRefOf (\_SB.PC01))
    {
        Scope (\_SB.PC01)
        {
            Device (TRP0)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA0 != Zero))
                    {
                        Return (TPA0) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070000)
                    }
                }

                Name (TUID, Zero)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x08)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP0 _STA", ToHexString (TRE0)))
                    If ((TRE0 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE0 /* External reference */
                    LMSL = PSL0 /* External reference */
                    LNSL = PNS0 /* External reference */
                }

                Name (PRTP, 0x08)
                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC01.TRP0._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC01.TRP0.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC01.TRP0.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC01.TRP0.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC01.TRP0.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC01.TRP0.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC01.TRP0.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC01.TRP0.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    ADBG (Concatenate ("TUID = ", ToHexString (TUID)))
                    If (CondRefOf (U4SE))
                    {
                        If ((U4SE == Zero))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "HotPlugSupportInD3", 
                                        One
                                    }
                                }, 

                                ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                                Package (0x02)
                                {
                                    Package (0x02)
                                    {
                                        "ExternalFacingPort", 
                                        One
                                    }, 

                                    Package (0x02)
                                    {
                                        "UID", 
                                        TUID
                                    }
                                }
                            })
                        }
                    }

                    If (((TUID == Zero) || (TUID == One)))
                    {
                        Return (Package (0x06)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }, 

                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "usb4-host-interface", 
                                    \_SB.PC00.TDM0
                                }, 

                                Package (0x02)
                                {
                                    "usb4-port-number", 
                                    TUID
                                }
                            }
                        })
                    }
                    ElseIf (((TUID == 0x02) || (TUID == 0x03)))
                    {
                        Return (Package (0x06)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }, 

                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "usb4-host-interface", 
                                    \_SB.PC00.TDM1
                                }, 

                                Package (0x02)
                                {
                                    "usb4-port-number", 
                                    TUID
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }
                        })
                    }
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                            {
                                Return (Package (0x01)
                                {
                                    \_SB.PC00.D3C
                                })
                            }

                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                            {
                                Return (Package (0x01)
                                {
                                    \_SB.PC00.D3C
                                })
                            }

                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC01.TRP0.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC01.TRP0.PD01 */
                }
            }

            Device (TRP1)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA1 != Zero))
                    {
                        Return (TPA1) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070001)
                    }
                }

                Name (TUID, One)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x09)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP1 _STA", ToHexString (TRE1)))
                    If ((TRE1 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE1 /* External reference */
                    LMSL = PSL1 /* External reference */
                    LNSL = PNS1 /* External reference */
                }

                Name (PRTP, 0x08)
                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC01.TRP1._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC01.TRP1.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC01.TRP1.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC01.TRP1.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC01.TRP1.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC01.TRP1.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC01.TRP1.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC01.TRP1.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    ADBG (Concatenate ("TUID = ", ToHexString (TUID)))
                    If (CondRefOf (U4SE))
                    {
                        If ((U4SE == Zero))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "HotPlugSupportInD3", 
                                        One
                                    }
                                }, 

                                ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                                Package (0x02)
                                {
                                    Package (0x02)
                                    {
                                        "ExternalFacingPort", 
                                        One
                                    }, 

                                    Package (0x02)
                                    {
                                        "UID", 
                                        TUID
                                    }
                                }
                            })
                        }
                    }

                    If (((TUID == Zero) || (TUID == One)))
                    {
                        Return (Package (0x06)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }, 

                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "usb4-host-interface", 
                                    \_SB.PC00.TDM0
                                }, 

                                Package (0x02)
                                {
                                    "usb4-port-number", 
                                    TUID
                                }
                            }
                        })
                    }
                    ElseIf (((TUID == 0x02) || (TUID == 0x03)))
                    {
                        Return (Package (0x06)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }, 

                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "usb4-host-interface", 
                                    \_SB.PC00.TDM1
                                }, 

                                Package (0x02)
                                {
                                    "usb4-port-number", 
                                    TUID
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }
                        })
                    }
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                            {
                                Return (Package (0x01)
                                {
                                    \_SB.PC00.D3C
                                })
                            }

                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                            {
                                Return (Package (0x01)
                                {
                                    \_SB.PC00.D3C
                                })
                            }

                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC01.TRP1.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC01.TRP1.PD01 */
                }
            }

            Device (TRP2)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA2 != Zero))
                    {
                        Return (TPA2) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070002)
                    }
                }

                Name (TUID, 0x02)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x0A)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP2 _STA", ToHexString (TRE2)))
                    If ((TRE2 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE2 /* External reference */
                    LMSL = PSL2 /* External reference */
                    LNSL = PNS2 /* External reference */
                }

                Name (PRTP, 0x08)
                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC01.TRP2._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC01.TRP2.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC01.TRP2.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC01.TRP2.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC01.TRP2.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC01.TRP2.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC01.TRP2.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC01.TRP2.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    ADBG (Concatenate ("TUID = ", ToHexString (TUID)))
                    If (CondRefOf (U4SE))
                    {
                        If ((U4SE == Zero))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "HotPlugSupportInD3", 
                                        One
                                    }
                                }, 

                                ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                                Package (0x02)
                                {
                                    Package (0x02)
                                    {
                                        "ExternalFacingPort", 
                                        One
                                    }, 

                                    Package (0x02)
                                    {
                                        "UID", 
                                        TUID
                                    }
                                }
                            })
                        }
                    }

                    If (((TUID == Zero) || (TUID == One)))
                    {
                        Return (Package (0x06)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }, 

                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "usb4-host-interface", 
                                    \_SB.PC00.TDM0
                                }, 

                                Package (0x02)
                                {
                                    "usb4-port-number", 
                                    TUID
                                }
                            }
                        })
                    }
                    ElseIf (((TUID == 0x02) || (TUID == 0x03)))
                    {
                        Return (Package (0x06)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }, 

                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "usb4-host-interface", 
                                    \_SB.PC00.TDM1
                                }, 

                                Package (0x02)
                                {
                                    "usb4-port-number", 
                                    TUID
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }
                        })
                    }
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                            {
                                Return (Package (0x01)
                                {
                                    \_SB.PC00.D3C
                                })
                            }

                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                            {
                                Return (Package (0x01)
                                {
                                    \_SB.PC00.D3C
                                })
                            }

                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC01.TRP2.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC01.TRP2.PD01 */
                }
            }

            Device (TRP3)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA3 != Zero))
                    {
                        Return (TPA3) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070003)
                    }
                }

                Name (TUID, 0x03)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x0B)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP3 _STA", ToHexString (TRE3)))
                    If ((TRE3 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE3 /* External reference */
                    LMSL = PSL3 /* External reference */
                    LNSL = PNS3 /* External reference */
                }

                Name (PRTP, 0x08)
                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC01.TRP3._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC01.TRP3.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC01.TRP3.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC01.TRP3.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC01.TRP3.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC01.TRP3.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC01.TRP3.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC01.TRP3.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    ADBG (Concatenate ("TUID = ", ToHexString (TUID)))
                    If (CondRefOf (U4SE))
                    {
                        If ((U4SE == Zero))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "HotPlugSupportInD3", 
                                        One
                                    }
                                }, 

                                ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                                Package (0x02)
                                {
                                    Package (0x02)
                                    {
                                        "ExternalFacingPort", 
                                        One
                                    }, 

                                    Package (0x02)
                                    {
                                        "UID", 
                                        TUID
                                    }
                                }
                            })
                        }
                    }

                    If (((TUID == Zero) || (TUID == One)))
                    {
                        Return (Package (0x06)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }, 

                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "usb4-host-interface", 
                                    \_SB.PC00.TDM0
                                }, 

                                Package (0x02)
                                {
                                    "usb4-port-number", 
                                    TUID
                                }
                            }
                        })
                    }
                    ElseIf (((TUID == 0x02) || (TUID == 0x03)))
                    {
                        Return (Package (0x06)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }, 

                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "usb4-host-interface", 
                                    \_SB.PC00.TDM1
                                }, 

                                Package (0x02)
                                {
                                    "usb4-port-number", 
                                    TUID
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }
                        })
                    }
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                            {
                                Return (Package (0x01)
                                {
                                    \_SB.PC00.D3C
                                })
                            }

                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                            {
                                Return (Package (0x01)
                                {
                                    \_SB.PC00.D3C
                                })
                            }

                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC01.TRP3.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC01.TRP3.PD01 */
                }
            }
        }
    }
    Else
    {
        Scope (\_SB.PC00)
        {
            Device (TRP0)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA0 != Zero))
                    {
                        Return (TPA0) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070000)
                    }
                }

                Name (TUID, Zero)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, Zero)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP0 _STA", ToHexString (TRE0)))
                    If ((TRE0 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE0 /* External reference */
                    LMSL = PSL0 /* External reference */
                    LNSL = PNS0 /* External reference */
                }

                Name (PRTP, 0x08)
                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC00.TRP0._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.TRP0.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC00.TRP0.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC00.TRP0.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC00.TRP0.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC00.TRP0.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC00.TRP0.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC00.TRP0.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    ADBG (Concatenate ("TUID = ", ToHexString (TUID)))
                    If (CondRefOf (U4SE))
                    {
                        If ((U4SE == Zero))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "HotPlugSupportInD3", 
                                        One
                                    }
                                }, 

                                ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                                Package (0x02)
                                {
                                    Package (0x02)
                                    {
                                        "ExternalFacingPort", 
                                        One
                                    }, 

                                    Package (0x02)
                                    {
                                        "UID", 
                                        TUID
                                    }
                                }
                            })
                        }
                    }

                    If (((TUID == Zero) || (TUID == One)))
                    {
                        Return (Package (0x06)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }, 

                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "usb4-host-interface", 
                                    \_SB.PC00.TDM0
                                }, 

                                Package (0x02)
                                {
                                    "usb4-port-number", 
                                    TUID
                                }
                            }
                        })
                    }
                    ElseIf (((TUID == 0x02) || (TUID == 0x03)))
                    {
                        Return (Package (0x06)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }, 

                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "usb4-host-interface", 
                                    \_SB.PC00.TDM1
                                }, 

                                Package (0x02)
                                {
                                    "usb4-port-number", 
                                    TUID
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }
                        })
                    }
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                            {
                                Return (Package (0x01)
                                {
                                    \_SB.PC00.D3C
                                })
                            }

                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                            {
                                Return (Package (0x01)
                                {
                                    \_SB.PC00.D3C
                                })
                            }

                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC00.TRP0.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC00.TRP0.PD01 */
                }
            }

            Device (TRP1)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA1 != Zero))
                    {
                        Return (TPA1) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070001)
                    }
                }

                Name (TUID, One)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP1 _STA", ToHexString (TRE1)))
                    If ((TRE1 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE1 /* External reference */
                    LMSL = PSL1 /* External reference */
                    LNSL = PNS1 /* External reference */
                }

                Name (PRTP, 0x08)
                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC00.TRP1._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.TRP1.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC00.TRP1.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC00.TRP1.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC00.TRP1.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC00.TRP1.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC00.TRP1.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC00.TRP1.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    ADBG (Concatenate ("TUID = ", ToHexString (TUID)))
                    If (CondRefOf (U4SE))
                    {
                        If ((U4SE == Zero))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "HotPlugSupportInD3", 
                                        One
                                    }
                                }, 

                                ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                                Package (0x02)
                                {
                                    Package (0x02)
                                    {
                                        "ExternalFacingPort", 
                                        One
                                    }, 

                                    Package (0x02)
                                    {
                                        "UID", 
                                        TUID
                                    }
                                }
                            })
                        }
                    }

                    If (((TUID == Zero) || (TUID == One)))
                    {
                        Return (Package (0x06)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }, 

                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "usb4-host-interface", 
                                    \_SB.PC00.TDM0
                                }, 

                                Package (0x02)
                                {
                                    "usb4-port-number", 
                                    TUID
                                }
                            }
                        })
                    }
                    ElseIf (((TUID == 0x02) || (TUID == 0x03)))
                    {
                        Return (Package (0x06)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }, 

                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "usb4-host-interface", 
                                    \_SB.PC00.TDM1
                                }, 

                                Package (0x02)
                                {
                                    "usb4-port-number", 
                                    TUID
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }
                        })
                    }
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                            {
                                Return (Package (0x01)
                                {
                                    \_SB.PC00.D3C
                                })
                            }

                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                            {
                                Return (Package (0x01)
                                {
                                    \_SB.PC00.D3C
                                })
                            }

                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC00.TRP1.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC00.TRP1.PD01 */
                }
            }

            Device (TRP2)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA2 != Zero))
                    {
                        Return (TPA2) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070002)
                    }
                }

                Name (TUID, 0x02)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x02)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP2 _STA", ToHexString (TRE2)))
                    If ((TRE2 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE2 /* External reference */
                    LMSL = PSL2 /* External reference */
                    LNSL = PNS2 /* External reference */
                }

                Name (PRTP, 0x08)
                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC00.TRP2._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.TRP2.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC00.TRP2.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC00.TRP2.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC00.TRP2.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC00.TRP2.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC00.TRP2.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC00.TRP2.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    ADBG (Concatenate ("TUID = ", ToHexString (TUID)))
                    If (CondRefOf (U4SE))
                    {
                        If ((U4SE == Zero))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "HotPlugSupportInD3", 
                                        One
                                    }
                                }, 

                                ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                                Package (0x02)
                                {
                                    Package (0x02)
                                    {
                                        "ExternalFacingPort", 
                                        One
                                    }, 

                                    Package (0x02)
                                    {
                                        "UID", 
                                        TUID
                                    }
                                }
                            })
                        }
                    }

                    If (((TUID == Zero) || (TUID == One)))
                    {
                        Return (Package (0x06)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }, 

                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "usb4-host-interface", 
                                    \_SB.PC00.TDM0
                                }, 

                                Package (0x02)
                                {
                                    "usb4-port-number", 
                                    TUID
                                }
                            }
                        })
                    }
                    ElseIf (((TUID == 0x02) || (TUID == 0x03)))
                    {
                        Return (Package (0x06)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }, 

                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "usb4-host-interface", 
                                    \_SB.PC00.TDM1
                                }, 

                                Package (0x02)
                                {
                                    "usb4-port-number", 
                                    TUID
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }
                        })
                    }
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                            {
                                Return (Package (0x01)
                                {
                                    \_SB.PC00.D3C
                                })
                            }

                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                            {
                                Return (Package (0x01)
                                {
                                    \_SB.PC00.D3C
                                })
                            }

                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC00.TRP2.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC00.TRP2.PD01 */
                }
            }

            Device (TRP3)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA3 != Zero))
                    {
                        Return (TPA3) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070003)
                    }
                }

                Name (TUID, 0x03)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x03)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP3 _STA", ToHexString (TRE3)))
                    If ((TRE3 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE3 /* External reference */
                    LMSL = PSL3 /* External reference */
                    LNSL = PNS3 /* External reference */
                }

                Name (PRTP, 0x08)
                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC00.TRP3._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.TRP3.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC00.TRP3.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC00.TRP3.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC00.TRP3.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC00.TRP3.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC00.TRP3.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC00.TRP3.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    ADBG (Concatenate ("TUID = ", ToHexString (TUID)))
                    If (CondRefOf (U4SE))
                    {
                        If ((U4SE == Zero))
                        {
                            Return (Package (0x04)
                            {
                                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "HotPlugSupportInD3", 
                                        One
                                    }
                                }, 

                                ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                                Package (0x02)
                                {
                                    Package (0x02)
                                    {
                                        "ExternalFacingPort", 
                                        One
                                    }, 

                                    Package (0x02)
                                    {
                                        "UID", 
                                        TUID
                                    }
                                }
                            })
                        }
                    }

                    If (((TUID == Zero) || (TUID == One)))
                    {
                        Return (Package (0x06)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }, 

                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "usb4-host-interface", 
                                    \_SB.PC00.TDM0
                                }, 

                                Package (0x02)
                                {
                                    "usb4-port-number", 
                                    TUID
                                }
                            }
                        })
                    }
                    ElseIf (((TUID == 0x02) || (TUID == 0x03)))
                    {
                        Return (Package (0x06)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }, 

                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "usb4-host-interface", 
                                    \_SB.PC00.TDM1
                                }, 

                                Package (0x02)
                                {
                                    "usb4-port-number", 
                                    TUID
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }
                        })
                    }
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                            {
                                Return (Package (0x01)
                                {
                                    \_SB.PC00.D3C
                                })
                            }

                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                            {
                                Return (Package (0x01)
                                {
                                    \_SB.PC00.D3C
                                })
                            }

                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC00.TRP3.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC00.TRP3.PD01 */
                }
            }
        }
    }

    Scope (\_SB)
    {
        Method (TCWK, 1, NotSerialized)
        {
            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    If ((\_SB.PC01.TRP0.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC01.TRP0, Zero) // Bus Check
                    }

                    If ((\_SB.PC01.TRP1.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC01.TRP1, Zero) // Bus Check
                    }

                    If ((\_SB.PC01.TRP2.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC01.TRP2, Zero) // Bus Check
                    }

                    If ((\_SB.PC01.TRP3.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC01.TRP3, Zero) // Bus Check
                    }
                }
                Else
                {
                    If ((\_SB.PC00.TRP0.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC00.TRP0, Zero) // Bus Check
                    }

                    If ((\_SB.PC00.TRP1.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC00.TRP1, Zero) // Bus Check
                    }

                    If ((\_SB.PC00.TRP2.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC00.TRP2, Zero) // Bus Check
                    }

                    If ((\_SB.PC00.TRP3.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC00.TRP3, Zero) // Bus Check
                    }
                }
            }
        }
    }
}



SSDT18
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_SB_.PR00, DeviceObj)
    External (C6LT, UnknownObj)
    External (C6MW, UnknownObj)
    External (C7LT, UnknownObj)
    External (C7MW, UnknownObj)
    External (CDLT, UnknownObj)
    External (CDLV, UnknownObj)
    External (CDMW, UnknownObj)
    External (CDPW, UnknownObj)
    External (CFGD, UnknownObj)
    External (FEMD, UnknownObj)
    External (FMBL, UnknownObj)
    External (PF00, UnknownObj)
    External (PFLV, UnknownObj)
    External (PWRS, UnknownObj)

    Scope (\_SB.PR00)
    {
        Name (C1TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C6TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001815, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0x015E
        })
        Name (C7TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0xC8
        })
        Name (CDTM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x03, 
            Zero, 
            Zero
        })
        Name (MWES, ResourceTemplate ()
        {
            Register (FFixedHW, 
                0x01,               // Bit Width
                0x02,               // Bit Offset
                0x0000000000000000, // Address
                0x01,               // Access Size
                )
        })
        Name (AC2V, Zero)
        Name (AC3V, Zero)
        Name (C3ST, Package (0x04)
        {
            0x03, 
            Package (0x00) {}, 
            Package (0x00) {}, 
            Package (0x00) {}
        })
        Name (C2ST, Package (0x03)
        {
            0x02, 
            Package (0x00) {}, 
            Package (0x00) {}
        })
        Name (C1ST, Package (0x02)
        {
            One, 
            Package (0x00) {}
        })
        Name (CSTF, Zero)
        Method (_CST, 0, Serialized)  // _CST: C-States
        {
            If (!CSTF)
            {
                C6TM [0x02] = C6LT /* External reference */
                C7TM [0x02] = C7LT /* External reference */
                CDTM [0x02] = CDLT /* External reference */
                CDTM [0x03] = CDPW /* External reference */
                DerefOf (CDTM [Zero]) [0x07] = CDLV /* External reference */
                If (((CFGD & 0x0800) && (PF00 & 0x0200)))
                {
                    C1TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    C6TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    C7TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    CDTM [Zero] = MWES /* \_SB_.PR00.MWES */
                    DerefOf (C6TM [Zero]) [0x07] = C6MW /* External reference */
                    DerefOf (C7TM [Zero]) [0x07] = C7MW /* External reference */
                    DerefOf (CDTM [Zero]) [0x07] = CDMW /* External reference */
                }
                ElseIf (((CFGD & 0x0800) && (PF00 & 0x0100)))
                {
                    C1TM [Zero] = MWES /* \_SB_.PR00.MWES */
                }

                CSTF = Ones
            }

            AC2V = Zero
            AC3V = Zero
            C3ST [One] = C1TM /* \_SB_.PR00.C1TM */
            If ((CFGD & 0x20))
            {
                C3ST [0x02] = C7TM /* \_SB_.PR00.C7TM */
                AC2V = Ones
            }
            ElseIf ((CFGD & 0x10))
            {
                C3ST [0x02] = C6TM /* \_SB_.PR00.C6TM */
                AC2V = Ones
            }

            If ((CFGD & 0x4000))
            {
                C3ST [0x03] = CDTM /* \_SB_.PR00.CDTM */
                AC3V = Ones
            }

            If ((AC2V && AC3V))
            {
                Return (C3ST) /* \_SB_.PR00.C3ST */
            }
            ElseIf (AC2V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x02])
                Return (C2ST) /* \_SB_.PR00.C2ST */
            }
            ElseIf (AC3V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x03])
                DerefOf (C2ST [0x02]) [One] = 0x02
                Return (C2ST) /* \_SB_.PR00.C2ST */
            }
            Else
            {
                C1ST [One] = DerefOf (C3ST [One])
                Return (C1ST) /* \_SB_.PR00.C1ST */
            }
        }
    }
}



SSDT19
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApCst", 0x00003000)
{
    External (_SB_.PR00._CST, UnknownObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (_SB_.PR24, DeviceObj)
    External (_SB_.PR25, DeviceObj)
    External (_SB_.PR26, DeviceObj)
    External (_SB_.PR27, DeviceObj)
    External (_SB_.PR28, DeviceObj)
    External (_SB_.PR29, DeviceObj)
    External (_SB_.PR30, DeviceObj)
    External (_SB_.PR31, DeviceObj)
    External (_SB_.PR32, DeviceObj)
    External (_SB_.PR33, DeviceObj)
    External (_SB_.PR34, DeviceObj)
    External (_SB_.PR35, DeviceObj)
    External (_SB_.PR36, DeviceObj)
    External (_SB_.PR37, DeviceObj)
    External (_SB_.PR38, DeviceObj)
    External (_SB_.PR39, DeviceObj)
    External (_SB_.PR40, DeviceObj)
    External (_SB_.PR41, DeviceObj)
    External (_SB_.PR42, DeviceObj)
    External (_SB_.PR43, DeviceObj)
    External (_SB_.PR44, DeviceObj)
    External (_SB_.PR45, DeviceObj)
    External (_SB_.PR46, DeviceObj)
    External (_SB_.PR47, DeviceObj)
    External (_SB_.PR48, DeviceObj)
    External (_SB_.PR49, DeviceObj)
    External (_SB_.PR50, DeviceObj)
    External (_SB_.PR51, DeviceObj)
    External (_SB_.PR52, DeviceObj)
    External (_SB_.PR53, DeviceObj)
    External (_SB_.PR54, DeviceObj)
    External (_SB_.PR55, DeviceObj)
    External (_SB_.PR56, DeviceObj)
    External (_SB_.PR57, DeviceObj)
    External (_SB_.PR58, DeviceObj)
    External (_SB_.PR59, DeviceObj)
    External (_SB_.PR60, DeviceObj)
    External (_SB_.PR61, DeviceObj)
    External (_SB_.PR62, DeviceObj)
    External (_SB_.PR63, DeviceObj)

    If (CondRefOf (\_SB.PR01))
    {
        Scope (\_SB.PR01)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR02))
    {
        Scope (\_SB.PR02)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR03))
    {
        Scope (\_SB.PR03)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR04))
    {
        Scope (\_SB.PR04)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR05))
    {
        Scope (\_SB.PR05)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR06))
    {
        Scope (\_SB.PR06)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR07))
    {
        Scope (\_SB.PR07)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR08))
    {
        Scope (\_SB.PR08)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR09))
    {
        Scope (\_SB.PR09)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR10))
    {
        Scope (\_SB.PR10)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR11))
    {
        Scope (\_SB.PR11)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR12))
    {
        Scope (\_SB.PR12)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR13))
    {
        Scope (\_SB.PR13)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR14))
    {
        Scope (\_SB.PR14)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR15))
    {
        Scope (\_SB.PR15)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR16))
    {
        Scope (\_SB.PR16)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR17))
    {
        Scope (\_SB.PR17)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR18))
    {
        Scope (\_SB.PR18)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR19))
    {
        Scope (\_SB.PR19)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR20))
    {
        Scope (\_SB.PR20)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR21))
    {
        Scope (\_SB.PR21)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR22))
    {
        Scope (\_SB.PR22)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR23))
    {
        Scope (\_SB.PR23)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR24))
    {
        Scope (\_SB.PR24)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR25))
    {
        Scope (\_SB.PR25)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR26))
    {
        Scope (\_SB.PR26)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR27))
    {
        Scope (\_SB.PR27)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR28))
    {
        Scope (\_SB.PR28)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR29))
    {
        Scope (\_SB.PR29)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR30))
    {
        Scope (\_SB.PR30)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR31))
    {
        Scope (\_SB.PR31)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR32))
    {
        Scope (\_SB.PR32)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR33))
    {
        Scope (\_SB.PR33)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR34))
    {
        Scope (\_SB.PR34)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR35))
    {
        Scope (\_SB.PR35)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR36))
    {
        Scope (\_SB.PR36)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR37))
    {
        Scope (\_SB.PR37)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR38))
    {
        Scope (\_SB.PR38)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR39))
    {
        Scope (\_SB.PR39)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR40))
    {
        Scope (\_SB.PR40)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR41))
    {
        Scope (\_SB.PR41)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR42))
    {
        Scope (\_SB.PR42)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR43))
    {
        Scope (\_SB.PR43)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR44))
    {
        Scope (\_SB.PR44)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR45))
    {
        Scope (\_SB.PR45)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR46))
    {
        Scope (\_SB.PR46)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR47))
    {
        Scope (\_SB.PR47)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR48))
    {
        Scope (\_SB.PR48)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR49))
    {
        Scope (\_SB.PR49)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR50))
    {
        Scope (\_SB.PR50)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR51))
    {
        Scope (\_SB.PR51)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR52))
    {
        Scope (\_SB.PR52)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR53))
    {
        Scope (\_SB.PR53)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR54))
    {
        Scope (\_SB.PR54)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR55))
    {
        Scope (\_SB.PR55)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR56))
    {
        Scope (\_SB.PR56)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR57))
    {
        Scope (\_SB.PR57)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR58))
    {
        Scope (\_SB.PR58)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR59))
    {
        Scope (\_SB.PR59)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR60))
    {
        Scope (\_SB.PR60)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR61))
    {
        Scope (\_SB.PR61)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR62))
    {
        Scope (\_SB.PR62)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR63))
    {
        Scope (\_SB.PR63)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CpuSsdt", 0x00003000)
{
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (_SB_.PR24, DeviceObj)
    External (_SB_.PR25, DeviceObj)
    External (_SB_.PR26, DeviceObj)
    External (_SB_.PR27, DeviceObj)
    External (_SB_.PR28, DeviceObj)
    External (_SB_.PR29, DeviceObj)
    External (_SB_.PR30, DeviceObj)
    External (_SB_.PR31, DeviceObj)
    External (_SB_.PR32, DeviceObj)
    External (_SB_.PR33, DeviceObj)
    External (_SB_.PR34, DeviceObj)
    External (_SB_.PR35, DeviceObj)
    External (_SB_.PR36, DeviceObj)
    External (_SB_.PR37, DeviceObj)
    External (_SB_.PR38, DeviceObj)
    External (_SB_.PR39, DeviceObj)
    External (_SB_.PR40, DeviceObj)
    External (_SB_.PR41, DeviceObj)
    External (_SB_.PR42, DeviceObj)
    External (_SB_.PR43, DeviceObj)
    External (_SB_.PR44, DeviceObj)
    External (_SB_.PR45, DeviceObj)
    External (_SB_.PR46, DeviceObj)
    External (_SB_.PR47, DeviceObj)
    External (_SB_.PR48, DeviceObj)
    External (_SB_.PR49, DeviceObj)
    External (_SB_.PR50, DeviceObj)
    External (_SB_.PR51, DeviceObj)
    External (_SB_.PR52, DeviceObj)
    External (_SB_.PR53, DeviceObj)
    External (_SB_.PR54, DeviceObj)
    External (_SB_.PR55, DeviceObj)
    External (_SB_.PR56, DeviceObj)
    External (_SB_.PR57, DeviceObj)
    External (_SB_.PR58, DeviceObj)
    External (_SB_.PR59, DeviceObj)
    External (_SB_.PR60, DeviceObj)
    External (_SB_.PR61, DeviceObj)
    External (_SB_.PR62, DeviceObj)
    External (_SB_.PR63, DeviceObj)
    External (OSYS, UnknownObj)

    Scope (\)
    {
        Name (SSDT, Package (0x1B)
        {
            "CPU0IST ", 
            0x92B21098, 
            0x00000605, 
            "APIST   ", 
            0x92B1A018, 
            0x00001BAF, 
            "CPU0CST ", 
            0x92B21B18, 
            0x00000394, 
            "APCST   ", 
            0x92B17018, 
            0x00000FBB, 
            "CPU0HWP ", 
            0x92B1C018, 
            0x000004BA, 
            "APHWP   ", 
            0x92B15018, 
            0x00001038, 
            "HWPLVT  ", 
            0x80000000, 
            0x80000000, 
            "CPU0PSD ", 
            0x92B21718, 
            0x000001AB, 
            "APPSD   ", 
            0x92B18018, 
            0x00001349
        })
        Name (\PF00, 0x80000000)
        Name (\PF01, 0x80000000)
        Name (\PF02, 0x80000000)
        Name (\PF03, 0x80000000)
        Name (\PF04, 0x80000000)
        Name (\PF05, 0x80000000)
        Name (\PF06, 0x80000000)
        Name (\PF07, 0x80000000)
        Name (\PF08, 0x80000000)
        Name (\PF09, 0x80000000)
        Name (\PF10, 0x80000000)
        Name (\PF11, 0x80000000)
        Name (\PF12, 0x80000000)
        Name (\PF13, 0x80000000)
        Name (\PF14, 0x80000000)
        Name (\PF15, 0x80000000)
        Name (\PF16, 0x80000000)
        Name (\PF17, 0x80000000)
        Name (\PF18, 0x80000000)
        Name (\PF19, 0x80000000)
        Name (\PF20, 0x80000000)
        Name (\PF21, 0x80000000)
        Name (\PF22, 0x80000000)
        Name (\PF23, 0x80000000)
        Name (\PF24, 0x80000000)
        Name (\PF25, 0x80000000)
        Name (\PF26, 0x80000000)
        Name (\PF27, 0x80000000)
        Name (\PF28, 0x80000000)
        Name (\PF29, 0x80000000)
        Name (\PF30, 0x80000000)
        Name (\PF31, 0x80000000)
        Name (\PF32, 0x80000000)
        Name (\PF33, 0x80000000)
        Name (\PF34, 0x80000000)
        Name (\PF35, 0x80000000)
        Name (\PF36, 0x80000000)
        Name (\PF37, 0x80000000)
        Name (\PF38, 0x80000000)
        Name (\PF39, 0x80000000)
        Name (\PF40, 0x80000000)
        Name (\PF41, 0x80000000)
        Name (\PF42, 0x80000000)
        Name (\PF43, 0x80000000)
        Name (\PF44, 0x80000000)
        Name (\PF45, 0x80000000)
        Name (\PF46, 0x80000000)
        Name (\PF47, 0x80000000)
        Name (\PF48, 0x80000000)
        Name (\PF49, 0x80000000)
        Name (\PF50, 0x80000000)
        Name (\PF51, 0x80000000)
        Name (\PF52, 0x80000000)
        Name (\PF53, 0x80000000)
        Name (\PF54, 0x80000000)
        Name (\PF55, 0x80000000)
        Name (\PF56, 0x80000000)
        Name (\PF57, 0x80000000)
        Name (\PF58, 0x80000000)
        Name (\PF59, 0x80000000)
        Name (\PF60, 0x80000000)
        Name (\PF61, 0x80000000)
        Name (\PF62, 0x80000000)
        Name (\PF63, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_SB)
    {
        Name (CTPC, Zero)
        OperationRegion (PNVS, SystemMemory, 0x936CE000, 0x00AA)
        Field (PNVS, AnyAcc, Lock, Preserve)
        {
            PGRV,   8, 
            CFGD,   32, 
            Offset (0x06), 
            ACRT,   8, 
            APSV,   8, 
            AAC0,   8, 
            CPID,   32, 
            CPPC,   8, 
            CLVL,   8, 
            CBMI,   8, 
            PL10,   16, 
            PL11,   16, 
            PL12,   16, 
            PL20,   16, 
            PL21,   16, 
            PL22,   16, 
            PLW0,   8, 
            PLW1,   8, 
            PLW2,   8, 
            CTC0,   8, 
            CTC1,   8, 
            CTC2,   8, 
            TAR0,   8, 
            TAR1,   8, 
            TAR2,   8, 
            PPC0,   8, 
            PPC1,   8, 
            PPC2,   8, 
            Offset (0x29), 
            C6MW,   8, 
            C7MW,   8, 
            CDMW,   8, 
            Offset (0x2E), 
            C6LT,   16, 
            C7LT,   16, 
            CDLT,   16, 
            CDLV,   16, 
            CDPW,   16, 
            MPMF,   8, 
            HWPV,   8, 
            Offset (0x55), 
            LMPS,   8, 
            ITBM,   8, 
            OBIN,   8, 
            TXTE,   8, 
            HWPE,   8, 
            HTRO,   8, 
            CM00,   8, 
            CM01,   8, 
            CM02,   8, 
            CM03,   8, 
            CM04,   8, 
            CM05,   8, 
            CM06,   8, 
            CM07,   8, 
            CM08,   8, 
            CM09,   8, 
            CM10,   8, 
            CM11,   8, 
            CM12,   8, 
            CM13,   8, 
            CM14,   8, 
            CM15,   8, 
            CM16,   8, 
            CM17,   8, 
            CM18,   8, 
            CM19,   8, 
            CM20,   8, 
            CM21,   8, 
            CM22,   8, 
            CM23,   8, 
            CM24,   8, 
            CM25,   8, 
            CM26,   8, 
            CM27,   8, 
            CM28,   8, 
            CM29,   8, 
            CM30,   8, 
            CM31,   8, 
            CM32,   8, 
            CM33,   8, 
            CM34,   8, 
            CM35,   8, 
            CM36,   8, 
            CM37,   8, 
            CM38,   8, 
            CM39,   8, 
            CM40,   8, 
            CM41,   8, 
            CM42,   8, 
            CM43,   8, 
            CM44,   8, 
            CM45,   8, 
            CM46,   8, 
            CM47,   8, 
            CM48,   8, 
            CM49,   8, 
            CM50,   8, 
            CM51,   8, 
            CM52,   8, 
            CM53,   8, 
            CM54,   8, 
            CM55,   8, 
            CM56,   8, 
            CM57,   8, 
            CM58,   8, 
            CM59,   8, 
            CM60,   8, 
            CM61,   8, 
            CM62,   8, 
            CM63,   8, 
            CORE,   32, 
            SFSC,   16, 
            SFBC,   16, 
            NMFQ,   16, 
            INFS,   8, 
            RFBC,   16, 
            RFSC,   16
        }

        OperationRegion (BGNV, SystemMemory, 0x936CD000, 0x000D)
        Field (BGNV, AnyAcc, Lock, Preserve)
        {
            BGMA,   64, 
            BGMS,   8, 
            BGIA,   16, 
            BGIL,   16
        }

        If (CondRefOf (\_SB.BGIL))
        {
            If ((\_SB.BGIL != Zero))
            {
                OperationRegion (IO_P, SystemIO, \_SB.BGIA, \_SB.BGIL)
                Field (IO_P, ByteAcc, NoLock, Preserve)
                {
                    TRPF,   8
                }
            }
        }
    }

    Scope (\_SB.PR00)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Name (HW0, Zero)
        Name (HW2, Zero)
        Name (HP0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Local3 = Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                }
            Concatenate (Local3, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Local0 = ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */
            CreateDWordField (Local0, Zero, EID0)
            CreateDWordField (Local0, 0x04, EID1)
            CreateDWordField (Local0, 0x08, EID2)
            CreateDWordField (Local0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x3BFF
                Return (Zero)
            }

            PF00 = ((PF00 & 0x7FFFFFFF) | CAP0) /* \_SB_.PR00.GCAP.CAP0 */
            If ((CFGD & 0x72))
            {
                If ((((CFGD & 0x0200) && (PF00 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_SB_.PR00.HC0_ */
                }
            }

            If (((PF00 & 0x09) == 0x09))
            {
                If (((CFGD & One) && !(SDTL & 0x08)))
                {
                    SDTL |= 0x08
                    OperationRegion (IST0, SystemMemory, DerefOf (SSDT [One]), DerefOf (SSDT [0x02]))
                    Load (IST0, HI0) /* \_SB_.PR00.HI0_ */
                }
            }

            If ((((CFGD & One) || (CFGD & 0x00400000)) && !
                (SDTL & 0x0100)))
            {
                SDTL |= 0x0100
                OperationRegion (PSD0, SystemMemory, DerefOf (SSDT [0x16]), DerefOf (SSDT [0x17]))
                Load (PSD0, HP0) /* \_SB_.PR00.HP0_ */
            }

            If ((OSYS >= 0x07DF))
            {
                If (((CFGD & 0x00400000) && !(SDTL & 0x40)))
                {
                    If ((\_SB.OSCP & 0x40))
                    {
                        SDTL |= 0x40
                        OperationRegion (HWP0, SystemMemory, DerefOf (SSDT [0x0D]), DerefOf (SSDT [0x0E]))
                        Load (HWP0, HW0) /* \_SB_.PR00.HW0_ */
                    }

                    If ((\_SB.OSCP & 0x20))
                    {
                        If (!(\_SB.OSCP & 0x40))
                        {
                            HWPV = Zero
                        }
                    }

                    If ((\_SB.OSCP & 0x40))
                    {
                        HWPV = 0x02
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PR01)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Name (HW1, Zero)
        Name (HP1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST01)
            CreateDWordField (Arg0, 0x04, CP01)
            If (((ST01 == 0x06) || (ST01 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST01 & One))
            {
                CP01 &= 0x3BFF
                Return (Zero)
            }

            PF01 = ((PF01 & 0x7FFFFFFF) | CP01) /* \_SB_.PR01.GCAP.CP01 */
            If (((PF01 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                HWPT ()
            }

            If ((((PF01 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                APPS ()
            }

            If ((PF01 & 0x18))
            {
                APCT ()
            }

            PF00 = PF01 /* \PF01 */
            Return (Zero)
        }

        Method (APCT, 0, Serialized)
        {
            If (((CFGD & 0x72) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_SB_.PR01.HC1_ */
            }
        }

        Method (APPT, 0, Serialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_SB_.PR01.HI1_ */
            }
        }

        Method (APPS, 0, Serialized)
        {
            If ((((CFGD & One) || (CFGD & 0x00400000)) && !
                (SDTL & 0x0200)))
            {
                SDTL |= 0x0200
                OperationRegion (PSD1, SystemMemory, DerefOf (SSDT [0x19]), DerefOf (SSDT [0x1A]))
                Load (PSD1, HP1) /* \_SB_.PR01.HP1_ */
            }
        }

        Method (HWPT, 0, Serialized)
        {
            If ((OSYS >= 0x07DF))
            {
                If (((CFGD & 0x00400000) && !(SDTL & 0x80)))
                {
                    SDTL |= 0x80
                    OperationRegion (HWP1, SystemMemory, DerefOf (SSDT [0x10]), DerefOf (SSDT [0x11]))
                    Load (HWP1, HW1) /* \_SB_.PR01.HW1_ */
                }
            }
        }
    }

    If (CondRefOf (\_SB.PR02))
    {
        Scope (\_SB.PR02)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST02)
                CreateDWordField (Arg0, 0x04, CP02)
                If (((ST02 == 0x06) || (ST02 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST02 & One))
                {
                    CP02 &= 0x3BFF
                    Return (Zero)
                }

                PF02 = ((PF02 & 0x7FFFFFFF) | CP02) /* \_SB_.PR02.GCAP.CP02 */
                If (((PF02 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF02 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF02 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF02 /* \PF02 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR03))
    {
        Scope (\_SB.PR03)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST03)
                CreateDWordField (Arg0, 0x04, CP03)
                If (((ST03 == 0x06) || (ST03 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST03 & One))
                {
                    CP03 &= 0x3BFF
                    Return (Zero)
                }

                PF03 = ((PF03 & 0x7FFFFFFF) | CP03) /* \_SB_.PR03.GCAP.CP03 */
                If (((PF03 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF03 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF03 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF03 /* \PF03 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR04))
    {
        Scope (\_SB.PR04)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST04)
                CreateDWordField (Arg0, 0x04, CP04)
                If (((ST04 == 0x06) || (ST04 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST04 & One))
                {
                    CP04 &= 0x3BFF
                    Return (Zero)
                }

                PF04 = ((PF04 & 0x7FFFFFFF) | CP04) /* \_SB_.PR04.GCAP.CP04 */
                If (((PF04 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF04 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF04 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF04 /* \PF04 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR05))
    {
        Scope (\_SB.PR05)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST05)
                CreateDWordField (Arg0, 0x04, CP05)
                If (((ST05 == 0x06) || (ST05 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST05 & One))
                {
                    CP05 &= 0x3BFF
                    Return (Zero)
                }

                PF05 = ((PF05 & 0x7FFFFFFF) | CP05) /* \_SB_.PR05.GCAP.CP05 */
                If (((PF05 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF05 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF05 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF05 /* \PF05 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR06))
    {
        Scope (\_SB.PR06)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST06)
                CreateDWordField (Arg0, 0x04, CP06)
                If (((ST06 == 0x06) || (ST06 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST06 & One))
                {
                    CP06 &= 0x3BFF
                    Return (Zero)
                }

                PF06 = ((PF06 & 0x7FFFFFFF) | CP06) /* \_SB_.PR06.GCAP.CP06 */
                If (((PF06 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF06 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF06 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF06 /* \PF06 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR07))
    {
        Scope (\_SB.PR07)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST07)
                CreateDWordField (Arg0, 0x04, CP07)
                If (((ST07 == 0x06) || (ST07 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST07 & One))
                {
                    CP07 &= 0x3BFF
                    Return (Zero)
                }

                PF07 = ((PF07 & 0x7FFFFFFF) | CP07) /* \_SB_.PR07.GCAP.CP07 */
                If (((PF07 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF07 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF07 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF07 /* \PF07 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR08))
    {
        Scope (\_SB.PR08)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST08)
                CreateDWordField (Arg0, 0x04, CP08)
                If (((ST08 == 0x06) || (ST08 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST08 & One))
                {
                    CP08 &= 0x3BFF
                    Return (Zero)
                }

                PF08 = ((PF08 & 0x7FFFFFFF) | CP08) /* \_SB_.PR08.GCAP.CP08 */
                If (((PF08 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF08 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF08 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF08 /* \PF08 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR09))
    {
        Scope (\_SB.PR09)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST09)
                CreateDWordField (Arg0, 0x04, CP09)
                If (((ST09 == 0x06) || (ST09 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST09 & One))
                {
                    CP09 &= 0x3BFF
                    Return (Zero)
                }

                PF09 = ((PF09 & 0x7FFFFFFF) | CP09) /* \_SB_.PR09.GCAP.CP09 */
                If (((PF09 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF09 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF09 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF09 /* \PF09 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR10))
    {
        Scope (\_SB.PR10)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST10)
                CreateDWordField (Arg0, 0x04, CP10)
                If (((ST10 == 0x06) || (ST10 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST10 & One))
                {
                    CP10 &= 0x3BFF
                    Return (Zero)
                }

                PF10 = ((PF10 & 0x7FFFFFFF) | CP10) /* \_SB_.PR10.GCAP.CP10 */
                If (((PF10 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF10 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF10 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF10 /* \PF10 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR11))
    {
        Scope (\_SB.PR11)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST11)
                CreateDWordField (Arg0, 0x04, CP11)
                If (((ST11 == 0x06) || (ST11 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST11 & One))
                {
                    CP11 &= 0x3BFF
                    Return (Zero)
                }

                PF11 = ((PF11 & 0x7FFFFFFF) | CP11) /* \_SB_.PR11.GCAP.CP11 */
                If (((PF11 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF11 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF11 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF11 /* \PF11 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR12))
    {
        Scope (\_SB.PR12)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST12)
                CreateDWordField (Arg0, 0x04, CP12)
                If (((ST12 == 0x06) || (ST12 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST12 & One))
                {
                    CP12 &= 0x3BFF
                    Return (Zero)
                }

                PF12 = ((PF12 & 0x7FFFFFFF) | CP12) /* \_SB_.PR12.GCAP.CP12 */
                If (((PF12 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF12 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF12 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF12 /* \PF12 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR13))
    {
        Scope (\_SB.PR13)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST13)
                CreateDWordField (Arg0, 0x04, CP13)
                If (((ST13 == 0x06) || (ST13 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST13 & One))
                {
                    CP13 &= 0x3BFF
                    Return (Zero)
                }

                PF13 = ((PF13 & 0x7FFFFFFF) | CP13) /* \_SB_.PR13.GCAP.CP13 */
                If (((PF13 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF13 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF13 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF13 /* \PF13 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR14))
    {
        Scope (\_SB.PR14)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST14)
                CreateDWordField (Arg0, 0x04, CP14)
                If (((ST14 == 0x06) || (ST14 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST14 & One))
                {
                    CP14 &= 0x3BFF
                    Return (Zero)
                }

                PF14 = ((PF14 & 0x7FFFFFFF) | CP14) /* \_SB_.PR14.GCAP.CP14 */
                If (((PF14 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF14 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF14 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF14 /* \PF14 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR15))
    {
        Scope (\_SB.PR15)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST15)
                CreateDWordField (Arg0, 0x04, CP15)
                If (((ST15 == 0x06) || (ST15 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST15 & One))
                {
                    CP15 &= 0x3BFF
                    Return (Zero)
                }

                PF15 = ((PF15 & 0x7FFFFFFF) | CP15) /* \_SB_.PR15.GCAP.CP15 */
                If (((PF15 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF15 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF15 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF15 /* \PF15 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR16))
    {
        Scope (\_SB.PR16)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST16)
                CreateDWordField (Arg0, 0x04, CP16)
                If (((ST16 == 0x06) || (ST16 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST16 & One))
                {
                    CP16 &= 0x3BFF
                    Return (Zero)
                }

                PF16 = ((PF16 & 0x7FFFFFFF) | CP16) /* \_SB_.PR16.GCAP.CP16 */
                If (((PF16 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF16 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF16 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF16 /* \PF16 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR17))
    {
        Scope (\_SB.PR17)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST17)
                CreateDWordField (Arg0, 0x04, CP17)
                If (((ST17 == 0x06) || (ST17 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST17 & One))
                {
                    CP17 &= 0x3BFF
                    Return (Zero)
                }

                PF17 = ((PF17 & 0x7FFFFFFF) | CP17) /* \_SB_.PR17.GCAP.CP17 */
                If (((PF17 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF17 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF17 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF17 /* \PF17 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR18))
    {
        Scope (\_SB.PR18)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST18)
                CreateDWordField (Arg0, 0x04, CP18)
                If (((ST18 == 0x06) || (ST18 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST18 & One))
                {
                    CP18 &= 0x3BFF
                    Return (Zero)
                }

                PF18 = ((PF18 & 0x7FFFFFFF) | CP18) /* \_SB_.PR18.GCAP.CP18 */
                If (((PF18 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF18 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF18 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF18 /* \PF18 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR19))
    {
        Scope (\_SB.PR19)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST19)
                CreateDWordField (Arg0, 0x04, CP19)
                If (((ST19 == 0x06) || (ST19 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST19 & One))
                {
                    CP19 &= 0x3BFF
                    Return (Zero)
                }

                PF19 = ((PF19 & 0x7FFFFFFF) | CP19) /* \_SB_.PR19.GCAP.CP19 */
                If (((PF19 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF19 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF19 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF19 /* \PF19 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR20))
    {
        Scope (\_SB.PR20)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST20)
                CreateDWordField (Arg0, 0x04, CP20)
                If (((ST20 == 0x06) || (ST20 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST20 & One))
                {
                    CP20 &= 0x3BFF
                    Return (Zero)
                }

                PF20 = ((PF20 & 0x7FFFFFFF) | CP20) /* \_SB_.PR20.GCAP.CP20 */
                If (((PF20 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF20 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF20 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF20 /* \PF20 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR21))
    {
        Scope (\_SB.PR21)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST21)
                CreateDWordField (Arg0, 0x04, CP21)
                If (((ST21 == 0x06) || (ST21 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST21 & One))
                {
                    CP21 &= 0x3BFF
                    Return (Zero)
                }

                PF21 = ((PF21 & 0x7FFFFFFF) | CP21) /* \_SB_.PR21.GCAP.CP21 */
                If (((PF21 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF21 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF21 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF21 /* \PF21 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR22))
    {
        Scope (\_SB.PR22)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST22)
                CreateDWordField (Arg0, 0x04, CP22)
                If (((ST22 == 0x06) || (ST22 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST22 & One))
                {
                    CP22 &= 0x3BFF
                    Return (Zero)
                }

                PF22 = ((PF22 & 0x7FFFFFFF) | CP22) /* \_SB_.PR22.GCAP.CP22 */
                If (((PF22 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF22 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF22 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF22 /* \PF22 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR23))
    {
        Scope (\_SB.PR23)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST23)
                CreateDWordField (Arg0, 0x04, CP23)
                If (((ST23 == 0x06) || (ST23 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST23 & One))
                {
                    CP23 &= 0x3BFF
                    Return (Zero)
                }

                PF23 = ((PF23 & 0x7FFFFFFF) | CP23) /* \_SB_.PR23.GCAP.CP23 */
                If (((PF23 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF23 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF23 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF23 /* \PF23 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR24))
    {
        Scope (\_SB.PR24)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST24)
                CreateDWordField (Arg0, 0x04, CP24)
                If (((ST24 == 0x06) || (ST24 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST24 & One))
                {
                    CP24 &= 0x3BFF
                    Return (Zero)
                }

                PF24 = ((PF24 & 0x7FFFFFFF) | CP24) /* \_SB_.PR24.GCAP.CP24 */
                If (((PF24 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF24 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF24 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF24 /* \PF24 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR25))
    {
        Scope (\_SB.PR25)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST25)
                CreateDWordField (Arg0, 0x04, CP25)
                If (((ST25 == 0x06) || (ST25 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST25 & One))
                {
                    CP25 &= 0x3BFF
                    Return (Zero)
                }

                PF25 = ((PF25 & 0x7FFFFFFF) | CP25) /* \_SB_.PR25.GCAP.CP25 */
                If (((PF25 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF25 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF25 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF25 /* \PF25 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR26))
    {
        Scope (\_SB.PR26)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST26)
                CreateDWordField (Arg0, 0x04, CP26)
                If (((ST26 == 0x06) || (ST26 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST26 & One))
                {
                    CP26 &= 0x3BFF
                    Return (Zero)
                }

                PF26 = ((PF26 & 0x7FFFFFFF) | CP26) /* \_SB_.PR26.GCAP.CP26 */
                If (((PF26 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF26 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF26 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF26 /* \PF26 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR27))
    {
        Scope (\_SB.PR27)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST27)
                CreateDWordField (Arg0, 0x04, CP27)
                If (((ST27 == 0x06) || (ST27 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST27 & One))
                {
                    CP27 &= 0x3BFF
                    Return (Zero)
                }

                PF27 = ((PF27 & 0x7FFFFFFF) | CP27) /* \_SB_.PR27.GCAP.CP27 */
                If (((PF27 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF27 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF27 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF27 /* \PF27 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR28))
    {
        Scope (\_SB.PR28)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST28)
                CreateDWordField (Arg0, 0x04, CP28)
                If (((ST28 == 0x06) || (ST28 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST28 & One))
                {
                    CP28 &= 0x3BFF
                    Return (Zero)
                }

                PF28 = ((PF28 & 0x7FFFFFFF) | CP28) /* \_SB_.PR28.GCAP.CP28 */
                If (((PF28 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF28 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF28 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF28 /* \PF28 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR29))
    {
        Scope (\_SB.PR29)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST29)
                CreateDWordField (Arg0, 0x04, CP29)
                If (((ST29 == 0x06) || (ST29 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST29 & One))
                {
                    CP29 &= 0x3BFF
                    Return (Zero)
                }

                PF29 = ((PF29 & 0x7FFFFFFF) | CP29) /* \_SB_.PR29.GCAP.CP29 */
                If (((PF29 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF29 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF29 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF29 /* \PF29 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR30))
    {
        Scope (\_SB.PR30)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST30)
                CreateDWordField (Arg0, 0x04, CP30)
                If (((ST30 == 0x06) || (ST30 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST30 & One))
                {
                    CP30 &= 0x3BFF
                    Return (Zero)
                }

                PF30 = ((PF30 & 0x7FFFFFFF) | CP30) /* \_SB_.PR30.GCAP.CP30 */
                If (((PF30 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF30 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF30 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF30 /* \PF30 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR31))
    {
        Scope (\_SB.PR31)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST31)
                CreateDWordField (Arg0, 0x04, CP31)
                If (((ST31 == 0x06) || (ST31 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST31 & One))
                {
                    CP31 &= 0x3BFF
                    Return (Zero)
                }

                PF31 = ((PF31 & 0x7FFFFFFF) | CP31) /* \_SB_.PR31.GCAP.CP31 */
                If (((PF31 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF31 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF31 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF31 /* \PF31 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR32))
    {
        Scope (\_SB.PR32)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST32)
                CreateDWordField (Arg0, 0x04, CP32)
                If (((ST32 == 0x06) || (ST32 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST32 & One))
                {
                    CP32 &= 0x3BFF
                    Return (Zero)
                }

                PF32 = ((PF32 & 0x7FFFFFFF) | CP32) /* \_SB_.PR32.GCAP.CP32 */
                If (((PF32 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF32 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF32 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF32 /* \PF32 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR33))
    {
        Scope (\_SB.PR33)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST33)
                CreateDWordField (Arg0, 0x04, CP33)
                If (((ST33 == 0x06) || (ST33 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST33 & One))
                {
                    CP33 &= 0x3BFF
                    Return (Zero)
                }

                PF33 = ((PF33 & 0x7FFFFFFF) | CP33) /* \_SB_.PR33.GCAP.CP33 */
                If (((PF33 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF33 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF33 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF33 /* \PF33 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR34))
    {
        Scope (\_SB.PR34)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST34)
                CreateDWordField (Arg0, 0x04, CP34)
                If (((ST34 == 0x06) || (ST34 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST34 & One))
                {
                    CP34 &= 0x3BFF
                    Return (Zero)
                }

                PF34 = ((PF34 & 0x7FFFFFFF) | CP34) /* \_SB_.PR34.GCAP.CP34 */
                If (((PF34 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF34 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF34 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF34 /* \PF34 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR35))
    {
        Scope (\_SB.PR35)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST35)
                CreateDWordField (Arg0, 0x04, CP35)
                If (((ST35 == 0x06) || (ST35 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST35 & One))
                {
                    CP35 &= 0x3BFF
                    Return (Zero)
                }

                PF35 = ((PF35 & 0x7FFFFFFF) | CP35) /* \_SB_.PR35.GCAP.CP35 */
                If (((PF35 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF35 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF35 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF35 /* \PF35 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR36))
    {
        Scope (\_SB.PR36)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST36)
                CreateDWordField (Arg0, 0x04, CP36)
                If (((ST36 == 0x06) || (ST36 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST36 & One))
                {
                    CP36 &= 0x3BFF
                    Return (Zero)
                }

                PF36 = ((PF36 & 0x7FFFFFFF) | CP36) /* \_SB_.PR36.GCAP.CP36 */
                If (((PF36 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF36 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF36 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF36 /* \PF36 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR37))
    {
        Scope (\_SB.PR37)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST37)
                CreateDWordField (Arg0, 0x04, CP37)
                If (((ST37 == 0x06) || (ST37 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST37 & One))
                {
                    CP37 &= 0x3BFF
                    Return (Zero)
                }

                PF37 = ((PF37 & 0x7FFFFFFF) | CP37) /* \_SB_.PR37.GCAP.CP37 */
                If (((PF37 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF37 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF37 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF37 /* \PF37 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR38))
    {
        Scope (\_SB.PR38)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST38)
                CreateDWordField (Arg0, 0x04, CP38)
                If (((ST38 == 0x06) || (ST38 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST38 & One))
                {
                    CP38 &= 0x3BFF
                    Return (Zero)
                }

                PF38 = ((PF38 & 0x7FFFFFFF) | CP38) /* \_SB_.PR38.GCAP.CP38 */
                If (((PF38 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF38 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF38 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF38 /* \PF38 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR39))
    {
        Scope (\_SB.PR39)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST39)
                CreateDWordField (Arg0, 0x04, CP39)
                If (((ST39 == 0x06) || (ST39 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST39 & One))
                {
                    CP39 &= 0x3BFF
                    Return (Zero)
                }

                PF39 = ((PF39 & 0x7FFFFFFF) | CP39) /* \_SB_.PR39.GCAP.CP39 */
                If (((PF39 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF39 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF39 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF39 /* \PF39 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR40))
    {
        Scope (\_SB.PR40)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST40)
                CreateDWordField (Arg0, 0x04, CP40)
                If (((ST40 == 0x06) || (ST40 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST40 & One))
                {
                    CP40 &= 0x3BFF
                    Return (Zero)
                }

                PF40 = ((PF40 & 0x7FFFFFFF) | CP40) /* \_SB_.PR40.GCAP.CP40 */
                If (((PF40 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF40 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF40 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF40 /* \PF40 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR41))
    {
        Scope (\_SB.PR41)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST41)
                CreateDWordField (Arg0, 0x04, CP41)
                If (((ST41 == 0x06) || (ST41 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST41 & One))
                {
                    CP41 &= 0x3BFF
                    Return (Zero)
                }

                PF41 = ((PF41 & 0x7FFFFFFF) | CP41) /* \_SB_.PR41.GCAP.CP41 */
                If (((PF41 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF41 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF41 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF41 /* \PF41 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR42))
    {
        Scope (\_SB.PR42)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST42)
                CreateDWordField (Arg0, 0x04, CP42)
                If (((ST42 == 0x06) || (ST42 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST42 & One))
                {
                    CP42 &= 0x3BFF
                    Return (Zero)
                }

                PF42 = ((PF42 & 0x7FFFFFFF) | CP42) /* \_SB_.PR42.GCAP.CP42 */
                If (((PF42 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF42 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF42 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF42 /* \PF42 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR43))
    {
        Scope (\_SB.PR43)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST43)
                CreateDWordField (Arg0, 0x04, CP43)
                If (((ST43 == 0x06) || (ST43 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST43 & One))
                {
                    CP43 &= 0x3BFF
                    Return (Zero)
                }

                PF43 = ((PF43 & 0x7FFFFFFF) | CP43) /* \_SB_.PR43.GCAP.CP43 */
                If (((PF43 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF43 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF43 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF43 /* \PF43 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR44))
    {
        Scope (\_SB.PR44)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST44)
                CreateDWordField (Arg0, 0x04, CP44)
                If (((ST44 == 0x06) || (ST44 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST44 & One))
                {
                    CP44 &= 0x3BFF
                    Return (Zero)
                }

                PF44 = ((PF44 & 0x7FFFFFFF) | CP44) /* \_SB_.PR44.GCAP.CP44 */
                If (((PF44 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF44 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF44 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF44 /* \PF44 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR45))
    {
        Scope (\_SB.PR45)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST45)
                CreateDWordField (Arg0, 0x04, CP45)
                If (((ST45 == 0x06) || (ST45 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST45 & One))
                {
                    CP45 &= 0x3BFF
                    Return (Zero)
                }

                PF45 = ((PF45 & 0x7FFFFFFF) | CP45) /* \_SB_.PR45.GCAP.CP45 */
                If (((PF45 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF45 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF45 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF45 /* \PF45 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR46))
    {
        Scope (\_SB.PR46)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST46)
                CreateDWordField (Arg0, 0x04, CP46)
                If (((ST46 == 0x06) || (ST46 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST46 & One))
                {
                    CP46 &= 0x3BFF
                    Return (Zero)
                }

                PF46 = ((PF46 & 0x7FFFFFFF) | CP46) /* \_SB_.PR46.GCAP.CP46 */
                If (((PF46 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF46 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF46 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF46 /* \PF46 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR47))
    {
        Scope (\_SB.PR47)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST47)
                CreateDWordField (Arg0, 0x04, CP47)
                If (((ST47 == 0x06) || (ST47 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST47 & One))
                {
                    CP47 &= 0x3BFF
                    Return (Zero)
                }

                PF47 = ((PF47 & 0x7FFFFFFF) | CP47) /* \_SB_.PR47.GCAP.CP47 */
                If (((PF47 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF47 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF47 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF47 /* \PF47 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR48))
    {
        Scope (\_SB.PR48)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST48)
                CreateDWordField (Arg0, 0x04, CP48)
                If (((ST48 == 0x06) || (ST48 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST48 & One))
                {
                    CP48 &= 0x3BFF
                    Return (Zero)
                }

                PF48 = ((PF48 & 0x7FFFFFFF) | CP48) /* \_SB_.PR48.GCAP.CP48 */
                If (((PF48 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF48 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF48 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF48 /* \PF48 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR49))
    {
        Scope (\_SB.PR49)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST49)
                CreateDWordField (Arg0, 0x04, CP49)
                If (((ST49 == 0x06) || (ST49 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST49 & One))
                {
                    CP49 &= 0x3BFF
                    Return (Zero)
                }

                PF49 = ((PF49 & 0x7FFFFFFF) | CP49) /* \_SB_.PR49.GCAP.CP49 */
                If (((PF49 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF49 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF49 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF49 /* \PF49 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR50))
    {
        Scope (\_SB.PR50)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST50)
                CreateDWordField (Arg0, 0x04, CP50)
                If (((ST50 == 0x06) || (ST50 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST50 & One))
                {
                    CP50 &= 0x3BFF
                    Return (Zero)
                }

                PF50 = ((PF50 & 0x7FFFFFFF) | CP50) /* \_SB_.PR50.GCAP.CP50 */
                If (((PF50 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF50 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF50 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF50 /* \PF50 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR51))
    {
        Scope (\_SB.PR51)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST51)
                CreateDWordField (Arg0, 0x04, CP51)
                If (((ST51 == 0x06) || (ST51 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST51 & One))
                {
                    CP51 &= 0x3BFF
                    Return (Zero)
                }

                PF51 = ((PF51 & 0x7FFFFFFF) | CP51) /* \_SB_.PR51.GCAP.CP51 */
                If (((PF51 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF51 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF51 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF51 /* \PF51 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR52))
    {
        Scope (\_SB.PR52)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST52)
                CreateDWordField (Arg0, 0x04, CP52)
                If (((ST52 == 0x06) || (ST52 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST52 & One))
                {
                    CP52 &= 0x3BFF
                    Return (Zero)
                }

                PF52 = ((PF52 & 0x7FFFFFFF) | CP52) /* \_SB_.PR52.GCAP.CP52 */
                If (((PF52 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF52 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF52 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF52 /* \PF52 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR53))
    {
        Scope (\_SB.PR53)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST53)
                CreateDWordField (Arg0, 0x04, CP53)
                If (((ST53 == 0x06) || (ST53 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST53 & One))
                {
                    CP53 &= 0x3BFF
                    Return (Zero)
                }

                PF53 = ((PF53 & 0x7FFFFFFF) | CP53) /* \_SB_.PR53.GCAP.CP53 */
                If (((PF53 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF53 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF53 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF53 /* \PF53 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR54))
    {
        Scope (\_SB.PR54)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST54)
                CreateDWordField (Arg0, 0x04, CP54)
                If (((ST54 == 0x06) || (ST54 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST54 & One))
                {
                    CP54 &= 0x3BFF
                    Return (Zero)
                }

                PF54 = ((PF54 & 0x7FFFFFFF) | CP54) /* \_SB_.PR54.GCAP.CP54 */
                If (((PF54 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF54 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF54 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF54 /* \PF54 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR55))
    {
        Scope (\_SB.PR55)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST55)
                CreateDWordField (Arg0, 0x04, CP55)
                If (((ST55 == 0x06) || (ST55 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST55 & One))
                {
                    CP55 &= 0x3BFF
                    Return (Zero)
                }

                PF55 = ((PF55 & 0x7FFFFFFF) | CP55) /* \_SB_.PR55.GCAP.CP55 */
                If (((PF55 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF55 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF55 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF55 /* \PF55 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR56))
    {
        Scope (\_SB.PR56)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST56)
                CreateDWordField (Arg0, 0x04, CP56)
                If (((ST56 == 0x06) || (ST56 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST56 & One))
                {
                    CP56 &= 0x3BFF
                    Return (Zero)
                }

                PF56 = ((PF56 & 0x7FFFFFFF) | CP56) /* \_SB_.PR56.GCAP.CP56 */
                If (((PF56 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF56 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF56 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF56 /* \PF56 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR57))
    {
        Scope (\_SB.PR57)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST57)
                CreateDWordField (Arg0, 0x04, CP57)
                If (((ST57 == 0x06) || (ST57 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST57 & One))
                {
                    CP57 &= 0x3BFF
                    Return (Zero)
                }

                PF57 = ((PF57 & 0x7FFFFFFF) | CP57) /* \_SB_.PR57.GCAP.CP57 */
                If (((PF57 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF57 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF57 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF57 /* \PF57 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR58))
    {
        Scope (\_SB.PR58)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST58)
                CreateDWordField (Arg0, 0x04, CP58)
                If (((ST58 == 0x06) || (ST58 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST58 & One))
                {
                    CP58 &= 0x3BFF
                    Return (Zero)
                }

                PF58 = ((PF58 & 0x7FFFFFFF) | CP58) /* \_SB_.PR58.GCAP.CP58 */
                If (((PF58 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF58 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF58 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF58 /* \PF58 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR59))
    {
        Scope (\_SB.PR59)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST59)
                CreateDWordField (Arg0, 0x04, CP59)
                If (((ST59 == 0x06) || (ST59 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST59 & One))
                {
                    CP59 &= 0x3BFF
                    Return (Zero)
                }

                PF59 = ((PF59 & 0x7FFFFFFF) | CP59) /* \_SB_.PR59.GCAP.CP59 */
                If (((PF59 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF59 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF59 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF59 /* \PF59 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR60))
    {
        Scope (\_SB.PR60)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST60)
                CreateDWordField (Arg0, 0x04, CP60)
                If (((ST60 == 0x06) || (ST60 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST60 & One))
                {
                    CP60 &= 0x3BFF
                    Return (Zero)
                }

                PF60 = ((PF60 & 0x7FFFFFFF) | CP60) /* \_SB_.PR60.GCAP.CP60 */
                If (((PF60 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF60 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF60 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF60 /* \PF60 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR61))
    {
        Scope (\_SB.PR61)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST61)
                CreateDWordField (Arg0, 0x04, CP61)
                If (((ST61 == 0x06) || (ST61 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST61 & One))
                {
                    CP61 &= 0x3BFF
                    Return (Zero)
                }

                PF61 = ((PF61 & 0x7FFFFFFF) | CP61) /* \_SB_.PR61.GCAP.CP61 */
                If (((PF61 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF61 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF61 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF61 /* \PF61 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR62))
    {
        Scope (\_SB.PR62)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST62)
                CreateDWordField (Arg0, 0x04, CP62)
                If (((ST62 == 0x06) || (ST62 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST62 & One))
                {
                    CP62 &= 0x3BFF
                    Return (Zero)
                }

                PF62 = ((PF62 & 0x7FFFFFFF) | CP62) /* \_SB_.PR62.GCAP.CP62 */
                If (((PF62 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF62 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF62 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF62 /* \PF62 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR63))
    {
        Scope (\_SB.PR63)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST63)
                CreateDWordField (Arg0, 0x04, CP63)
                If (((ST63 == 0x06) || (ST63 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST63 & One))
                {
                    CP63 &= 0x3BFF
                    Return (Zero)
                }

                PF63 = ((PF63 & 0x7FFFFFFF) | CP63) /* \_SB_.PR63.GCAP.CP63 */
                If (((PF63 & 0x09) == 0x09))
                {
                    \_SB.PR01.APPT ()
                }

                If ((\_SB.OSCP & 0x20))
                {
                    \_SB.PR01.HWPT ()
                }

                If ((((PF63 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
                {
                    \_SB.PR01.APPS ()
                }

                If ((PF63 & 0x18))
                {
                    \_SB.PR01.APCT ()
                }

                PF00 = PF63 /* \PF63 */
                Return (Zero)
            }
        }
    }

    Scope (\_SB)
    {
        If ((TXTE == One))
        {
            Device (ACM)
            {
                Name (_HID, "INTC1025")  // _HID: Hardware ID
                Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
                {
                    Local0 = (CPID & 0xFFFFFFF0)
                    If (((Local0 == 0x000806C0) || (Local0 == 0x000806D0)))
                    {
                        Return ("INT_TGL_SINIT")
                    }

                    If (((Local0 == 0x00090670) || (Local0 == 0x000906A0)))
                    {
                        Return ("INT_ADL_SINIT")
                    }

                    If (((Local0 == 0x000B0670) || (Local0 == 0x000B06A0)))
                    {
                        Return ("INT_RPL_SINIT")
                    }

                    If ((((Local0 == 0x000A06A0) || (Local0 == 0x000A06B0)) || (Local0 == 0x000A06C0)))
                    {
                        Return ("INT_MTL_SINIT")
                    }

                    Return ("INT_UNK_SINIT")
                }
            }
        }
    }
}



SSDT20
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApHwp", 0x00003000)
{
    External (_SB_.PR00.GCPC, MethodObj)    // 1 Arguments
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (_SB_.PR24, DeviceObj)
    External (_SB_.PR25, DeviceObj)
    External (_SB_.PR26, DeviceObj)
    External (_SB_.PR27, DeviceObj)
    External (_SB_.PR28, DeviceObj)
    External (_SB_.PR29, DeviceObj)
    External (_SB_.PR30, DeviceObj)
    External (_SB_.PR31, DeviceObj)
    External (_SB_.PR32, DeviceObj)
    External (_SB_.PR33, DeviceObj)
    External (_SB_.PR34, DeviceObj)
    External (_SB_.PR35, DeviceObj)
    External (_SB_.PR36, DeviceObj)
    External (_SB_.PR37, DeviceObj)
    External (_SB_.PR38, DeviceObj)
    External (_SB_.PR39, DeviceObj)
    External (_SB_.PR40, DeviceObj)
    External (_SB_.PR41, DeviceObj)
    External (_SB_.PR42, DeviceObj)
    External (_SB_.PR43, DeviceObj)
    External (_SB_.PR44, DeviceObj)
    External (_SB_.PR45, DeviceObj)
    External (_SB_.PR46, DeviceObj)
    External (_SB_.PR47, DeviceObj)
    External (_SB_.PR48, DeviceObj)
    External (_SB_.PR49, DeviceObj)
    External (_SB_.PR50, DeviceObj)
    External (_SB_.PR51, DeviceObj)
    External (_SB_.PR52, DeviceObj)
    External (_SB_.PR53, DeviceObj)
    External (_SB_.PR54, DeviceObj)
    External (_SB_.PR55, DeviceObj)
    External (_SB_.PR56, DeviceObj)
    External (_SB_.PR57, DeviceObj)
    External (_SB_.PR58, DeviceObj)
    External (_SB_.PR59, DeviceObj)
    External (_SB_.PR60, DeviceObj)
    External (_SB_.PR61, DeviceObj)
    External (_SB_.PR62, DeviceObj)
    External (_SB_.PR63, DeviceObj)

    If (CondRefOf (\_SB.PR01))
    {
        Scope (\_SB.PR01)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (One))
            }
        }
    }

    If (CondRefOf (\_SB.PR02))
    {
        Scope (\_SB.PR02)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x02))
            }
        }
    }

    If (CondRefOf (\_SB.PR03))
    {
        Scope (\_SB.PR03)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x03))
            }
        }
    }

    If (CondRefOf (\_SB.PR04))
    {
        Scope (\_SB.PR04)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x04))
            }
        }
    }

    If (CondRefOf (\_SB.PR05))
    {
        Scope (\_SB.PR05)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x05))
            }
        }
    }

    If (CondRefOf (\_SB.PR06))
    {
        Scope (\_SB.PR06)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x06))
            }
        }
    }

    If (CondRefOf (\_SB.PR07))
    {
        Scope (\_SB.PR07)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x07))
            }
        }
    }

    If (CondRefOf (\_SB.PR08))
    {
        Scope (\_SB.PR08)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x08))
            }
        }
    }

    If (CondRefOf (\_SB.PR09))
    {
        Scope (\_SB.PR09)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x09))
            }
        }
    }

    If (CondRefOf (\_SB.PR10))
    {
        Scope (\_SB.PR10)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x0A))
            }
        }
    }

    If (CondRefOf (\_SB.PR11))
    {
        Scope (\_SB.PR11)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x0B))
            }
        }
    }

    If (CondRefOf (\_SB.PR12))
    {
        Scope (\_SB.PR12)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x0C))
            }
        }
    }

    If (CondRefOf (\_SB.PR13))
    {
        Scope (\_SB.PR13)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x0D))
            }
        }
    }

    If (CondRefOf (\_SB.PR14))
    {
        Scope (\_SB.PR14)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x0E))
            }
        }
    }

    If (CondRefOf (\_SB.PR15))
    {
        Scope (\_SB.PR15)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x0F))
            }
        }
    }

    If (CondRefOf (\_SB.PR16))
    {
        Scope (\_SB.PR16)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x10))
            }
        }
    }

    If (CondRefOf (\_SB.PR17))
    {
        Scope (\_SB.PR17)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x11))
            }
        }
    }

    If (CondRefOf (\_SB.PR18))
    {
        Scope (\_SB.PR18)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x12))
            }
        }
    }

    If (CondRefOf (\_SB.PR19))
    {
        Scope (\_SB.PR19)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x13))
            }
        }
    }

    If (CondRefOf (\_SB.PR20))
    {
        Scope (\_SB.PR20)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x14))
            }
        }
    }

    If (CondRefOf (\_SB.PR21))
    {
        Scope (\_SB.PR21)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x15))
            }
        }
    }

    If (CondRefOf (\_SB.PR22))
    {
        Scope (\_SB.PR22)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x16))
            }
        }
    }

    If (CondRefOf (\_SB.PR23))
    {
        Scope (\_SB.PR23)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x17))
            }
        }
    }

    If (CondRefOf (\_SB.PR24))
    {
        Scope (\_SB.PR24)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x18))
            }
        }
    }

    If (CondRefOf (\_SB.PR25))
    {
        Scope (\_SB.PR25)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x19))
            }
        }
    }

    If (CondRefOf (\_SB.PR26))
    {
        Scope (\_SB.PR26)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x1A))
            }
        }
    }

    If (CondRefOf (\_SB.PR27))
    {
        Scope (\_SB.PR27)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x1B))
            }
        }
    }

    If (CondRefOf (\_SB.PR28))
    {
        Scope (\_SB.PR28)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x1C))
            }
        }
    }

    If (CondRefOf (\_SB.PR29))
    {
        Scope (\_SB.PR29)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x1D))
            }
        }
    }

    If (CondRefOf (\_SB.PR30))
    {
        Scope (\_SB.PR30)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x1E))
            }
        }
    }

    If (CondRefOf (\_SB.PR31))
    {
        Scope (\_SB.PR31)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x1F))
            }
        }
    }

    If (CondRefOf (\_SB.PR32))
    {
        Scope (\_SB.PR32)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x20))
            }
        }
    }

    If (CondRefOf (\_SB.PR33))
    {
        Scope (\_SB.PR33)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x21))
            }
        }
    }

    If (CondRefOf (\_SB.PR34))
    {
        Scope (\_SB.PR34)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x22))
            }
        }
    }

    If (CondRefOf (\_SB.PR35))
    {
        Scope (\_SB.PR35)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x23))
            }
        }
    }

    If (CondRefOf (\_SB.PR36))
    {
        Scope (\_SB.PR36)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x24))
            }
        }
    }

    If (CondRefOf (\_SB.PR37))
    {
        Scope (\_SB.PR37)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x25))
            }
        }
    }

    If (CondRefOf (\_SB.PR38))
    {
        Scope (\_SB.PR38)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x26))
            }
        }
    }

    If (CondRefOf (\_SB.PR39))
    {
        Scope (\_SB.PR39)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x27))
            }
        }
    }

    If (CondRefOf (\_SB.PR40))
    {
        Scope (\_SB.PR40)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x28))
            }
        }
    }

    If (CondRefOf (\_SB.PR41))
    {
        Scope (\_SB.PR41)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x29))
            }
        }
    }

    If (CondRefOf (\_SB.PR42))
    {
        Scope (\_SB.PR42)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x2A))
            }
        }
    }

    If (CondRefOf (\_SB.PR43))
    {
        Scope (\_SB.PR43)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x2B))
            }
        }
    }

    If (CondRefOf (\_SB.PR44))
    {
        Scope (\_SB.PR44)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x2C))
            }
        }
    }

    If (CondRefOf (\_SB.PR45))
    {
        Scope (\_SB.PR45)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x2D))
            }
        }
    }

    If (CondRefOf (\_SB.PR46))
    {
        Scope (\_SB.PR46)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x2E))
            }
        }
    }

    If (CondRefOf (\_SB.PR47))
    {
        Scope (\_SB.PR47)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x2F))
            }
        }
    }

    If (CondRefOf (\_SB.PR48))
    {
        Scope (\_SB.PR48)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x30))
            }
        }
    }

    If (CondRefOf (\_SB.PR49))
    {
        Scope (\_SB.PR49)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x31))
            }
        }
    }

    If (CondRefOf (\_SB.PR50))
    {
        Scope (\_SB.PR50)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x32))
            }
        }
    }

    If (CondRefOf (\_SB.PR51))
    {
        Scope (\_SB.PR51)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x33))
            }
        }
    }

    If (CondRefOf (\_SB.PR52))
    {
        Scope (\_SB.PR52)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x34))
            }
        }
    }

    If (CondRefOf (\_SB.PR53))
    {
        Scope (\_SB.PR53)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x35))
            }
        }
    }

    If (CondRefOf (\_SB.PR54))
    {
        Scope (\_SB.PR54)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x36))
            }
        }
    }

    If (CondRefOf (\_SB.PR55))
    {
        Scope (\_SB.PR55)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x37))
            }
        }
    }

    If (CondRefOf (\_SB.PR56))
    {
        Scope (\_SB.PR56)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x38))
            }
        }
    }

    If (CondRefOf (\_SB.PR57))
    {
        Scope (\_SB.PR57)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x39))
            }
        }
    }

    If (CondRefOf (\_SB.PR58))
    {
        Scope (\_SB.PR58)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x3A))
            }
        }
    }

    If (CondRefOf (\_SB.PR59))
    {
        Scope (\_SB.PR59)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x3B))
            }
        }
    }

    If (CondRefOf (\_SB.PR60))
    {
        Scope (\_SB.PR60)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x3C))
            }
        }
    }

    If (CondRefOf (\_SB.PR61))
    {
        Scope (\_SB.PR61)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x3D))
            }
        }
    }

    If (CondRefOf (\_SB.PR62))
    {
        Scope (\_SB.PR62)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x3E))
            }
        }
    }

    If (CondRefOf (\_SB.PR63))
    {
        Scope (\_SB.PR63)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x3F))
            }
        }
    }
}



SSDT21
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Hwp", 0x00003000)
{
    External (_SB_.CFGD, IntObj)
    External (_SB_.HWPE, IntObj)
    External (_SB_.HWPV, IntObj)
    External (_SB_.ITBM, IntObj)
    External (_SB_.LMPS, IntObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR00.CPC2, PkgObj)
    External (CORE, UnknownObj)
    External (INFS, UnknownObj)
    External (NMFQ, UnknownObj)
    External (RFBC, UnknownObj)
    External (RFSC, UnknownObj)
    External (SFBC, UnknownObj)
    External (SFSC, UnknownObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR00)
    {
        Name (CPOC, Package (0x17)
        {
            0x17, 
            0x03, 
            0xFF, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero, 
            Zero, 
            Zero
        })
        Name (CPC3, Package (0x17)
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero, 
            Zero, 
            Zero
        })
        Method (GCPC, 1, NotSerialized)
        {
            If (INFS)
            {
                CPC3 [0x16] = NMFQ /* External reference */
                CPOC [0x16] = NMFQ /* External reference */
                If (((CORE >> Arg0) & One))
                {
                    CPC3 [0x03] = SFBC /* External reference */
                    CPOC [0x03] = SFBC /* External reference */
                    CPC3 [0x14] = RFBC /* External reference */
                    CPOC [0x14] = RFBC /* External reference */
                }
                Else
                {
                    CPC3 [0x03] = SFSC /* External reference */
                    CPOC [0x03] = SFSC /* External reference */
                    CPC3 [0x14] = RFSC /* External reference */
                    CPOC [0x14] = RFSC /* External reference */
                }
            }

            If ((\_SB.CFGD & 0x01000000))
            {
                Return (CPOC) /* \_SB_.PR00.CPOC */
            }
            Else
            {
                If (((\_SB.CFGD & 0x02000000) && (\_SB.ITBM == Zero)))
                {
                    If ((\_SB.LMPS != Zero))
                    {
                        Return (CPOC) /* \_SB_.PR00.CPOC */
                    }
                }

                Return (CPC3) /* \_SB_.PR00.CPC3 */
            }
        }

        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (GCPC (Zero))
        }
    }
}



SSDT22
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Ist", 0x00003000)
{
    External (_SB_.CPPC, FieldUnitObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR00)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.CPPC) /* External reference */
        }

        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((\_SB.OSCP & 0x0400))
            {
                Return (TPSS) /* \_SB_.PR00.TPSS */
            }
            Else
            {
                Return (LPSS) /* \_SB_.PR00.LPSS */
            }
        }

        Name (LPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000A29, 
                0x00003A98, 
                0x0000000A, 
                0x0000000A, 
                0x00002F00, 
                0x00002F00
            }, 

            Package (0x06)
            {
                0x00000A28, 
                0x00003A98, 
                0x0000000A, 
                0x0000000A, 
                0x00001A00, 
                0x00001A00
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x000034AF, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000031D0, 
                0x0000000A, 
                0x0000000A, 
                0x00001700, 
                0x00001700
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00002C3D, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000298B, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x00002249, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00001FCA, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00001D5A, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00001920, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x00001497, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00001265, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00001042, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x000002BC, 
                0x00000C1F, 
                0x0000000A, 
                0x0000000A, 
                0x00000700, 
                0x00000700
            }, 

            Package (0x06)
            {
                0x00000258, 
                0x00000A96, 
                0x0000000A, 
                0x0000000A, 
                0x00000600, 
                0x00000600
            }, 

            Package (0x06)
            {
                0x00000190, 
                0x000006BA, 
                0x0000000A, 
                0x0000000A, 
                0x00000400, 
                0x00000400
            }
        })
        Name (TPSS, Package (0x18)
        {
            Package (0x06)
            {
                0x00000A29, 
                0x00003A98, 
                0x0000000A, 
                0x0000000A, 
                0x00002F00, 
                0x00002F00
            }, 

            Package (0x06)
            {
                0x00000A28, 
                0x00003A98, 
                0x0000000A, 
                0x0000000A, 
                0x00001A00, 
                0x00001A00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x0000379C, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x000034AF, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000031D0, 
                0x0000000A, 
                0x0000000A, 
                0x00001700, 
                0x00001700
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00002EFF, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00002C3D, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000298B, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x0000276F, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000024D5, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x00002249, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00001FCA, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00001D5A, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00001AF6, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00001920, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000016D5, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x00001497, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00001265, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00001042, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00000E2A, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }, 

            Package (0x06)
            {
                0x000002BC, 
                0x00000C1F, 
                0x0000000A, 
                0x0000000A, 
                0x00000700, 
                0x00000700
            }, 

            Package (0x06)
            {
                0x00000258, 
                0x00000A96, 
                0x0000000A, 
                0x0000000A, 
                0x00000600, 
                0x00000600
            }, 

            Package (0x06)
            {
                0x000001F4, 
                0x000008A2, 
                0x0000000A, 
                0x0000000A, 
                0x00000500, 
                0x00000500
            }, 

            Package (0x06)
            {
                0x00000190, 
                0x000006BA, 
                0x0000000A, 
                0x0000000A, 
                0x00000400, 
                0x00000400
            }
        })
    }
}



SSDT23
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApPsd", 0x00003000)
{
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.PR00.GPSD, MethodObj)    // 2 Arguments
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (_SB_.PR24, DeviceObj)
    External (_SB_.PR25, DeviceObj)
    External (_SB_.PR26, DeviceObj)
    External (_SB_.PR27, DeviceObj)
    External (_SB_.PR28, DeviceObj)
    External (_SB_.PR29, DeviceObj)
    External (_SB_.PR30, DeviceObj)
    External (_SB_.PR31, DeviceObj)
    External (_SB_.PR32, DeviceObj)
    External (_SB_.PR33, DeviceObj)
    External (_SB_.PR34, DeviceObj)
    External (_SB_.PR35, DeviceObj)
    External (_SB_.PR36, DeviceObj)
    External (_SB_.PR37, DeviceObj)
    External (_SB_.PR38, DeviceObj)
    External (_SB_.PR39, DeviceObj)
    External (_SB_.PR40, DeviceObj)
    External (_SB_.PR41, DeviceObj)
    External (_SB_.PR42, DeviceObj)
    External (_SB_.PR43, DeviceObj)
    External (_SB_.PR44, DeviceObj)
    External (_SB_.PR45, DeviceObj)
    External (_SB_.PR46, DeviceObj)
    External (_SB_.PR47, DeviceObj)
    External (_SB_.PR48, DeviceObj)
    External (_SB_.PR49, DeviceObj)
    External (_SB_.PR50, DeviceObj)
    External (_SB_.PR51, DeviceObj)
    External (_SB_.PR52, DeviceObj)
    External (_SB_.PR53, DeviceObj)
    External (_SB_.PR54, DeviceObj)
    External (_SB_.PR55, DeviceObj)
    External (_SB_.PR56, DeviceObj)
    External (_SB_.PR57, DeviceObj)
    External (_SB_.PR58, DeviceObj)
    External (_SB_.PR59, DeviceObj)
    External (_SB_.PR60, DeviceObj)
    External (_SB_.PR61, DeviceObj)
    External (_SB_.PR62, DeviceObj)
    External (_SB_.PR63, DeviceObj)
    External (CM01, UnknownObj)
    External (CM02, UnknownObj)
    External (CM03, UnknownObj)
    External (CM04, UnknownObj)
    External (CM05, UnknownObj)
    External (CM06, UnknownObj)
    External (CM07, UnknownObj)
    External (CM08, UnknownObj)
    External (CM09, UnknownObj)
    External (CM10, UnknownObj)
    External (CM11, UnknownObj)
    External (CM12, UnknownObj)
    External (CM13, UnknownObj)
    External (CM14, UnknownObj)
    External (CM15, UnknownObj)
    External (CM16, UnknownObj)
    External (CM17, UnknownObj)
    External (CM18, UnknownObj)
    External (CM19, UnknownObj)
    External (CM20, UnknownObj)
    External (CM21, UnknownObj)
    External (CM22, UnknownObj)
    External (CM23, UnknownObj)
    External (CM24, UnknownObj)
    External (CM25, UnknownObj)
    External (CM26, UnknownObj)
    External (CM27, UnknownObj)
    External (CM28, UnknownObj)
    External (CM29, UnknownObj)
    External (CM30, UnknownObj)
    External (CM31, UnknownObj)
    External (CM32, UnknownObj)
    External (CM33, UnknownObj)
    External (CM34, UnknownObj)
    External (CM35, UnknownObj)
    External (CM36, UnknownObj)
    External (CM37, UnknownObj)
    External (CM38, UnknownObj)
    External (CM39, UnknownObj)
    External (CM40, UnknownObj)
    External (CM41, UnknownObj)
    External (CM42, UnknownObj)
    External (CM43, UnknownObj)
    External (CM44, UnknownObj)
    External (CM45, UnknownObj)
    External (CM46, UnknownObj)
    External (CM47, UnknownObj)
    External (CM48, UnknownObj)
    External (CM49, UnknownObj)
    External (CM50, UnknownObj)
    External (CM51, UnknownObj)
    External (CM52, UnknownObj)
    External (CM53, UnknownObj)
    External (CM54, UnknownObj)
    External (CM55, UnknownObj)
    External (CM56, UnknownObj)
    External (CM57, UnknownObj)
    External (CM58, UnknownObj)
    External (CM59, UnknownObj)
    External (CM60, UnknownObj)
    External (CM61, UnknownObj)
    External (CM62, UnknownObj)
    External (CM63, UnknownObj)
    External (PF00, IntObj)
    External (TCNT, FieldUnitObj)

    If (CondRefOf (\_SB.PR01))
    {
        Scope (\_SB.PR01)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (One, CM01))
            }
        }
    }

    If (CondRefOf (\_SB.PR02))
    {
        Scope (\_SB.PR02)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x02, CM02))
            }
        }
    }

    If (CondRefOf (\_SB.PR03))
    {
        Scope (\_SB.PR03)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x03, CM03))
            }
        }
    }

    If (CondRefOf (\_SB.PR04))
    {
        Scope (\_SB.PR04)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x04, CM04))
            }
        }
    }

    If (CondRefOf (\_SB.PR05))
    {
        Scope (\_SB.PR05)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x05, CM05))
            }
        }
    }

    If (CondRefOf (\_SB.PR06))
    {
        Scope (\_SB.PR06)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x06, CM06))
            }
        }
    }

    If (CondRefOf (\_SB.PR07))
    {
        Scope (\_SB.PR07)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x07, CM07))
            }
        }
    }

    If (CondRefOf (\_SB.PR08))
    {
        Scope (\_SB.PR08)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x08, CM08))
            }
        }
    }

    If (CondRefOf (\_SB.PR09))
    {
        Scope (\_SB.PR09)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x09, CM09))
            }
        }
    }

    If (CondRefOf (\_SB.PR10))
    {
        Scope (\_SB.PR10)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x0A, CM10))
            }
        }
    }

    If (CondRefOf (\_SB.PR11))
    {
        Scope (\_SB.PR11)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x0B, CM11))
            }
        }
    }

    If (CondRefOf (\_SB.PR12))
    {
        Scope (\_SB.PR12)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x0C, CM12))
            }
        }
    }

    If (CondRefOf (\_SB.PR13))
    {
        Scope (\_SB.PR13)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x0D, CM13))
            }
        }
    }

    If (CondRefOf (\_SB.PR14))
    {
        Scope (\_SB.PR14)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x0E, CM14))
            }
        }
    }

    If (CondRefOf (\_SB.PR15))
    {
        Scope (\_SB.PR15)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x0F, CM15))
            }
        }
    }

    If (CondRefOf (\_SB.PR16))
    {
        Scope (\_SB.PR16)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x10, CM16))
            }
        }
    }

    If (CondRefOf (\_SB.PR17))
    {
        Scope (\_SB.PR17)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x11, CM17))
            }
        }
    }

    If (CondRefOf (\_SB.PR18))
    {
        Scope (\_SB.PR18)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x12, CM18))
            }
        }
    }

    If (CondRefOf (\_SB.PR19))
    {
        Scope (\_SB.PR19)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x13, CM19))
            }
        }
    }

    If (CondRefOf (\_SB.PR20))
    {
        Scope (\_SB.PR20)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x14, CM20))
            }
        }
    }

    If (CondRefOf (\_SB.PR21))
    {
        Scope (\_SB.PR21)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x15, CM21))
            }
        }
    }

    If (CondRefOf (\_SB.PR22))
    {
        Scope (\_SB.PR22)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x16, CM22))
            }
        }
    }

    If (CondRefOf (\_SB.PR23))
    {
        Scope (\_SB.PR23)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x17, CM23))
            }
        }
    }

    If (CondRefOf (\_SB.PR24))
    {
        Scope (\_SB.PR24)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x18, CM24))
            }
        }
    }

    If (CondRefOf (\_SB.PR25))
    {
        Scope (\_SB.PR25)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x19, CM25))
            }
        }
    }

    If (CondRefOf (\_SB.PR26))
    {
        Scope (\_SB.PR26)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x1A, CM26))
            }
        }
    }

    If (CondRefOf (\_SB.PR27))
    {
        Scope (\_SB.PR27)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x1B, CM27))
            }
        }
    }

    If (CondRefOf (\_SB.PR28))
    {
        Scope (\_SB.PR28)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x1C, CM28))
            }
        }
    }

    If (CondRefOf (\_SB.PR29))
    {
        Scope (\_SB.PR29)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x1D, CM29))
            }
        }
    }

    If (CondRefOf (\_SB.PR30))
    {
        Scope (\_SB.PR30)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x1E, CM30))
            }
        }
    }

    If (CondRefOf (\_SB.PR31))
    {
        Scope (\_SB.PR31)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x1F, CM31))
            }
        }
    }

    If (CondRefOf (\_SB.PR32))
    {
        Scope (\_SB.PR32)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x20, CM32))
            }
        }
    }

    If (CondRefOf (\_SB.PR33))
    {
        Scope (\_SB.PR33)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x21, CM33))
            }
        }
    }

    If (CondRefOf (\_SB.PR34))
    {
        Scope (\_SB.PR34)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x22, CM34))
            }
        }
    }

    If (CondRefOf (\_SB.PR35))
    {
        Scope (\_SB.PR35)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x23, CM35))
            }
        }
    }

    If (CondRefOf (\_SB.PR36))
    {
        Scope (\_SB.PR36)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x24, CM36))
            }
        }
    }

    If (CondRefOf (\_SB.PR37))
    {
        Scope (\_SB.PR37)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x25, CM37))
            }
        }
    }

    If (CondRefOf (\_SB.PR38))
    {
        Scope (\_SB.PR38)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x26, CM38))
            }
        }
    }

    If (CondRefOf (\_SB.PR39))
    {
        Scope (\_SB.PR39)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x27, CM39))
            }
        }
    }

    If (CondRefOf (\_SB.PR40))
    {
        Scope (\_SB.PR40)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x28, CM40))
            }
        }
    }

    If (CondRefOf (\_SB.PR41))
    {
        Scope (\_SB.PR41)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x29, CM41))
            }
        }
    }

    If (CondRefOf (\_SB.PR42))
    {
        Scope (\_SB.PR42)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x2A, CM42))
            }
        }
    }

    If (CondRefOf (\_SB.PR43))
    {
        Scope (\_SB.PR43)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x2B, CM43))
            }
        }
    }

    If (CondRefOf (\_SB.PR44))
    {
        Scope (\_SB.PR44)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x2C, CM44))
            }
        }
    }

    If (CondRefOf (\_SB.PR45))
    {
        Scope (\_SB.PR45)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x2D, CM45))
            }
        }
    }

    If (CondRefOf (\_SB.PR46))
    {
        Scope (\_SB.PR46)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x2E, CM46))
            }
        }
    }

    If (CondRefOf (\_SB.PR47))
    {
        Scope (\_SB.PR47)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x2F, CM47))
            }
        }
    }

    If (CondRefOf (\_SB.PR48))
    {
        Scope (\_SB.PR48)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x30, CM48))
            }
        }
    }

    If (CondRefOf (\_SB.PR49))
    {
        Scope (\_SB.PR49)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x31, CM49))
            }
        }
    }

    If (CondRefOf (\_SB.PR50))
    {
        Scope (\_SB.PR50)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x32, CM50))
            }
        }
    }

    If (CondRefOf (\_SB.PR51))
    {
        Scope (\_SB.PR51)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x33, CM51))
            }
        }
    }

    If (CondRefOf (\_SB.PR52))
    {
        Scope (\_SB.PR52)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x34, CM52))
            }
        }
    }

    If (CondRefOf (\_SB.PR53))
    {
        Scope (\_SB.PR53)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x35, CM53))
            }
        }
    }

    If (CondRefOf (\_SB.PR54))
    {
        Scope (\_SB.PR54)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x36, CM54))
            }
        }
    }

    If (CondRefOf (\_SB.PR55))
    {
        Scope (\_SB.PR55)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x37, CM55))
            }
        }
    }

    If (CondRefOf (\_SB.PR56))
    {
        Scope (\_SB.PR56)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x38, CM56))
            }
        }
    }

    If (CondRefOf (\_SB.PR57))
    {
        Scope (\_SB.PR57)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x39, CM57))
            }
        }
    }

    If (CondRefOf (\_SB.PR58))
    {
        Scope (\_SB.PR58)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x3A, CM58))
            }
        }
    }

    If (CondRefOf (\_SB.PR59))
    {
        Scope (\_SB.PR59)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x3B, CM59))
            }
        }
    }

    If (CondRefOf (\_SB.PR60))
    {
        Scope (\_SB.PR60)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x3C, CM60))
            }
        }
    }

    If (CondRefOf (\_SB.PR61))
    {
        Scope (\_SB.PR61)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x3D, CM61))
            }
        }
    }

    If (CondRefOf (\_SB.PR62))
    {
        Scope (\_SB.PR62)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x3E, CM62))
            }
        }
    }

    If (CondRefOf (\_SB.PR63))
    {
        Scope (\_SB.PR63)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x3F, CM63))
            }
        }
    }
}



SSDT24
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApIst", 0x00003000)
{
    External (_SB_.PR00._PCT, MethodObj)    // 0 Arguments
    External (_SB_.PR00._PPC, MethodObj)    // 0 Arguments
    External (_SB_.PR00._PSS, MethodObj)    // 0 Arguments
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (_SB_.PR24, DeviceObj)
    External (_SB_.PR25, DeviceObj)
    External (_SB_.PR26, DeviceObj)
    External (_SB_.PR27, DeviceObj)
    External (_SB_.PR28, DeviceObj)
    External (_SB_.PR29, DeviceObj)
    External (_SB_.PR30, DeviceObj)
    External (_SB_.PR31, DeviceObj)
    External (_SB_.PR32, DeviceObj)
    External (_SB_.PR33, DeviceObj)
    External (_SB_.PR34, DeviceObj)
    External (_SB_.PR35, DeviceObj)
    External (_SB_.PR36, DeviceObj)
    External (_SB_.PR37, DeviceObj)
    External (_SB_.PR38, DeviceObj)
    External (_SB_.PR39, DeviceObj)
    External (_SB_.PR40, DeviceObj)
    External (_SB_.PR41, DeviceObj)
    External (_SB_.PR42, DeviceObj)
    External (_SB_.PR43, DeviceObj)
    External (_SB_.PR44, DeviceObj)
    External (_SB_.PR45, DeviceObj)
    External (_SB_.PR46, DeviceObj)
    External (_SB_.PR47, DeviceObj)
    External (_SB_.PR48, DeviceObj)
    External (_SB_.PR49, DeviceObj)
    External (_SB_.PR50, DeviceObj)
    External (_SB_.PR51, DeviceObj)
    External (_SB_.PR52, DeviceObj)
    External (_SB_.PR53, DeviceObj)
    External (_SB_.PR54, DeviceObj)
    External (_SB_.PR55, DeviceObj)
    External (_SB_.PR56, DeviceObj)
    External (_SB_.PR57, DeviceObj)
    External (_SB_.PR58, DeviceObj)
    External (_SB_.PR59, DeviceObj)
    External (_SB_.PR60, DeviceObj)
    External (_SB_.PR61, DeviceObj)
    External (_SB_.PR62, DeviceObj)
    External (_SB_.PR63, DeviceObj)

    If (CondRefOf (\_SB.PR01))
    {
        Scope (\_SB.PR01)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR02))
    {
        Scope (\_SB.PR02)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR03))
    {
        Scope (\_SB.PR03)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR04))
    {
        Scope (\_SB.PR04)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR05))
    {
        Scope (\_SB.PR05)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR06))
    {
        Scope (\_SB.PR06)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR07))
    {
        Scope (\_SB.PR07)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR08))
    {
        Scope (\_SB.PR08)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR09))
    {
        Scope (\_SB.PR09)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR10))
    {
        Scope (\_SB.PR10)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR11))
    {
        Scope (\_SB.PR11)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR12))
    {
        Scope (\_SB.PR12)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR13))
    {
        Scope (\_SB.PR13)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR14))
    {
        Scope (\_SB.PR14)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR15))
    {
        Scope (\_SB.PR15)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR16))
    {
        Scope (\_SB.PR16)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR17))
    {
        Scope (\_SB.PR17)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR18))
    {
        Scope (\_SB.PR18)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR19))
    {
        Scope (\_SB.PR19)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR20))
    {
        Scope (\_SB.PR20)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR21))
    {
        Scope (\_SB.PR21)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR22))
    {
        Scope (\_SB.PR22)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR23))
    {
        Scope (\_SB.PR23)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR24))
    {
        Scope (\_SB.PR24)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR25))
    {
        Scope (\_SB.PR25)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR26))
    {
        Scope (\_SB.PR26)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR27))
    {
        Scope (\_SB.PR27)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR28))
    {
        Scope (\_SB.PR28)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR29))
    {
        Scope (\_SB.PR29)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR30))
    {
        Scope (\_SB.PR30)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR31))
    {
        Scope (\_SB.PR31)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR32))
    {
        Scope (\_SB.PR32)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR33))
    {
        Scope (\_SB.PR33)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR34))
    {
        Scope (\_SB.PR34)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR35))
    {
        Scope (\_SB.PR35)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR36))
    {
        Scope (\_SB.PR36)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR37))
    {
        Scope (\_SB.PR37)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR38))
    {
        Scope (\_SB.PR38)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR39))
    {
        Scope (\_SB.PR39)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR40))
    {
        Scope (\_SB.PR40)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR41))
    {
        Scope (\_SB.PR41)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR42))
    {
        Scope (\_SB.PR42)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR43))
    {
        Scope (\_SB.PR43)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR44))
    {
        Scope (\_SB.PR44)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR45))
    {
        Scope (\_SB.PR45)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR46))
    {
        Scope (\_SB.PR46)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR47))
    {
        Scope (\_SB.PR47)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR48))
    {
        Scope (\_SB.PR48)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR49))
    {
        Scope (\_SB.PR49)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR50))
    {
        Scope (\_SB.PR50)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR51))
    {
        Scope (\_SB.PR51)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR52))
    {
        Scope (\_SB.PR52)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR53))
    {
        Scope (\_SB.PR53)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR54))
    {
        Scope (\_SB.PR54)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR55))
    {
        Scope (\_SB.PR55)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR56))
    {
        Scope (\_SB.PR56)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR57))
    {
        Scope (\_SB.PR57)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR58))
    {
        Scope (\_SB.PR58)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR59))
    {
        Scope (\_SB.PR59)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR60))
    {
        Scope (\_SB.PR60)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR61))
    {
        Scope (\_SB.PR61)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR62))
    {
        Scope (\_SB.PR62)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR63))
    {
        Scope (\_SB.PR63)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "ADebTabl", 0x00001000)
{
    Scope (\)
    {
        Name (DPTR, 0x904F0000)
        Name (EPTR, 0x90500000)
        Name (CPTR, 0x904F0020)
        Mutex (MMUT, 0x00)
        OperationRegion (ADBP, SystemIO, 0xB2, 0x02)
        Field (ADBP, ByteAcc, NoLock, Preserve)
        {
            B2PT,   8, 
            B3PT,   8
        }

        Method (MDBG, 1, Serialized)
        {
            OperationRegion (ADHD, SystemMemory, DPTR, 0x20)
            Field (ADHD, ByteAcc, NoLock, Preserve)
            {
                ASIG,   128, 
                ASIZ,   32, 
                ACHP,   32, 
                ACTP,   32, 
                SMIN,   8, 
                WRAP,   8, 
                SMMV,   8, 
                TRUN,   8
            }

            Local0 = Acquire (MMUT, 0x03E8)
            If ((Local0 == Zero))
            {
                OperationRegion (ABLK, SystemMemory, CPTR, 0x20)
                Field (ABLK, ByteAcc, NoLock, Preserve)
                {
                    AAAA,   256
                }

                ToHexString (Arg0, Local1)
                TRUN = Zero
                If ((SizeOf (Local1) >= 0x20))
                {
                    TRUN = One
                }

                Mid (Local1, Zero, 0x1F, AAAA) /* \MDBG.AAAA */
                CPTR += 0x20
                If ((CPTR >= EPTR))
                {
                    CPTR = (DPTR + 0x20)
                    WRAP = One
                }

                ACTP = CPTR /* \CPTR */
                If (SMMV)
                {
                    B2PT = SMIN /* \MDBG.SMIN */
                }

                Release (MMUT)
            }

            Return (Local0)
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "SaSsdt ", 0x00003000)
{
    External (_SB_.CAGS, MethodObj)    // 1 Arguments
    External (_SB_.ISME, MethodObj)    // 1 Arguments
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.B0D3, DeviceObj)
    External (_SB_.PC00.GFX0, DeviceObj)
    External (_SB_.PC00.IPU0, DeviceObj)
    External (_SB_.PC00.PC2M, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PEG0, DeviceObj)
    External (_SB_.PC00.PEG0._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.ECR1, UnknownObj)
    External (_SB_.PC00.PEG0.GPRW, MethodObj)    // 2 Arguments
    External (_SB_.PC00.PEG0.PEGP, DeviceObj)
    External (_SB_.PC00.PEG0.PEGP.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PEGP.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PICM, UnknownObj)
    External (_SB_.PC00.PEG0.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PEG0.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PEG0.VDID, FieldUnitObj)
    External (_SB_.PC00.PEG1, DeviceObj)
    External (_SB_.PC00.PEG1._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.DHDW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.ECR1, UnknownObj)
    External (_SB_.PC00.PEG1.GPRW, MethodObj)    // 2 Arguments
    External (_SB_.PC00.PEG1.PEGP, DeviceObj)
    External (_SB_.PC00.PEG1.PEGP.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PEGP.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PICM, UnknownObj)
    External (_SB_.PC00.PEG1.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PEG1.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PEG1.VDID, FieldUnitObj)
    External (_SB_.PC00.PEG2, DeviceObj)
    External (_SB_.PC00.PEG2._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.ECR1, UnknownObj)
    External (_SB_.PC00.PEG2.GPRW, MethodObj)    // 2 Arguments
    External (_SB_.PC00.PEG2.PEGP, DeviceObj)
    External (_SB_.PC00.PEG2.PEGP.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PEGP.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PICM, UnknownObj)
    External (_SB_.PC00.PEG2.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PEG2.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PEG2.VDID, FieldUnitObj)
    External (_SB_.PC00.PEG3, DeviceObj)
    External (_SB_.PC00.PEG3._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.ECR1, UnknownObj)
    External (_SB_.PC00.PEG3.GPRW, MethodObj)    // 2 Arguments
    External (_SB_.PC00.PEG3.PEGP, DeviceObj)
    External (_SB_.PC00.PEG3.PEGP.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.PEGP.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.PICM, UnknownObj)
    External (_SB_.PC00.PEG3.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PEG3.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PEG3.VDID, FieldUnitObj)
    External (_SB_.SHPO, MethodObj)    // 2 Arguments
    External (AR02, UnknownObj)
    External (AR0A, UnknownObj)
    External (AR0B, UnknownObj)
    External (AR0C, UnknownObj)
    External (CPID, UnknownObj)
    External (LTRW, UnknownObj)
    External (LTRX, UnknownObj)
    External (LTRY, UnknownObj)
    External (LTRZ, UnknownObj)
    External (MPGN, UnknownObj)
    External (P0WK, UnknownObj)
    External (P1WK, UnknownObj)
    External (P2WK, UnknownObj)
    External (P3WK, UnknownObj)
    External (PBR1, UnknownObj)
    External (PBR2, UnknownObj)
    External (PBR3, UnknownObj)
    External (PD02, UnknownObj)
    External (PD0A, UnknownObj)
    External (PD0B, UnknownObj)
    External (PD0C, UnknownObj)
    External (PG0E, UnknownObj)
    External (PG1E, UnknownObj)
    External (PG2E, UnknownObj)
    External (PG3E, UnknownObj)
    External (PICM, IntObj)
    External (PINI, MethodObj)    // 0 Arguments
    External (PPA0, IntObj)
    External (PPA1, IntObj)
    External (PPA2, IntObj)
    External (PPA3, IntObj)
    External (SMSL, UnknownObj)
    External (SNSL, UnknownObj)
    External (STD3, FieldUnitObj)
    External (VMCP, UnknownObj)
    External (VMDE, UnknownObj)

    Scope (\_SB.PC00.PEG0)
    {
        Name (SLOT, Zero)
        Method (CPRA, 0, NotSerialized)
        {
            If ((\PPA0 != Zero))
            {
                Return (\PPA0) /* External reference */
            }
            Else
            {
                Return (0x00060000)
            }
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PG0E == One))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Name (LTEN, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If (PRES ())
            {
                LTEN = LTRX /* External reference */
                LMSL = SMSL /* External reference */
                LNSL = SNSL /* External reference */
                If (CondRefOf (PINI))
                {
                    PINI ()
                }

                If ((CondRefOf (VMCP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMCP & 0x08) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (CondRefOf (\_SB.PC00.PEG0))
                {
                    If ((\_SB.PC00.PEG0.VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.PEG0.PRMV))
                            {
                                If ((\_SB.PC00.PEG0.PRMV == One))
                                {
                                    \_SB.PC00.PEG0.RD3C = \STD3 /* External reference */
                                }
                            }

                            If ((\_SB.PC00.PEG0.PEGP.PNVM () || \_SB.PC00.PEG0.PEGP.PAHC ()))
                            {
                                \_SB.PC00.PEG0.RD3C = \STD3 /* External reference */
                            }
                        }
                    }
                }
            }
        }

        Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
        {
            If (PICM)
            {
                Return (AR02) /* External reference */
            }

            Return (PD02) /* External reference */
        }

        Name (PRTP, 0x04)
        OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (_ADR ()), 0x0480)
        Field (PXCS, AnyAcc, NoLock, Preserve)
        {
            VDID,   32, 
            Offset (0x50), 
            L0SE,   1, 
                ,   3, 
            LDIS,   1, 
            Offset (0x51), 
            Offset (0x52), 
                ,   13, 
            LASX,   1, 
            Offset (0x5A), 
            ABPX,   1, 
                ,   2, 
            PDCX,   1, 
                ,   2, 
            PDSX,   1, 
            Offset (0x5B), 
            Offset (0x60), 
            Offset (0x62), 
            PSPX,   1, 
            Offset (0xA4), 
            D3HT,   2, 
            Offset (0xD8), 
                ,   30, 
            HPEX,   1, 
            PMEX,   1, 
            Offset (0xE0), 
            SCB0,   1, 
                ,   6, 
            NCB7,   1, 
            Offset (0xE2), 
                ,   2, 
            L23E,   1, 
            L23R,   1, 
            Offset (0x324), 
                ,   3, 
            LEDM,   1, 
            Offset (0x328), 
            Offset (0x32B), 
            LTSM,   8
        }

        Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
        {
            Offset (0xDC), 
                ,   30, 
            HPSX,   1, 
            PMSX,   1
        }

        Method (L23D, 0, Serialized)
        {
            If ((SCB0 != One))
            {
                Return (Zero)
            }

            L23R = One
            Local0 = Zero
            While (L23R)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = Zero
            Local0 = Zero
            While ((LASX == Zero))
            {
                If ((Local0 > 0x08))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }
        }

        Method (DL23, 0, Serialized)
        {
            L23E = One
            Sleep (0x10)
            Local0 = Zero
            While (L23E)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = One
        }

        Name (LTRV, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (PRMV, Zero)
        Name (RD3C, 0x02)
        Method (PRES, 0, NotSerialized)
        {
            If ((VDID == 0xFFFFFFFF))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Name (OPTS, Buffer (0x02)
                        {
                             0x00, 0x00                                       // ..
                        })
                        CreateBitField (OPTS, Zero, FUN0)
                        CreateBitField (OPTS, 0x06, FUN6)
                        CreateBitField (OPTS, 0x08, FUN8)
                        CreateBitField (OPTS, 0x09, FUN9)
                        CreateBitField (OPTS, 0x0A, FUNA)
                        CreateBitField (OPTS, 0x0B, FUNB)
                        If ((Arg1 >= 0x02))
                        {
                            FUN0 = One
                            If ((LTEN != Zero))
                            {
                                FUN6 = One
                            }

                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }
                        }

                        If ((Arg1 >= 0x04))
                        {
                            If (CondRefOf (PPBA))
                            {
                                FUNA = One
                            }

                            If (CondRefOf (UPRD))
                            {
                                FUNB = One
                            }
                        }

                        Return (OPTS) /* \_SB_.PC00.PEG0._DSM.OPTS */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                            LTRV [One] = (LMSL & 0x03FF)
                            LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                            LTRV [0x03] = (LNSL & 0x03FF)
                            Return (LTRV) /* \_SB_.PC00.PEG0.LTRV */
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                    }
                    Case (0x09)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }
                    }
                    Case (0x0A)
                    {
                        If (CondRefOf (PPBA))
                        {
                            Return (PPBA (Arg3))
                        }
                    }
                    Case (0x0B)
                    {
                        If (CondRefOf (UPRD))
                        {
                            Return (UPRD (Arg3))
                        }
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            If ((HPEX == One))
            {
                HPEX = Zero
                HPSX = One
            }

            If ((PMEX == One))
            {
                PMEX = Zero
                PMSX = One
            }

            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }

            If ((HPEX == Zero))
            {
                HPEX = One
                HPSX = One
            }

            If ((PMEX == Zero))
            {
                PMEX = One
                PMSX = One
            }
        }

        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
        {
            If (CondRefOf (PINI))
            {
                Return (Package (0x06)
                {
                    ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "HotPlugSupportInD3", 
                            One
                        }
                    }, 

                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }, 

                    ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                    Package (0x00) {}
                })
            }
            Else
            {
                Return (Package (0x04)
                {
                    ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "HotPlugSupportInD3", 
                            One
                        }
                    }, 

                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
            }
        }

        Method (HPME, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
            {
                PMSX = One
                PSPX = One
                Return (One)
            }

            Return (Zero)
        }

        Method (HPEV, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && HPSX))
            {
                HPSX = One
                If ((PDCX == One))
                {
                    PDCX = One
                    If ((PDSX == Zero))
                    {
                        L0SE = Zero
                    }

                    Notify (^, Zero) // Bus Check
                }
            }
        }
    }

    Scope (\_SB.PC00.PEG1)
    {
        Name (SLOT, One)
        Method (CPRA, 0, NotSerialized)
        {
            If ((\PPA1 != Zero))
            {
                Return (\PPA1) /* External reference */
            }
            Else
            {
                Return (0x00010000)
            }
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PG1E == One))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Name (LTEN, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If (PRES ())
            {
                LTEN = LTRY /* External reference */
                LMSL = SMSL /* External reference */
                LNSL = SNSL /* External reference */
                If (CondRefOf (PINI))
                {
                    PINI ()
                }

                If ((CondRefOf (VMCP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMCP & One) != Zero)))
                    {
                        PRMV = One
                    }
                }

                If (CondRefOf (\_SB.PC00.PEG1))
                {
                    If ((\_SB.PC00.PEG1.VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.PEG1.PRMV))
                            {
                                If ((\_SB.PC00.PEG1.PRMV == One))
                                {
                                    \_SB.PC00.PEG1.RD3C = \STD3 /* External reference */
                                }
                            }

                            If ((\_SB.PC00.PEG1.PEGP.PNVM () || \_SB.PC00.PEG1.PEGP.PAHC ()))
                            {
                                \_SB.PC00.PEG1.RD3C = \STD3 /* External reference */
                            }
                        }
                    }
                }
            }
        }

        Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
        {
            If (PICM)
            {
                Return (AR02) /* External reference */
            }

            Return (PD02) /* External reference */
        }

        Name (PRTP, 0x04)
        OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (_ADR ()), 0x0480)
        Field (PXCS, AnyAcc, NoLock, Preserve)
        {
            VDID,   32, 
            Offset (0x50), 
            L0SE,   1, 
                ,   3, 
            LDIS,   1, 
            Offset (0x51), 
            Offset (0x52), 
                ,   13, 
            LASX,   1, 
            Offset (0x5A), 
            ABPX,   1, 
                ,   2, 
            PDCX,   1, 
                ,   2, 
            PDSX,   1, 
            Offset (0x5B), 
            Offset (0x60), 
            Offset (0x62), 
            PSPX,   1, 
            Offset (0xA4), 
            D3HT,   2, 
            Offset (0xD8), 
                ,   30, 
            HPEX,   1, 
            PMEX,   1, 
            Offset (0xE0), 
            SCB0,   1, 
                ,   6, 
            NCB7,   1, 
            Offset (0xE2), 
                ,   2, 
            L23E,   1, 
            L23R,   1, 
            Offset (0x324), 
                ,   3, 
            LEDM,   1, 
            Offset (0x328), 
            Offset (0x32B), 
            LTSM,   8
        }

        Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
        {
            Offset (0xDC), 
                ,   30, 
            HPSX,   1, 
            PMSX,   1
        }

        Method (L23D, 0, Serialized)
        {
            If ((SCB0 != One))
            {
                Return (Zero)
            }

            L23R = One
            Local0 = Zero
            While (L23R)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = Zero
            Local0 = Zero
            While ((LASX == Zero))
            {
                If ((Local0 > 0x08))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }
        }

        Method (DL23, 0, Serialized)
        {
            L23E = One
            Sleep (0x10)
            Local0 = Zero
            While (L23E)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = One
        }

        Name (LTRV, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (PRMV, Zero)
        Name (RD3C, 0x02)
        Method (PRES, 0, NotSerialized)
        {
            If ((VDID == 0xFFFFFFFF))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Name (OPTS, Buffer (0x02)
                        {
                             0x00, 0x00                                       // ..
                        })
                        CreateBitField (OPTS, Zero, FUN0)
                        CreateBitField (OPTS, 0x06, FUN6)
                        CreateBitField (OPTS, 0x08, FUN8)
                        CreateBitField (OPTS, 0x09, FUN9)
                        CreateBitField (OPTS, 0x0A, FUNA)
                        CreateBitField (OPTS, 0x0B, FUNB)
                        If ((Arg1 >= 0x02))
                        {
                            FUN0 = One
                            If ((LTEN != Zero))
                            {
                                FUN6 = One
                            }

                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }
                        }

                        If ((Arg1 >= 0x04))
                        {
                            If (CondRefOf (PPBA))
                            {
                                FUNA = One
                            }

                            If (CondRefOf (UPRD))
                            {
                                FUNB = One
                            }
                        }

                        Return (OPTS) /* \_SB_.PC00.PEG1._DSM.OPTS */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                            LTRV [One] = (LMSL & 0x03FF)
                            LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                            LTRV [0x03] = (LNSL & 0x03FF)
                            Return (LTRV) /* \_SB_.PC00.PEG1.LTRV */
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                    }
                    Case (0x09)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }
                    }
                    Case (0x0A)
                    {
                        If (CondRefOf (PPBA))
                        {
                            Return (PPBA (Arg3))
                        }
                    }
                    Case (0x0B)
                    {
                        If (CondRefOf (UPRD))
                        {
                            Return (UPRD (Arg3))
                        }
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            If ((HPEX == One))
            {
                HPEX = Zero
                HPSX = One
            }

            If ((PMEX == One))
            {
                PMEX = Zero
                PMSX = One
            }

            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }

            If ((HPEX == Zero))
            {
                HPEX = One
                HPSX = One
            }

            If ((PMEX == Zero))
            {
                PMEX = One
                PMSX = One
            }
        }

        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
        {
            If (CondRefOf (PINI))
            {
                Return (Package (0x06)
                {
                    ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "HotPlugSupportInD3", 
                            One
                        }
                    }, 

                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }, 

                    ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                    Package (0x00) {}
                })
            }
            Else
            {
                Return (Package (0x04)
                {
                    ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "HotPlugSupportInD3", 
                            One
                        }
                    }, 

                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
            }
        }

        Method (HPME, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
            {
                PMSX = One
                PSPX = One
                Return (One)
            }

            Return (Zero)
        }

        Method (HPEV, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && HPSX))
            {
                HPSX = One
                If ((PDCX == One))
                {
                    PDCX = One
                    If ((PDSX == Zero))
                    {
                        L0SE = Zero
                    }

                    Notify (^, Zero) // Bus Check
                }
            }
        }
    }

    Scope (\_SB.PC00.PEG2)
    {
        Name (SLOT, 0x02)
        Method (CPRA, 0, NotSerialized)
        {
            If ((\PPA2 != Zero))
            {
                Return (\PPA2) /* External reference */
            }
            Else
            {
                Return (0x00010001)
            }
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PG2E == One))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Name (LTEN, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If (PRES ())
            {
                LTEN = LTRZ /* External reference */
                LMSL = SMSL /* External reference */
                LNSL = SNSL /* External reference */
                If (CondRefOf (PINI))
                {
                    PINI ()
                }

                If ((CondRefOf (VMCP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && (((VMCP & 0x02) != 
                        Zero) || ((VMCP & 0x10) != Zero))))
                    {
                        PRMV = One
                    }
                }

                If (CondRefOf (\_SB.PC00.PEG2))
                {
                    If ((\_SB.PC00.PEG2.VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.PEG2.PRMV))
                            {
                                If ((\_SB.PC00.PEG2.PRMV == One))
                                {
                                    \_SB.PC00.PEG2.RD3C = \STD3 /* External reference */
                                }
                            }

                            If ((\_SB.PC00.PEG2.PEGP.PNVM () || \_SB.PC00.PEG2.PEGP.PAHC ()))
                            {
                                \_SB.PC00.PEG2.RD3C = \STD3 /* External reference */
                            }
                        }
                    }
                }
            }
        }

        Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
        {
            If (((CPID & 0xFFFFFFF0) == 0x000906A0))
            {
                If (PICM)
                {
                    Return (AR02) /* External reference */
                }

                Return (PD02) /* External reference */
            }
            Else
            {
                If (PICM)
                {
                    Return (AR0A) /* External reference */
                }

                Return (PD0A) /* External reference */
            }
        }

        Name (PRTP, 0x04)
        OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (_ADR ()), 0x0480)
        Field (PXCS, AnyAcc, NoLock, Preserve)
        {
            VDID,   32, 
            Offset (0x50), 
            L0SE,   1, 
                ,   3, 
            LDIS,   1, 
            Offset (0x51), 
            Offset (0x52), 
                ,   13, 
            LASX,   1, 
            Offset (0x5A), 
            ABPX,   1, 
                ,   2, 
            PDCX,   1, 
                ,   2, 
            PDSX,   1, 
            Offset (0x5B), 
            Offset (0x60), 
            Offset (0x62), 
            PSPX,   1, 
            Offset (0xA4), 
            D3HT,   2, 
            Offset (0xD8), 
                ,   30, 
            HPEX,   1, 
            PMEX,   1, 
            Offset (0xE0), 
            SCB0,   1, 
                ,   6, 
            NCB7,   1, 
            Offset (0xE2), 
                ,   2, 
            L23E,   1, 
            L23R,   1, 
            Offset (0x324), 
                ,   3, 
            LEDM,   1, 
            Offset (0x328), 
            Offset (0x32B), 
            LTSM,   8
        }

        Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
        {
            Offset (0xDC), 
                ,   30, 
            HPSX,   1, 
            PMSX,   1
        }

        Method (L23D, 0, Serialized)
        {
            If ((SCB0 != One))
            {
                Return (Zero)
            }

            L23R = One
            Local0 = Zero
            While (L23R)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = Zero
            Local0 = Zero
            While ((LASX == Zero))
            {
                If ((Local0 > 0x08))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }
        }

        Method (DL23, 0, Serialized)
        {
            L23E = One
            Sleep (0x10)
            Local0 = Zero
            While (L23E)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = One
        }

        Name (LTRV, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (PRMV, Zero)
        Name (RD3C, 0x02)
        Method (PRES, 0, NotSerialized)
        {
            If ((VDID == 0xFFFFFFFF))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Name (OPTS, Buffer (0x02)
                        {
                             0x00, 0x00                                       // ..
                        })
                        CreateBitField (OPTS, Zero, FUN0)
                        CreateBitField (OPTS, 0x06, FUN6)
                        CreateBitField (OPTS, 0x08, FUN8)
                        CreateBitField (OPTS, 0x09, FUN9)
                        CreateBitField (OPTS, 0x0A, FUNA)
                        CreateBitField (OPTS, 0x0B, FUNB)
                        If ((Arg1 >= 0x02))
                        {
                            FUN0 = One
                            If ((LTEN != Zero))
                            {
                                FUN6 = One
                            }

                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }
                        }

                        If ((Arg1 >= 0x04))
                        {
                            If (CondRefOf (PPBA))
                            {
                                FUNA = One
                            }

                            If (CondRefOf (UPRD))
                            {
                                FUNB = One
                            }
                        }

                        Return (OPTS) /* \_SB_.PC00.PEG2._DSM.OPTS */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                            LTRV [One] = (LMSL & 0x03FF)
                            LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                            LTRV [0x03] = (LNSL & 0x03FF)
                            Return (LTRV) /* \_SB_.PC00.PEG2.LTRV */
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                    }
                    Case (0x09)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }
                    }
                    Case (0x0A)
                    {
                        If (CondRefOf (PPBA))
                        {
                            Return (PPBA (Arg3))
                        }
                    }
                    Case (0x0B)
                    {
                        If (CondRefOf (UPRD))
                        {
                            Return (UPRD (Arg3))
                        }
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            If ((HPEX == One))
            {
                HPEX = Zero
                HPSX = One
            }

            If ((PMEX == One))
            {
                PMEX = Zero
                PMSX = One
            }

            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }

            If ((HPEX == Zero))
            {
                HPEX = One
                HPSX = One
            }

            If ((PMEX == Zero))
            {
                PMEX = One
                PMSX = One
            }
        }

        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
        {
            If (CondRefOf (PINI))
            {
                Return (Package (0x06)
                {
                    ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "HotPlugSupportInD3", 
                            One
                        }
                    }, 

                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }, 

                    ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                    Package (0x00) {}
                })
            }
            Else
            {
                Return (Package (0x04)
                {
                    ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "HotPlugSupportInD3", 
                            One
                        }
                    }, 

                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
            }
        }

        Method (HPME, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
            {
                PMSX = One
                PSPX = One
                Return (One)
            }

            Return (Zero)
        }

        Method (HPEV, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && HPSX))
            {
                HPSX = One
                If ((PDCX == One))
                {
                    PDCX = One
                    If ((PDSX == Zero))
                    {
                        L0SE = Zero
                    }

                    Notify (^, Zero) // Bus Check
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.PEG3))
    {
        Scope (\_SB.PC00.PEG3)
        {
            Name (SLOT, 0x03)
            Method (CPRA, 0, NotSerialized)
            {
                If ((\PPA3 != Zero))
                {
                    Return (\PPA3) /* External reference */
                }
                Else
                {
                    Return (0x00010002)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PG3E == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTEN = LTRW /* External reference */
                    LMSL = SMSL /* External reference */
                    LNSL = SNSL /* External reference */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }

                    If ((CondRefOf (VMCP) && CondRefOf (VMDE)))
                    {
                        If (((VMDE == One) && ((VMCP & 0x04) != Zero)))
                        {
                            PRMV = One
                        }
                    }

                    If (CondRefOf (\_SB.PC00.PEG3))
                    {
                        If ((\_SB.PC00.PEG3.VDID != 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.PEG3.PRMV))
                                {
                                    If ((\_SB.PC00.PEG3.PRMV == One))
                                    {
                                        \_SB.PC00.PEG3.RD3C = \STD3 /* External reference */
                                    }
                                }

                                If ((\_SB.PC00.PEG3.PEGP.PNVM () || \_SB.PC00.PEG3.PEGP.PAHC ()))
                                {
                                    \_SB.PC00.PEG3.RD3C = \STD3 /* External reference */
                                }
                            }
                        }
                    }
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0B) /* External reference */
                }

                Return (PD0B) /* External reference */
            }

            Name (PRTP, 0x04)
            OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (_ADR ()), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x328), 
                Offset (0x32B), 
                LTSM,   8
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = Zero
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.PEG3._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.PEG3.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((HPEX == One))
                {
                    HPEX = Zero
                    HPSX = One
                }

                If ((PMEX == One))
                {
                    PMEX = Zero
                    PMSX = One
                }

                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }

                If ((HPEX == Zero))
                {
                    HPEX = One
                    HPSX = One
                }

                If ((PMEX == Zero))
                {
                    PMEX = One
                    PMSX = One
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If (CondRefOf (PINI))
                {
                    Return (Package (0x06)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }, 

                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00) {}
                    })
                }
                Else
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    PMSX = One
                    PSPX = One
                    Return (One)
                }

                Return (Zero)
            }

            Method (HPEV, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && HPSX))
                {
                    HPSX = One
                    If ((PDCX == One))
                    {
                        PDCX = One
                        If ((PDSX == Zero))
                        {
                            L0SE = Zero
                        }

                        Notify (^, Zero) // Bus Check
                    }
                }
            }
        }
    }

    Scope (\_SB.PC00.PEG0.PEGP)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            DVID,   32, 
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PRES, 0, Serialized)
        {
            If ((DVID == 0xFFFFFFFF))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }

        Method (ISGX, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                Return (One)
            }

            Return (Zero)
        }

        If (CondRefOf (\STD3))
        {
            If ((\STD3 != Zero))
            {
                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    If ((PAHC () || PNVM ()))
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    One
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    Zero
                                }
                            }
                        })
                    }
                }
            }
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    If (PBR1)
    {
        Scope (\_SB.PC00.PEG1.PEGP)
        {
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x04)
            }

            Device (PEGD)
            {
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x04)
                }

                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }
        }
    }

    Scope (\_SB.PC00.PEG1.PEGP)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            DVID,   32, 
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PRES, 0, Serialized)
        {
            If ((DVID == 0xFFFFFFFF))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }

        Method (ISGX, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                Return (One)
            }

            Return (Zero)
        }

        If (CondRefOf (\STD3))
        {
            If ((\STD3 != Zero))
            {
                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    If ((PAHC () || PNVM ()))
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    One
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    Zero
                                }
                            }
                        })
                    }
                }
            }
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    If (PBR2)
    {
        Scope (\_SB.PC00.PEG2.PEGP)
        {
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x04)
            }

            Device (PEGD)
            {
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x04)
                }

                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }
        }
    }

    Scope (\_SB.PC00.PEG2.PEGP)
    {
        OperationRegion (PCCX, PCI_Config, Zero, 0x10)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            DVID,   32, 
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PRES, 0, Serialized)
        {
            If ((DVID == 0xFFFFFFFF))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }

        Method (ISGX, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                Return (One)
            }

            Return (Zero)
        }

        If (CondRefOf (\STD3))
        {
            If ((\STD3 != Zero))
            {
                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    If ((PAHC () || PNVM ()))
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    One
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    Zero
                                }
                            }
                        })
                    }
                }
            }
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    If (PBR3)
    {
        Scope (\_SB.PC00.PEG3.PEGP)
        {
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x04)
            }

            Device (PEGD)
            {
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x04)
                }

                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.PEG3))
    {
        Scope (\_SB.PC00.PEG3.PEGP)
        {
            OperationRegion (PCCX, PCI_Config, Zero, 0x10)
            Field (PCCX, ByteAcc, NoLock, Preserve)
            {
                DVID,   32, 
                Offset (0x09), 
                PIXX,   8, 
                SCCX,   8, 
                BCCX,   8
            }

            Method (PAHC, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x06))
                    {
                        If ((PIXX == One))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PNVM, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x08))
                    {
                        If ((PIXX == 0x02))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PRES, 0, Serialized)
            {
                If ((DVID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (ISGX, 0, Serialized)
            {
                If ((BCCX == 0x03))
                {
                    Return (One)
                }

                Return (Zero)
            }

            If (CondRefOf (\STD3))
            {
                If ((\STD3 != Zero))
                {
                    Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                    {
                        If ((PAHC () || PNVM ()))
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "StorageD3Enable", 
                                        One
                                    }
                                }
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "StorageD3Enable", 
                                        Zero
                                    }
                                }
                            })
                        }
                    }
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (\_GPE)
    {
        Method (P0L6, 0, NotSerialized)
        {
            If (\_SB.ISME (P0WK))
            {
                \_SB.SHPO (P0WK, One)
                Notify (\_SB.PC00.PEG0, 0x02) // Device Wake
                \_SB.CAGS (P0WK)
            }
        }

        Method (P1L6, 0, NotSerialized)
        {
            If (\_SB.ISME (P1WK))
            {
                If (CondRefOf (\_SB.PC00.PEG1.DHDW))
                {
                    \_SB.PC00.PEG1.DHDW ()
                    Notify (\_SB.PC00.PEG1, Zero) // Bus Check
                }
                Else
                {
                    \_SB.SHPO (P1WK, One)
                    Notify (\_SB.PC00.PEG1, 0x02) // Device Wake
                }

                \_SB.CAGS (P1WK)
            }
        }

        Method (P2L6, 0, NotSerialized)
        {
            If (\_SB.ISME (P2WK))
            {
                \_SB.SHPO (P2WK, One)
                Notify (\_SB.PC00.PEG2, 0x02) // Device Wake
                \_SB.CAGS (P2WK)
            }
        }

        If (CondRefOf (\_SB.PC00.PEG3))
        {
            Method (P3L6, 0, NotSerialized)
            {
                If (\_SB.ISME (P3WK))
                {
                    \_SB.SHPO (P3WK, One)
                    Notify (\_SB.PC00.PEG3, 0x02) // Device Wake
                    \_SB.CAGS (P3WK)
                }
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "SocGpe ", 0x00003000)
{
    External (_GPE.P0L6, MethodObj)    // 0 Arguments
    External (_GPE.P1L6, MethodObj)    // 0 Arguments
    External (_GPE.P2L6, MethodObj)    // 0 Arguments
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.CNVW.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PC00.D3C_, PowerResObj)
    External (_SB_.PC00.D3C_._ON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.D3C_._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GFX0, DeviceObj)
    External (_SB_.PC00.GFX0.GSCI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GFX0.GSSE, FieldUnitObj)
    External (_SB_.PC00.GLAN.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HDAS.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PC00.MC__, DeviceObj)
    External (_SB_.PC00.MC__.D1F0, FieldUnitObj)
    External (_SB_.PC00.MC__.D1F1, FieldUnitObj)
    External (_SB_.PC00.MC__.D6F0, FieldUnitObj)
    External (_SB_.PC00.PEG0, DeviceObj)
    External (_SB_.PC00.PEG0.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PEGP, DeviceObj)
    External (_SB_.PC00.PEG1, DeviceObj)
    External (_SB_.PC00.PEG1.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2, DeviceObj)
    External (_SB_.PC00.PEG2.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01, DeviceObj)
    External (_SB_.PC00.RP02, DeviceObj)
    External (_SB_.PC00.RP03, DeviceObj)
    External (_SB_.PC00.RP04, DeviceObj)
    External (_SB_.PC00.RP05, DeviceObj)
    External (_SB_.PC00.RP06, DeviceObj)
    External (_SB_.PC00.RP07, DeviceObj)
    External (_SB_.PC00.RP08, DeviceObj)
    External (_SB_.PC00.RP09, DeviceObj)
    External (_SB_.PC00.RP10, DeviceObj)
    External (_SB_.PC00.RP11, DeviceObj)
    External (_SB_.PC00.RP12, DeviceObj)
    External (_SB_.PC00.RP13, DeviceObj)
    External (_SB_.PC00.RP14, DeviceObj)
    External (_SB_.PC00.RP15, DeviceObj)
    External (_SB_.PC00.RP16, DeviceObj)
    External (_SB_.PC00.RP17, DeviceObj)
    External (_SB_.PC00.RP18, DeviceObj)
    External (_SB_.PC00.RP19, DeviceObj)
    External (_SB_.PC00.RP20, DeviceObj)
    External (_SB_.PC00.RP21, DeviceObj)
    External (_SB_.PC00.RP22, DeviceObj)
    External (_SB_.PC00.RP23, DeviceObj)
    External (_SB_.PC00.RP24, DeviceObj)
    External (_SB_.PC00.RP25, DeviceObj)
    External (_SB_.PC00.RP26, DeviceObj)
    External (_SB_.PC00.RP27, DeviceObj)
    External (_SB_.PC00.RP28, DeviceObj)
    External (_SB_.PC00.TBT0, PowerResObj)
    External (_SB_.PC00.TBT0._OFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TBT0._ON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TBT1, PowerResObj)
    External (_SB_.PC00.TBT1._OFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TBT1._ON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TDM0, DeviceObj)
    External (_SB_.PC00.TDM0._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TDM0.MEMS, FieldUnitObj)
    External (_SB_.PC00.TDM0.PMES, FieldUnitObj)
    External (_SB_.PC00.TDM0.PMST, FieldUnitObj)
    External (_SB_.PC00.TDM0.STAT, IntObj)
    External (_SB_.PC00.TDM1, DeviceObj)
    External (_SB_.PC00.TDM1._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TDM1.MEMS, FieldUnitObj)
    External (_SB_.PC00.TDM1.PMES, FieldUnitObj)
    External (_SB_.PC00.TDM1.PMST, FieldUnitObj)
    External (_SB_.PC00.TDM1.STAT, IntObj)
    External (_SB_.PC00.TRP0, DeviceObj)
    External (_SB_.PC00.TRP0.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP0.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP1, DeviceObj)
    External (_SB_.PC00.TRP1.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP1.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP2, DeviceObj)
    External (_SB_.PC00.TRP2.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP2.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP3, DeviceObj)
    External (_SB_.PC00.TRP3.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP3.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TXDC, UnknownObj)
    External (_SB_.PC00.TXDC._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TXDC.D0I3, FieldUnitObj)
    External (_SB_.PC00.TXDC.PMES, FieldUnitObj)
    External (_SB_.PC00.TXHC, DeviceObj)
    External (_SB_.PC00.TXHC._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TXHC.D0D3, FieldUnitObj)
    External (_SB_.PC00.TXHC.PMES, FieldUnitObj)
    External (_SB_.PC00.XDCI.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PC01, DeviceObj)
    External (_SB_.PC01.TRP0, DeviceObj)
    External (_SB_.PC01.TRP0.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP0.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP1, DeviceObj)
    External (_SB_.PC01.TRP1.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP1.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP2, DeviceObj)
    External (_SB_.PC01.TRP2.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP2.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP3, DeviceObj)
    External (_SB_.PC01.TRP3.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP3.HPME, MethodObj)    // 0 Arguments
    External (AL6D, FieldUnitObj)
    External (CPRT, FieldUnitObj)
    External (GSMI, FieldUnitObj)
    External (P1GP, FieldUnitObj)
    External (P2GP, FieldUnitObj)
    External (PCHS, FieldUnitObj)
    External (PCHX, IntObj)
    External (PG0E, FieldUnitObj)
    External (PG1E, FieldUnitObj)
    External (PG2E, FieldUnitObj)
    External (SGGP, FieldUnitObj)

    Scope (\_GPE)
    {
        Method (SL61, 0, NotSerialized)
        {
            If ((AL6D == One))
            {
                If (CondRefOf (\_SB.PC00.TXHC))
                {
                    If (CondRefOf (\_SB.PC01))
                    {
                        \_SB.PC01.TRP0.HPEV ()
                        \_SB.PC01.TRP1.HPEV ()
                        \_SB.PC01.TRP2.HPEV ()
                        \_SB.PC01.TRP3.HPEV ()
                    }
                    Else
                    {
                        \_SB.PC00.TRP0.HPEV ()
                        \_SB.PC00.TRP1.HPEV ()
                        \_SB.PC00.TRP2.HPEV ()
                        \_SB.PC00.TRP3.HPEV ()
                    }
                }
            }

            Sleep (0x64)
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    \_SB.PC01.TRP0.HPEV ()
                    \_SB.PC01.TRP1.HPEV ()
                    \_SB.PC01.TRP2.HPEV ()
                    \_SB.PC01.TRP3.HPEV ()
                }
                Else
                {
                    \_SB.PC00.TRP0.HPEV ()
                    \_SB.PC00.TRP1.HPEV ()
                    \_SB.PC00.TRP2.HPEV ()
                    \_SB.PC00.TRP3.HPEV ()
                }
            }

            If ((PG0E == One))
            {
                \_SB.PC00.PEG0.HPEV ()
            }

            If ((PG1E == One))
            {
                \_SB.PC00.PEG1.HPEV ()
            }

            If ((PG2E == One))
            {
                \_SB.PC00.PEG2.HPEV ()
            }

            If ((AL6D == One))
            {
                If (CondRefOf (\_SB.PC00.TXHC))
                {
                    If (CondRefOf (\_SB.PC01))
                    {
                        \_SB.PC01.TRP0.HPEV ()
                        \_SB.PC01.TRP1.HPEV ()
                        \_SB.PC01.TRP2.HPEV ()
                        \_SB.PC01.TRP3.HPEV ()
                    }
                    Else
                    {
                        \_SB.PC00.TRP0.HPEV ()
                        \_SB.PC00.TRP1.HPEV ()
                        \_SB.PC00.TRP2.HPEV ()
                        \_SB.PC00.TRP3.HPEV ()
                    }
                }
            }
        }

        Method (SL66, 0, NotSerialized)
        {
            If (CondRefOf (\_SB.PC00.GFX0))
            {
                If ((\_SB.PC00.GFX0.GSSE && !GSMI))
                {
                    \_SB.PC00.GFX0.GSCI ()
                }
            }
        }

        Method (SL69, 0, NotSerialized)
        {
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    If ((\_SB.PC01.TRP0.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                        Notify (\_SB.PC01.TRP0, 0x02) // Device Wake
                    }

                    If ((\_SB.PC01.TRP1.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                        Notify (\_SB.PC01.TRP1, 0x02) // Device Wake
                    }

                    If ((\_SB.PC01.TRP2.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                        Notify (\_SB.PC01.TRP2, 0x02) // Device Wake
                    }

                    If ((\_SB.PC01.TRP3.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                        Notify (\_SB.PC01.TRP3, 0x02) // Device Wake
                    }
                }
                Else
                {
                    If ((\_SB.PC00.TRP0.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                        Notify (\_SB.PC00.TRP0, 0x02) // Device Wake
                    }

                    If ((\_SB.PC00.TRP1.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                        Notify (\_SB.PC00.TRP1, 0x02) // Device Wake
                    }

                    If ((\_SB.PC00.TRP2.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                        Notify (\_SB.PC00.TRP2, 0x02) // Device Wake
                    }

                    If ((\_SB.PC00.TRP3.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                        Notify (\_SB.PC00.TRP3, 0x02) // Device Wake
                    }
                }
            }

            If ((PCHS == PCHX)) {}
            If ((\_SB.PC00.MC.D6F0 == One))
            {
                \_SB.PC00.PEG0.HPME ()
                Notify (\_SB.PC00.PEG0, 0x02) // Device Wake
                Notify (\_SB.PC00.PEG0.PEGP, 0x02) // Device Wake
            }

            If ((\_SB.PC00.MC.D1F0 == One))
            {
                \_SB.PC00.PEG1.HPME ()
                Notify (\_SB.PC00.PEG1, 0x02) // Device Wake
            }

            If ((\_SB.PC00.MC.D1F1 == One))
            {
                \_SB.PC00.PEG2.HPME ()
                Notify (\_SB.PC00.PEG2, 0x02) // Device Wake
            }
        }

        If ((AL6D == One))
        {
            Method (SL6D, 0, NotSerialized)
            {
                If (CondRefOf (\_SB.PC00.XHCI))
                {
                    \_SB.PC00.XHCI.GPEH ()
                }

                If (CondRefOf (\_SB.PC00.HDAS))
                {
                    \_SB.PC00.HDAS.GPEH ()
                }

                If (CondRefOf (\_SB.PC00.GLAN))
                {
                    \_SB.PC00.GLAN.GPEH ()
                }

                If (CondRefOf (\_SB.PC00.CNVW))
                {
                    \_SB.PC00.CNVW.GPEH ()
                }

                If (CondRefOf (\_SB.PC00.XDCI))
                {
                    \_SB.PC00.XDCI.GPEH ()
                }

                If (CondRefOf (\_SB.PC00.D3C))
                {
                    If ((\_SB.PC00.D3C._STA () == Zero))
                    {
                        \_SB.PC00.D3C._ON ()
                    }
                }

                If (CondRefOf (\_SB.PC00.TDM0))
                {
                    If ((\_SB.PC00.TDM0._STA () == 0x0F))
                    {
                        Local0 = Zero
                        If ((\_SB.PC00.TDM0.STAT == Zero))
                        {
                            \_SB.PC00.TBT0._ON ()
                            Local0 = One
                        }

                        Local1 = \_SB.PC00.TDM0.PMES /* External reference */
                        If ((Local1 == Zero))
                        {
                            If ((Local0 == One))
                            {
                                If ((\_SB.PC00.TDM0.PMST == 0x03))
                                {
                                    If ((\_SB.PC00.TDM0.MEMS == Zero))
                                    {
                                        If ((\_SB.PC00.TDM0.STAT == One))
                                        {
                                            \_SB.PC00.TBT0._OFF ()
                                        }
                                    }
                                }
                            }
                        }
                        Else
                        {
                            Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                        }
                    }
                }

                If (CondRefOf (\_SB.PC00.TDM1))
                {
                    If ((\_SB.PC00.TDM1._STA () == 0x0F))
                    {
                        Local0 = Zero
                        If ((\_SB.PC00.TDM1.STAT == Zero))
                        {
                            \_SB.PC00.TBT1._ON ()
                            Local0 = One
                        }

                        Local1 = \_SB.PC00.TDM1.PMES /* External reference */
                        If ((Local1 == Zero))
                        {
                            If ((Local0 == One))
                            {
                                If ((\_SB.PC00.TDM1.PMST == 0x03))
                                {
                                    If ((\_SB.PC00.TDM1.MEMS == Zero))
                                    {
                                        If ((\_SB.PC00.TDM1.STAT == One))
                                        {
                                            \_SB.PC00.TBT1._OFF ()
                                        }
                                    }
                                }
                            }
                        }
                        Else
                        {
                            Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                        }
                    }
                }

                If (CondRefOf (\_SB.PC00.TXDC))
                {
                    If ((\_SB.PC00.TXDC._STA () == 0x0F))
                    {
                        Local1 = \_SB.PC00.TXDC.PMES /* External reference */
                        If ((Local1 == One))
                        {
                            Notify (\_SB.PC00.TXDC, 0x02) // Device Wake
                        }
                    }
                }

                If (CondRefOf (\_SB.PC00.TXHC))
                {
                    If ((\_SB.PC00.TXHC._STA () == 0x0F))
                    {
                        Notify (\_SB.PC00.TXHC, 0x02) // Device Wake
                    }
                }
            }
        }

        Method (SL6F, 0, NotSerialized)
        {
            If ((SGGP == One))
            {
                If (CondRefOf (\_GPE.P0L6))
                {
                    \_GPE.P0L6 ()
                }
            }

            If ((P1GP == One))
            {
                If (CondRefOf (\_GPE.P1L6))
                {
                    \_GPE.P1L6 ()
                }
            }

            If ((P2GP == One))
            {
                If (CondRefOf (\_GPE.P2L6))
                {
                    \_GPE.P2L6 ()
                }
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "PID0Ssdt", 0x00000010)
{
    External (_SB_.PC00.LPCB.EC__, DeviceObj)

    Scope (\_SB.PC00.LPCB.EC)
    {
        Device (LHKF)
        {
            Name (_HID, EisaId ("LEN0130"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "TbtTypeC", 0x00000000)
{
    External (_SB_.PC00.RP01.PXSX, DeviceObj)
    External (_SB_.PC00.RP05.PXSX, DeviceObj)
    External (_SB_.PC00.RP09.PXSX, DeviceObj)
    External (_SB_.PC00.RP13.PXSX, DeviceObj)
    External (_SB_.PC00.RP17.PXSX, DeviceObj)
    External (_SB_.PC00.RP21.PXSX, DeviceObj)
    External (_SB_.PC00.RP25.PXSX, DeviceObj)
    External (_SB_.UBTC.RUCC, MethodObj)    // 2 Arguments
    External (DPM1, IntObj)
    External (DPM2, IntObj)
    External (DPM3, IntObj)
    External (DTFS, IntObj)
    External (NDUS, IntObj)
    External (NTUS, IntObj)
    External (RPS0, IntObj)
    External (RPS1, IntObj)
    External (TBSE, IntObj)
    External (TP1D, IntObj)
    External (TP1P, IntObj)
    External (TP1T, IntObj)
    External (TP2D, IntObj)
    External (TP2P, IntObj)
    External (TP2T, IntObj)
    External (TP3D, IntObj)
    External (TP3P, IntObj)
    External (TP3T, IntObj)
    External (TP4D, IntObj)
    External (TP4P, IntObj)
    External (TP4T, IntObj)
    External (TP5D, IntObj)
    External (TP5P, IntObj)
    External (TP5T, IntObj)
    External (TP6D, IntObj)
    External (TP6P, IntObj)
    External (TP6T, IntObj)

    If (CondRefOf (\DTFS))
    {
        If (((DTFS == One) && ((RPS0 == One) || (RPS1 == One))))
        {
            Scope (\_SB.PC00.RP01.PXSX)
            {
                Name (TURP, One)
                Device (TBDT)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Device (TBCL)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (TBD0)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (TBD1)
                {
                    Name (_ADR, 0x00030000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (TBDU)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Device (XHCI)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Device (RHUB)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                Return (Zero)
                            }

                            Method (SLMS, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return ((TP1D & One))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return ((TP2D & One))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return ((TP3D & One))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return ((TP4D & One))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return ((TP5D & One))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return ((TP6D & One))
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (FPCP, 2, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (\_SB.UBTC.RUCC (One, Arg1))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x02, Arg1))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x03, Arg1))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x04, Arg1))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x05, Arg1))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x06, Arg1))
                                }
                                ElseIf ((Arg1 == One))
                                {
                                    Return (TUPC (Zero, Zero))
                                }
                                Else
                                {
                                    Return (TPLD (Zero, Zero))
                                }
                            }

                            Method (FPSP, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (TPLD, 2, Serialized)
                            {
                                Name (PCKG, Package (0x01)
                                {
                                    Buffer (0x10) {}
                                })
                                CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                                REV = One
                                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                                VISI = Arg0
                                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                                GPOS = Arg1
                                CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                                SHAP = One
                                CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                                WID = 0x08
                                CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                                HGT = 0x03
                                Return (PCKG) /* \_SB_.PC00.RP01.PXSX.TBDU.XHCI.RHUB.TPLD.PCKG */
                            }

                            Method (TUPC, 2, Serialized)
                            {
                                Name (PCKG, Package (0x04)
                                {
                                    One, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                PCKG [Zero] = Arg0
                                PCKG [One] = Arg1
                                Return (PCKG) /* \_SB_.PC00.RP01.PXSX.TBDU.XHCI.RHUB.TUPC.PCKG */
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (HS01)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (HS02)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (SS01)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (One, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (One, 0x02))
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (SS02)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (0x02, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (0x02, 0x02))
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        If (((DTFS == One) && ((RPS0 == 0x05) || (RPS1 == 0x05))))
        {
            Scope (\_SB.PC00.RP05.PXSX)
            {
                Name (TURP, 0x05)
                Device (TBDT)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Device (TBCL)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (TBD0)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (TBD1)
                {
                    Name (_ADR, 0x00030000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (TBDU)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Device (XHCI)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Device (RHUB)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                Return (Zero)
                            }

                            Method (SLMS, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return ((TP1D & One))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return ((TP2D & One))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return ((TP3D & One))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return ((TP4D & One))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return ((TP5D & One))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return ((TP6D & One))
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (FPCP, 2, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (\_SB.UBTC.RUCC (One, Arg1))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x02, Arg1))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x03, Arg1))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x04, Arg1))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x05, Arg1))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x06, Arg1))
                                }
                                ElseIf ((Arg1 == One))
                                {
                                    Return (TUPC (Zero, Zero))
                                }
                                Else
                                {
                                    Return (TPLD (Zero, Zero))
                                }
                            }

                            Method (FPSP, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (TPLD, 2, Serialized)
                            {
                                Name (PCKG, Package (0x01)
                                {
                                    Buffer (0x10) {}
                                })
                                CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                                REV = One
                                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                                VISI = Arg0
                                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                                GPOS = Arg1
                                CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                                SHAP = One
                                CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                                WID = 0x08
                                CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                                HGT = 0x03
                                Return (PCKG) /* \_SB_.PC00.RP05.PXSX.TBDU.XHCI.RHUB.TPLD.PCKG */
                            }

                            Method (TUPC, 2, Serialized)
                            {
                                Name (PCKG, Package (0x04)
                                {
                                    One, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                PCKG [Zero] = Arg0
                                PCKG [One] = Arg1
                                Return (PCKG) /* \_SB_.PC00.RP05.PXSX.TBDU.XHCI.RHUB.TUPC.PCKG */
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (HS01)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (HS02)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (SS01)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (One, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (One, 0x02))
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (SS02)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (0x02, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (0x02, 0x02))
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        If (((DTFS == One) && ((RPS0 == 0x09) || (RPS1 == 0x09))))
        {
            Scope (\_SB.PC00.RP09.PXSX)
            {
                Name (TURP, 0x09)
                Device (TBDT)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Device (TBCL)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (TBD0)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (TBD1)
                {
                    Name (_ADR, 0x00030000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (TBDU)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Device (XHCI)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Device (RHUB)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                Return (Zero)
                            }

                            Method (SLMS, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return ((TP1D & One))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return ((TP2D & One))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return ((TP3D & One))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return ((TP4D & One))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return ((TP5D & One))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return ((TP6D & One))
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (FPCP, 2, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (\_SB.UBTC.RUCC (One, Arg1))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x02, Arg1))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x03, Arg1))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x04, Arg1))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x05, Arg1))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x06, Arg1))
                                }
                                ElseIf ((Arg1 == One))
                                {
                                    Return (TUPC (Zero, Zero))
                                }
                                Else
                                {
                                    Return (TPLD (Zero, Zero))
                                }
                            }

                            Method (FPSP, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (TPLD, 2, Serialized)
                            {
                                Name (PCKG, Package (0x01)
                                {
                                    Buffer (0x10) {}
                                })
                                CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                                REV = One
                                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                                VISI = Arg0
                                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                                GPOS = Arg1
                                CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                                SHAP = One
                                CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                                WID = 0x08
                                CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                                HGT = 0x03
                                Return (PCKG) /* \_SB_.PC00.RP09.PXSX.TBDU.XHCI.RHUB.TPLD.PCKG */
                            }

                            Method (TUPC, 2, Serialized)
                            {
                                Name (PCKG, Package (0x04)
                                {
                                    One, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                PCKG [Zero] = Arg0
                                PCKG [One] = Arg1
                                Return (PCKG) /* \_SB_.PC00.RP09.PXSX.TBDU.XHCI.RHUB.TUPC.PCKG */
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (HS01)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (HS02)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (SS01)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (One, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (One, 0x02))
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (SS02)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (0x02, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (0x02, 0x02))
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        If (((DTFS == One) && ((RPS0 == 0x0D) || (RPS1 == 0x0D))))
        {
            Scope (\_SB.PC00.RP13.PXSX)
            {
                Name (TURP, 0x0D)
                Device (TBDT)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Device (TBCL)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (TBD0)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (TBD1)
                {
                    Name (_ADR, 0x00030000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (TBDU)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Device (XHCI)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Device (RHUB)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                Return (Zero)
                            }

                            Method (SLMS, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return ((TP1D & One))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return ((TP2D & One))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return ((TP3D & One))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return ((TP4D & One))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return ((TP5D & One))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return ((TP6D & One))
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (FPCP, 2, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (\_SB.UBTC.RUCC (One, Arg1))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x02, Arg1))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x03, Arg1))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x04, Arg1))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x05, Arg1))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x06, Arg1))
                                }
                                ElseIf ((Arg1 == One))
                                {
                                    Return (TUPC (Zero, Zero))
                                }
                                Else
                                {
                                    Return (TPLD (Zero, Zero))
                                }
                            }

                            Method (FPSP, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (TPLD, 2, Serialized)
                            {
                                Name (PCKG, Package (0x01)
                                {
                                    Buffer (0x10) {}
                                })
                                CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                                REV = One
                                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                                VISI = Arg0
                                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                                GPOS = Arg1
                                CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                                SHAP = One
                                CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                                WID = 0x08
                                CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                                HGT = 0x03
                                Return (PCKG) /* \_SB_.PC00.RP13.PXSX.TBDU.XHCI.RHUB.TPLD.PCKG */
                            }

                            Method (TUPC, 2, Serialized)
                            {
                                Name (PCKG, Package (0x04)
                                {
                                    One, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                PCKG [Zero] = Arg0
                                PCKG [One] = Arg1
                                Return (PCKG) /* \_SB_.PC00.RP13.PXSX.TBDU.XHCI.RHUB.TUPC.PCKG */
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (HS01)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (HS02)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (SS01)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (One, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (One, 0x02))
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (SS02)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (0x02, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (0x02, 0x02))
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        If (((DTFS == One) && ((RPS0 == 0x11) || (RPS1 == 0x11))))
        {
            Scope (\_SB.PC00.RP17.PXSX)
            {
                Name (TURP, 0x11)
                Device (TBDT)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Device (TBCL)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (TBD0)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (TBD1)
                {
                    Name (_ADR, 0x00030000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (TBDU)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Device (XHCI)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Device (RHUB)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                Return (Zero)
                            }

                            Method (SLMS, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return ((TP1D & One))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return ((TP2D & One))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return ((TP3D & One))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return ((TP4D & One))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return ((TP5D & One))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return ((TP6D & One))
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (FPCP, 2, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (\_SB.UBTC.RUCC (One, Arg1))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x02, Arg1))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x03, Arg1))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x04, Arg1))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x05, Arg1))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x06, Arg1))
                                }
                                ElseIf ((Arg1 == One))
                                {
                                    Return (TUPC (Zero, Zero))
                                }
                                Else
                                {
                                    Return (TPLD (Zero, Zero))
                                }
                            }

                            Method (FPSP, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (TPLD, 2, Serialized)
                            {
                                Name (PCKG, Package (0x01)
                                {
                                    Buffer (0x10) {}
                                })
                                CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                                REV = One
                                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                                VISI = Arg0
                                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                                GPOS = Arg1
                                CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                                SHAP = One
                                CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                                WID = 0x08
                                CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                                HGT = 0x03
                                Return (PCKG) /* \_SB_.PC00.RP17.PXSX.TBDU.XHCI.RHUB.TPLD.PCKG */
                            }

                            Method (TUPC, 2, Serialized)
                            {
                                Name (PCKG, Package (0x04)
                                {
                                    One, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                PCKG [Zero] = Arg0
                                PCKG [One] = Arg1
                                Return (PCKG) /* \_SB_.PC00.RP17.PXSX.TBDU.XHCI.RHUB.TUPC.PCKG */
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (HS01)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (HS02)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (SS01)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (One, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (One, 0x02))
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (SS02)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (0x02, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (0x02, 0x02))
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        If (((DTFS == One) && ((RPS0 == 0x15) || (RPS1 == 0x15))))
        {
            Scope (\_SB.PC00.RP21.PXSX)
            {
                Name (TURP, 0x15)
                Device (TBDT)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Device (TBCL)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (TBD0)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (TBD1)
                {
                    Name (_ADR, 0x00030000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (TBDU)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Device (XHCI)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Device (RHUB)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                Return (Zero)
                            }

                            Method (SLMS, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return ((TP1D & One))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return ((TP2D & One))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return ((TP3D & One))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return ((TP4D & One))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return ((TP5D & One))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return ((TP6D & One))
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (FPCP, 2, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (\_SB.UBTC.RUCC (One, Arg1))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x02, Arg1))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x03, Arg1))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x04, Arg1))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x05, Arg1))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x06, Arg1))
                                }
                                ElseIf ((Arg1 == One))
                                {
                                    Return (TUPC (Zero, Zero))
                                }
                                Else
                                {
                                    Return (TPLD (Zero, Zero))
                                }
                            }

                            Method (FPSP, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (TPLD, 2, Serialized)
                            {
                                Name (PCKG, Package (0x01)
                                {
                                    Buffer (0x10) {}
                                })
                                CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                                REV = One
                                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                                VISI = Arg0
                                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                                GPOS = Arg1
                                CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                                SHAP = One
                                CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                                WID = 0x08
                                CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                                HGT = 0x03
                                Return (PCKG) /* \_SB_.PC00.RP21.PXSX.TBDU.XHCI.RHUB.TPLD.PCKG */
                            }

                            Method (TUPC, 2, Serialized)
                            {
                                Name (PCKG, Package (0x04)
                                {
                                    One, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                PCKG [Zero] = Arg0
                                PCKG [One] = Arg1
                                Return (PCKG) /* \_SB_.PC00.RP21.PXSX.TBDU.XHCI.RHUB.TUPC.PCKG */
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (HS01)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (HS02)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (SS01)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (One, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (One, 0x02))
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (SS02)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (0x02, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (0x02, 0x02))
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        If (((DTFS == One) && ((RPS0 == 0x19) || (RPS1 == 0x19))))
        {
            Scope (\_SB.PC00.RP25.PXSX)
            {
                Name (TURP, 0x19)
                Device (TBDT)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Device (TBCL)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (TBD0)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (TBD1)
                {
                    Name (_ADR, 0x00030000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (TBDU)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Device (XHCI)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }

                        Device (RHUB)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                Return (Zero)
                            }

                            Method (SLMS, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return ((TP1D & One))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return ((TP2D & One))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return ((TP3D & One))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return ((TP4D & One))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return ((TP5D & One))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return ((TP6D & One))
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (FPCP, 2, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (\_SB.UBTC.RUCC (One, Arg1))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x02, Arg1))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x03, Arg1))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x04, Arg1))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x05, Arg1))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x06, Arg1))
                                }
                                ElseIf ((Arg1 == One))
                                {
                                    Return (TUPC (Zero, Zero))
                                }
                                Else
                                {
                                    Return (TPLD (Zero, Zero))
                                }
                            }

                            Method (FPSP, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (TPLD, 2, Serialized)
                            {
                                Name (PCKG, Package (0x01)
                                {
                                    Buffer (0x10) {}
                                })
                                CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                                REV = One
                                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                                VISI = Arg0
                                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                                GPOS = Arg1
                                CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                                SHAP = One
                                CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                                WID = 0x08
                                CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                                HGT = 0x03
                                Return (PCKG) /* \_SB_.PC00.RP25.PXSX.TBDU.XHCI.RHUB.TPLD.PCKG */
                            }

                            Method (TUPC, 2, Serialized)
                            {
                                Name (PCKG, Package (0x04)
                                {
                                    One, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                PCKG [Zero] = Arg0
                                PCKG [One] = Arg1
                                Return (PCKG) /* \_SB_.PC00.RP25.PXSX.TBDU.XHCI.RHUB.TUPC.PCKG */
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (HS01)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (HS02)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (SS01)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (One, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (One, 0x02))
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (SS02)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (0x02, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (0x02, 0x02))
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "Tpm2Tabl", 0x00001000)
{
    Scope (\_SB)
    {
        Device (TPM)
        {
            Name (_HID, "NTC0702")  // _HID: Hardware ID
            Noop
            Name (_CID, "MSFT0101" /* TPM 2.0 Security Device */)  // _CID: Compatible ID
            Name (_STR, Unicode ("TPM 2.0 Device"))  // _STR: Description String
            OperationRegion (SMIP, SystemIO, 0xB2, One)
            Field (SMIP, ByteAcc, NoLock, Preserve)
            {
                IOPN,   8
            }

            OperationRegion (TPMR, SystemMemory, 0xFED40000, 0x5000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                ACC0,   8, 
                Offset (0x08), 
                INTE,   32, 
                INTV,   8, 
                Offset (0x10), 
                INTS,   32, 
                INTF,   32, 
                STS0,   32, 
                Offset (0x24), 
                FIFO,   32, 
                Offset (0x30), 
                TID0,   32
            }

            OperationRegion (TNVS, SystemMemory, 0x936A5000, 0x2F)
            Field (TNVS, AnyAcc, NoLock, Preserve)
            {
                PPIN,   8, 
                PPIP,   32, 
                PPRP,   32, 
                PPRQ,   32, 
                PPRM,   32, 
                LPPR,   32, 
                FRET,   32, 
                MCIN,   8, 
                MCIP,   32, 
                MORD,   32, 
                MRET,   32, 
                UCRQ,   32, 
                IRQN,   32, 
                SFRB,   8
            }

            Name (RESS, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000001,
                    0x00000002,
                    0x00000003,
                    0x00000004,
                    0x00000005,
                    0x00000006,
                    0x00000007,
                    0x00000008,
                    0x00000009,
                    0x0000000A,
                }
            })
            Name (RESL, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000001,
                    0x00000002,
                    0x00000003,
                    0x00000004,
                    0x00000005,
                    0x00000006,
                    0x00000007,
                    0x00000008,
                    0x00000009,
                    0x0000000A,
                    0x0000000B,
                    0x0000000C,
                    0x0000000D,
                    0x0000000E,
                    0x0000000F,
                }
            })
            Name (RES0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y00)
                {
                    0x0000000C,
                }
            })
            Name (RES1, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If ((IRQN == Zero))
                {
                    Return (RES1) /* \_SB_.TPM_.RES1 */
                }
                Else
                {
                    CreateDWordField (RES0, \_SB.TPM._Y00._INT, LIRQ)  // _INT: Interrupts
                    LIRQ = IRQN /* \_SB_.TPM_.IRQN */
                    Return (RES0) /* \_SB_.TPM_.RES0 */
                }
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                If ((IRQN != Zero))
                {
                    CreateDWordField (Arg0, 0x11, IRQ0)
                    CreateDWordField (RES0, \_SB.TPM._Y00._INT, LIRQ)  // _INT: Interrupts
                    LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    IRQN = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    CreateBitField (Arg0, 0x79, ITRG)
                    CreateBitField (RES0, \_SB.TPM._Y00._HE, LTRG)  // _HE_: High-Edge
                    LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    CreateBitField (Arg0, 0x7A, ILVL)
                    CreateBitField (RES0, \_SB.TPM._Y00._LL, LLVL)  // _LL_: Low Level
                    LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                    If ((((TID0 & 0x0F) == Zero) || ((TID0 & 0x0F
                        ) == 0x0F)))
                    {
                        If ((IRQ0 < 0x10))
                        {
                            INTV = (IRQ0 & 0x0F)
                        }

                        If ((ITRG == One))
                        {
                            INTE |= 0x10
                        }
                        Else
                        {
                            INTE &= 0xFFFFFFEF
                        }

                        If ((ILVL == Zero))
                        {
                            INTE |= 0x08
                        }
                        Else
                        {
                            INTE &= 0xFFFFFFF7
                        }
                    }
                }
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                If ((IRQN == Zero))
                {
                    Return (RES1) /* \_SB_.TPM_.RES1 */
                }
                ElseIf ((SFRB == Zero))
                {
                    Return (RESL) /* \_SB_.TPM_.RESL */
                }
                Else
                {
                    Return (RESS) /* \_SB_.TPM_.RESS */
                }
            }

            Method (PTS, 1, Serialized)
            {
                If (((Arg0 < 0x06) && (Arg0 > 0x03)))
                {
                    If (!(MORD & 0x10))
                    {
                        MCIP = 0x02
                        IOPN = MCIN /* \_SB_.TPM_.MCIN */
                    }
                }

                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((ACC0 == 0xFF))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (HINF, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Name (TPMV, Package (0x02)
                        {
                            One, 
                            Package (0x02)
                            {
                                0x02, 
                                Zero
                            }
                        })
                        If ((_STA () == Zero))
                        {
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }

                        Return (TPMV) /* \_SB_.TPM_.HINF.TPMV */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (TPM2, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (TPM3, Package (0x03)
            {
                Zero, 
                Zero, 
                Zero
            })
            Method (TPPI, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        Return ("1.3")
                    }
                    Case (0x02)
                    {
                        PPRQ = DerefOf (Arg1 [Zero])
                        PPRM = Zero
                        PPIP = 0x02
                        IOPN = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x03)
                    {
                        TPM2 [One] = PPRQ /* \_SB_.TPM_.PPRQ */
                        Return (TPM2) /* \_SB_.TPM_.TPM2 */
                    }
                    Case (0x04)
                    {
                        Return (0x02)
                    }
                    Case (0x05)
                    {
                        PPIP = 0x05
                        IOPN = PPIN /* \_SB_.TPM_.PPIN */
                        TPM3 [One] = LPPR /* \_SB_.TPM_.LPPR */
                        TPM3 [0x02] = PPRP /* \_SB_.TPM_.PPRP */
                        Return (TPM3) /* \_SB_.TPM_.TPM3 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        PPIP = 0x07
                        PPRQ = DerefOf (Arg1 [Zero])
                        PPRM = Zero
                        If ((PPRQ == 0x17))
                        {
                            PPRM = DerefOf (Arg1 [One])
                        }

                        IOPN = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x08)
                    {
                        PPIP = 0x08
                        UCRQ = DerefOf (Arg1 [Zero])
                        IOPN = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (TMCI, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        MORD = DerefOf (Arg1 [Zero])
                        MCIP = One
                        IOPN = MCIN /* \_SB_.TPM_.MCIN */
                        Return (MRET) /* \_SB_.TPM_.MRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
                {
                    Return (HINF (Arg2))
                }

                If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    Return (TPPI (Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    Return (TMCI (Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "IgfxSsdt", 0x00003000)
{
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.LID_._LID, MethodObj)    // 0 Arguments
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.GFX0, DeviceObj)
    External (_SB_.PC00.GFX0.CPSC, UnknownObj)
    External (_SB_.PC00.GFX0.DSEN, UnknownObj)
    External (_SB_.PC00.GFX0.EDMX, UnknownObj)
    External (_SB_.PC00.GFX0.HDOS, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GFX0.HNOT, MethodObj)    // 1 Arguments
    External (_SB_.PC00.GFX0.OSYS, IntObj)
    External (_SB_.PC00.GFX0.S0ID, UnknownObj)
    External (_SB_.PC00.IMMC, MethodObj)    // 5 Arguments
    External (_SB_.PC00.LPCB.EC__.BRNS, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.EC__.BRTW, PkgObj)
    External (_SB_.PC00.MC__, DeviceObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (ASLB, UnknownObj)
    External (BRLV, UnknownObj)
    External (BRTL, UnknownObj)
    External (CSTE, UnknownObj)
    External (DID1, UnknownObj)
    External (DID2, UnknownObj)
    External (DID3, UnknownObj)
    External (DID4, UnknownObj)
    External (DID5, UnknownObj)
    External (DID6, UnknownObj)
    External (DID7, UnknownObj)
    External (DID8, UnknownObj)
    External (DID9, UnknownObj)
    External (DIDA, UnknownObj)
    External (DIDB, UnknownObj)
    External (DIDC, UnknownObj)
    External (DIDD, UnknownObj)
    External (DIDE, UnknownObj)
    External (DIDF, UnknownObj)
    External (DIDX, UnknownObj)
    External (DIDY, UnknownObj)
    External (ECON, IntObj)
    External (EDPV, UnknownObj)
    External (GUAM, MethodObj)    // 1 Arguments
    External (HGMD, UnknownObj)
    External (HVCO, UnknownObj)
    External (IBIA, UnknownObj)
    External (IBTT, UnknownObj)
    External (IF1E, UnknownObj)
    External (IPAT, UnknownObj)
    External (IPSC, UnknownObj)
    External (IPTP, UnknownObj)
    External (ISSC, UnknownObj)
    External (KSV0, UnknownObj)
    External (KSV1, UnknownObj)
    External (LIDS, UnknownObj)
    External (NDID, UnknownObj)
    External (NSTE, UnknownObj)
    External (NXD1, UnknownObj)
    External (NXD2, UnknownObj)
    External (NXD3, UnknownObj)
    External (NXD4, UnknownObj)
    External (NXD5, UnknownObj)
    External (NXD6, UnknownObj)
    External (NXD7, UnknownObj)
    External (NXD8, UnknownObj)
    External (NXDX, UnknownObj)
    External (NXDY, UnknownObj)
    External (PAVP, UnknownObj)
    External (PLD1, MethodObj)    // 0 Arguments
    External (PLD2, MethodObj)    // 0 Arguments
    External (PNHM, IntObj)

    Scope (\_SB.PC00.GFX0)
    {
        Name (DPLD, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x20, 0x03, 0xD0, 0x07,  // .... ...
                /* 0008 */  0x41, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01,  // A.......
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        })
        Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
        {
            DSEN = (Arg0 & 0x07)
            If (((Arg0 & 0x03) == Zero))
            {
                If (CondRefOf (HDOS))
                {
                    HDOS ()
                }
            }
        }

        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            If ((CLID != \_SB.LID._LID ()))
            {
                VLOC (\_SB.LID._LID ())
            }

            NDID = 0x02
            If ((DIDL != Zero))
            {
                DID1 = SDDL (DIDL)
            }

            If ((DDL2 != Zero))
            {
                DID2 = SDDL (DDL2)
            }

            If ((DDL3 != Zero))
            {
                DID3 = SDDL (DDL3)
            }

            If ((DDL4 != Zero))
            {
                DID4 = SDDL (DDL4)
            }

            If ((DDL5 != Zero))
            {
                DID5 = SDDL (DDL5)
            }

            If ((DDL6 != Zero))
            {
                DID6 = SDDL (DDL6)
            }

            If ((DDL7 != Zero))
            {
                DID7 = SDDL (DDL7)
            }

            If ((DDL8 != Zero))
            {
                DID8 = SDDL (DDL8)
            }

            If ((DDL9 != Zero))
            {
                DID9 = SDDL (DDL9)
            }

            If ((DD10 != Zero))
            {
                DIDA = SDDL (DD10)
            }

            If ((DD11 != Zero))
            {
                DIDB = SDDL (DD11)
            }

            If ((DD12 != Zero))
            {
                DIDC = SDDL (DD12)
            }

            If ((DD13 != Zero))
            {
                DIDD = SDDL (DD13)
            }

            If ((DD14 != Zero))
            {
                DIDE = SDDL (DD14)
            }

            If ((DD15 != Zero))
            {
                DIDF = SDDL (DD15)
            }

            If ((NDID == One))
            {
                Name (TMP1, Package (0x01)
                {
                    0xFFFFFFFF
                })
                If ((IPTP == One))
                {
                    TMP1 [Zero] = 0x00023480
                }
                Else
                {
                    TMP1 [Zero] = (0x00010000 | DID1)
                }

                Return (TMP1) /* \_SB_.PC00.GFX0._DOD.TMP1 */
            }

            If ((NDID == 0x02))
            {
                Name (TMP2, Package (0x02)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP2 [Zero] = (0x00010000 | DID1)
                If ((IPTP == One))
                {
                    TMP2 [One] = 0x00023480
                }
                Else
                {
                    TMP2 [One] = (0x00010000 | DID2)
                }

                Return (TMP2) /* \_SB_.PC00.GFX0._DOD.TMP2 */
            }

            If ((NDID == 0x03))
            {
                Name (TMP3, Package (0x03)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP3 [Zero] = (0x00010000 | DID1)
                TMP3 [One] = (0x00010000 | DID2)
                If ((IPTP == One))
                {
                    TMP3 [0x02] = 0x00023480
                }
                Else
                {
                    TMP3 [0x02] = (0x00010000 | DID3)
                }

                Return (TMP3) /* \_SB_.PC00.GFX0._DOD.TMP3 */
            }

            If ((NDID == 0x04))
            {
                Name (TMP4, Package (0x04)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP4 [Zero] = (0x00010000 | DID1)
                TMP4 [One] = (0x00010000 | DID2)
                TMP4 [0x02] = (0x00010000 | DID3)
                If ((IPTP == One))
                {
                    TMP4 [0x03] = 0x00023480
                }
                Else
                {
                    TMP4 [0x03] = (0x00010000 | DID4)
                }

                Return (TMP4) /* \_SB_.PC00.GFX0._DOD.TMP4 */
            }

            If ((NDID == 0x05))
            {
                Name (TMP5, Package (0x05)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP5 [Zero] = (0x00010000 | DID1)
                TMP5 [One] = (0x00010000 | DID2)
                TMP5 [0x02] = (0x00010000 | DID3)
                TMP5 [0x03] = (0x00010000 | DID4)
                If ((IPTP == One))
                {
                    TMP5 [0x04] = 0x00023480
                }
                Else
                {
                    TMP5 [0x04] = (0x00010000 | DID5)
                }

                Return (TMP5) /* \_SB_.PC00.GFX0._DOD.TMP5 */
            }

            If ((NDID == 0x06))
            {
                Name (TMP6, Package (0x06)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP6 [Zero] = (0x00010000 | DID1)
                TMP6 [One] = (0x00010000 | DID2)
                TMP6 [0x02] = (0x00010000 | DID3)
                TMP6 [0x03] = (0x00010000 | DID4)
                TMP6 [0x04] = (0x00010000 | DID5)
                If ((IPTP == One))
                {
                    TMP6 [0x05] = 0x00023480
                }
                Else
                {
                    TMP6 [0x05] = (0x00010000 | DID6)
                }

                Return (TMP6) /* \_SB_.PC00.GFX0._DOD.TMP6 */
            }

            If ((NDID == 0x07))
            {
                Name (TMP7, Package (0x07)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP7 [Zero] = (0x00010000 | DID1)
                TMP7 [One] = (0x00010000 | DID2)
                TMP7 [0x02] = (0x00010000 | DID3)
                TMP7 [0x03] = (0x00010000 | DID4)
                TMP7 [0x04] = (0x00010000 | DID5)
                TMP7 [0x05] = (0x00010000 | DID6)
                If ((IPTP == One))
                {
                    TMP7 [0x06] = 0x00023480
                }
                Else
                {
                    TMP7 [0x06] = (0x00010000 | DID7)
                }

                Return (TMP7) /* \_SB_.PC00.GFX0._DOD.TMP7 */
            }

            If ((NDID == 0x08))
            {
                Name (TMP8, Package (0x08)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP8 [Zero] = (0x00010000 | DID1)
                TMP8 [One] = (0x00010000 | DID2)
                TMP8 [0x02] = (0x00010000 | DID3)
                TMP8 [0x03] = (0x00010000 | DID4)
                TMP8 [0x04] = (0x00010000 | DID5)
                TMP8 [0x05] = (0x00010000 | DID6)
                TMP8 [0x06] = (0x00010000 | DID7)
                If ((IPTP == One))
                {
                    TMP8 [0x07] = 0x00023480
                }
                Else
                {
                    TMP8 [0x07] = (0x00010000 | DID8)
                }

                Return (TMP8) /* \_SB_.PC00.GFX0._DOD.TMP8 */
            }

            If ((NDID == 0x09))
            {
                Name (TMP9, Package (0x09)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP9 [Zero] = (0x00010000 | DID1)
                TMP9 [One] = (0x00010000 | DID2)
                TMP9 [0x02] = (0x00010000 | DID3)
                TMP9 [0x03] = (0x00010000 | DID4)
                TMP9 [0x04] = (0x00010000 | DID5)
                TMP9 [0x05] = (0x00010000 | DID6)
                TMP9 [0x06] = (0x00010000 | DID7)
                TMP9 [0x07] = (0x00010000 | DID8)
                If ((IPTP == One))
                {
                    TMP9 [0x08] = 0x00023480
                }
                Else
                {
                    TMP9 [0x08] = (0x00010000 | DID9)
                }

                Return (TMP9) /* \_SB_.PC00.GFX0._DOD.TMP9 */
            }

            If ((NDID == 0x0A))
            {
                Name (TMPA, Package (0x0A)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPA [Zero] = (0x00010000 | DID1)
                TMPA [One] = (0x00010000 | DID2)
                TMPA [0x02] = (0x00010000 | DID3)
                TMPA [0x03] = (0x00010000 | DID4)
                TMPA [0x04] = (0x00010000 | DID5)
                TMPA [0x05] = (0x00010000 | DID6)
                TMPA [0x06] = (0x00010000 | DID7)
                TMPA [0x07] = (0x00010000 | DID8)
                TMPA [0x08] = (0x00010000 | DID9)
                If ((IPTP == One))
                {
                    TMPA [0x09] = 0x00023480
                }
                Else
                {
                    TMPA [0x09] = (0x00010000 | DIDA)
                }

                Return (TMPA) /* \_SB_.PC00.GFX0._DOD.TMPA */
            }

            If ((NDID == 0x0B))
            {
                Name (TMPB, Package (0x0B)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPB [Zero] = (0x00010000 | DID1)
                TMPB [One] = (0x00010000 | DID2)
                TMPB [0x02] = (0x00010000 | DID3)
                TMPB [0x03] = (0x00010000 | DID4)
                TMPB [0x04] = (0x00010000 | DID5)
                TMPB [0x05] = (0x00010000 | DID6)
                TMPB [0x06] = (0x00010000 | DID7)
                TMPB [0x07] = (0x00010000 | DID8)
                TMPB [0x08] = (0x00010000 | DID9)
                TMPB [0x09] = (0x00010000 | DIDA)
                If ((IPTP == One))
                {
                    TMPB [0x0A] = 0x00023480
                }
                Else
                {
                    TMPB [0x0A] = (0x00010000 | DIDB)
                }

                Return (TMPB) /* \_SB_.PC00.GFX0._DOD.TMPB */
            }

            If ((NDID == 0x0C))
            {
                Name (TMPC, Package (0x0C)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPC [Zero] = (0x00010000 | DID1)
                TMPC [One] = (0x00010000 | DID2)
                TMPC [0x02] = (0x00010000 | DID3)
                TMPC [0x03] = (0x00010000 | DID4)
                TMPC [0x04] = (0x00010000 | DID5)
                TMPC [0x05] = (0x00010000 | DID6)
                TMPC [0x06] = (0x00010000 | DID7)
                TMPC [0x07] = (0x00010000 | DID8)
                TMPC [0x08] = (0x00010000 | DID9)
                TMPC [0x09] = (0x00010000 | DIDA)
                TMPC [0x0A] = (0x00010000 | DIDB)
                If ((IPTP == One))
                {
                    TMPC [0x0B] = 0x00023480
                }
                Else
                {
                    TMPC [0x0B] = (0x00010000 | DIDC)
                }

                Return (TMPC) /* \_SB_.PC00.GFX0._DOD.TMPC */
            }

            If ((NDID == 0x0D))
            {
                Name (TMPD, Package (0x0D)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPD [Zero] = (0x00010000 | DID1)
                TMPD [One] = (0x00010000 | DID2)
                TMPD [0x02] = (0x00010000 | DID3)
                TMPD [0x03] = (0x00010000 | DID4)
                TMPD [0x04] = (0x00010000 | DID5)
                TMPD [0x05] = (0x00010000 | DID6)
                TMPD [0x06] = (0x00010000 | DID7)
                TMPD [0x07] = (0x00010000 | DID8)
                TMPD [0x08] = (0x00010000 | DID9)
                TMPD [0x09] = (0x00010000 | DIDA)
                TMPD [0x0A] = (0x00010000 | DIDB)
                TMPD [0x0B] = (0x00010000 | DIDC)
                If ((IPTP == One))
                {
                    TMPD [0x0C] = 0x00023480
                }
                Else
                {
                    TMPD [0x0C] = (0x00010000 | DIDD)
                }

                Return (TMPD) /* \_SB_.PC00.GFX0._DOD.TMPD */
            }

            If ((NDID == 0x0E))
            {
                Name (TMPE, Package (0x0E)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPE [Zero] = (0x00010000 | DID1)
                TMPE [One] = (0x00010000 | DID2)
                TMPE [0x02] = (0x00010000 | DID3)
                TMPE [0x03] = (0x00010000 | DID4)
                TMPE [0x04] = (0x00010000 | DID5)
                TMPE [0x05] = (0x00010000 | DID6)
                TMPE [0x06] = (0x00010000 | DID7)
                TMPE [0x07] = (0x00010000 | DID8)
                TMPE [0x08] = (0x00010000 | DID9)
                TMPE [0x09] = (0x00010000 | DIDA)
                TMPE [0x0A] = (0x00010000 | DIDB)
                TMPE [0x0B] = (0x00010000 | DIDC)
                TMPE [0x0C] = (0x00010000 | DIDD)
                If ((IPTP == One))
                {
                    TMPE [0x0D] = 0x00023480
                }
                Else
                {
                    TMPE [0x0D] = (0x00010000 | DIDE)
                }

                Return (TMPE) /* \_SB_.PC00.GFX0._DOD.TMPE */
            }

            If ((NDID == 0x0F))
            {
                Name (TMPF, Package (0x0F)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPF [Zero] = (0x00010000 | DID1)
                TMPF [One] = (0x00010000 | DID2)
                TMPF [0x02] = (0x00010000 | DID3)
                TMPF [0x03] = (0x00010000 | DID4)
                TMPF [0x04] = (0x00010000 | DID5)
                TMPF [0x05] = (0x00010000 | DID6)
                TMPF [0x06] = (0x00010000 | DID7)
                TMPF [0x07] = (0x00010000 | DID8)
                TMPF [0x08] = (0x00010000 | DID9)
                TMPF [0x09] = (0x00010000 | DIDA)
                TMPF [0x0A] = (0x00010000 | DIDB)
                TMPF [0x0B] = (0x00010000 | DIDC)
                TMPF [0x0C] = (0x00010000 | DIDD)
                TMPF [0x0D] = (0x00010000 | DIDE)
                If ((IPTP == One))
                {
                    TMPF [0x0E] = 0x00023480
                }
                Else
                {
                    TMPF [0x0E] = (0x00010000 | DIDF)
                }

                Return (TMPF) /* \_SB_.PC00.GFX0._DOD.TMPF */
            }

            If ((NDID == 0x10))
            {
                Name (TMPG, Package (0x10)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPG [Zero] = (0x00010000 | DID1)
                TMPG [One] = (0x00010000 | DID2)
                TMPG [0x02] = (0x00010000 | DID3)
                TMPG [0x03] = (0x00010000 | DID4)
                TMPG [0x04] = (0x00010000 | DID5)
                TMPG [0x05] = (0x00010000 | DID6)
                TMPG [0x06] = (0x00010000 | DID7)
                TMPG [0x07] = (0x00010000 | DID8)
                TMPG [0x08] = (0x00010000 | DID9)
                TMPG [0x09] = (0x00010000 | DIDA)
                TMPG [0x0A] = (0x00010000 | DIDB)
                TMPG [0x0B] = (0x00010000 | DIDC)
                TMPG [0x0C] = (0x00010000 | DIDD)
                TMPG [0x0D] = (0x00010000 | DIDE)
                TMPG [0x0E] = (0x00010000 | DIDF)
                TMPG [0x0F] = 0x00023480
                Return (TMPG) /* \_SB_.PC00.GFX0._DOD.TMPG */
            }

            Return (Package (0x01)
            {
                0x0400
            })
        }

        Device (DD01)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID1) == 0x0400))
                {
                    EDPV = One
                    NXDX = NXD1 /* External reference */
                    DIDX = DID1 /* External reference */
                    Return (One)
                }

                If ((DID1 == Zero))
                {
                    Return (One)
                }
                Else
                {
                    Return ((0xFFFF & DID1))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Return (CDDS (DID1))
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD1) /* External reference */
                }

                Return (NDDS (DID1))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD02)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID2) == 0x0400))
                {
                    If (((0x0F & DID2) == One))
                    {
                        EDPV = 0x02
                        NXDY = NXD2 /* External reference */
                        DIDY = DID2 /* External reference */
                        Return (0x02)
                    }

                    EDPV = 0x02
                    NXDX = NXD2 /* External reference */
                    DIDX = DID2 /* External reference */
                    Return (0x02)
                }

                If ((DID2 == Zero))
                {
                    Return (0x02)
                }
                Else
                {
                    Return ((0xFFFF & DID2))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((LIDS == Zero))
                {
                    Return (Zero)
                }

                Return (CDDS (DID2))
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD2) /* External reference */
                }

                Return (NDDS (DID2))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD03)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID3) == 0x0400))
                {
                    EDPV = 0x03
                    NXDX = NXD3 /* External reference */
                    DIDX = DID3 /* External reference */
                    Return (0x03)
                }

                If ((DID3 == Zero))
                {
                    Return (0x03)
                }
                Else
                {
                    Return ((0xFFFF & DID3))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID3 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID3))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD3) /* External reference */
                }

                Return (NDDS (DID3))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD04)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID4) == 0x0400))
                {
                    EDPV = 0x04
                    NXDX = NXD4 /* External reference */
                    DIDX = DID4 /* External reference */
                    Return (0x04)
                }

                If ((DID4 == Zero))
                {
                    Return (0x04)
                }
                Else
                {
                    Return ((0xFFFF & DID4))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID4 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID4))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD4) /* External reference */
                }

                Return (NDDS (DID4))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD05)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID5) == 0x0400))
                {
                    EDPV = 0x05
                    NXDX = NXD5 /* External reference */
                    DIDX = DID5 /* External reference */
                    Return (0x05)
                }

                If ((DID5 == Zero))
                {
                    Return (0x05)
                }
                Else
                {
                    Return ((0xFFFF & DID5))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID5 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID5))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD5) /* External reference */
                }

                Return (NDDS (DID5))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD06)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID6) == 0x0400))
                {
                    EDPV = 0x06
                    NXDX = NXD6 /* External reference */
                    DIDX = DID6 /* External reference */
                    Return (0x06)
                }

                If ((DID6 == Zero))
                {
                    Return (0x06)
                }
                Else
                {
                    Return ((0xFFFF & DID6))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID6 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID6))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD6) /* External reference */
                }

                Return (NDDS (DID6))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD07)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID7) == 0x0400))
                {
                    EDPV = 0x07
                    NXDX = NXD7 /* External reference */
                    DIDX = DID7 /* External reference */
                    Return (0x07)
                }

                If ((DID7 == Zero))
                {
                    Return (0x07)
                }
                Else
                {
                    Return ((0xFFFF & DID7))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID7 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID7))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD7) /* External reference */
                }

                Return (NDDS (DID7))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD08)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID8) == 0x0400))
                {
                    EDPV = 0x08
                    NXDX = NXD8 /* External reference */
                    DIDX = DID8 /* External reference */
                    Return (0x08)
                }

                If ((DID8 == Zero))
                {
                    Return (0x08)
                }
                Else
                {
                    Return ((0xFFFF & DID8))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID8 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID8))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DID8))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD09)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID9) == 0x0400))
                {
                    EDPV = 0x09
                    NXDX = NXD8 /* External reference */
                    DIDX = DID9 /* External reference */
                    Return (0x09)
                }

                If ((DID9 == Zero))
                {
                    Return (0x09)
                }
                Else
                {
                    Return ((0xFFFF & DID9))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID9 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID9))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DID9))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0A)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDA) == 0x0400))
                {
                    EDPV = 0x0A
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDA /* External reference */
                    Return (0x0A)
                }

                If ((DIDA == Zero))
                {
                    Return (0x0A)
                }
                Else
                {
                    Return ((0xFFFF & DIDA))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDA == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DIDA))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDA))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0B)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDB) == 0x0400))
                {
                    EDPV = 0x0B
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDB /* External reference */
                    Return (0x0B)
                }

                If ((DIDB == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return ((0xFFFF & DIDB))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDB == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DIDB))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDB))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0C)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDC) == 0x0400))
                {
                    EDPV = 0x0C
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDC /* External reference */
                    Return (0x0C)
                }

                If ((DIDC == Zero))
                {
                    Return (0x0C)
                }
                Else
                {
                    Return ((0xFFFF & DIDC))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDC == Zero))
                {
                    Return (0x0C)
                }
                Else
                {
                    Return (CDDS (DIDC))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDC))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0D)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDD) == 0x0400))
                {
                    EDPV = 0x0D
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDD /* External reference */
                    Return (0x0D)
                }

                If ((DIDD == Zero))
                {
                    Return (0x0D)
                }
                Else
                {
                    Return ((0xFFFF & DIDD))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDD == Zero))
                {
                    Return (0x0D)
                }
                Else
                {
                    Return (CDDS (DIDD))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDD))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0E)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDE) == 0x0400))
                {
                    EDPV = 0x0E
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDE /* External reference */
                    Return (0x0E)
                }

                If ((DIDE == Zero))
                {
                    Return (0x0E)
                }
                Else
                {
                    Return ((0xFFFF & DIDE))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDE == Zero))
                {
                    Return (0x0E)
                }
                Else
                {
                    Return (CDDS (DIDE))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDE))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDF) == 0x0400))
                {
                    EDPV = 0x0F
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDF /* External reference */
                    Return (0x0F)
                }

                If ((DIDF == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return ((0xFFFF & DIDF))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDC == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (CDDS (DIDF))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDF))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD1F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If ((EDPV == Zero))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return ((0xFFFF & DIDX))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((EDPV == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (CDDS (DIDX))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXDX) /* External reference */
                }

                Return (NDDS (DIDX))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }

            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                If ((OSYS >= 0x07DC))
                {
                    Return (Package (0x67)
                    {
                        0x64, 
                        0x64, 
                        Zero, 
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10, 
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18, 
                        0x19, 
                        0x1A, 
                        0x1B, 
                        0x1C, 
                        0x1D, 
                        0x1E, 
                        0x1F, 
                        0x20, 
                        0x21, 
                        0x22, 
                        0x23, 
                        0x24, 
                        0x25, 
                        0x26, 
                        0x27, 
                        0x28, 
                        0x29, 
                        0x2A, 
                        0x2B, 
                        0x2C, 
                        0x2D, 
                        0x2E, 
                        0x2F, 
                        0x30, 
                        0x31, 
                        0x32, 
                        0x33, 
                        0x34, 
                        0x35, 
                        0x36, 
                        0x37, 
                        0x38, 
                        0x39, 
                        0x3A, 
                        0x3B, 
                        0x3C, 
                        0x3D, 
                        0x3E, 
                        0x3F, 
                        0x40, 
                        0x41, 
                        0x42, 
                        0x43, 
                        0x44, 
                        0x45, 
                        0x46, 
                        0x47, 
                        0x48, 
                        0x49, 
                        0x4A, 
                        0x4B, 
                        0x4C, 
                        0x4D, 
                        0x4E, 
                        0x4F, 
                        0x50, 
                        0x51, 
                        0x52, 
                        0x53, 
                        0x54, 
                        0x55, 
                        0x56, 
                        0x57, 
                        0x58, 
                        0x59, 
                        0x5A, 
                        0x5B, 
                        0x5C, 
                        0x5D, 
                        0x5E, 
                        0x5F, 
                        0x60, 
                        0x61, 
                        0x62, 
                        0x63, 
                        0x64
                    })
                }

                Return (\_SB.PC00.LPCB.EC.BRTW) /* External reference */
            }

            Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
            {
                If ((OSYS >= 0x07DC))
                {
                    If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                    {
                        Local0 = ((Arg0 * 0xFF) / 0x64)
                        \_SB.PC00.GFX0.AINT (One, Local0)
                        BRTL = Arg0
                    }
                }
                Else
                {
                    Local0 = Match (\_SB.PC00.LPCB.EC.BRTW, MEQ, Arg0, MTR, Zero, 0x02)
                    If ((Local0 != Ones))
                    {
                        Local1 = (Local0 - 0x02)
                        \BRLV = Local1
                        \_SB.PC00.LPCB.EC.BRNS ()
                    }
                }
            }

            Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
            {
                If ((OSYS >= 0x07DC))
                {
                    Return (BRTL) /* External reference */
                }
                Else
                {
                    Local0 = \BRLV /* External reference */
                    Local1 = (Local0 + 0x02)
                    If ((Local1 <= 0x11))
                    {
                        Return (DerefOf (\_SB.PC00.LPCB.EC.BRTW [Local1]))
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If (CondRefOf (\PLD1))
                {
                    Return (PLD1 ())
                }
                Else
                {
                    Return (DPLD) /* \_SB_.PC00.GFX0.DPLD */
                }
            }
        }

        Device (DD2F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If ((EDPV == Zero))
                {
                    Return (0x1F)
                }

                If ((EDPV == One))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return ((0xFFFF & DIDY))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((EDPV == Zero))
                {
                    Return (Zero)
                }

                If ((EDPV == One))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (CDDS (DIDY))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXDY) /* External reference */
                }

                Return (NDDS (DIDY))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }

            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                If ((OSYS >= 0x07DC))
                {
                    Return (Package (0x67)
                    {
                        0x64, 
                        0x64, 
                        Zero, 
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10, 
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18, 
                        0x19, 
                        0x1A, 
                        0x1B, 
                        0x1C, 
                        0x1D, 
                        0x1E, 
                        0x1F, 
                        0x20, 
                        0x21, 
                        0x22, 
                        0x23, 
                        0x24, 
                        0x25, 
                        0x26, 
                        0x27, 
                        0x28, 
                        0x29, 
                        0x2A, 
                        0x2B, 
                        0x2C, 
                        0x2D, 
                        0x2E, 
                        0x2F, 
                        0x30, 
                        0x31, 
                        0x32, 
                        0x33, 
                        0x34, 
                        0x35, 
                        0x36, 
                        0x37, 
                        0x38, 
                        0x39, 
                        0x3A, 
                        0x3B, 
                        0x3C, 
                        0x3D, 
                        0x3E, 
                        0x3F, 
                        0x40, 
                        0x41, 
                        0x42, 
                        0x43, 
                        0x44, 
                        0x45, 
                        0x46, 
                        0x47, 
                        0x48, 
                        0x49, 
                        0x4A, 
                        0x4B, 
                        0x4C, 
                        0x4D, 
                        0x4E, 
                        0x4F, 
                        0x50, 
                        0x51, 
                        0x52, 
                        0x53, 
                        0x54, 
                        0x55, 
                        0x56, 
                        0x57, 
                        0x58, 
                        0x59, 
                        0x5A, 
                        0x5B, 
                        0x5C, 
                        0x5D, 
                        0x5E, 
                        0x5F, 
                        0x60, 
                        0x61, 
                        0x62, 
                        0x63, 
                        0x64
                    })
                }

                Return (\_SB.PC00.LPCB.EC.BRTW) /* External reference */
            }

            Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
            {
                If ((OSYS >= 0x07DC))
                {
                    If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                    {
                        Local0 = ((Arg0 * 0xFF) / 0x64)
                        \_SB.PC00.GFX0.AINT (One, Local0)
                        BRTL = Arg0
                    }
                }
                Else
                {
                    Local0 = Match (\_SB.PC00.LPCB.EC.BRTW, MEQ, Arg0, MTR, Zero, 0x02)
                    If ((Local0 != Ones))
                    {
                        Local1 = (Local0 - 0x02)
                        \BRLV = Local1
                        \_SB.PC00.LPCB.EC.BRNS ()
                    }
                }
            }

            Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
            {
                If ((OSYS >= 0x07DC))
                {
                    Return (BRTL) /* External reference */
                }
                Else
                {
                    Local0 = \BRLV /* External reference */
                    Local1 = (Local0 + 0x02)
                    If ((Local1 <= 0x11))
                    {
                        Return (DerefOf (\_SB.PC00.LPCB.EC.BRTW [Local1]))
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If (CondRefOf (\PLD2))
                {
                    Return (PLD2 ())
                }
                Else
                {
                    Return (DPLD) /* \_SB_.PC00.GFX0.DPLD */
                }
            }
        }

        Method (SDDL, 1, NotSerialized)
        {
            NDID++
            Local0 = (Arg0 & 0x0F0F)
            Local1 = (0x80000000 | Local0)
            If ((DIDL == Local0))
            {
                Return (Local1)
            }

            If ((DDL2 == Local0))
            {
                Return (Local1)
            }

            If ((DDL3 == Local0))
            {
                Return (Local1)
            }

            If ((DDL4 == Local0))
            {
                Return (Local1)
            }

            If ((DDL5 == Local0))
            {
                Return (Local1)
            }

            If ((DDL6 == Local0))
            {
                Return (Local1)
            }

            If ((DDL7 == Local0))
            {
                Return (Local1)
            }

            If ((DDL8 == Local0))
            {
                Return (Local1)
            }

            If ((DDL9 == Local0))
            {
                Return (Local1)
            }

            If ((DD10 == Local0))
            {
                Return (Local1)
            }

            If ((DD11 == Local0))
            {
                Return (Local1)
            }

            If ((DD12 == Local0))
            {
                Return (Local1)
            }

            If ((DD13 == Local0))
            {
                Return (Local1)
            }

            If ((DD14 == Local0))
            {
                Return (Local1)
            }

            If ((DD15 == Local0))
            {
                Return (Local1)
            }

            Return (Zero)
        }

        Method (CDDS, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0x0F0F)
            If ((Zero == Local0))
            {
                Return (0x1D)
            }

            If ((CADL == Local0))
            {
                Return (0x1F)
            }

            If ((CAL2 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL3 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL4 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL5 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL6 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL7 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL8 == Local0))
            {
                Return (0x1F)
            }

            Return (0x1D)
        }

        Method (NDDS, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0x0F0F)
            If ((Zero == Local0))
            {
                Return (Zero)
            }

            If ((NADL == Local0))
            {
                Return (One)
            }

            If ((NDL2 == Local0))
            {
                Return (One)
            }

            If ((NDL3 == Local0))
            {
                Return (One)
            }

            If ((NDL4 == Local0))
            {
                Return (One)
            }

            If ((NDL5 == Local0))
            {
                Return (One)
            }

            If ((NDL6 == Local0))
            {
                Return (One)
            }

            If ((NDL7 == Local0))
            {
                Return (One)
            }

            If ((NDL8 == Local0))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (DSST, 1, NotSerialized)
        {
            If (((Arg0 & 0xC0000000) == 0xC0000000))
            {
                CSTE = NSTE /* External reference */
            }
        }

        Method (VLOC, 1, NotSerialized)
        {
            If ((Arg0 == \_SB.LID._LID ()))
            {
                CLID = Arg0
                GNOT (0x02, Zero)
            }
        }

        Scope (\_SB.PC00.MC)
        {
            OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
            Field (MCHP, AnyAcc, NoLock, Preserve)
            {
                Offset (0x14), 
                AUDE,   8, 
                Offset (0x60), 
                TASM,   10, 
                Offset (0x62)
            }
        }

        OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
        Field (IGDP, AnyAcc, NoLock, Preserve)
        {
            Offset (0x10), 
                ,   1, 
            GIVD,   1, 
                ,   2, 
            GUMA,   3, 
            Offset (0x12), 
            Offset (0x14), 
                ,   4, 
            GMFN,   1, 
            Offset (0x18), 
            Offset (0xA4), 
            ASLE,   8, 
            Offset (0xA8), 
            GSSE,   1, 
            GSSB,   14, 
            GSES,   1, 
            Offset (0xB0), 
                ,   12, 
            CDVL,   1, 
            Offset (0xB2), 
            Offset (0xB5), 
            LBPC,   8, 
            Offset (0xBC), 
            ASLS,   32
        }

        OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
        Field (IGDM, AnyAcc, NoLock, Preserve)
        {
            SIGN,   128, 
            SIZE,   32, 
            OVER,   32, 
            SVER,   256, 
            VVER,   128, 
            GVER,   128, 
            MBOX,   32, 
            DMOD,   32, 
            PCON,   32, 
            DVER,   64, 
            Offset (0x100), 
            DRDY,   32, 
            CSTS,   32, 
            CEVT,   32, 
            Offset (0x120), 
            DIDL,   32, 
            DDL2,   32, 
            DDL3,   32, 
            DDL4,   32, 
            DDL5,   32, 
            DDL6,   32, 
            DDL7,   32, 
            DDL8,   32, 
            CPDL,   32, 
            CPL2,   32, 
            CPL3,   32, 
            CPL4,   32, 
            CPL5,   32, 
            CPL6,   32, 
            CPL7,   32, 
            CPL8,   32, 
            CADL,   32, 
            CAL2,   32, 
            CAL3,   32, 
            CAL4,   32, 
            CAL5,   32, 
            CAL6,   32, 
            CAL7,   32, 
            CAL8,   32, 
            NADL,   32, 
            NDL2,   32, 
            NDL3,   32, 
            NDL4,   32, 
            NDL5,   32, 
            NDL6,   32, 
            NDL7,   32, 
            NDL8,   32, 
            ASLP,   32, 
            TIDX,   32, 
            CHPD,   32, 
            CLID,   32, 
            CDCK,   32, 
            SXSW,   32, 
            EVTS,   32, 
            CNOT,   32, 
            NRDY,   32, 
            DDL9,   32, 
            DD10,   32, 
            DD11,   32, 
            DD12,   32, 
            DD13,   32, 
            DD14,   32, 
            DD15,   32, 
            CPL9,   32, 
            CP10,   32, 
            CP11,   32, 
            CP12,   32, 
            CP13,   32, 
            CP14,   32, 
            CP15,   32, 
            Offset (0x200), 
            SCIE,   1, 
            GEFC,   4, 
            GXFC,   3, 
            GESF,   8, 
            Offset (0x204), 
            PARM,   32, 
            DSLP,   32, 
            Offset (0x300), 
            ARDY,   32, 
            ASLC,   32, 
            TCHE,   32, 
            ALSI,   32, 
            BCLP,   32, 
            PFIT,   32, 
            CBLV,   32, 
            BCLM,   320, 
            CPFM,   32, 
            EPFM,   32, 
            PLUT,   592, 
            PFMB,   32, 
            CCDV,   32, 
            PCFT,   32, 
            SROT,   32, 
            IUER,   32, 
            FDSS,   64, 
            FDSP,   32, 
            STAT,   32, 
            RVDA,   64, 
            RVDS,   32, 
            Offset (0x400), 
            RVBT,   49152, 
            PHED,   32, 
            BDDC,   2048
        }

        Name (DBTB, Package (0x15)
        {
            Zero, 
            0x07, 
            0x38, 
            0x01C0, 
            0x0E00, 
            0x3F, 
            0x01C7, 
            0x0E07, 
            0x01F8, 
            0x0E38, 
            0x0FC0, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            0x7000, 
            0x7007, 
            0x7038, 
            0x71C0, 
            0x7E00
        })
        Name (CDCT, Package (0x05)
        {
            Package (0x02)
            {
                0xE4, 
                0x0140
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }, 

            Package (0x02)
            {
                Zero, 
                Zero
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }
        })
        Name (SUCC, One)
        Name (NVLD, 0x02)
        Name (CRIT, 0x04)
        Name (NCRT, 0x06)
        Method (GSCI, 0, Serialized)
        {
            Method (GBDA, 0, Serialized)
            {
                If ((GESF == Zero))
                {
                    PARM = 0x0659
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == One))
                {
                    PARM = 0x00300482
                    If ((S0ID == One))
                    {
                        PARM |= 0x0100
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x04))
                {
                    PARM &= 0xEFFF0000
                    PARM &= (DerefOf (DBTB [IBTT]) << 0x10)
                    PARM |= IBTT /* \_SB_.PC00.GFX0.PARM */
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x05))
                {
                    PARM = IPSC /* External reference */
                    PARM |= (IPAT << 0x08)
                    PARM += 0x0100
                    PARM |= (LIDS << 0x10)
                    PARM += 0x00010000
                    PARM |= (IBIA << 0x14)
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x07))
                {
                    PARM = GIVD /* \_SB_.PC00.GFX0.GIVD */
                    PARM ^= One
                    PARM |= (GMFN << One)
                    PARM |= 0x1800
                    PARM |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                        0x15) /* \_SB_.PC00.GFX0.PARM */
                    GESF = One
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x0A))
                {
                    PARM = Zero
                    If (ISSC)
                    {
                        PARM |= 0x03
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x0B))
                {
                    PARM = KSV0 /* External reference */
                    GESF = KSV1 /* External reference */
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                GESF = Zero
                Return (CRIT) /* \_SB_.PC00.GFX0.CRIT */
            }

            Method (SBCB, 0, Serialized)
            {
                If ((GESF == Zero))
                {
                    PARM = Zero
                    PARM = 0x000F87DD
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == One))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x03))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x04))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x05))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x07))
                {
                    If (((S0ID == One) && (OSYS < 0x07DF)))
                    {
                        If (((PARM & 0xFF) == One))
                        {
                            \GUAM (One)
                        }

                        If (((PARM & 0xFF) == Zero))
                        {
                            \GUAM (Zero)
                        }
                    }

                    If ((PARM == Zero))
                    {
                        Local0 = CLID /* \_SB_.PC00.GFX0.CLID */
                        If ((0x80000000 & Local0))
                        {
                            CLID &= 0x0F
                            GLID (CLID)
                        }
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x08))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x09))
                {
                    IBTT = (PARM & 0xFF)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x0A))
                {
                    IPSC = (PARM & 0xFF)
                    If (((PARM >> 0x08) & 0xFF))
                    {
                        IPAT = ((PARM >> 0x08) & 0xFF)
                        IPAT--
                    }

                    IBIA = ((PARM >> 0x14) & 0x07)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x0B))
                {
                    IF1E = ((PARM >> One) & One)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x10))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x11))
                {
                    PARM = (LIDS << 0x08)
                    PARM += 0x0100
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x12))
                {
                    If ((PARM & One))
                    {
                        If (((PARM >> One) == One))
                        {
                            ISSC = One
                        }
                        Else
                        {
                            GESF = Zero
                            Return (CRIT) /* \_SB_.PC00.GFX0.CRIT */
                        }
                    }
                    Else
                    {
                        ISSC = Zero
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x13))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x14))
                {
                    PAVP = (PARM & 0x0F)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                GESF = Zero
                Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
            }

            If ((GEFC == 0x04))
            {
                GXFC = GBDA ()
            }

            If ((GEFC == 0x06))
            {
                GXFC = SBCB ()
            }

            GEFC = Zero
            CPSC = One
            GSSE = Zero
            SCIE = Zero
            Return (Zero)
        }

        Method (PDRD, 0, NotSerialized)
        {
            Return (!DRDY)
        }

        Method (PSTS, 0, NotSerialized)
        {
            If ((CSTS > 0x02))
            {
                Sleep (ASLP)
            }

            Return ((CSTS == 0x03))
        }

        Method (GNOT, 2, NotSerialized)
        {
            If (PDRD ())
            {
                Return (One)
            }

            CEVT = Arg0
            CSTS = 0x03
            If (((CHPD == Zero) && (Arg1 == Zero)))
            {
                Notify (\_SB.PC00.GFX0, Arg1)
            }

            If (CondRefOf (HNOT))
            {
                HNOT (Arg0)
            }
            Else
            {
                Notify (\_SB.PC00.GFX0, 0x80) // Status Change
            }

            Return (Zero)
        }

        Method (GHDS, 1, NotSerialized)
        {
            TIDX = Arg0
            Return (GNOT (One, Zero))
        }

        Method (GLID, 1, NotSerialized)
        {
            If ((Arg0 == One))
            {
                CLID = 0x03
            }
            Else
            {
                CLID = Arg0
            }

            If (GNOT (0x02, Zero))
            {
                CLID |= 0x80000000
                Return (One)
            }

            Return (Zero)
        }

        Method (GDCK, 1, NotSerialized)
        {
            CDCK = Arg0
            Return (GNOT (0x04, Zero))
        }

        Method (PARD, 0, NotSerialized)
        {
            If (!ARDY)
            {
                Sleep (ASLP)
            }

            Return (!ARDY)
        }

        Method (IUEH, 1, Serialized)
        {
            IUER &= 0xC0
            IUER ^= (One << Arg0)
            If ((Arg0 <= 0x04))
            {
                Return (AINT (0x05, Zero))
            }
            Else
            {
                Return (AINT (Arg0, Zero))
            }
        }

        Method (AINT, 2, NotSerialized)
        {
            If (!(TCHE & (One << Arg0)))
            {
                Return (One)
            }

            If (PARD ())
            {
                Return (One)
            }

            If (((Arg0 >= 0x05) && (Arg0 <= 0x07)))
            {
                ASLC = (One << Arg0)
                ASLE = One
                Local2 = Zero
                While (((Local2 < 0xFA) && (ASLC != Zero)))
                {
                    Sleep (0x04)
                    Local2++
                }

                Return (Zero)
            }

            If ((Arg0 == 0x02))
            {
                If (CPFM)
                {
                    Local0 = (CPFM & 0x0F)
                    Local1 = (EPFM & 0x0F)
                    If ((Local0 == One))
                    {
                        If ((Local1 & 0x06))
                        {
                            PFIT = 0x06
                        }
                        ElseIf ((Local1 & 0x08))
                        {
                            PFIT = 0x08
                        }
                        Else
                        {
                            PFIT = One
                        }
                    }

                    If ((Local0 == 0x06))
                    {
                        If ((Local1 & 0x08))
                        {
                            PFIT = 0x08
                        }
                        ElseIf ((Local1 & One))
                        {
                            PFIT = One
                        }
                        Else
                        {
                            PFIT = 0x06
                        }
                    }

                    If ((Local0 == 0x08))
                    {
                        If ((Local1 & One))
                        {
                            PFIT = One
                        }
                        ElseIf ((Local1 & 0x06))
                        {
                            PFIT = 0x06
                        }
                        Else
                        {
                            PFIT = 0x08
                        }
                    }
                }
                Else
                {
                    PFIT ^= 0x07
                }

                PFIT |= 0x80000000
                ASLC = 0x04
            }
            ElseIf ((Arg0 == One))
            {
                BCLP = Arg1
                BCLP |= 0x80000000
                ASLC = 0x02
            }
            ElseIf ((Arg0 == Zero))
            {
                ALSI = Arg1
                ASLC = One
            }
            Else
            {
                Return (One)
            }

            ASLE = One
            Return (Zero)
        }

        Method (IPCO, 0, NotSerialized)
        {
            If (CondRefOf (PCON))
            {
                If (((PCON & 0x0180) == 0x0180))
                {
                    Return (One)
                }
                Else
                {
                }
            }
            Else
            {
            }

            Return (Zero)
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3e5b41c6-eb1d-4260-9d15-c71fbadae414") /* Unknown UUID */))
            {
                If (((Arg2 == 0x12) || (Arg2 == 0x13)))
                {
                    CreateDWordField (Arg3, Zero, DDIN)
                    CreateDWordField (Arg3, 0x04, BUF1)
                    Name (OPTS, Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    CreateByteField (OPTS, Zero, CMST)
                    CreateByteField (OPTS, One, RTB1)
                    Name (GEDB, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    CreateDWordField (GEDB, Zero, GEDF)
                    CreateByteField (GEDB, 0x04, GESF)
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "iGfx Supported Functions Bitmap "
                            Return (0x002DE7FF)
                        }
                    }
                    Case (One)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = " Adapter Power State Notification "
                            If (((S0ID == One) && (OSYS < 0x07DF)))
                            {
                                If (((DerefOf (Arg3 [Zero]) & 0xFF) == One))
                                {
                                    \GUAM (One)
                                }

                                Local0 = (DerefOf (Arg3 [One]) & 0xFF)
                                If ((Local0 == Zero))
                                {
                                    \GUAM (Zero)
                                }
                            }

                            If ((DerefOf (Arg3 [Zero]) == Zero))
                            {
                                Local0 = CLID /* \_SB_.PC00.GFX0.CLID */
                                If ((0x80000000 & Local0))
                                {
                                    CLID &= 0x0F
                                    GLID (CLID)
                                }
                            }

                            Return (One)
                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Display Power State Notification "
                            Return (One)
                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "BIOS POST Completion Notification "
                            Return (One)
                        }
                    }
                    Case (0x04)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Pre-Hires Set Mode "
                            Return (One)
                        }
                    }
                    Case (0x05)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Post-Hires Set Mode "
                            Return (One)
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetDisplayDeviceNotification"
                            Return (One)
                        }
                    }
                    Case (0x07)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetBootDevicePreference "
                            IBTT = (DerefOf (Arg3 [Zero]) & 0xFF)
                            Return (One)
                        }
                    }
                    Case (0x08)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetPanelPreference "
                            IPSC = (DerefOf (Arg3 [Zero]) & 0xFF)
                            If ((DerefOf (Arg3 [One]) & 0xFF))
                            {
                                IPAT = (DerefOf (Arg3 [One]) & 0xFF)
                                IPAT--
                            }

                            IBIA = ((DerefOf (Arg3 [0x02]) >> 0x04) & 0x07)
                            Return (One)
                        }
                    }
                    Case (0x09)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "FullScreenDOS "
                            Return (One)
                        }
                    }
                    Case (0x0A)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "APM Complete "
                            Local0 = (LIDS << 0x08)
                            Local0 += 0x0100
                            Return (Local0)
                        }
                    }
                    Case (0x0D)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetBootDisplayPreference "
                            Local0 = ((DerefOf (Arg3 [0x03]) << 0x18) | (DerefOf (
                                Arg3 [0x02]) << 0x10))
                            Local0 &= 0xEFFF0000
                            Local0 &= (DerefOf (DBTB [IBTT]) << 0x10)
                            Local0 |= IBTT
                            Return (Local0)
                        }
                    }
                    Case (0x0E)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetPanelDetails "
                            Local0 = IPSC /* External reference */
                            Local0 |= (IPAT << 0x08)
                            Local0 += 0x0100
                            Local0 |= (LIDS << 0x10)
                            Local0 += 0x00010000
                            Local0 |= (IBIA << 0x14)
                            Return (Local0)
                        }
                    }
                    Case (0x10)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetAKSV "
                            Name (KSVP, Package (0x02)
                            {
                                0x80000000, 
                                0x8000
                            })
                            KSVP [Zero] = KSV0 /* External reference */
                            KSVP [One] = KSV1 /* External reference */
                            Return (KSVP) /* \_SB_.PC00.GFX0._DSM.KSVP */
                        }
                    }
                    Case (0x12)
                    {
                        OPTS = \_SB.PC00.IMMC (0x03, 0x03E8, DDIN, Zero, Zero)
                        GESF = CMST /* \_SB_.PC00.GFX0._DSM.CMST */
                        GEDF = RTB1 /* \_SB_.PC00.GFX0._DSM.RTB1 */
                        Return (GEDB) /* \_SB_.PC00.GFX0._DSM.GEDB */
                    }
                    Case (0x13)
                    {
                        OPTS = \_SB.PC00.IMMC (0x06, 0x03E8, DDIN, Zero, BUF1)
                        GESF = CMST /* \_SB_.PC00.GFX0._DSM.CMST */
                        GEDF = RTB1 /* \_SB_.PC00.GFX0._DSM.RTB1 */
                        Return (GEDB) /* \_SB_.PC00.GFX0._DSM.GEDB */
                    }
                    Case (0x15)
                    {
                        Name (DGDB, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                        })
                        CreateDWordField (DGDB, Zero, DGDF)
                        CreateByteField (DGDB, 0x04, DGSF)
                        Local0 = One
                        If (((DerefOf (Arg3 [Zero]) & One) == Zero))
                        {
                            \_SB.GGOV (EDMX)
                            Local0 = Zero
                        }
                        ElseIf (((DerefOf (Arg3 [Zero]) & 0x02) == Zero))
                        {
                            \_SB.SGOV (EDMX, Zero)
                            Local0 = Zero
                        }
                        Else
                        {
                            \_SB.SGOV (EDMX, One)
                            Local0 = Zero
                        }

                        DGDF = (\_SB.GGOV (EDMX) << One)
                        DGSF = Local0
                        Return (DGDB) /* \_SB_.PC00.GFX0._DSM.DGDB */
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (0x03)
        }

        Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
        {
            Return (0x03)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
        }
    }
}



TPM2
----
[000h 0000   4]                    Signature : "TPM2"    [Trusted Platform Module hardware interface table]
[004h 0004   4]                 Table Length : 0000004C
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : E7
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   2]               Platform Class : 0000
[026h 0038   2]                     Reserved : 0000
[028h 0040   8]              Control Address : 0000000000000000
[030h 0048   4]                 Start Method : 06 [Memory Mapped I/O]

[034h 0052  12]            Method Parameters : 00 00 00 00 00 00 00 00 00 00 00 00
[040h 0064   4]           Minimum Log Length : 00010000
[044h 0068   8]                  Log Address : 00000000936B6000

Raw Table Data: Length 76 (0x4C)

    0000: 54 50 4D 32 4C 00 00 00 04 E7 4C 45 4E 4F 56 4F  // TPM2L.....LENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 01 00 00 60 6B 93 00 00 00 00              // .....`k.....


UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000076
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 1D
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036  16]              UUID Identifier : 0D9FB197-CEFC-4E91-ACB1-2535D9E5A844
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 118 (0x76)

    0000: 55 45 46 49 76 00 00 00 01 1D 4C 45 4E 4F 56 4F  // UEFIv.....LENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 97 B1 9F 0D FC CE 91 4E AC B1 25 35  // ...........N..%5
    0030: D9 E5 A8 44 36 00 03 00 00 00 00 00 00 00 D1 00  // ...D6...........
    0040: 00 00 E9 00 00 00 03 25 05 FF F9 1A EB 4A 83 C4  // .......%.....J..
    0050: C2 D4 CE B1 0C A3 16 29 EA 81 A0 F9 15 41 83 85  // .......).....A..
    0060: 1A 86 4E 2F 30 9C 58 DC AF D8 22 6E F8 42 99 66  // ..N/0.X..."n.B.f
    0070: 36 FF 78 8C 9C AF                                // 6.x...


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 44
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-N3M  "
[018h 0024   4]                 Oem Revision : 00001150
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]             Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 44 4C 45 4E 4F 56 4F  // WSMT(....DLENOVO
    0010: 54 50 2D 4E 33 4D 20 20 50 11 00 00 50 54 45 43  // TP-N3M  P...PTEC
    0020: 02 00 00 00 07 00 00 00                          // ........


