
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20221020
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x0000078E  0x02  "AMDRUS"  "EDK2    "  0x00000002  "ACPI"   0x00040000
 02)  MCFG  0x0000003C  0x01  "AMDYDE"  "EDK2    "  0x00000002  "ACPI"   0x00040000
 03)  ASF!  0x000000A5  0x20  "AMDYDE"  "EDK2    "  0x00000002  "ACPI"   0x00040000
 04)  APIC  0x00000138  0x03  "AMDYDE"  "EDK2    "  0x00000002  "ACPI"   0x00040000
 05)  CRAT  0x000007E8  0x01  "AMD   "  "EDK2    "  0x00000001  "ACPI"   0x00040000
 06)  SLIC  0x00000176  0x01  "AMDYDE"  "EDK2    "  0x00000002  "ACPI"   0x00040000
 07)  SSDT  0x0000046D  0x01  "AMDyde"  "EDK2    "  0x00001000  "ACPI"   0x00040000
 08)  TPM2  0x0000004C  0x04  "AMD   "  "EDK2    "  0x00000002  "ACPI"   0x00040000
 09)  VFCT  0x0000A684  0x01  "AMDYDE"  "EDK2    "  0x00000001  "ACPI"   0x00040000
 10)  BOOT  0x00000028  0x01  "AMDYDE"  "EDK2    "  0x00000002  "ACPI"   0x00040000
 11)  SSDT  0x000014AD  0x01  "AMD   "  "EDK2    "  0x00000001  "ACPI"   0x00040000
 12)  CDIT  0x00000029  0x01  "AMD   "  "EDK2    "  0x00000001  "ACPI"   0x00040000
 13)  UEFI  0x00000236  0x01  "AMDYDE"  "EDK2    "  0x00000001  "ACPI"   0x00040000
 14)  IVRS  0x000001A4  0x02  "AMD   "  "EDK2    "  0x00000001  "ACPI"   0x00040000
 15)  DSDT  0x00007DCB  0x01  "AMDYDE"  "EDK2    "  0x00000002  "ACPI"   0x00040000
 16)  SSDT  0x00000503  0x01  "AMD   "  "EDK2    "  0x00000001  "ACPI"   0x00040000
 17)  WSMT  0x00000028  0x01  "AMDYDE"  "EDK2    "  0x00000001  "ACPI"   0x00040000
 18)  SSDT  0x00000AE8  0x01  "AMD   "  "EDK2    "  0x00000001  "ACPI"   0x00040000
 19)  WDRT  0x00000047  0x01  "AMD   "  "EDK2    "  0x00000002  "ACPI"   0x00040000
 20)  SSDT  0x000000F8  0x01  "AMD   "  "EDK2    "  0x00001000  "ACPI"   0x00040000
 21)  WDAT  0x0000017C  0x01  "AMDYDE"  "EDK2    "  0x00000002  "ACPI"   0x00040000
 22)  SSDT  0x000051CF  0x01  "AMD   "  "EDK2    "  0x00000001  "ACPI"   0x00040000
 23)  SSDT  0x00000099  0x01  "AMDyde"  "EDK2    "  0x00000002  "ACPI"   0x00040000
 24)  FACP  0x0000010C  0x05  "AMDYDE"  "EDK2    "  0x00000002  "ACPI"   0x00040000
 25)  FPDT  0x00000044  0x01  "AMD   "  "EDK2    "  0x00000002  "ACPI"   0x00040000
 26)  SSDT  0x00007237  0x02  "AMD   "  "EDK2    "  0x00000002  "ACPI"   0x00040000
 27)  SSDT  0x00001436  0x01  "AMD   "  "EDK2    "  0x00000001  "ACPI"   0x00040000
 28)  HPET  0x00000038  0x01  "AMDYDE"  "EDK2    "  0x00000002  "ACPI"   0x00040000
 29)  SSDT  0x00001D0C  0x02  "AMD   "  "EDK2    "  0x00000001  "ACPI"   0x00040000
 30)  FACS  0x00000040  0x02
 31)  BGRT  0x00000038  0x01  "AMDYDE"  "EDK2    "  0x00000001  "ACPI"   0x00040000
 32)  SSDT  0x0000008D  0x01  "AMD   "  "EDK2    "  0x00000001  "ACPI"   0x00040000

Found 32 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 00000138
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 9B
[00Ah 0010 006h]                      Oem ID : "AMDYDE"
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 00
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 01
[037h 0055 001h]               Local Apic ID : 01
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 02
[03Fh 0063 001h]               Local Apic ID : 02
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 03
[047h 0071 001h]               Local Apic ID : 03
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 00 [Processor Local APIC]
[04Dh 0077 001h]                      Length : 08
[04Eh 0078 001h]                Processor ID : 04
[04Fh 0079 001h]               Local Apic ID : 04
[050h 0080 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084 001h]               Subtable Type : 00 [Processor Local APIC]
[055h 0085 001h]                      Length : 08
[056h 0086 001h]                Processor ID : 05
[057h 0087 001h]               Local Apic ID : 05
[058h 0088 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092 001h]               Subtable Type : 00 [Processor Local APIC]
[05Dh 0093 001h]                      Length : 08
[05Eh 0094 001h]                Processor ID : 06
[05Fh 0095 001h]               Local Apic ID : 06
[060h 0096 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100 001h]               Subtable Type : 00 [Processor Local APIC]
[065h 0101 001h]                      Length : 08
[066h 0102 001h]                Processor ID : 07
[067h 0103 001h]               Local Apic ID : 07
[068h 0104 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108 001h]               Subtable Type : 00 [Processor Local APIC]
[06Dh 0109 001h]                      Length : 08
[06Eh 0110 001h]                Processor ID : 08
[06Fh 0111 001h]               Local Apic ID : 00
[070h 0112 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[074h 0116 001h]               Subtable Type : 00 [Processor Local APIC]
[075h 0117 001h]                      Length : 08
[076h 0118 001h]                Processor ID : 09
[077h 0119 001h]               Local Apic ID : 00
[078h 0120 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[07Ch 0124 001h]               Subtable Type : 00 [Processor Local APIC]
[07Dh 0125 001h]                      Length : 08
[07Eh 0126 001h]                Processor ID : 0A
[07Fh 0127 001h]               Local Apic ID : 00
[080h 0128 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[084h 0132 001h]               Subtable Type : 00 [Processor Local APIC]
[085h 0133 001h]                      Length : 08
[086h 0134 001h]                Processor ID : 0B
[087h 0135 001h]               Local Apic ID : 00
[088h 0136 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[08Ch 0140 001h]               Subtable Type : 00 [Processor Local APIC]
[08Dh 0141 001h]                      Length : 08
[08Eh 0142 001h]                Processor ID : 0C
[08Fh 0143 001h]               Local Apic ID : 00
[090h 0144 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148 001h]               Subtable Type : 00 [Processor Local APIC]
[095h 0149 001h]                      Length : 08
[096h 0150 001h]                Processor ID : 0D
[097h 0151 001h]               Local Apic ID : 00
[098h 0152 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156 001h]               Subtable Type : 00 [Processor Local APIC]
[09Dh 0157 001h]                      Length : 08
[09Eh 0158 001h]                Processor ID : 0E
[09Fh 0159 001h]               Local Apic ID : 00
[0A0h 0160 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164 001h]               Subtable Type : 00 [Processor Local APIC]
[0A5h 0165 001h]                      Length : 08
[0A6h 0166 001h]                Processor ID : 0F
[0A7h 0167 001h]               Local Apic ID : 00
[0A8h 0168 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172 001h]               Subtable Type : 01 [I/O APIC]
[0ADh 0173 001h]                      Length : 0C
[0AEh 0174 001h]                 I/O Apic ID : 21
[0AFh 0175 001h]                    Reserved : 00
[0B0h 0176 004h]                     Address : FEC00000
[0B4h 0180 004h]                   Interrupt : 00000000

[0B8h 0184 001h]               Subtable Type : 01 [I/O APIC]
[0B9h 0185 001h]                      Length : 0C
[0BAh 0186 001h]                 I/O Apic ID : 22
[0BBh 0187 001h]                    Reserved : 00
[0BCh 0188 004h]                     Address : FEC01000
[0C0h 0192 004h]                   Interrupt : 00000018

[0C4h 0196 001h]               Subtable Type : 02 [Interrupt Source Override]
[0C5h 0197 001h]                      Length : 0A
[0C6h 0198 001h]                         Bus : 00
[0C7h 0199 001h]                      Source : 00
[0C8h 0200 004h]                   Interrupt : 00000002
[0CCh 0204 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0CEh 0206 001h]               Subtable Type : 02 [Interrupt Source Override]
[0CFh 0207 001h]                      Length : 0A
[0D0h 0208 001h]                         Bus : 00
[0D1h 0209 001h]                      Source : 09
[0D2h 0210 004h]                   Interrupt : 00000009
[0D6h 0214 002h]       Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[0D8h 0216 001h]               Subtable Type : 04 [Local APIC NMI]
[0D9h 0217 001h]                      Length : 06
[0DAh 0218 001h]                Processor ID : 00
[0DBh 0219 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0DDh 0221 001h]        Interrupt Input LINT : 01

[0DEh 0222 001h]               Subtable Type : 04 [Local APIC NMI]
[0DFh 0223 001h]                      Length : 06
[0E0h 0224 001h]                Processor ID : 01
[0E1h 0225 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E3h 0227 001h]        Interrupt Input LINT : 01

[0E4h 0228 001h]               Subtable Type : 04 [Local APIC NMI]
[0E5h 0229 001h]                      Length : 06
[0E6h 0230 001h]                Processor ID : 02
[0E7h 0231 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E9h 0233 001h]        Interrupt Input LINT : 01

[0EAh 0234 001h]               Subtable Type : 04 [Local APIC NMI]
[0EBh 0235 001h]                      Length : 06
[0ECh 0236 001h]                Processor ID : 03
[0EDh 0237 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0EFh 0239 001h]        Interrupt Input LINT : 01

[0F0h 0240 001h]               Subtable Type : 04 [Local APIC NMI]
[0F1h 0241 001h]                      Length : 06
[0F2h 0242 001h]                Processor ID : 04
[0F3h 0243 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0F5h 0245 001h]        Interrupt Input LINT : 01

[0F6h 0246 001h]               Subtable Type : 04 [Local APIC NMI]
[0F7h 0247 001h]                      Length : 06
[0F8h 0248 001h]                Processor ID : 05
[0F9h 0249 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0FBh 0251 001h]        Interrupt Input LINT : 01

[0FCh 0252 001h]               Subtable Type : 04 [Local APIC NMI]
[0FDh 0253 001h]                      Length : 06
[0FEh 0254 001h]                Processor ID : 06
[0FFh 0255 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[101h 0257 001h]        Interrupt Input LINT : 01

[102h 0258 001h]               Subtable Type : 04 [Local APIC NMI]
[103h 0259 001h]                      Length : 06
[104h 0260 001h]                Processor ID : 07
[105h 0261 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[107h 0263 001h]        Interrupt Input LINT : 01

[108h 0264 001h]               Subtable Type : 04 [Local APIC NMI]
[109h 0265 001h]                      Length : 06
[10Ah 0266 001h]                Processor ID : 08
[10Bh 0267 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[10Dh 0269 001h]        Interrupt Input LINT : 01

[10Eh 0270 001h]               Subtable Type : 04 [Local APIC NMI]
[10Fh 0271 001h]                      Length : 06
[110h 0272 001h]                Processor ID : 09
[111h 0273 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[113h 0275 001h]        Interrupt Input LINT : 01

[114h 0276 001h]               Subtable Type : 04 [Local APIC NMI]
[115h 0277 001h]                      Length : 06
[116h 0278 001h]                Processor ID : 0A
[117h 0279 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[119h 0281 001h]        Interrupt Input LINT : 01

[11Ah 0282 001h]               Subtable Type : 04 [Local APIC NMI]
[11Bh 0283 001h]                      Length : 06
[11Ch 0284 001h]                Processor ID : 0B
[11Dh 0285 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[11Fh 0287 001h]        Interrupt Input LINT : 01

[120h 0288 001h]               Subtable Type : 04 [Local APIC NMI]
[121h 0289 001h]                      Length : 06
[122h 0290 001h]                Processor ID : 0C
[123h 0291 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[125h 0293 001h]        Interrupt Input LINT : 01

[126h 0294 001h]               Subtable Type : 04 [Local APIC NMI]
[127h 0295 001h]                      Length : 06
[128h 0296 001h]                Processor ID : 0D
[129h 0297 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[12Bh 0299 001h]        Interrupt Input LINT : 01

[12Ch 0300 001h]               Subtable Type : 04 [Local APIC NMI]
[12Dh 0301 001h]                      Length : 06
[12Eh 0302 001h]                Processor ID : 0E
[12Fh 0303 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305 001h]        Interrupt Input LINT : 01

[132h 0306 001h]               Subtable Type : 04 [Local APIC NMI]
[133h 0307 001h]                      Length : 06
[134h 0308 001h]                Processor ID : 0F
[135h 0309 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[137h 0311 001h]        Interrupt Input LINT : 01

Raw Table Data: Length 312 (0x138)

    0000: 41 50 49 43 38 01 00 00 03 9B 41 4D 44 59 44 45  // APIC8.....AMDYDE
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 02  // ................
    0040: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 04 04  // ................
    0050: 01 00 00 00 00 08 05 05 01 00 00 00 00 08 06 06  // ................
    0060: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 08 00  // ................
    0070: 00 00 00 00 00 08 09 00 00 00 00 00 00 08 0A 00  // ................
    0080: 00 00 00 00 00 08 0B 00 00 00 00 00 00 08 0C 00  // ................
    0090: 00 00 00 00 00 08 0D 00 00 00 00 00 00 08 0E 00  // ................
    00A0: 00 00 00 00 00 08 0F 00 00 00 00 00 01 0C 21 00  // ..............!.
    00B0: 00 00 C0 FE 00 00 00 00 01 0C 22 00 00 10 C0 FE  // ..........".....
    00C0: 18 00 00 00 02 0A 00 00 02 00 00 00 00 00 02 0A  // ................
    00D0: 00 09 09 00 00 00 0F 00 04 06 00 05 00 01 04 06  // ................
    00E0: 01 05 00 01 04 06 02 05 00 01 04 06 03 05 00 01  // ................
    00F0: 04 06 04 05 00 01 04 06 05 05 00 01 04 06 06 05  // ................
    0100: 00 01 04 06 07 05 00 01 04 06 08 05 00 01 04 06  // ................
    0110: 09 05 00 01 04 06 0A 05 00 01 04 06 0B 05 00 01  // ................
    0120: 04 06 0C 05 00 01 04 06 0D 05 00 01 04 06 0E 05  // ................
    0130: 00 01 04 06 0F 05 00 01                          // ........


ASF!
----
[000h 0000 004h]                   Signature : "ASF!"    [Alert Standard Format Table]
[004h 0004 004h]                Table Length : 000000A5
[008h 0008 001h]                    Revision : 20
[009h 0009 001h]                    Checksum : 4A
[00Ah 0010 006h]                      Oem ID : "AMDYDE"
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 001h]               Subtable Type : 00 [ASF Information]
[025h 0037 001h]                    Reserved : 00
[026h 0038 002h]                      Length : 0010
[028h 0040 001h]         Minimum Reset Value : 00
[029h 0041 001h]    Minimum Polling Interval : FF
[02Ah 0042 002h]                   System ID : 0001
[02Ch 0044 004h]             Manufacturer ID : 57010000
[030h 0048 001h]                       Flags : 00
[031h 0049 003h]                    Reserved : 000000

[034h 0052 001h]               Subtable Type : 01 [ASF Alerts]
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]                      Length : 002C
[038h 0056 001h]                  AssertMask : 00
[039h 0057 001h]                DeassertMask : 00
[03Ah 0058 001h]                 Alert Count : 03
[03Bh 0059 001h]           Alert Data Length : 0C

[03Ch 0060 001h]                     Address : 80
[03Dh 0061 001h]                     Command : 23
[03Eh 0062 001h]                        Mask : 01
[03Fh 0063 001h]                       Value : 01
[040h 0064 001h]                  SensorType : 01
[041h 0065 001h]                        Type : 01
[042h 0066 001h]                      Offset : 00
[043h 0067 001h]                  SourceType : 39
[044h 0068 001h]                    Severity : 10
[045h 0069 001h]                SensorNumber : 00
[046h 0070 001h]                      Entity : 07
[047h 0071 001h]                    Instance : 00

[048h 0072 001h]                     Address : 80
[049h 0073 001h]                     Command : 23
[04Ah 0074 001h]                        Mask : 02
[04Bh 0075 001h]                       Value : 02
[04Ch 0076 001h]                  SensorType : 01
[04Dh 0077 001h]                        Type : 01
[04Eh 0078 001h]                      Offset : 00
[04Fh 0079 001h]                  SourceType : 39
[050h 0080 001h]                    Severity : 10
[051h 0081 001h]                SensorNumber : 01
[052h 0082 001h]                      Entity : 07
[053h 0083 001h]                    Instance : 00

[054h 0084 001h]                     Address : 80
[055h 0085 001h]                     Command : 23
[056h 0086 001h]                        Mask : 04
[057h 0087 001h]                       Value : 04
[058h 0088 001h]                  SensorType : 01
[059h 0089 001h]                        Type : 01
[05Ah 0090 001h]                      Offset : 00
[05Bh 0091 001h]                  SourceType : 39
[05Ch 0092 001h]                    Severity : 10
[05Dh 0093 001h]                SensorNumber : 02
[05Eh 0094 001h]                      Entity : 07
[05Fh 0095 001h]                    Instance : 00

[060h 0096 001h]               Subtable Type : 02 [ASF Remote Control]
[061h 0097 001h]                    Reserved : 00
[062h 0098 002h]                      Length : 0018
[064h 0100 001h]               Control Count : 04
[065h 0101 001h]         Control Data Length : 04
[066h 0102 002h]                    Reserved : 0000

[068h 0104 001h]                    Function : 00
[069h 0105 001h]                     Address : 71
[06Ah 0106 001h]                     Command : 00
[06Bh 0107 001h]                       Value : 00

[06Ch 0108 001h]                    Function : 01
[06Dh 0109 001h]                     Address : 71
[06Eh 0110 001h]                     Command : 02
[06Fh 0111 001h]                       Value : 00

[070h 0112 001h]                    Function : 02
[071h 0113 001h]                     Address : 71
[072h 0114 001h]                     Command : 01
[073h 0115 001h]                       Value : 00

[074h 0116 001h]                    Function : 03
[075h 0117 001h]                     Address : 71
[076h 0118 001h]                     Command : 03
[077h 0119 001h]                       Value : 00

[078h 0120 001h]               Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121 001h]                    Reserved : 00
[07Ah 0122 002h]                      Length : 0017
[07Ch 0124 007h]                Capabilities : 21 F8 00 00 00 1B F0
[083h 0131 001h]             Completion Code : 00
[084h 0132 004h]               Enterprise ID : 57010000
[088h 0136 001h]                     Command : 00
[089h 0137 002h]                   Parameter : 0100
[08Bh 0139 002h]                Boot Options : 7000
[08Dh 0141 002h]              Oem Parameters : 1600

[08Fh 0143 001h]               Subtable Type : 00 [ASF Information]
[090h 0144 001h]                    Reserved : 10
[091h 0145 002h]                      Length : 00A0
[093h 0147 001h]         Minimum Reset Value : A2
[094h 0148 001h]    Minimum Polling Interval : A4
[095h 0149 002h]                   System ID : 0000
[097h 0151 004h]             Manufacturer ID : 00000000
[09Bh 0155 001h]                       Flags : 00
[09Ch 0156 003h]                    Reserved : 000000


Raw Table Data: Length 165 (0xA5)

    0000: 41 53 46 21 A5 00 00 00 20 4A 41 4D 44 59 44 45  // ASF!.... JAMDYDE
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 00 00 10 00 00 FF 01 00 00 00 01 57  // ...............W
    0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 80 23 01 01  // ......,......#..
    0040: 01 01 00 39 10 00 07 00 80 23 02 02 01 01 00 39  // ...9.....#.....9
    0050: 10 01 07 00 80 23 04 04 01 01 00 39 10 02 07 00  // .....#.....9....
    0060: 02 00 18 00 04 04 00 00 00 71 00 00 01 71 02 00  // .........q...q..
    0070: 02 71 01 00 03 71 03 00 03 00 17 00 21 F8 00 00  // .q...q......!...
    0080: 00 1B F0 00 00 00 01 57 00 00 01 00 70 00 16 00  // .......W....p...
    0090: 10 A0 00 A2 A4 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00                                   // .....


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : F8
[00Ah 0010 006h]                      Oem ID : "AMDYDE"
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 07
                                   Displayed : 1
                          Orientation Offset : 3
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 000000007301A000
[030h 0048 004h]               Image OffsetX : 00000000
[034h 0052 004h]               Image OffsetY : 00000028

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 F8 41 4D 44 59 44 45  // BGRT8.....AMDYDE
    0010: 45 44 4B 32 20 20 20 20 01 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 01 00 07 00 00 A0 01 73 00 00 00 00  // ...........s....
    0030: 00 00 00 00 28 00 00 00                          // ....(...


BOOT
----
[000h 0000 004h]                   Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 02
[00Ah 0010 006h]                      Oem ID : "AMDYDE"
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 001h]         Boot Register Index : 44
[025h 0037 003h]                    Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 02 41 4D 44 59 44 45  // BOOT(.....AMDYDE
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 44 00 00 00                          // ....D...


CDIT
----
[000h 0000 004h]                   Signature : "CDIT"    
[004h 0004 004h]                Table Length : 00000029
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 2D
[00Ah 0010 006h]                      Oem ID : "AMD"
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 2D 41 4D 44 00 00 00  // CDIT)....-AMD...
    0010: 45 44 4B 32 20 20 20 20 01 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000 004h]                   Signature : "CRAT"    
[004h 0004 004h]                Table Length : 000007E8
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 73
[00Ah 0010 006h]                      Oem ID : "AMD"
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 2024 (0x7E8)

    0000: 43 52 41 54 E8 07 00 00 01 73 41 4D 44 00 00 00  // CRAT.....sAMD...
    0010: 45 44 4B 32 20 20 20 20 01 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 20 00 00 00 00 00 00 00 00 00 00 00  // .... ...........
    0030: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 00 00 00 00 00 00 0A 00 00 00 00 00 40 00 00 00  // ............@...
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 F4 7F  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0090: 01 00 00 00 00 00 00 80 03 00 00 00 40 00 00 00  // ............@...
    00A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    00B0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    00E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    00F0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0120: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0130: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0160: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0170: 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0190: 00 00 00 00 00 10 00 00 03 01 40 00 10 00 01 00  // ..........@.....
    01A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    01B0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    01E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    01F0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0210: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0220: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0230: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0260: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0270: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    02B0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    02C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    02F0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0320: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0330: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0360: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0370: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0390: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    03A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    03B0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03D0: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    03E0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    03F0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0410: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0420: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0430: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0450: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0460: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0470: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0490: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    04A0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    04B0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    04E0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    04F0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0510: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0520: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0530: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0550: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0560: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0570: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0590: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    05A0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    05B0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    05C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05D0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    05E0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    05F0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0610: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0620: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0630: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0650: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0660: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0670: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0690: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    06A0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    06B0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    06C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06D0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    06E0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    06F0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0710: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0720: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0730: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0750: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0760: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0770: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0790: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    07A0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    07B0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    07C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07D0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    07E0: 00 00 00 00 00 00 00 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 1, "AMDYDE", "EDK2    ", 0x00000002)
{
    External (_PR_.C000.PPCV, IntObj)
    External (_PR_.C001.PPCV, IntObj)
    External (_PR_.C002.PPCV, IntObj)
    External (_PR_.C003.PPCV, IntObj)
    External (_PR_.C004.PPCV, IntObj)
    External (_PR_.C005.PPCV, IntObj)
    External (_PR_.C006.PPCV, IntObj)
    External (_PR_.C007.PPCV, IntObj)
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.VGA_.LCD_, DeviceObj)
    External (_SB_.PCI0.VGA_.LCD_, DeviceObj)
    External (_SB_.TPM2.PTS_, MethodObj)    // 1 Arguments
    External (AFN4, MethodObj)    // 1 Arguments
    External (MPTS, MethodObj)    // 1 Arguments
    External (MWAK, MethodObj)    // 1 Arguments
    External (UBTC, DeviceObj)

    OperationRegion (EC6C, SystemIO, 0x6C, One)
    Field (EC6C, ByteAcc, NoLock, Preserve)
    {
        IO6C,   8
    }

    OperationRegion (DBG0, SystemIO, 0x80, One)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (DBG1, SystemIO, 0x80, 0x02)
    Field (DBG1, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMG, SystemMemory, 0xFED81500, 0x03FF)
    Field (GSMG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x5C), 
        Offset (0x5E), 
        GS23,   1, 
            ,   5, 
        GV23,   1, 
        GE23,   1, 
        Offset (0xA0), 
        Offset (0xA2), 
        GS40,   1, 
            ,   5, 
        GV40,   1, 
        GE40,   1, 
        Offset (0x164), 
        Offset (0x166), 
        GID1,   1, 
            ,   5, 
            ,   1, 
        Offset (0x167), 
        Offset (0x168), 
        Offset (0x16A), 
        GID2,   1, 
            ,   5, 
            ,   1, 
        Offset (0x16B), 
        Offset (0x208), 
        Offset (0x20A), 
        GID0,   1, 
            ,   5, 
            ,   1, 
        Offset (0x20B)
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, 0x0400, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        PRWP [One] = Arg1
        If ((DAS3 == Zero))
        {
            If ((Arg1 <= 0x03))
            {
                PRWP [One] = Zero
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Method (SPTS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        If ((One == PEWS))
        {
            PEWS = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        If ((One == PEWS))
        {
            PEWS = One
        }

        PWDE = One
        PEWD = Zero
    }

    OperationRegion (DBG2, SystemIO, 0x80, 0x04)
    Field (DBG2, DWordAcc, NoLock, Preserve)
    {
        P80D,   32
    }

    Method (TPST, 1, Serialized)
    {
        Local0 = (Arg0 + 0xB0000000)
        P80D = Local0
    }

    OperationRegion (GNVS, SystemMemory, 0x7BF3EA98, 0x0000018A)
    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        BRTL,   8, 
        TLST,   8, 
        IGDS,   8, 
        LCDA,   16, 
        CSTE,   16, 
        NSTE,   16, 
        CADL,   16, 
        PADL,   16, 
        LIDS,   8, 
        PWRS,   8, 
        BVAL,   32, 
        ADDL,   16, 
        BCMD,   8, 
        SBFN,   8, 
        DID,    32, 
        INFO,   2048, 
        TOML,   8, 
        TOMH,   8, 
        CEBP,   8, 
        C0LS,   8, 
        C1LS,   8, 
        C0HS,   8, 
        C1HS,   8, 
        ROMS,   32, 
        MUXF,   8, 
        PDDN,   8, 
        CNSB,   8, 
        RDHW,   8, 
        DAS3,   8, 
        TNBH,   8, 
        TCP0,   8, 
        TCP1,   8, 
        ATNB,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PWMN,   8, 
        LPTY,   8, 
        M92D,   8, 
        WKPM,   8, 
        ALST,   8, 
        AFUC,   8, 
        EXUS,   8, 
        GV0E,   8, 
        WLSH,   8, 
        TSSS,   8, 
        AOZP,   8, 
        TZFG,   8, 
        BPS0,   8, 
        NAPC,   8, 
        PCBA,   32, 
        PCBL,   32, 
        WLAN,   8, 
        BLTH,   8, 
        GPSS,   8, 
        NFCS,   8, 
        SBTY,   8, 
        BDID,   16, 
        MWTT,   8, 
        ACPM,   8, 
        KBCS,   8, 
        ACEC,   8, 
        DPTC,   8, 
        ECTL,   8, 
        MM64,   8, 
        HMB1,   64, 
        HMB2,   64, 
        HMM1,   64, 
        HMM2,   64, 
        HML1,   64, 
        HML2,   64, 
        WOVS,   8, 
        TCNT,   8
    }

    OperationRegion (OGNS, SystemMemory, 0x7BF3ED18, 0x00000100)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        OG00,   8, 
        OG01,   8, 
        M2WL,   8, 
        THPN,   8, 
        PBAR,   8, 
        THPD,   8, 
        DTEN,   8, 
        SDMO,   8, 
        TBEN,   8, 
        TBNH,   8, 
        RV2I,   8, 
        ISDS,   8, 
        UBCB,   32, 
        DCLK,   32, 
        TPEN,   8, 
        ALSE,   8, 
        SMAE,   8, 
        AUCE,   8
    }

    Name (WNOS, Zero)
    Name (MYOS, Zero)
    Name (HTTS, Zero)
    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (Arg0 [Local2])
            Local4 = DerefOf (Arg1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Name (BUFN, Zero)
    Name (MBUF, Buffer (0x1000){})
    OperationRegion (MDBG, SystemMemory, 0x7BEF5018, 0x00001004)
    Field (MDBG, AnyAcc, Lock, Preserve)
    {
        MDG0,   32768
    }

    Method (DB2H, 1, Serialized)
    {
        SHOW (Arg0)
        MDGC (0x20)
        MDG0 = MBUF /* \MBUF */
    }

    Method (DW2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x08)
        Local0 &= 0xFF
        Local1 &= 0xFF
        DB2H (Local1)
        BUFN--
        DB2H (Local0)
    }

    Method (DD2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x10)
        Local0 &= 0xFFFF
        Local1 &= 0xFFFF
        DW2H (Local1)
        BUFN--
        DW2H (Local0)
    }

    Method (MBGS, 1, Serialized)
    {
        Local0 = SizeOf (Arg0)
        MDGC (0x20)
        While (Local0)
        {
            MDGC (DerefOf (Arg0 [(SizeOf (Arg0) - Local0)]))
            Local0--
        }

        MDG0 = MBUF /* \MBUF */
    }

    Method (SHOW, 1, Serialized)
    {
        MDGC (NTOC ((Arg0 >> 0x04)))
        MDGC (NTOC (Arg0))
    }

    Method (LINE, 0, Serialized)
    {
        Local0 = BUFN /* \BUFN */
        Local0 &= 0x0F
        While (Local0)
        {
            MDGC (Zero)
            Local0++
            Local0 &= 0x0F
        }
    }

    Method (MDGC, 1, Serialized)
    {
        MBUF [BUFN] = Arg0
        BUFN += One
        If ((BUFN > 0x0FFF))
        {
            BUFN &= 0x0FFF
            UP_L (One)
        }
    }

    Method (UP_L, 1, Serialized)
    {
        Local2 = Arg0
        Local2 <<= 0x04
        MOVE (Local2)
        Local3 = (0x1000 - Local2)
        While (Local2)
        {
            MBUF [Local3] = Zero
            Local3++
            Local2--
        }
    }

    Method (MOVE, 1, Serialized)
    {
        Local4 = Arg0
        BUFN = Zero
        Local5 = (0x1000 - Local4)
        While (Local5)
        {
            Local5--
            MBUF [BUFN] = DerefOf (MBUF [Local4])
            BUFN++
            Local4++
        }
    }

    Method (NTOC, 1, Serialized)
    {
        Local0 = (Arg0 & 0x0F)
        If ((Local0 < 0x0A))
        {
            Local0 += 0x30
        }
        Else
        {
            Local0 += 0x37
        }

        Return (Local0)
    }

    Scope (_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If ((DAS3 == One))
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x03, 
            0x03, 
            Zero, 
            Zero
        })
    }

    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        Zero, 
        Zero
    })
    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((TBEN == Zero))
            {
                Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
                Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
            }

            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
        }

        Method (_L0F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP19.XHC2, 0x02) // Device Wake
        }
    }

    Name (PICM, Zero)
    Name (GPIC, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
        GPIC = Arg0
        If (PICM)
        {
            \_SB.DSPI ()
            If (NAPC)
            {
                \_SB.PCI0.NAPE ()
            }
        }
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        IO6C = 0xCF
        SPTS (Arg0)
        If ((Arg0 == One))
        {
            \_SB.S80H (0x51)
        }

        If ((Arg0 == 0x03))
        {
            \_SB.S80H (0x53)
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            \_SB.S80H (0x54)
            SLPS = One
            RSTU = One
            \_SB.PCI0.LPC0.EC0.PRTC = One
        }

        If ((Arg0 == 0x05))
        {
            \_SB.S80H (0x55)
            If ((WKPM == One))
            {
                PWDE = One
            }

            BCMD = 0x90
            \_SB.BSMI (Zero)
            \_SB.GSMI (0x03)
        }

        If (CondRefOf (\_SB.TPM2.PTS))
        {
            \_SB.TPM2.PTS (Arg0)
        }

        \_SB.PCI0.LPC0.EC0.BTSM = Zero
        \_SB.PCI0.LPC0.EC0.BTBM = Zero
        \_SB.APTS (Arg0)
        MPTS (Arg0)
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        SWAK (Arg0)
        \_SB.AWAK (Arg0)
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((GPIC != Zero))
            {
                \_SB.DSPI ()
                If (NAPC)
                {
                    \_SB.PCI0.NAPE ()
                }
            }
        }

        If ((Arg0 == 0x03))
        {
            \_SB.S80H (0xE3)
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            \_SB.S80H (0xE4)
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        \_SB.ACAD.ACDC = 0xFF
        MWAK (Arg0)
        Return (Zero)
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((GPIC != Zero))
                {
                    DSPI ()
                    If (NAPC)
                    {
                        NAPE ()
                    }
                }

                OSTP ()
            }

            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If ((TBEN == One))
                    {
                        If ((TBNH != Zero))
                        {
                            CTRL &= 0xFFFFFFF5
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFF4
                        }
                    }

                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    CTRL &= 0x1D
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One)){}
                        If ((CTRL & 0x04)){}
                        If ((CTRL & 0x10)){}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Method (TOM, 0, NotSerialized)
            {
                Local0 = (TOML * 0x00010000)
                Local1 = (TOMH * 0x01000000)
                Local0 += Local1
                Return (Local0)
            }

            Name (CRES, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xF7FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x78000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFC000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x02B00000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED45000,         // Range Minimum
                    0xFED814FF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0003C500,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED81900,         // Range Minimum
                    0xFED81FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000700,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFEDC0000,         // Range Minimum
                    0xFEDC0FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00001000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFEDC6000,         // Range Minimum
                    0xFEDC6FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00001000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRES, \_SB.PCI0._Y00._MIN, BTMN)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._MAX, BTMX)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._LEN, BTLN)  // _LEN: Length
                CreateDWordField (CRES, \_SB.PCI0._Y01._MIN, BTN1)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._MAX, BTX1)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._LEN, BTL1)  // _LEN: Length
                BTMN = TOM ()
                BTMX = (PCBA - One)
                BTLN = (PCBA - BTMN) /* \_SB_.PCI0._CRS.BTMN */
                BTN1 = (PCBL + One)
                BTL1 = (BTX1 - BTN1) /* \_SB_.PCI0._CRS.BTN1 */
                BTL1 += One
                If ((MM64 == One))
                {
                    CreateQWordField (CRES, \_SB.PCI0._Y02._MIN, M1MN)  // _MIN: Minimum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y02._MAX, M1MX)  // _MAX: Maximum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y02._LEN, M1LN)  // _LEN: Length
                    M1MN = HMB1 /* \HMB1 */
                    M1MX = HMM1 /* \HMM1 */
                    M1LN = HML1 /* \HML1 */
                    CreateQWordField (CRES, \_SB.PCI0._Y03._MIN, M2MN)  // _MIN: Minimum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y03._MAX, M2MX)  // _MAX: Maximum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y03._LEN, M2LN)  // _LEN: Length
                    M2MN = HMB2 /* \HMB2 */
                    M2MX = HMM2 /* \HMM2 */
                    M2LN = HML2 /* \HML2 */
                }

                Return (CRES) /* \_SB_.PCI0.CRES */
            }

            Device (MEMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (BAR3, 0xA0000000)
                Name (MEM1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y04)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y05)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y06)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._BAS, MB01)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._LEN, ML01)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._BAS, MB02)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._LEN, ML02)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y06._BAS, MB03)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y06._LEN, ML03)  // _LEN: Length
                    If (GPIC)
                    {
                        MB01 = 0xFEC00000
                        MB02 = 0xFEE00000
                        ML01 = 0x1000
                        If (NAPC)
                        {
                            ML01 += 0x1000
                        }

                        ML02 = 0x1000
                    }

                    If ((BAR3 != 0xFFF00000))
                    {
                        MB03 = BAR3 /* \_SB_.PCI0.MEMR.BAR3 */
                        ML03 = 0x00100000
                    }

                    Return (MEM1) /* \_SB_.PCI0.MEMR.MEM1 */
                }
            }

            OperationRegion (PCBX, SystemMemory, (PCBA + 0xB8), 0x08)
            Field (PCBX, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, Serialized)
            {
                Acquire (NAPM, 0xFFFF)
                Local0 = (PCBA + 0xB8)
                Local1 = NAPX /* \_SB_.PCI0.NAPX */
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                NAPX = Local1
                Release (NAPM)
            }

            Name (PR00, Package (0x0E)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKE, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    LNKF, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    LNKG, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    LNKH, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }
            })
            Name (AR00, Package (0x0E)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Name (NR00, Package (0x0E)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x20
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x21
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x22
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    Zero, 
                    0x23
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x04, 
                    Zero, 
                    0x20
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x05, 
                    Zero, 
                    0x21
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x06, 
                    Zero, 
                    0x22
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x24
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    Zero, 
                    0x25
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    Zero, 
                    0x26
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    If (NAPC)
                    {
                        Return (NR00) /* \_SB_.PCI0.NR00 */
                    }
                    Else
                    {
                        Return (AR00) /* \_SB_.PCI0.AR00 */
                    }
                }
                Else
                {
                    Return (PR00) /* \_SB_.PCI0.PR00 */
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x08, Zero))
                    }
                }

                Name (PR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x18
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x19
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1B
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR01) /* \_SB_.PCI0.GPP0.NR01 */
                        }
                        Else
                        {
                            Return (AR01) /* \_SB_.PCI0.GPP0.AR01 */
                        }
                    }
                    Else
                    {
                        Return (PR01) /* \_SB_.PCI0.GPP0.PR01 */
                    }
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010110, 
                            0x00010210, 
                            0x00010220, 
                            0x00010230, 
                            0x00010240
                        })
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GPP0.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            BRTL = Arg0
                        }
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x08, Zero))
                    }
                }

                Name (PR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }
                })
                Name (NR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x1C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x1D
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1F
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR02) /* \_SB_.PCI0.GPP1.NR02 */
                        }
                        Else
                        {
                            Return (AR02) /* \_SB_.PCI0.GPP1.AR02 */
                        }
                    }
                    Else
                    {
                        Return (PR02) /* \_SB_.PCI0.GPP1.PR02 */
                    }
                }

                Device (DEV0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (DEV1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x08, Zero))
                    }
                }

                Name (PR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x23
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR03) /* \_SB_.PCI0.GPP2.NR03 */
                        }
                        Else
                        {
                            Return (AR03) /* \_SB_.PCI0.GPP2.AR03 */
                        }
                    }
                    Else
                    {
                        Return (PR03) /* \_SB_.PCI0.GPP2.PR03 */
                    }
                }

                Device (WWAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x0F, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x0F, Zero))
                    }
                }

                Name (PR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }
                })
                Name (NR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR04) /* \_SB_.PCI0.GPP3.NR04 */
                        }
                        Else
                        {
                            Return (AR04) /* \_SB_.PCI0.GPP3.AR04 */
                        }
                    }
                    Else
                    {
                        Return (PR04) /* \_SB_.PCI0.GPP3.PR04 */
                    }
                }

                Device (RTL8)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x0E, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x0E, Zero))
                    }
                }

                Name (PR05, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR05, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR05, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x2B
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR05) /* \_SB_.PCI0.GPP4.NR05 */
                        }
                        Else
                        {
                            Return (AR05) /* \_SB_.PCI0.GPP4.AR05 */
                        }
                    }
                    Else
                    {
                        Return (PR05) /* \_SB_.PCI0.GPP4.PR05 */
                    }
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x08, Zero))
                    }
                }

                Name (PR06, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR06, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }
                })
                Name (NR06, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2D
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x2E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x2F
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR06) /* \_SB_.PCI0.GPP5.NR06 */
                        }
                        Else
                        {
                            Return (AR06) /* \_SB_.PCI0.GPP5.AR06 */
                        }
                    }
                    Else
                    {
                        Return (PR06) /* \_SB_.PCI0.GPP5.PR06 */
                    }
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Name (PR07, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR07, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR07, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x30
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x31
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x32
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x33
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR07) /* \_SB_.PCI0.GPP6.NR07 */
                        }
                        Else
                        {
                            Return (AR07) /* \_SB_.PCI0.GPP6.AR07 */
                        }
                    }
                    Else
                    {
                        Return (PR07) /* \_SB_.PCI0.GPP6.PR07 */
                    }
                }
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x19, Zero))
                    }
                }

                Name (PR17, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR17, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Name (NR17, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x32
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x33
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x30
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x31
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR17) /* \_SB_.PCI0.GP17.NR17 */
                        }
                        Else
                        {
                            Return (AR17) /* \_SB_.PCI0.GP17.AR17 */
                        }
                    }
                    Else
                    {
                        Return (PR17) /* \_SB_.PCI0.GP17.PR17 */
                    }
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x07)
                        {
                            0x00010110, 
                            0x00010210, 
                            0x00010220, 
                            0x00010230, 
                            0x00010240, 
                            0x00031000, 
                            0x00032000
                        })
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GP17.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            BRTL = Arg0
                        }
                    }
                }

                Device (PSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_WOV, 0, NotSerialized)
                    {
                        Return (WOVS) /* \WOVS */
                    }

                    Device (AFD)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "acp-dsd-number-of-resources", 
                                    0x02
                                }
                            }, 

                            ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "acp-dsd-resource-0", 
                                    "RES0"
                                }, 

                                Package (0x02)
                                {
                                    "acp-dsd-resource-1", 
                                    "RES1"
                                }
                            }
                        })
                        Name (RES0, Package (0x02)
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x09)
                            {
                                Package (0x02)
                                {
                                    "acp-i2s-dsd-vendor-codec-name", 
                                    "nuvoton"
                                }, 

                                Package (0x02)
                                {
                                    "acp-i2s-dsd-vendor-codec-id", 
                                    0x2020
                                }, 

                                Package (0x02)
                                {
                                    "acp-i2s-dsd-controller-instance", 
                                    "sp"
                                }, 

                                Package (0x02)
                                {
                                    "acp-i2s-dsd-controller-mode", 
                                    "master"
                                }, 

                                Package (0x02)
                                {
                                    "acp-i2s-dsd-controller-format-mode", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "acp-i2s-dsd-tx-enabled", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "acp-i2s-dsd-rx-enabled", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "acp-dsd-render-endpoint-category", 
                                    "headphones"
                                }, 

                                Package (0x02)
                                {
                                    "acp-dsd-capture-endpoint-category", 
                                    "headphones"
                                }
                            }
                        })
                        Name (RES1, Package (0x02)
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x08)
                            {
                                Package (0x02)
                                {
                                    "acp-i2s-dsd-vendor-codec-name", 
                                    "cirrus"
                                }, 

                                Package (0x02)
                                {
                                    "acp-i2s-dsd-vendor-codec-id", 
                                    0x00035A40
                                }, 

                                Package (0x02)
                                {
                                    "acp-i2s-dsd-controller-instance", 
                                    "hs"
                                }, 

                                Package (0x02)
                                {
                                    "acp-i2s-dsd-controller-mode", 
                                    "master"
                                }, 

                                Package (0x02)
                                {
                                    "acp-i2s-dsd-controller-format-mode", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "acp-i2s-dsd-tx-enabled", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "acp-i2s-dsd-rx-enabled", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "acp-dsd-render-endpoint-category", 
                                    "speakers"
                                }
                            }
                        })
                    }
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x09, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x69, 0x0C, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // i.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.PLD1 */
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x09, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x69, 0x0C, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // i.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2.PLD1 */
                            }
                        }
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT1.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x11, 0x0C, 0x80, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT1.PLD1 */
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (UPC2, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x10, 0x0C, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.PLD1 */
                            }
                        }

                        Device (PRT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT3.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x91, 0x1C, 0x80, 0x03, 0x01, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT3.PLD1 */
                            }
                        }

                        Device (PRT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT4.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x91, 0x1D, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT4.PLD1 */
                            }
                        }

                        Device (PRT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT5.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x91, 0x1D, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT5.PLD1 */
                            }
                        }

                        Device (PRT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT6.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x11, 0x0C, 0x80, 0x05, 0x01, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT6.PLD1 */
                            }
                        }

                        Device (PRT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT7.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x11, 0x0C, 0x80, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT7.PLD1 */
                            }
                        }

                        Device (PRT8)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT8.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x10, 0x0C, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT8.PLD1 */
                            }
                        }
                    }
                }

                Device (MP2C)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Name (PR18, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR18, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Name (NR18, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2F
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x2C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x2D
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR18) /* \_SB_.PCI0.GP18.NR18 */
                        }
                        Else
                        {
                            Return (AR18) /* \_SB_.PCI0.GP18.AR18 */
                        }
                    }
                    Else
                    {
                        Return (PR18) /* \_SB_.PCI0.GP18.PR18 */
                    }
                }

                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP19)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x08, Zero))
                    }
                }

                Name (PR19, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR19, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Name (NR19, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x29
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR19) /* \_SB_.PCI0.GP19.NR19 */
                        }
                        Else
                        {
                            Return (AR19) /* \_SB_.PCI0.GP19.AR19 */
                        }
                    }
                    Else
                    {
                        Return (PR19) /* \_SB_.PCI0.GP19.PR19 */
                    }
                }

                Device (XHC2)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x09, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP19.XHC2.RHUB.PRT1.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x11, 0x0C, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP19.XHC2.RHUB.PRT1.PLD1 */
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x09, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP19.XHC2.RHUB.PRT2.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x11, 0x0C, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP19.XHC2.RHUB.PRT2.PLD1 */
                            }
                        }
                    }
                }
            }

            Device (HPET)
            {
                Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((HPEN == One))
                    {
                        If ((OSTB >= 0x40))
                        {
                            Return (0x0F)
                        }

                        HPEN = Zero
                        Return (One)
                    }

                    Return (One)
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y07)
                    })
                    CreateDWordField (BUF0, \_SB.PCI0.HPET._CRS._Y07._BAS, HPEB)  // _BAS: Base Address
                    Local0 = 0xFED00000
                    HPEB = (Local0 & 0xFFFFFC00)
                    Return (BUF0) /* \_SB_.PCI0.HPET._CRS.BUF0 */
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (LPC0)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.RTC_.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.TMR_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.TMR_.BUF1 */
                    }
                }

                Device (KBC0)
                {
                    Name (_HID, EisaId ("FUJ7401"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0xD0,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                    })
                }

                Device (MEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (MSRC, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFFF00000,         // Address Base
                            0x00100000,         // Address Length
                            _Y08)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y08._LEN, PSIZ)  // _LEN: Length
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y08._BAS, PBAS)  // _BAS: Base Address
                        PSIZ = ROMS /* \ROMS */
                        Local0 = (ROMS - One)
                        PBAS = (Ones - Local0)
                        Return (MSRC) /* \_SB_.PCI0.LPC0.MEM_.MSRC */
                    }
                }

                Method (ECOK, 0, NotSerialized)
                {
                    If ((^EC0.OKEC == One))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_GPE, 0x0A)  // _GPE: General Purpose Events
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (OKEC, Zero)
                    Name (BATO, Zero)
                    Name (BATN, Zero)
                    Name (BATF, 0xC0)
                    Mutex (Z009, 0x00)
                    Mutex (QEVT, 0x00)
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFE700000,         // Address Base
                            0x00001000,         // Address Length
                            )
                    })
                    OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        SMPR,   8, 
                        SMST,   8, 
                        SMAD,   8, 
                        SMCM,   8, 
                        SMD0,   256, 
                        BCNT,   8, 
                        SMAA,   8, 
                        Offset (0x40), 
                        SW2S,   1, 
                            ,   2, 
                        SCCT,   1, 
                        TRPM,   1, 
                        Offset (0x41), 
                        WIN7,   1, 
                            ,   3, 
                        LXFG,   1, 
                            ,   1, 
                            ,   1, 
                        Offset (0x42), 
                            ,   5, 
                        RWFG,   2, 
                        AVCF,   1, 
                        BBDA,   1, 
                        CIRB,   1, 
                            ,   1, 
                        FNOV,   1, 
                        GFXT,   1, 
                            ,   1, 
                        GP12,   1, 
                        Offset (0x44), 
                        Offset (0x45), 
                            ,   2, 
                        NUCR,   1, 
                            ,   1, 
                        WIN8,   1, 
                        Offset (0x46), 
                        Offset (0x47), 
                        CPTJ,   8, 
                        BTCR,   8, 
                        Offset (0x4B), 
                        MUTS,   1, 
                        MUTA,   1, 
                        BLEX,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        Offset (0x4C), 
                        HKOK,   8, 
                        USBM,   1, 
                        SLMO,   1, 
                            ,   1, 
                        LOSD,   1, 
                            ,   3, 
                        Offset (0x4E), 
                        Offset (0x4F), 
                        F2DA,   8, 
                        DWNK,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                        LIDS,   1, 
                        WBSS,   1, 
                            ,   1, 
                        PRDS,   1, 
                        Offset (0x53), 
                        Offset (0x58), 
                        RTMP,   8, 
                        ECT1,   8, 
                        ECT2,   8, 
                        RG5B,   8, 
                        FSPD,   16, 
                        Offset (0x5F), 
                            ,   3, 
                        ENTP,   1, 
                        Offset (0x60), 
                        Offset (0x62), 
                        ECTH,   8, 
                        ECTL,   8, 
                        Offset (0x65), 
                        CMDF,   4, 
                        Offset (0x66), 
                        Offset (0x67), 
                            ,   2, 
                        G6AC,   1, 
                        G6RE,   1, 
                            ,   3, 
                        UCSP,   1, 
                        VOVA,   8, 
                        Offset (0x6B), 
                        DCBR,   8, 
                        GWKR,   8, 
                        Offset (0x6E), 
                        BTLW,   8, 
                        Offset (0x70), 
                        DSCP,   16, 
                        LACP,   16, 
                        DSVG,   16, 
                        Offset (0x77), 
                        BANA,   64, 
                        Offset (0x81), 
                        PL1S,   3, 
                        Offset (0x82), 
                        MBST,   8, 
                        MCUR,   16, 
                        MBRM,   16, 
                        MBCV,   16, 
                        LKBR,   8, 
                        LKBG,   8, 
                        LKBB,   8, 
                        Offset (0xA0), 
                        QBHK,   8, 
                        Offset (0xA3), 
                        CBSC,   8, 
                        MBTS,   1, 
                        MBTF,   1, 
                            ,   5, 
                        BACR,   1, 
                        MBTC,   1, 
                            ,   2, 
                        MBNH,   1, 
                        Offset (0xA6), 
                            ,   4, 
                            ,   1, 
                        BLWK,   1, 
                            ,   1, 
                        Offset (0xA7), 
                            ,   2, 
                        BERR,   1, 
                        FPRP,   1, 
                            ,   3, 
                        TDEN,   1, 
                        Offset (0xAA), 
                        LKCC,   1, 
                        LKBE,   1, 
                        LKBC,   1, 
                        LKBS,   1, 
                        LKBA,   4, 
                        Offset (0xB2), 
                        RPM1,   8, 
                        RPM2,   8, 
                        Offset (0xB7), 
                        VGAT,   8, 
                        UCS0,   1, 
                        UCS3,   1, 
                        UCS5,   1, 
                        Offset (0xB9), 
                        CBLW,   8, 
                        PXST,   8, 
                        CMAX,   8, 
                        MCEA,   8, 
                        Offset (0xC0), 
                            ,   1, 
                        JPKB,   1, 
                            ,   3, 
                        IDCU,   1, 
                            ,   1, 
                        RGBK,   1, 
                        LKBL,   4, 
                        LKBM,   4, 
                        TMOD,   8, 
                        Offset (0xC6), 
                        MCPE,   1, 
                        MCPW,   1, 
                            ,   1, 
                        S5PO,   1, 
                        Offset (0xC7), 
                        Offset (0xCA), 
                        FN1R,   16, 
                        FN2R,   16, 
                        Offset (0xCF), 
                        DLYC,   8, 
                        EBPL,   1, 
                        Offset (0xD1), 
                        Offset (0xD4), 
                        PSHD,   8, 
                        PSLD,   8, 
                        Offset (0xDA), 
                        PSIN,   8, 
                        PSKB,   1, 
                        PSTP,   1, 
                            ,   1, 
                        PWOL,   1, 
                        PRTC,   1, 
                            ,   1, 
                            ,   1, 
                        USBW,   1, 
                        OWNR,   8, 
                        Offset (0xDF), 
                        ECBW,   1, 
                        Offset (0xE0), 
                        DLYT,   8, 
                        DLY2,   8, 
                        VBRT,   8, 
                        BADJ,   8, 
                        Offset (0xE6), 
                        SFHK,   8, 
                        Offset (0xF0), 
                        ENDT,   8, 
                        Offset (0xF2), 
                            ,   5, 
                        WLPW,   1, 
                        WLPS,   1, 
                        Offset (0xF3), 
                        Offset (0xF4), 
                        SFAN,   8, 
                        Offset (0xF8), 
                        BAAE,   1, 
                        S3WA,   1, 
                        BNAC,   1, 
                            ,   1, 
                        EFS3,   1, 
                        S3WK,   1, 
                        RSAL,   1, 
                        Offset (0xF9), 
                        Offset (0xFA), 
                        VERN,   32
                    }

                    OperationRegion (XEC1, SystemMemory, 0xFE700100, 0x0100)
                    Field (XEC1, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x86), 
                        CTMP,   8
                    }

                    OperationRegion (XEC3, SystemMemory, 0xFE700300, 0x0100)
                    Field (XEC3, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x34), 
                        ATEL,   8, 
                        ATEH,   8, 
                        ATFL,   8, 
                        ATFH,   8, 
                        Offset (0x40), 
                        XW2S,   1, 
                            ,   2, 
                        XCCT,   1, 
                        XRPM,   1, 
                        Offset (0x41), 
                        XIN7,   1, 
                            ,   3, 
                        XXFG,   1, 
                            ,   1, 
                            ,   1, 
                        Offset (0x42), 
                        BTSM,   1, 
                        BTBM,   1, 
                            ,   1, 
                            ,   2, 
                        XWFG,   2, 
                        XVCF,   1, 
                        XBDA,   1, 
                        XIRB,   1, 
                            ,   1, 
                        XNOV,   1, 
                        XFXT,   1, 
                            ,   1, 
                        XP12,   1, 
                        Offset (0x44), 
                        Offset (0x45), 
                            ,   2, 
                        XUCR,   1, 
                            ,   1, 
                        XIN8,   1, 
                        Offset (0x46), 
                        Offset (0x47), 
                        XPTJ,   8, 
                        XTCR,   8, 
                        Offset (0x4A), 
                        XTPT,   1, 
                        Offset (0x4B), 
                        XUTS,   1, 
                        XUTA,   1, 
                        XLEX,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        Offset (0x4C), 
                        XKOK,   8, 
                        XSBM,   1, 
                        XLMO,   1, 
                            ,   1, 
                        XOSD,   1, 
                            ,   3, 
                        Offset (0x4E), 
                        Offset (0x4F), 
                        X2DA,   8, 
                        XWNK,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                        XIDS,   1, 
                        XBSS,   1, 
                            ,   1, 
                        XRDS,   1, 
                        Offset (0x53), 
                        Offset (0x56), 
                        PNLT,   8, 
                        Offset (0x58), 
                        XTMP,   8, 
                        XCT1,   8, 
                        XCT2,   8, 
                        XG5B,   8, 
                        XSPD,   16, 
                        Offset (0x5F), 
                            ,   3, 
                        XNTP,   1, 
                        Offset (0x60), 
                        Offset (0x62), 
                        XCTH,   8, 
                        XCTL,   8, 
                        Offset (0x65), 
                        XMDF,   4, 
                        Offset (0x66), 
                        Offset (0x67), 
                            ,   2, 
                        X6AC,   1, 
                        X6RE,   1, 
                            ,   3, 
                        XCSP,   1, 
                        XOVA,   8, 
                        Offset (0x6B), 
                        XCBR,   8, 
                        XWKR,   8, 
                        Offset (0x6E), 
                        XTLW,   8, 
                        Offset (0x70), 
                        XSCP,   16, 
                        XACP,   16, 
                        XSVG,   16, 
                        Offset (0x77), 
                        XANA,   64, 
                        Offset (0x81), 
                        XL1S,   3, 
                        Offset (0x82), 
                        XBST,   8, 
                        XCUR,   16, 
                        XBRM,   16, 
                        XBCV,   16, 
                        XKBR,   8, 
                        XKBG,   8, 
                        XKBB,   8, 
                        Offset (0x9F), 
                        FNCK,   1, 
                        Offset (0xA0), 
                        XBHK,   8, 
                        Offset (0xA2), 
                        Offset (0xA3), 
                        XBSC,   8, 
                        XBTS,   1, 
                        XBTF,   1, 
                            ,   5, 
                        XACR,   1, 
                        XBTC,   1, 
                            ,   2, 
                        XBNH,   1, 
                        Offset (0xA6), 
                            ,   4, 
                            ,   1, 
                        XLWK,   1, 
                            ,   1, 
                        Offset (0xA7), 
                            ,   2, 
                        XERR,   1, 
                        XPRP,   1, 
                            ,   3, 
                        XDEN,   1, 
                        ENWD,   1, 
                        TMPR,   1, 
                        Offset (0xA9), 
                        Offset (0xAA), 
                        XKCC,   1, 
                        XKBE,   1, 
                        XKBC,   1, 
                        XKBS,   1, 
                        XKBA,   4, 
                        Offset (0xAF), 
                        Offset (0xB0), 
                        FNRL,   8, 
                        FNRH,   8, 
                        XPM1,   8, 
                        XPM2,   8, 
                        Offset (0xB7), 
                        XGAT,   8, 
                        XCS0,   1, 
                        XCS3,   1, 
                        XCS5,   1, 
                        Offset (0xB9), 
                        XBLW,   8, 
                        XXST,   8, 
                        XMAX,   8, 
                        XCEA,   8, 
                        XBID,   8, 
                        Offset (0xC0), 
                            ,   1, 
                        XPKB,   1, 
                            ,   3, 
                        XDCU,   1, 
                            ,   1, 
                        XGBK,   1, 
                        XKBL,   4, 
                        XKBM,   4, 
                        XMOD,   8, 
                        Offset (0xC6), 
                        XCPE,   1, 
                        XCPW,   1, 
                            ,   1, 
                        X5PO,   1, 
                        Offset (0xC7), 
                        Offset (0xCA), 
                        XN1R,   16, 
                        XN2R,   16, 
                        Offset (0xCF), 
                        XLYC,   8, 
                        XBPL,   1, 
                        Offset (0xD1), 
                        Offset (0xD4), 
                        XSHD,   8, 
                        XSLD,   8, 
                        Offset (0xDA), 
                        XSIN,   8, 
                        XSKB,   1, 
                        XSTP,   1, 
                            ,   1, 
                        XWOL,   1, 
                        XRTC,   1, 
                            ,   1, 
                            ,   1, 
                        XSBW,   1, 
                        XWNR,   8, 
                        Offset (0xDF), 
                        XCBW,   1, 
                        Offset (0xE0), 
                        XLYT,   8, 
                        XLY2,   8, 
                        XBRT,   8, 
                        XADJ,   8, 
                        Offset (0xE6), 
                        XFHK,   8, 
                        Offset (0xF0), 
                        XNDT,   8, 
                        Offset (0xF2), 
                            ,   5, 
                        XLPW,   1, 
                        XLPS,   1, 
                        Offset (0xF3), 
                        Offset (0xF4), 
                        XFAN,   8, 
                        Offset (0xF8), 
                        XAAE,   1, 
                        X3WA,   1, 
                        XNAC,   1, 
                            ,   1, 
                        XFS3,   1, 
                        X3WK,   1, 
                        XSAL,   1, 
                        Offset (0xF9), 
                        Offset (0xFA), 
                        XERN,   32
                    }

                    OperationRegion (XEC4, SystemMemory, 0xFE700400, 0x0100)
                    Field (XEC4, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x2C), 
                        EBID,   8, 
                        Offset (0x6E), 
                        BATH,   8, 
                        BATL,   8
                    }

                    OperationRegion (XECA, SystemMemory, 0xFE700A00, 0x0100)
                    Field (XECA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x60), 
                        BTMN,   128, 
                        BTSS,   256
                    }

                    OperationRegion (XECB, SystemMemory, 0xFE700B00, 0x0100)
                    Field (XECB, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x90), 
                        CRLO,   8, 
                        CRHI,   8, 
                        FSLO,   8, 
                        FSHI,   8, 
                        CPUT,   8, 
                        GNLO,   8, 
                        GNHI,   8, 
                        FRPR,   8, 
                        HYST,   8, 
                        Offset (0x9F), 
                        MCBL,   8, 
                        Offset (0xA1), 
                        Offset (0xA2), 
                        Offset (0xA3), 
                        LPWM,   8, 
                        ANXC,   8, 
                        ANXD,   8, 
                        ANXO,   8, 
                        ANWD,   32, 
                        ANRD,   32
                    }

                    OperationRegion (XECC, SystemMemory, 0xFE700C00, 0x0100)
                    Field (XECC, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x01), 
                        PDCT,   8, 
                        Offset (0x4C), 
                        PDFV,   16, 
                        Offset (0x56), 
                        PDVH,   8, 
                        PVLI,   8, 
                        PDAH,   8, 
                        PDAL,   8
                    }

                    OperationRegion (XECD, SystemMemory, 0xFE700D00, 0x0100)
                    Field (XECD, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0xA0), 
                        VER1,   8, 
                        VER2,   8, 
                        RSV1,   8, 
                        RSV2,   8, 
                        CCI0,   8, 
                        CCI1,   8, 
                        CCI2,   8, 
                        CCI3,   8, 
                        CTL0,   8, 
                        CTL1,   8, 
                        CTL2,   8, 
                        CTL3,   8, 
                        CTL4,   8, 
                        CTL5,   8, 
                        CTL6,   8, 
                        CTL7,   8, 
                        MGI0,   8, 
                        MGI1,   8, 
                        MGI2,   8, 
                        MGI3,   8, 
                        MGI4,   8, 
                        MGI5,   8, 
                        MGI6,   8, 
                        MGI7,   8, 
                        MGI8,   8, 
                        MGI9,   8, 
                        MGIA,   8, 
                        MGIB,   8, 
                        MGIC,   8, 
                        MGID,   8, 
                        MGIE,   8, 
                        MGIF,   8, 
                        MGO0,   8, 
                        MGO1,   8, 
                        MGO2,   8, 
                        MGO3,   8, 
                        MGO4,   8, 
                        MGO5,   8, 
                        MGO6,   8, 
                        MGO7,   8, 
                        MGO8,   8, 
                        MGO9,   8, 
                        MGOA,   8, 
                        MGOB,   8, 
                        MGOC,   8, 
                        MGOD,   8, 
                        MGOE,   8, 
                        MGOF,   8
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((Arg0 == 0x03))
                        {
                            OKEC = Arg1
                            GBAS ()
                        }
                    }

                    Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = One
                    }

                    Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x02
                    }

                    Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x03
                    }

                    Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x04
                    }

                    Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x09
                    }

                    Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x0C
                    }

                    Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x0D
                    }

                    Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x10
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x11
                    }

                    Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x15
                    }

                    Method (GBAS, 0, NotSerialized)
                    {
                        If ((OKEC == One))
                        {
                            BATF = Zero
                            Local0 = MBTS /* \_SB_.PCI0.LPC0.EC0_.MBTS */
                            Local1 = SW2S /* \_SB_.PCI0.LPC0.EC0_.SW2S */
                            Local0 <<= 0x06
                            Local1 <<= One
                            If (((BATO & 0x40) != Local0))
                            {
                                BATF |= 0x40
                            }

                            If (((BATO & 0x02) != Local1))
                            {
                                BATF |= 0x02
                            }

                            BATO = Zero
                            BATO = (Local0 | Local1)
                        }
                    }

                    Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x20
                        If ((OKEC == One))
                        {
                            GBAS ()
                            If ((0x40 & BATF))
                            {
                                Notify (BAT1, 0x81) // Information Change
                            }

                            If ((0x02 & BATF))
                            {
                                Notify (ACAD, 0x80) // Status Change
                            }

                            Notify (BAT1, 0x80) // Status Change
                        }
                    }

                    Method (_Q21, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x21
                    }

                    Method (_Q22, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x22
                    }

                    Method (_Q28, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x28
                    }

                    Method (_Q2A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x2A
                        Notify (BAT1, 0x81) // Information Change
                        Notify (BAT1, 0x80) // Status Change
                    }

                    Method (_Q2E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x2E
                        BACR = Zero
                        Notify (BAT1, 0x80) // Status Change
                    }

                    Method (_Q30, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x30
                    }

                    Method (_Q31, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x31
                    }

                    Method (_Q32, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x32
                    }

                    Method (_Q33, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x33
                    }

                    Method (_Q34, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x34
                        ENWD = Zero
                    }

                    Method (_Q37, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x37
                    }

                    Method (_Q38, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x38
                    }

                    Method (_Q39, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x39
                    }

                    Method (_Q40, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x40
                    }

                    Method (_Q46, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x46
                    }

                    Method (_Q47, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x47
                    }

                    Method (_Q49, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x49
                    }

                    Method (_Q4C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x4C
                    }

                    Method (_Q4D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x4D
                    }

                    Method (_Q50, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x50
                    }

                    Method (_Q51, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x51
                    }

                    Method (_Q52, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x52
                    }

                    Method (_Q60, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x60
                    }

                    Method (_Q69, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x69
                    }

                    Method (_Q6E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x6E
                    }

                    Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x70
                    }

                    Method (_Q71, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x71
                    }

                    Method (_Q75, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x75
                    }

                    Method (_Q76, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x76
                    }

                    Method (_Q77, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x77
                    }

                    Method (_Q78, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x78
                    }

                    Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x80
                    }

                    Method (_Q83, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x83
                    }

                    Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x87
                    }

                    Method (_Q88, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x88
                    }

                    Method (_Q89, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x89
                    }

                    Method (_Q8A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x8A
                    }

                    Method (_Q8B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x8B
                    }

                    Method (_Q8C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x8C
                    }

                    Method (_Q8D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x8D
                    }

                    Method (_Q8E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x8E
                    }

                    Method (_Q8F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x8F
                    }

                    Method (_Q91, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x91
                    }

                    Method (_Q92, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x92
                    }

                    Method (_Q93, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x93
                    }

                    Method (_Q94, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x94
                    }

                    Method (_Q96, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x96
                    }

                    Method (_Q99, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x99
                    }

                    Method (_Q9C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x9C
                        If ((^VFCD.VPME == One))
                        {
                            Notify (VFCD, 0x80) // Status Change
                        }
                    }

                    Method (_QA0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xA0
                    }

                    Method (_QA8, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xA8
                    }

                    Method (_QE2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xE2
                    }

                    Method (_QE3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xE3
                    }

                    Method (_QF1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xF1
                    }

                    Method (_QF2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xF2
                    }

                    Scope (\_SB.PCI0.LPC0.EC0)
                    {
                        Device (VFCD)
                        {
                            Name (_HID, EisaId ("VLV0100"))  // _HID: Hardware ID
                            Name (VPME, Zero)
                            Method (_INI, 0, NotSerialized)  // _INI: Initialize
                            {
                                VPME = One
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }

                            Method (FANS, 1, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = Zero
                                    Local1 = Zero
                                    Local0 = Arg0
                                    Local1 = (Arg0 >> 0x08)
                                    If ((Local0 == Zero))
                                    {
                                        FSHI = Zero
                                        FSLO = Zero
                                        IO6C = 0xCD
                                    }
                                    ElseIf (((Local0 >= One) & (Local0 <= 0x1C84)))
                                    {
                                        Local0 &= 0xFF
                                        Local1 &= 0xFF
                                        FSHI = Local1
                                        FSLO = Local0
                                        IO6C = 0xCC
                                    }
                                    ElseIf ((Local0 > 0x1C84))
                                    {
                                        FSHI = 0x1C
                                        FSLO = 0x84
                                        IO6C = 0xCC
                                    }

                                    Release (Z009)
                                }
                            }

                            Method (FSSR, 0, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = Zero
                                    Local0 = (FSHI << 0x08)
                                    Local0 += FSLO /* \_SB_.PCI0.LPC0.EC0_.FSLO */
                                    Release (Z009)
                                }

                                Return (Local0)
                            }

                            Method (FANR, 0, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = Zero
                                    Local0 = (FNRH << 0x08)
                                    Local0 += FNRL /* \_SB_.PCI0.LPC0.EC0_.FNRL */
                                    Release (Z009)
                                }

                                Return (Local0)
                            }

                            Method (FANC, 0, NotSerialized)
                            {
                                If ((FNCK == One))
                                {
                                    If ((CTMP > 0x5F))
                                    {
                                        Return (0x02)
                                    }
                                    Else
                                    {
                                        Return (One)
                                    }
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (CHGR, 1, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = Zero
                                    Local1 = Zero
                                    Local0 = Arg0
                                    Local1 = (Arg0 >> 0x08)
                                    If (((Local0 >= 0xFA) & (Local0 <= 0x09C4)))
                                    {
                                        Local0 &= 0xFF
                                        Local1 &= 0xFF
                                        CRHI = Local1
                                        CRLO = Local0
                                    }

                                    Release (Z009)
                                }
                            }

                            Method (CHBV, 1, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = Zero
                                    Local0 = Arg0
                                    If (((Local0 >= Zero) & (Local0 <= 0x64)))
                                    {
                                        Local0 &= 0x7F
                                        LPWM = Local0
                                    }

                                    Release (Z009)
                                }
                            }

                            Method (RDDI, 1, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = (Arg0 << 0x08)
                                    Local0 += 0x06
                                    ANW4 (0x0C, 0x6C, 0x0137)
                                    ANW4 (0x0C, 0x6C, Local0)
                                    Sleep (0x14)
                                    ANR4 (0xC0, 0x70)
                                    Release (Z009)
                                }

                                Return (ANRD) /* \_SB_.PCI0.LPC0.EC0_.ANRD */
                            }

                            Method (CABC, 1, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = (Arg0 << 0x10)
                                    Local0 += 0x5515
                                    ANW1 (0x08, 0x19, 0x10)
                                    ANW4 (0xC0, 0x6C, Local0)
                                    Release (Z009)
                                }
                            }

                            Method (GAMA, 1, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = (Arg0 << 0x10)
                                    Local0 += 0x2615
                                    ANW1 (0x08, 0x19, 0x10)
                                    ANW4 (0xC0, 0x6C, Local0)
                                    Release (Z009)
                                }
                            }

                            Method (WDBV, 1, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = (Arg0 << 0x10)
                                    Local0 += 0x5115
                                    ANW1 (0x08, 0x19, 0x10)
                                    ANW4 (0xC0, 0x6C, Local0)
                                    Release (Z009)
                                }
                            }

                            Method (WCDV, 1, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = (Arg0 << 0x10)
                                    Local0 += 0x5315
                                    ANW1 (0x08, 0x19, 0x10)
                                    ANW4 (0xC0, 0x6C, Local0)
                                    Release (Z009)
                                }
                            }

                            Method (WCMB, 1, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = (Arg0 << 0x10)
                                    Local0 += 0x5E15
                                    ANW1 (0x08, 0x19, 0x10)
                                    ANW4 (0xC0, 0x6C, Local0)
                                    Release (Z009)
                                }
                            }

                            Method (NORO, 0, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = 0x1305
                                    ANW1 (0x08, 0x19, 0x10)
                                    ANW4 (0xC0, 0x6C, Local0)
                                    Release (Z009)
                                }
                            }

                            Method (INOF, 0, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = 0x2005
                                    ANW1 (0x08, 0x19, 0x10)
                                    ANW4 (0xC0, 0x6C, Local0)
                                    Release (Z009)
                                }
                            }

                            Method (INON, 0, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = 0x2105
                                    ANW1 (0x08, 0x19, 0x10)
                                    ANW4 (0xC0, 0x6C, Local0)
                                    Release (Z009)
                                }
                            }

                            Method (MDAC, 1, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = (Arg0 << 0x10)
                                    Local0 += 0x3615
                                    ANW1 (0x08, 0x19, 0x10)
                                    ANW4 (0xC0, 0x6C, Local0)
                                    Release (Z009)
                                }
                            }

                            Method (WRNE, 0, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = 0x3905
                                    ANW1 (0x08, 0x19, 0x10)
                                    ANW4 (0xC0, 0x6C, Local0)
                                    Release (Z009)
                                }
                            }

                            Method (ANR1, 2, NotSerialized)
                            {
                                ANRD = Zero
                                ANXD = Arg0
                                ANXO = Arg1
                                ANXC = 0x81
                                While ((ANXC & 0x80))
                                {
                                    Sleep (One)
                                }
                            }

                            Method (ANW1, 3, NotSerialized)
                            {
                                ANWD = Zero
                                ANXD = Arg0
                                ANXO = Arg1
                                Local0 = Arg2
                                ANWD = (Local0 & 0xFF)
                                ANXC = 0x82
                                While ((ANXC & 0x80))
                                {
                                    Sleep (One)
                                }
                            }

                            Method (ANR4, 2, NotSerialized)
                            {
                                ANRD = Zero
                                ANXD = Arg0
                                ANXO = Arg1
                                ANXC = 0x83
                                While ((ANXC & 0x80))
                                {
                                    Sleep (One)
                                }
                            }

                            Method (ANW4, 3, NotSerialized)
                            {
                                ANWD = Zero
                                ANXD = Arg0
                                ANXO = Arg1
                                ANWD = Arg2
                                ANXC = 0x84
                                While ((ANXC & 0x80))
                                {
                                    Sleep (One)
                                }
                            }

                            Method (DPCY, 0, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    IO6C = 0xCB
                                    Release (Z009)
                                }
                            }

                            Method (BATT, 0, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = Zero
                                    Local0 = (BATH << 0x08)
                                    Local0 += BATL /* \_SB_.PCI0.LPC0.EC0_.BATL */
                                    Local0 = ((Local0 - 0x0AAC) / 0x0A)
                                    Release (Z009)
                                }

                                Return (Local0)
                            }

                            Method (PDFW, 0, NotSerialized)
                            {
                                Return (PDFV) /* \_SB_.PCI0.LPC0.EC0_.PDFV */
                            }

                            Method (BOID, 0, NotSerialized)
                            {
                                Return (XBID) /* \_SB_.PCI0.LPC0.EC0_.XBID */
                            }

                            Method (PANR, 0, NotSerialized)
                            {
                                Return (PNLT) /* \_SB_.PCI0.LPC0.EC0_.PNLT */
                            }

                            Method (PDCS, 0, NotSerialized)
                            {
                                Return (PDCT) /* \_SB_.PCI0.LPC0.EC0_.PDCT */
                            }

                            Method (PDVL, 0, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = Zero
                                    Local0 = (PDVH << 0x08)
                                    Local0 += PVLI /* \_SB_.PCI0.LPC0.EC0_.PVLI */
                                    Release (Z009)
                                }

                                Return ((Local0 * 0x32))
                            }

                            Method (PDAM, 0, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = Zero
                                    Local0 = (PDAH << 0x08)
                                    Local0 += PDAL /* \_SB_.PCI0.LPC0.EC0_.PDAL */
                                    Release (Z009)
                                }

                                Return ((Local0 * 0x0A))
                            }

                            Method (FCBL, 1, NotSerialized)
                            {
                                If (!Acquire (Z009, 0x012C))
                                {
                                    Local0 = Zero
                                    Local0 = Arg0
                                    If (((Local0 >= Zero) & (Local0 <= 0x64)))
                                    {
                                        Local0 &= 0x7F
                                        MCBL = Local0
                                    }

                                    Release (Z009)
                                }

                                Return (MCBL) /* \_SB_.PCI0.LPC0.EC0_.MCBL */
                            }
                        }
                    }
                }

                Mutex (PSMX, 0x00)
            }
        }

        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            If (Local1)
            {
                Local1 = Zero
            }

            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            If (PICM)
            {
                HDAD = Arg0
                SDCL = Arg0
            }
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            If (PICM)
            {
                USB1 = Arg0
                USB3 = Arg0
            }
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            If (PICM)
            {
                SATA = Arg0
            }
        }

        Name (PRS1, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,5,6,10,11}
        })
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRA && (PIRA != 0x1F)))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRB && (PIRB != 0x1F)))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRC && (PIRC != 0x1F)))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRD && (PIRD != 0x1F)))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRE && (PIRE != 0x1F)))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRF && (PIRF != 0x1F)))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRG && (PIRG != 0x1F)))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRH && (PIRH != 0x1F)))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }

        Method (GSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xE4
            Sleep (0x02)
        }

        Method (S80H, 1, NotSerialized)
        {
            P80H = Arg0
        }

        Method (BSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xBE
            Sleep (One)
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Return (One)
            }
        }

        Device (ACAD)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (XX00, Buffer (0x03){})
            Name (ACDC, 0xFF)
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                CreateWordField (XX00, Zero, SSZE)
                CreateByteField (XX00, 0x02, ACST)
                SSZE = 0x03
                If (!Acquire (^^PCI0.LPC0.EC0.Z009, 0x012C))
                {
                    If ((^^PCI0.LPC0.EC0.OKEC == One))
                    {
                        Local0 = ^^PCI0.LPC0.EC0.SW2S /* \_SB_.PCI0.LPC0.EC0_.SW2S */
                    }
                    Else
                    {
                        Local0 = Zero
                    }

                    If ((Local0 != ACDC))
                    {
                        If (Local0)
                        {
                            P80H = 0xECAC
                            AFN4 (One)
                            ACST = Zero
                        }
                        Else
                        {
                            P80H = 0xECDC
                            AFN4 (0x02)
                            ACST = One
                        }

                        ALIB (One, XX00)
                        ACDC = Local0
                    }

                    Release (^^PCI0.LPC0.EC0.Z009)
                }

                Return (Local0)
            }
        }

        Scope (\_SB)
        {
            Method (POSW, 1, NotSerialized)
            {
                If ((Arg0 & 0x8000))
                {
                    If ((Arg0 == 0xFFFF))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Local0 = ~Arg0
                        Local0++
                        Local0 &= 0xFFFF
                        Return (Local0)
                    }
                }
                Else
                {
                    Return (Arg0)
                }
            }

            Device (BAT1)
            {
                Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
                {
                    Return (_SB) /* \_SB_ */
                }

                Name (BTUR, Zero)
                Name (PBIF, Package (0x0D)
                {
                    One, 
                    Ones, 
                    Ones, 
                    One, 
                    Ones, 
                    0x64, 
                    0x32, 
                    0x0A, 
                    0x19, 
                    "BAT1", 
                    " ", 
                    " ", 
                    " "
                })
                Name (PBST, Package (0x04)
                {
                    Zero, 
                    Ones, 
                    Ones, 
                    0x2710
                })
                Name (B1ST, 0x0F)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (^^PCI0.LPC0.EC0.OKEC)
                    {
                        If (^^PCI0.LPC0.EC0.XBTS)
                        {
                            B1ST = 0x1F
                        }
                        Else
                        {
                            B1ST = 0x0F
                        }
                    }
                    Else
                    {
                        B1ST = 0x0F
                    }

                    Return (B1ST) /* \_SB_.BAT1.B1ST */
                }

                Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                {
                    If (!Acquire (^^PCI0.LPC0.EC0.Z009, 0x012C))
                    {
                        If (^^PCI0.LPC0.EC0.OKEC)
                        {
                            If (^^PCI0.LPC0.EC0.XBTS)
                            {
                                UPBI ()
                            }
                            Else
                            {
                                IVBI ()
                            }
                        }
                        Else
                        {
                            IVBI ()
                        }

                        Release (^^PCI0.LPC0.EC0.Z009)
                    }

                    Return (PBIF) /* \_SB_.BAT1.PBIF */
                }

                Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                {
                    If (!Acquire (^^PCI0.LPC0.EC0.Z009, 0x012C))
                    {
                        If (^^PCI0.LPC0.EC0.OKEC)
                        {
                            If (^^PCI0.LPC0.EC0.XBTS)
                            {
                                UPBS ()
                            }
                            Else
                            {
                                IVBS ()
                            }
                        }
                        Else
                        {
                            IVBS ()
                        }

                        Release (^^PCI0.LPC0.EC0.Z009)
                    }

                    Return (PBST) /* \_SB_.BAT1.PBST */
                }

                Method (UPBI, 0, NotSerialized)
                {
                    PBIF [One] = ^^PCI0.LPC0.EC0.XSCP /* \_SB_.PCI0.LPC0.EC0_.XSCP */
                    PBIF [0x02] = ^^PCI0.LPC0.EC0.XACP /* \_SB_.PCI0.LPC0.EC0_.XACP */
                    PBIF [0x04] = ^^PCI0.LPC0.EC0.XSVG /* \_SB_.PCI0.LPC0.EC0_.XSVG */
                    PBIF [0x05] = (^^PCI0.LPC0.EC0.XSCP / 0x0A)
                    PBIF [0x06] = (^^PCI0.LPC0.EC0.XSCP / 0x64)
                    PBIF [0x09] = ToString (^^PCI0.LPC0.EC0.BTMN, Ones)
                    PBIF [0x0A] = ToString (^^PCI0.LPC0.EC0.BTSS, Ones)
                }

                Method (UPBS, 0, NotSerialized)
                {
                    If ((^^PCI0.LPC0.EC0.XBRM == Zero))
                    {
                        BTUR = One
                    }
                    ElseIf ((BTUR == One))
                    {
                        Notify (BAT1, 0x81) // Information Change
                        Notify (BAT1, 0x80) // Status Change
                        BTUR = Zero
                    }

                    Local5 = ^^PCI0.LPC0.EC0.XCUR /* \_SB_.PCI0.LPC0.EC0_.XCUR */
                    PBST [One] = POSW (Local5)
                    Local5 = ^^PCI0.LPC0.EC0.XBRM /* \_SB_.PCI0.LPC0.EC0_.XBRM */
                    If ((^^PCI0.LPC0.EC0.XACR == One))
                    {
                        Local5 = ((^^PCI0.LPC0.EC0.XSCP / 0x32) + ^^PCI0.LPC0.EC0.XBRM) /* \_SB_.PCI0.LPC0.EC0_.XBRM */
                    }

                    Local5 = ^^PCI0.LPC0.EC0.XBRM /* \_SB_.PCI0.LPC0.EC0_.XBRM */
                    If (!(Local5 & 0x8000))
                    {
                        If ((Local5 != DerefOf (PBST [0x02])))
                        {
                            PBST [0x02] = Local5
                        }
                    }

                    PBST [0x03] = ^^PCI0.LPC0.EC0.XBCV /* \_SB_.PCI0.LPC0.EC0_.XBCV */
                    PBST [Zero] = ^^PCI0.LPC0.EC0.XBST /* \_SB_.PCI0.LPC0.EC0_.XBST */
                }

                Method (IVBI, 0, NotSerialized)
                {
                    PBIF [One] = Ones
                    PBIF [0x02] = Ones
                    PBIF [0x04] = Ones
                    PBIF [0x09] = "Bad"
                    PBIF [0x0A] = "Bad"
                    PBIF [0x0B] = "Bad"
                    PBIF [0x0C] = "Bad"
                    ^^PCI0.LPC0.EC0.XANA = Zero
                }

                Method (IVBS, 0, NotSerialized)
                {
                    PBST [Zero] = Zero
                    PBST [One] = Ones
                    PBST [0x02] = Ones
                    PBST [0x03] = 0x2710
                }

                Method (_BCT, 1, NotSerialized)  // _BCT: Battery Charge Time
                {
                    If (((Arg0 > 0x64) || (Arg0 < One)))
                    {
                        Return (Zero)
                    }

                    If (^^PCI0.LPC0.EC0.OKEC)
                    {
                        Local0 = Zero
                        Local1 = Zero
                        Local0 = (^^PCI0.LPC0.EC0.ATFH << 0x08)
                        Local0 += ^^PCI0.LPC0.EC0.ATFL /* \_SB_.PCI0.LPC0.EC0_.ATFL */
                        If ((Local0 == 0xFFFF))
                        {
                            Return (Ones)
                        }

                        Local1 = (Local0 * 0x3C)
                        Return (Local1)
                    }

                    Return (Ones)
                }

                Method (_BTM, 1, NotSerialized)  // _BTM: Battery Time
                {
                    If (^^PCI0.LPC0.EC0.OKEC)
                    {
                        Local0 = Zero
                        Local1 = Zero
                        Local0 = (^^PCI0.LPC0.EC0.ATEH << 0x08)
                        Local0 += ^^PCI0.LPC0.EC0.ATEL /* \_SB_.PCI0.LPC0.EC0_.ATEL */
                        If ((Local0 == 0xFFFF))
                        {
                            Return (Ones)
                        }

                        Local1 = (Local0 * 0x3C)
                        Return (Local1)
                    }

                    Return (Ones)
                }
            }
        }
    }

    Name (TSOS, 0x75)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
            UT4E,   1, 
                ,   2, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   1, 
            UT4D,   1, 
                ,   2, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA306C), 
            RAR2,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        OperationRegion (SPIM, SystemMemory, 0xFEC13000, 0x0100)
        Field (SPIM, AnyAcc, NoLock, Preserve)
        {
            Offset (0x1D), 
            ASCE,   2, 
            Offset (0x22), 
            SSSC,   16, 
            Offset (0xFC), 
            STRN,   1, 
                ,   2, 
            BOWS,   1, 
            DOWS,   1
        }

        Mutex (ASSM, 0x00)
        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        CreateWordField (SVBF, 0x14, RG22)
        CreateDWordField (SVBF, 0x18, SAR2)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg0 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (SPI1)
        {
            Name (_HID, "AMDI0062")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC13000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.SPI1._CRS.RBUF */
            }

            Method (ASSC, 2, Serialized)
            {
                Acquire (ASSM, 0xFFFF)
                Local0 = Arg1
                Switch (ToInteger (Arg0))
                {
                    Case (0x03)
                    {
                        DOWS = One
                        STRN = One
                        While ((BOWS && STRN))
                        {
                            If (Arg1)
                            {
                                Stall (One)
                                Local0 -= One
                                If ((Local0 == Zero))
                                {
                                    Break
                                }
                            }
                        }

                        SAR2 = RAR2 /* \_SB_.RAR2 */
                        RAR2 = Zero
                        ASCE = 0x02
                        RG22 = SSSC /* \_SB_.SSSC */
                    }
                    Case (0x04)
                    {
                        SSSC = RG22 /* \_SB_.RG22 */
                        ASCE = Zero
                        RAR2 = SAR2 /* \_SB_.SAR2 */
                        Local0 = One
                        DOWS = Zero
                    }

                }

                Release (ASSM)
                Return (Local0)
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDC9000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC7000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If (IER0)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCA000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC8000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If (UOL1)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDCE000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCC000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If (UOL2)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCF000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCD000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If (UOL3)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR4)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {15}
                Memory32Fixed (ReadWrite,
                    0xFEDD1000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDD0000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDC4000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {6}
                Memory32Fixed (ReadWrite,
                    0xFEDC5000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {14}
                Memory32Fixed (ReadWrite,
                    0xFEDC6000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {15}
                Memory32Fixed (ReadWrite,
                    0xFEDCB000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC5E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = Zero
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM4A = One
            IM58 = One
            IM4B = One
            IM57 = One
            IM6D = One
            IM1F = One
            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCI\\CC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If (EMMD)
                {
                    Return (SHID) /* \_SB_.SHID */
                }
                Else
                {
                    Return (AHID) /* \_SB_.AHID */
                }
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If (EMMD)
                {
                    Return (SCID) /* \_SB_.SCID */
                }
                Else
                {
                    Return (ACID) /* \_SB_.ACID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    Return (DCRS) /* \_SB_.DCRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }
        }

        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER0)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        )
                    IRQNoFlags (_Y09)
                        {3}
                })
                CreateWordField (BUF0, \_SB.UAR1._CRS._Y09._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR0, IRQL)
                Return (BUF0) /* \_SB_.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER1)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        )
                    IRQNoFlags (_Y0A)
                        {4}
                })
                CreateWordField (BUF0, \_SB.UAR2._CRS._Y0A._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR1, IRQL)
                Return (BUF0) /* \_SB_.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER2)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        )
                    IRQNoFlags (_Y0B)
                        {3}
                })
                CreateWordField (BUF0, \_SB.UAR3._CRS._Y0B._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR2, IRQL)
                Return (BUF0) /* \_SB_.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER3)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        )
                    IRQNoFlags (_Y0C)
                        {4}
                })
                CreateWordField (BUF0, \_SB.UAR4._CRS._Y0C._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR3, IRQL)
                Return (BUF0) /* \_SB_.UAR4._CRS.BUF0 */
            }
        }
    }

    Scope (_SB.FUR0)
    {
        Device (UART)
        {
            Name (_HID, "UTK0001")  // _HID: Hardware ID
            Name (_CID, "UARTTest")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                    0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                    0x0020, 0x0020, "\\_SB.FUR0",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.FUR1)
    {
        Device (UART)
        {
            Name (_HID, "UTK0001")  // _HID: Hardware ID
            Name (_CID, "UARTTest")  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                    0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                    0x0020, 0x0020, "\\_SB.FUR1",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CA)
    {
        Device (WTP1)
        {
            Name (_HID, "STK0001")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                    AddressingMode7Bit, "\\_SB.I2CA",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP1)
        {
            Name (_HID, "STK0001")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                    AddressingMode7Bit, "\\_SB_.I2CA",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WTP2)
        {
            Name (_HID, "STK0002")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                    AddressingMode7Bit, "\\_SB.I2CA",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP2)
        {
            Name (_HID, "STK0002")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB_.I2CA",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WTP3)
        {
            Name (_HID, "STK0003")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.I2CA",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP3)
        {
            Name (_HID, "STK0003")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                    AddressingMode7Bit, "\\_SB_.I2CA",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WTP4)
        {
            Name (_HID, "STK0004")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                    AddressingMode7Bit, "\\_SB.I2CA",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP4)
        {
            Name (_HID, "STK0004")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                    AddressingMode7Bit, "\\_SB_.I2CA",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP5)
        {
            Name (_HID, "STK0005")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                    AddressingMode7Bit, "\\_SB_.I2CA",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CB)
    {
        Device (WT21)
        {
            Name (_HID, "STK00012")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF2")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                    AddressingMode7Bit, "\\_SB.I2CB",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT21)
        {
            Name (_HID, "STK00012")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                    AddressingMode7Bit, "\\_SB_.I2CB",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT22)
        {
            Name (_HID, "STK00022")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF2")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                    AddressingMode7Bit, "\\_SB.I2CB",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT22)
        {
            Name (_HID, "STK00022")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB_.I2CB",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT23)
        {
            Name (_HID, "STK00032")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF2")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.I2CB",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT23)
        {
            Name (_HID, "STK00032")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                    AddressingMode7Bit, "\\_SB_.I2CB",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT24)
        {
            Name (_HID, "STK00042")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF2")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                    AddressingMode7Bit, "\\_SB.I2CB",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT24)
        {
            Name (_HID, "STK00042")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                    AddressingMode7Bit, "\\_SB_.I2CB",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT25)
        {
            Name (_HID, "STK00052")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                    AddressingMode7Bit, "\\_SB_.I2CB",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CC)
    {
        Device (WT31)
        {
            Name (_HID, "STK00013")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF3")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                    AddressingMode7Bit, "\\_SB.I2CC",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT31)
        {
            Name (_HID, "STK00013")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                    AddressingMode7Bit, "\\_SB_.I2CC",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT32)
        {
            Name (_HID, "STK00023")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF3")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                    AddressingMode7Bit, "\\_SB.I2CC",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT32)
        {
            Name (_HID, "STK00023")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB_.I2CC",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT33)
        {
            Name (_HID, "STK00033")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF3")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.I2CC",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT33)
        {
            Name (_HID, "STK00033")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                    AddressingMode7Bit, "\\_SB_.I2CC",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT34)
        {
            Name (_HID, "STK00043")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF3")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                    AddressingMode7Bit, "\\_SB.I2CC",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT34)
        {
            Name (_HID, "STK00043")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                    AddressingMode7Bit, "\\_SB_.I2CC",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT35)
        {
            Name (_HID, "STK00053")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                    AddressingMode7Bit, "\\_SB_.I2CC",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CD)
    {
        Device (WT41)
        {
            Name (_HID, "STK00014")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF4")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                    AddressingMode7Bit, "\\_SB.I2CD",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT41)
        {
            Name (_HID, "STK00014")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                    AddressingMode7Bit, "\\_SB_.I2CD",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT42)
        {
            Name (_HID, "STK00024")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF4")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                    AddressingMode7Bit, "\\_SB.I2CD",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT42)
        {
            Name (_HID, "STK00024")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB_.I2CD",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT43)
        {
            Name (_HID, "STK00034")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF4")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.I2CD",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT43)
        {
            Name (_HID, "STK00034")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                    AddressingMode7Bit, "\\_SB_.I2CD",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT44)
        {
            Name (_HID, "STK00044")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF4")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                    AddressingMode7Bit, "\\_SB.I2CD",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT44)
        {
            Name (_HID, "STK00044")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                    AddressingMode7Bit, "\\_SB_.I2CD",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT45)
        {
            Name (_HID, "STK00054")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                    AddressingMode7Bit, "\\_SB_.I2CD",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CB)
    {
        Device (TPNL)
        {
            Name (_HID, "FTS3528")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((^^^PCI0.LPC0.EC0.EBID == Zero))
                {
                    Name (RBU1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CB",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioInt (Level, ActiveLow, Exclusive, PullUp, 0x0000,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0044
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0045
                            }
                    })
                    Return (RBU1) /* \_SB_.I2CB.TPNL._CRS.RBU1 */
                }
                Else
                {
                    Name (RBU2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CB",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioInt (Level, ActiveLow, Exclusive, PullUp, 0x0000,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0054
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0055
                            }
                    })
                    Return (RBU2) /* \_SB_.I2CB.TPNL._CRS.RBU2 */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TPEN == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.I2CA)
    {
        Device (LGHT)
        {
            Name (_HID, "PRP0001")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_STR, Unicode ("OPT3001 Light Sensor"))  // _STR: Description String
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "compatible", 
                        "ti,opt3001"
                    }
                }
            })
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0044, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.I2CA",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((ALSE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (LTRF)
        {
            Name (_HID, "PRP0001")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_STR, Unicode ("LTRF216A Light Sensor"))  // _STR: Description String
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "compatible", 
                        "ltr,ltrf216a"
                    }
                }
            })
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0053, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.I2CA",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((ALSE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (NAUO)
        {
            Name (_HID, "NVTN2020")  // _HID: Hardware ID
            Name (_CID, "NVTN2020")  // _CID: Compatible ID
            Name (_DDN, "NAU8821")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x09)
                {
                    Package (0x02)
                    {
                        "nuvoton,jkdet-enable", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,jkdet-pull-enable", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,jkdet-pull-up", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,jkdet-polarity", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,micbias-voltage", 
                        0x06
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,vref-impedance", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,jack-insert-debounce", 
                        0x07
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,jack-eject-debounce", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,dmic-clk-threshold", 
                        DCLK
                    }
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((^^^PCI0.LPC0.EC0.EBID == Zero))
                {
                    Name (SBU1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x001B, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0056
                            }
                    })
                    Return (SBU1) /* \_SB_.I2CA.NAUO._CRS.SBU1 */
                }
                Else
                {
                    Name (SBU2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x001B, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x000C
                            }
                    })
                    Return (SBU2) /* \_SB_.I2CA.NAUO._CRS.SBU2 */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((AUCE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CC)
    {
        Device (CUR0)
        {
            Name (_HID, "PRP0001")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_STR, Unicode ("INA230 Current Sensor"))  // _STR: Description String
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "compatible", 
                        "ti,ina230"
                    }
                }
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0040, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF) /* \_SB_.I2CC.CUR0._CRS.SBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (CUR1)
        {
            Name (_HID, "PRP0001")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_STR, Unicode ("INA230 Current Sensor"))  // _STR: Description String
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "compatible", 
                        "ti,ina230"
                    }
                }
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0041, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF) /* \_SB_.I2CC.CUR1._CRS.SBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (CUR2)
        {
            Name (_HID, "PRP0001")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_STR, Unicode ("INA230 Current Sensor"))  // _STR: Description String
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "compatible", 
                        "ti,ina230"
                    }
                }
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0042, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF) /* \_SB_.I2CC.CUR2._CRS.SBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_TZ)
    {
        ThermalZone (TZ01)
        {
            Name (CRTT, 0x69)
            Name (PSVT, 0x64)
            Name (TSPS, 0x14)
            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PCI0.LPC0.ECOK ())
                {
                    If (!Acquire (\_SB.PCI0.LPC0.EC0.Z009, 0x012C))
                    {
                        Local0 = \_SB.PCI0.LPC0.EC0.CTMP
                        Release (\_SB.PCI0.LPC0.EC0.Z009)
                        Return ((0x0AAC + (Local0 * 0x0A)))
                    }

                    Return (0x0B74)
                }
                Else
                {
                    Return (0x0B74)
                }
            }

            Method (_PSL, 0, Serialized)  // _PSL: Passive List
            {
                Return (Package (0x08)
                {
                    \_SB.PLTF.C000, 
                    \_SB.PLTF.C001, 
                    \_SB.PLTF.C002, 
                    \_SB.PLTF.C003, 
                    \_SB.PLTF.C004, 
                    \_SB.PLTF.C005, 
                    \_SB.PLTF.C006, 
                    \_SB.PLTF.C007
                })
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return ((0x0AAC + (CRTT * 0x0A)))
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return ((0x0AAC + (PSVT * 0x0A)))
            }

            Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
            {
                Return (One)
            }

            Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
            {
                Return (0x02)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (TSPS) /* \_TZ_.TZ01.TSPS */
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (EXCO, SystemIO, 0x72, 0x02)
        Field (EXCO, ByteAcc, NoLock, Preserve)
        {
            INDT,   8, 
            DATT,   8
        }

        IndexField (INDT, DATT, ByteAcc, NoLock, Preserve)
        {
            Offset (0x88), 
                ,   2, 
            RTCS,   1, 
                ,   3, 
            PCIW,   1, 
            Offset (0x89), 
            Offset (0x90), 
                ,   4, 
            FL07,   1, 
            FL17,   1, 
            FL06,   1, 
            FL10,   1, 
            Offset (0x93), 
            BID0,   1, 
            BID1,   1, 
            BID2,   1, 
            BID3,   1, 
            BID4,   1, 
            BID5,   1, 
            BID6,   1, 
            BID7,   1, 
            Offset (0xA0), 
            OSDS,   8, 
            S4FG,   8, 
            TPID,   8, 
            Offset (0xA4), 
            W714,   8, 
            W715,   8, 
            W716,   8, 
            W717,   8, 
            Offset (0xDA), 
            FL0A,   1, 
            Offset (0xDB), 
            Offset (0xE0), 
            CME0,   16, 
            CME2,   16, 
            CME4,   16, 
            CME6,   16, 
            CME8,   16, 
            CMEA,   16, 
            CMEC,   16, 
            CMEE,   16, 
            Offset (0xF4), 
            CMF4,   8, 
            CMF5,   8, 
            CMF6,   8, 
            CMF7,   8, 
            CMF8,   8, 
            CMF9,   8, 
            CMFA,   8, 
            CMFB,   8, 
            CMFC,   8, 
            CMFD,   8, 
            CMFE,   8, 
            ECTY,   8
        }

        Method (CMSO, 2, NotSerialized)
        {
            INDT = Arg0
            DATT = Arg1
        }

        Method (CMRD, 1, NotSerialized)
        {
            INDT = Arg0
            Return (DATT) /* \_SB_.DATT */
        }
    }
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 0000010C
[008h 0008 001h]                    Revision : 05
[009h 0009 001h]                    Checksum : 1D
[00Ah 0010 006h]                      Oem ID : "AMDYDE"
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]                FACS Address : 7BEF7000
[028h 0040 004h]                DSDT Address : 7CFE0000
[02Ch 0044 001h]                       Model : 00
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B0
[034h 0052 001h]           ACPI Enable Value : A0
[035h 0053 001h]          ACPI Disable Value : A1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00000400
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000404
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00000800
[04Ch 0076 004h]      PM Timer Block Address : 00000408
[050h 0080 004h]          GPE0 Block Address : 00000420
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 08
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0064
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0000
[066h 0102 002h]          Cache Flush Stride : 0000
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 00
[06Dh 0109 002h]  Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 000085AD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 01 [Byte Access:8]
[078h 0120 008h]                     Address : 00000000000000B0

[080h 0128 001h]        Value to cause reset : FB
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 00
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 000000007CFE0000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 03 [DWord Access:32]
[098h 0152 008h]                     Address : 0000000000000400

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 00 [SystemMemory]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000000404

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 00 [SystemMemory]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 0000000000000800

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000000408

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 40
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 04 [QWord Access:64]
[0E0h 0224 008h]                     Address : 0000000000000420

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 00 [SystemMemory]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 00 [SystemMemory]
[0F5h 0245 001h]                   Bit Width : 00
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248 008h]                     Address : 0000000000000000

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 00 [SystemMemory]
[101h 0257 001h]                   Bit Width : 00
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260 008h]                     Address : 0000000000000000

/**** ACPI table terminates in the middle of a data structure! (dump table) 
CurrentOffset: 10C, TableLength: 10C ***/
Raw Table Data: Length 268 (0x10C)

    0000: 46 41 43 50 0C 01 00 00 05 1D 41 4D 44 59 44 45  // FACP......AMDYDE
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 00 70 EF 7B 00 00 FE 7C 00 02 09 00  // .....p.{...|....
    0030: B0 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 00 08 00 00 08 04 00 00  // ................
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 64 00 E9 03 00 00 00 00 01 03 0D 00 00 03 00 00  // d...............
    0070: AD 85 00 00 01 08 00 01 B0 00 00 00 00 00 00 00  // ................
    0080: FB 00 00 00 00 00 00 00 00 00 00 00 00 00 FE 7C  // ...............|
    0090: 00 00 00 00 01 20 00 03 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 00 08 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 40 00 04  // . ...........@..
    00E0: 20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : ABED9E6B
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 6B 9E ED AB 00 00 00 00  // FACS@...k.......
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000044
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 1E
[00Ah 0010 006h]                      Oem ID : "AMD"
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


[024h 0036 002h]               Subtable Type : 0000
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]    FPDT Boot Record Address : 0000000079F80000

[034h 0052 002h]               Subtable Type : 0001
[036h 0054 001h]                      Length : 10
[037h 0055 001h]                    Revision : 01
[038h 0056 004h]                    Reserved : 00000000
[03Ch 0060 008h]         S3PT Record Address : 0000000079F7F000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 1E 41 4D 44 00 00 00  // FPDTD.....AMD...
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 00 00 10 01 00 00 00 00 00 00 F8 79  // ...............y
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 F0 F7 79  // ...............y
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 27
[00Ah 0010 006h]                      Oem ID : "AMDYDE"
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]           Hardware Block ID : 10228210

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 00
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 0080
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 27 41 4D 44 59 44 45  // HPET8....'AMDYDE
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 10 82 22 10 00 00 00 00 00 00 D0 FE  // ......".........
    0030: 00 00 00 00 00 80 00 00                          // ........


IVRS
----
[000h 0000 004h]                   Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004 004h]                Table Length : 000001A4
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : 6B
[00Ah 0010 006h]                      Oem ID : "AMD  "
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]         Virtualization Info : 00203041
[028h 0040 008h]                    Reserved : 0000000000000000

[030h 0048 001h]               Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050 002h]                      Length : 0048
[034h 0052 002h]                    DeviceId : 0002
[036h 0054 002h]           Capability Offset : 0040
[038h 0056 008h]                Base Address : 00000000A0200000
[040h 0064 002h]           PCI Segment Group : 0000
[042h 0066 002h]         Virtualization Info : 0000
[044h 0068 004h]           Feature Reporting : 80048F6F

[048h 0072 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073 002h]                   Device ID : 0008
[04Bh 0075 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076 001h]               Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077 002h]                   Device ID : FFFE
[04Fh 0079 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081 002h]                   Device ID : FF00
[053h 0083 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084 001h]                    Reserved : 00
[055h 0085 002h]       Source Used Device ID : 00A5
[057h 0087 001h]                    Reserved : 00

[058h 0088 001h]               Subtable Type : 04 [Device Entry: End of Range]
[059h 0089 002h]                   Device ID : FFFF
[05Bh 0091 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[05Dh 0093 002h]                   Device ID : 0000
[05Fh 0095 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[060h 0096 001h]               Subtable Type : 48 [Device Entry: Special Device]
[061h 0097 002h]                   Device ID : 0000
[063h 0099 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[064h 0100 001h]                      Handle : 00
[065h 0101 002h]       Source Used Device ID : 00A0
[067h 0103 001h]                     Variety : 02

[068h 0104 001h]               Subtable Type : 48 [Device Entry: Special Device]
[069h 0105 002h]                   Device ID : 0000
[06Bh 0107 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[06Ch 0108 001h]                      Handle : 21
[06Dh 0109 002h]       Source Used Device ID : 00A0
[06Fh 0111 001h]                     Variety : 01

[070h 0112 001h]               Subtable Type : 48 [Device Entry: Special Device]
[071h 0113 002h]                   Device ID : 0000
[073h 0115 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[074h 0116 001h]                      Handle : 22
[075h 0117 002h]       Source Used Device ID : 0001
[077h 0119 001h]                     Variety : 01

[078h 0120 001h]               Subtable Type : 11 [Hardware Definition Block (IVHD)]
[079h 0121 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[07Ah 0122 002h]                      Length : 0058
[07Ch 0124 002h]                    DeviceId : 0002
[07Eh 0126 002h]           Capability Offset : 0040
[080h 0128 008h]                Base Address : 00000000A0200000
[088h 0136 002h]           PCI Segment Group : 0000
[08Ah 0138 002h]         Virtualization Info : 0000
[08Ch 0140 004h]                  Attributes : 00040200
[090h 0144 008h]                   EFR Image : 246577EFA2254AFE
[098h 0152 008h]                    Reserved : 0000000000000000

[0A0h 0160 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[0A1h 0161 002h]                   Device ID : 0008
[0A3h 0163 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0A5h 0165 002h]                   Device ID : FFFE
[0A7h 0167 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A8h 0168 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A9h 0169 002h]                   Device ID : FF00
[0ABh 0171 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0ACh 0172 001h]                    Reserved : 00
[0ADh 0173 002h]       Source Used Device ID : 00A5
[0AFh 0175 001h]                    Reserved : 00

[0B0h 0176 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0B1h 0177 002h]                   Device ID : FFFF
[0B3h 0179 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B4h 0180 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[0B5h 0181 002h]                   Device ID : 0000
[0B7h 0183 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B8h 0184 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185 002h]                   Device ID : 0000
[0BBh 0187 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0BCh 0188 001h]                      Handle : 00
[0BDh 0189 002h]       Source Used Device ID : 00A0
[0BFh 0191 001h]                     Variety : 02

[0C0h 0192 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193 002h]                   Device ID : 0000
[0C3h 0195 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0C4h 0196 001h]                      Handle : 21
[0C5h 0197 002h]       Source Used Device ID : 00A0
[0C7h 0199 001h]                     Variety : 01

[0C8h 0200 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C9h 0201 002h]                   Device ID : 0000
[0CBh 0203 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0CCh 0204 001h]                      Handle : 22
[0CDh 0205 002h]       Source Used Device ID : 0001
[0CFh 0207 001h]                     Variety : 01

[0D0h 0208 001h]               Subtable Type : 40 [Hardware Definition Block - Mixed Format (IVHD)]
[0D1h 0209 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[0D2h 0210 002h]                      Length : 00D4
[0D4h 0212 002h]                    DeviceId : 0002
[0D6h 0214 002h]           Capability Offset : 0040
[0D8h 0216 008h]                Base Address : 00000000A0200000
[0E0h 0224 002h]           PCI Segment Group : 0000
[0E2h 0226 002h]         Virtualization Info : 0000
[0E4h 0228 004h]                  Attributes : 00040200
[0E8h 0232 008h]                   EFR Image : 246577EFA2254AFE
[0F0h 0240 008h]                    Reserved : 0000000000000000

[0F8h 0248 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[0F9h 0249 002h]                   Device ID : 0008
[0FBh 0251 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0FCh 0252 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0FDh 0253 002h]                   Device ID : FFFE
[0FFh 0255 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[100h 0256 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[101h 0257 002h]                   Device ID : FF00
[103h 0259 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[104h 0260 001h]                    Reserved : 00
[105h 0261 002h]       Source Used Device ID : 00A5
[107h 0263 001h]                    Reserved : 00

[108h 0264 001h]               Subtable Type : 04 [Device Entry: End of Range]
[109h 0265 002h]                   Device ID : FFFF
[10Bh 0267 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[10Ch 0268 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[10Dh 0269 002h]                   Device ID : 0000
[10Fh 0271 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[110h 0272 001h]               Subtable Type : 48 [Device Entry: Special Device]
[111h 0273 002h]                   Device ID : 0000
[113h 0275 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[114h 0276 001h]                      Handle : 00
[115h 0277 002h]       Source Used Device ID : 00A0
[117h 0279 001h]                     Variety : 02

[118h 0280 001h]               Subtable Type : 48 [Device Entry: Special Device]
[119h 0281 002h]                   Device ID : 0000
[11Bh 0283 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[11Ch 0284 001h]                      Handle : 21
[11Dh 0285 002h]       Source Used Device ID : 00A0
[11Fh 0287 001h]                     Variety : 01

[120h 0288 001h]               Subtable Type : 48 [Device Entry: Special Device]
[121h 0289 002h]                   Device ID : 0000
[123h 0291 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[124h 0292 001h]                      Handle : 22
[125h 0293 002h]       Source Used Device ID : 0001
[127h 0295 001h]                     Variety : 01

[128h 0296 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[129h 0297 002h]                   Device ID : 00A5
[12Bh 0299 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[12Ch 0300 008h]                    ACPI HID : "AMDI0020"
[134h 0308 008h]                    ACPI CID : 0000000000000000
[13Ch 0316 001h]                  UID Format : 02
[13Dh 0317 001h]                  UID Length : 09
[13Eh 0318 009h]                         UID : "\_SB.FUR0"

[147h 0327 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[148h 0328 002h]                   Device ID : 00A5
[14Ah 0330 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[14Bh 0331 008h]                    ACPI HID : "AMDI0020"
[153h 0339 008h]                    ACPI CID : 0000000000000000
[15Bh 0347 001h]                  UID Format : 02
[15Ch 0348 001h]                  UID Length : 09
[15Dh 0349 009h]                         UID : "\_SB.FUR1"

[166h 0358 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[167h 0359 002h]                   Device ID : 00A5
[169h 0361 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[16Ah 0362 008h]                    ACPI HID : "AMDI0020"
[172h 0370 008h]                    ACPI CID : 0000000000000000
[17Ah 0378 001h]                  UID Format : 02
[17Bh 0379 001h]                  UID Length : 09
[17Ch 0380 009h]                         UID : "\_SB.FUR2"

[185h 0389 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[186h 0390 002h]                   Device ID : 00A5
[188h 0392 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[189h 0393 008h]                    ACPI HID : "AMDI0020"
[191h 0401 008h]                    ACPI CID : 0000000000000000
[199h 0409 001h]                  UID Format : 02
[19Ah 0410 001h]                  UID Length : 09
[19Bh 0411 009h]                         UID : "\_SB.FUR3"

Raw Table Data: Length 420 (0x1A4)

    0000: 49 56 52 53 A4 01 00 00 02 6B 41 4D 44 20 20 00  // IVRS.....kAMD  .
    0010: 45 44 4B 32 20 20 20 20 01 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 20 A0 00 00 00 00  // ..H...@... .....
    0040: 00 00 00 00 6F 8F 04 80 03 08 00 00 04 FE FF 00  // ....o...........
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 21 A0 00 01  // H.......H...!...
    0070: 48 00 00 00 22 01 00 01 11 B0 58 00 02 00 40 00  // H...".....X...@.
    0080: 00 00 20 A0 00 00 00 00 00 00 00 00 00 02 04 00  // .. .............
    0090: FE 4A 25 A2 EF 77 65 24 00 00 00 00 00 00 00 00  // .J%..we$........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A5 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 21 A0 00 01 48 00 00 00 22 01 00 01  // H...!...H..."...
    00D0: 40 B0 D4 00 02 00 40 00 00 00 20 A0 00 00 00 00  // @.....@... .....
    00E0: 00 00 00 00 00 02 04 00 FE 4A 25 A2 EF 77 65 24  // .........J%..we$
    00F0: 00 00 00 00 00 00 00 00 03 08 00 00 04 FE FF 00  // ................
    0100: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0110: 48 00 00 00 00 A0 00 02 48 00 00 D7 21 A0 00 01  // H.......H...!...
    0120: 48 00 00 00 22 01 00 01 F0 A5 00 40 41 4D 44 49  // H..."......@AMDI
    0130: 30 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F  // 0020..........\_
    0140: 53 42 2E 46 55 52 30 F0 A5 00 40 41 4D 44 49 30  // SB.FUR0...@AMDI0
    0150: 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53  // 020..........\_S
    0160: 42 2E 46 55 52 31 F0 A5 00 40 41 4D 44 49 30 30  // B.FUR1...@AMDI00
    0170: 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42  // 20..........\_SB
    0180: 2E 46 55 52 32 F0 A5 00 40 41 4D 44 49 30 30 32  // .FUR2...@AMDI002
    0190: 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42 2E  // 0..........\_SB.
    01A0: 46 55 52 33                                      // FUR3


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 12
[00Ah 0010 006h]                      Oem ID : "AMDYDE"
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000F8000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : 3F
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 12 41 4D 44 59 44 45  // MCFG<.....AMDYDE
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


SLIC
----
[000h 0000 004h]                   Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004 004h]                Table Length : 00000176
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 7E
[00Ah 0010 006h]                      Oem ID : "AMDYDE"
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 152h] Software Licensing Structure : 53 4C 49 43 76 01 00 00 01 7E 41 4D 44 59 44 45 /* SLICv....~AMDYDE */\
/* 034h 0052  16 */                            45 44 4B 32 20 20 20 20 02 00 00 00 41 43 50 49 /* EDK2    ....ACPI */\
/* 044h 0068  16 */                            00 00 04 00 00 00 00 00 9C 00 00 00 06 02 00 00 /* ................ */\
/* 054h 0084  16 */                            00 24 00 00 52 53 41 31 00 04 00 00 01 01 00 00 /* .$..RSA1........ */\
/* 064h 0100  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 074h 0116  16 */                            D9 54 93 7A 68 04 4A 44 81 CE 0B F6 17 D8 90 DF /* .T.zh.JD........ */\
/* 084h 0132  16 */                            00 00 01 00 00 00 00 00 5F 46 56 48 FF 8E FF FF /* ........_FVH.... */\
/* 094h 0148  16 */                            48 00 B1 4C 00 00 00 01 01 00 00 00 00 00 01 00 /* H..L............ */\
/* 0A4h 0164  16 */                            00 00 00 00 00 00 00 00 54 F0 0C 6F 6A AE 8C 41 /* ........T..oj..A */\
/* 0B4h 0180  16 */                            A7 CE 3C 7A 7C D7 4E C0 4E D4 02 40 13 2D 00 F8 /* ..<z|.N.N..@.-.. */\
/* 0C4h 0196  16 */                            FB 2C 00 01 88 7D 00 00 01 EA 2C 00 00 88 7D 00 /* .,...}....,...}. */\
/* 0D4h 0212  16 */                            00 1C 28 87 6E FB B4 69 39 3F DE FF CC CC 64 90 /* ..(.n..i9?....d. */\
/* 0E4h 0228  16 */                            01 00 00 00 B6 00 00 00 00 20 00 00 49 4E 53 59 /* ......... ..INSY */\
/* 0F4h 0244  16 */                            44 45 49 4E 53 59 44 45 30 30 57 49 4E 44 4F 57 /* DEINSYDE00WINDOW */\
/* 104h 0260  16 */                            53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00 /* S .............. */\
/* 114h 0276  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 124h 0292  16 */                            00 00 00 00 00 00 D9 54 93 7A 68 04 4A 44 81 CE /* .......T.zh.JD.. */\
/* 134h 0308  16 */                            0B F6 17 D8 90 DF 00 00 01 00 00 00 00 00 5F 46 /* .............._F */\
/* 144h 0324  16 */                            56 48 FF 8E FF FF 48 00 B1 4C 00 00 00 01 01 00 /* VH....H..L...... */\
/* 154h 0340  16 */                            00 00 00 00 01 00 00 00 00 00 00 00 00 00 54 F0 /* ..............T. */\
/* 164h 0356  16 */                            0C 6F 6A AE 8C 41 A7 CE 3C 7A 7C D7 4E C0 4E D4 /* .oj..A..<z|.N.N. */\
/* 174h 0372   2 */                            02 40                                           /* .@ */\

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 7E 41 4D 44 59 44 45  // SLICv....~AMDYDE
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 01 00 00  // .$..RSA1........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0050: D9 54 93 7A 68 04 4A 44 81 CE 0B F6 17 D8 90 DF  // .T.zh.JD........
    0060: 00 00 01 00 00 00 00 00 5F 46 56 48 FF 8E FF FF  // ........_FVH....
    0070: 48 00 B1 4C 00 00 00 01 01 00 00 00 00 00 01 00  // H..L............
    0080: 00 00 00 00 00 00 00 00 54 F0 0C 6F 6A AE 8C 41  // ........T..oj..A
    0090: A7 CE 3C 7A 7C D7 4E C0 4E D4 02 40 13 2D 00 F8  // ..<z|.N.N..@.-..
    00A0: FB 2C 00 01 88 7D 00 00 01 EA 2C 00 00 88 7D 00  // .,...}....,...}.
    00B0: 00 1C 28 87 6E FB B4 69 39 3F DE FF CC CC 64 90  // ..(.n..i9?....d.
    00C0: 01 00 00 00 B6 00 00 00 00 20 00 00 49 4E 53 59  // ......... ..INSY
    00D0: 44 45 49 4E 53 59 44 45 30 30 57 49 4E 44 4F 57  // DEINSYDE00WINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 D9 54 93 7A 68 04 4A 44 81 CE  // .......T.zh.JD..
    0110: 0B F6 17 D8 90 DF 00 00 01 00 00 00 00 00 5F 46  // .............._F
    0120: 56 48 FF 8E FF FF 48 00 B1 4C 00 00 00 01 01 00  // VH....H..L......
    0130: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 54 F0  // ..............T.
    0140: 0C 6F 6A AE 8C 41 A7 CE 3C 7A 7C D7 4E C0 4E D4  // .oj..A..<z|.N.N.
    0150: 02 40 13 2D 00 F8 FB 2C 00 01 88 7D 00 00 01 EA  // .@.-...,...}....
    0160: 2C 00 00 88 7D 00 00 1C 28 87 6E FB B4 69 39 3F  // ,...}...(.n..i9?
    0170: DE FF CC CC 64 90                                // ....d.


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "AMDRUS", "EDK2    ", 0x00000002)
{
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.PCI0.LPC0, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_.EBID, IntObj)
    External (_SB_.SPI1, DeviceObj)
    External (SMAE, UnknownObj)
    External (TPOS, UnknownObj)

    Scope (\_SB.SPI1)
    {
        Device (SPK1)
        {
            Name (_HID, "VLV1776")  // _HID: Hardware ID
            Name (_CID, "CLSA3541")  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((\_SB.PCI0.LPC0.EC0.EBID == Zero))
                {
                    Name (SBU1, ResourceTemplate ()
                    {
                        GpioIo (Shared, PullDown, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x006D
                            }
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x003D0900, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.SPI1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioIo (Shared, PullUp, 0x0064, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0008
                            }
                        GpioInt (Level, ActiveLow, Shared, PullUp, 0x0064,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0008
                            }
                    })
                    Return (SBU1) /* \_SB_.SPI1.SPK1._CRS.SBU1 */
                }
                Else
                {
                    Name (SBU2, ResourceTemplate ()
                    {
                        GpioIo (Shared, PullDown, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0003
                            }
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x003D0900, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.SPI1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioIo (Shared, PullUp, 0x0064, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x000B
                            }
                        GpioInt (Level, ActiveLow, Shared, PullUp, 0x0064,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x000B
                            }
                    })
                    Return (SBU2) /* \_SB_.SPI1.SPK1._CRS.SBU2 */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SMAE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x07)
                {
                    Package (0x02)
                    {
                        "reset-gpios", 
                        Package (0x04)
                        {
                            ^SPK1, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "cirrus,boost-peak-milliamp", 
                        0x1194
                    }, 

                    Package (0x02)
                    {
                        "cirrus,boost-ind-nanohenry", 
                        0x03E8
                    }, 

                    Package (0x02)
                    {
                        "cirrus,boost-cap-microfarad", 
                        0x0F
                    }, 

                    Package (0x02)
                    {
                        "cirrus,shared-boost-passive", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "cirrus,gpio1-src-select", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "cirrus,gpio2-src-select", 
                        0x02
                    }
                }
            })
        }

        Device (SPK2)
        {
            Name (_HID, "VLV1776")  // _HID: Hardware ID
            Name (_CID, "CLSA3541")  // _CID: Compatible ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((\_SB.PCI0.LPC0.EC0.EBID == Zero))
                {
                    Name (SBU1, ResourceTemplate ()
                    {
                        GpioIo (Shared, PullDown, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x006D
                            }
                        SpiSerialBusV2 (0x0001, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x003D0900, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.SPI1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioIo (Shared, PullUp, 0x0064, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0008
                            }
                        GpioInt (Level, ActiveLow, Shared, PullUp, 0x0064,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0008
                            }
                    })
                    Return (SBU1) /* \_SB_.SPI1.SPK2._CRS.SBU1 */
                }
                Else
                {
                    Name (SBU2, ResourceTemplate ()
                    {
                        GpioIo (Shared, PullDown, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0003
                            }
                        SpiSerialBusV2 (0x0001, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x003D0900, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.SPI1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioIo (Shared, PullUp, 0x0064, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x000B
                            }
                        GpioInt (Level, ActiveLow, Shared, PullUp, 0x0064,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x000B
                            }
                    })
                    Return (SBU2) /* \_SB_.SPI1.SPK2._CRS.SBU2 */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SMAE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x07)
                {
                    Package (0x02)
                    {
                        "reset-gpios", 
                        Package (0x04)
                        {
                            ^SPK2, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "cirrus,boost-peak-milliamp", 
                        0x1194
                    }, 

                    Package (0x02)
                    {
                        "cirrus,boost-ind-nanohenry", 
                        0x03E8
                    }, 

                    Package (0x02)
                    {
                        "cirrus,boost-cap-microfarad", 
                        0x0F
                    }, 

                    Package (0x02)
                    {
                        "cirrus,shared-boost-active", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "cirrus,gpio1-src-select", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "cirrus,gpio2-src-select", 
                        0x02
                    }
                }
            })
        }
    }

    Scope (\_SB)
    {
        Device (SPK3)
        {
            Name (_HID, "VLV1777")  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((\_SB.PCI0.LPC0.EC0.EBID == Zero))
                {
                    Name (SBU1, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x003D0900, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.SPI1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        SpiSerialBusV2 (0x0001, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x003D0900, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.SPI1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioIo (Shared, PullDown, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x006D
                            }
                        GpioIo (Shared, PullUp, 0x0064, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0008
                            }
                        GpioInt (Level, ActiveLow, Shared, PullUp, 0x0064,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0008
                            }
                    })
                    Return (SBU1) /* \_SB_.SPK3._CRS.SBU1 */
                }
                Else
                {
                    Name (SBU2, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x003D0900, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.SPI1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        SpiSerialBusV2 (0x0001, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x003D0900, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.SPI1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioIo (Shared, PullDown, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0003
                            }
                        GpioIo (Shared, PullUp, 0x0064, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x000B
                            }
                        GpioInt (Level, ActiveLow, Shared, PullUp, 0x0064,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x000B
                            }
                    })
                    Return (SBU2) /* \_SB_.SPK3._CRS.SBU2 */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
            }
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 1, "AMD", "EDK2    ", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M207, Buffer (0xFF){})
        Name (M208, Buffer (0x03){})
        Name (M204, One)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                ATC0 ()
            }

            If ((Arg0 == One))
            {
                ATC1 ()
            }

            If ((Arg0 == 0x02))
            {
                ATC2 (Arg1)
            }

            If ((Arg0 == 0x03))
            {
                ATC3 ()
            }

            If ((Arg0 == 0x04))
            {
                ATC4 (Arg1)
            }

            If ((Arg0 == 0x06))
            {
                ATC6 (Arg1)
            }

            If ((Arg0 == 0x07))
            {
                ATC7 (Arg1)
            }

            If ((Arg0 == 0x08))
            {
                ATC8 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x03]), DerefOf (
                    Arg1 [0x04]), DerefOf (Arg1 [0x05]))
            }

            If ((Arg0 == 0x09))
            {
                ATC9 ()
            }

            Return (M207) /* \_SB_.PCI0.GP17.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M100 /* External reference */
            M207 = \_SB.ALIB (Zero, M207)
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, One, M203)
            M157 = 0x0A
            M161 = One
            M162 = M100 /* External reference */
            Local0 = M049 (M133, 0x15)
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & One)
            }
            ElseIf ((Local0 & 0x7F))
            {
                M204 = M113 (Local0)
            }

            M203 = M204 /* \_SB_.PCI0.GP17.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = One
            M207 = \_SB.ALIB (0x02, Arg0)
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, Zero, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = One
            M197 = 0x03
            M206 = One
            M207 = \_SB.ALIB (0x03, M208)
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = One
            M207 = \_SB.ALIB (0x04, Arg0)
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235, Zero, One)
        }

        Method (ATC8, 4, Serialized)
        {
            Local0 = Buffer (0x05){}
            CreateWordField (Local0, Zero, M157)
            CreateByteField (Local0, 0x02, M425)
            CreateWordField (Local0, 0x03, M426)
            M157 = 0x05
            Local1 = Arg0
            Local2 = Arg1
            M426 = ((Local2 << 0x08) + Local1)
            Local3 = Arg2
            Local4 = Arg3
            If (((Local3 == Zero) && (Local4 == Zero)))
            {
                M425 = One
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == Zero) && (Local4 == One)))
            {
                M425 = Zero
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == 0x03) && (Local4 == One)))
            {
                M425 = 0x03
                \_SB.ALIB (0xAA, Local0)
            }
        }

        Method (ATC9, 0, Serialized)
        {
            M207 = M444 /* External reference */
        }

        Method (XTRM, 2, Serialized)
        {
            If ((M105 == Zero))
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Local4 = M105 /* External reference */
            If ((Local4 > 0x00010000))
            {
                Local4 = 0x00010000
            }

            Local5 = Arg0
            Local6 = Arg1
            If ((Local6 > 0x1000))
            {
                Local6 = 0x1000
            }

            If ((Local5 >= Local4))
            {
                Return (Buffer (Local6)
                {
                     0x00                                             // .
                })
            }

            If ((((Local5 & 0x0FFF) + Local6) > 0x1000))
            {
                Local6 = (0x1000 - (Local5 & 0x0FFF))
            }

            Name (M202, Buffer (0x1000)
            {
                 0x00                                             // .
            })
            If (((Local5 & 0xF000) == Zero))
            {
                M202 = M106 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x1000))
            {
                M202 = M378 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x2000))
            {
                M202 = M379 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x3000))
            {
                M202 = M380 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x4000))
            {
                M202 = M381 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x5000))
            {
                M202 = M382 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x6000))
            {
                M202 = M383 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x7000))
            {
                M202 = M384 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x8000))
            {
                M202 = M385 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x9000))
            {
                M202 = M386 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xA000))
            {
                M202 = M387 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xB000))
            {
                M202 = M388 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xC000))
            {
                M202 = M389 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xD000))
            {
                M202 = M390 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xE000))
            {
                M202 = M391 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xF000))
            {
                M202 = M392 /* External reference */
            }

            If (((Local5 + Local6) <= Local4))
            {
                If ((Local6 == 0x1000))
                {
                    Return (M202) /* \_SB_.PCI0.GP17.VGA_.XTRM.M202 */
                }
            }
            Else
            {
                Local6 = (Local4 - Local5)
            }

            Name (M393, Buffer (Local6)
            {
                 0x00                                             // .
            })
            CreateField (M202, ((Local5 & 0x0FFF) * 0x08), (Local6 * 0x08
                ), M394)
            M393 = M394 /* \_SB_.PCI0.GP17.VGA_.XTRM.M394 */
            Return (M393) /* \_SB_.PCI0.GP17.VGA_.XTRM.M393 */
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN0))
            {
                \_SB.PCI0.GP17.VGA.AFN0 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.VGA.AFN0 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0 ()
            }
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN1))
            {
                \_SB.PCI0.GP17.VGA.AFN1 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.VGA.AFN1 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1 (Arg0)
            }
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN2))
            {
                \_SB.PCI0.GP17.VGA.AFN2 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.VGA.AFN2 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
            }
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN3))
            {
                \_SB.PCI0.GP17.VGA.AFN3 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.VGA.AFN3 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
            }
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN4))
            {
                \_SB.PCI0.GP17.VGA.AFN4 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.VGA.AFN4 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4 (Arg0)
            }
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN5))
            {
                \_SB.PCI0.GP17.VGA.AFN5 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.VGA.AFN5 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5 ()
            }
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN6))
            {
                \_SB.PCI0.GP17.VGA.AFN6 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.VGA.AFN6 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6 ()
            }
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN7))
            {
                \_SB.PCI0.GP17.VGA.AFN7 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.VGA.AFN7 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7 (Arg0)
            }
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN8))
            {
                \_SB.PCI0.GP17.VGA.AFN8 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.VGA.AFN8 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8 ()
            }
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFNC))
            {
                \_SB.PCI0.GP17.VGA.AFNC (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.VGA.AFNC (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
            }
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 2, "AMD", "EDK2    ", 0x00000001)
{
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x00000B7C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00000774, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000AF0, 
                0x00000B7C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000960, 
                0x00000774, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x00000B7C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00000774, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000AF0, 
                0x00000B7C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000960, 
                0x00000774, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x00000B7C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00000774, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000AF0, 
                0x00000B7C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000960, 
                0x00000774, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x00000B7C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00000774, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000AF0, 
                0x00000B7C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000960, 
                0x00000774, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x00000B7C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00000774, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000AF0, 
                0x00000B7C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000960, 
                0x00000774, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x00000B7C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00000774, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000AF0, 
                0x00000B7C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000960, 
                0x00000774, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x00000B7C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00000774, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000AF0, 
                0x00000B7C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000960, 
                0x00000774, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x00000B7C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00000774, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000AF0, 
                0x00000B7C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000960, 
                0x00000774, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 1, "AMD", "EDK2    ", 0x00000001)
{
    External (_SB_.PLTF, DeviceObj)

    Scope (\_SB.PLTF)
    {
        Name (_LPI, Package (0x04)  // _LPI: Low Power Idle States
        {
            Zero, 
            Zero, 
            One, 
            Package (0x0A)
            {
                0x000F4240, 
                0xC350, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "S0i3"
            }
        })
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "AMDyde", "EDK2    ", 0x00001000)
{
    Scope (\_SB)
    {
        Device (TPM2)
        {
            Name (_HID, "MSFT0101" /* TPM 2.0 Security Device */)  // _HID: Hardware ID
            Name (_CID, "MSFT0101" /* TPM 2.0 Security Device */)  // _CID: Compatible ID
            Name (_STR, Unicode ("TPM 2.0 Device"))  // _STR: Description String
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0x7AED2000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x7AED6000,         // Address Base
                    0x00004000,         // Address Length
                    )
            })
            OperationRegion (SMIP, SystemIO, 0xB0, One)
            Field (SMIP, ByteAcc, NoLock, Preserve)
            {
                IOB2,   8
            }

            OperationRegion (TNVS, SystemMemory, 0x7BEF9000, 0x27)
            Field (TNVS, AnyAcc, NoLock, Preserve)
            {
                PPIN,   8, 
                PPIP,   32, 
                PPRP,   32, 
                PPRQ,   32, 
                PPRM,   32, 
                LPPR,   32, 
                FRET,   32, 
                MCIN,   8, 
                MCIP,   32, 
                MORD,   32, 
                MRET,   32, 
                CAIN,   8
            }

            OperationRegion (CONA, SystemMemory, 0x7BEF8000, 0x30)
            Field (CONA, DWordAcc, NoLock, Preserve)
            {
                HRTB,   32, 
                ERRR,   32, 
                CLFG,   32, 
                STA1,   32, 
                AccessAs (QWordAcc, 0x00), 
                INTC,   64, 
                AccessAs (DWordAcc, 0x00), 
                CMSZ,   32, 
                AccessAs (QWordAcc, 0x00), 
                CMDB,   64, 
                AccessAs (DWordAcc, 0x00), 
                RPSZ,   32, 
                AccessAs (QWordAcc, 0x00), 
                RESP,   64
            }

            Method (PTS, 1, Serialized)
            {
                If (((Arg0 < 0x06) && (Arg0 > 0x03)))
                {
                    If (!(MORD & 0x10))
                    {
                        MCIP = 0x02
                        IOB2 = MCIN /* \_SB_.TPM2.MCIN */
                    }
                }

                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (HINF, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Name (TPMV, Package (0x02)
                        {
                            One, 
                            Package (0x02)
                            {
                                0x02, 
                                Zero
                            }
                        })
                        If ((_STA () == Zero))
                        {
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }

                        Return (TPMV) /* \_SB_.TPM2.HINF.TPMV */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (TPM2, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (TPM3, Package (0x03)
            {
                Zero, 
                Zero, 
                Zero
            })
            Method (TPPI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        Return ("1.3")
                    }
                    Case (0x02)
                    {
                        PPRQ = DerefOf (Arg2 [Zero])
                        PPIP = 0x02
                        IOB2 = PPIN /* \_SB_.TPM2.PPIN */
                        Return (FRET) /* \_SB_.TPM2.FRET */
                    }
                    Case (0x03)
                    {
                        TPM2 [One] = PPRQ /* \_SB_.TPM2.PPRQ */
                        Return (TPM2) /* \_SB_.TPM2.TPM2 */
                    }
                    Case (0x04)
                    {
                        Return (0x02)
                    }
                    Case (0x05)
                    {
                        PPIP = 0x05
                        IOB2 = PPIN /* \_SB_.TPM2.PPIN */
                        TPM3 [One] = LPPR /* \_SB_.TPM2.LPPR */
                        TPM3 [0x02] = PPRP /* \_SB_.TPM2.PPRP */
                        Return (TPM3) /* \_SB_.TPM2.TPM3 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        PPIP = 0x07
                        PPRQ = DerefOf (Arg2 [Zero])
                        PPRM = Zero
                        If ((PPRQ == 0x17))
                        {
                            PPRM = DerefOf (Arg2 [One])
                        }

                        IOB2 = PPIN /* \_SB_.TPM2.PPIN */
                        Return (FRET) /* \_SB_.TPM2.FRET */
                    }
                    Case (0x08)
                    {
                        PPIP = 0x08
                        PPRQ = DerefOf (Arg2 [Zero])
                        IOB2 = PPIN /* \_SB_.TPM2.PPIN */
                        Return (FRET) /* \_SB_.TPM2.FRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (TMCI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        MORD = DerefOf (Arg2 [Zero])
                        MCIP = One
                        IOB2 = MCIN /* \_SB_.TPM2.MCIN */
                        Return (MRET) /* \_SB_.TPM2.MRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (OASM, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
                {
                    Return (HINF (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    Return (TPPI (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    Return (TMCI (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
                {
                    Return (OASM (Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "EDK2    ", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.LID_._LID, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M012, MethodObj)    // 5 Arguments
    External (M013, MethodObj)    // 4 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M021, MethodObj)    // 4 Arguments
    External (M023, MethodObj)    // 3 Arguments
    External (M024, MethodObj)    // 3 Arguments
    External (M025, MethodObj)    // 4 Arguments
    External (M026, MethodObj)    // 3 Arguments
    External (M037, DeviceObj)
    External (M043, MethodObj)    // 3 Arguments
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M111, MethodObj)    // 2 Arguments
    External (M112, MethodObj)    // 2 Arguments
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)

    Scope (\_SB)
    {
        Name (MACO, Zero)
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M189, Buffer (0x0100){})
        Name (M190, Ones)
        Name (M191, Ones)
        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = Zero
            M158 = Zero
            M160 = Zero
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M098 /* External reference */
            If (M098)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local0 = M019 (M095, M094, M093, 0x2C)
                Local1 = M019 (M095, M094, (M093 + One), 0x2C)
                If ((Local0 != Local5))
                {
                    M190 = Local0
                }

                If ((Local1 != Local5))
                {
                    M191 = Local1
                }
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x0003FC80
            M162 = M099 /* External reference */
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            Local7 = Buffer (0x05){}
            CreateWordField (Local7, Zero, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = Zero
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, Zero)
            Local0 = M049 (M133, 0x11)
            Local6 = M113 (Local0)
            M023 (Zero, M091, M090)
            If ((M192 && Local6))
            {
                M000 (0x0D86)
                M112 (Local0, Zero)
                M111 (Local0, One)
                Sleep (0x20)
                M112 (Local0, 0x02)
                M112 (Local0, One)
                M000 (0x0D87)
                HPOK = Zero
                Sleep (0x14)
                M201 = One
                Local6 = \_SB.ALIB (0x06, Local7)
                Local2 = Zero
                While ((Local2 < 0x0F))
                {
                    M023 (Zero, M091, M090)
                    Local4 = One
                    Local5 = 0xC8
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    If (!Local4)
                    {
                        Local5 = M024 (Zero, M091, M090)
                        If (Local5)
                        {
                            M026 (Zero, M091, M090)
                            Sleep (0x05)
                            Local2++
                        }
                        Else
                        {
                            Local0 = Zero
                            If ((M025 (Zero, M091, M090, Zero) == Ones))
                            {
                                Local0 = One
                            }

                            If (Local0)
                            {
                                M111 (M049 (M133, 0x17), One)
                                M111 (M049 (M133, 0x18), One)
                                HPOK = One
                                Local2 = 0x10
                            }
                            Else
                            {
                                HPOK = Zero
                                Local2 = 0x10
                            }
                        }
                    }
                    Else
                    {
                        Local2 = 0x10
                    }
                }

                If (!HPOK)
                {
                    M000 (0x0D88)
                    Local1 = M019 (M095, M094, M093, Zero)
                    Sleep (0x0A)
                    Local4 = One
                    Local5 = 0x05
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Local0 = M019 (M095, M094, M093, Zero)
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    M201 = Zero
                    \_SB.ALIB (0x06, Local7)
                }

                If ((M097 != Zero))
                {
                    Local0 = M019 (Zero, M091, M090, 0x54)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFC))
                    M232 (M097, Zero, 0x10)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFF))
                }

                M000 (0x0D89)
            }
            Else
            {
                M000 (0x0D8A)
                M201 = Zero
                \_SB.ALIB (0x06, Local7)
                M000 (0x0D8B)
                M111 (M049 (M133, 0x17), Zero)
                M111 (M049 (M133, 0x18), Zero)
                M112 (Local0, Zero)
                Sleep (0x0A)
                M111 (Local0, Zero)
                M023 (Zero, M091, M090)
                Local1 = M019 (M095, M094, M093, Zero)
                Sleep (0x0A)
                Local4 = One
                Local5 = 0x05
                While ((Local4 && Local5))
                {
                    Local0 = M021 (Zero, M091, M090, 0xA5)
                    Local0 &= 0x7F
                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                    {
                        Local4 = Zero
                    }
                    Else
                    {
                        Local1 = M019 (M095, M094, M093, Zero)
                        Sleep (0x05)
                        Local5--
                    }
                }

                HPOK = 0x02
                M000 (0x0D8C)
            }

            If (HPOK)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local1 = M019 (Zero, M091, M090, 0x54)
                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                Local0 = M019 (M095, M094, M093, Zero)
                If (((HPOK == One) && (Local0 != Local5)))
                {
                    M020 (M095, M094, M093, 0x4C, M190)
                    Sleep (0x0A)
                    If ((M191 != Local5))
                    {
                        M020 (M095, M094, (M093 + One), 0x4C, M191)
                    }

                    Sleep (0x0A)
                }

                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFF))
            }
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & One)
            If (M195)
            {
                M111 (M049 (M133, 0x17), One)
            }
            Else
            {
                M111 (M049 (M133, 0x17), Zero)
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & One)
            If (M196)
            {
                M111 (M049 (M133, 0x18), One)
            }
            Else
            {
                M111 (M049 (M133, 0x18), Zero)
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x19)
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX08.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x1A + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x7E)
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX09.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x7F + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            \_SB.MACO = (Arg0 & One)
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & One)
            Local2 = M162 /* \_SB_.PCI0.GP17.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                Local0 = M049 (M131, 0x10)
                Local1 = M049 (M131, 0x11)
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, Zero, One, Local2)
            }
        }

        Name (ATIB, Buffer (0x0100){})
        Method (ATIF, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (AF00 ())
            }

            If ((Arg0 == One))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }
            Else
            {
                CreateWordField (ATIB, Zero, M157)
                CreateWordField (ATIB, 0x02, M158)
                CreateDWordField (ATIB, 0x04, M159)
                CreateDWordField (ATIB, 0x08, M160)
                M157 = Zero
                M158 = Zero
                M159 = Zero
                M160 = Zero
                Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
            }
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = One
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            Local0 = (M103 & 0xFF000000)
            Local1 = (M103 & 0x03)
            If ((Local1 == 0x02))
            {
                M157 = 0x0B
                M161 = 0x03
                M162 = Local1
                M163 = Local0
            }
            Else
            {
                M157 = 0x0A
                M161 = 0x03
                M162 = M103 /* External reference */
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (M303, Zero)
        Name (M304, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            M157 = 0x12
            M174 = M164 /* \_SB_.PCI0.GP17.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GP17.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GP17.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GP17.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GP17.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GP17.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GP17.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GP17.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, Zero)
            M187 = M049 (M133, 0xBF)
            Local1 = Zero
            While ((Local1 < M187))
            {
                Local2 = M049 (M133, (0xC0 + Local1))
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GP17.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GP17.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local2 &= 0xFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GP17.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = Zero
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GP17.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = Zero
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local1 = (Local0 ^ One)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            Local0 = M013 (M133, 0xD4, Zero, 0x10)
            If (Local0)
            {
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local2 = M049 (M133, (0xD4 + Local1))
                    ATIB [Local1] = Local2
                    Local1++
                }
            }
            Else
            {
                Local3 = M043 (Zero, Arg0, Zero)
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [Zero] = 0x05
                    ATIB [One] = Zero
                    ATIB [0x02] = Zero
                    ATIB [0x03] = Zero
                    ATIB [0x04] = 0x02
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            If ((M101 & One))
            {
                CreateBitField (M164, Zero, M165)
                M165 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN1, 1, Serialized)
        {
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, One, M166)
                M166 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN2, 2, Serialized)
        {
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN3, 2, Serialized)
        {
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN4, 1, Serialized)
        {
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M215 = Local0
                If ((Local0 == Local1)){}
                Else
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    Notify (VGA, 0x81) // Information Change
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN6, 0, Serialized)
        {
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN7, 1, Serialized)
        {
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN8, 0, Serialized)
        {
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
            }
        }

        Method (AFNC, 2, Serialized)
        {
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & Ones)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                Notify (VGA, 0x81) // Information Change
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "EDK2    ", 0x00000001)
{
    External (_SB_.PCDD.GPEE.USFF.DSGG.DEHH, DeviceObj)
    External (_SB_.PCI0.GPBB.WLAN, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M010, MethodObj)    // 2 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M04A, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M112, MethodObj)    // 2 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)

    If (CondRefOf (\_SB.PCI0.GPBB.WLAN))
    {
        Scope (\_SB.PCI0.GPBB.WLAN)
        {
            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
            {
                \_SB.PRWL
            })
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PCDD.GPEE.USFF.DSGG.DEHH))
    {
        Scope (\_SB.PCDD.GPEE.USFF.DSGG.DEHH)
        {
            Name (YPRR, Package (0x01)
            {
                \_SB.PRWL
            })
            Method (YRMV, 0, NotSerialized)
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB)
    {
        Name (WLPS, One)
        PowerResource (PRWL, 0x00, 0x0000)
        {
            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
            {
                M000 (0x0DC2)
                Local1 = M04A (M290, 0x12)
                If ((Local1 != Zero))
                {
                    M010 (Local1, Zero)
                    Sleep (0xC8)
                    M010 (Local1, One)
                }
                Else
                {
                    Local0 = M049 (M290, 0x14)
                    M112 (Local0, Zero)
                    Sleep (0xC8)
                    M112 (Local0, One)
                    M000 (0x0DC3)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (WLPS) /* \_SB_.WLPS */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                WLPS = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                WLPS = Zero
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "EDK2    ", 0x00000001)
{
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M250, MethodObj)    // 5 Arguments
    External (M251, FieldUnitObj)
    External (M276, MethodObj)    // 0 Arguments
    External (M277, MethodObj)    // 0 Arguments
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments

    Name (M278, One)
    Name (M27A, One)
    Name (APGE, One)
    Name (ACGE, One)
    Method (M276, 0, NotSerialized)
    {
        M460 ("FEA-ASL-CpmPowerGateOn-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        If ((M27A == Zero))
        {
            M278 = Zero
        }

        M460 ("  CpmAcpPresentState    = %d\n", M278, Zero, Zero, Zero, Zero, Zero)
        If ((M278 == One))
        {
            Local0 = M017 (Zero, 0x08, One, 0x19, Zero, 0x08)
            Local1 = M019 (Local0, Zero, 0x05, Zero)
            If ((M27A == Zero))
            {
                Local1 = 0x15E21022
            }

            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                If ((Local1 != Ones))
                {
                    M000 (0x0DB4)
                    If ((ACGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x03B10A74, Zero)
                        M250 (Zero, Zero, Zero, 0x03B10A54, 0xC8)
                        M250 (Zero, Zero, Zero, 0x03B10A14, 0x03)
                        Local4 = M249 (Zero, Zero, Zero, 0x03B10A74)
                        While ((Local4 == Zero))
                        {
                            Local4 = M249 (Zero, Zero, Zero, 0x03B10A74)
                            If ((Local4 != Zero))
                            {
                                Break
                            }
                        }
                    }

                    If ((ACGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x03B10A74, Zero)
                        M250 (Zero, Zero, Zero, 0x03B10A54, 0xC4)
                        M250 (Zero, Zero, Zero, 0x03B10A14, 0x04)
                        Local4 = M249 (Zero, Zero, Zero, 0x03B10A74)
                        While ((Local4 == Zero))
                        {
                            Local4 = M249 (Zero, Zero, Zero, 0x03B10A74)
                            If ((Local4 != Zero))
                            {
                                Break
                            }
                        }
                    }

                    If ((APGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x01241424, One)
                        Local4 = One
                        Local5 = 0x64
                        While (((Local4 != Zero) && Local5))
                        {
                            Local4 = M249 (Zero, Zero, Zero, 0x01241428)
                            Local4 &= 0x03
                            Local5--
                            Stall (0x63)
                        }

                        M000 (0x0DB5)
                    }
                }
            }
        }

        M460 ("FEA-ASL-CpmPowerGateOn-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (M277, 0, NotSerialized)
    {
        M460 ("FEA-ASL-CpmPowerGateOff-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        If ((M27A == Zero))
        {
            M278 = Zero
        }

        M460 ("  CpmAcpPresentState    = %d\n", M278, Zero, Zero, Zero, Zero, Zero)
        If ((M278 == Zero))
        {
            Local0 = M017 (Zero, 0x08, One, 0x19, Zero, 0x08)
            Local1 = M019 (Local0, Zero, 0x05, Zero)
            If ((M27A == Zero))
            {
                Local1 = 0x15E21022
            }

            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                If ((Local1 != Ones))
                {
                    M000 (0x0DB6)
                    If ((ACGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x03B10A74, Zero)
                        M250 (Zero, Zero, Zero, 0x03B10A54, Zero)
                        M250 (Zero, Zero, Zero, 0x03B10A14, 0x03)
                        Local4 = M249 (Zero, Zero, Zero, 0x03B10A74)
                        While ((Local4 == Zero))
                        {
                            Local4 = M249 (Zero, Zero, Zero, 0x03B10A74)
                            If ((Local4 != Zero))
                            {
                                Break
                            }
                        }
                    }

                    If ((ACGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x03B10A74, Zero)
                        M250 (Zero, Zero, Zero, 0x03B10A54, Zero)
                        M250 (Zero, Zero, Zero, 0x03B10A14, 0x04)
                        Local4 = M249 (Zero, Zero, Zero, 0x03B10A74)
                        While ((Local4 == Zero))
                        {
                            Local4 = M249 (Zero, Zero, Zero, 0x03B10A74)
                            If ((Local4 != Zero))
                            {
                                Break
                            }
                        }
                    }

                    If ((APGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x01241424, Zero)
                        Local4 = One
                        Local5 = 0x64
                        While (((Local4 != 0x02) && Local5))
                        {
                            Local4 = M249 (Zero, Zero, Zero, 0x01241428)
                            Local4 &= 0x03
                            Local5--
                            Stall (0x63)
                        }

                        M000 (0x0DB7)
                    }
                }
            }
        }

        M460 ("FEA-ASL-CpmPowerGateOff-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.ACP._PS0 CpmAcpPresentState = 1\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M278 = One
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.ACP._PS3 CpmAcpPresentState = 0\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M278 = Zero
            M277 ()
        }

        Method (MSG0, 3, Serialized)
        {
            M460 ("FEA-ASL-MSG0-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M000 (0x5511)
            OperationRegion (VARM, SystemIO, 0x80, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            If ((Arg2 != 0x09))
            {
                M000 (0x5518)
                M250 (Zero, Zero, Zero, 0x00058A74, Arg0)
                M250 (Zero, Zero, Zero, 0x00058A54, Arg1)
                M250 (Zero, Zero, Zero, 0x00058A14, Arg2)
                Local0 = M249 (Zero, Zero, Zero, 0x00058A74)
                While ((Local0 == Zero))
                {
                    Local0 = M249 (Zero, Zero, Zero, 0x00058A74)
                    If ((Local0 != Zero))
                    {
                        Break
                    }
                }

                M000 (0x5519)
                Local1 = M249 (Zero, Zero, Zero, 0x00058A54)
                M460 ("FEA-ASL-MSG0-End-1-Return 0x%X\n", Local1, Zero, Zero, Zero, Zero, Zero)
                Return (Local1)
            }

            Name (MBOX, Buffer (0x04){})
            Local0 = M249 (Zero, Zero, Zero, 0x03810570)
            VARR = Local0
            MBOX = Local0
            CreateWordField (MBOX, Zero, STAS)
            CreateByteField (MBOX, 0x02, CMDI)
            CreateField (MBOX, 0x18, 0x05, RESV)
            CreateBitField (MBOX, 0x1D, RSET)
            CreateBitField (MBOX, 0x1E, RCOV)
            CreateBitField (MBOX, 0x1F, REDY)
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While (((REDY != One) || (CMDI != Zero)))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x03810570)
                MBOX = Local0
                M000 (0x5516)
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            Local0 = Zero
            MBOX = Local0
            REDY = Zero
            CMDI = 0x33
            M000 (0x5514)
            Local0 = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            VARR = Local0
            M250 (Zero, Zero, Zero, 0x03810570, Local0)
            Sleep (One)
            M000 (0x5515)
            Local0 = M249 (Zero, Zero, Zero, 0x03810570)
            MBOX = Local0
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While ((CMDI != Zero))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x03810570)
                MBOX = Local0
                M000 (0x5517)
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            If ((STAS != Zero))
            {
                M000 (0x5513)
                M460 ("FEA-ASL-MSG0-Command Fail\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            M000 (0x5512)
            M460 ("FEA-ASL-MSG0-End-2-Return 0x%X\n", Local0, Zero, Zero, Zero, Zero, Zero)
            Return (Local0)
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "EDK2    ", 0x00001000)
{
    Scope (\_SB)
    {
        Name (MDSZ, 0x01E0)
        OperationRegion (PDSP, SystemIO, 0xB0, One)
        Field (PDSP, ByteAcc, NoLock, Preserve)
        {
            IOB2,   8
        }

        OperationRegion (GPCD, SystemMemory, 0x7BAE6000, 0x0200)
        Field (GPCD, AnyAcc, NoLock, Preserve)
        {
            DTSZ,   32, 
            TKNO,   32, 
            PTYP,   8, 
            I_PS,   8, 
            PACT,   8, 
            RSVD,   40, 
            PGUI,   128, 
            DBUF,   3840
        }

        Method (PCDE, 2, Serialized)
        {
            PGUI = Arg0
            TKNO = Arg1
            Local0 = Zero
            IOB2 = 0x17
            If ((I_PS == Zero))
            {
                If ((DTSZ <= MDSZ))
                {
                    Mid (DBUF, Zero, DTSZ, Local0)
                }
            }

            Return (Local0)
        }

        Method (HBID, 0, NotSerialized)
        {
            Local0 = \_SB.PCDE (Buffer (0x10)
                    {
                        /* 0000 */  0x83, 0x18, 0x1F, 0xC5, 0x00, 0xDF, 0x6A, 0x4F,  // ......jO
                        /* 0008 */  0x08, 0xA0, 0x36, 0x9F, 0x60, 0x98, 0xFD, 0xAF   // ..6.`...
                    }, 0x20000032)
            Return (Local0)
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "EDK2    ", 0x00000001)
{
    External (_GPE, DeviceObj)
    External (_GPE.SP00, MethodObj)    // 0 Arguments
    External (_GPE.SP01, MethodObj)    // 0 Arguments
    External (_GPE.SP02, MethodObj)    // 0 Arguments
    External (_GPE.SP03, MethodObj)    // 0 Arguments
    External (_GPE.SP04, MethodObj)    // 0 Arguments
    External (_GPE.SP05, MethodObj)    // 0 Arguments
    External (_GPE.SP06, MethodObj)    // 0 Arguments
    External (_GPE.SP07, MethodObj)    // 0 Arguments
    External (_GPE.SP10, MethodObj)    // 0 Arguments
    External (_GPE.SP11, MethodObj)    // 0 Arguments
    External (_GPE.SP12, MethodObj)    // 0 Arguments
    External (_GPE.SP13, MethodObj)    // 0 Arguments
    External (_GPE.SP14, MethodObj)    // 0 Arguments
    External (_GPE.SP15, MethodObj)    // 0 Arguments
    External (_GPE.SP16, MethodObj)    // 0 Arguments
    External (_GPE.SP17, MethodObj)    // 0 Arguments
    External (_GPE.SP80, MethodObj)    // 0 Arguments
    External (_GPE.SP81, MethodObj)    // 0 Arguments
    External (_GPE.SP82, MethodObj)    // 0 Arguments
    External (_GPE.SP83, MethodObj)    // 0 Arguments
    External (_GPE.SP84, MethodObj)    // 0 Arguments
    External (_GPE.SP85, MethodObj)    // 0 Arguments
    External (_GPE.SP86, MethodObj)    // 0 Arguments
    External (_GPE.SP87, MethodObj)    // 0 Arguments
    External (_GPE.SP90, MethodObj)    // 0 Arguments
    External (_GPE.SP91, MethodObj)    // 0 Arguments
    External (_GPE.SP92, MethodObj)    // 0 Arguments
    External (_GPE.SP93, MethodObj)    // 0 Arguments
    External (_GPE.SP94, MethodObj)    // 0 Arguments
    External (_GPE.SP95, MethodObj)    // 0 Arguments
    External (_GPE.SP96, MethodObj)    // 0 Arguments
    External (_GPE.SP97, MethodObj)    // 0 Arguments
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M127, DeviceObj)
    External (MOEM, MethodObj)    // 3 Arguments

    OperationRegion (CPNV, SystemMemory, 0x7CF68018, 0x000100E1)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72, 
        M453,   32, 
        M454,   16, 
        M455,   8, 
        M456,   8, 
        M457,   8
    }

    Name (CTMR, Zero)
    Name (M285, Buffer (0x04)
    {
         0x01, 0x03, 0x80, 0x00                           // ....
    })
    Method (M000, 1, Serialized)
    {
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        Name (M450, Buffer (0x05)
        {
             0x00, 0x96, 0x05, 0x00, 0x00                     // .....
        })
        CreateDWordField (M450, Zero, M452)
        CreateByteField (M450, 0x04, M451)
        Local0 = (Arg0 + 0xB0000000)
        If ((ToInteger (M286) == One))
        {
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }

        If ((ToInteger (M451) == One))
        {
            Local2 = ToInteger (M452)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }

        OperationRegion (VARP, SystemMemory, 0xFED80808, 0x04)
        Field (VARP, DWordAcc, NoLock, Preserve)
        {
            VARU,   32
        }

        Local1 = VARU /* \M000.VARU */
        If ((Local1 >= CTMR))
        {
            Local2 = (Local1 - CTMR) /* \CTMR */
        }
        Else
        {
            Local2 = (Local1 + ((0xFFFFFFFE - CTMR) + One))
        }

        Divide (Local2, 0x19, Local3, Local2)
        Divide ((Local2 * 0x07), 0x03E8, Local3, Local2)
        If ((Local3 >= 0x64))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        ElseIf ((Local3 >= 0x0A))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.0%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        Else
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.00%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }

        CTMR = Local1
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        M460 ("  KER-ASL-CpmReadBxbSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            M460 ("  KER-ASL-CpmWriteBxbSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == Ones))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        M460 ("  KER-ASL-CpmReadSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != Ones))
        {
            M460 ("  KER-ASL-CpmWriteSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        M460 ("  KER-ASL-CpmReadPcieRegister  (0x%X, 0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local0, Zero)
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWritePcieRegister (0x%X, 0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local5 &= (Ones ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        M410 (Local0, Local1, (((Local2 + One) * One) + Local3
            ), Local5)
    }

    Method (M440, 1, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, Zero)
        Local0 = M011 (0xFEC30000, 0x04, Arg0, One)
        Return (Local0)
    }

    Method (M441, 2, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, One)
        M012 (0xFEC30000, 0x08, Arg0, One, Arg1)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                Local2 = M038 ((Local1 + 0x08))
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Arg0)
        }

        M460 ("  KER-ASL-CpmReadGpio  (0x%X) = 0x%X\n", Arg0, Local2, Zero, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        M460 ("  KER-ASL-CpmWriteGpio (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Arg0, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem32  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem32 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem8  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem8 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0xFF
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M011 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        M460 ("  KER-ASL-CpmGetPcieAspm (0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Local0, Zero, Zero)
        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        M460 ("  KER-ASL-CpmSetPcieAspm (0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 ((Local5 & 0xFF00FFFF), Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        If (((Local7 >> 0x10) > Zero))
                                        {
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                            }
                                            Else
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            }

                                            Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                            }
                                            Else
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                            }
                                        }
                                        ElseIf ((Local2 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                ), 0x02, Zero)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                        }
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            If (((Local7 >> 0x10) > Zero))
                                            {
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                }
                                                Else
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                }

                                                Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                Local6 |= (0x03 << (Local2 << One))
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                }
                                                Else
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                }
                                            }
                                            ElseIf ((Local2 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                    ), 0x02, 0x03)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                            }
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                If (((Local7 >> 0x10) > Zero))
                                                {
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                    }
                                                    Else
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                    }

                                                    Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                    Local6 |= (Local3 << (Local2 << One))
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                    }
                                                    Else
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                    }
                                                }
                                                ElseIf ((Local2 >= 0x04))
                                                {
                                                    M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                        ), 0x02, Local3)
                                                }
                                                Else
                                                {
                                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Local3)
                                                }
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                Local7 = M009 ((Local5 & 0xFF00FFFF))
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 ((Local5 & 0xFF00FFFF))
                                }
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0E
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (Ones)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017.2"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2018"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2018.2"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2019"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2020"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            Local0 = VARR /* \M049.VARR */
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            Local0 = VARR /* \M04A.VARR */
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local0 = VARR /* \M04B.VARR */
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        M460 ("  KER-ASL-CpmTriggerSmi (0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 2, NotSerialized)
    {
        Local0 = (Arg0 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg1 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x07
            Local3 = 0x14301000
        }
        ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            Local2 = 0x10
            Local3 = 0x14601000
        }
        ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
        {
            Local2 = 0x0A
            Local3 = 0x14301000
        }
        ElseIf ((M085 == 0x0F))
        {
            Local2 = 0x0B
            Local3 = 0x14301000
        }
        Else
        {
            Local2 = 0x10
            Local3 = 0x14301000
        }

        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M402, 2, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x09) && (M085 <= 0x0A)))
            {
                Local6 = (0x11140294 + (Local4 << 0x0C))
                Local7 = 0x11180188
            }
            ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                If ((Local4 >= 0x08))
                {
                    Local6 = (0x11840294 + ((Local4 - 0x08) << 0x0C))
                    Local7 = 0x11880188
                }
                Else
                {
                    Local6 = (0x11440294 + (Local4 << 0x0C))
                    Local7 = 0x11480188
                }
            }
            ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local6 = (0x11240294 + ((Local4 - 0x03) << 0x0C))
                    Local7 = 0x11280188
                }
                Else
                {
                    Local6 = (0x11140294 + (Local4 << 0x0C))
                    Local7 = 0x11180188
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local6 = (0x11240294 + ((Local4 - 0x05) << 0x0C))
                    Local7 = 0x11280188
                }
                Else
                {
                    Local6 = (0x11140294 + (Local4 << 0x0C))
                    Local7 = 0x11180188
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local6 = (0x11240294 + ((Local4 - 0x08) << 0x0C))
                Local7 = 0x11280188
            }
            Else
            {
                Local6 = (0x11140294 + (Local4 << 0x0C))
                Local7 = 0x11180188
            }

            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local0 = M249 (Zero, Zero, Zero, Local7)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, Local7, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg0 << 0x13) | (Arg1 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                }
            }

            Local3 = M249 (Zero, Zero, Zero, Local6)
            Local5 = 0x4EEA
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                Local3 = M249 (Zero, Zero, Zero, Local6)
            }

            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, Local7, Local0)
            }
        }
    }

    Method (M403, 3, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x09) && (M085 <= 0x0A)))
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }
            ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                If ((Local4 >= 0x08))
                {
                    Local2 = (0x11840280 + ((Local4 - 0x08) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11440280 + (Local4 << 0x0C))
                }
            }
            ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local2 = (0x11240280 + ((Local4 - 0x03) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11140280 + (Local4 << 0x0C))
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local2 = (0x11240280 + ((Local4 - 0x05) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11140280 + (Local4 << 0x0C))
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local2 = (0x11240280 + ((Local4 - 0x08) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }

            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg2
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Method (M458, 1, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                THRM,   8, 
                Offset (0x14), 
                LSRM,   8, 
                Offset (0x18), 
                MSRM,   8
            }

            Local1 = 0x001E8480
            While (((Local1 > Zero) && ((LSRM & 0x60) != 0x60)))
            {
                Local1 -= One
            }

            If ((M457 != Zero))
            {
                Local2 = 0x001E8480
                While (((Local2 > Zero) && ((MSRM & 0x10) != 0x10)))
                {
                    Local2 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRM = Arg0
                Return (Zero)
            }
        }
        ElseIf ((Local0 > Zero))
        {
            CreateWordField (M285, 0x02, M288)
            OperationRegion (VARN, SystemIO, Local0, 0x08)
            Field (VARN, ByteAcc, NoLock, Preserve)
            {
                THRI,   8, 
                Offset (0x05), 
                LSRI,   8
            }

            Local1 = 0x001E8480
            If ((ToInteger (M288) != Local0))
            {
                While (((Local1 > Zero) && ((LSRI & 0x60) != 0x60)))
                {
                    Local1 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRI = Arg0
                Return (Zero)
            }
        }

        Return (0xFF)
    }

    Method (M459, 2, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }

        Local0 = SizeOf (Arg0)
        ToInteger (Arg1, Local1)
        Local2 = Zero
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local2 = M458 (DerefOf (Local3 [Local1]))
                Local1 += One
            }
        }

        Return (Local2)
    }

    Method (M460, 7, NotSerialized)
    {
        CreateWordField (M285, 0x02, M288)
        ToInteger (M453, Local7)
        If ((Local7 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local7 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local7, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }
        ElseIf ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARS, SystemIO, Local7, 0x04)
            Field (VARS, DWordAcc, NoLock, Preserve)
            {
                VART,   32
            }

            VART = 0x5F535452
        }

        Local0 = SizeOf (Arg0)
        Local1 = Zero
        Local2 = Zero
        Local5 = One
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local4 = DerefOf (Local3 [Local1])
                If (((Local4 == 0x25) && (0x07 > Local5)))
                {
                    If ((Local5 == One))
                    {
                        Local6 = Arg1
                    }
                    ElseIf ((Local5 == 0x02))
                    {
                        Local6 = Arg2
                    }
                    ElseIf ((Local5 == 0x03))
                    {
                        Local6 = Arg3
                    }
                    ElseIf ((Local5 == 0x04))
                    {
                        Local6 = Arg4
                    }
                    ElseIf ((Local5 == 0x05))
                    {
                        Local6 = Arg5
                    }
                    ElseIf ((Local5 == 0x06))
                    {
                        Local6 = Arg6
                    }

                    Local5 += One
                    Local1 += One
                    Local4 = DerefOf (Local3 [Local1])
                    If (((Local4 == 0x58) || (Local4 == 0x78)))
                    {
                        Local2 = M459 (ToHexString (Local6), 0x02)
                    }
                    ElseIf (((Local4 == 0x44) || (Local4 == 0x64)))
                    {
                        Local2 = M459 (ToDecimalString (Local6), Zero)
                    }
                    ElseIf (((Local4 == 0x53) || (Local4 == 0x73)))
                    {
                        Local2 = M459 (Local6, Zero)
                    }
                    Else
                    {
                        Local2 = M458 (0x25)
                        Local5 -= One
                        Local1 -= One
                    }
                }
                ElseIf ((Local4 == 0x0A))
                {
                    Local2 = M458 (0x0D)
                    Local2 = M458 (0x0A)
                }
                Else
                {
                    Local2 = M458 (Local4)
                }

                Local1 += One
            }
        }

        If ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARU, SystemIO, Local7, 0x04)
            Field (VARU, DWordAcc, NoLock, Preserve)
            {
                VARV,   32
            }

            VARV = 0x5F454E44
        }

        Return (Local2)
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 <<= (Local1 * 0x02)
                Local0 &= 0x03
            }
            ElseIf ((Local1 >= 0x04))
            {
                Local0 = M011 ((M084 + 0x0E00), One, ((Local1 - 0x04
                    ) * 0x02), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 
                    0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 / 0x02), (
                (Arg4 & One) * 0x04), 0x04)
        }

        M460 ("  KER-ASL-CpmReadClkReq  (%d, %d, %d, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Arg4, Local0)
        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteClkReq (%d, %d, %d, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 &= (Ones ^ (0x03 << (Local1 << One)))
                Local0 |= (Arg5 << (Local1 << One))
                If ((Arg3 == 0x02))
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D02300, Local0)
                }
                Else
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
            }
            ElseIf ((Local1 >= 0x04))
            {
                M012 ((M084 + 0x0E00), One, ((Local1 - 0x04) * 0x02
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 / 0x02), ((Arg4 & 
                One) * 0x04), 0x04, Arg5)
        }
    }

    Mutex (M408, 0x00)
    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    Release (M408)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    Release (M408)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (MPTS, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MPTS (0x%X)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TPTS (0x%X)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TPTS (0x%X)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TPTS (0x%X)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_PTS (0x%X)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x21)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.IPTS (0x%X)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.IPTS (Arg0)
                }
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MWAK (0x%X)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TWAK (0x%X)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TWAK (0x%X)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TWAK (0x%X)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_WAK (0x%X)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmLowPowerEthernet_WAK (0x%X)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x21)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.IWAK (0x%X)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.IWAK (Arg0)
                }
            }
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            M460 ("  KER-ASL-\\_SB.GPIO._INI Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((\_GPE.M420 != 0xFF))
            {
                If (((\_GPE.M415 != 0xFF) && (\_GPE.M411 != 0xFF)))
                {
                    M460 ("  KER-ASL-Smbus IO Expander 0 GPIO Event is supported\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Local0 = (\_GPE.M415 & One)
                    Local1 = (\_GPE.M411 & 0x7F)
                    \_GPE.M419 = M409 (Local0, Local1, Zero)
                    If (((\_GPE.M416 != 0xFF) && (\_GPE.M416 >= One)))
                    {
                        \_GPE.M41C = M409 (Local0, Local1, One)
                    }
                }
            }

            If ((\_GPE.M46A != 0xFF))
            {
                If (((\_GPE.M462 != 0xFF) && (\_GPE.M461 != 0xFF)))
                {
                    M460 ("  KER-ASL-Smbus IO Expander 1 GPIO Event is supported\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Local0 = (\_GPE.M462 & One)
                    Local1 = (\_GPE.M461 & 0x7F)
                    \_GPE.M466 = M409 (Local0, Local1, Zero)
                    If (((\_GPE.M463 != 0xFF) && (\_GPE.M463 >= One)))
                    {
                        \_GPE.M469 = M409 (Local0, Local1, One)
                    }
                }
            }

            M460 ("  KER-ASL-\\_SB.GPIO._INI End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }
    }

    Scope (\_GPE)
    {
        Name (M411, 0x24)
        Name (M415, 0x01)
        Name (M416, 0x00)
        Name (M417, 0x40)
        Name (M418, 0x40)
        Name (M419, 0xFF)
        Name (M41A, 0x00)
        Name (M41B, 0x00)
        Name (M41C, 0xFF)
        Name (M420, 0xFF)
        Name (M461, 0x20)
        Name (M462, 0x01)
        Name (M463, 0x00)
        Name (M464, 0x00)
        Name (M465, 0x00)
        Name (M466, 0xFF)
        Name (M467, 0x00)
        Name (M468, 0x00)
        Name (M469, 0xFF)
        Name (M46A, 0xFF)
        Method (XL0A, 0, NotSerialized)
        {
            Local3 = Zero
            Local5 = Zero
            If ((\_GPE.M420 != 0xFF))
            {
                If (((\_GPE.M415 != 0xFF) && (\_GPE.M411 != 0xFF)))
                {
                    Local0 = (\_GPE.M415 & One)
                    Local1 = (\_GPE.M411 & 0x7F)
                    Local2 = \_GPE.M419
                    Local3 = M409 (Local0, Local1, Zero)
                    \_GPE.M419 = Local3
                    Local3 ^= Local2
                    Local3 |= \_GPE.M418
                    Local3 &= \_GPE.M417
                    If (((\_GPE.M416 != 0xFF) && (\_GPE.M416 >= One)))
                    {
                        Local4 = \_GPE.M41C
                        Local5 = M409 (Local0, Local1, One)
                        \_GPE.M41C = Local5
                        Local5 ^= Local4
                        Local5 |= \_GPE.M41B
                        Local5 &= \_GPE.M41A
                    }
                }
            }

            If (((Local3 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    \_GPE.SP00 ()
                }
            }

            If (((Local3 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    \_GPE.SP01 ()
                }
            }

            If (((Local3 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    \_GPE.SP02 ()
                }
            }

            If (((Local3 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    \_GPE.SP03 ()
                }
            }

            If (((Local3 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    \_GPE.SP04 ()
                }
            }

            If (((Local3 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    \_GPE.SP05 ()
                }
            }

            If (((Local3 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    \_GPE.SP06 ()
                }
            }

            If (((Local3 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    \_GPE.SP07 ()
                }
            }

            If (((Local5 & One) == One))
            {
                If (CondRefOf (\_GPE.SP10))
                {
                    \_GPE.SP10 ()
                }
            }

            If (((Local5 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP11))
                {
                    \_GPE.SP11 ()
                }
            }

            If (((Local5 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP12))
                {
                    \_GPE.SP12 ()
                }
            }

            If (((Local5 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP13))
                {
                    \_GPE.SP13 ()
                }
            }

            If (((Local5 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP14))
                {
                    \_GPE.SP14 ()
                }
            }

            If (((Local5 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP15))
                {
                    \_GPE.SP15 ()
                }
            }

            If (((Local5 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP16))
                {
                    \_GPE.SP16 ()
                }
            }

            If (((Local5 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP17))
                {
                    \_GPE.SP17 ()
                }
            }
        }

        Method (XL0C, 0, NotSerialized)
        {
            Local3 = Zero
            Local5 = Zero
            If ((\_GPE.M46A != 0xFF))
            {
                If (((\_GPE.M462 != 0xFF) && (\_GPE.M461 != 0xFF)))
                {
                    Local0 = (\_GPE.M462 & One)
                    Local1 = (\_GPE.M461 & 0x7F)
                    Local2 = \_GPE.M466
                    Local3 = M409 (Local0, Local1, Zero)
                    \_GPE.M466 = Local3
                    Local3 ^= Local2
                    Local3 |= \_GPE.M465
                    Local3 &= \_GPE.M464
                    If (((\_GPE.M463 != 0xFF) && (\_GPE.M463 >= One)))
                    {
                        Local4 = \_GPE.M469
                        Local5 = M409 (Local0, Local1, One)
                        \_GPE.M469 = Local5
                        Local5 ^= Local4
                        Local5 |= \_GPE.M468
                        Local5 &= \_GPE.M467
                    }
                }
            }

            If (((Local3 & One) == One))
            {
                If (CondRefOf (\_GPE.SP80))
                {
                    \_GPE.SP80 ()
                }
            }

            If (((Local3 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP81))
                {
                    \_GPE.SP81 ()
                }
            }

            If (((Local3 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP82))
                {
                    \_GPE.SP82 ()
                }
            }

            If (((Local3 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP83))
                {
                    \_GPE.SP83 ()
                }
            }

            If (((Local3 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP84))
                {
                    \_GPE.SP84 ()
                }
            }

            If (((Local3 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP85))
                {
                    \_GPE.SP85 ()
                }
            }

            If (((Local3 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP86))
                {
                    \_GPE.SP86 ()
                }
            }

            If (((Local3 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP87))
                {
                    \_GPE.SP87 ()
                }
            }

            If (((Local5 & One) == One))
            {
                If (CondRefOf (\_GPE.SP90))
                {
                    \_GPE.SP90 ()
                }
            }

            If (((Local5 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP91))
                {
                    \_GPE.SP91 ()
                }
            }

            If (((Local5 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP92))
                {
                    \_GPE.SP92 ()
                }
            }

            If (((Local5 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP93))
                {
                    \_GPE.SP93 ()
                }
            }

            If (((Local5 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP94))
                {
                    \_GPE.SP94 ()
                }
            }

            If (((Local5 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP95))
                {
                    \_GPE.SP95 ()
                }
            }

            If (((Local5 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP96))
                {
                    \_GPE.SP96 ()
                }
            }

            If (((Local5 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP97))
                {
                    \_GPE.SP97 ()
                }
            }
        }

        Method (XL0B, 0, NotSerialized)
        {
            Name (M448, Package (0x02)
            {
                One, 
                One
            })
            Local0 = M04A (M128, 0x91)
            If (((Local0 & 0xC0) == 0xC0))
            {
                Local3 = Buffer (0x08){}
                CreateWordField (Local3, Zero, M254)
                CreateByteField (Local3, 0x02, M255)
                CreateDWordField (Local3, 0x03, M256)
                M256 = Zero
                M254 = 0x07
                M255 = 0x30
                If ((M085 == 0x0E))
                {
                    If (CondRefOf (\_SB.ALIB))
                    {
                        M460 ("  KER-ASL-Call VN \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                        Local4 = \_SB.ALIB (0x0C, Local3)
                    }
                }
                ElseIf (CondRefOf (\_SB.ALIB))
                {
                    M460 ("  KER-ASL-Call Other \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                    M448 = \_SB.ALIB (0x0C, Local3)
                }

                If (CondRefOf (\_SB.APAD))
                {
                    If ((M085 == 0x0E))
                    {
                        \_SB.APAD.M446 [One] = Local4
                        M460 ("  KER-ASL-Notify VN \\_SB.APAD 0x80\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.APAD, 0x80) // Status Change
                    }
                    Else
                    {
                        Local1 = Zero
                        Local2 = Zero
                        Local1 = M448 [Zero]
                        Local2 = M448 [One]
                        \_SB.APAD.M446 [One] = Local2
                        If ((Local1 == 0x02))
                        {
                            M460 ("  KER-ASL-Notify \\_SB.APAD 0x85\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.APAD, 0x85) // Device-Specific
                        }
                        ElseIf ((Local1 == One))
                        {
                            M460 ("  KER-ASL-Notify \\_SB.APAD 0x84\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.APAD, 0x84) // Reserved
                        }
                        Else
                        {
                            M460 ("  KER-ASL-Notify \\_SB.APAD 0x80\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.APAD, 0x80) // Status Change
                        }
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M04A (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0xF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (0x0F)
                    }
                    Else
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }
                }
                Else
                {
                    M460 ("  KER-ASL-1-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                M460 ("  KER-ASL-\\_SB.APAD._INI\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = M04A (M128, 0x91)
                If (((Local0 & 0xC0) == 0xC0))
                {
                    Local3 = Buffer (0x08){}
                    CreateWordField (Local3, Zero, M254)
                    CreateByteField (Local3, 0x02, M255)
                    CreateDWordField (Local3, 0x03, M256)
                    M256 = (Local0 >> 0x08)
                    M254 = 0x07
                    M255 = 0x31
                    If (CondRefOf (\_SB.ALIB))
                    {
                        M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                        \_SB.ALIB (0x0C, Local3)
                    }
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                M460 ("  KER-ASL-\\_SB.APAD._PUR CpmIdleCoreCount = 0x%X\n", M446, Zero, Zero, Zero, Zero, Zero)
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "AMDyde", "EDK2    ", 0x00000002)
{
    External (_SB_.PCI0.GP18.SATA, DeviceObj)

    Scope (\_SB.PCI0.GP18.SATA)
    {
        Device (PRT0)
        {
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Name (NOP, Buffer (0x07)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
            })
            Name (SGTF, Buffer (0x07)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5         // .......
            })
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                If (Zero)
                {
                    Return (SGTF) /* \_SB_.PCI0.GP18.SATA.PRT0.SGTF */
                }
                Else
                {
                    Return (NOP) /* \_SB_.PCI0.GP18.SATA.PRT0.NOP_ */
                }
            }
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "EDK2    ", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF8000000)
        Name (ADBG, Buffer (0x0100){})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
            /* 0050 */  0x04, 0xFF, 0xFF, 0x02, 0x00, 0x01, 0x03, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0060 */  0x00, 0x00, 0x00, 0x05, 0x05, 0xFF, 0xFF, 0x03,  // ........
            /* 0068 */  0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A013)
                CreateWordField (Arg1, 0x02, A014)
                CreateDWordField (Arg1, 0x04, A015)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A016)
                A016 = A013 /* \_SB_.ALIB.A013 */
                CreateWordField (Local0, 0x02, A017)
                A017 = A014 /* \_SB_.ALIB.A014 */
                CreateDWordField (Local0, 0x04, A018)
                A018 = A015 /* \_SB_.ALIB.A015 */
                A018 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A018 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A019 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A022 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A023 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A024 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A025 (Arg1)
            }

            If ((Arg0 == 0x10))
            {
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A026)
                CreateDWordField (Local7, 0x04, A027)
                CreateDWordField (Local7, 0x08, A028)
                CreateDWordField (Local7, 0x0C, A029)
                CreateDWordField (Local7, 0x10, A030)
                CreateDWordField (Local7, 0x14, A031)
                A026 = 0x00
                A027 = 0x00
                A028 = 0x00
                A029 = 0x00
                A030 = 0x00
                A031 = 0x00
                A011 (0x26, Local7)
            }

            If ((Arg0 == 0x11))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A005)
                CreateDWordField (Local6, 0x04, A006)
                CreateDWordField (Local6, 0x08, A007)
                CreateDWordField (Local6, 0x0C, A008)
                CreateDWordField (Local6, 0x10, A009)
                CreateDWordField (Local6, 0x14, A010)
                A005 = 0x00
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                A011 (0x25, Local6)
            }

            If ((Arg0 == 0xAA))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A032)
                CreateDWordField (Local6, 0x04, A033)
                CreateDWordField (Local6, 0x08, A034)
                CreateDWordField (Local6, 0x0C, A035)
                CreateDWordField (Local6, 0x10, A036)
                CreateDWordField (Local6, 0x14, A037)
                A032 = 0x00
                A033 = 0x00
                A034 = 0x00
                A035 = 0x00
                A036 = 0x00
                A037 = 0x00
                A038 (Arg1)
            }

            Return (0x00)
        }

        Method (A022, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A089 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local2 = A090 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A016)
            CreateByteField (Local7, 0x02, A040)
            CreateByteField (Local7, 0x03, A091)
            A016 = 0x04
            A040 = 0x00
            If ((Local2 == 0x00))
            {
                A091 = 0x00
            }
            Else
            {
                A091 = 0x01
            }

            Return (Local7)
        }

        Method (A089, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A084 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A084 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A084 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A084 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A084 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A084 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A084 (Arg1))
            }
        }

        Method (A090, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A085 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A085 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A085 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A085 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A085 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A085 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A085 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A019, 1, NotSerialized)
        {
            AD00 = Arg0
            A004 ()
        }

        Method (A023, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A024, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A039, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A016)
            A016 = 0x03
            CreateByteField (Local7, 0x02, A040)
            A040 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A040 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A040 = 0x01
                Return (Local7)
            }

            A041 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A042 ()
            A040 = 0x02
            Return (Local7)
        }

        Method (A043, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A042 ()
        }

        Method (A044, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A045, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A046, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x0A))
                {
                    A047 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A042 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A048, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A041, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                If ((A049 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A050 (Local0)
                        A051 (Local0, Local1)
                    }
                    Else
                    {
                        A051 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A052, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A053 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A054, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A055 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A042, 0, NotSerialized)
        {
            A054 ()
            A052 ()
            If ((AP02 != AP01))
            {
                A012 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A053 (Local0)
                Local2 = A056 (Local0)
                If ((Local1 != Local2))
                {
                    A057 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A057 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A057, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A058 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A058 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A058 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A058 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A058 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A058 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A058 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A058 (Arg1))
            }
        }

        Method (A056, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A059 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A059 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A059 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A059 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A059 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A059 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A059 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A059 ())
            }
        }

        Method (A053, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A060 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A060 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A060 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A060 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A060 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A060 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A060 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A060 ())
            }
        }

        Method (A055, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A061 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A061 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A061 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A061 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A061 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A061 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A061 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A061 ())
            }
        }

        Method (A050, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A062 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A062 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A062 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A062 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A062 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A062 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A062 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A062 ())
            }
        }

        Method (A051, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A063 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A063 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A063 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A063 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A063 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A063 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A063 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A063 (Arg1))
            }
        }

        Method (A049, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A064 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A064 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A064 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A064 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A064 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A064 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A064 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A064 (Arg1))
            }
        }

        Method (A047, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A065 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A065 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A065 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A065 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A065 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A065 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A065 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A065 ())
            }
        }

        OperationRegion (A120, SystemMemory, AGRB, 0x1000)
        Field (A120, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A121,   32
        }

        BankField (A120, A121, 0x03B10528, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A118,   32
        }

        BankField (A120, A121, 0x03B10578, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A111,   32
        }

        BankField (A120, A121, 0x03B10998, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A112,   32
        }

        BankField (A120, A121, 0x03B1099C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A113,   32
        }

        BankField (A120, A121, 0x03B109A0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A114,   32
        }

        BankField (A120, A121, 0x03B109A4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A115,   32
        }

        BankField (A120, A121, 0x03B109A8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A116,   32
        }

        BankField (A120, A121, 0x03B109AC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A117,   32
        }

        BankField (A120, A121, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A094,   32
        }

        BankField (A120, A121, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A102,   32
        }

        BankField (A120, A121, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A103,   32
        }

        BankField (A120, A121, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A104,   32
        }

        BankField (A120, A121, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A095,   32
        }

        BankField (A120, A121, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A096,   32
        }

        BankField (A120, A121, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A097,   32
        }

        BankField (A120, A121, 0x11243280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A098,   32
        }

        BankField (A120, A121, 0x11244280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A099,   32
        }

        BankField (A120, A121, 0x11245280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A100,   32
        }

        BankField (A120, A121, 0x11246280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A101,   32
        }

        Method (A092, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A073 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A073 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A073 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A073 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A073 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A073 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A073 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A073 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A073 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A073 (Arg1))
            }
        }

        Method (A093, 2, NotSerialized)
        {
            If ((Arg1 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000B0300
                }

                Local1 = A094 /* \_SB_.A094 */
                Local1 &= 0xFF00FCFF
                A094 = (Local0 | Local1)
                Local1 = A094 /* \_SB_.A094 */
                A094 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == 0x00))
            {
                If ((Arg0 == 0x00))
                {
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0x00400000 | Local1)
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x01))
                {
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0x00400000 | Local1)
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A097 /* \_SB_.A097 */
                    A097 = (0x00400000 | Local1)
                    Local1 = A097 /* \_SB_.A097 */
                    A097 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A098 /* \_SB_.A098 */
                    A098 = (0x00400000 | Local1)
                    Local1 = A098 /* \_SB_.A098 */
                    A098 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A099 /* \_SB_.A099 */
                    A099 = (0x00400000 | Local1)
                    Local1 = A099 /* \_SB_.A099 */
                    A099 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A100 /* \_SB_.A100 */
                    A100 = (0x00400000 | Local1)
                    Local1 = A100 /* \_SB_.A100 */
                    A100 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A101 /* \_SB_.A101 */
                    A101 = (0x00400000 | Local1)
                    Local1 = A101 /* \_SB_.A101 */
                    A101 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A102 /* \_SB_.A102 */
                    A102 = (0x00400000 | Local1)
                    Local1 = A102 /* \_SB_.A102 */
                    A102 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A103 /* \_SB_.A103 */
                    A103 = (0x00400000 | Local1)
                    Local1 = A103 /* \_SB_.A103 */
                    A103 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A104 /* \_SB_.A104 */
                    A104 = (0x00400000 | Local1)
                    Local1 = A104 /* \_SB_.A104 */
                    A104 = (0xFFBFFFFF & Local1)
                }
            }
        }

        Method (A003, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A092 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    A093 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A011, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A105)
            CreateDWordField (Arg1, 0x04, A106)
            CreateDWordField (Arg1, 0x08, A107)
            CreateDWordField (Arg1, 0x0C, A108)
            CreateDWordField (Arg1, 0x10, A109)
            CreateDWordField (Arg1, 0x14, A110)
            A111 = 0x00
            While ((A111 != 0x00)){}
            A112 = A105 /* \_SB_.A011.A105 */
            A113 = A106 /* \_SB_.A011.A106 */
            A114 = A107 /* \_SB_.A011.A107 */
            A115 = A108 /* \_SB_.A011.A108 */
            A116 = A109 /* \_SB_.A011.A109 */
            A117 = A110 /* \_SB_.A011.A110 */
            A118 = Arg0
            While ((A111 == 0x00)){}
        }

        Method (A087, 5, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = Arg0
            A006 = Arg1
            A007 = Arg2
            A008 = Arg3
            A011 (0x09, Local7)
        }

        Method (A025, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A119)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            Local0 = 0x02
            While ((Local0 < A119))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A005 = 0x00
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                If ((Local1 == 0x01))
                {
                    A005 = Local2
                    A011 (0x18, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A005 = Local2
                    A011 (0x19, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A005 = Local2
                    A011 (0x14, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A005 = Local2
                    A011 (0x15, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A005 = Local2
                    A011 (0x16, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A005 = Local2
                    A011 (0x17, Local7)
                }

                If ((Local1 == 0x09))
                {
                    A005 = Local2
                    A011 (0x20, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A005 = Local2
                    A011 (0x1A, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A005 = Local2
                    A011 (0x1C, Local7)
                }

                If ((Local1 == 0x0D))
                {
                    A005 = Local2
                    A011 (0x1E, Local7)
                }

                If ((Local1 == 0x0E))
                {
                    A005 = Local2
                    A011 (0x1B, Local7)
                }

                If ((Local1 == 0x0F))
                {
                    A005 = Local2
                    A011 (0x1F, Local7)
                }

                If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
                {
                    If ((Local1 == 0x10))
                    {
                        If ((Local2 == 0x00))
                        {
                            A011 (0x26, Local7)
                        }
                        Else
                        {
                            A011 (0x25, Local7)
                        }
                    }
                }

                If ((Local1 == 0x11))
                {
                    A005 = Local2
                    A011 (0x1D, Local7)
                }

                If ((Local1 == 0x20))
                {
                    A005 = Local2
                    A011 (0x36, Local7)
                }

                If ((Local1 == 0x21))
                {
                    A005 = Local2
                    A011 (0x37, Local7)
                }

                If ((Local1 == 0x22))
                {
                    A005 = Local2
                    A011 (0x38, Local7)
                }

                If ((Local1 == 0x23))
                {
                    A005 = Local2
                    A011 (0x39, Local7)
                }

                If ((Local1 == 0x24))
                {
                    A005 = Local2
                    A011 (0x3A, Local7)
                }

                If ((Local1 == 0x25))
                {
                    A005 = Local2
                    A011 (0x3B, Local7)
                }

                If ((Local1 == 0x26))
                {
                    A005 = Local2
                    A011 (0x3C, Local7)
                }

                If ((Local1 == 0x27))
                {
                    A005 = Local2
                    A011 (0x3D, Local7)
                }

                If ((Local1 == 0x28))
                {
                    A005 = Local2
                    A011 (0x3E, Local7)
                }

                If ((Local1 == 0x29))
                {
                    A005 = Local2
                    A011 (0x3F, Local7)
                }

                If ((Local1 == 0x2A))
                {
                    A005 = Local2
                    A011 (0x40, Local7)
                }

                If ((Local1 == 0x2B))
                {
                    A005 = Local2
                    A011 (0x41, Local7)
                }

                If ((Local1 == 0x2C))
                {
                    A005 = Local2
                    A011 (0x42, Local7)
                }

                If ((Local1 == 0x2D))
                {
                    A005 = Local2
                    A011 (0x43, Local7)
                }

                If ((Local1 == 0x2E))
                {
                    A005 = Local2
                    A011 (0x53, Local7)
                }

                If ((Local1 == 0x30))
                {
                    A005 = Local2
                    A011 (0x52, Local7)
                    Local5 = A112 /* \_SB_.A112 */
                    Local6 = A113 /* \_SB_.A113 */
                    Return (Local6)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR0.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR0.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR1.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR1.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR2.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR2.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR3.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR3.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR4.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR4.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR5.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR5.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR6.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR6.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR7.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR7.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR8.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR8.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR8.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR8.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR9.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR9.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR9.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR9.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A122, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
            {
                Local0 = 0x00
                While ((Local0 < 0x0A))
                {
                    A123 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A076, 3, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = Arg1
            A006 = Arg2
            A011 (Arg0, Local7)
        }

        Method (A123, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A074 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A074 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A074 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A074 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A074 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A074 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A074 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A074 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A074 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A074 (Arg1))
            }
        }

        Method (A038, 1, Serialized)
        {
            Local0 = 0x00
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A005 = 0x00
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            If ((Local1 == 0x00))
            {
                A005 = Local2
                A122 (0x00)
            }

            If ((Local1 == 0x01))
            {
                A005 = Local2
                A122 (0x01)
            }

            If ((Local1 == 0x02))
            {
                A005 = Local2
                A011 (0x25, Local7)
            }

            If ((Local1 == 0x03))
            {
                A005 = Local2
                A011 (0x26, Local7)
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A003 (Local0, Local1)
        }

        Method (A004, 0, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = 0x00
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            If ((AD00 == 0x00))
            {
                A011 (0x11, Local7)
            }
            Else
            {
                A011 (0x12, Local7)
            }
        }

        Method (A012, 2, NotSerialized)
        {
        }
    }
}



TPM2
----
[000h 0000 004h]                   Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004 004h]                Table Length : 0000004C
[008h 0008 001h]                    Revision : 04
[009h 0009 001h]                    Checksum : E7
[00Ah 0010 006h]                      Oem ID : "AMD"
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 002h]              Platform Class : 0000
[026h 0038 002h]                    Reserved : 0000
[028h 0040 008h]             Control Address : 00000000A0010510
[030h 0048 004h]                Start Method : 02 [ACPI Start Method]

[034h 0052 00Ch]           Method Parameters : 00 00 00 00 00 00 00 00 00 00 00 00
[040h 0064 004h]          Minimum Log Length : 00010000
[044h 0068 008h]                 Log Address : 00000000746E9000

Raw Table Data: Length 76 (0x4C)

    0000: 54 50 4D 32 4C 00 00 00 04 E7 41 4D 44 00 00 00  // TPM2L.....AMD...
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 00 00 00 00 10 05 01 A0 00 00 00 00  // ................
    0030: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 01 00 00 90 6E 74 00 00 00 00              // ......nt....


UEFI
----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 00000236
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 2C
[00Ah 0010 006h]                      Oem ID : "AMDYDE"
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 010h]             UUID Identifier : 9D4BF935-A674-4710-BA02-BF0AA1758C7B
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 566 (0x236)

    0000: 55 45 46 49 36 02 00 00 01 2C 41 4D 44 59 44 45  // UEFI6....,AMDYDE
    0010: 45 44 4B 32 20 20 20 20 01 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 35 F9 4B 9D 74 A6 10 47 BA 02 BF 0A  // ....5.K.t..G....
    0030: A1 75 8C 7B 36 00 24 42 56 44 54 24 00 00 00 24  // .u.{6.$BVDT$...$
    0040: 00 00 00 24 46 37 41 30 31 31 30 00 00 00 00 00  // ...$F7A0110.....
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 24 43 48 41  // ............$CHA
    0060: 43 48 41 4E 49 2D 56 41 4E 47 4F 47 48 00 00 00  // CHANI-VANGOGH...
    0070: 00 00 00 00 00 00 24 30 35 2E 34 33 2E 30 36 00  // ......$05.43.06.
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF  // ................
    00A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0100: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0110: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0120: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0130: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0140: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0150: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0160: FF FF FF FF FF 24 42 4D 45 24 00 80 62 00 00 10  // .....$BME$..b...
    0170: 00 00 24 00 00 00 01 00 00 00 00 24 00 FF FF FF  // ..$........$....
    0180: FF FF FF FF FF 24 5F 4D 53 43 5F 56 45 52 3D 40  // .....$_MSC_VER=@
    0190: 06 24 52 44 41 54 45 22 08 20 24 45 53 52 54 10  // .$RDATE". $ESRT.
    01A0: 00 01 00 06 CF B1 BB B9 F7 66 44 AD CC 6B 88 15  // .........fD..k..
    01B0: BD 99 E6 8B 01 00 00 24 45 4E 44 4F 46 42 56 44  // .......$ENDOFBVD
    01C0: 54 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // T...............
    01D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0200: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0210: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0220: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0230: FF FF FF FF FF FF                                // ......


VFCT
----
[000h 0000 004h]                   Signature : "VFCT"    
[004h 0004 004h]                Table Length : 0000A684
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 5F
[00Ah 0010 006h]                      Oem ID : "AMDYDE"
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 42628 (0xA684)

    0000: 56 46 43 54 84 A6 00 00 01 5F 41 4D 44 59 44 45  // VFCT....._AMDYDE
    0010: 45 44 4B 32 20 20 20 20 01 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // ....2..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 3F 16 00 00 00 00  // ..........?.....
    0060: 01 00 00 00 00 A6 00 00 55 AA 53 E9 6A 1A 00 00  // ........U.S.j...
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: B8 01 00 00 00 00 49 42 4D 70 24 98 00 00 00 00  // ......IBMp$.....
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 8C 01 00 00 00 00 00 00 31 31 2F 30 32 2F 32 30  // ........11/02/20
    00C0: 2C 30 33 3A 33 35 3A 33 31 00 00 00 E9 9F 1B 00  // ,03:35:31.......
    00D0: E9 A9 1B 00 00 00 70 00 31 31 33 2D 41 4D 44 41  // ......p.113-AMDA
    00E0: 65 72 69 74 68 4A 2D 30 30 34 00 56 41 4E 47 4F  // erithJ-004.VANGO
    00F0: 47 48 00 50 43 49 5F 45 58 50 52 45 53 53 00 30  // GH.PCI_EXPRESS.0
    0100: 00 0D 0A 41 65 72 69 74 68 4A 20 47 65 6E 65 72  // ...AerithJ Gener
    0110: 69 63 20 56 42 49 4F 53 20 20 20 20 20 20 20 20  // ic VBIOS        
    0120: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0130: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0140: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 0D  //                .
    0150: 0A 00 0D 0A 20 0D 0A 00 28 43 29 20 31 39 38 38  // .... ...(C) 1988
    0160: 2D 32 30 32 30 2C 20 41 64 76 61 6E 63 65 64 20  // -2020, Advanced 
    0170: 4D 69 63 72 6F 20 44 65 76 69 63 65 73 2C 20 49  // Micro Devices, I
    0180: 6E 63 2E 00 41 54 4F 4D 42 49 4F 53 42 4B 2D 41  // nc..ATOMBIOSBK-A
    0190: 4D 44 20 56 45 52 30 32 30 2E 30 31 30 2E 30 30  // MD VER020.010.00
    01A0: 30 2E 30 30 34 2E 30 30 30 30 30 30 00 4A 75 70  // 0.004.000000.Jup
    01B0: 69 74 65 72 47 65 6E 65 72 00 32 31 39 34 30 39  // iterGener.219409
    01C0: 38 20 00 35 33 38 32 34 32 20 20 00 20 20 20 20  // 8 .538242  .    
    01D0: 20 20 20 20 00 41 4D 44 5F 56 41 4E 47 4F 47 48  //     .AMD_VANGOGH
    01E0: 5F 4A 55 50 49 54 45 52 5C 63 6F 6E 66 69 67 2E  // _JUPITER\config.
    01F0: 68 00 00 00 2C 00 02 03 41 54 4F 4D 00 C0 72 1B  // h...,...ATOM..r.
    0200: 45 01 DD 01 99 00 E4 1B 00 00 00 00 02 10 02 10  // E...............
    0210: B8 01 70 9B 10 02 00 00 00 00 00 00 00 00 03 00  // ..p.............
    0220: 50 43 49 52 02 10 3F 16 00 00 18 00 00 00 00 03  // PCIR..?.........
    0230: 53 00 0A 14 00 80 00 00 41 4D 44 20 41 54 4F 4D  // S.......AMD ATOM
    0240: 42 49 4F 53 00 56 D8 B0 D1 00 00 00 00 00 00 00  // BIOS.V..........
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 4A 00 02 01 00 00 00 00  // ........J.......
    0280: 00 00 A4 18 5C 02 6C 19 C8 02 18 03 54 09 00 00  // ....\.l.....T...
    0290: 00 00 70 09 7C 09 A0 19 C0 09 00 00 00 00 14 1A  // ..p.|...........
    02A0: 00 00 00 00 00 00 00 00 28 1A 9C 18 00 00 2C 0F  // ........(.....,.
    02B0: 00 00 18 0A 00 00 00 00 EC 0A 00 00 00 00 00 00  // ................
    02C0: 00 00 00 00 6C 00 03 04 04 00 0A 14 20 4E 00 00  // ....l....... N..
    02D0: 20 4E 00 00 01 00 00 00 00 00 00 00 4C 00 00 00  //  N..........L...
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 F4 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00  // ................
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 50 00 03 01 C8 00 00 00 B8 0B 00 00 00 00 00 00  // P...............
    0340: 7D 00 00 02 FF 00 00 00 00 00 00 00 00 00 00 00  // }...............
    0350: 00 00 00 00 C8 00 00 00 B8 0B 00 00 00 00 00 00  // ................
    0360: 7D 00 00 01 FF 00 00 00 00 00 00 00 00 00 00 00  // }...............
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 3C 06 05 03 0E 00 36 00 46 00 9A 05 CA 05 30 75  // <.....6.F.....0u
    0390: 00 00 0C 00 0F 05 39 50 00 00 40 9C 00 00 0C 00  // ......9P..@.....
    03A0: 0F 05 3E 00 00 00 FF FF FF 00 0C 00 0F 05 6F A1  // ..>...........o.
    03B0: 00 00 00 00 00 00 FF FF FF 00 0C 00 0F 02 34 A0  // ..............4.
    03C0: 00 00 00 00 00 00 48 3F 00 00 01 00 44 00 00 16  // ......H?....D...
    03D0: 00 00 00 05 01 1F 00 00 00 05 02 2C 00 00 00 05  // ...........,....
    03E0: 03 3E 00 00 00 05 08 1B 50 00 00 05 09 25 60 00  // .>......P....%`.
    03F0: 00 05 0A 35 90 00 00 05 10 21 B0 00 00 05 11 2F  // ...5.....!...../
    0400: F0 00 00 05 18 2A 40 01 00 05 78 69 00 00 01 00  // .....*@...xi....
    0410: 44 00 00 16 00 00 00 05 01 1F 00 00 00 05 02 2C  // D..............,
    0420: 00 00 00 05 03 3E 00 00 00 05 08 1B 50 00 00 05  // .....>......P...
    0430: 09 25 60 00 00 05 0A 35 90 00 00 05 10 21 B0 00  // .%`....5.....!..
    0440: 00 05 11 2F F0 00 00 05 18 2A 40 01 00 05 F0 D2  // .../.....*@.....
    0450: 00 00 01 00 44 00 00 1E 00 00 00 05 01 26 00 00  // ....D........&..
    0460: 00 05 02 30 00 00 00 05 03 3E 00 00 00 05 08 22  // ...0.....>....."
    0470: 40 00 00 05 09 2C 60 00 00 05 0A 37 70 00 00 05  // @....,`....7p...
    0480: 10 27 90 00 00 05 11 32 C0 00 00 05 18 2E 00 01  // .'.....2........
    0490: 00 05 68 3C 01 00 01 00 44 00 00 1E 00 00 00 05  // ..h<....D.......
    04A0: 01 26 00 00 00 05 02 30 00 00 00 05 03 3E 00 00  // .&.....0.....>..
    04B0: 00 05 08 22 40 00 00 05 09 2C 60 00 00 05 0A 37  // ..."@....,`....7
    04C0: 70 00 00 05 10 27 90 00 00 05 11 32 C0 00 00 05  // p....'.....2....
    04D0: 18 2E 00 01 00 05 48 3F 00 00 02 00 44 00 00 16  // ......H?....D...
    04E0: 00 00 00 05 01 1F 00 00 00 05 02 2C 00 00 00 05  // ...........,....
    04F0: 03 3E 00 00 00 05 08 1B 50 00 00 05 09 25 60 00  // .>......P....%`.
    0500: 00 05 0A 35 90 00 00 05 10 21 B0 00 00 05 11 2F  // ...5.....!...../
    0510: F0 00 00 05 18 2A 40 01 00 05 78 69 00 00 02 00  // .....*@...xi....
    0520: 44 00 00 16 00 00 00 05 01 1F 00 00 00 05 02 2C  // D..............,
    0530: 00 00 00 05 03 3E 00 00 00 05 08 1B 50 00 00 05  // .....>......P...
    0540: 09 25 60 00 00 05 0A 35 90 00 00 05 10 21 B0 00  // .%`....5.....!..
    0550: 00 05 11 2F F0 00 00 05 18 2A 40 01 00 05 F0 D2  // .../.....*@.....
    0560: 00 00 02 00 44 00 00 1E 00 00 00 05 01 26 00 00  // ....D........&..
    0570: 00 05 02 30 00 00 00 05 03 3E 00 00 00 05 08 22  // ...0.....>....."
    0580: 40 00 00 05 09 2C 60 00 00 05 0A 37 70 00 00 05  // @....,`....7p...
    0590: 10 27 90 00 00 05 11 32 C0 00 00 05 18 2E 00 01  // .'.....2........
    05A0: 00 05 68 3C 01 00 02 00 44 00 00 1E 00 00 00 05  // ..h<....D.......
    05B0: 01 26 00 00 00 05 02 30 00 00 00 05 03 3E 00 00  // .&.....0.....>..
    05C0: 00 05 08 22 40 00 00 05 09 2C 60 00 00 05 0A 37  // ..."@....,`....7
    05D0: 70 00 00 05 10 27 90 00 00 05 11 32 C0 00 00 05  // p....'.....2....
    05E0: 18 2E 00 01 00 05 48 3F 00 00 04 00 44 00 00 16  // ......H?....D...
    05F0: 00 00 00 05 01 1F 00 00 00 05 02 2C 00 00 00 05  // ...........,....
    0600: 03 3E 00 00 00 05 08 1B 50 00 00 05 09 25 60 00  // .>......P....%`.
    0610: 00 05 0A 35 90 00 00 05 10 21 B0 00 00 05 11 2F  // ...5.....!...../
    0620: F0 00 00 05 18 2A 40 01 00 05 78 69 00 00 04 00  // .....*@...xi....
    0630: 44 00 00 16 00 00 00 05 01 1F 00 00 00 05 02 2C  // D..............,
    0640: 00 00 00 05 03 3E 00 00 00 05 08 1B 50 00 00 05  // .....>......P...
    0650: 09 25 60 00 00 05 0A 35 90 00 00 05 10 21 B0 00  // .%`....5.....!..
    0660: 00 05 11 2F F0 00 00 05 18 2A 40 01 00 05 F0 D2  // .../.....*@.....
    0670: 00 00 04 00 44 00 00 1E 00 00 00 05 01 26 00 00  // ....D........&..
    0680: 00 05 02 30 00 00 00 05 03 3E 00 00 00 05 08 22  // ...0.....>....."
    0690: 40 00 00 05 09 2C 60 00 00 05 0A 37 70 00 00 05  // @....,`....7p...
    06A0: 10 27 90 00 00 05 11 32 C0 00 00 05 18 2E 00 01  // .'.....2........
    06B0: 00 05 68 3C 01 00 04 00 44 00 00 1E 00 00 00 05  // ..h<....D.......
    06C0: 01 26 00 00 00 05 02 30 00 00 00 05 03 3E 00 00  // .&.....0.....>..
    06D0: 00 05 08 22 40 00 00 05 09 2C 60 00 00 05 0A 37  // ..."@....,`....7
    06E0: 70 00 00 05 10 27 90 00 00 05 11 32 C0 00 00 05  // p....'.....2....
    06F0: 18 2E 00 01 00 05 48 3F 00 00 08 00 44 00 00 16  // ......H?....D...
    0700: 00 00 00 05 01 1F 00 00 00 05 02 2C 00 00 00 05  // ...........,....
    0710: 03 3E 00 00 00 05 08 1B 50 00 00 05 09 25 60 00  // .>......P....%`.
    0720: 00 05 0A 35 90 00 00 05 10 21 B0 00 00 05 11 2F  // ...5.....!...../
    0730: F0 00 00 05 18 2A 40 01 00 05 78 69 00 00 08 00  // .....*@...xi....
    0740: 44 00 00 16 00 00 00 05 01 1F 00 00 00 05 02 2C  // D..............,
    0750: 00 00 00 05 03 3E 00 00 00 05 08 1B 50 00 00 05  // .....>......P...
    0760: 09 25 60 00 00 05 0A 35 90 00 00 05 10 21 B0 00  // .%`....5.....!..
    0770: 00 05 11 2F F0 00 00 05 18 2A 40 01 00 05 F0 D2  // .../.....*@.....
    0780: 00 00 08 00 44 00 00 1E 00 00 00 05 01 26 00 00  // ....D........&..
    0790: 00 05 02 30 00 00 00 05 03 3E 00 00 00 05 08 22  // ...0.....>....."
    07A0: 40 00 00 05 09 2C 60 00 00 05 0A 37 70 00 00 05  // @....,`....7p...
    07B0: 10 27 90 00 00 05 11 32 C0 00 00 05 18 2E 00 01  // .'.....2........
    07C0: 00 05 68 3C 01 00 08 00 44 00 00 1E 00 00 00 05  // ..h<....D.......
    07D0: 01 26 00 00 00 05 02 30 00 00 00 05 03 3E 00 00  // .&.....0.....>..
    07E0: 00 05 08 22 40 00 00 05 09 2C 60 00 00 05 0A 37  // ..."@....,`....7
    07F0: 70 00 00 05 10 27 90 00 00 05 11 32 C0 00 00 05  // p....'.....2....
    0800: 18 2E 00 01 00 05 48 3F 00 00 0F 00 44 00 00 16  // ......H?....D...
    0810: 00 00 00 05 01 1F 00 00 00 05 02 2C 00 00 00 05  // ...........,....
    0820: 03 3E 00 00 00 05 08 1B 50 00 00 05 09 25 60 00  // .>......P....%`.
    0830: 00 05 0A 35 90 00 00 05 10 21 B0 00 00 05 11 2F  // ...5.....!...../
    0840: F0 00 00 05 18 2A 40 01 00 05 78 69 00 00 0F 00  // .....*@...xi....
    0850: 44 00 00 16 00 00 00 05 01 1F 00 00 00 05 02 2C  // D..............,
    0860: 00 00 00 05 03 3E 00 00 00 05 08 1B 50 00 00 05  // .....>......P...
    0870: 09 25 60 00 00 05 0A 35 90 00 00 05 10 21 B0 00  // .%`....5.....!..
    0880: 00 05 11 2F F0 00 00 05 18 2A 40 01 00 05 F0 D2  // .../.....*@.....
    0890: 00 00 0F 00 44 00 00 1E 00 00 00 05 01 26 00 00  // ....D........&..
    08A0: 00 05 02 30 00 00 00 05 03 3E 00 00 00 05 08 22  // ...0.....>....."
    08B0: 40 00 00 05 09 2C 60 00 00 05 0A 37 70 00 00 05  // @....,`....7p...
    08C0: 10 27 90 00 00 05 11 32 C0 00 00 05 18 2E 00 01  // .'.....2........
    08D0: 00 05 68 3C 01 00 0F 00 44 00 00 1E 00 00 00 05  // ..h<....D.......
    08E0: 01 26 00 00 00 05 02 30 00 00 00 05 03 3E 00 00  // .&.....0.....>..
    08F0: 00 05 08 22 40 00 00 05 09 2C 60 00 00 05 0A 37  // ..."@....,`....7
    0900: 70 00 00 05 10 27 90 00 00 05 11 32 C0 00 00 05  // p....'.....2....
    0910: 18 2E 00 01 00 05 00 00 00 00 00 01 02 03 00 01  // ................
    0920: 02 03 00 07 03 00 00 01 02 03 00 01 02 03 00 07  // ................
    0930: 03 00 00 01 02 03 00 01 02 03 00 07 03 00 00 01  // ................
    0940: 02 03 00 01 02 03 00 07 03 00 08 30 00 00 8D 00  // ...........0....
    0950: 00 00 07 30 00 00 4A 25 00 00 08 31 00 00 8D 00  // ...0..J%...1....
    0960: 00 00 07 31 00 00 4A 25 00 00 08 32 00 00 8D 00  // ...1..J%...2....
    0970: 00 00 07 32 00 00 4A 25 00 00 08 33 00 00 8D 00  // ...2..J%...3....
    0980: 00 00 07 33 00 00 4A 25 00 00 5A 00 00 00 05 00  // ...3..J%..Z.....
    0990: 00 00 EB 10 00 00 07 00 00 00 EB 11 00 00 07 00  // ................
    09A0: 00 00 EB 12 00 00 07 00 00 00 EB 13 00 00 07 00  // ................
    09B0: 00 00 FF FF FF FF 00 00 00 00 00 00 1C 00 03 01  // ................
    09C0: 00 0D 00 00 00 00 00 00 00 00 35 0C 10 27 00 00  // ..........5..'..
    09D0: FF 00 FF 00 FF 00 00 00 0C 00 02 01 00 00 00 00  // ................
    09E0: 00 00 00 00 44 00 02 01 B5 5D 00 00 00 00 01 00  // ....D....]......
    09F0: B5 5D 00 00 08 08 02 00 B5 5D 00 00 10 10 03 00  // .].......]......
    0A00: B5 5D 00 00 18 14 04 00 91 5D 00 00 08 08 90 00  // .].......]......
    0A10: 95 5D 00 00 08 08 91 00 99 5D 00 00 08 08 92 00  // .].......]......
    0A20: 9D 5D 00 00 08 08 93 00 58 00 02 06 00 09 01 00  // .]......X.......
    0A30: 04 01 02 02 64 C0 00 00 65 C0 00 00 66 C0 00 00  // ....d...e...f...
    0A40: 67 C0 00 00 E8 C0 00 00 A0 21 00 00 26 6A 01 00  // g........!..&j..
    0A50: 10 27 00 00 04 02 01 00 00 00 00 00 9F 0F 00 00  // .'..............
    0A60: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A80: D4 00 04 04 10 00 00 00 24 F4 00 00 C0 12 60 09  // ........$.....`.
    0A90: 00 00 00 00 00 00 00 00 00 00 4E 0C 01 01 00 00  // ..........N.....
    0AA0: 55 00 00 00 C0 12 3F 16 00 03 04 01 00 04 04 00  // U.....?.........
    0AB0: 00 00 00 00 00 46 C3 23 00 00 00 00 00 00 00 00  // .....F.#........
    0AC0: 00 00 00 00 54 00 01 00 00 00 00 00 00 00 00 00  // ....T...........
    0AD0: 00 00 00 00 10 11 3D 10 4D 1C 02 00 00 45 00 00  // ......=.M....E..
    0AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 AA 0A  // ................
    0AF0: 22 22 00 00 AA FA 03 00 00 00 00 00 00 00 00 00  // ""..............
    0B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B50: 00 00 00 00 40 04 02 01 00 00 00 00 00 00 00 00  // ....@...........
    0B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 23 04  // ..............#.
    0B70: 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BD0: 00 00 00 00 8C 00 01 01 00 00 00 00 00 00 00 00  // ................
    0BE0: 00 00 00 00 00 00 00 00 02 00 10 01 14 31 00 00  // .............1..
    0BF0: 00 00 E4 00 00 00 00 00 00 02 30 02 0C 33 01 01  // ..........0..3..
    0C00: 00 00 E4 00 00 00 00 00 08 00 10 02 13 31 02 02  // .............1..
    0C10: 00 00 E4 00 00 01 00 00 80 00 20 02 13 32 03 03  // .......... ..2..
    0C20: 00 00 E4 00 00 01 00 00 00 00 00 00 00 00 00 00  // ................
    0C30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF FF  // ................
    0CB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0CC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0CD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0CE0: 00 00 00 00 00 00 FF FF FF FF FF FF FF FF FF FF  // ................
    0CF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D10: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 FF FF  // ................
    0D20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D50: 00 00 00 00 00 00 FF FF FF FF FF FF FF FF FF FF  // ................
    0D60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D80: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 FF FF  // ................
    0D90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0DA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0DB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0ED0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F90: 00 00 00 00 08 08 01 00 00 1F 00 00 00 00 00 00  // ................
    0FA0: 48 3F 00 00 05 00 00 07 00 00 00 16 00 00 00 00  // H?..............
    0FB0: 00 00 00 00 23 00 00 00 00 00 00 00 00 1F 01 00  // ....#...........
    0FC0: 00 00 00 00 48 3F 00 00 05 00 00 07 00 00 00 1B  // ....H?..........
    0FD0: 05 00 00 00 00 00 00 00 23 00 21 00 00 00 00 00  // ........#.!.....
    0FE0: 00 1F 02 00 00 00 00 00 48 3F 00 00 05 00 00 07  // ........H?......
    0FF0: 00 00 00 21 0B 00 00 00 00 00 00 00 23 00 3C 00  // ...!........#.<.
    1000: 00 00 00 00 00 1F 03 00 00 00 00 00 48 3F 00 00  // ............H?..
    1010: 05 00 00 07 00 00 00 2A 14 00 00 00 00 00 00 00  // .......*........
    1020: 23 00 5A 00 00 00 00 00 00 1F 08 00 00 00 00 00  // #.Z.............
    1030: 48 3F 00 00 05 00 00 07 00 00 00 1F 00 00 00 00  // H?..............
    1040: 00 00 00 00 32 00 00 00 00 00 00 00 00 1F 09 00  // ....2...........
    1050: 00 00 00 00 48 3F 00 00 05 00 00 07 00 00 00 25  // ....H?.........%
    1060: 06 00 00 00 00 00 00 00 32 00 1C 00 00 00 00 00  // ........2.......
    1070: 00 1F 0A 00 00 00 00 00 48 3F 00 00 05 00 00 07  // ........H?......
    1080: 00 00 00 2F 0F 00 00 00 00 00 00 00 34 00 39 00  // .../........4.9.
    1090: 00 00 00 00 00 1F 10 00 00 00 00 00 48 3F 00 00  // ............H?..
    10A0: 05 00 00 07 00 00 00 2C 00 00 00 00 00 00 00 00  // .......,........
    10B0: 47 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // G...............
    10C0: 48 3F 00 00 05 00 00 07 00 00 00 35 09 00 00 00  // H?.........5....
    10D0: 00 00 00 00 47 00 1E 00 00 00 00 00 00 1F 18 00  // ....G...........
    10E0: 00 00 00 00 48 3F 00 00 05 00 00 07 00 00 00 3E  // ....H?.........>
    10F0: 00 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00  // ........d.......
    1100: 00 1F 00 00 00 00 00 00 78 69 00 00 05 00 00 07  // ........xi......
    1110: 00 00 00 16 00 00 00 00 00 00 00 00 23 00 00 00  // ............#...
    1120: 00 00 00 00 00 1F 01 00 00 00 00 00 78 69 00 00  // ............xi..
    1130: 05 00 00 07 00 00 00 1B 05 00 00 00 00 00 00 00  // ................
    1140: 23 00 21 00 00 00 00 00 00 1F 02 00 00 00 00 00  // #.!.............
    1150: 78 69 00 00 05 00 00 07 00 00 00 21 0B 00 00 00  // xi.........!....
    1160: 00 00 00 00 23 00 3C 00 00 00 00 00 00 1F 03 00  // ....#.<.........
    1170: 00 00 00 00 78 69 00 00 05 00 00 07 00 00 00 2A  // ....xi.........*
    1180: 14 00 00 00 00 00 00 00 23 00 5A 00 00 00 00 00  // ........#.Z.....
    1190: 00 1F 08 00 00 00 00 00 78 69 00 00 05 00 00 07  // ........xi......
    11A0: 00 00 00 1F 00 00 00 00 00 00 00 00 32 00 00 00  // ............2...
    11B0: 00 00 00 00 00 1F 09 00 00 00 00 00 78 69 00 00  // ............xi..
    11C0: 05 00 00 07 00 00 00 25 06 00 00 00 00 00 00 00  // .......%........
    11D0: 32 00 1C 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // 2...............
    11E0: 78 69 00 00 05 00 00 07 00 00 00 2F 0F 00 00 00  // xi........./....
    11F0: 00 00 00 00 34 00 39 00 00 00 00 00 00 1F 10 00  // ....4.9.........
    1200: 00 00 00 00 78 69 00 00 05 00 00 07 00 00 00 2C  // ....xi.........,
    1210: 00 00 00 00 00 00 00 00 47 00 00 00 00 00 00 00  // ........G.......
    1220: 00 1F 11 00 00 00 00 00 78 69 00 00 05 00 00 07  // ........xi......
    1230: 00 00 00 35 09 00 00 00 00 00 00 00 47 00 1E 00  // ...5........G...
    1240: 00 00 00 00 00 1F 18 00 00 00 00 00 78 69 00 00  // ............xi..
    1250: 05 00 00 07 00 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    1260: 64 00 00 00 00 00 00 00 00 1F 00 00 00 00 00 00  // d...............
    1270: F0 D2 00 00 05 00 00 07 00 00 00 1E 00 00 00 00  // ................
    1280: 00 00 00 00 30 00 00 00 00 00 00 00 00 1F 01 00  // ....0...........
    1290: 00 00 00 00 F0 D2 00 00 05 00 00 07 00 00 00 22  // ..............."
    12A0: 04 00 00 00 00 00 00 00 30 00 15 00 00 00 00 00  // ........0.......
    12B0: 00 1F 02 00 00 00 00 00 F0 D2 00 00 05 00 00 07  // ................
    12C0: 00 00 00 27 09 00 00 00 00 00 00 00 30 00 29 00  // ...'........0.).
    12D0: 00 00 00 00 00 1F 03 00 00 00 00 00 F0 D2 00 00  // ................
    12E0: 05 00 00 07 00 00 00 2E 10 00 00 00 00 00 00 00  // ................
    12F0: 30 00 3F 00 00 00 00 00 00 1F 08 00 00 00 00 00  // 0.?.............
    1300: F0 D2 00 00 05 00 00 07 00 00 00 26 00 00 00 00  // ...........&....
    1310: 00 00 00 00 3D 00 00 00 00 00 00 00 00 1F 09 00  // ....=...........
    1320: 00 00 00 00 F0 D2 00 00 05 00 00 07 00 00 00 2C  // ...............,
    1330: 06 00 00 00 00 00 00 00 3D 00 18 00 00 00 00 00  // ........=.......
    1340: 00 1F 0A 00 00 00 00 00 F0 D2 00 00 05 00 00 07  // ................
    1350: 00 00 00 32 0C 00 00 00 00 00 00 00 3D 00 2B 00  // ...2........=.+.
    1360: 00 00 00 00 00 1F 10 00 00 00 00 00 F0 D2 00 00  // ................
    1370: 05 00 00 07 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1380: 4D 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // M...............
    1390: F0 D2 00 00 05 00 00 07 00 00 00 37 07 00 00 00  // ...........7....
    13A0: 00 00 00 00 4D 00 16 00 00 00 00 00 00 1F 18 00  // ....M...........
    13B0: 00 00 00 00 F0 D2 00 00 05 00 00 07 00 00 00 3E  // ...............>
    13C0: 00 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00  // ........d.......
    13D0: 00 1F 00 00 00 00 00 00 68 3C 01 00 05 00 00 07  // ........h<......
    13E0: 00 00 00 1E 00 00 00 00 00 00 00 00 30 00 00 00  // ............0...
    13F0: 00 00 00 00 00 1F 01 00 00 00 00 00 68 3C 01 00  // ............h<..
    1400: 05 00 00 07 00 00 00 22 04 00 00 00 00 00 00 00  // ......."........
    1410: 30 00 15 00 00 00 00 00 00 1F 02 00 00 00 00 00  // 0...............
    1420: 68 3C 01 00 05 00 00 07 00 00 00 27 09 00 00 00  // h<.........'....
    1430: 00 00 00 00 30 00 29 00 00 00 00 00 00 1F 03 00  // ....0.).........
    1440: 00 00 00 00 68 3C 01 00 05 00 00 07 00 00 00 2E  // ....h<..........
    1450: 10 00 00 00 00 00 00 00 30 00 3F 00 00 00 00 00  // ........0.?.....
    1460: 00 1F 08 00 00 00 00 00 68 3C 01 00 05 00 00 07  // ........h<......
    1470: 00 00 00 26 00 00 00 00 00 00 00 00 3D 00 00 00  // ...&........=...
    1480: 00 00 00 00 00 1F 09 00 00 00 00 00 68 3C 01 00  // ............h<..
    1490: 05 00 00 07 00 00 00 2C 06 00 00 00 00 00 00 00  // .......,........
    14A0: 3D 00 18 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // =...............
    14B0: 68 3C 01 00 05 00 00 07 00 00 00 32 0C 00 00 00  // h<.........2....
    14C0: 00 00 00 00 3D 00 2B 00 00 00 00 00 00 1F 10 00  // ....=.+.........
    14D0: 00 00 00 00 68 3C 01 00 05 00 00 07 00 00 00 30  // ....h<.........0
    14E0: 00 00 00 00 00 00 00 00 4D 00 00 00 00 00 00 00  // ........M.......
    14F0: 00 1F 11 00 00 00 00 00 68 3C 01 00 05 00 00 07  // ........h<......
    1500: 00 00 00 37 07 00 00 00 00 00 00 00 4D 00 16 00  // ...7........M...
    1510: 00 00 00 00 00 1F 18 00 00 00 00 00 68 3C 01 00  // ............h<..
    1520: 05 00 00 07 00 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    1530: 64 00 00 00 00 00 00 00 00 1F 00 00 00 00 00 00  // d...............
    1540: A0 86 01 00 05 00 00 07 00 00 00 3E 00 00 00 00  // ...........>....
    1550: 00 00 00 00 64 00 00 00 00 00 00 00 00 1F 01 00  // ....d...........
    1560: 00 00 00 00 A0 86 01 00 05 00 00 07 00 00 00 38  // ...............8
    1570: 06 00 00 00 00 00 00 00 64 00 13 00 00 00 00 00  // ........d.......
    1580: 00 1F 02 00 00 00 00 00 A0 86 01 00 05 00 00 07  // ................
    1590: 00 00 00 33 0B 00 00 00 00 00 00 00 64 00 24 00  // ...3........d.$.
    15A0: 00 00 00 00 00 1F 03 00 00 00 00 00 A0 86 01 00  // ................
    15B0: 05 00 00 07 00 00 00 30 0E 00 00 00 00 00 00 00  // .......0........
    15C0: 64 00 32 00 00 00 00 00 00 1F 08 00 00 00 00 00  // d.2.............
    15D0: A0 86 01 00 05 00 00 07 00 00 00 2B 13 00 00 00  // ...........+....
    15E0: 00 00 00 00 64 00 54 00 00 00 00 00 00 1F 09 00  // ....d.T.........
    15F0: 00 00 00 00 A0 86 01 00 05 00 00 07 00 00 03 3B  // ...............;
    1600: 00 00 00 00 00 00 00 00 64 09 00 00 00 00 00 00  // ........d.......
    1610: 00 1F 0A 00 00 00 00 00 A0 86 01 00 05 00 00 07  // ................
    1620: 00 00 03 35 06 00 00 00 00 00 00 00 64 0B 13 00  // ...5........d...
    1630: 00 00 00 00 00 1F 10 00 00 00 00 00 A0 86 01 00  // ................
    1640: 05 00 00 07 00 00 03 31 0A 00 00 00 00 00 00 00  // .......1........
    1650: 64 0E 26 00 00 00 00 00 00 1F 11 00 00 00 00 00  // d.&.............
    1660: A0 86 01 00 05 00 00 07 00 00 03 2D 0E 00 00 00  // ...........-....
    1670: 00 00 00 00 64 11 3A 00 00 00 00 00 00 1F 18 00  // ....d.:.........
    1680: 00 00 00 00 A0 86 01 00 05 00 00 07 00 00 03 2A  // ...............*
    1690: 11 00 00 00 00 00 00 00 64 15 50 00 00 00 00 00  // ........d.P.....
    16A0: 03 1F 00 00 00 00 00 00 30 75 00 00 05 00 00 07  // ........0u......
    16B0: 00 00 00 39 05 00 00 00 00 00 00 00 64 00 0F 00  // ...9........d...
    16C0: 00 00 00 00 03 1F 00 00 00 00 00 00 40 9C 00 00  // ............@...
    16D0: 05 00 00 07 00 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    16E0: 64 00 00 00 00 00 00 00 03 1F 00 00 00 00 00 00  // d...............
    16F0: 60 EA 00 00 05 00 00 07 00 00 05 2F 0A 00 00 00  // `........../....
    1700: 00 00 00 00 64 13 26 00 00 00 00 00 03 1F 00 00  // ....d.&.........
    1710: 00 00 00 00 C0 D4 01 00 05 00 00 07 00 00 05 31  // ...............1
    1720: 08 00 00 00 00 00 00 00 64 13 1D 00 00 00 00 00  // ........d.......
    1730: 03 1F 01 00 00 00 00 00 C0 D4 01 00 05 00 00 07  // ................
    1740: 00 00 05 2F 0A 00 00 00 00 00 00 00 64 13 26 00  // .../........d.&.
    1750: 00 00 00 00 03 1F 02 00 00 00 00 00 C0 D4 01 00  // ................
    1760: 05 00 00 07 00 00 05 2C 0D 00 00 00 00 00 00 00  // .......,........
    1770: 64 14 35 00 00 00 00 00 03 1F 03 00 00 00 00 00  // d.5.............
    1780: C0 D4 01 00 05 00 00 07 00 00 05 29 10 00 00 00  // ...........)....
    1790: 00 00 00 00 64 15 48 00 00 00 00 00 00 00 00 00  // ....d.H.........
    17A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1900: 00 00 00 00 08 00 01 01 00 00 00 00 C8 00 02 01  // ................
    1910: D6 09 80 02 A0 00 E0 01 2D 00 10 00 60 00 0A 00  // ........-...`...
    1920: 02 00 00 00 00 00 08 08 06 00 12 3C A0 0F 20 03  // ...........<.. .
    1930: 00 01 58 02 1C 00 28 00 80 00 01 00 04 00 00 00  // ..X...(.........
    1940: 00 00 00 00 00 00 6A 3C 64 19 00 04 40 01 00 03  // ......j<d...@...
    1950: 26 00 18 00 88 00 03 00 06 00 00 00 00 00 00 00  // &...............
    1960: 06 00 55 3C 30 2A 00 05 08 02 C0 03 28 00 60 00  // ..U<0*......(.`.
    1970: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 E9 3C  // p..............<
    1980: 30 2A 00 05 98 01 00 04 2A 00 30 00 70 00 01 00  // 0*......*.0.p...
    1990: 03 00 00 00 00 00 00 00 00 00 EA 3C 8F 2F 78 05  // ...........<./x.
    19A0: D0 01 1A 04 27 00 58 00 90 00 03 00 04 00 00 00  // ....'.X.........
    19B0: 00 00 00 00 02 00 EB 3C 48 3F 40 06 30 02 B0 04  // .......<H?@.0...
    19C0: 32 00 40 00 C0 00 01 00 03 00 00 00 00 00 00 00  // 2.@.............
    19D0: 00 00 EC 3C 34 00 02 01 00 00 00 00 00 2A 00 2A  // ...<4........*.*
    19E0: 00 00 2A 2A 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A  // ..***..*.**..***
    19F0: 15 15 15 15 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F  // .....?.?..???..?
    1A00: 15 3F 3F 3F 15 3F 3F 3F 74 00 01 01 10 01 06 12  // .???.???t.......
    1A10: 11 01 16 12 13 01 06 6A 14 01 16 6A 16 01 06 55  // .......j...j...U
    1A20: 17 01 16 55 19 01 06 EA 1A 01 16 EA 65 01 16 E9  // ...U........e...
    1A30: 66 01 0A E9 21 01 0A 12 22 01 0A 6A 23 01 0A 55  // f...!..."..j#..U
    1A40: 24 01 0A EA 45 01 16 EB 46 01 0A EB 75 01 16 EC  // $...E...F...u...
    1A50: 76 01 0A EC D2 01 16 70 D4 01 0A 70 D8 01 16 71  // v......p...p...q
    1A60: D9 01 0A 71 E2 01 16 72 E4 01 0A 72 E8 01 16 73  // ...q...r...r...s
    1A70: E9 01 0A 73 F5 01 16 74 F6 01 0A 74 14 00 02 01  // ...s...t...t....
    1A80: 00 02 08 00 80 00 00 04 02 00 FF FF 40 00 FF FF  // ............@...
    1A90: 48 00 01 04 0A 00 02 00 14 31 28 00 1E 21 00 00  // H........1(..!..
    1AA0: 3A 00 00 00 02 00 00 00 13 31 31 00 20 21 00 00  // :........11. !..
    1AB0: 41 00 00 00 08 00 00 00 01 04 90 00 02 04 01 00  // A...............
    1AC0: FF 01 04 92 00 02 04 03 00 FF 14 06 0F 00 00 00  // ................
    1AD0: FF 14 06 0F 01 00 00 FF 1E 06 66 50 66 51 66 52  // ..........fPfQfR
    1AE0: 66 53 66 55 66 56 66 57 0E 1F A3 14 00 8C 0E 08  // fSfUfVfW........
    1AF0: 00 B2 20 E8 8A 1E 0B C0 75 14 A2 02 00 66 5F 66  // .. .....u....f_f
    1B00: 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F CB E8 A4  // ^f]f[fZfYfX.....
    1B10: 1F E8 F8 00 E8 73 1D 32 D2 8D 3E 8C 01 89 55 16  // .....s.2..>...U.
    1B20: E8 0C 0D E8 CF 0C E8 E5 1B 75 19 E8 1A 0E E8 EF  // .........u......
    1B30: 02 E8 4B 18 0B C0 74 0C E8 39 00 E8 A2 45 E8 C6  // ..K...t..9...E..
    1B40: 0C E8 F1 45 E8 A9 00 B4 80 E8 68 1D 8A C7 66 C1  // ...E......h...f.
    1B50: E0 10 8A E3 B0 20 66 A3 24 98 E8 EF 02 E8 D9 0C  // ..... f.$.......
    1B60: E8 95 1F 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66  // ...f_f^f]f[fZfYf
    1B70: 58 07 1F CB 2E 8B 1E 08 00 83 3E 84 1B 00 75 04  // X.........>...u.
    1B80: 89 1E 82 1B 1E 2E 8E 1E 7A 1B 9C FA 66 C7 06 08  // ........z...f...
    1B90: 01 65 F0 00 F0 C7 06 40 00 E4 1B 89 1E 42 00 C7  // .e.....@.....B..
    1BA0: 06 B4 01 E4 1B 89 1E B6 01 C7 06 7C 00 06 66 89  // ...........|..f.
    1BB0: 1E 7E 00 C7 06 0C 01 19 6A 89 1E 0E 01 C7 06 A8  // .~......j.......
    1BC0: 04 3E 60 89 1E AA 04 2E 8E 1E 82 1B 8B C3 A3 40  // .>`............@
    1BD0: 60 A3 50 60 A3 62 60 9D 1F C3 50 4D 49 44 E4 1B  // `.P`.b`...PMID..
    1BE0: 70 50 00 00 00 A0 00 B0 00 B8 00 C0 00 00 00 00  // pP..............
    1BF0: BB 00 00 E8 2C 0C 66 C1 E8 10 A3 BE 01 BB 0B 00  // ....,.f.........
    1C00: E8 1F 0C 8D 3E 8C 01 66 89 45 18 C3 66 50 66 52  // ....>..f.E..fPfR
    1C10: 51 56 66 B8 52 54 53 5F BA 80 00 66 EF B0 56 EE  // QVf.RTS_...f..V.
    1C20: B0 42 EE B0 49 EE B0 4F EE B0 53 EE B0 20 EE BE  // .B..I..O..S.. ..
    1C30: 2B 01 B9 19 00 AC E6 80 E2 FB 66 B8 44 4E 45 5F  // +.........f.DNE_
    1C40: BA 80 00 66 EF 5E 59 66 5A 66 58 C3 E8 84 1E 80  // ...f.^YfZfX.....
    1C50: FC A0 75 05 E8 3D 00 EB 11 80 FC 4F 75 05 E8 9D  // ..u..=.....Ou...
    1C60: 33 EB 07 E8 F2 38 EB 02 B4 01 E8 8B 1E CF E8 62  // 3....8.........b
    1C70: 1E E8 20 00 EB 02 B4 01 E8 7D 1E CB E8 54 1E 80  // .. ......}...T..
    1C80: FC 4F 75 05 E8 77 33 EB 07 E8 CC 38 EB 02 B4 01  // .Ou..w3....8....
    1C90: E8 65 1E CB 1E 06 66 50 66 51 66 52 66 53 66 55  // .e....fPfQfRfSfU
    1CA0: 66 56 66 57 0E 1F 3C 04 75 29 2E A1 1A 00 66 C1  // fVfW..<.u)....f.
    1CB0: E0 10 2E A1 18 00 8D 36 9A 00 8A 3C 80 EF 30 B3  // .......6...<..0.
    1CC0: 02 8B EC 89 5E 0C 89 46 04 66 C1 E8 10 89 46 00  // ....^..F.f....F.
    1CD0: E9 2B 01 3C 05 75 18 E8 DA 1B E8 AD 1B 2E A1 08  // .+.<.u..........
    1CE0: 00 8B EC 89 56 10 89 46 00 89 5E 04 E9 0F 01 3C  // ....V..F..^....<
    1CF0: 06 75 32 E8 14 0B 66 D1 E0 8B EC 89 46 14 BB 02  // .u2...f.....F...
    1D00: 00 E8 1E 0B 88 46 18 E8 08 0B 66 89 46 0C BB 09  // .....F....f.F...
    1D10: 00 E8 0E 0B 33 C0 66 89 46 00 2E 8B 16 BE 01 89  // ....3.f.F.......
    1D20: 56 10 E9 D9 00 3C 0B 75 24 0A DB 75 11 B9 80 00  // V....<.u$..u....
    1D30: BB 02 00 8B EC 89 5E 0C 89 4E 14 E9 C0 00 8A C7  // ......^..N......
    1D40: E8 D3 00 E8 38 01 0F 84 AC 00 E9 B1 00 3C 17 75  // ....8........<.u
    1D50: 1D E8 9B 0D 74 06 E8 8D 09 E8 83 12 E8 13 07 E8  // ....t...........
    1D60: 82 0A 33 C9 8B C8 8B EC 89 4E 14 E9 90 00 3C 18  // ..3......N....<.
    1D70: 75 45 0A FF 75 10 E8 22 0D 8B EC 89 46 0C E8 4F  // uE..u.."....F..O
    1D80: 07 89 4E 10 EB 78 E8 66 0D 75 6B BB 00 4C E8 E0  // ..N..x.f.uk..L..
    1D90: 1C 66 0B C0 74 60 23 C9 74 5C E8 3A 0D BE 00 4C  // .f..t`#.t\.:...L
    1DA0: E8 AC 0A 74 51 BE 00 4C B0 40 E8 FB 0A E8 EB 0C  // ...tQ..L.@......
    1DB0: 8B EC 89 46 0C EB 47 3C 82 75 1A 80 FB 05 75 15  // ...F..G<.u....u.
    1DC0: 0A FF 75 0A E8 30 0C 8B EC 89 46 14 EB 30 E8 0D  // ..u..0....F..0..
    1DD0: 0C 74 1B EB 29 3C 8E 75 15 80 FF 01 74 08 80 FF  // .t..)<.u....t...
    1DE0: 02 75 0B 80 C1 02 80 C1 02 E8 57 0C EB 10 8B EC  // .u........W.....
    1DF0: C6 46 19 02 EB 0F 8B EC C6 46 19 01 EB 07 32 E4  // .F.......F....2.
    1E00: 8B EC 88 66 19 66 5F 66 5E 66 5D 66 5B 66 5A 66  // ...f.f_f^f]f[fZf
    1E10: 59 66 58 07 1F C3 51 8A C8 B8 01 00 D3 E0 59 C3  // YfX...Q.......Y.
    1E20: E8 FB 1C C3 0C 01 C3 00 50 51 B0 B6 E6 43 B0 33  // ........PQ...C.3
    1E30: E6 42 B0 05 E6 42 E4 61 8A E0 0C 03 E6 61 8A C4  // .B...B.a.....a..
    1E40: B9 C8 00 E8 51 18 E6 61 59 58 C3 00 1E 56 0E 1F  // ....Q..aYX...V..
    1E50: 80 3E 02 00 80 76 05 C6 06 02 00 80 8A 0E 02 00  // .>...v..........
    1E60: C1 E1 09 FC C6 06 21 00 00 33 F6 32 E4 AC 02 E0  // ......!..3.2....
    1E70: E2 FB F6 D4 FE C4 88 26 21 00 5E 1F C3 00 57 0B  // .......&!.^...W.
    1E80: C0 75 0F E8 28 08 74 25 E8 24 00 F6 C3 04 74 F3  // .u..(.t%.$....t.
    1E90: EB 11 8B C8 E8 E8 14 23 C1 74 12 E8 11 00 F6 C3  // .......#.t......
    1EA0: 04 74 0A 5F 8D 5C 28 E8 91 05 0B F6 C3 5F C3 50  // .t._.\(......_.P
    1EB0: E8 DD 07 E8 3A 14 0A C9 74 11 E8 BE 11 3C 00 75  // ....:...t....<.u
    1EC0: 1F E8 CB 01 8A EB F6 C5 04 74 15 8D 9C A6 00 E8  // .........t......
    1ED0: 9F 1B 0A C0 74 0A E8 88 04 74 05 33 C9 E8 51 05  // ....t....t.3..Q.
    1EE0: E8 AC 01 58 C3 51 B9 5F 00 E8 5A 17 59 C3 51 E8  // ...X.Q._..Z.Y.Q.
    1EF0: 1A 00 75 14 E8 69 01 3C 01 75 0D B9 20 00 E8 27  // ..u..i.<.u.. ..'
    1F00: 00 75 05 80 C9 01 EB 02 33 C9 59 C3 53 E8 61 1B  // .u......3.Y.S.a.
    1F10: 66 3D 00 FF FF FF 75 0E 83 C3 04 E8 53 1B 66 3D  // f=....u.....S.f=
    1F20: FF FF FF 00 75 00 5B C3 50 52 32 D2 E8 42 1B 02  // ....u.[.PR2..B..
    1F30: D0 02 D4 66 C1 E8 10 02 D0 02 D4 83 C3 04 E2 EC  // ...f............
    1F40: 0A D2 5A 58 C3 E8 48 07 8D 9C A4 01 E8 E9 00 A9  // ..ZX..H.........
    1F50: C8 0E 74 52 E8 38 01 F6 C3 08 74 0C 8D 5C 28 E8  // ..tR.8....t..\(.
    1F60: DD 00 75 04 E8 62 00 C3 B5 02 E8 FC 00 E8 1F 01  // ..u..b..........
    1F70: F6 C3 04 74 21 8D 5C 28 E8 22 01 E8 6D 03 74 05  // ...t!.\(."..m.t.
    1F80: B5 03 E8 E4 00 E8 41 04 E8 FA 00 80 FD 00 75 38  // ......A.......u8
    1F90: B5 02 E8 E6 00 C3 8D 9C C0 01 B8 00 55 E8 58 0D  // ............U.X.
    1FA0: B5 02 E8 D6 00 C3 A9 02 00 74 1D B5 04 E8 B9 00  // .........t......
    1FB0: E8 DC 00 8D 5C 28 E8 E4 00 E8 4B 18 E8 BC 00 8D  // ....\(....K.....
    1FC0: 5C 28 E8 D8 00 E8 01 04 C3 B5 01 E8 9B 00 B5 02  // \(..............
    1FD0: E8 A8 00 E8 B9 00 F6 C3 04 75 10 8D 9C C0 01 B8  // .........u......
    1FE0: 00 55 E8 13 0D B5 02 E8 17 00 C3 E8 AF 00 B5 02  // .U..............
    1FF0: 8D 5C 28 E8 57 00 75 02 B5 01 E8 04 00 E8 C9 03  // .\(.W.u.........
    2000: C3 8D 9C AC 02 B1 02 E8 0B 1A B5 02 E8 6C 00 C3  // .............l..
    2010: 8D 9C A4 01 E8 21 00 E8 75 00 F6 C3 04 74 12 8D  // .....!..u....t..
    2020: 5C 28 E8 78 00 E8 5D 00 E8 63 07 8D 5C 28 E8 E2  // \(.x..]..c..\(..
    2030: 17 B8 02 00 E8 0E FF C3 B9 48 00 E8 08 16 C3 53  // .........H.....S
    2040: 81 C3 05 01 E8 2A 1A 24 06 3C 02 5B C3 E8 10 00  // .....*.$.<.[....
    2050: 3D 01 04 75 0A 53 83 C3 18 E8 15 1A 5B A8 01 C3  // =..u.S......[...
    2060: 53 83 C3 12 E8 0A 1A 5B C3 8D 9C AC 02 32 C9 E8  // S......[.....2..
    2070: A3 19 C3 8D 9C AC 02 E8 F7 19 C3 8D 9C AC 02 B1  // ................
    2080: 01 E8 91 19 C3 8D 9C AC 02 B1 01 E8 9F 19 C3 66  // ...............f
    2090: 50 8D 9C A0 01 E8 D9 19 8A D8 66 58 C3 55 57 51  // P.........fX.UWQ
    20A0: B9 08 00 BD 00 00 BB 08 00 2B D9 D1 E3 8D 58 4E  // .........+....XN
    20B0: E8 BE 19 E8 E3 01 E2 EE 8D 5C 4B E8 B3 19 B9 03  // .........\K.....
    20C0: 00 8B D0 BF 15 21 85 55 06 74 17 66 8B 05 8D 9A  // .....!.U.t.f....
    20D0: 4C 02 E8 FC 18 8B 45 04 8D 9A 50 02 E8 0A 19 83  // L.....E...P.....
    20E0: C5 08 83 C7 08 E2 DF 8D 7C 5E B9 04 00 33 ED 8B  // ........|^...3..
    20F0: DF E8 7D 19 0B C0 74 09 E8 5D 01 E8 97 00 83 C5  // ..}...t..]......
    2100: 1C 83 C7 12 E2 E9 55 32 ED E8 6F FF 8D 5C 28 E8  // ......U2..o..\(.
    2110: 4E FF 3D 01 04 75 10 83 C3 14 E8 54 19 24 70 C0  // N.=..u.....T.$p.
    2120: E8 04 8A E8 E8 54 FF 5D 8D 9C A6 00 E8 42 19 0A  // .....T.].....B..
    2130: C0 74 46 8D 9C A8 00 E8 37 19 3C 02 75 3B 66 C1  // .tF.....7.<.u;f.
    2140: E8 10 3C 04 72 33 8D 9C A8 00 32 E4 03 D8 8B FB  // ..<.r3....2.....
    2150: B9 04 00 8B DF E8 19 19 0B C0 74 15 E8 F9 00 A9  // ..........t.....
    2160: 80 00 75 0D E8 2E 00 83 C5 1C 55 58 83 F8 70 73  // ..u.......UX..ps
    2170: 08 83 C7 12 49 0B C9 75 DA 59 5F 5D C3 20 03 58  // ....I..u.Y_]. .X
    2180: 02 3C 00 01 00 00 04 00 03 3C 00 00 08 80 02 E0  // .<.......<......
    2190: 01 3C 00 20 00 51 8D 1D E8 D6 18 8D 9A C0 01 E8  // .<. .Q..........
    21A0: 47 18 8D 5D 02 E8 C9 18 8D 9A C2 01 E8 89 00 8D  // G..]............
    21B0: 5D 05 E8 BC 18 8D 9A C6 01 E8 7C 00 8D 5D 08 E8  // ].........|..]..
    21C0: AF 18 8B C8 8A DC 66 C1 C8 10 8A D0 80 E2 0F 8A  // ......f.........
    21D0: F0 C0 EE 04 8A EC C0 ED 06 8A FC C0 EF 04 80 E7  // ................
    21E0: 03 80 E4 0F C0 E4 04 0A D4 80 E2 3F 80 E4 C0 C0  // ...........?....
    21F0: EC 02 0A F4 8B C3 8D 9A CC 01 E8 EC 17 8D 9A CA  // ................
    2200: 01 8B C1 E8 E3 17 8D 9A CE 01 33 C0 8A C6 E8 D8  // ..........3.....
    2210: 17 8D 9A D0 01 33 C0 8A C2 E8 CD 17 8D 5D 0C E8  // .....3.......]..
    2220: 4F 18 8D 9A D2 01 E8 0F 00 8D 5D 0F E8 42 18 8D  // O.........]..B..
    2230: 9A D6 01 E8 B3 17 59 C3 8B C8 8A D4 66 C1 C8 10  // ......Y.....f...
    2240: 8A F0 80 E6 0F 8A E8 C0 ED 04 8B C1 E8 9A 17 83  // ................
    2250: C3 02 8B C2 E8 92 17 C3 8D 5D 11 E8 13 18 8A E0  // .........]......
    2260: BA 06 00 C0 E8 07 74 03 80 CA 80 8A C4 C0 E8 03  // ......t.........
    2270: 24 03 3C 02 75 03 80 CA 40 3C 03 75 12 8A C4 D0  // $.<.u...@<.u....
    2280: E8 A8 01 74 03 80 E2 FD A8 02 74 03 80 E2 FB 8B  // ...t......t.....
    2290: C2 8D 9A D8 01 E8 51 17 C3 3C 01 74 3D 8B D0 0F  // ......Q..<.t=...
    22A0: B6 C6 24 3F 04 3C 8D 9A 50 02 E8 3C 17 0F B6 C2  // ..$?.<..P..<....
    22B0: 83 C0 1F C1 E0 03 8D 9A 4C 02 E8 2C 17 0F B6 DE  // ........L..,....
    22C0: C1 EB 06 C1 E3 02 2E F7 A7 75 22 2E F7 B7 73 22  // .........u"...s"
    22D0: 8D 9A 4E 02 E8 12 17 83 C5 08 C3 10 00 0A 00 04  // ..N.............
    22E0: 00 03 00 05 00 04 00 10 00 09 00 8D 9C A6 00 E8  // ................
    22F0: 7F 17 0A C0 74 1F 8D 9C A8 00 51 B1 03 E8 18 00  // ....t.....Q.....
    2300: 59 0B DB 74 10 E8 69 17 32 C0 66 3D 00 03 0C 00  // Y..t..i.2.f=....
    2310: 75 03 0B DB C3 33 DB C3 66 50 52 E8 53 17 3C 02  // u....3..fPR.S.<.
    2320: 75 39 80 FC 03 72 34 66 C1 E8 10 32 E4 3C 04 76  // u9...r4f...2.<.v
    2330: 2A 03 C3 8B D0 83 C3 04 3B DA 73 1F E8 32 17 8A  // *.......;.s..2..
    2340: E0 80 E4 E0 C0 EC 05 24 1F 38 CC 74 08 32 E4 FE  // .......$.8.t.2..
    2350: C0 03 D8 EB E3 0B DB 5A 66 58 C3 33 DB 5A 66 58  // .......ZfX.3.ZfX
    2360: C3 51 8D 9C A6 00 E8 08 17 0A C0 74 1B 8D 9C A8  // .Q.........t....
    2370: 00 B1 12 E8 18 00 74 10 E8 F6 16 66 C1 E8 10 80  // ......t....f....
    2380: E4 07 75 04 B0 01 EB 02 32 C0 0A C0 59 C3 66 50  // ..u.....2...Y.fP
    2390: 52 E8 DD 16 3C 70 75 2B 66 C1 E8 10 32 E4 83 C3  // R...<pu+f...2...
    23A0: 05 03 C3 8B D0 3B DA 73 1A E8 C5 16 38 C8 74 0D  // .....;.s....8.t.
    23B0: 66 C1 E8 10 32 E4 83 C0 03 03 D8 EB E8 0B DB 5A  // f...2..........Z
    23C0: 66 58 C3 33 DB 5A 66 58 C3 57 66 51 8D 9C C0 01  // fX.3.ZfX.WfQ....
    23D0: 8B FB 8B DF E8 3D 00 0B C9 74 0B 66 8B D1 E8 C5  // .....=...t.f....
    23E0: 0B 83 C7 1C EB EC 66 59 5F C3 50 53 51 B9 07 00  // ......fY_.PSQ...
    23F0: 53 8B DA E8 7B 16 83 F8 00 5B 74 09 66 C1 E3 10  // S...{....[t.f...
    2400: 8B DA E8 56 12 59 5B 58 C3 51 53 B9 07 00 E8 63  // ...V.Y[X.QS....c
    2410: 12 5B 59 C3 66 50 53 83 C3 06 E8 54 16 5B 8B C8  // .[Y.fPS....T.[..
    2420: 66 C1 E1 10 53 83 C3 02 E8 46 16 8B C8 5B 66 58  // f...S....F...[fX
    2430: C3 8D 9C A0 01 32 C9 E8 DB 15 C3 57 B9 20 00 E8  // .....2.....W. ..
    2440: 3E 12 5F C3 53 51 E8 19 00 32 E4 8A C5 C1 E0 02  // >._.SQ...2......
    2450: 59 8D 9C 78 01 03 D8 E8 17 16 5B C3 B1 02 E8 07  // Y..x......[.....
    2460: 00 C3 B1 01 E8 01 00 C3 53 8D 9C 98 01 E8 BD 15  // ........S.......
    2470: 5B C3 33 C9 E8 97 12 75 3C 66 BA 37 F1 FF FF 66  // [.3....u<f.7...f
    2480: 33 C0 E8 46 03 33 C0 E8 24 02 74 1C A9 C8 0E 74  // 3..F.3..$.t....t
    2490: F6 E8 1B FA F6 C3 04 75 05 F6 C3 18 74 E9 E8 1F  // .......u....t...
    24A0: 00 50 E8 A0 FA 58 EB DF E8 0B 00 75 08 E8 20 00  // .P...X.....u.. .
    24B0: 8B C1 E8 90 FA C3 66 50 E8 29 03 8B C8 66 58 C3  // ......fP.)...fX.
    24C0: 66 52 66 BA FF FF FF FF 33 D0 E8 FE 02 66 5A C3  // fRf.....3....fZ.
    24D0: 50 53 52 E8 E0 FF 75 13 B9 08 00 E8 A1 0E 23 C8  // PSR...u.......#.
    24E0: 75 19 33 C0 E8 C7 01 8B C8 EB 10 83 F9 02 74 0B  // u.3...........t.
    24F0: E8 7B 06 80 FB 01 75 03 83 E1 FD 5A 5B 58 C3 56  // .{....u....Z[X.V
    2500: 66 33 C0 66 BA 00 F0 FF FF E8 9E 05 66 C1 E6 10  // f3.f........f...
    2510: E8 A8 01 0B C0 74 03 E8 05 00 E8 7E 05 5E C3 50  // .....t.....~.^.P
    2520: 51 E8 6C 01 50 32 C0 E8 90 02 E8 CC 00 E8 7F 00  // Q.l.P2..........
    2530: 8D 9C 08 03 E8 3A 15 38 E8 74 0A 8A C5 E8 91 14  // .....:.8.t......
    2540: B0 02 E8 75 02 58 E8 79 00 66 51 8D 9C A4 01 E8  // ...u.X.y.fQ.....
    2550: 1F 15 66 8B C8 8B D3 8D 9C D0 02 E8 13 15 66 3B  // ..f...........f;
    2560: C1 75 16 53 8D 9C AA 01 E8 06 15 8B C8 8D 9C D6  // .u.S............
    2570: 02 E8 FD 14 3B C1 5B 74 05 B0 02 E8 3C 02 66 59  // ....;.[t....<.fY
    2580: E8 67 FE E8 FF 01 66 25 FF 0F 00 00 59 58 66 BA  // .g....f%....YXf.
    2590: FF FF FF FF 33 D0 E8 11 05 33 D2 C3 53 66 50 8D  // ....3....3..SfP.
    25A0: 9C C8 02 E8 CB 14 8A C4 E8 26 14 66 58 5B C3 53  // .........&.fX[.S
    25B0: 66 50 8D 9C C8 02 E8 B8 14 8A E0 E8 13 14 66 58  // fP............fX
    25C0: 5B C3 8D 9C C8 02 E8 A8 14 32 C0 E8 03 14 C3 66  // [........2.....f
    25D0: 52 52 32 ED 83 C1 02 B8 06 00 F7 E1 66 33 C9 8B  // RR2.........f3..
    25E0: C8 5A 51 66 8B C2 8A CF 66 F7 E1 66 C1 E0 03 59  // .ZQf....f..f...Y
    25F0: 66 F7 F1 66 8B C8 66 5A C3 53 E8 48 01 66 C1 E2  // f..f..fZ.S.H.f..
    2600: 10 E8 36 01 8D 9C 98 01 E8 66 14 8A E8 8D 9C AC  // ..6......f......
    2610: 02 E8 5D 14 8A C8 E8 82 0B 8A EB 5B C3 57 53 53  // ..]........[.WSS
    2620: E8 D6 FF E8 14 01 5B E8 94 0B 74 61 80 FD 00 75  // ......[...ta...u
    2630: 29 53 E8 0F FE 66 8B D0 E8 4A FA 8A CD 51 E8 1B  // )S...f...J...Q..
    2640: FE 8A FD 59 E8 88 FF 5B E8 26 14 66 25 FF FF 00  // ...Y...[.&.f%...
    2650: 00 66 3B C8 73 34 32 DB EB 33 80 FD 02 75 11 E8  // .f;.s42..3...u..
    2660: 2C 01 8D 1F E8 0A 14 3D 74 40 76 1E 32 DB EB 1D  // ,......=t@v.2...
    2670: 80 FD 03 75 15 53 E8 C1 00 B3 03 E8 FC 0A 5B E8  // ...u.S........[.
    2680: EF 13 3B C2 76 04 32 DB EB 03 80 CB 01 5B 5F C3  // ..;.v.2......[_.
    2690: 53 8B F0 E8 E9 0C 23 F0 74 09 8B C6 E8 6D 0B 8B  // S.....#.t....m..
    26A0: F3 0B DB 5B C3 51 E8 27 FE E8 0F 00 59 C3 51 50  // ...[.Q.'....Y.QP
    26B0: E8 CC 0C 8B C8 58 E8 02 00 59 C3 57 53 E8 7B 0E  // .....X...Y.WS.{.
    26C0: 0B C0 74 09 8B 1D 83 C7 02 3B C3 75 F7 8B 1D 83  // ..t......;.u....
    26D0: FB FF 74 0B 83 C7 02 85 D9 74 F2 8B C3 EB 02 33  // ..t......t.....3
    26E0: C0 0B C0 5B 5F C3 33 C0 E8 C3 FF 74 13 E8 A0 FF  // ...[_.3....t....
    26F0: 8B DE B9 00 01 E8 4E 0F 83 C6 08 E8 31 0C EB E8  // ......N.....1...
    2700: BB F0 46 B8 5A A5 E8 E0 12 C3 53 66 50 8D 9C 08  // ..F.Z.....SfP...
    2710: 03 E8 5D 13 8A E8 66 58 5B C3 53 66 50 8D 9C C8  // ..]...fX[.SfP...
    2720: 02 E8 4D 13 8A C8 66 58 5B C3 53 66 50 8D 9C C9  // ..M...fX[.SfP...
    2730: 02 E8 3D 13 8A C8 66 58 5B C3 53 8D 5C 14 E8 30  // ..=...fX[.S.\..0
    2740: 13 8B D0 5B C3 53 66 50 8D 5C 16 E8 23 13 8B D0  // ...[.SfP.\..#...
    2750: 66 58 5B C3 53 66 50 8D 9C 18 03 E8 13 13 66 8B  // fX[.SfP.......f.
    2760: D0 66 58 5B C3 53 66 50 8D 9C 1C 03 E8 02 13 66  // .fX[.SfP.......f
    2770: 8B D0 66 58 5B C3 53 66 50 8D 5C 10 E8 F2 12 8B  // ..fX[.SfP.\.....
    2780: C8 66 58 5B C3 53 8D 5C 08 E8 E5 12 5B C3 53 66  // .fX[.S.\....[.Sf
    2790: 50 8D 5C 0C E8 DA 12 8B D0 66 58 5B C3 8D 5C 04  // P.\......fX[..\.
    27A0: E8 CE 12 C3 51 8D 5C 04 32 C9 E8 68 12 59 C3 8D  // ....Q.\.2..h.Y..
    27B0: 9C 18 03 66 8B C2 E8 18 12 C3 53 51 8A E8 E8 DC  // ...f......SQ....
    27C0: FF 24 FD 0A E8 E8 DC FF 59 5B C3 53 66 50 51 66  // .$......Y[.SfPQf
    27D0: 8B C8 BB 00 00 E8 10 0A 23 C2 0B C1 E8 12 0A 59  // ........#......Y
    27E0: 66 58 5B C3 BB 00 00 E8 FE 09 66 25 CA 0E 00 00  // fX[.......f%....
    27F0: C3 80 FA 14 C3 E8 2C 0E E8 BA 0D E8 98 0D 75 06  // ......,.......u.
    2800: E8 8E 0B E8 9C 0D C3 B0 01 C3 55 B3 01 E8 1F 10  // ..........U.....
    2810: 5D C3 66 53 66 BB 04 00 00 00 E8 05 00 33 C0 66  // ].fSf........3.f
    2820: 5B C3 55 66 C1 E3 10 BB 00 00 E8 02 10 5D C3 E8  // [.Uf.........]..
    2830: BA 0E BB 0A 00 E8 B9 09 C3 BB 0A 00 E8 A9 09 66  // ...............f
    2840: 8B C8 E8 A7 0E BB 0A 00 66 2B C1 E8 A3 09 C3 E8  // ........f+......
    2850: 29 00 0B C9 74 22 E8 A6 FC E8 0F 07 66 51 66 8B  // )...t"......fQf.
    2860: C8 BB 07 00 E8 81 09 66 25 00 FE 00 00 66 0B C1  // .......f%....f..
    2870: E8 7E 09 66 59 0C 01 C3 32 C0 C3 E8 49 02 0B C9  // .~.fY...2...I...
    2880: 75 06 E8 4B FC E8 4F 02 51 E8 44 FC 66 C1 E6 10  // u..K..O.Q.D.f...
    2890: 33 C0 E8 10 FE 74 09 E8 F4 02 75 F6 33 C8 EB F2  // 3....t....u.3...
    28A0: 58 23 C8 66 C1 EE 10 C3 A8 10 75 63 E8 CE 06 66  // X#.f......uc...f
    28B0: C1 E6 10 33 C0 E8 F6 FD 74 35 E8 D3 FD 50 51 8B  // ...3....t5...PQ.
    28C0: C8 E8 D7 01 85 C1 59 58 74 0D 50 E8 CF FE 24 03  // ......YXt.P...$.
    28D0: 3C 03 58 75 E0 EB 0C 50 E8 C2 FE A8 01 58 74 D5  // <.Xu...P.....Xt.
    28E0: E8 CC FC 50 E8 75 07 58 B5 00 E8 B7 FE EB C6 E8  // ...P.u.X........
    28F0: A9 01 E8 9B FD E8 13 01 B1 00 E8 2F 07 66 C1 EE  // .........../.f..
    2900: 10 E8 72 06 A8 20 75 3B A8 40 75 03 E8 03 08 E8  // ..r.. u;.@u.....
    2910: 59 06 0A C0 75 00 E8 82 01 E8 74 FD E8 6F FE E8  // Y...u.....t..o..
    2920: CF FE 75 14 E8 47 02 0A DB 74 0D E8 81 FC E8 2B  // ..u..G...t.....+
    2930: 07 B5 00 E8 6E FE EB 08 E8 12 07 B5 01 E8 64 FE  // ....n.........d.
    2940: E8 CE 00 C3 E8 38 0A C3 E8 9B FD E8 91 06 33 C9  // .....8........3.
    2950: E8 84 01 66 33 D2 66 33 C0 E8 6F FE E8 67 07 E8  // ...f3.f3..o..g..
    2960: 52 00 B1 FF E8 77 00 33 C0 E8 42 FD 74 0A E8 1F  // R....w.3..B.t...
    2970: FD 50 E8 05 07 58 EB F1 32 C9 E8 A6 01 E8 FF 09  // .P...X..2.......
    2980: 0B C0 C3 E8 60 FD E8 56 06 66 33 C0 66 BA 00 F0  // ....`..V.f3.f...
    2990: FF FF E8 15 01 51 B1 01 E8 6E 01 59 E8 3A 07 33  // .....Q...n.Y.:.3
    29A0: C0 E8 0A FD 74 0A E8 E7 FC 50 E8 BE 06 58 EB F1  // ....t....P...X..
    29B0: E8 E4 06 C3 B8 02 00 E8 D6 FC 74 21 B8 02 00 E8  // ..........t!....
    29C0: ED F4 F6 C3 04 75 0A E8 B5 09 83 E0 FD E8 B8 09  // .....u..........
    29D0: C3 66 B8 02 00 00 00 E8 F1 FD E8 33 F6 C3 E8 19  // .f.........3....
    29E0: 08 74 13 BB 02 00 E8 FF 07 8A E1 E8 03 08 E8 BE  // .t..............
    29F0: 06 0C 01 C3 0C 01 C3 51 E8 FF 07 74 0C 8A CC BB  // .......Q...t....
    2A00: 02 00 E8 E3 07 8A C4 8A E1 59 C3 B0 01 E8 FA 05  // .........Y......
    2A10: C3 B0 00 E8 F4 05 C3 E8 F4 0C 75 18 E8 7C 00 E8  // ..........u..|..
    2A20: 6E FC 80 F9 01 75 0E 51 E8 22 06 B5 01 E8 74 FD  // n....u.Q."....t.
    2A30: 59 E8 DD FF C3 E8 D3 FF 51 E8 2F 06 B5 00 E8 63  // Y.......Q./....c
    2A40: FD 59 C3 B8 02 00 E8 47 FC 74 03 E8 53 06 C3 E8  // .Y.....G.t..S...
    2A50: B8 04 3B C1 7C 35 8B C1 E8 F8 04 E8 0D 07 8B C8  // ..;.|5..........
    2A60: 51 E8 28 05 E8 EC 04 59 E8 00 07 3B C8 72 02 8B  // Q.(....Y...;.r..
    2A70: C1 8D 5C 04 E8 72 0F 32 C9 E8 C1 0B FE C1 38 C1  // ..\..r.2......8.
    2A80: 72 F7 8D 5C 04 E8 E9 0F 0B C0 C3 33 C0 C3 BB 00  // r..\.......3....
    2A90: 48 33 C0 8A C2 C1 E0 02 03 D8 C3 53 BB 03 00 E8  // H3.........S....
    2AA0: 46 07 66 25 FF 0F 00 00 5B C3 53 66 50 66 51 66  // F.f%....[.SfPfQf
    2AB0: 8B C8 BB 03 00 E8 30 07 66 23 C2 66 0B C1 E8 30  // ......0.f#.f...0
    2AC0: 07 66 59 66 58 5B C3 66 50 BB 05 00 E8 19 07 25  // .fYfX[.fP......%
    2AD0: FF 0F 8B C8 66 58 C3 E8 A5 08 23 C8 66 50 BB 05  // ....fX....#.fP..
    2AE0: 00 E8 04 07 25 00 F0 0B C1 E8 05 07 66 58 C3 66  // ....%.......fX.f
    2AF0: 50 53 BB 06 00 E8 F0 06 A8 10 75 09 BB F0 46 E8  // PS........u...F.
    2B00: 6F 0F 3D 5A A5 5B 66 58 C3 66 50 53 BB 06 00 E8  // o.=Z.[fX.fPS....
    2B10: D6 06 80 F1 01 C0 E1 04 24 EF 0A C1 E8 D2 06 5B  // ........$......[
    2B20: 66 58 C3 53 66 50 BB F8 46 E8 45 0F 8A C1 E8 A0  // fX.SfP..F.E.....
    2B30: 0E 66 58 5B C3 53 BB F8 46 E8 35 0F 83 E0 01 5B  // .fX[.S..F.5....[
    2B40: C3 53 66 50 BB 07 00 E8 9E 06 F6 C4 01 66 58 B0  // .SfP.........fX.
    2B50: 06 74 02 B0 08 5B C3 53 BB 07 00 E8 8A 06 80 E4  // .t...[.S........
    2B60: FE 80 FD 06 74 03 80 CC 01 E8 85 06 5B C3 66 50  // ....t.......[.fP
    2B70: BB 06 00 E8 72 06 24 40 C0 E8 06 8A D8 66 58 C3  // ....r.$@.....fX.
    2B80: B3 81 E8 9F 0C 75 04 83 C8 01 C3 33 C0 C3 50 66  // .....u.....3..Pf
    2B90: 51 E8 FC FA 83 EC 04 8B EC 66 33 C0 66 89 46 00  // Q........f3.f.F.
    2BA0: 33 D2 8D BC C0 01 8D 1D E8 C6 0E 0B C0 74 22 8B  // 3............t".
    2BB0: DF B0 00 E8 12 01 74 14 8B DF E8 57 F8 66 8B 46  // ......t....W.f.F
    2BC0: 00 66 3B C8 72 06 8B D7 66 89 4E 00 83 C7 1C EB  // .f;.r...f.N.....
    2BD0: D5 0B D2 74 0A 8D 9C A4 01 E8 0E F8 E9 88 00 66  // ...t...........f
    2BE0: 33 C0 66 89 46 00 8D BC 4C 02 33 D2 8D 1D E8 80  // 3.f.F...L.3.....
    2BF0: 0E 0B C0 74 58 66 50 E8 79 F4 3C 01 66 58 74 05  // ...tXfP.y.<.fXt.
    2C00: 3D 40 06 73 43 66 52 66 8B D0 8D 5D 04 E8 61 0E  // =@.sCfRf...]..a.
    2C10: E8 5D 00 8B CA 66 5A 74 2F 56 8D 9C A4 01 8B F1  // .]...fZt/V......
    2C20: E8 E6 F7 5E B0 00 E8 9F 00 74 1D 8D 1D E8 41 0E  // ...^.....t....A.
    2C30: 8B D9 8B 47 06 66 C1 E0 10 8B 47 02 66 3B 46 00  // ...G.f....G.f;F.
    2C40: 72 06 8B D1 66 89 46 00 83 C7 08 EB 9F 0B D2 74  // r...f.F........t
    2C50: 16 56 8D 9C A4 01 8B F2 E8 AE F7 5E 53 8D 9C BA  // .V.........^S...
    2C60: 01 33 C0 E8 83 0D 5B 83 C4 04 0B D2 66 59 58 C3  // .3....[.....fYX.
    2C70: 57 53 51 E8 EC 08 3B 55 02 75 18 66 C1 CA 10 8B  // WSQ...;U.u.f....
    2C80: DA 66 C1 CA 10 3B 5D 06 75 09 0A C0 74 0E 3A 45  // .f...;].u...t.:E
    2C90: 1B 74 09 83 C7 1C E2 DE 33 D2 EB 02 8B D7 0B D2  // .t......3.......
    2CA0: 59 5B 5F C3 51 66 52 E8 B8 08 3A 65 1A 75 09 0A  // Y[_.QfR...:e.u..
    2CB0: C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 ED 33 FF EB  // .t.:E.t......3..
    2CC0: 00 0B FF 66 5A 59 C3 C3 66 51 66 52 53 53 66 C1  // ...fZY..fQfRSSf.
    2CD0: CE 10 8B DE 66 C1 CE 10 E8 96 0D 5B 66 8B D0 E8  // ....f......[f...
    2CE0: 32 F7 3B CA 72 0A 66 3B CA 72 05 E8 2F F9 75 02  // 2.;.r.f;.r../.u.
    2CF0: 32 C0 5B 66 5A 66 59 C3 56 57 E8 A7 FF 8B F7 E8  // 2.[fZfY.VW......
    2D00: 07 F7 5F 5E C3 66 50 53 66 51 52 57 56 51 8B DE  // .._^.fPSfQRWVQ..
    2D10: B9 08 00 E8 30 09 59 8D 5C 08 8B C1 66 C1 E0 10  // ....0.Y.\...f...
    2D20: 8A C2 E8 AC 0C F6 C2 03 75 24 8B C1 24 7F BF E8  // ........u$..$...
    2D30: 2D 80 3D FF 0F 84 0F 01 3A 05 75 0D 66 8B 45 01  // -.=.....:.u.f.E.
    2D40: 66 B9 00 05 02 00 E9 96 00 83 C7 05 EB E3 F6 C2  // f...............
    2D50: 01 74 25 8B C1 E8 70 01 0F 84 EB 00 33 C9 8A CC  // .t%...p.....3...
    2D60: 8A D0 0A C0 75 12 8D 5C 08 66 25 FF FF 00 00 66  // ....u..\.f%....f
    2D70: C1 E0 08 E8 5B 0C EB B2 8A E1 8A CA 80 E1 0C C0  // ....[...........
    2D80: E9 02 80 E2 F0 C0 EA 04 8A EA 80 FC 70 72 2A 80  // ............pr*.
    2D90: FC 75 73 25 80 EC 70 8A C4 32 E4 50 E8 30 02 8B  // .us%..p..2.P.0..
    2DA0: D8 58 38 D8 72 05 33 C0 E9 9C 00 E8 28 02 E8 C0  // .X8.r.3.....(...
    2DB0: 0C 0B C0 0F 84 90 00 EB 1B 32 C0 E8 E6 FE 0F 84  // .........2......
    2DC0: 85 00 8D 5C 16 8B 05 E8 1F 0C 8B 45 06 66 C1 E0  // ...\.......E.f..
    2DD0: 10 8B 45 02 50 E8 93 03 66 C1 E1 10 8B C8 58 8D  // ..E.P...f.....X.
    2DE0: 1C E8 ED 0B 66 50 8D 5C 04 66 8B C1 E8 E2 0B 66  // ....fP.\.f.....f
    2DF0: 58 66 C1 E8 10 66 81 E1 FF FF 00 00 66 F7 E1 66  // Xf...f......f..f
    2E00: 50 8D 5C 06 E8 6A 0C 8B C8 66 58 66 D3 E0 66 C1  // P.\..j...fXf..f.
    2E10: E8 10 40 8D 5C 14 E8 D0 0B BF 48 2E 83 F9 01 74  // ..@.\.....H....t
    2E20: 11 BF 50 2E 81 F9 01 01 74 08 BF 58 2E 83 F9 02  // ..P.....t..X....
    2E30: 75 15 8D 5C 0C 66 8B 05 E8 96 0B 8D 5C 10 66 8B  // u..\.f......\.f.
    2E40: 45 04 E8 8C 0B 0B DB 5E 5F 5A 66 59 5B 66 58 C3  // E......^_ZfY[fX.
    2E50: 00 40 01 90 01 01 40 01 90 01 02 80 02 90 01 03  // .@....@.........
    2E60: 80 02 90 01 04 40 01 90 01 05 40 01 90 01 06 80  // .....@....@.....
    2E70: 02 90 01 07 D0 02 5E 01 0D 40 01 90 01 0E 80 02  // ......^..@......
    2E80: 90 01 0F 80 02 5E 01 10 80 02 5E 01 11 80 02 E0  // .....^....^.....
    2E90: 01 12 80 02 E0 01 13 80 02 90 01 23 20 04 90 01  // ...........# ...
    2EA0: 32 20 04 B0 02 33 20 04 C0 02 62 80 02 E0 01 FF  // 2 ...3 ...b.....
    2EB0: 05 0A 05 05 05 00 00 00 05 0B 06 05 05 00 00 00  // ................
    2EC0: 08 10 08 08 08 00 00 00 56 E8 2C 09 80 E4 01 3B  // ........V.,....;
    2ED0: 04 74 09 83 C6 04 E2 F7 33 C0 EB 05 8B 44 02 0B  // .t......3....D..
    2EE0: C0 5E C3 57 53 50 E8 0F 09 83 E9 0A E8 E0 00 83  // .^.WSP..........
    2EF0: F8 05 76 03 B8 05 00 D1 E0 03 C8 FB A5 83 C6 02  // ..v.............
    2F00: E2 FA B8 FF FF AB 58 5B 5F C3 66 53 51 66 52 E8  // ......X[_.fSQfR.
    2F10: 41 00 E8 77 00 66 C1 E8 10 66 0F B7 D8 66 B8 00  // A..w.f...f...f..
    2F20: 00 00 03 66 D3 E8 66 33 D2 66 F7 F3 E8 3C 02 66  // ...f..f3.f...<.f
    2F30: 5A 59 66 5B C3 53 66 50 BB 07 00 E8 AA 02 0A C0  // ZYf[.SfP........
    2F40: 66 58 5B C3 53 66 50 BB 07 00 E8 9B 02 A8 01 66  // fX[.SfP........f
    2F50: 58 5B C3 53 66 50 8D 5C 06 E8 15 0B 8A C8 66 58  // X[.SfP.\......fX
    2F60: 5B C3 51 B9 08 00 E8 F2 06 59 C3 53 8D 5C 08 E8  // [.Q......Y.S.\..
    2F70: FF 0A 24 03 5B C3 8D 5C 09 E8 F5 0A C3 51 53 B1  // ..$.[..\.....QS.
    2F80: 01 8A E8 8D 5C 08 E8 8C 0A 5B 59 C3 53 8D 1C E8  // ....\....[Y.S...
    2F90: DF 0A 5B C3 53 8D 5C 04 E8 D6 0A 5B C3 53 8D 5C  // ..[.S.\....[.S.\
    2FA0: 16 E8 CD 0A 5B C3 53 66 52 33 C0 E8 C2 FC 66 5A  // ....[.SfR3....fZ
    2FB0: 75 1B E8 34 00 74 16 E8 15 00 40 83 F8 05 73 0D  // u..4.t....@...s.
    2FC0: E8 0E 0A 48 E8 0F 00 66 8B C2 E8 04 0A 5B C3 BB  // ...H...f.....[..
    2FD0: 00 4E E8 9C 0A C3 BB 08 4E C1 E0 03 03 D8 C3 BB  // .N......N.......
    2FE0: 00 4E B9 32 00 E8 5E 06 C3 51 E8 E2 FF 0B C0 74  // .N.2..^..Q.....t
    2FF0: 12 8B C8 BB 08 4E E8 78 0A 66 3B C2 74 07 83 C3  // .....N.x.f;.t...
    3000: 08 E2 F3 0B DB 59 C3 C3 C3 00 8A E8 BB 20 DF 3C  // .....Y....... .<
    3010: 01 74 02 32 DB E8 45 2A E8 FF F6 66 B8 80 06 00  // .t.2..E*...f....
    3020: 08 66 33 DB 8A D9 8A CD E8 B8 00 C3 66 51 66 52  // .f3.........fQfR
    3030: 66 57 66 B8 80 05 00 08 66 BB 00 4C 00 00 66 33  // fWf.....f..L..f3
    3040: C9 8B CE E8 9D 00 66 5F 66 5A 66 59 C3 66 B8 80  // ......f_fZfY.f..
    3050: 07 00 04 66 33 DB 8B DE E8 88 00 C3 66 B8 80 08  // ...f3.......f...
    3060: 00 04 66 33 DB 8B DE E8 79 00 C3 66 B8 80 09 00  // ..f3....y..f....
    3070: 04 66 33 DB 8B DE E8 6A 00 C3 C3 66 B8 80 0A 00  // .f3....j...f....
    3080: 04 66 33 DB 8B DE E8 5A 00 E8 03 F0 F6 C3 02 74  // .f3....Z.......t
    3090: 03 B0 00 C3 B0 01 C3 66 B8 80 0D 00 00 E8 43 00  // .......f......C.
    30A0: C3 66 B8 80 0F 00 04 66 33 DB 8A D9 E8 34 00 66  // .f.....f3....4.f
    30B0: B8 80 0F 00 04 66 33 DB 56 E8 76 04 03 74 04 8B  // .....f3.V.v..t..
    30C0: 1C 5E E8 1E 00 C3 66 B8 00 00 00 00 E8 14 00 66  // .^....f........f
    30D0: B8 80 0C 00 04 E8 0B 00 C3 66 B8 00 01 00 00 E8  // .........f......
    30E0: 01 00 C3 83 EC 1C 8B EC 66 89 46 00 66 89 5E 04  // ........f.F.f.^.
    30F0: 66 89 4E 08 66 89 56 0C 66 89 7E 10 66 89 76 14  // f.N.f.V.f.~.f.v.
    3100: 8C D0 66 C1 E0 10 8B C4 BB 42 00 E8 67 04 83 C4  // ..f......B..g...
    3110: 1C C3 51 8D 5C 14 E8 58 09 66 C1 E0 10 E8 02 00  // ..Q.\..X.f......
    3120: 59 C3 83 EC 10 8B EC 66 3D F0 FF FF 03 76 06 66  // Y......f=....v.f
    3130: B8 F0 FF FF 03 66 8B C8 66 33 C0 66 89 46 04 66  // .....f..f3.f.F.f
    3140: 89 46 00 66 89 46 08 B0 01 88 46 09 66 B8 00 00  // .F.f.F....F.f...
    3150: 00 D0 66 0B C1 66 89 46 0C 8C D0 66 C1 E0 10 8B  // ..f..f.F...f....
    3160: C4 BB 35 00 E8 0E 04 83 C4 10 C3 3D C0 7F 76 04  // ..5........=..v.
    3170: B8 C0 7F C3 83 C0 3F 24 C0 C3 53 51 66 50 B9 68  // ......?$..SQfP.h
    3180: 74 80 FB 03 74 0B B9 A0 8C 80 FB 00 75 03 B9 78  // t...t.......u..x
    3190: 69 66 33 D2 8B D1 66 58 59 5B C3 66 52 B3 00 66  // if3...fXY[.fR..f
    31A0: F7 C2 00 00 FF FF 75 13 80 FD 13 74 0E 80 FD 14  // ......u....t....
    31B0: 74 09 B3 03 80 F9 03 74 02 B3 02 66 5A C3 E8 B0  // t......t...fZ...
    31C0: 08 66 C1 E8 10 0B C0 74 1C 53 83 C3 06 E8 A1 08  // .f.....t.S......
    31D0: 5B 3D E0 01 72 0F 53 83 C3 18 E8 94 08 5B A8 80  // [=..r.S......[..
    31E0: 75 03 0C 01 C3 32 C0 C3 53 83 C3 4C E8 50 08 5B  // u....2..S..L.P.[
    31F0: C3 53 83 C3 4C E8 A2 07 5B C3 56 E8 34 03 83 C6  // .S..L...[.V.4...
    3200: 04 8A 64 10 8A 44 10 83 3C 00 5E C3 BB 00 50 83  // ..d..D..<.^...P.
    3210: F8 02 74 32 BB 00 54 83 F8 08 74 2A BB 00 58 3D  // ..t2..T...t*..X=
    3220: 80 00 74 22 BB 00 5C 3D 00 02 74 1A BB 00 60 3D  // ..t"..\=..t...`=
    3230: 00 04 74 12 BB 00 64 3D 00 08 74 0A BB 00 68 83  // ..t...d=..t...h.
    3240: F8 40 74 02 33 DB C3 57 E8 56 00 74 0A 8B 5D 02  // .@t.3..W.V.t..].
    3250: E8 08 00 0B DB 5F C3 33 DB 5F C3 52 51 0B DB 74  // ....._.3._.RQ..t
    3260: 1B 56 E8 B4 02 03 DE 5E 33 C9 8A 4F 01 80 3F FF  // .V.....^3..O..?.
    3270: 74 08 3A 07 74 06 03 D9 EB F0 33 DB 0B DB 59 5A  // t.:.t.....3...YZ
    3280: C3 56 51 E8 93 02 32 C9 8D 7C 08 3B 5D 04 74 0C  // .VQ...2..|.;].t.
    3290: 83 C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E  // .....:L.r.3...Y^
    32A0: C3 56 51 E8 73 02 32 C9 8D 7C 08 3B 1D 74 0C 83  // .VQ.s.2..|.;.t..
    32B0: C7 10 FE C1 3A 4C 06 72 F2 33 FF 0B FF 59 5E C3  // ....:L.r.3...Y^.
    32C0: 56 51 E8 54 02 32 C9 8D 7C 08 3B 45 0C 74 0C 83  // VQ.T.2..|.;E.t..
    32D0: C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3  // ....:L.r.3...Y^.
    32E0: 57 50 E8 DB FF 8A C3 8B 5D 02 E8 6E FF 58 5F C3  // WP......]..n.X_.
    32F0: 53 32 C9 B3 01 E8 E8 FF 74 03 8A 4F 02 0A C9 5B  // S2......t..O...[
    3300: C3 53 32 ED B3 02 E8 D7 FF 74 03 8A 6F 02 0A ED  // .S2......t..o...
    3310: 5B C3 50 57 8B DA E8 68 FF 75 04 33 DB EB 0D B0  // [.PW...h.u.3....
    3320: 14 8B 5D 08 E8 34 FF 74 F2 8B 5F 02 5F 58 C3 66  // ..]..4.t.._._X.f
    3330: 50 53 51 57 8D 1C 66 25 FF FF 00 00 E8 92 06 8B  // PSQW..f%........
    3340: D8 E8 3B 00 23 C3 74 31 E8 75 FF 0B FF 74 2A 66  // ..;.#.t1.u...t*f
    3350: 50 66 8B 45 04 8D 5C 0C E8 76 06 66 33 C0 8B 05  // Pf.E..\..v.f3...
    3360: 8D 5C 04 E8 6B 06 66 58 E8 85 FF E8 93 FF 8D 5C  // .\..k.fX.......\
    3370: 08 66 33 C0 8B C1 E8 58 06 5F 59 5B 66 58 C3 56  // .f3....X._Y[fX.V
    3380: E8 96 01 8B 44 04 5E C3 56 E8 8D 01 89 44 04 5E  // ....D.^.V....D.^
    3390: C3 E8 B3 01 8B F7 83 C6 38 BB 00 6C B9 23 00 E8  // ........8..l.#..
    33A0: D2 02 E8 01 00 C3 51 66 57 56 E8 6C 01 66 33 FF  // ......QfWV.l.f3.
    33B0: 8D 7C 08 33 C0 E8 D0 FF 32 C9 8B 15 B8 00 70 23  // .|.3....2.....p#
    33C0: C2 3D 00 30 75 54 80 FA 15 74 0B E8 B1 FF 0B 45  // .=.0uT...t.....E
    33D0: 0C E8 B4 FF EB 44 E8 5E 00 89 45 0C 0B C0 75 04  // .....D.^..E...u.
    33E0: 89 05 EB 36 E8 98 FF 0B 45 0C E8 9B FF 83 7D 06  // ...6....E.....}.
    33F0: 00 74 16 E8 4A 00 89 45 06 0B C0 74 0C 83 7D 06  // .t..J..E...t..}.
    3400: 00 74 06 8B 5C 0A E8 A0 00 E8 40 00 89 05 8B 5D  // .t..\.....@....]
    3410: 02 E8 95 00 8B 5D 08 E8 B0 00 83 C7 10 FE C1 3A  // .....].........:
    3420: 4C 06 72 96 5E 66 5F 59 C3 08 00 80 00 00 02 00  // L.r.^f_Y........
    3430: 04 00 08 40 00 00 00 53 E8 3D 00 E8 33 06 5B C3  // ...@...S.=..3.[.
    3440: 53 E8 34 00 83 C3 08 E8 27 06 5B C3 53 57 52 E8  // S.4.....'.[.SWR.
    3450: 26 00 83 C3 04 E8 19 06 8B D0 5A 5F 5B C3 E8 EB  // &.........Z_[...
    3460: FF 66 C1 E8 10 B4 11 E8 25 00 C3 E8 DE FF 66 C1  // .f......%.....f.
    3470: E8 18 B4 10 E8 18 00 C3 51 52 33 C9 8A CE 80 E1  // ........QR3.....
    3480: 07 49 B8 10 00 F7 E1 BB 14 6C 03 D8 5A 59 C3 57  // .I.......l..ZY.W
    3490: 53 51 33 C9 8A C8 8A C4 BB 03 71 E8 A9 FD 83 C3  // SQ3.......q.....
    34A0: 02 03 D9 8A 07 59 5B 5F C3 50 53 B0 01 E8 AB FD  // .....Y[_.PS.....
    34B0: 74 15 E8 A9 FF 88 47 02 5B 53 B0 02 E8 9C FD 74  // t.....G.[S.....t
    34C0: 06 E8 A7 FF 88 47 02 5B 58 C3 51 50 B0 14 E8 8A  // .....G.[X.QP....
    34D0: FD 74 3A 53 E8 A1 FF 83 C3 0C E8 94 05 8B C8 5B  // .t:S...........[
    34E0: F6 C1 01 74 05 66 83 67 02 FD F6 C1 80 74 05 66  // ...t.f.g.....t.f
    34F0: 83 67 02 F7 F7 C1 00 01 74 08 66 81 4F 02 00 01  // .g......t.f.O...
    3500: 00 00 F7 C1 00 02 74 05 66 83 67 02 FB 58 59 C3  // ......t.f.g..XY.
    3510: BF AC 01 8B 3D 8B 7D 0C C3 BE AC 01 8B 34 8B 74  // ....=.}......4.t
    3520: 30 C3 1E 0E 1F BF AC 01 8B 3D 8B 7D 0E 83 C7 04  // 0........=.}....
    3530: 1F C3 BE AC 01 8B 34 8B 74 10 C3 BF AC 01 8B 3D  // ......4.t......=
    3540: 8B 7D 26 83 C7 04 C3 BF AC 01 8B 3D 8B 7D 40 C3  // .}&........=.}@.
    3550: BE AC 01 8B 34 8B 74 1A C3 BE AC 01 8B 34 8B 74  // ....4.t......4.t
    3560: 3A C3 BF AC 01 8B 3D 8B 7D 0A 83 C7 04 B9 07 00  // :.....=.}.......
    3570: C3 E8 01 00 CB 83 EC 06 8B EC 89 46 00 66 33 C0  // ...........F.f3.
    3580: C6 46 04 00 89 46 02 06 52 8A D3 8B C5 E8 4F 17  // .F...F..R.....O.
    3590: 5A 07 83 C4 06 C3 E8 77 FF 66 F7 45 10 01 00 00  // Z......w.f.E....
    35A0: 00 C3 50 E8 6A FF B8 01 00 09 45 10 58 C3 E8 5F  // ..P.j.....E.X.._
    35B0: FF 88 45 10 C3 66 53 83 EC 48 8B EC 66 89 5E 00  // ..E..fS..H..f.^.
    35C0: 66 89 4E 04 8C D0 66 C1 E0 10 8B C4 BB 00 00 E8  // f.N...f.........
    35D0: A3 FF 83 C4 48 66 5B E8 49 01 E8 83 01 E8 0E 00  // ....Hf[.I.......
    35E0: BB 04 00 E8 02 FC 66 C1 E8 10 E8 C1 FF C3 83 EC  // ......f.........
    35F0: 0C 8B EC 8C D0 66 C1 E0 10 8B C4 BB 16 00 E8 74  // .....f.........t
    3600: FF 66 BB 00 00 00 00 83 C4 0C E8 03 FF 66 8B C3  // .f...........f..
    3610: 66 C1 E8 08 66 89 45 28 66 8B C3 66 C1 E0 18 66  // f...f.E(f..f...f
    3620: 89 45 2C C3 E8 E9 FE 66 8B 5D 08 66 8B 4D 0C C3  // .E,....f.].f.M..
    3630: 56 E8 25 FF 66 8B 44 08 5E C3 B0 04 C3 B0 01 C3  // V.%.f.D.^.......
    3640: B0 04 C3 B0 08 C3 53 66 50 66 33 C0 E8 82 03 83  // ......SfPf3.....
    3650: C3 04 E2 F8 66 58 5B C3 32 C0 C3 FC E8 12 04 66  // ....fX[.2......f
    3660: C1 CB 10 E8 6B 03 66 C1 CB 10 66 81 C3 04 00 04  // ....k.f...f.....
    3670: 00 E2 E9 C3 FC 66 AD E8 57 03 83 C3 04 E2 F6 C3  // .....f..W.......
    3680: FC E8 ED 03 66 AB 83 C3 04 E2 F6 C3 66 50 B8 64  // ....f.......fP.d
    3690: 00 E8 10 00 66 58 C3 66 50 B8 50 C3 D1 E1 E8 03  // ....fX.fP.P.....
    36A0: 00 66 58 C3 52 F7 E1 8B CA E8 DE 01 66 53 8B D9  // .fX.R.......fS..
    36B0: 66 C1 E3 10 8B D8 66 B8 98 A8 05 00 B2 00 66 EF  // f.....f.......f.
    36C0: B2 04 66 ED 33 C9 66 03 D8 73 0A 66 ED 66 A9 00  // ..f.3.f..s.f.f..
    36D0: 00 00 80 75 F6 66 ED 66 3B C3 73 0C 66 C1 E8 10  // ...u.f.f;.s.f...
    36E0: 3B C1 72 04 8B C8 EB ED 66 5B 5A C3 66 52 E8 99  // ;.r.....f[Z.fR..
    36F0: 01 66 B8 98 A8 05 00 B2 00 66 EF B2 04 66 ED 66  // .f.......f...f.f
    3700: 33 D2 66 BB 64 00 00 00 66 F7 F3 66 5A C3 66 50  // 3.f.d...f..fZ.fP
    3710: 53 BB 07 00 E8 D1 FA 25 00 02 35 00 02 0B C0 5B  // S......%..5....[
    3720: 66 58 C3 66 51 B3 01 E8 05 01 E8 23 FE 66 33 C9  // fX.fQ......#.f3.
    3730: 8B 4C 08 66 C1 E0 0A 0B C9 75 03 B9 00 08 66 2B  // .L.f.....u....f+
    3740: C1 E8 0C FE 66 89 44 04 89 4C 08 66 59 C3 56 1E  // ....f.D..L.fY.V.
    3750: 0E 1F E8 FB FD 66 8B 44 04 66 C1 E0 0A 1F 5E C3  // .....f.D.f....^.
    3760: E8 C0 FF 06 E8 E0 FD 0E 07 66 BB C0 F7 1A 00 E8  // .........f......
    3770: DC FF 66 03 D8 E8 B8 03 66 3B 05 75 0F B9 10 01  // ..f.....f;.u....
    3780: FC E8 AC 03 66 AB 66 83 C3 04 E2 F5 E8 B8 FD BE  // ....f.f.........
    3790: AC 01 8B 34 8B 74 14 8B 45 14 89 44 0C E8 92 FD  // ...4.t..E..D....
    37A0: 0B F6 74 2B 57 56 83 C7 20 83 C6 04 B9 02 00 8B  // ..t+WV.. .......
    37B0: 05 89 04 8B 45 02 89 44 02 8A 45 0C 88 44 0C 8A  // ....E..D..E..D..
    37C0: 45 0D 88 44 0D 8A 45 0E 88 44 0E 47 46 E2 E0 5E  // E..D..E..D.GF..^
    37D0: 5F E8 85 FD 0B F6 74 1E 8A 85 06 01 88 44 2F BB  // _.....t......D/.
    37E0: 04 71 B0 09 E8 60 FA 74 0D 57 81 C7 80 00 8A 85  // .q...`.t.W......
    37F0: 85 00 88 47 04 5F 07 C3 BE AC 01 8B 34 8B 74 1E  // ...G._......4.t.
    3800: 83 C6 04 B9 1C 00 C3 56 E8 27 FD 83 C6 04 8A 6C  // .......V.'.....l
    3810: 0F 5E C3 56 E8 1B FD 80 FD 00 74 06 83 C6 04 88  // .^.V......t.....
    3820: 6C 0F 5E C3 32 C0 C3 E8 1D FD 66 8B 45 08 C3 66  // l.^.2.....f.E..f
    3830: 53 83 EC 04 8B EC 8C D0 66 C1 E0 10 8B C4 66 89  // S.......f.....f.
    3840: 5E 00 BB 06 00 E8 2D FD 8B EC 66 8B 46 00 83 C4  // ^.....-...f.F...
    3850: 04 66 5B C3 83 EC 0C 8B EC 8C D0 66 C1 E0 10 8B  // .f[........f....
    3860: C4 BB 16 00 E8 0E FD 8B EC 66 8B 5E 00 66 8B 4E  // .........f.^.f.N
    3870: 00 66 8B 56 08 83 C4 0C C3 66 B8 00 00 00 00 C3  // .f.V.....f......
    3880: BF AC 01 8B 3D 8B 7D 12 C3 00 66 50 8C C8 3D 00  // ....=.}...fP..=.
    3890: C0 75 0C BA C3 03 EC 8A F0 0A F6 74 02 EB 0E 53  // .u.........t...S
    38A0: 2E 8B 1E 14 00 B2 20 E8 D6 00 8A F4 5B 32 D2 66  // ...... .....[2.f
    38B0: ED 66 58 C3 2E 8B 1E 14 00 C3 0B C9 75 1A 4B 74  // .fX.........u.Kt
    38C0: 16 43 3B DA 77 09 8B C8 8B C2 2B D2 F7 F3 91 F7  // .C;.w.....+.....
    38D0: F3 8B DA 8B D1 2B C9 C3 3B CA 72 1A 75 10 3B D8  // .....+..;.r.u.;.
    38E0: 77 0C 2B C3 8B D8 2B C9 2B D2 B8 01 00 C3 2B C9  // w.+...+.+.....+.
    38F0: 2B DB 93 87 CA C3 55 56 2B F6 8B EE 03 DB 13 C9  // +.....UV+.......
    3900: 72 11 45 3B CA 72 F5 77 04 3B D8 76 EF F8 13 F6  // r.E;.r.w.;.v....
    3910: 4D 78 20 D1 D9 D1 DB 2B C3 1B D1 F5 72 F0 03 F6  // Mx ....+....r...
    3920: 4D 78 0C D1 E9 D1 DB 03 C3 13 D1 73 F1 EB DF 03  // Mx.........s....
    3930: C3 13 D1 8B D8 8B CA 8B C6 33 D2 5E 5D C3 93 50  // .........3.^]..P
    3940: 92 0B C0 74 02 F7 E2 91 0B C0 74 04 F7 E3 03 C8  // ...t......t.....
    3950: 58 F7 E3 03 D1 C3 52 66 50 B4 80 8A C7 66 C1 E0  // X.....RfP....f..
    3960: 10 8A E3 8A C2 24 FC BA F8 0C 66 EF 66 58 5A C3  // .....$....f.fXZ.
    3970: 52 BA FC 0C 66 ED 5A C3 52 BA FC 0C 66 EF 5A C3  // R...f.Z.R...f.Z.
    3980: E8 31 FF 9C FA E8 CE FF E8 E5 FF 9D C3 E8 24 FF  // .1............$.
    3990: 9C FA E8 C1 FF E8 E0 FF 9D C3 52 66 53 66 50 E8  // ..........RfSfP.
    39A0: 06 00 66 58 66 5B 5A C3 66 C1 E3 10 66 C1 EB 0E  // ..fXf[Z.f...f...
    39B0: E8 D7 FE E8 BF 01 C3 66 50 66 C1 E3 10 66 C1 EB  // .......fPf...f..
    39C0: 10 E8 8A FD 66 03 D8 66 81 CB 00 00 00 80 66 58  // ....f..f......fX
    39D0: C3 52 66 53 E8 04 00 66 5B 5A C3 66 50 E8 AA FE  // .RfS...f[Z.fP...
    39E0: E8 D4 FF E8 8F 01 66 58 C3 52 51 66 53 66 50 8A  // ......fX.RQfSfP.
    39F0: CB 80 E3 FC 80 E1 03 C0 E1 03 E8 8D FE E8 B7 FF  // ................
    3A00: E8 59 01 66 D3 C8 58 50 66 D3 C0 E8 67 01 66 58  // .Y.f..XPf...g.fX
    3A10: 66 5B 59 5A C3 66 50 51 C0 E1 03 E8 53 00 66 D3  // f[YZ.fPQ....S.f.
    3A20: C8 8A C5 66 D3 C0 E8 A8 FF 59 66 58 C3 66 50 51  // ...f.....YfX.fPQ
    3A30: C0 E1 03 E8 3B 00 66 D3 C8 59 8A E8 66 58 C3 E8  // ....;.f..Y..fX..
    3A40: 5F 00 C3 E8 44 FE 66 C1 E3 10 66 C1 EB 0E E8 0B  // _...D.f...f.....
    3A50: 01 C3 E8 35 FE 66 C1 E3 02 E8 00 01 C3 52 66 53  // ...5.f.......RfS
    3A60: E8 04 00 66 5B 5A C3 E8 20 FE E8 4A FF E8 EC 00  // ...f[Z.. ..J....
    3A70: C3 51 66 52 8A EB 8A CB 80 E1 03 C0 E1 03 80 E3  // .QfR............
    3A80: FC E8 D9 FF 80 F9 00 74 14 66 8B D0 83 C3 04 E8  // .......t.f......
    3A90: CB FF 83 EB 04 66 92 66 0F AD D0 8A DD 66 5A 59  // .....f.f.....fZY
    3AA0: C3 52 66 53 E8 9C FF 66 5B 5A C3 52 66 53 E8 A1  // .RfS...f[Z.RfS..
    3AB0: FF 66 5B 5A C3 66 50 55 52 66 50 8B EC 8B 56 0C  // .f[Z.fPURfP...V.
    3AC0: 89 56 08 E8 C4 FD B2 00 66 ED 66 89 46 0A 66 58  // .V......f.f.F.fX
    3AD0: 5A 5D C3 66 50 55 52 66 50 8B EC 8B 56 0C 89 56  // Z].fPURfP...V..V
    3AE0: 08 E8 A6 FD 2E A1 FD 01 B2 18 EF B2 00 66 ED 66  // .............f.f
    3AF0: 89 46 0A 66 58 5A 5D C3 66 50 55 52 8B EC E8 89  // .F.fXZ].fPUR....
    3B00: FD B2 00 66 8B 46 0A 66 EF 8B 56 08 89 56 0C 66  // ...f.F.f..V..V.f
    3B10: 8B 46 04 66 89 46 08 5A 5D 66 58 66 58 C3 66 50  // .F.f.F.Z]fXfX.fP
    3B20: 52 E8 66 FD B2 18 66 ED 2E A3 FD 01 5A 66 58 C3  // R.f...f.....ZfX.
    3B30: 66 52 66 53 E8 53 FD 66 81 CB 00 00 00 80 E8 1B  // fRfS.S.f........
    3B40: 00 66 5B 66 5A C3 66 52 66 53 E8 3D FD 66 81 CB  // .f[fZ.fRfS.=.f..
    3B50: 00 00 00 80 E8 1E 00 66 5B 66 5A C3 66 81 FB FF  // .......f[fZ.f...
    3B60: 00 00 00 77 04 8A D3 EB 09 66 8B C3 B2 00 66 EF  // ...w.....f....f.
    3B70: B2 04 66 ED C3 66 81 FB FF 00 00 00 77 04 8A D3  // ..f..f......w...
    3B80: EB 0A 66 93 B2 00 66 EF 66 93 B2 04 66 EF C3 C3  // ..f...f.f...f...
    3B90: C3 55 8B EC 53 51 8B F0 26 8B 5C 14 26 8B 4C 16  // .U..SQ..&.\.&.L.
    3BA0: E8 28 00 8D 66 FC 59 5B 5D C3 53 51 8B F0 26 8B  // .(..f.Y[].SQ..&.
    3BB0: 5C 24 33 C9 E8 14 00 59 5B C3 55 8B EC 53 51 8B  // \$3....Y[.U..SQ.
    3BC0: F0 26 8B 5C 08 26 8B 4C 0A EB D5 52 56 57 C8 06  // .&.\.&.L...RVW..
    3BD0: 00 00 8B F0 89 4E FE 8C D0 8E C0 26 8B 7C 26 8A  // .....N.....&.|&.
    3BE0: 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3 06  // E.2.. .+........
    3BF0: D1 EA D1 D8 E2 FA 8A 4D 03 32 ED 8B FA E3 06 D1  // .......M.2......
    3C00: E0 D1 D7 E2 FA F7 D0 F7 D7 26 21 44 1C 26 21 7C  // .........&!D.&!|
    3C10: 1E 8C D0 8E C0 26 8B 7C 26 8A 4D 01 32 ED B8 20  // .....&.|&.M.2.. 
    3C20: 00 2B C1 8B C8 66 C7 46 FA FF FF FF FF E3 08 D1  // .+...f.F........
    3C30: 6E FC D1 5E FA E2 F8 8A 4D 02 32 ED 8B C3 8B 56  // n..^....M.2....V
    3C40: FE E3 06 D1 EA D1 D8 E2 FA 23 46 FA 23 56 FC 8A  // .........#F.#V..
    3C50: 4D 03 32 ED E3 06 D1 E0 D1 D2 E2 FA 26 09 44 1C  // M.2.........&.D.
    3C60: 26 09 54 1E C9 5F 5E 5A C3 55 8B EC 53 51 52 57  // &.T.._^Z.U..SQRW
    3C70: 50 8B D8 26 8B 7F 26 8A 45 01 32 E4 B9 20 00 2B  // P..&..&.E.2.. .+
    3C80: C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D  // ...............M
    3C90: 02 88 4E F6 C6 46 F7 00 8B FA 8B 4E F6 E3 06 D1  // ..N..F.....N....
    3CA0: E0 D1 D7 E2 FA 26 09 47 1C 26 09 7F 1E 8D 66 F8  // .....&.G.&....f.
    3CB0: 5F 5A E9 F1 FE 53 51 52 57 8B D8 8C D0 8E C0 26  // _Z...SQRW......&
    3CC0: 8B 77 26 8A 4C 01 32 ED B8 20 00 2B C1 8B C8 BE  // .w&.L.2.. .+....
    3CD0: FF FF 8B D6 E3 06 D1 EA D1 DE E2 FA 26 8B 7F 26  // ............&..&
    3CE0: 8A 4D 02 32 ED 8B C6 E3 06 D1 E0 D1 D2 E2 FA F7  // .M.2............
    3CF0: D0 F7 D2 26 21 47 1C 26 21 57 1E 5F E9 CC 05 53  // ...&!G.&!W._...S
    3D00: 56 8B D8 8C D2 8E C2 26 8B 77 26 80 3C 00 74 73  // V......&.w&.<.ts
    3D10: 80 3C 01 75 58 8A 44 01 32 E4 26 83 7F 1E 00 75  // .<.uX.D.2.&....u
    3D20: 4C 26 3B 47 1C 75 46 8A 04 6B F0 03 8A 84 58 99  // L&;G.uF..k....X.
    3D30: 26 01 47 26 8C D0 8E C0 26 8B 77 26 80 3C 09 74  // &.G&....&.w&.<.t
    3D40: 17 8A 04 32 E4 6B F0 03 8B C3 FF 94 56 99 26 8B  // ...2.k......V.&.
    3D50: 77 26 8A 04 32 E4 EB D1 8B 44 01 26 29 47 26 26  // w&..2....D.&)G&&
    3D60: FF 47 26 26 8B 47 1C 26 8B 77 1E EB 1A 26 8B 77  // .G&&.G.&.w...&.w
    3D70: 26 8A 04 32 E4 6B F0 03 8A 84 58 99 26 01 47 26  // &..2.k....X.&.G&
    3D80: E9 80 FF 33 C0 33 F6 8B D6 5E 5B C3 53 51 52 56  // ...3.3...^[.SQRV
    3D90: 8B D8 8D 77 35 26 8B 54 02 26 89 57 14 26 C7 47  // ...w5&.T.&.W.&.G
    3DA0: 16 00 00 8B F0 26 8B 47 20 33 D2 26 01 47 14 26  // .....&.G 3.&.G.&
    3DB0: 11 54 16 8C D1 8E C1 26 F6 47 2F 06 0F 85 0A 05  // .T.....&.G/.....
    3DC0: 26 80 7F 34 00 75 22 26 8B 77 16 26 0B 77 14 75  // &..4.u"&.w.&.w.u
    3DD0: 10 26 D1 67 08 26 D1 57 0A 26 D1 67 08 26 D1 57  // .&.g.&.W.&.g.&.W
    3DE0: 0A 8B C3 E8 79 11 E9 E1 04 26 8A 47 34 32 E4 05  // ....y....&.G42..
    3DF0: 80 00 99 26 89 47 1C 26 89 57 1E 8B C3 E8 FF FE  // ...&.G.&.W......
    3E00: E9 C7 04 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4  // ...SV...w5&.D.2.
    3E10: C1 E0 02 26 8B 37 26 8B 34 03 F0 26 8B 47 08 26  // ...&.7&.4..&.G.&
    3E20: 8B 5F 0A 26 89 04 26 89 5C 02 5E 5B C3 53 52 56  // ._.&..&.\.^[.SRV
    3E30: 8B D8 8C D0 8D 77 35 8E C0 26 8A 54 02 80 FA 40  // .....w5..&.T...@
    3E40: 73 21 26 8B 77 02 32 F6 C1 E2 02 26 8B 74 04 03  // s!&.w.2....&.t..
    3E50: F2 26 8B 57 08 26 8B 47 0A 26 89 14 26 89 44 02  // .&.W.&.G.&..&.D.
    3E60: E9 7F 00 80 FA 41 75 12 26 8B 47 08 26 8B 57 0A  // .....Au.&.G.&.W.
    3E70: 26 89 47 10 26 89 57 12 EB 68 80 FA 40 75 12 26  // &.G.&.W..h..@u.&
    3E80: 8B 47 08 26 8B 57 0A 26 89 47 0C 26 89 57 0E EB  // .G.&.W.&.G.&.W..
    3E90: 51 80 FA 42 75 0A 26 8B 47 08 26 89 47 22 EB 42  // Q..Bu.&.G.&.G".B
    3EA0: 80 FA 43 75 0A 26 8A 47 08 26 88 47 33 EB 33 80  // ..Cu.&.G.&.G3.3.
    3EB0: FA 46 75 12 26 8B 57 08 26 8B 47 0A 26 89 57 18  // .Fu.&.W.&.G.&.W.
    3EC0: 26 89 47 1A EB 1C 80 FA 47 75 0A 26 8B 47 08 26  // &.G.....Gu.&.G.&
    3ED0: 89 47 24 EB 0D 80 FA 48 75 08 26 8B 47 08 26 89  // .G$....Hu.&.G.&.
    3EE0: 47 20 5E 5A 5B C3 53 56 8B D8 8D 77 35 26 8A 44  // G ^Z[.SV...w5&.D
    3EF0: 02 32 E4 26 89 47 14 26 C7 47 16 00 00 5E 5B C3  // .2.&.G.&.G...^[.
    3F00: 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 04 32 E4  // SV..&.w.&.t...2.
    3F10: 26 89 47 14 26 C7 47 16 00 00 26 8B 5F 02 26 FF  // &.G.&.G...&._.&.
    3F20: 47 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74  // G.^[.SV..&.w.&.t
    3F30: 02 8B 34 26 89 77 14 26 C7 47 16 00 00 26 8B 5F  // ..4&.w.&.G...&._
    3F40: 02 26 83 47 02 02 5E 5B C3 53 56 8B D8 26 8B 77  // .&.G..^[.SV..&.w
    3F50: 02 26 8B 74 02 8B 04 8B 74 02 26 89 47 14 26 89  // .&.t....t.&.G.&.
    3F60: 77 16 26 8B 5F 02 26 83 47 02 04 5E 5B C3 53 52  // w.&._.&.G..^[.SR
    3F70: 56 8B D8 E8 70 FF 8B F3 26 8B 47 18 26 8B 57 1A  // V...p...&.G.&.W.
    3F80: D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16  // ........&.G.&.T.
    3F90: 8B C3 E8 2B 10 E9 4A FF 53 8B D8 26 8B 5F 02 26  // ...+..J.S..&._.&
    3FA0: FF 47 02 5B C3 53 8B D8 26 8B 5F 02 26 83 47 02  // .G.[.S..&._.&.G.
    3FB0: 02 5B C3 53 56 8B D8 E8 6B FF 8B F3 26 8B 57 20  // .[.SV...k...&.W 
    3FC0: 33 C0 26 01 57 14 26 11 44 16 8C D2 8E C2 26 8B  // 3.&.W.&.D.....&.
    3FD0: 47 2E 32 C0 80 E4 06 3D 00 02 75 07 32 E4 33 D2  // G.2....=..u.2.3.
    3FE0: 5E 5B C3 26 8B 47 2E 32 C0 80 E4 06 3D 00 04 74  // ^[.&.G.2....=..t
    3FF0: EB 26 80 7F 34 00 75 08 8B C3 E8 2F 0F 5E 5B C3  // .&..4.u..../.^[.
    4000: 26 8A 47 34 32 E4 26 89 47 1C 26 C7 47 1E 00 00  // &.G42.&.G.&.G...
    4010: 8B C3 E8 EA FC 5E 5B C3 53 8B D8 E8 E2 FE 26 8B  // .....^[.S.....&.
    4020: 47 14 C1 E0 02 26 8B 1F 26 8B 1F 03 D8 26 8B 07  // G....&..&....&..
    4030: 26 8B 57 02 5B C3 3C 40 31 40 47 40 96 40 4D 40  // &.W.[.<@1@G@.@M@
    4040: 65 40 7F 40 8A 40 90 40 53 51 56 8B D8 E8 B0 FE  // e@.@.@.@SQV.....
    4050: 8C D2 8E C2 26 83 7F 16 00 75 22 26 83 7F 14 40  // ....&....u"&...@
    4060: 73 1B 26 8B 77 02 26 8B 5F 14 C1 E3 02 26 8B 44  // s.&.w.&._....&.D
    4070: 04 03 D8 26 8B 07 26 8B 57 02 E9 7B 05 26 8B 77  // ...&..&.W..{.&.w
    4080: 14 26 8B 47 16 83 C6 C0 83 D0 FF 75 71 83 FE 08  // .&.G.......uq...
    4090: 77 6C 03 F6 2E FF A4 CE 3F 26 8B 47 10 26 8B 57  // wl......?&.G.&.W
    40A0: 12 E9 54 05 26 8B 47 0C 26 8B 57 0E E9 49 05 26  // ..T.&.G.&.W..I.&
    40B0: 8B 47 22 EB 4B 26 8A 4F 33 32 ED BB 01 00 33 D2  // .G".K&.O32....3.
    40C0: E3 06 D1 E3 D1 D2 E2 FA 8B C3 E9 2B 05 26 8A 4F  // ...........+.&.O
    40D0: 33 32 ED B8 01 00 33 D2 E3 06 D1 E0 D1 D2 E2 FA  // 32....3.........
    40E0: F7 D0 F7 D2 E9 11 05 26 8B 47 18 26 8B 57 1A E9  // .......&.G.&.W..
    40F0: 06 05 26 8B 47 24 EB 08 26 8B 47 20 EB 02 33 C0  // ..&.G$..&.G ..3.
    4100: 33 D2 E9 F3 04 53 56 8B D8 E8 F4 FD 8B F3 26 8B  // 3....SV.......&.
    4110: 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01  // G.&.W.........&.
    4120: 47 14 26 11 54 16 8B C3 E8 16 0E 5E 5B C3 33 C0  // G.&.T......^[.3.
    4130: 33 D2 C3 53 56 8B D8 E8 EB FD 26 8B 77 14 26 03  // 3..SV.....&.w.&.
    4140: 77 22 8B 04 8B 54 02 5E 5B C3 53 8B D8 26 C6 47  // w"...T.^[.S..&.G
    4150: 2B 04 E8 AB FD 26 8B 47 14 26 8B 57 16 5B C3 53  // +....&.G.&.W.[.S
    4160: 8B D8 26 C6 47 2B 01 E8 BB FD EB E9 53 8B D8 26  // ..&.G+......S..&
    4170: C6 47 2B 00 E8 D2 FD EB DC 53 8B D8 83 C3 35 26  // .G+......S....5&
    4180: 8A 5F 01 C0 EB 03 80 E3 07 32 FF 03 DB FF 97 E6  // ._.......2......
    4190: 98 5B C3 53 52 56 8B D8 26 8A 47 2C 32 E4 8B F0  // .[.SRV..&.G,2...
    41A0: 03 F0 8B C3 FF 94 02 99 26 89 47 08 26 89 57 0A  // ........&.G.&.W.
    41B0: 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 1A 99  // &.G-2...........
    41C0: 26 89 47 04 26 89 57 06 E9 17 FD 53 51 56 8B D8  // &.G.&.W....SQV..
    41D0: 26 8A 4F 2B 32 ED 8B F1 8A 8C 4A 99 E3 0A 26 D1  // &.O+2.....J...&.
    41E0: 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1  // o.&._...&.O+2...
    41F0: C1 E6 02 8B 8C 2A 99 8B B4 2C 99 26 21 4F 04 26  // .....*...,.&!O.&
    4200: 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 52 99 E3  // !w.&.O*2.....R..
    4210: 0A 26 D1 67 04 26 D1 57 06 E2 F6 26 8B 4F 08 26  // .&.g.&.W...&.O.&
    4220: 8B 77 0A 26 89 4F 14 26 89 77 16 E9 CA 03 53 51  // .w.&.O.&.w....SQ
    4230: 52 56 57 8B D8 8C D0 8E C0 26 8A 47 2B 32 E4 8B  // RVW......&.G+2..
    4240: F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 52 99 32 ED  // ....&.G*....R.2.
    4250: 8B 84 2A 99 8B 94 2C 99 E3 06 D1 E0 D1 D2 E2 FA  // ..*...,.........
    4260: F7 D0 F7 D2 26 21 47 14 26 21 57 16 26 8A 47 2A  // ....&!G.&!W.&.G*
    4270: 32 E4 8B F0 8A 8C 52 99 32 ED E3 0A 26 D1 6F 0A  // 2.....R.2...&.o.
    4280: 26 D1 5F 08 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B  // &._...&.G+......
    4290: 84 2A 99 8B 94 2C 99 26 21 47 08 26 21 57 0A 26  // .*...,.&!G.&!W.&
    42A0: 8A 47 2A 32 E4 8B F0 8A 8C 52 99 32 ED E3 0A 26  // .G*2.....R.2...&
    42B0: D1 67 08 26 D1 57 0A E2 F6 26 8B 47 14 26 8B 57  // .g.&.W...&.G.&.W
    42C0: 16 26 09 47 08 26 09 57 0A 5F 5E 5A 59 5B C3 53  // .&.G.&.W._^ZY[.S
    42D0: 51 56 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C 4A 99  // QV..&.O+2.....J.
    42E0: E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B  // ..&.o.&._...&.O+
    42F0: 32 ED 8B F1 C1 E6 02 8B 8C 2A 99 8B B4 2C 99 26  // 2........*...,.&
    4300: 21 4F 04 26 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A  // !O.&!w.&.O*2....
    4310: 8C 52 99 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26  // .R...&.o.&._...&
    4320: 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 2A 99 8B B4  // .O+2........*...
    4330: 2C 99 26 21 4F 08 26 21 77 0A E9 BB 02 51 52 57  // ,.&!O.&!w....QRW
    4340: 8B D8 8C D0 8E C0 26 80 7F 2B 00 74 1A 26 8A 47  // ......&..+.t.&.G
    4350: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 02 99 26 89 47  // ,2...........&.G
    4360: 08 26 89 57 0A EB 10 26 8A 47 2C 32 E4 8B F0 03  // .&.W...&.G,2....
    4370: F0 8B C3 FF 94 0E 99 26 8A 47 2D 32 E4 8B F0 03  // .......&.G-2....
    4380: F0 8B C3 FF 94 1A 99 26 89 47 04 26 89 57 06 8C  // .......&.G.&.W..
    4390: D2 8E C2 26 80 7F 2B 00 74 4A 26 8A 47 2B 32 E4  // ...&..+.tJ&.G+2.
    43A0: 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 52 99 32  // .....&.G*....R.2
    43B0: ED 8B 84 2A 99 8B 94 2C 99 E3 06 D1 E0 D1 D2 E2  // ...*...,........
    43C0: FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A 8B C3 E8  // .....&!G.&!W....
    43D0: F9 FD 26 8B 47 04 26 8B 57 06 26 09 47 08 26 09  // ..&.G.&.W.&.G.&.
    43E0: 57 0A EB 10 26 8B 57 04 26 8B 47 06 26 89 57 08  // W...&.W.&.G.&.W.
    43F0: 26 89 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // &.G.&.G,2.......
    4400: FF 94 F6 98 5F 5A 59 C3 53 51 52 56 57 8B D8 26  // ...._ZY.SQRVW..&
    4410: 8A 47 2A 32 E4 8B F0 8A 8C 52 99 32 ED E3 0A 26  // .G*2.....R.2...&
    4420: D1 67 04 26 D1 57 06 E2 F6 8C D0 8E C0 26 8A 47  // .g.&.W.......&.G
    4430: 2B 32 E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D  // +2......&.G*....
    4440: 52 99 32 ED 8B 84 2A 99 8B 94 2C 99 E3 06 D1 E0  // R.2...*...,.....
    4450: D1 D2 E2 FA F7 D0 F7 D2 26 09 47 04 26 09 57 06  // ........&.G.&.W.
    4460: 26 8B 47 04 26 8B 57 06 26 21 47 08 26 21 57 0A  // &.G.&.W.&!G.&!W.
    4470: E9 56 FE 55 8B EC 51 52 50 8B D8 26 8A 47 2C 32  // .V.U..QRP..&.G,2
    4480: E4 8B F0 03 F0 8B C3 FF 94 02 99 26 89 47 08 26  // ...........&.G.&
    4490: 89 57 0A 26 8A 47 2B 88 46 FA 8B C3 E8 DA FC 26  // .W.&.G+.F......&
    44A0: 89 47 04 26 89 57 06 26 8A 4F 2D 32 ED 8B F1 03  // .G.&.W.&.O-2....
    44B0: F1 8B C3 FF 94 1A 99 26 89 47 14 26 89 57 16 8B  // .......&.G.&.W..
    44C0: C3 E8 44 FF 8A 46 FA 32 E4 8B F0 8A 8C 4A 99 E3  // ..D..F.2.....J..
    44D0: 0A 26 D1 6F 16 26 D1 5F 14 E2 F6 26 8A 57 2B 32  // .&.o.&._...&.W+2
    44E0: F6 8B F2 C1 E6 02 8B 84 2A 99 8B 94 2C 99 26 21  // ........*...,.&!
    44F0: 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C  // G.&!W.&.G*2.....
    4500: 52 99 32 ED E3 0A 26 D1 67 14 26 D1 57 16 E2 F6  // R.2...&.g.&.W...
    4510: 26 8B 47 14 26 8B 57 16 26 09 47 08 26 09 57 0A  // &.G.&.W.&.G.&.W.
    4520: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 F6 98  // &.G,2...........
    4530: 8D 66 FC 5A 59 5D C3 51 8B D8 E8 56 FC 26 8A 4F  // .f.ZY].Q...V.&.O
    4540: 2B 32 ED 8B F1 8A 8C 4A 99 E3 0A 26 D1 6F 06 26  // +2.....J...&.o.&
    4550: D1 5F 04 E2 F6 8B C3 E8 AE FE 26 8A 4F 2C 32 ED  // ._........&.O,2.
    4560: 8B F1 03 F1 8B C3 FF 94 F6 98 59 C3 8B D8 E8 22  // ..........Y...."
    4570: FC 8B C3 E8 55 FC 26 8B 47 04 26 8B 77 06 26 09  // ....U.&.G.&.w.&.
    4580: 47 08 26 09 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0  // G.&.w.&.G,2.....
    4590: 8B C3 FF 94 F6 98 C3 53 56 8B D8 E8 F5 FB 8B C3  // .......SV.......
    45A0: E8 28 FC 26 8B 47 04 26 8B 77 06 26 31 47 08 26  // .(.&.G.&.w.&1G.&
    45B0: 31 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // 1w.&.G,2........
    45C0: 94 F6 98 5E 5B C3 53 51 56 8B D8 E8 C5 FB 8B C3  // ...^[.SQV.......
    45D0: E8 F8 FB 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57  // ...&.O...&.g.&.W
    45E0: 0A E2 F6 8B C3 E8 46 FC 26 8A 4F 2C 32 ED 8B F1  // ......F.&.O,2...
    45F0: 03 F1 8B C3 FF 94 F6 98 5E 59 5B C3 53 51 56 8B  // ........^Y[.SQV.
    4600: D8 E8 8F FB 8B C3 E8 C2 FB 26 8B 4F 04 E3 0A 26  // .........&.O...&
    4610: D1 6F 0A 26 D1 5F 08 E2 F6 EB C8 52 8B D8 E8 72  // .o.&._.....R...r
    4620: FB 8B C3 E8 A5 FB 8B F3 26 8B 47 04 26 8B 57 06  // ........&.G.&.W.
    4630: 26 01 47 08 26 11 54 0A 8B C3 E8 F1 FB 26 8A 47  // &.G.&.T......&.G
    4640: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 F6 98 5A C3 52  // ,2...........Z.R
    4650: 8B D8 E8 3E FB 8B C3 E8 71 FB 8B F3 26 8B 47 04  // ...>....q...&.G.
    4660: 26 8B 57 06 26 29 47 08 26 19 54 0A EB CA 51 52  // &.W.&)G.&.T...QR
    4670: 8B F0 E8 1E FB 8B C6 E8 55 FC 26 8B 44 08 26 8B  // ........U.&.D.&.
    4680: 54 0A 26 8B 5C 04 26 8B 4C 06 E8 B1 F2 26 89 44  // T.&.\.&.L....&.D
    4690: 0C 26 89 54 0E 5A 59 C3 52 8B D0 E8 F5 FA 8B C2  // .&.T.ZY.R.......
    46A0: E8 2C FC 8B C2 E8 5C 08 5A C3 51 52 57 8B F0 E8  // .,....\.Z.QRW...
    46B0: E1 FA 8B C6 E8 18 FC 26 8B 44 08 26 8B 54 0A 26  // .......&.D.&.T.&
    46C0: 8B 5C 04 26 8B 4C 06 E8 F0 F1 26 89 44 0C 26 89  // .\.&.L....&.D.&.
    46D0: 54 0E 8C D7 8E C7 26 8B 44 08 26 8B 54 0A 26 8B  // T.....&.D.&.T.&.
    46E0: 5C 04 26 8B 4C 06 E8 D1 F1 26 89 5C 10 26 89 4C  // \.&.L....&.\.&.L
    46F0: 12 E9 10 FD 52 8B D0 E8 99 FA 8B C2 E8 D0 FB 8B  // ....R...........
    4700: C2 E8 D3 07 5A C3 51 52 8B D8 E8 86 FA 8B C3 E8  // ....Z.QR........
    4710: BD FB 8C D1 8E C1 26 8B 47 08 26 8B 57 0A 26 3B  // ......&.G.&.W.&;
    4720: 57 06 75 0E 26 3B 47 04 75 08 26 C6 47 30 01 5A  // W.u.&;G.u.&.G0.Z
    4730: 59 C3 8B D0 26 8B 47 0A 26 3B 47 06 72 08 75 0A  // Y...&.G.&;G.r.u.
    4740: 26 3B 57 04 73 04 33 C0 EB 03 B8 02 00 26 88 47  // &;W.s.3......&.G
    4750: 30 5A 59 C3 51 52 57 8B D8 26 8A 47 2C 32 E4 8B  // 0ZY.QRW..&.G,2..
    4760: F0 03 F0 8B C3 FF 94 02 99 26 89 47 08 26 89 57  // .........&.G.&.W
    4770: 0A 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02  // .....&.G+2......
    4780: 8B F8 8A 8D 4A 99 32 ED 8B 84 2A 99 8B 94 2C 99  // ....J.2...*...,.
    4790: E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 08  // ............&!G.
    47A0: 26 21 57 0A E9 4D FC 55 8B EC 51 52 57 83 EC 06  // &!W..M.U..QRW...
    47B0: 8B D8 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A  // ..&.G+2.........
    47C0: 8D 4A 99 32 ED 8B 84 2A 99 89 46 F4 8B 84 2C 99  // .J.2...*..F...,.
    47D0: 89 46 F6 E3 08 D1 66 F4 D1 56 F6 E2 F8 8B 7E F4  // .F....f..V....~.
    47E0: 8B 46 F6 89 46 F8 26 8A 47 2C 32 E4 8B F0 03 F0  // .F..F.&.G,2.....
    47F0: 8B C3 FF 94 02 99 26 89 47 08 26 89 57 0A 8B C3  // ......&.G.&.W...
    4800: E8 47 F9 26 89 47 04 26 89 57 06 8B C7 F7 D0 8B  // .G.&.G.&.W......
    4810: 56 F6 F7 D2 26 23 47 08 26 23 57 0A 26 89 47 14  // V...&#G.&#W.&.G.
    4820: 26 89 57 16 26 21 7F 08 8B 46 F6 26 21 47 0A 8C  // &.W.&!...F.&!G..
    4830: D1 8D 77 35 8E C1 26 80 3C 19 73 12 26 8B 4F 04  // ..w5..&.<.s.&.O.
    4840: E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 EB 10 26 8B  // ..&.g.&.W.....&.
    4850: 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 21  // O...&.o.&._...&!
    4860: 7F 08 8B 46 F8 26 21 47 0A 26 8B 57 14 26 8B 47  // ...F.&!G.&.W.&.G
    4870: 16 26 09 57 08 26 09 47 0A 26 8A 47 2C 32 E4 8B  // .&.W.&.G.&.G,2..
    4880: F0 03 F0 8B C3 FF 94 F6 98 8D 66 FA 5F E9 A3 FC  // ..........f._...
    4890: 52 8B D8 E8 FD F8 8B C3 E8 34 FA 26 8B 47 08 26  // R........4.&.G.&
    48A0: 8B 57 0A 26 85 57 06 75 06 26 85 47 04 74 05 B8  // .W.&.W.u.&.G.t..
    48B0: 03 00 EB 03 B8 01 00 26 88 47 30 5A C3 53 51 52  // .......&.G0Z.SQR
    48C0: 56 8B D8 26 8A 4F 2D 32 ED 8B F1 03 F1 FF 94 1A  // V..&.O-2........
    48D0: 99 26 89 47 04 26 89 57 06 26 8A 47 2B 32 E4 8B  // .&.G.&.W.&.G+2..
    48E0: F0 8A 8C 4A 99 E3 0A 26 D1 6F 06 26 D1 5F 04 E2  // ...J...&.o.&._..
    48F0: F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 2A 99 8B 94  // .&.G+.......*...
    4900: 2C 99 26 21 47 04 26 21 57 06 E9 BD F9 52 8B D8  // ,.&!G.&!W....R..
    4910: E8 AA FF 26 8B 47 04 26 8B 57 06 26 89 47 18 26  // ...&.G.&.W.&.G.&
    4920: 89 57 1A 5A C3 51 52 8B D8 E8 91 FF 8C D0 8E C0  // .W.Z.QR.........
    4930: 26 8B 77 02 26 8B 74 02 81 3C 5A 5A 74 5B 26 8B  // &.w.&.t..<ZZt[&.
    4940: 77 02 26 8B 74 02 80 3C 63 75 E1 26 8B 77 02 26  // w.&.t..<cu.&.w.&
    4950: FF 44 02 8B C3 E8 21 F8 26 89 47 08 26 89 57 0A  // .D....!.&.G.&.W.
    4960: 8B C3 E8 FA F7 26 89 47 14 26 89 57 16 8C D1 8E  // .....&.G.&.W....
    4970: C1 26 8B 57 04 26 8B 47 06 26 3B 47 0A 75 AD 26  // .&.W.&.G.&;G.u.&
    4980: 3B 57 08 75 A7 26 8B 77 02 26 8B 04 26 03 47 14  // ;W.u.&.w.&..&.G.
    4990: 8B DE 26 89 47 02 5A 59 C3 26 8B 5F 02 26 83 47  // ..&.G.ZY.&._.&.G
    49A0: 02 02 5A 59 C3 52 57 8B D8 8C D0 8E C0 26 8B 77  // ..ZY.RW......&.w
    49B0: 02 26 8B 74 02 8A 54 01 84 D2 75 08 26 C7 47 22  // .&.t..T...u.&.G"
    49C0: 00 00 EB 2F 80 FA FF 75 14 26 8B 77 02 26 8B 3F  // .../...u.&.w.&.?
    49D0: 26 8B 34 26 2B 75 02 26 89 77 22 EB 16 26 8B 07  // &.4&+u.&.w"..&..
    49E0: E8 E3 02 8B F0 8A C2 32 E4 03 C0 03 F0 8B 04 26  // .......2.......&
    49F0: 89 47 22 26 8B 5F 02 26 83 47 02 02 5F 5A C3 8B  // .G"&._.&.G.._Z..
    4A00: D8 26 80 67 2F F9 26 8B 77 02 26 8B 74 02 8A 44  // .&.g/.&.w.&.t..D
    4A10: 01 26 88 47 34 26 8B 5F 02 26 83 47 02 03 C3 8B  // .&.G4&._.&.G....
    4A20: D8 26 8B 77 02 26 8B 74 02 8B 74 01 26 89 77 20  // .&.w.&.t..t.&.w 
    4A30: EB E3 53 8B D8 26 8A 47 2C 32 E4 24 03 26 80 67  // ..S..&.G,2.$.&.g
    4A40: 2F F9 C1 E0 09 26 09 47 2E E9 4F F5 8B D8 26 8B  // /....&.G..O...&.
    4A50: 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26  // w.&.t..D.2.&.G.&
    4A60: C7 47 06 00 00 8B C3 E8 40 04 26 8B 5F 02 26 83  // .G......@.&._.&.
    4A70: 47 02 02 C3 8B D8 26 8B 77 02 26 8B 74 02 8A 44  // G.....&.w.&.t..D
    4A80: 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8  // .2.&.G.&.G......
    4A90: 08 04 EB D6 53 56 8B D8 26 8B 77 02 26 8B 74 02  // ....SV..&.w.&.t.
    4AA0: 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B  // .D.2.&.G.&.G....
    4AB0: C3 E8 06 04 E9 86 F4 53 56 8B D8 26 8B 77 02 26  // .......SV..&.w.&
    4AC0: 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06  // .t..D.2.&.G.&.G.
    4AD0: 00 00 8B C3 E8 F0 03 E9 63 F4 53 56 8B D8 26 8B  // ........c.SV..&.
    4AE0: 77 02 8B DE 26 8B 5F 02 8B 5F 01 83 C3 03 26 01  // w...&._.._....&.
    4AF0: 5C 02 5E 5B C3 51 52 8B D8 26 8B 77 02 26 83 44  // \.^[.QR..&.w.&.D
    4B00: 02 02 26 8B 07 E8 A0 01 8B C8 26 8B 77 28 8A 44  // ..&.......&.w(.D
    4B10: 01 32 E4 03 C0 8B F1 03 F0 83 3C 00 74 4F 26 8B  // .2........<.tO&.
    4B20: 77 28 8A 54 01 32 F6 8B C3 E8 B0 01 26 88 47 31  // w(.T.2......&.G1
    4B30: 26 8B 77 02 26 8B 34 8B 44 04 C1 E8 08 32 E4 24  // &.w.&.4.D....2.$
    4B40: 7F C1 E8 02 32 E4 24 1F 26 80 67 2F 07 C1 E0 0B  // ....2.$.&.g/....
    4B50: 26 09 47 2E 26 8B 37 26 8B 47 2E C1 E8 0B C1 E0  // &.G.&.7&.G......
    4B60: 02 26 01 04 26 C6 47 32 01 26 89 4F 28 5A 59 C3  // .&..&.G2.&.O(ZY.
    4B70: 53 8B D8 26 C6 47 32 82 5B C3 57 8B D8 8C D6 8E  // S..&.G2.[.W.....
    4B80: C6 26 80 7F 2C 05 74 0A 26 8A 47 2C 26 3A 47 30  // .&..,.t.&.G,&:G0
    4B90: 75 1E 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B  // u.&.w.&.t.&...&.
    4BA0: 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F C3  // =.t...&._.&.w._.
    4BB0: 26 8B 5F 02 26 83 47 02 03 5F C3 53 56 57 8B D8  // &._.&.G.._.SVW..
    4BC0: 8C D6 8E C6 26 80 7F 30 01 74 0A 26 8A 47 30 26  // ....&..0.t.&.G0&
    4BD0: 3A 47 2C 75 20 26 8B 77 02 26 8B 74 02 26 8B 7F  // :G,u &.w.&.t.&..
    4BE0: 02 26 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77  // .&.=.t...&._.&.w
    4BF0: 02 5F 5E 5B C3 26 8B 5F 02 26 83 47 02 03 EB F1  // ._^[.&._.&.G....
    4C00: 53 56 57 8B D8 8C D0 8E C0 26 80 7F 30 01 74 E5  // SVW......&..0.t.
    4C10: EB C3 55 8B EC 53 51 52 57 8B D8 26 8B 77 02 26  // ..U..SQRW..&.w.&
    4C20: 8B 74 02 8A 04 26 C6 47 3D 00 8C D1 8E C1 26 80  // .t...&.G=.....&.
    4C30: 7F 3D 08 73 20 26 8B 77 02 26 8A 57 3D 32 F6 26  // .=.s &.w.&.W=2.&
    4C40: 8B 7C 02 03 FA 8B F3 03 F2 8A 15 26 88 54 35 26  // .|.........&.T5&
    4C50: FE 47 3D EB D5 26 8B 7F 02 8A D0 32 F6 8B F2 C1  // .G=..&.....2....
    4C60: E6 02 8A 94 77 99 26 01 55 02 26 8B 7F 28 8A 55  // ....w.&.U.&..(.U
    4C70: 01 80 E2 07 26 88 57 2D 26 8B 7F 28 8A 55 01 C0  // ....&.W-&..(.U..
    4C80: EA 03 80 E2 07 26 88 57 2B 26 8B 7F 28 8A 55 01  // .....&.W+&..(.U.
    4C90: C0 EA 06 26 88 57 2A 8A 94 76 99 26 88 57 2C 8D  // ...&.W*..v.&.W,.
    4CA0: 66 F8 5F 5A 59 5B 5D C3 53 56 8B D8 26 8B 77 02  // f._ZY[].SV..&.w.
    4CB0: 8B C6 8B 74 48 03 F0 8B D8 8B 74 1E 8B C6 03 C3  // ...tH.....t.....
    4CC0: 83 C0 04 5E 5B C3 53 56 8B D8 26 8B 77 02 8B C6  // ...^[.SV..&.w...
    4CD0: 8B 74 48 03 F0 8B D8 8B 74 20 EB E0 8A C2 C3 16  // .tH.....t ......
    4CE0: 07 55 8B EC 53 51 56 57 83 EC 40 8B F8 89 46 B8  // .U..SQVW..@...F.
    4CF0: E8 D3 FF 8B D8 89 46 E0 26 8B 45 02 8B 5F 2E 03  // ......F.&.E.._..
    4D00: D8 89 5E DE 83 46 DE 04 8B C7 E8 9B FF 89 46 E0  // ..^..F........F.
    4D10: 32 F6 8D 46 B8 E8 C4 FF 8A D0 32 F6 03 D2 8B 5E  // 2..F......2....^
    4D20: E0 03 DA 83 3F 00 0F 84 65 01 88 46 E9 80 66 E7  // ....?...e..F..f.
    4D30: F9 C6 46 EC 00 C7 46 D8 00 00 66 C7 46 D0 00 00  // ..F...F...f.F...
    4D40: 00 00 C7 46 F6 00 00 C6 46 EA 01 EB 06 3C 01 0F  // ...F....F....<..
    4D50: 85 8C 00 8A 56 E9 8A C2 32 E4 03 C0 8B 5E E0 03  // ....V...2....^..
    4D60: D8 83 3F 00 74 75 26 8B 45 02 8B 1F 03 D8 8B 47  // ..?.tu&.E......G
    4D70: 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE 83 F9 00  // .2......2.......
    4D80: 74 07 D1 E9 33 C0 50 E2 FD 8B C4 8B D8 89 46 BA  // t...3.P.......F.
    4D90: 85 C0 74 41 83 C0 08 26 89 47 04 8A C2 32 E4 03  // ..tA...&.G...2..
    4DA0: C0 8B 5E E0 03 D8 26 8B 45 02 03 07 8B 5E BA 26  // ..^...&.E....^.&
    4DB0: 89 07 8B 5E BA 26 8B 07 83 C0 06 26 89 47 02 8B  // ...^.&.....&.G..
    4DC0: 5E BA 8B 76 F6 26 89 77 06 8B 5E BA 89 5E F6 C6  // ^..v.&.w..^..^..
    4DD0: 46 EA 00 EB 0A C6 46 EA 87 EB 04 C6 46 EA 83 8A  // F.....F.....F...
    4DE0: 46 EA 32 E4 83 F8 10 0F 8F 99 00 88 66 EA 8A 46  // F.2.........f..F
    4DF0: EA 32 E4 85 C0 0F 8F 83 00 8C D0 8B 5E BA 8E C0  // .2..........^...
    4E00: 26 8B 5F 02 89 5E E0 8B 5E BA 26 8B 5F 02 80 3F  // &._..^..^.&._..?
    4E10: 5B 75 4A C6 46 EA 10 8B 5E BA 26 8B 5F 06 89 5E  // [uJ.F...^.&._..^
    4E20: F6 8B 5E BA 26 8B 1F 8B 47 04 32 E4 8B C8 83 C1  // ..^.&...G.2.....
    4E30: 09 32 ED 80 E1 FE 03 E1 8B 5E F6 89 5E BA 85 DB  // .2.......^..^...
    4E40: 74 AC 26 8B 1F 8B 47 04 C1 E8 08 32 E4 24 7F C1  // t.&...G....2.$..
    4E50: E8 02 C1 E0 02 8B 5E B8 26 29 07 EB 91 8D 46 B8  // ......^.&)....F.
    4E60: E8 AF FD 8A D0 8D 46 B8 E8 2E 00 8A DA 32 FF C1  // ......F......2..
    4E70: E3 02 8D 46 B8 FF 97 74 99 E9 72 FF 83 7E F6 00  // ...F...t..r..~..
    4E80: 0F 85 C9 FE 80 7E EA 10 74 05 8A 46 EA EB 02 32  // .....~..t..F...2
    4E90: C0 8D 66 F8 5F 5E E9 0B FE C3 53 51 8B D8 26 8A  // ..f._^....SQ..&.
    4EA0: 4F 04 32 ED E8 E5 E7 59 5B C3 53 51 8B D8 26 8A  // O.2....Y[.SQ..&.
    4EB0: 4F 04 32 ED E8 E0 E7 59 5B C3 53 8B D8 26 8A 47  // O.2....Y[.S..&.G
    4EC0: 04 32 E4 E6 80 5B C3 53 51 8B D8 26 8A 4F 04 32  // .2...[.SQ..&.O.2
    4ED0: ED E8 34 E1 59 5B C3 53 8B D8 66 50 66 52 66 51  // ..4.Y[.S..fPfRfQ
    4EE0: 66 26 8B 47 08 66 26 8B 57 10 66 26 8B 4F 04 66  // f&.G.f&.W.f&.O.f
    4EF0: F7 F1 66 26 89 47 0C 66 26 89 57 10 66 59 66 5A  // ..f&.G.f&.W.fYfZ
    4F00: 66 58 5B C3 53 8B D8 66 50 66 52 66 51 66 26 8B  // fX[.S..fPfRfQf&.
    4F10: 47 08 66 26 8B 4F 04 66 F7 E1 66 26 89 47 0C 66  // G.f&.O.f..f&.G.f
    4F20: 26 89 57 10 66 59 66 5A 66 58 5B C3 53 57 8B D8  // &.W.fYfZfX[.SW..
    4F30: 26 8B 5F 14 E8 0C EB 8B D0 66 C1 E8 10 92 5F 5B  // &._......f...._[
    4F40: C3 53 57 8B D8 26 8B 47 14 26 8B 57 16 8B D8 87  // .SW..&.G.&.W....
    4F50: D3 66 C1 E3 10 8B DA C1 E3 02 E8 0A EB EB D8 53  // .f.............S
    4F60: 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0  // RW..&.G.&.W..f..
    4F70: 10 8B C2 26 8B 5F 14 E8 2E EA 5F 5A 5B C3 53 52  // ...&._...._Z[.SR
    4F80: 8B D8 26 8B 47 1C 26 8B 57 1E 92 66 C1 E0 10 8B  // ..&.G.&.W..f....
    4F90: C2 26 8B 5F 26 8B 5F 01 E8 0D EA 5A 5B C3 53 52  // .&._&._....Z[.SR
    4FA0: 56 8B F0 26 8B 5C 26 8B 5F 01 E8 96 EA 8B D0 66  // V..&.\&._......f
    4FB0: C1 E8 10 92 26 89 44 1C 26 89 54 1E 5E 5A 5B C3  // ....&.D.&.T.^Z[.
    4FC0: 53 51 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66  // SQRW..&.G.&.W..f
    4FD0: C1 E0 10 8B C2 8B C8 26 8B 47 14 26 8B 57 16 8B  // .......&.G.&.W..
    4FE0: D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 8B C1 E8 EA  // ...f............
    4FF0: E9 5F 5A 59 5B C3 8B D0 66 C1 E8 10 92 C3 1E 06  // ._ZY[...f.......
    5000: 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F  // fPfQfRfSfUfVfW..
    5010: 0A C0 75 06 E8 07 01 E9 A8 00 3C 01 75 06 E8 37  // ..u.......<.u..7
    5020: 01 E9 9E 00 3C 02 75 06 E8 5F 02 E9 94 00 3C 03  // ....<.u.._....<.
    5030: 75 0B E8 91 03 8B EC 89 5E 0C E9 85 00 3C 04 75  // u.......^....<.u
    5040: 02 EB 7D 3C 05 75 0A E8 0E 04 8B EC 89 56 10 EB  // ..}<.u.......V..
    5050: 71 3C 06 75 10 E8 8C 03 8B EC 89 5E 0C 89 4E 14  // q<.u.......^..N.
    5060: 89 56 10 EB 5D 3C 07 75 02 EB 55 3C 08 75 0A E8  // .V..]<.u..U<.u..
    5070: D0 03 8B EC 88 7E 0D EB 49 3C 09 75 02 EB 41 3C  // .....~..I<.u..A<
    5080: 0A 75 10 E8 65 04 8B EC 89 4E 14 89 7E 00 8C 46  // .u..e....N..~..F
    5090: 1C EB 2F 3C 0B 75 02 EB 27 3C 10 75 0A E8 5A 04  // ../<.u..'<.u..Z.
    50A0: 8B EC 89 5E 0C EB 1B 3C 11 75 02 EB 13 3C 15 75  // ...^...<.u...<.u
    50B0: 0F E8 80 04 8B EC 89 5E 0C EB 07 B8 4F 01 EB 02  // .......^....O...
    50C0: 32 C0 8B EC 89 46 18 66 5F 66 5E 66 5D 66 5B 66  // 2....F.f_f^f]f[f
    50D0: 5A 66 59 66 58 07 1F C3 50 1E 2E 8E 1E 82 1B 8C  // ZfYfX...P.......
    50E0: D8 A3 40 60 A3 50 60 A3 62 60 2E 8E 1E 7A 1B A3  // ..@`.P`.b`...z..
    50F0: AA 04 1F 58 CB 00 30 31 2E 30 30 00 56 45 53 41  // ...X..01.00.VESA
    5100: 00 03 D0 01 00 00 01 00 00 00 00 00 00 00 00 03  // ................
    5110: 0A 14 F0 00 00 00 83 00 00 00 8E 50 00 00 B9 3F  // ...........P...?
    5120: 00 8B DF 83 C7 04 FC 66 33 C0 F3 66 AB 8B FB BE  // .......f3..f....
    5130: 94 50 B9 22 00 F3 A4 06 1F 8C 4F 08 8C 47 10 8C  // .P."......O..G..
    5140: 4F 18 8C 4F 1C 8C 4F 20 83 C7 22 89 7F 0E 0E 1F  // O..O..O ..".....
    5150: E8 90 DD B0 4F 32 E4 C3 56 51 57 B9 10 00 66 33  // ....O2..VQW...f3
    5160: C0 F3 66 AB 5F 59 8C DB 06 1F C7 05 BB 00 C6 45  // ..f._Y.........E
    5170: 02 07 C7 45 04 40 00 C7 45 06 40 00 C6 45 1B 06  // ...E.@..E.@..E..
    5180: C6 45 18 01 C6 45 1A 01 C6 45 1E 01 66 C7 45 3E  // .E...E...E..f.E>
    5190: 00 84 D7 17 8E DB E8 79 D6 66 0B C0 0F 84 E1 00  // .......y.f......
    51A0: 06 1F 66 89 45 28 8C C8 66 C1 E0 10 B8 4D 54 66  // ..f.E(..f....MTf
    51B0: 89 45 0C 81 F9 FF 81 0F 84 C2 00 80 E5 03 B2 01  // .E..............
    51C0: 53 8E DB BE 80 4C E8 3C DB 5B 06 1F 0F 84 B1 00  // S....L.<.[......
    51D0: 53 E8 B8 DD 66 89 45 12 C7 45 16 08 10 8D 5C 0C  // S...f.E..E....\.
    51E0: E8 8E E8 66 89 45 1F 66 89 45 36 8D 5C 10 E8 80  // ...f.E.f.E6.\...
    51F0: E8 66 89 45 23 66 89 45 3A 8D 5C 08 E8 72 E8 0A  // .f.E#f.E:.\..r..
    5200: C0 75 03 5B EB 7B E8 83 DD 66 C1 E8 10 3D 58 02  // .u.[.{...f...=X.
    5210: 74 0D 3D 5E 01 74 08 77 0A C6 45 17 08 EB 04 C6  // t.=^.t.w..E.....
    5220: 45 17 0E 2E A1 7C 1B 89 45 08 8D 5C 04 E8 41 E8  // E....|..E..\..A.
    5230: 66 8B C8 66 C1 E9 10 D3 E0 89 45 10 89 45 32 B0  // f..f......E..E2.
    5240: 08 D2 E0 88 45 19 8D 5C 14 E8 25 E8 5B 3D 00 03  // ....E..\..%.[=..
    5250: 77 2F 53 8B D8 B8 00 03 33 D2 F7 F3 5B FE C8 88  // w/S.....3...[...
    5260: 45 1D 88 45 35 88 45 34 8E DB 57 53 BE 80 4C E8  // E..E5.E4..WS..L.
    5270: 09 D6 5B 5F 0B C9 75 05 06 1F 83 25 FE 32 E4 EB  // ..[_..u....%.2..
    5280: 02 B4 03 B0 4F 8E DB 5E C3 00 81 FB FF 81 74 68  // ....O..^......th
    5290: 0A FF 75 04 8B C3 EB 21 F6 C7 08 75 61 8B CB B2  // ..u....!...ua...
    52A0: 01 BE 20 4C E8 5E DA 74 55 E8 BF DC 0A C0 75 0E  // .. L.^.tU.....u.
    52B0: 66 C1 E8 10 80 E7 80 0A C7 E8 D5 02 EB 3A E8 2E  // f............:..
    52C0: D8 74 06 E8 BD D6 E8 A9 D1 BE 20 4C E8 80 D5 74  // .t........ L...t
    52D0: 2D E8 A5 00 E8 2C 00 66 BB 20 4C 00 4C E8 82 DC  // -....,.f. L.L...
    52E0: BE 00 4C E8 85 DC 66 C1 E8 10 8B D8 32 C0 F6 C7  // ..L...f.....2...
    52F0: 80 74 02 B0 40 E8 B0 D5 B0 4F 32 E4 EB 04 B0 4F  // .t..@....O2....O
    5300: B4 03 C3 56 06 33 C0 8E C0 BE 20 4C E8 7D DC 8B  // ...V.3.... L.}..
    5310: C8 66 C1 E8 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1  // .f........&..J..
    5320: EA 04 FE CA 26 88 16 84 04 26 C6 06 51 04 00 26  // ....&....&..Q..&
    5330: C6 06 50 04 00 26 C6 06 49 04 62 26 C7 06 4C 04  // ..P..&..I.b&..L.
    5340: 00 A0 26 C6 06 85 04 10 26 C7 06 0C 01 19 6A 8C  // ..&.....&.....j.
    5350: C8 26 A3 0E 01 07 5E C3 01 0F 00 0A 00 00 00 00  // .&....^.........
    5360: 00 40 05 0F FF 00 01 02 03 04 05 06 07 08 09 0A  // .@..............
    5370: 0B 0C 0D 0E 0F 01 00 0F 00 FC BA C4 03 B8 00 01  // ................
    5380: EF B9 04 00 B4 01 BE F0 52 AC 86 E0 EF 8A E0 FE  // ........R.......
    5390: C4 E2 F6 B8 00 03 EF B9 09 00 BA CE 03 32 E4 BE  // .............2..
    53A0: F4 52 8A C4 EE AC 42 EE 4A FE C4 E2 F5 BA DA 03  // .R....B.J.......
    53B0: EC B9 14 00 BA C0 03 32 E4 BE FD 52 8A C4 EE AC  // .......2...R....
    53C0: EE FE C4 E2 F7 C3 BE 00 4C E8 9F DB 66 C1 E8 10  // ........L...f...
    53D0: 8B D8 E8 6F DB 75 05 E8 5B DB 75 04 B8 4F 00 C3  // ...o.u..[.u..O..
    53E0: B8 4F 03 C3 E8 5D DB 74 53 BE 00 4C 80 FB 00 74  // .O...].tS..L...t
    53F0: 18 80 FB 01 75 05 E8 9B DB EB 1D 80 FB 02 75 10  // ....u.........u.
    5400: 8B C1 E8 4E DB D3 E8 8B C8 E8 43 D6 74 2E EB 08  // ...N......C.t...
    5410: 80 FB 03 75 24 E8 F2 DA E8 38 DB 8B D8 D3 E3 50  // ...u$....8.....P
    5420: 33 C0 BA 00 03 3B DA 77 05 BA FF FF EB 04 F7 F3  // 3....;.w........
    5430: 8B D0 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03  // ..X...O..2...O..
    5440: C3 00 0A DB 75 07 8A EF E8 0C D7 EB 05 E8 F1 D6  // ....u...........
    5450: 8A F8 B0 4F 32 E4 C3 00 E8 E9 DA 74 2C BE 00 4C  // ...O2......t,..L
    5460: E8 08 DB 66 C1 E8 10 F6 C4 40 75 1D 0A FF 75 05  // ...f.....@u...u.
    5470: E8 1E 00 EB 0F 80 FF 01 75 14 BB 13 00 E8 BF E5  // ........u.......
    5480: D1 E8 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0  // .....O2...O...2.
    5490: C3 52 53 66 50 81 E2 FF 02 D1 E2 8B C2 40 66 C1  // .RSfP........@f.
    54A0: E0 10 8B C2 BB 13 00 E8 F0 E4 BB 12 00 E8 EA E4  // ................
    54B0: 66 58 5B 5A C3 9C 1E 06 66 50 66 51 66 52 66 53  // fX[Z....fPfQfRfS
    54C0: 66 55 66 56 66 57 0E 1F E8 08 E6 E8 8A FF E8 27  // fUfVfW.........'
    54D0: E6 8B EC 89 56 10 89 46 18 66 5F 66 5E 66 5D 66  // ....V..F.f_f^f]f
    54E0: 5B 66 5A 66 59 66 58 07 1F 9D CB 0E 07 BF 1C 98  // [fZfYfX.........
    54F0: 2E 8B 0E 1A 98 B8 4F 00 C3 00 0A DB 75 06 B7 04  // ......O.....u...
    5500: B3 10 EB 26 80 FB 01 75 14 E8 E3 D5 75 21 53 B1  // ...&...u....u!S.
    5510: 01 0A FF 74 02 B1 00 E8 FD D4 5B EB 0D 80 FB 02  // ...t......[.....
    5520: 75 0D E8 10 D6 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8  // u..........O2...
    5530: 4F 03 C3 00 80 E3 01 0A DB 75 05 BB 02 01 EB 0E  // O........u......
    5540: E8 AC D5 75 0E 33 C0 53 E8 33 C9 5B 74 05 B0 4F  // ...u.3.S.3.[t..O
    5550: 32 E4 C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD 42 C3  // 2...O......r..B.
    5560: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
    5570: 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 3A 55  // ..P.......X...:U
    5580: 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F  // f_f^f]f[fZfYfX..
    5590: C3 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 3A  // ...P.......X...:
    55A0: 55 C3 74 55 84 8E 9D 8E BA 8E 67 56 BD 85 EF 85  // U.tU......gV....
    55B0: 62 86 E5 86 73 88 77 88 80 8B 51 8C D4 8C 3B 8D  // b...s.w...Q...;.
    55C0: D6 8E 38 8F E1 91 80 58 28 96 28 55 28 55 28 55  // ..8....X(.(U(U(U
    55D0: 28 55 28 55 28 55 F8 96 FB 7A 4F 7C 2E 8E 1E 7A  // (U(U(U...zO|...z
    55E0: 1B 80 26 87 04 F3 50 8A E0 80 E4 7F E8 C4 01 3B  // ..&...P........;
    55F0: D3 75 02 58 C3 BA CC 03 EC B2 B4 B1 30 26 F6 47  // .u.X........0&.G
    5600: 09 01 74 0C B2 D4 B1 20 A8 01 75 49 B5 09 EB 06  // ..t.... ..uI....
    5610: A8 01 74 41 B5 0B 53 E8 6A 41 0A FF 5B 75 0B 80  // ..tA..S.jA..[u..
    5620: 26 88 04 F0 08 2E 88 04 EB 2B 58 80 0E 87 04 08  // &........+X.....
    5630: 80 26 10 04 CF 08 0E 10 04 89 16 63 04 C7 06 85  // .&.........c....
    5640: 04 08 00 C6 06 84 04 18 C7 06 0C 01 06 62 8C 0E  // .............b..
    5650: 0E 01 CD 42 C3 80 26 10 04 CF 08 0E 10 04 58 53  // ...B..&.......XS
    5660: 50 0E 1F 33 C9 8A C8 E8 85 D4 74 06 E8 14 D3 E8  // P..3......t.....
    5670: 00 CE B2 08 BE 40 4C E8 8B D6 BE 40 4C E8 CF D1  // .....@L....@L...
    5680: 58 5B 0F 84 6E FF 2E 8E 1E 7A 1B 0E 07 E8 13 29  // X[..n....z.....)
    5690: 0E 1F 53 66 BB 40 4C 00 4C E8 C6 D8 BE 00 4C B0  // ..Sf.@L.L.....L.
    56A0: 20 E8 04 D2 5B 2E 8E 1E 7A 1B 0E 07 E8 1C 2E E8  //  ...[...z.......
    56B0: 24 00 E8 28 3D E8 D1 01 E8 8E 01 E8 AE 3E 0E 1F  // $..(=........>..
    56C0: BE 00 4C B0 10 E8 E0 D1 E8 F7 2D E8 EF 2D C3 8B  // ..L.......-..-..
    56D0: EC C6 46 1B 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8  // ..F..../........
    56E0: 52 00 E8 5C 0A C3 53 83 C3 0A 8B 16 63 04 B9 19  // R..\..S.....c...
    56F0: 00 B8 11 30 EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7  // ...0.2.&.'.C....
    5700: 5B 80 C2 06 32 C0 EE C3 53 BA C4 03 83 C3 05 B9  // [...2...S.......
    5710: 04 00 B0 01 26 8A 27 3C 01 75 03 80 CC 20 EF 43  // ....&.'<.u... .C
    5720: FE C0 E2 F0 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8  // ....[&.G........
    5730: 00 03 EF C3 8B F3 83 C6 23 BA DA 03 26 F6 47 09  // ........#...&.G.
    5740: 01 75 02 B2 BA F6 06 89 04 08 74 1D 83 C6 10 EC  // .u........t.....
    5750: B9 04 00 B4 10 B2 C0 80 FC 11 74 07 8A C4 EE 26  // ..........t....&
    5760: 8A 04 EE 46 FE C4 E2 EF C3 53 EC 8B DE B9 14 00  // ...F.....S......
    5770: 32 E4 B2 C0 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4  // 2........&...C..
    5780: 8A C4 EE 32 C0 EE 1E 06 E8 49 2D 0B ED 74 09 1F  // ...2.....I-..t..
    5790: 1E B9 10 00 F3 A4 46 A4 07 1F 5B C3 53 83 C3 37  // ......F...[.S..7
    57A0: B9 09 00 32 C0 BA CE 03 26 8A 27 EF 43 FE C0 E2  // ...2....&.'.C...
    57B0: F7 5B C3 BB 3E 5A 0E 07 8B D3 0A E4 7D 01 C3 E8  // .[..>Z......}...
    57C0: 01 00 C3 33 F6 80 FC 03 7F 3C 4A F6 06 89 04 10  // ...3.....<J.....
    57D0: 75 20 A0 88 04 24 0F 3C 02 7E 24 3C 08 74 20 3C  // u ...$.<.~$<.t <
    57E0: 06 74 1C 3C 07 74 18 B0 40 F6 E4 03 D8 81 C3 00  // .t.<.t..@.......
    57F0: 04 C3 B0 40 D0 EC F6 E4 03 D8 81 C3 80 04 C3 B0  // ...@............
    5800: 40 F6 E4 03 D8 C3 80 FC 07 75 11 F6 06 89 04 10  // @........u......
    5810: 75 05 81 C3 00 01 C3 81 C3 00 05 C3 BF C0 57 BE  // u.............W.
    5820: E1 57 33 C9 E8 4E 00 C3 04 80 00 05 80 00 06 C0  // .W3..N..........
    5830: 00 0D 80 02 0E C0 02 0F 80 03 10 C0 03 11 40 05  // ..............@.
    5840: 12 80 05 13 C0 05 62 40 01 53 8A 1E 49 04 80 FB  // ......b@.S..I...
    5850: 07 7F 10 32 FF D1 E3 2E 8B 87 FD 57 A2 65 04 88  // ...2.......W.e..
    5860: 26 66 04 5B C3 2C 30 28 30 2D 30 29 30 2A 30 2E  // &f.[.,0(0-0)0*0.
    5870: 30 1E 3F 29 30 2E 38 25 75 07 2E 03 5D 01 33 F6  // 0.?)0.8%u...].3.
    5880: C3 83 C7 03 3B FE 75 ED C3 1E 06 2E 8E 1E 7A 1B  // ....;.u.......z.
    5890: F6 06 87 04 80 75 49 83 3E 4C 04 00 74 42 A0 49  // .....uI.>L..tB.I
    58A0: 04 B9 00 20 2E 8B 3E 80 1B 26 F6 47 33 01 75 0E  // ... ..>..&.G3.u.
    58B0: 26 F6 47 09 01 75 1B 2E 8B 3E 7E 1B EB 14 3C 06  // &.G..u...>~...<.
    58C0: 7E 0B 2E 8B 3E 7C 1B 26 8A 67 37 B5 40 66 33 C0  // ~...>|.&.g7.@f3.
    58D0: EB 06 66 B8 20 07 20 07 8E C7 66 33 FF F3 66 AB  // ..f. . ...f3..f.
    58E0: 80 26 87 04 7F 07 1F C3 2E 8E 1E 7A 1B 80 FB 10  // .&.........z....
    58F0: 75 03 E9 7A 01 80 FB 20 75 03 E9 9B 01 80 FB 32  // u..z... u......2
    5900: 75 1F BA CC 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9  // u......u........
    5910: F3 00 FE C8 0F 85 F3 00 EC 24 FD B2 C2 EE E9 E4  // .........$......
    5920: 00 80 FB 35 75 28 3C 80 75 08 80 0E 89 04 40 E9  // ...5u(<.u.....@.
    5930: D3 00 F6 06 89 04 40 0F 84 D0 00 0A C0 0F 84 CA  // ......@.........
    5940: 00 FE C8 75 06 E8 98 07 E9 BA 00 E9 BD 00 80 FB  // ...u............
    5950: 30 74 03 E9 96 00 50 E8 2A 3E 8A EF BA CC 03 EC  // 0t....P.*>......
    5960: 8A C8 58 0A C0 75 30 B7 08 F6 C1 01 75 12 0A ED  // ..X..u0.....u...
    5970: 75 0B A0 10 04 24 30 3C 30 75 10 B7 02 E9 8B 00  // u....$0<0u......
    5980: A0 10 04 24 30 3C 30 75 02 B7 02 80 26 89 04 6F  // ...$0<0u....&..o
    5990: 80 0E 89 04 80 EB 36 3C 01 75 41 80 26 89 04 6F  // ......6<.uA.&..o
    59A0: B7 09 F6 C1 01 75 15 B7 0B A0 10 04 24 30 3C 30  // .....u......$0<0
    59B0: 74 1B B7 09 0A ED 74 15 B7 05 EB 11 A0 10 04 24  // t.....t........$
    59C0: 30 3C 30 75 08 B7 0B 0A ED 74 02 B7 03 8A 1E 88  // 0<0u.....t......
    59D0: 04 80 E3 F0 0A DF 88 1E 88 04 EB 29 3C 02 75 2B  // ...........)<.u+
    59E0: 80 26 89 04 6F 80 0E 89 04 10 EB B4 80 FB 31 75  // .&..o.........1u
    59F0: 1B 0A C0 74 0B 3C 01 75 0C 80 0E 89 04 08 EB 05  // ...t.<.u........
    5A00: 80 26 89 04 F7 8B EC C6 46 1A 12 C3 80 FB 33 75  // .&......F.....3u
    5A10: 16 3C 00 74 0B 3C 01 75 EC 80 26 89 04 FD EB E5  // .<.t.<.u..&.....
    5A20: 80 0E 89 04 02 EB DE 80 FB 34 75 17 3C 00 75 07  // .........4u.<.u.
    5A30: 80 26 87 04 FE EB CE 3C 01 75 07 80 0E 87 04 01  // .&.....<.u......
    5A40: EB C3 C3 80 FB 36 75 26 BB 20 FF 3C 01 74 09 BB  // .....6u&. .<.t..
    5A50: 00 DF 3C 00 74 02 EB AD E8 02 00 EB A8 9C FA BA  // ..<.t...........
    5A60: C4 03 B0 01 EE 42 EC 22 C7 0A C3 EE 9D C3 C3 B3  // .....B."........
    5A70: 03 B7 00 BA CC 03 EC A8 01 75 02 B7 01 A0 88 04  // .........u......
    5A80: 8A E0 B1 04 D2 EC 25 0F 0F 8B C8 8B EC 89 5E 0E  // ......%.......^.
    5A90: 89 4E 16 C6 46 1A 12 C3 9C FA C7 06 14 00 E8 7F  // .N..F...........
    5AA0: 8C 0E 16 00 9D C3 28 18 08 00 08 09 03 00 02 63  // ......(........c
    5AB0: 2D 27 28 90 2B A0 BF 1F 00 C7 06 07 00 00 00 00  // -'(.+...........
    5AC0: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 06  // ................
    5AD0: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  // ................
    5AE0: 00 00 10 0E 00 FF 50 18 08 00 10 01 03 00 02 63  // ......P........c
    5AF0: 5F 4F 50 82 55 81 BF 1F 00 C7 06 07 00 00 00 00  // _OP.U...........
    5B00: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 06  // ...(............
    5B10: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  // ................
    5B20: 00 00 10 0E 00 FF 28 18 08 00 40 09 03 00 02 63  // ......(...@....c
    5B30: 2D 27 28 90 2B 80 BF 1F 00 C1 00 00 00 00 00 00  // -'(.+...........
    5B40: 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15 17 02 04 06  // ................
    5B50: 07 10 11 12 13 14 15 16 17 01 00 03 00 00 00 00  // ................
    5B60: 00 00 30 0F 00 FF 50 18 08 00 40 01 01 00 06 63  // ..0...P...@....c
    5B70: 5F 4F 50 82 54 80 BF 1F 00 C1 00 00 00 00 00 00  // _OP.T...........
    5B80: 9C 8E 8F 28 00 96 B9 C2 FF 00 17 17 17 17 17 17  // ...(............
    5B90: 17 17 17 17 17 17 17 17 17 01 00 01 00 00 00 00  // ................
    5BA0: 00 00 00 0D 00 FF 50 18 0E 00 10 00 03 00 03 A6  // ......P.........
    5BB0: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  // _OP.U....M......
    5BC0: 83 85 5D 28 0D 63 BA A3 FF 00 08 08 08 08 08 08  // ..](.c..........
    5BD0: 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00  // ................
    5BE0: 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 0A E3  // ......P.........
    5BF0: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    5C00: EA 8C DF 50 00 E7 04 E3 FF 00 01 02 03 04 05 06  // ...P............
    5C10: 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 10 00 00  // ................
    5C20: 00 00 40 05 0F FF 00 05 11 1C 08 0B 14 28 0E 18  // ..@..........(..
    5C30: 2D 32 20 24 38 3F 00 05 08 0B 0E 11 14 18 1C 20  // -2 $8?......... 
    5C40: 24 28 2D 32 38 3F 07 0C 10 15 1A 18 16 15 13 1C  // $(-28?..........
    5C50: 25 2F 38 33 2E 2A 25 27 29 2A 2C 23 19 10 23 25  // %/83.*%')*,#..#%
    5C60: 27 2A 2C 2B 2A 29 29 2D 32 37 3B 39 37 34 32 33  // '*,+*))-27;97423
    5C70: 34 35 35 31 2C 27 2F 30 32 33 34 34 33 33 32 35  // 4551,'/023443325
    5C80: 38 3A 3D 3C 3A 39 38 38 39 39 3A 37 34 31 03 05  // 8:=<:98899:741..
    5C90: 07 09 0B 0B 0A 09 08 0D 11 15 19 17 15 13 11 11  // ................
    5CA0: 12 13 14 0F 0B 07 10 10 12 13 14 13 13 13 12 14  // ................
    5CB0: 16 18 1A 19 18 17 16 17 17 17 18 15 14 11 15 15  // ................
    5CC0: 16 17 17 17 17 17 16 18 19 1A 1B 1B 1A 19 19 19  // ................
    5CD0: 19 19 1A 18 17 16 02 03 04 05 07 06 06 05 05 07  // ................
    5CE0: 0A 0C 0E 0D 0C 0B 09 0A 0A 0B 0B 09 06 04 09 09  // ................
    5CF0: 0A 0B 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D  // ................
    5D00: 0D 0D 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D  // ................
    5D10: 0E 0F 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C 00 00  // ................
    5D20: 00 00 00 00 00 00 28 18 08 00 20 09 0F 00 06 63  // ......(... ....c
    5D30: 2D 27 28 90 2B 80 BF 1F 00 C0 00 00 00 00 00 00  // -'(.+...........
    5D40: 9C 8E 8F 14 00 96 B9 E3 FF 00 01 02 03 04 05 06  // ................
    5D50: 07 10 11 12 13 14 15 16 17 01 00 0F 00 00 00 00  // ................
    5D60: 00 00 00 05 0F FF 50 18 08 00 40 01 0F 00 06 63  // ......P...@....c
    5D70: 5F 4F 50 82 54 80 BF 1F 00 C0 00 00 00 00 00 00  // _OP.T...........
    5D80: 9C 8E 8F 28 00 96 B9 E3 FF 00 01 02 03 04 05 06  // ...(............
    5D90: 07 10 11 12 13 14 15 16 17 01 00 0F 00 00 00 00  // ................
    5DA0: 00 00 00 05 0F FF 00 05 11 1C 08 0B 25 28 02 07  // ............%(..
    5DB0: 1B 20 0F 14 28 2C 0C 11 25 2A 14 1E 32 36 0F 13  // . ..(,..%*..26..
    5DC0: 27 2C 1B 20 34 39 06 0B 1F 24 13 18 2C 30 09 0D  // ',. 49...$..,0..
    5DD0: 21 26 15 1A 2E 33 13 17 2B 30 1F 24 38 3D 0E 18  // !&...3..+0.$8=..
    5DE0: 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05  // -2 $8?..........
    5DF0: 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18  // ........-2 $8?..
    5E00: 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05  // -2 $8?..........
    5E10: 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18  // ........-2 $8?..
    5E20: 2D 32 20 24 38 3F 50 18 0E 00 80 01 0F 00 06 A2  // -2 $8?P.........
    5E30: 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00  // _OP.T....@......
    5E40: 83 85 5D 28 0F 63 BA E3 FF 00 08 00 00 18 18 00  // ..](.c..........
    5E50: 00 00 08 00 00 00 18 00 00 0B 00 05 00 00 00 00  // ................
    5E60: 00 00 00 05 05 FF 50 18 0E 00 80 01 0F 00 06 A3  // ......P.........
    5E70: 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00  // _OP.T....@......
    5E80: 83 85 5D 28 0F 63 BA E3 FF 00 01 02 03 04 05 14  // ..](.c..........
    5E90: 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00  // .89:;<=>?.......
    5EA0: 00 00 00 05 0F FF 28 18 0E 00 08 09 03 00 02 A3  // ......(.........
    5EB0: 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00  // -'(.+....M......
    5EC0: 83 85 5D 14 1F 63 BA A3 FF 00 01 02 03 04 05 14  // ..]..c..........
    5ED0: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  // .89:;<=>?.......
    5EE0: 00 00 10 0E 00 FF 50 18 0E 00 10 01 03 00 02 A3  // ......P.........
    5EF0: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  // _OP.U....M......
    5F00: 83 85 5D 28 1F 63 BA A3 FF 00 01 02 03 04 05 14  // ..](.c..........
    5F10: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  // .89:;<=>?.......
    5F20: 00 00 10 0E 00 FF 28 18 10 00 08 08 03 00 02 67  // ......(........g
    5F30: 2D 27 28 90 2B A0 BF 1F 00 4F 0D 0E 00 00 00 00  // -'(.+....O......
    5F40: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 14  // ................
    5F50: 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00  // .89:;<=>?.......
    5F60: 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00 02 67  // ......P........g
    5F70: 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00  // _OP.U....O......
    5F80: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 14  // ...(............
    5F90: 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00  // .89:;<=>?.......
    5FA0: 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00 02 66  // ......P........f
    5FB0: 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00  // _OP.U....O......
    5FC0: 9C 8E 8F 28 0F 96 B9 A3 FF 00 08 08 08 08 08 08  // ...(............
    5FD0: 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00  // ................
    5FE0: 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 06 E3  // ......P.........
    5FF0: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    6000: EA 8C DF 28 00 E7 04 C3 FF 00 3F 3F 3F 3F 3F 3F  // ...(......??????
    6010: 3F 3F 3F 3F 3F 3F 3F 3F 3F 01 00 0F 00 00 00 00  // ?????????.......
    6020: 00 00 00 05 01 FF 50 1D 10 00 A0 01 0F 00 06 E3  // ......P.........
    6030: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    6040: EA 8C DF 28 00 E7 04 E3 FF 00 01 02 03 04 05 14  // ...(............
    6050: 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00  // .89:;<=>?.......
    6060: 00 00 00 05 0F FF 28 18 08 00 20 01 0F 00 0E 63  // ......(... ....c
    6070: 5F 4F 50 82 54 80 BF 1F 00 41 00 00 00 00 00 00  // _OP.T....A......
    6080: 9C 8E 8F 28 40 96 B9 A3 FF 00 01 02 03 04 05 06  // ...(@...........
    6090: 07 08 09 0A 0B 0C 0D 0E 0F 41 00 0F 00 00 00 00  // .........A......
    60A0: 00 00 40 05 0F FF 3E 5A 00 C0 00 00 00 00 00 00  // ..@...>Z........
    60B0: 00 00 00 00 00 00 5E 60 00 C0 00 00 00 00 00 00  // ......^`........
    60C0: 00 00 00 00 00 00 1A 00 F6 97 00 C0 00 00 00 00  // ................
    60D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    60E0: 1E E8 10 00 2E 8E 1E 7A 1B E8 F8 36 E8 CF 36 E8  // .......z...6..6.
    60F0: 70 1A 1F C3 2E 8E 1E 7A 1B C7 06 87 04 60 F9 C6  // p......z.....`..
    6100: 06 8A 04 0B A0 89 04 0C 11 24 17 A2 89 04 B4 01  // .........$......
    6110: E8 6D 1E A0 89 04 80 26 10 04 CF 80 0E 10 04 20  // .m.....&....... 
    6120: C7 06 63 04 D4 03 0E 1F E8 A5 C3 F7 C1 02 00 75  // ..c............u
    6130: 03 E8 3E C3 C3 1E 2E 8E 1E 7A 1B 0E 07 EB 00 1F  // ..>......z......
    6140: C3 F6 06 89 04 08 74 01 C3 53 BA C8 03 EC B0 FF  // ......t..S......
    6150: B2 C6 EE B2 C8 80 3E 63 04 B4 75 2F BE BA 61 B9  // ......>c..u/..a.
    6160: 40 00 33 DB 9C FA 8A C3 EE 8B FB C1 EF 03 83 E7  // @.3.............
    6170: 03 03 FE 2E 8A 05 42 EE 2E 8A 45 04 EE 2E 8A 45  // ......B...E....E
    6180: 08 EE FE C3 4A E2 DF 9D E9 85 00 26 8A 47 2B F6  // ....J......&.G+.
    6190: 06 89 04 06 74 31 B9 F8 00 BF BE 5B 3C 08 74 11  // ....t1.....[<.t.
    61A0: B9 40 00 BF 3E 5D 3C 38 74 07 3C 3F 74 03 BF 7E  // .@..>]<8t.<?t..~
    61B0: 5D 33 DB 9C FA 8A C3 EE 2E 8A 01 42 EE EE EE FE  // ]3.........B....
    61C0: C3 4A E2 F1 9D EB 49 3C 08 74 25 3C 38 74 2E 3C  // .J....I<.t%<8t.<
    61D0: 3F 74 2A B9 08 00 33 DB 51 E8 46 D3 B9 08 00 F7  // ?t*...3.Q.F.....
    61E0: C3 10 00 74 03 83 C7 18 E8 67 00 59 E2 EA EB 20  // ...t.....g.Y... 
    61F0: E8 2F D3 B9 10 00 33 DB E8 57 00 EB 13 B9 40 00  // ./....3..W....@.
    6200: 33 DB 51 E8 28 00 8A C3 E8 B7 2F FE C3 59 E2 F2  // 3.Q.(...../..Y..
    6210: 5B C3 00 2A 00 2A 00 2A 00 2A 15 3F 15 3F 15 3F  // [..*.*.*.*.?.?.?
    6220: 15 3F 00 2A 00 3F 00 2A 00 3F 00 2A 00 3F 8B FB  // .?.*.?.*.?.*.?..
    6230: C1 EF 02 83 E7 0F 2E 8A B5 AA 61 8B FB D1 EF 83  // ..........a.....
    6240: E7 0F 2E 8A AD AA 61 8B FB 83 E7 0F 2E 8A 8D AA  // ......a.........
    6250: 61 C3 9C 8A C3 FA EE 2E 8A 05 42 EE 47 2E 8A 05  // a.........B.G...
    6260: EE 47 2E 8A 05 EE 47 FE C3 4A E2 E7 9D C3 00 00  // .G....G..J......
    6270: 00 00 00 00 00 00 7E 81 A5 81 BD 99 81 7E 7C FE  // ......~......~|.
    6280: D6 BA C6 FE 7C 00 C6 EE FE FE 7C 38 10 00 10 38  // ....|.....|8...8
    6290: 7C FE 7C 38 10 00 10 38 10 EE EE 10 38 00 38 7C  // |.|8...8....8.8|
    62A0: FE FE 6C 10 38 00 00 18 3C 7E 3C 18 00 00 FF E7  // ..l.8...<~<.....
    62B0: C3 81 C3 E7 FF FF 00 18 3C 66 66 3C 18 00 FF E7  // ........<ff<....
    62C0: C3 99 99 C3 E7 FF 1E 0E 1E 36 78 CC CC 78 7E C3  // .........6x..x~.
    62D0: C3 7E 18 7E 18 18 1E 1A 1E 18 18 70 F0 60 3E 3E  // .~.~.......p.`>>
    62E0: 36 36 F6 66 1E 0C DB 3C 66 E7 66 3C DB 00 80 C0  // 66.f...<f.f<....
    62F0: F0 F8 F0 C0 80 00 02 06 1E 3E 1E 06 02 00 18 3C  // .........>.....<
    6300: 7E 18 7E 3C 18 00 66 66 66 66 66 00 66 00 7F DB  // ~.~<..fffff.f...
    6310: 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C 38 CC 78 00 00  // {;....<f8ll8.x..
    6320: 00 00 FE FE FE 00 18 3C 7E 18 7E 3C 18 7E 18 3C  // .......<~.~<.~.<
    6330: 7E 18 18 18 18 00 18 18 18 18 7E 3C 18 00 00 18  // ~.........~<....
    6340: 1C FE 1C 18 00 00 00 30 70 FE 70 30 00 00 00 00  // .......0p.p0....
    6350: C0 C0 C0 FE 00 00 00 24 66 FF 66 24 00 00 00 10  // .......$f.f$....
    6360: 38 7C 7C FE 00 00 00 FE 7C 7C 38 10 00 00 00 00  // 8||.....||8.....
    6370: 00 00 00 00 00 00 18 3C 3C 18 18 00 18 00 6C 6C  // .......<<.....ll
    6380: 6C 00 00 00 00 00 6C 6C FE 6C FE 6C 6C 00 18 7E  // l.....ll.l.ll..~
    6390: C0 7C 06 FC 18 00 00 C6 0C 18 30 60 C6 00 38 6C  // .|........0`..8l
    63A0: 38 76 CC CC 76 00 18 18 30 00 00 00 00 00 18 30  // 8v..v...0......0
    63B0: 60 60 60 30 18 00 60 30 18 18 18 30 60 00 00 EE  // ```0..`0...0`...
    63C0: 7C FE 7C EE 00 00 00 18 18 7E 18 18 00 00 00 00  // |.|......~......
    63D0: 00 00 18 18 30 00 00 00 00 FE 00 00 00 00 00 00  // ....0...........
    63E0: 00 00 00 38 38 00 06 0C 18 30 60 C0 80 00 7C C6  // ...88....0`...|.
    63F0: CE DE F6 E6 7C 00 18 78 18 18 18 18 7E 00 7C C6  // ....|..x....~.|.
    6400: 0C 18 30 66 FE 00 7C C6 06 3C 06 C6 7C 00 0C 1C  // ..0f..|..<..|...
    6410: 3C 6C FE 0C 0C 00 FE C0 FC 06 06 C6 7C 00 7C C6  // <l..........|.|.
    6420: C0 FC C6 C6 7C 00 FE C6 06 0C 18 18 18 00 7C C6  // ....|.........|.
    6430: C6 7C C6 C6 7C 00 7C C6 C6 7E 06 C6 7C 00 00 1C  // .|..|.|..~..|...
    6440: 1C 00 00 1C 1C 00 00 18 18 00 00 18 18 30 0C 18  // .............0..
    6450: 30 60 30 18 0C 00 00 00 FE 00 00 FE 00 00 60 30  // 0`0...........`0
    6460: 18 0C 18 30 60 00 7C C6 06 0C 18 00 18 00 7C C6  // ...0`.|.......|.
    6470: C6 DE DC C0 7E 00 38 6C C6 C6 FE C6 C6 00 FC 66  // ....~.8l.......f
    6480: 66 7C 66 66 FC 00 3C 66 C0 C0 C0 66 3C 00 F8 6C  // f|ff..<f...f<..l
    6490: 66 66 66 6C F8 00 FE C2 C0 F8 C0 C2 FE 00 FE 62  // fffl...........b
    64A0: 60 7C 60 60 F0 00 7C C6 C0 C0 DE C6 7C 00 C6 C6  // `|``..|.....|...
    64B0: C6 FE C6 C6 C6 00 3C 18 18 18 18 18 3C 00 3C 18  // ......<.....<.<.
    64C0: 18 18 D8 D8 70 00 C6 CC D8 F0 D8 CC C6 00 F0 60  // ....p..........`
    64D0: 60 60 60 62 FE 00 C6 EE FE D6 D6 C6 C6 00 C6 E6  // ```b............
    64E0: E6 F6 DE CE C6 00 7C C6 C6 C6 C6 C6 7C 00 FC 66  // ......|.....|..f
    64F0: 66 7C 60 60 F0 00 7C C6 C6 C6 C6 D6 7C 06 FC C6  // f|``..|.....|...
    6500: C6 FC D8 CC C6 00 7C C6 C0 7C 06 C6 7C 00 7E 5A  // ......|..|..|.~Z
    6510: 18 18 18 18 3C 00 C6 C6 C6 C6 C6 C6 7C 00 C6 C6  // ....<.......|...
    6520: C6 C6 6C 38 10 00 C6 C6 D6 D6 FE EE C6 00 C6 6C  // ..l8...........l
    6530: 38 38 38 6C C6 00 66 66 66 3C 18 18 3C 00 FE 86  // 888l..fff<..<...
    6540: 0C 18 30 62 FE 00 7C 60 60 60 60 60 7C 00 C0 60  // ..0b..|`````|..`
    6550: 30 18 0C 06 02 00 7C 0C 0C 0C 0C 0C 7C 00 10 38  // 0.....|.....|..8
    6560: 6C C6 00 00 00 00 00 00 00 00 00 00 00 FF 30 30  // l.............00
    6570: 18 00 00 00 00 00 00 00 78 0C 7C CC 7E 00 E0 60  // ........x.|.~..`
    6580: 7C 66 66 66 FC 00 00 00 7C C6 C0 C6 7C 00 1C 0C  // |fff....|...|...
    6590: 7C CC CC CC 7E 00 00 00 7C C6 FE C0 7C 00 1C 36  // |...~...|...|..6
    65A0: 30 FC 30 30 78 00 00 00 76 CE C6 7E 06 7C E0 60  // 0.00x...v..~.|.`
    65B0: 7C 66 66 66 E6 00 18 00 38 18 18 18 3C 00 0C 00  // |fff....8...<...
    65C0: 1C 0C 0C 0C CC 78 E0 60 66 6C 78 6C E6 00 18 18  // .....x.`flxl....
    65D0: 18 18 18 18 1C 00 00 00 6C FE D6 D6 C6 00 00 00  // ........l.......
    65E0: DC 66 66 66 66 00 00 00 7C C6 C6 C6 7C 00 00 00  // .ffff...|...|...
    65F0: DC 66 66 7C 60 F0 00 00 76 CC CC 7C 0C 1E 00 00  // .ff|`...v..|....
    6600: DC 66 60 60 F0 00 00 00 7C C0 7C 06 7C 00 30 30  // .f``....|.|.|.00
    6610: FC 30 30 36 1C 00 00 00 CC CC CC CC 76 00 00 00  // .006........v...
    6620: C6 C6 6C 38 10 00 00 00 C6 C6 D6 FE 6C 00 00 00  // ..l8........l...
    6630: C6 6C 38 6C C6 00 00 00 C6 C6 CE 76 06 7C 00 00  // .l8l.......v.|..
    6640: FC 98 30 64 FC 00 0E 18 18 70 18 18 0E 00 18 18  // ..0d.....p......
    6650: 18 00 18 18 18 00 70 18 18 0E 18 18 70 00 76 DC  // ......p.....p.v.
    6660: 00 00 00 00 00 00 00 10 38 38 6C 6C FE 00 3C 66  // ........88ll..<f
    6670: C0 66 3C 18 CC 78 00 C6 00 C6 C6 CE 76 00 0E 00  // .f<..x......v...
    6680: 7C C6 FE C0 7C 00 7C C6 78 0C 7C CC 7E 00 C6 00  // |...|.|.x.|.~...
    6690: 78 0C 7C CC 7E 00 E0 00 78 0C 7C CC 7E 00 38 38  // x.|.~...x.|.~.88
    66A0: 78 0C 7C CC 7E 00 00 00 7C C0 7C 18 6C 38 7C C6  // x.|.~...|.|.l8|.
    66B0: 7C C6 FE C0 7C 00 C6 00 7C C6 FE C0 7C 00 E0 00  // |...|...|...|...
    66C0: 7C C6 FE C0 7C 00 66 00 38 18 18 18 3C 00 7C C6  // |...|.f.8...<.|.
    66D0: 38 18 18 18 3C 00 00 00 38 18 18 18 3C 00 C6 38  // 8...<...8...<..8
    66E0: 6C C6 FE C6 C6 00 38 38 00 7C C6 FE C6 00 0E 00  // l.....88.|......
    66F0: FE C0 F8 C0 FE 00 00 00 6C 9A 7E D8 6E 00 7E D8  // ........l.~.n.~.
    6700: D8 FE D8 D8 DE 00 7C C6 00 7C C6 C6 7C 00 00 C6  // ......|..|..|...
    6710: 00 7C C6 C6 7C 00 00 E0 00 7C C6 C6 7C 00 7C C6  // .|..|....|..|.|.
    6720: 00 C6 C6 CE 76 00 00 E0 00 C6 C6 CE 76 00 18 00  // ....v.......v...
    6730: 3C 18 18 18 3C 00 C6 38 6C C6 C6 6C 38 00 C6 00  // <...<..8l..l8...
    6740: C6 C6 C6 C6 7C 00 00 18 7E D8 D8 7E 18 00 38 6C  // ....|...~..~..8l
    6750: 60 F0 66 F6 6C 00 C3 66 3C 7E 18 3C 18 00 3E 63  // `.f.l..f<~.<..>c
    6760: 38 0E 63 3E 00 1C 00 3E 61 3C 86 7C 00 1C 0E 00  // 8.c>...>a<.|....
    6770: 78 0C 7C CC 7E 00 1C 00 38 18 18 18 3C 00 00 0E  // x.|.~...8...<...
    6780: 00 7C C6 C6 7C 00 00 0E 00 CC CC DC 76 00 00 FC  // .|..|.......v...
    6790: 00 BC 66 66 E6 00 FE 00 C6 E6 F6 CE C6 00 3E 00  // ..ff..........>.
    67A0: 3E 60 67 63 3D 00 3E 00 76 CE C6 7E 06 7C 18 00  // >`gc=.>.v..~.|..
    67B0: 18 30 60 66 3C 00 00 00 00 7C 60 60 00 00 00 00  // .0`f<....|``....
    67C0: 00 7C 0C 0C 00 00 C0 CC D8 30 7C 36 0C 3E C0 CC  // .|.......0|6.>..
    67D0: D8 30 6C 3C 7E 0C 18 00 18 18 3C 3C 18 00 00 36  // .0l<~.....<<...6
    67E0: 6C D8 6C 36 00 00 00 D8 6C 36 6C D8 00 00 22 88  // l.l6....l6l...".
    67F0: 22 88 22 88 22 88 55 AA 55 AA 55 AA 55 AA DD 77  // ".".".U.U.U.U..w
    6800: DD 77 DD 77 DD 77 18 18 18 18 18 18 18 18 18 18  // .w.w.w..........
    6810: 18 18 F8 18 18 18 18 18 F8 18 F8 18 18 18 36 36  // ..............66
    6820: 36 36 F6 36 36 36 00 00 00 00 FE 36 36 36 00 00  // 66.666.....666..
    6830: F8 18 F8 18 18 18 36 36 F6 06 F6 36 36 36 36 36  // ......66...66666
    6840: 36 36 36 36 36 36 00 00 FE 06 F6 36 36 36 36 36  // 666666.....66666
    6850: F6 06 FE 00 00 00 36 36 36 36 FE 00 00 00 18 18  // ......6666......
    6860: F8 18 F8 00 00 00 00 00 00 00 F8 18 18 18 18 18  // ................
    6870: 18 18 1F 00 00 00 18 18 18 18 FF 00 00 00 00 00  // ................
    6880: 00 00 FF 18 18 18 18 18 18 18 1F 18 18 18 00 00  // ................
    6890: 00 00 FF 00 00 00 18 18 18 18 FF 18 18 18 18 18  // ................
    68A0: 1F 18 1F 18 18 18 36 36 36 36 37 36 36 36 36 36  // ......6666766666
    68B0: 37 30 3F 00 00 00 00 00 3F 30 37 36 36 36 36 36  // 70?.....?0766666
    68C0: F7 00 FF 00 00 00 00 00 FF 00 F7 36 36 36 36 36  // ...........66666
    68D0: 37 30 37 36 36 36 00 00 FF 00 FF 00 00 00 36 36  // 707666........66
    68E0: F7 00 F7 36 36 36 18 18 FF 00 FF 00 00 00 36 36  // ...666........66
    68F0: 36 36 FF 00 00 00 00 00 FF 00 FF 18 18 18 00 00  // 66..............
    6900: 00 00 FF 36 36 36 36 36 36 36 3F 00 00 00 18 18  // ...6666666?.....
    6910: 1F 18 1F 00 00 00 00 00 1F 18 1F 18 18 18 00 00  // ................
    6920: 00 00 3F 36 36 36 36 36 36 36 FF 36 36 36 18 18  // ..?6666666.666..
    6930: FF 18 FF 18 18 18 18 18 18 18 F8 00 00 00 00 00  // ................
    6940: 00 00 1F 18 18 18 FF FF FF FF FF FF FF FF 00 00  // ................
    6950: 00 00 FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 0F 0F  // ................
    6960: 0F 0F 0F 0F 0F 0F FF FF FF FF 00 00 00 00 00 00  // ................
    6970: 66 DC D8 DC 66 00 00 78 CC F8 CC C6 CC 00 00 FE  // f...f..x........
    6980: 62 60 60 60 E0 00 00 FE 6C 6C 6C 6C 6C 00 FE C6  // b```....lllll...
    6990: 60 30 60 C6 FE 00 00 7E D8 CC CC D8 70 00 00 66  // `0`....~....p..f
    69A0: 66 66 66 7C C0 00 00 76 DC 18 18 18 38 00 FE 38  // fff|...v....8..8
    69B0: 6C C6 6C 38 FE 00 38 6C C6 FE C6 6C 38 00 38 6C  // l.l8..8l...l8.8l
    69C0: C6 C6 6C 6C EE 00 3E 60 38 66 C6 CC 78 00 00 00  // ..ll..>`8f..x...
    69D0: 7E DB DB 7E 00 00 06 7C DE F6 E6 7C C0 00 38 60  // ~..~...|...|..8`
    69E0: C0 F8 C0 60 38 00 7C C6 C6 C6 C6 C6 C6 00 00 FE  // ...`8.|.........
    69F0: 00 FE 00 FE 00 00 18 18 7E 18 18 00 7E 00 30 18  // ........~...~.0.
    6A00: 0C 18 30 00 7E 00 0C 18 30 18 0C 00 7E 00 0C 1E  // ..0.~...0...~...
    6A10: 18 18 18 18 18 18 18 18 18 18 18 78 30 00 00 00  // ...........x0...
    6A20: 18 00 7E 00 18 00 00 76 DC 00 76 DC 00 00 7C C6  // ..~....v..v...|.
    6A30: C6 7C 00 00 00 00 00 00 00 18 18 00 00 00 00 00  // .|..............
    6A40: 00 00 18 00 00 00 1F 18 18 18 F8 38 18 00 D8 6C  // ...........8...l
    6A50: 6C 6C 00 00 00 00 70 D8 30 F8 00 00 00 00 00 00  // ll....p.0.......
    6A60: 7C 7C 7C 7C 00 00 00 00 00 00 00 00 00 00 1D 00  // ||||............
    6A70: 00 00 00 24 66 FF 66 24 00 00 00 00 00 00 00 10  // ...$f.f$........
    6A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6A90: 00 00 00 7E 81 A5 81 81 BD 99 81 81 7E 00 00 00  // ...~........~...
    6AA0: 00 00 00 7C FE FE D6 FE FE BA C6 FE 7C 00 00 00  // ...|........|...
    6AB0: 00 00 00 00 6C EE FE FE FE FE 7C 38 10 00 00 00  // ....l.....|8....
    6AC0: 00 00 00 00 10 38 7C FE 7C 38 10 00 00 00 00 00  // .....8|.|8......
    6AD0: 00 00 00 00 10 38 38 10 6C EE 6C 10 38 00 00 00  // .....88.l.l.8...
    6AE0: 00 00 00 10 38 7C 7C FE FE FE 6C 10 38 00 00 00  // ....8||...l.8...
    6AF0: 00 00 00 00 00 00 18 3C 3C 3C 18 00 00 00 00 00  // .......<<<......
    6B00: 00 FF FF FF FF FF E7 C3 C3 C3 E7 FF FF FF FF FF  // ................
    6B10: FF 00 00 00 00 18 3C 66 66 66 3C 18 00 00 00 00  // ......<fff<.....
    6B20: 00 FF FF FF FF E7 C3 99 99 99 C3 E7 FF FF FF FF  // ................
    6B30: FF 00 00 1E 0E 1E 36 78 CC CC CC CC 78 00 00 00  // ......6x....x...
    6B40: 00 00 00 3C 66 66 66 3C 18 7E 18 18 18 00 00 00  // ...<fff<.~......
    6B50: 00 00 00 1E 1A 1E 18 18 18 18 78 F8 70 00 00 00  // ..........x.p...
    6B60: 00 00 00 3E 36 3E 36 36 76 F6 66 0E 1E 0C 00 00  // ...>6>66v.f.....
    6B70: 00 00 00 18 DB 7E 3C 66 66 3C 7E DB 18 00 00 00  // .....~<ff<~.....
    6B80: 00 00 00 00 80 E0 F0 FC FE FC F0 E0 80 00 00 00  // ................
    6B90: 00 00 00 00 02 0E 3E 7E FE 7E 3E 0E 02 00 00 00  // ......>~.~>.....
    6BA0: 00 00 00 18 3C 7E 18 18 18 18 7E 3C 18 00 00 00  // ....<~....~<....
    6BB0: 00 00 00 66 66 66 66 66 66 66 00 66 66 00 00 00  // ...fffffff.ff...
    6BC0: 00 00 00 7F DB DB DB DB 7B 1B 1B 1B 1B 00 00 00  // ........{.......
    6BD0: 00 00 00 7C C6 C6 60 7C F6 DE 7C 0C C6 C6 7C 00  // ...|..`|..|...|.
    6BE0: 00 00 00 00 00 00 00 00 00 FE FE FE FE 00 00 00  // ................
    6BF0: 00 00 00 18 3C 7E 18 18 18 7E 3C 18 7E 00 00 00  // ....<~...~<.~...
    6C00: 00 00 00 18 3C 7E 18 18 18 18 18 18 18 00 00 00  // ....<~..........
    6C10: 00 00 00 18 18 18 18 18 18 18 7E 3C 18 00 00 00  // ..........~<....
    6C20: 00 00 00 00 00 00 0C 0E FF 0E 0C 00 00 00 00 00  // ................
    6C30: 00 00 00 00 00 00 30 70 FE 70 30 00 00 00 00 00  // ......0p.p0.....
    6C40: 00 00 00 00 00 00 00 C0 C0 C0 FE 00 00 00 00 00  // ................
    6C50: 00 00 00 00 00 00 24 66 FF 66 24 00 00 00 00 00  // ......$f.f$.....
    6C60: 00 00 00 00 10 38 38 38 7C 7C FE FE 00 00 00 00  // .....888||......
    6C70: 00 00 00 00 FE FE 7C 7C 7C 38 38 10 00 00 00 00  // ......|||88.....
    6C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6C90: 00 00 00 18 3C 3C 3C 3C 18 18 00 18 18 00 00 00  // ....<<<<........
    6CA0: 00 00 36 36 36 36 14 00 00 00 00 00 00 00 00 00  // ..6666..........
    6CB0: 00 00 00 6C 6C 6C FE 6C 6C FE 6C 6C 6C 00 00 00  // ...lll.ll.lll...
    6CC0: 00 00 00 18 18 7C C6 C0 78 3C 06 C6 7C 18 18 00  // .....|..x<..|...
    6CD0: 00 00 00 00 00 00 62 66 0C 18 30 66 C6 00 00 00  // ......bf..0f....
    6CE0: 00 00 00 38 6C 38 30 76 7E CC CC CC 76 00 00 00  // ...8l80v~...v...
    6CF0: 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00 00 00  // ................
    6D00: 00 00 00 0C 18 30 30 30 30 30 30 18 0C 00 00 00  // .....000000.....
    6D10: 00 00 00 30 18 0C 0C 0C 0C 0C 0C 18 30 00 00 00  // ...0........0...
    6D20: 00 00 00 00 00 00 6C 38 FE 38 6C 00 00 00 00 00  // ......l8.8l.....
    6D30: 00 00 00 00 00 00 18 18 7E 18 18 00 00 00 00 00  // ........~.......
    6D40: 00 00 00 00 00 00 00 00 00 00 0C 0C 0C 18 00 00  // ................
    6D50: 00 00 00 00 00 00 00 00 FE 00 00 00 00 00 00 00  // ................
    6D60: 00 00 00 00 00 00 00 00 00 00 00 18 18 00 00 00  // ................
    6D70: 00 00 00 00 00 02 06 0C 18 30 60 C0 80 00 00 00  // .........0`.....
    6D80: 00 00 00 7C C6 C6 CE DE F6 E6 C6 C6 7C 00 00 00  // ...|........|...
    6D90: 00 00 00 18 78 18 18 18 18 18 18 18 7E 00 00 00  // ....x.......~...
    6DA0: 00 00 00 7C C6 C6 06 0C 18 30 60 C6 FE 00 00 00  // ...|.....0`.....
    6DB0: 00 00 00 7C C6 06 06 3C 06 06 06 C6 7C 00 00 00  // ...|...<....|...
    6DC0: 00 00 00 0C 1C 3C 6C CC CC FE 0C 0C 1E 00 00 00  // .....<l.........
    6DD0: 00 00 00 FE C0 C0 C0 FC 06 06 06 C6 7C 00 00 00  // ............|...
    6DE0: 00 00 00 7C C6 C0 C0 FC C6 C6 C6 C6 7C 00 00 00  // ...|........|...
    6DF0: 00 00 00 FE C6 06 0C 18 30 30 30 30 30 00 00 00  // ........00000...
    6E00: 00 00 00 7C C6 C6 C6 7C C6 C6 C6 C6 7C 00 00 00  // ...|...|....|...
    6E10: 00 00 00 7C C6 C6 C6 C6 7E 06 06 C6 7C 00 00 00  // ...|....~...|...
    6E20: 00 00 00 00 00 00 0C 0C 00 00 0C 0C 00 00 00 00  // ................
    6E30: 00 00 00 00 00 00 0C 0C 00 00 0C 0C 0C 18 00 00  // ................
    6E40: 00 00 00 00 0C 18 30 60 C0 60 30 18 0C 00 00 00  // ......0`.`0.....
    6E50: 00 00 00 00 00 00 00 FE 00 FE 00 00 00 00 00 00  // ................
    6E60: 00 00 00 00 60 30 18 0C 06 0C 18 30 60 00 00 00  // ....`0.....0`...
    6E70: 00 00 00 7C C6 C6 0C 18 18 18 00 18 18 00 00 00  // ...|............
    6E80: 00 00 00 7C C6 C6 C6 DE DE DE DC C0 7E 00 00 00  // ...|........~...
    6E90: 00 00 00 38 6C C6 C6 C6 FE C6 C6 C6 C6 00 00 00  // ...8l...........
    6EA0: 00 00 00 FC 66 66 66 7C 66 66 66 66 FC 00 00 00  // ....fff|ffff....
    6EB0: 00 00 00 3C 66 C2 C0 C0 C0 C0 C2 66 3C 00 00 00  // ...<f......f<...
    6EC0: 00 00 00 F8 6C 66 66 66 66 66 66 6C F8 00 00 00  // ....lffffffl....
    6ED0: 00 00 00 FE 66 60 64 7C 64 60 60 66 FE 00 00 00  // ....f`d|d``f....
    6EE0: 00 00 00 FE 66 60 64 7C 64 60 60 60 F0 00 00 00  // ....f`d|d```....
    6EF0: 00 00 00 7C C6 C6 C0 C0 C0 CE C6 C6 7C 00 00 00  // ...|........|...
    6F00: 00 00 00 C6 C6 C6 C6 FE C6 C6 C6 C6 C6 00 00 00  // ................
    6F10: 00 00 00 3C 18 18 18 18 18 18 18 18 3C 00 00 00  // ...<........<...
    6F20: 00 00 00 3C 18 18 18 18 18 18 D8 D8 70 00 00 00  // ...<........p...
    6F30: 00 00 00 C6 C6 CC D8 F0 F0 D8 CC C6 C6 00 00 00  // ................
    6F40: 00 00 00 F0 60 60 60 60 60 60 62 66 FE 00 00 00  // ....``````bf....
    6F50: 00 00 00 C6 C6 EE EE FE D6 D6 D6 C6 C6 00 00 00  // ................
    6F60: 00 00 00 C6 C6 E6 E6 F6 DE CE CE C6 C6 00 00 00  // ................
    6F70: 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ...|........|...
    6F80: 00 00 00 FC 66 66 66 66 7C 60 60 60 F0 00 00 00  // ....ffff|```....
    6F90: 00 00 00 7C C6 C6 C6 C6 C6 C6 D6 D6 7C 06 00 00  // ...|........|...
    6FA0: 00 00 00 FC 66 66 66 7C 78 6C 66 66 E6 00 00 00  // ....fff|xlff....
    6FB0: 00 00 00 7C C6 C0 C0 70 1C 06 06 C6 7C 00 00 00  // ...|...p....|...
    6FC0: 00 00 00 7E 5A 18 18 18 18 18 18 18 3C 00 00 00  // ...~Z.......<...
    6FD0: 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ............|...
    6FE0: 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C 38 10 00 00 00  // ..........l8....
    6FF0: 00 00 00 C6 C6 C6 D6 D6 D6 FE EE C6 C6 00 00 00  // ................
    7000: 00 00 00 C6 C6 C6 6C 38 38 6C C6 C6 C6 00 00 00  // ......l88l......
    7010: 00 00 00 66 66 66 66 66 3C 18 18 18 3C 00 00 00  // ...fffff<...<...
    7020: 00 00 00 FE C6 86 0C 18 30 60 C2 C6 FE 00 00 00  // ........0`......
    7030: 00 00 00 7C 60 60 60 60 60 60 60 60 7C 00 00 00  // ...|````````|...
    7040: 00 00 00 00 00 80 C0 60 30 18 0C 06 02 00 00 00  // .......`0.......
    7050: 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C 0C 7C 00 00 00  // ...|........|...
    7060: 00 00 10 38 6C C6 00 00 00 00 00 00 00 00 00 00  // ...8l...........
    7070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00  // ................
    7080: 00 00 18 18 18 0C 00 00 00 00 00 00 00 00 00 00  // ................
    7090: 00 00 00 00 00 00 78 0C 7C CC CC DC 76 00 00 00  // ......x.|...v...
    70A0: 00 00 00 E0 60 60 7C 66 66 66 66 66 FC 00 00 00  // ....``|fffff....
    70B0: 00 00 00 00 00 00 7C C6 C0 C0 C0 C6 7C 00 00 00  // ......|.....|...
    70C0: 00 00 00 1C 0C 0C 7C CC CC CC CC CC 7E 00 00 00  // ......|.....~...
    70D0: 00 00 00 00 00 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ......|.....|...
    70E0: 00 00 00 1C 36 30 30 FC 30 30 30 30 78 00 00 00  // ....600.0000x...
    70F0: 00 00 00 00 00 00 76 CE C6 C6 CE 76 06 C6 7C 00  // ......v....v..|.
    7100: 00 00 00 E0 60 60 7C 66 66 66 66 66 E6 00 00 00  // ....``|fffff....
    7110: 00 00 00 18 18 00 38 18 18 18 18 18 3C 00 00 00  // ......8.....<...
    7120: 00 00 00 0C 0C 00 1C 0C 0C 0C 0C 0C CC CC 78 00  // ..............x.
    7130: 00 00 00 E0 60 60 66 66 6C 78 6C 66 E6 00 00 00  // ....``fflxlf....
    7140: 00 00 00 18 18 18 18 18 18 18 18 18 1C 00 00 00  // ................
    7150: 00 00 00 00 00 00 6C FE D6 D6 C6 C6 C6 00 00 00  // ......l.........
    7160: 00 00 00 00 00 00 DC 66 66 66 66 66 66 00 00 00  // .......ffffff...
    7170: 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ......|.....|...
    7180: 00 00 00 00 00 00 DC 66 66 66 66 7C 60 60 F0 00  // .......ffff|``..
    7190: 00 00 00 00 00 00 76 CC CC CC CC 7C 0C 0C 1E 00  // ......v....|....
    71A0: 00 00 00 00 00 00 DC 66 60 60 60 60 F0 00 00 00  // .......f````....
    71B0: 00 00 00 00 00 00 7C C6 C0 7C 06 C6 7C 00 00 00  // ......|..|..|...
    71C0: 00 00 00 30 30 30 FC 30 30 30 30 36 1C 00 00 00  // ...000.00006....
    71D0: 00 00 00 00 00 00 CC CC CC CC CC CC 76 00 00 00  // ............v...
    71E0: 00 00 00 00 00 00 C6 C6 C6 C6 6C 38 10 00 00 00  // ..........l8....
    71F0: 00 00 00 00 00 00 C6 C6 D6 D6 D6 FE 6C 00 00 00  // ............l...
    7200: 00 00 00 00 00 00 C6 C6 6C 38 6C C6 C6 00 00 00  // ........l8l.....
    7210: 00 00 00 00 00 00 C6 C6 C6 C6 CE 76 06 C6 7C 00  // ...........v..|.
    7220: 00 00 00 00 00 00 FE 86 0C 18 30 62 FE 00 00 00  // ..........0b....
    7230: 00 00 00 0E 18 18 18 70 18 18 18 18 0E 00 00 00  // .......p........
    7240: 00 00 00 18 18 18 18 00 18 18 18 18 18 00 00 00  // ................
    7250: 00 00 00 70 18 18 18 0E 18 18 18 18 70 00 00 00  // ...p........p...
    7260: 00 00 00 76 DC 00 00 00 00 00 00 00 00 00 00 00  // ...v............
    7270: 00 00 00 00 00 00 10 38 38 6C 6C FE 00 00 00 00  // .......88ll.....
    7280: 00 00 00 3C 66 C0 C0 C0 C6 66 3C 18 0C CC 38 00  // ...<f....f<...8.
    7290: 00 00 00 C6 00 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ............v...
    72A0: 00 00 0C 18 30 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ....0.|.....|...
    72B0: 00 00 30 78 CC 00 78 0C 7C CC CC DC 76 00 00 00  // ..0x..x.|...v...
    72C0: 00 00 00 CC 00 00 78 0C 7C CC CC DC 76 00 00 00  // ......x.|...v...
    72D0: 00 00 60 30 18 00 78 0C 7C CC CC DC 76 00 00 00  // ..`0..x.|...v...
    72E0: 00 00 38 6C 38 00 78 0C 7C CC CC DC 76 00 00 00  // ..8l8.x.|...v...
    72F0: 00 00 00 00 00 7C C6 C0 C0 C6 7C 18 0C 6C 38 00  // .....|....|..l8.
    7300: 00 00 30 78 CC 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ..0x..|.....|...
    7310: 00 00 00 CC 00 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ......|.....|...
    7320: 00 00 30 18 0C 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ..0...|.....|...
    7330: 00 00 00 66 00 00 38 18 18 18 18 18 3C 00 00 00  // ...f..8.....<...
    7340: 00 00 18 3C 66 00 38 18 18 18 18 18 3C 00 00 00  // ...<f.8.....<...
    7350: 00 00 00 00 00 00 38 18 18 18 18 18 3C 00 00 00  // ......8.....<...
    7360: 00 00 C6 00 38 6C C6 C6 C6 FE C6 C6 C6 00 00 00  // ....8l..........
    7370: 00 38 6C 38 00 38 6C C6 C6 FE C6 C6 C6 00 00 00  // .8l8.8l.........
    7380: 00 0C 18 30 00 FE 60 60 7C 60 60 60 FE 00 00 00  // ...0..``|```....
    7390: 00 00 00 00 00 66 DB 1B 7F D8 D8 DF 76 00 00 00  // .....f......v...
    73A0: 00 00 00 7E D8 D8 D8 D8 FE D8 D8 D8 DE 00 00 00  // ...~............
    73B0: 00 00 30 78 CC 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ..0x..|.....|...
    73C0: 00 00 00 C6 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ......|.....|...
    73D0: 00 00 30 18 0C 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ..0...|.....|...
    73E0: 00 00 30 78 CC 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ..0x........v...
    73F0: 00 00 60 30 18 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ..`0........v...
    7400: 00 00 18 00 3C 18 18 18 18 18 18 18 3C 00 00 00  // ....<.......<...
    7410: 00 00 C6 00 7C C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ....|.......|...
    7420: 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ............|...
    7430: 00 00 00 18 18 7C C6 C0 C0 C6 7C 18 18 00 00 00  // .....|....|.....
    7440: 00 00 38 6C 60 60 F0 60 60 60 66 F6 6C 00 00 00  // ..8l``.```f.l...
    7450: 00 00 66 66 66 66 3C 18 7E 18 3C 18 18 00 00 00  // ..ffff<.~.<.....
    7460: 00 00 00 3E 63 63 30 1C 06 63 63 3E 00 1C 00 00  // ...>cc0..cc>....
    7470: 00 00 00 00 00 00 3E 63 38 0E 63 3E 00 1C 00 00  // ......>c8.c>....
    7480: 00 00 0C 18 30 00 78 0C 7C CC CC DC 76 00 00 00  // ....0.x.|...v...
    7490: 00 00 0C 18 30 00 38 18 18 18 18 18 3C 00 00 00  // ....0.8.....<...
    74A0: 00 00 0C 18 30 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ....0.|.....|...
    74B0: 00 00 18 30 60 00 CC CC CC CC CC DC 76 00 00 00  // ...0`.......v...
    74C0: 00 00 00 76 DC 00 BC 66 66 66 66 66 E6 00 00 00  // ...v...fffff....
    74D0: 00 00 76 DC 00 C6 C6 E6 F6 DE CE C6 C6 00 00 00  // ..v.............
    74E0: 00 00 21 1E 00 1E 33 60 60 67 63 33 1D 00 00 00  // ..!...3``gc3....
    74F0: 00 00 42 3C 00 3B 66 66 66 3E 06 66 3C 00 00 00  // ..B<.;fff>.f<...
    7500: 00 00 00 30 30 00 30 30 30 60 C6 C6 7C 00 00 00  // ...00.000`..|...
    7510: 00 00 00 00 00 00 00 00 7E 60 60 60 00 00 00 00  // ........~```....
    7520: 00 00 00 00 00 00 00 00 7E 06 06 06 00 00 00 00  // ........~.......
    7530: 00 00 60 60 62 66 6C 18 30 60 DC 36 0C 18 3E 00  // ..``bfl.0`.6..>.
    7540: 00 00 60 60 62 66 6C 18 36 6E DE 36 7E 06 06 00  // ..``bfl.6n.6~...
    7550: 00 00 00 18 18 00 18 18 3C 3C 3C 3C 18 00 00 00  // ........<<<<....
    7560: 00 00 00 00 00 00 36 6C D8 6C 36 00 00 00 00 00  // ......6l.l6.....
    7570: 00 00 00 00 00 00 D8 6C 36 6C D8 00 00 00 00 00  // .......l6l......
    7580: 00 11 44 11 44 11 44 11 44 11 44 11 44 11 44 11  // ..D.D.D.D.D.D.D.
    7590: 44 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA  // D.U.U.U.U.U.U.U.
    75A0: 55 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD  // U.w.w.w.w.w.w.w.
    75B0: 77 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // w...............
    75C0: 18 18 18 18 18 18 18 18 F8 18 18 18 18 18 18 18  // ................
    75D0: 18 18 18 18 18 18 F8 18 F8 18 18 18 18 18 18 18  // ................
    75E0: 18 36 36 36 36 36 36 36 F6 36 36 36 36 36 36 36  // .6666666.6666666
    75F0: 36 00 00 00 00 00 00 00 FE 36 36 36 36 36 36 36  // 6........6666666
    7600: 36 00 00 00 00 00 F8 18 F8 18 18 18 18 18 18 18  // 6...............
    7610: 18 36 36 36 36 36 F6 06 F6 36 36 36 36 36 36 36  // .66666...6666666
    7620: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    7630: 36 00 00 00 00 00 FE 06 F6 36 36 36 36 36 36 36  // 6........6666666
    7640: 36 36 36 36 36 36 F6 06 FE 00 00 00 00 00 00 00  // 666666..........
    7650: 00 36 36 36 36 36 36 36 FE 00 00 00 00 00 00 00  // .6666666........
    7660: 00 18 18 18 18 18 F8 18 F8 00 00 00 00 00 00 00  // ................
    7670: 00 00 00 00 00 00 00 00 F8 18 18 18 18 18 18 18  // ................
    7680: 18 18 18 18 18 18 18 18 1F 00 00 00 00 00 00 00  // ................
    7690: 00 18 18 18 18 18 18 18 FF 00 00 00 00 00 00 00  // ................
    76A0: 00 00 00 00 00 00 00 00 FF 18 18 18 18 18 18 18  // ................
    76B0: 18 18 18 18 18 18 18 18 1F 18 18 18 18 18 18 18  // ................
    76C0: 18 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    76D0: 00 18 18 18 18 18 18 18 FF 18 18 18 18 18 18 18  // ................
    76E0: 18 18 18 18 18 18 1F 18 1F 18 18 18 18 18 18 18  // ................
    76F0: 18 36 36 36 36 36 36 36 37 36 36 36 36 36 36 36  // .666666676666666
    7700: 36 36 36 36 36 36 37 30 3F 00 00 00 00 00 00 00  // 66666670?.......
    7710: 00 00 00 00 00 00 3F 30 37 36 36 36 36 36 36 36  // ......?076666666
    7720: 36 36 36 36 36 36 F7 00 FF 00 00 00 00 00 00 00  // 666666..........
    7730: 00 00 00 00 00 00 FF 00 F7 36 36 36 36 36 36 36  // .........6666666
    7740: 36 36 36 36 36 36 37 30 37 36 36 36 36 36 36 36  // 6666667076666666
    7750: 36 00 00 00 00 00 FF 00 FF 00 00 00 00 00 00 00  // 6...............
    7760: 00 36 36 36 36 36 F7 00 F7 36 36 36 36 36 36 36  // .66666...6666666
    7770: 36 18 18 18 18 18 FF 00 FF 00 00 00 00 00 00 00  // 6...............
    7780: 00 36 36 36 36 36 36 36 FF 00 00 00 00 00 00 00  // .6666666........
    7790: 00 00 00 00 00 00 FF 00 FF 18 18 18 18 18 18 18  // ................
    77A0: 18 00 00 00 00 00 00 00 FF 36 36 36 36 36 36 36  // .........6666666
    77B0: 36 36 36 36 36 36 36 36 3F 00 00 00 00 00 00 00  // 66666666?.......
    77C0: 00 18 18 18 18 18 1F 18 1F 00 00 00 00 00 00 00  // ................
    77D0: 00 00 00 00 00 00 1F 18 1F 18 18 18 18 18 18 18  // ................
    77E0: 18 00 00 00 00 00 00 00 3F 36 36 36 36 36 36 36  // ........?6666666
    77F0: 36 36 36 36 36 36 36 36 FF 36 36 36 36 36 36 36  // 66666666.6666666
    7800: 36 18 18 18 18 18 FF 18 FF 18 18 18 18 18 18 18  // 6...............
    7810: 18 18 18 18 18 18 18 18 F8 00 00 00 00 00 00 00  // ................
    7820: 00 00 00 00 00 00 00 00 1F 18 18 18 18 18 18 18  // ................
    7830: 18 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    7840: FF 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF  // ................
    7850: FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    7860: F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    7870: 0F FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00  // ................
    7880: 00 00 00 00 00 76 DC D8 D8 D8 D8 DC 76 00 00 00  // .....v......v...
    7890: 00 00 00 78 CC CC D8 FC C6 C6 C6 C6 CC 00 00 00  // ...x............
    78A0: 00 00 00 FE 66 62 60 60 60 60 60 60 60 00 00 00  // ....fb```````...
    78B0: 00 00 00 00 00 00 FE 6C 6C 6C 6C 6C 6C 00 00 00  // .......llllll...
    78C0: 00 00 00 FE C6 62 30 18 18 30 62 C6 FE 00 00 00  // .....b0..0b.....
    78D0: 00 00 00 00 00 00 7E D8 CC CC CC D8 70 00 00 00  // ......~.....p...
    78E0: 00 00 00 00 00 66 66 66 66 66 7C 60 C0 80 00 00  // .....fffff|`....
    78F0: 00 00 00 00 00 00 76 DC 18 18 18 18 18 00 00 00  // ......v.........
    7900: 00 00 00 FE 38 38 6C C6 C6 6C 38 38 FE 00 00 00  // ....88l..l88....
    7910: 00 00 00 00 38 6C C6 C6 FE C6 C6 6C 38 00 00 00  // ....8l.....l8...
    7920: 00 00 00 38 6C C6 C6 C6 C6 6C 6C 6C EE 00 00 00  // ...8l....lll....
    7930: 00 00 00 3E 60 60 3C 66 C6 C6 C6 CC 78 00 00 00  // ...>``<f....x...
    7940: 00 00 00 00 00 00 7E DB DB DB 7E 00 00 00 00 00  // ......~...~.....
    7950: 00 00 00 02 06 7C CE DE F6 F6 7C 60 C0 00 00 00  // .....|....|`....
    7960: 00 00 00 00 1C 30 60 60 7C 60 60 30 1C 00 00 00  // .....0``|``0....
    7970: 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 C6 00 00 00  // ...|............
    7980: 00 00 00 00 00 FE 00 00 FE 00 00 FE 00 00 00 00  // ................
    7990: 00 00 00 00 00 18 18 7E 18 18 00 00 7E 00 00 00  // .......~....~...
    79A0: 00 00 00 30 18 0C 06 0C 18 30 00 00 7E 00 00 00  // ...0.....0..~...
    79B0: 00 00 00 0C 18 30 60 30 18 0C 00 00 7E 00 00 00  // .....0`0....~...
    79C0: 00 00 00 00 00 0C 1E 1A 18 18 18 18 18 18 18 18  // ................
    79D0: 18 18 18 18 18 18 18 18 18 18 18 58 78 30 00 00  // ...........Xx0..
    79E0: 00 00 00 00 00 18 18 00 7E 00 18 18 00 00 00 00  // ........~.......
    79F0: 00 00 00 00 00 00 00 76 DC 00 76 DC 00 00 00 00  // .......v..v.....
    7A00: 00 00 00 78 CC CC 78 00 00 00 00 00 00 00 00 00  // ...x..x.........
    7A10: 00 00 00 00 00 00 00 00 18 18 00 00 00 00 00 00  // ................
    7A20: 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00  // ................
    7A30: 00 00 00 1F 18 18 18 18 18 D8 D8 78 38 18 00 00  // ...........x8...
    7A40: 00 00 00 D8 6C 6C 6C 6C 6C 00 00 00 00 00 00 00  // ....lllll.......
    7A50: 00 00 00 70 D8 18 30 60 F8 00 00 00 00 00 00 00  // ...p..0`........
    7A60: 00 00 00 00 00 00 7E 7E 7E 7E 7E 7E 00 00 00 00  // ......~~~~~~....
    7A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7A80: 00 1D 00 00 00 00 00 24 66 FF 66 24 00 00 00 00  // .......$f.f$....
    7A90: 00 00 2F 00 00 00 01 03 06 0C 18 30 60 C0 80 00  // ../........0`...
    7AA0: 00 00 00 30 00 00 7E C3 C3 C3 DB DB C3 C3 C3 7E  // ...0..~........~
    7AB0: 00 00 00 00 4D 00 00 C3 C3 E7 FF FF DB DB C3 C3  // ....M...........
    7AC0: C3 00 00 00 00 54 00 00 FF 99 18 18 18 18 18 18  // .....T..........
    7AD0: 18 3C 00 00 00 00 56 00 00 C3 C3 C3 C3 C3 C3 C3  // .<....V.........
    7AE0: 66 3C 18 00 00 00 00 57 00 00 C3 C3 C3 C3 DB DB  // f<.....W........
    7AF0: DB DB FF 66 00 00 00 00 58 00 00 C3 C3 C3 66 3C  // ...f....X.....f<
    7B00: 3C 66 C3 C3 C3 00 00 00 00 59 00 00 C3 C3 C3 C3  // <f.......Y......
    7B10: 66 3C 18 18 18 3C 00 00 00 00 5C 00 00 00 80 C0  // f<...<....\.....
    7B20: 60 30 18 0C 06 03 01 00 00 00 00 6D 00 00 00 00  // `0.........m....
    7B30: 00 66 FF DB DB DB C3 C3 00 00 00 00 76 00 00 00  // .f..........v...
    7B40: 00 00 C3 C3 C3 C3 66 3C 18 00 00 00 00 77 00 00  // ......f<.....w..
    7B50: 00 00 00 C3 C3 DB DB DB FF 66 00 00 00 00 00 00  // .........f......
    7B60: 19 6A C3 0B DB 74 03 E9 46 01 57 32 C0 B9 40 00  // .j...t..F.W2..@.
    7B70: F3 AA 5F BB E6 97 26 89 1D 26 8C 4D 02 2E 8E 1E  // .._...&..&.M....
    7B80: 7A 1B 57 BE 49 04 B9 1E 00 83 C7 04 FC 8A 04 26  // z.W.I..........&
    7B90: 88 05 46 47 E2 F7 5F A0 84 04 FE C0 26 88 45 22  // ..FG.._.....&.E"
    7BA0: A1 85 04 26 89 45 23 57 E8 D9 1B 5F 26 88 5D 25  // ...&.E#W..._&.]%
    7BB0: 26 88 7D 26 8A 1E 49 04 E8 FC 05 74 05 80 FB 13  // &.}&..I....t....
    7BC0: 7F 1D 32 FF D1 E3 2E 8A 87 BE 97 32 E4 0A C0 74  // ..2........2...t
    7BD0: 01 40 26 89 45 27 2E 8A 87 BF 97 26 88 45 29 A1  // .@&.E'.....&.E).
    7BE0: 85 04 8A 16 84 04 FE C2 F6 E2 B2 00 3D C8 00 7E  // ............=..~
    7BF0: 15 B2 01 3D 5E 01 7E 0E B2 02 3D 90 01 7E 07 B2  // ...=^.~...=..~..
    7C00: 03 3D E0 01 7E 00 26 88 55 2A 8A 26 87 04 8A C4  // .=..~.&.U*.&....
    7C10: 24 01 C0 E0 04 80 E4 02 D0 E4 0A E0 80 F4 10 A0  // $...............
    7C20: 89 04 24 0A 0A E0 E8 94 08 B2 C0 B0 30 EE 42 EC  // ..$.........0.B.
    7C30: 24 08 C0 E0 02 0A C4 0C 01 26 88 45 2D B0 03 26  // $........&.E-..&
    7C40: 88 45 31 E8 77 08 1E 06 32 D2 C4 1E A8 04 8C C1  // .E1.w...2.......
    7C50: 8C CE 3B CE 74 34 26 C5 77 04 8C D9 0B F1 74 03  // ..;.t4&.w.....t.
    7C60: 80 CA 10 26 C5 77 0C 8C D9 0B F1 74 03 80 CA 08  // ...&.w.....t....
    7C70: 26 C5 77 08 8C D9 0B F1 74 03 80 CA 04 26 C5 77  // &.w.....t....&.w
    7C80: 10 8C D9 0B F1 74 03 80 CA 01 07 1F 26 88 55 32  // .....t......&.U2
    7C90: B0 03 BA C4 03 E8 E4 04 8A E0 C0 EC 02 8A D4 8A  // ................
    7CA0: F2 D0 EE 81 E2 04 04 25 03 03 0B C2 26 89 45 2B  // .......%....&.E+
    7CB0: 8B EC C6 46 1A 1B C3 0A C0 74 0F FE C8 74 36 FE  // ...F.....t...t6.
    7CC0: C8 74 56 8B EC C6 46 1A 00 C3 B8 20 00 F6 C1 01  // .tV...F.... ....
    7CD0: 74 03 83 C0 60 F6 C1 02 74 03 83 C0 3A F6 C1 04  // t...`...t...:...
    7CE0: 74 03 05 03 03 83 C0 3F C1 E8 06 8B EC 89 46 0E  // t......?......F.
    7CF0: C6 46 1A 1C C3 8B FB 83 C7 20 F6 C1 01 74 03 E8  // .F....... ...t..
    7D00: 85 00 F6 C1 02 74 03 E8 EF 00 F6 C1 04 74 03 E8  // .....t.......t..
    7D10: F8 01 8B EC C6 46 1A 1C C3 F6 C1 01 74 06 E8 16  // .....F......t...
    7D20: 15 E8 25 01 F6 C1 02 74 03 E8 85 01 F6 C1 04 74  // ..%....t.......t
    7D30: 03 E8 12 02 EB DC 8A C4 EE 42 EC AA FE C4 4A E2  // .........B....J.
    7D40: F5 C3 E8 6B 04 BD C0 03 B9 15 00 32 E4 EC 87 EA  // ...k.......2....
    7D50: 8A C4 EE 42 EC AA FE C4 4A 87 EA E2 F0 EC 87 EA  // ...B....J.......
    7D60: B0 20 EE C3 26 8A 05 88 04 47 46 E2 F7 C3 26 8A  // . ..&....GF...&.
    7D70: 25 EF 47 FE C0 E2 F7 C3 B2 C0 8A C4 EE 26 8A 05  // %.G..........&..
    7D80: 47 FE C4 EE E2 F4 C3 9C FA 51 57 8B C7 2B C3 26  // G........QW..+.&
    7D90: 89 07 8B F7 E8 0A 04 EC 26 88 44 01 26 89 54 41  // ........&.D.&.TA
    7DA0: B2 CE EC 26 88 44 02 B2 CC EC 26 88 44 09 B2 CA  // ...&.D....&.D...
    7DB0: EC 26 88 44 04 B2 C4 EC 26 88 04 83 C7 05 B9 04  // .&.D....&.......
    7DC0: 00 B4 01 E8 70 FF 26 8A 04 EE 8B FE 83 C7 0A 26  // ....p.&........&
    7DD0: 8B 54 41 32 E4 B9 19 00 E8 5B FF 26 8A 44 01 EE  // .TA2.....[.&.D..
    7DE0: E8 5F FF B2 CE 32 E4 B9 09 00 E8 49 FF 26 8A 44  // ._...2.....I.&.D
    7DF0: 02 EE 5F 59 83 C7 60 9D C3 9C FA 8B C7 2B C3 26  // .._Y..`......+.&
    7E00: 89 47 02 51 57 2E 8E 1E 7A 1B A0 10 04 24 30 AA  // .G.QW...z....$0.
    7E10: BE 49 04 B9 1E 00 F3 A4 BE 84 04 B1 07 F3 A4 BE  // .I..............
    7E20: A8 04 B1 04 F3 A4 BE 14 00 B1 04 F3 A4 BE 74 00  // ..............t.
    7E30: B1 04 F3 A4 BE 7C 00 B1 04 F3 A4 BE 0C 01 B1 04  // .....|..........
    7E40: F3 A4 5F 59 83 C7 3A 9D C3 9C FA 26 8B 3F 03 FB  // .._Y..:....&.?..
    7E50: 8B F7 51 8B FE 83 C7 05 BA C4 03 B8 00 01 EF B0  // ..Q.............
    7E60: 01 B9 04 00 E8 07 FF 47 B2 C2 26 8A 44 09 EE B2  // .......G..&.D...
    7E70: C4 B8 00 03 EF 26 8A 04 EE 26 8B 54 41 B8 11 00  // .....&...&.TA...
    7E80: EF B1 19 32 C0 E8 E6 FE 26 8A 44 01 EE 80 C2 06  // ...2....&.D.....
    7E90: 26 8A 44 04 EE EC B1 15 32 E4 E8 DB FE B0 20 EE  // &.D.....2..... .
    7EA0: B1 09 32 C0 B2 CE E8 C5 FE 26 8A 44 02 EE 59 9D  // ..2......&.D..Y.
    7EB0: C3 9C FA 26 8B 7F 02 03 FB 06 51 2E 8E 1E 7A 1B  // ...&......Q...z.
    7EC0: 26 8A 05 80 26 10 04 CF 08 06 10 04 47 BE 49 04  // &...&.......G.I.
    7ED0: B9 1E 00 E8 8E FE BE 84 04 B1 07 E8 86 FE BE A8  // ................
    7EE0: 04 B1 04 E8 7E FE BE 14 00 B1 04 E8 76 FE BE 74  // ....~.......v..t
    7EF0: 00 B1 04 E8 6E FE BE 7C 00 B1 04 E8 66 FE BE 0C  // ....n..|....f...
    7F00: 01 B1 04 E8 5E FE 59 07 9D C3 9C FA 8B C7 2B C3  // ....^.Y.......+.
    7F10: 26 89 47 04 E8 A6 05 B2 C0 B0 34 EE 42 EC 26 88  // &.G.......4.B.&.
    7F20: 05 BA C8 03 EC 26 88 45 01 50 4A 4A EC 26 88 45  // .....&.E.PJJ.&.E
    7F30: 02 83 C7 03 B9 00 03 42 32 C0 EE 42 42 EC AA E2  // .......B2..BB...
    7F40: FC 58 4A EE 9D C3 9C FA 26 8B 77 04 03 F3 E8 6C  // .XJ.....&.w....l
    7F50: 05 B2 C0 B0 34 EE 26 8A 04 EE BA C6 03 26 8A 44  // ....4.&......&.D
    7F60: 02 EE 56 42 42 83 C6 03 32 C0 EE 42 B9 00 03 26  // ..VBB...2..B...&
    7F70: 8A 04 EE 46 E2 F9 5E FE CA 26 8A 44 01 EE 9D C3  // ...F..^..&.D....
    7F80: BA CC 03 EC 24 FE 0A C4 B2 C2 EE C3 E8 A8 12 B2  // ....$...........
    7F90: C0 86 C4 EE EB 00 EB 00 86 C4 EE EB 00 EB 00 B0  // ................
    7FA0: 20 EE C3 50 8A E0 80 E4 80 80 26 87 04 7F 08 26  //  ..P......&....&
    7FB0: 87 04 24 7F 8A E0 3C 07 7E 1E 26 F6 47 33 01 75  // ..$...<.~.&.G3.u
    7FC0: 17 3C 23 74 13 3C 32 74 0F 3C 33 74 0B B4 03 26  // .<#t.<2t.<3t...&
    7FD0: F6 47 09 01 75 02 B4 07 88 26 49 04 BA B4 03 80  // .G..u....&I.....
    7FE0: 0E 87 04 02 26 F6 47 09 01 74 07 B2 D4 80 26 87  // ....&.G..t....&.
    7FF0: 04 FD 89 16 63 04 C7 06 4E 04 00 00 C6 06 62 04  // ....c...N.....b.
    8000: 00 B9 08 00 BF 50 04 FC 06 1E 07 33 C0 F3 AB 07  // .....P.....3....
    8010: 26 8A 07 32 E4 A3 4A 04 26 8A 47 01 A2 84 04 26  // &..2..J.&.G....&
    8020: 8A 47 02 A3 85 04 26 8B 47 03 A3 4C 04 26 8B 47  // .G....&.G..L.&.G
    8030: 14 86 C4 A3 60 04 58 C3 52 32 E4 33 D2 B0 0D CD  // ....`.X.R2.3....
    8040: 17 F6 C4 29 75 08 32 E4 33 D2 B0 0A CD 17 5A C3  // ...)u.2.3.....Z.
    8050: 06 1E 60 2E 8E 1E 7A 1B 2E 83 0E 84 1B 00 75 6E  // ..`...z.......un
    8060: 80 3E 00 05 01 74 67 C6 06 00 05 01 8A 1E 62 04  // .>...tg.......b.
    8070: 32 FF D1 E3 8B FB 8B 85 50 04 8A 3E 62 04 50 32  // 2.......P..>b.P2
    8080: F6 8A 0E 84 04 32 ED 41 51 8B 0E 4A 04 32 D2 E8  // .....2.AQ..J.2..
    8090: A6 FF F6 C4 29 75 3D 51 52 89 95 50 04 B4 08 E8  // ....)u=QR..P....
    80A0: B6 D4 0A C0 75 02 B0 20 33 D2 32 E4 CD 17 F6 C4  // ....u.. 3.2.....
    80B0: 29 75 1F 5A FE C2 59 E2 DE FE C6 59 E2 CA E8 77  // )u.Z..Y....Y...w
    80C0: FF 32 C0 A2 00 05 58 89 85 50 04 E8 AF 03 61 1F  // .2....X..P....a.
    80D0: 07 CF 5A 59 59 B0 FF EB EA 52 2A F5 38 C6 7D 02  // ..ZYY....R*.8.}.
    80E0: 32 C0 2E 8E 06 7C 1B 5A C3 A0 85 04 F6 E3 8A F7  // 2....|.Z........
    80F0: 8B D8 8B CA BA C4 03 B8 02 0F EF B4 02 E8 6D 00  // ..............m.
    8100: 8B D1 32 ED 8A E6 8A C6 F3 AA 03 FD 8A CA 4B 75  // ..2...........Ku
    8110: F7 32 E4 E8 57 00 C3 53 8A 1E 62 04 0B C0 75 04  // .2..W..S..b...u.
    8120: 0A DB 74 03 E8 35 03 5B 8B F8 2B D1 81 C2 01 01  // ..t..5.[..+.....
    8130: 8A C3 32 E4 C3 8A C6 32 F6 2B EA 0A DB 74 2A 2A  // ..2....2.+...t**
    8140: C3 F6 26 85 04 8B C8 52 B4 01 E8 20 00 B2 C4 B8  // ..&....R... ....
    8150: 02 0F EF 5A 1E 06 1F 8B C1 8B CA F3 A4 03 F5 03  // ...Z............
    8160: FD 48 75 F5 1F E8 81 FF C3 8A D8 EB F8 BA CE 03  // .Hu.............
    8170: B0 05 EE 42 EC 24 FC 0A C4 EE 4A C3 9C FA EE 42  // ...B.$....J....B
    8180: EB 00 EC 4A 9D C3 1E 2E 8E 1E 7A 1B 8B 16 63 04  // ...J......z...c.
    8190: 80 C2 06 1F C3 1E 2E 8E 1E 7A 1B 8B 16 63 04 1F  // .........z...c..
    81A0: C3 50 BA CC 03 EC B2 D4 A8 01 75 02 B2 B4 58 C3  // .P........u...X.
    81B0: E8 EE FF 80 C2 06 C3 1E 2E 8E 1E 7A 1B 80 3E 49  // ...........z..>I
    81C0: 04 03 74 13 80 3E 49 04 02 74 0C 80 3E 49 04 01  // ..t..>I..t..>I..
    81D0: 74 05 80 3E 49 04 00 1F C3 50 2E 8E 06 7E 1B A0  // t..>I....P...~..
    81E0: 10 04 24 30 3C 30 74 05 2E 8E 06 80 1B 58 0B C0  // ..$0<0t......X..
    81F0: 74 03 E8 E1 01 03 06 4E 04 81 C2 01 01 2B D1 32  // t......N.....+.2
    8200: ED 8B 2E 4A 04 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1  // ...J............
    8210: E5 0A DB 75 02 8A DE 38 F3 7E 02 8A DE C3 FC 8A  // ...u...8.~......
    8220: D8 8B C1 E8 B3 FF 03 F0 3A 16 4A 04 74 06 06 1F  // ........:.J.t...
    8230: E8 1B 00 C3 06 1F E8 40 00 C3 FC 8A D8 8A C1 8A  // .......@........
    8240: E6 E8 95 FF F7 DD 2B F0 06 1F E8 01 00 C3 53 8A  // ......+.......S.
    8250: CE 2A CB 32 ED 32 F6 2B EA 2B EA E3 0E 8A E1 8B  // .*.2.2.+.+......
    8260: CA F3 A5 03 F5 03 FD FE CC 75 F4 58 B0 20 8A CA  // .........u.X. ..
    8270: F3 AB 03 FD FE CB 75 F6 C3 53 8A C6 2A C3 74 06  // ......u..S..*.t.
    8280: F6 E2 8B C8 F3 A5 58 8B C8 F6 E2 91 B0 20 F3 AB  // ......X...... ..
    8290: C3 8B D8 E8 2E 00 2E 8E 1E 80 1B 8A C3 22 DF D3  // ............."..
    82A0: E3 A8 80 74 03 30 1C C3 F6 D7 8A 34 22 F7 0A DE  // ...t.0.....4"...
    82B0: 88 1C C3 8A FC E8 0C 00 2E 8E 1E 80 1B 8A 04 D2  // ................
    82C0: E8 22 C7 C3 B0 28 F6 E2 F6 C2 01 74 03 05 D8 1F  // ."...(.....t....
    82D0: 8B F1 C1 EE 02 80 FF 05 7F 0C 03 F0 F6 D1 80 E1  // ................
    82E0: 03 D0 E1 B7 03 C3 D1 EE 03 F0 F6 D1 80 E1 07 B7  // ................
    82F0: 01 C3 FC 8A D8 2E 8E 06 80 1B 8B C1 E8 86 00 75  // ...............u
    8300: 02 8A DE 03 F0 E8 24 00 C3 FC 8A D8 2E 8E 06 80  // ......$.........
    8310: 1B 8A C1 8A E6 E8 6D 00 75 02 8A DE F7 DD 81 C6  // ......m.u.......
    8320: F0 00 81 C7 F0 00 2B F0 E8 01 00 C3 8A CE 2A CB  // ......+.......*.
    8330: E3 2C 51 8A CA 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A  // .,Q..VW.........
    8340: CA 2B F1 2B F9 81 C6 00 20 81 C7 00 20 D1 E9 F3  // .+.+.... ... ...
    8350: A5 13 C9 F3 A4 5F 5E 03 F5 03 FD 59 E2 D4 8A C7  // ....._^....Y....
    8360: 8A E7 8A CA 57 D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B  // ....W..........+
    8370: F9 81 C7 00 20 D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD  // .... ........_..
    8380: FE CB 75 DE C3 E8 B0 00 81 C2 01 01 2B D1 38 F3  // ..u.........+.8.
    8390: 76 02 32 DB 51 B1 02 D2 E6 D2 E3 59 32 ED BD 50  // v.2.Q......Y2..P
    83A0: 00 80 3E 49 04 06 74 04 D0 E2 D1 E0 06 1F 8B F8  // ..>I..t.........
    83B0: 8B F0 B0 50 F6 E3 0A DB C3 52 53 8A DF 32 FF D1  // ...P.....RS..2..
    83C0: E3 8B 87 50 04 E8 0E 00 50 D1 EB A1 4C 04 F7 E3  // ...P....P...L...
    83D0: 5B 03 C3 5B 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6  // [..[Z.R...J...2.
    83E0: 03 C2 D1 E0 5A C3 8B E8 83 E5 0F 2E 8A A6 96 83  // ....Z...........
    83F0: 8B E8 C1 ED 04 83 E5 0F 2E 8A 86 96 83 C3 00 03  // ................
    8400: 0C 0F 30 33 3C 3F C0 C3 CC CF F0 F3 FC FF 26 8B  // ..03<?........&.
    8410: 04 86 E0 BA 00 80 F6 C4 C0 74 02 0A D6 D0 EE C1  // .........t......
    8420: E0 02 75 F2 88 56 00 45 C3 8B 16 63 04 8A C5 86  // ..u..V.E...c....
    8430: E0 EF 8A E1 FE C0 EF C3 52 8B D0 8A C4 F6 26 4A  // ........R.....&J
    8440: 04 C1 E0 02 32 F6 03 C2 5A C3 53 8A DF 32 FF D1  // ....2...Z.S..2..
    8450: E3 8B 87 50 04 D1 EB E8 02 00 5B C3 52 8B D0 32  // ...P......[.R..2
    8460: F6 52 8A C4 F6 26 85 04 F7 26 4A 04 5A 03 C2 0A  // .R...&...&J.Z...
    8470: DB 74 08 03 06 4C 04 FE CB 75 F8 5A C3 52 8B D0  // .t...L...u.Z.R..
    8480: A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 03 06 4E 04 D1  // .J...2.......N..
    8490: F8 8B C8 B4 0E E8 91 FF 5A C3 8B C2 F7 26 4A 04  // ........Z....&J.
    84A0: 8B F9 C1 EF 03 03 F8 0A FF 74 0A 8A C7 32 E4 F7  // .........t...2..
    84B0: 26 4C 04 03 F8 80 E1 07 B4 80 D2 EC C3 E8 F0 FC  // &L..............
    84C0: EC C3 E8 F8 FF B2 C0 B0 20 EE C3 E8 EF FF B2 C0  // ........ .......
    84D0: 32 C0 EE C3 C4 3E A8 04 26 C4 7D 04 8C C5 0B EF  // 2....>..&.}.....
    84E0: C3 53 B0 0E E8 95 FC 8A E0 B0 0F E8 8E FC 8B D8  // .S..............
    84F0: B8 0E AA EF B8 0F 55 EF B0 0E E8 7F FC 3C AA 74  // ......U......<.t
    8500: 0D B0 0F E8 76 FC 3C 55 74 04 32 C0 5B C3 B0 0E  // ....v.<Ut.2.[...
    8510: 8A E7 EF FE C0 8A E3 EF B0 01 0A C0 5B C3 8A EE  // ............[...
    8520: 8A 36 85 04 06 1F 0A DB 74 25 8A C5 2A C3 F6 E6  // .6......t%..*...
    8530: 8B C8 52 32 F6 C1 E2 02 8B C2 D1 E2 2B D5 51 8B  // ..R2........+.Q.
    8540: C8 F3 A5 2B FA 2B F2 59 E2 F4 5A E8 05 00 C3 8A  // ...+.+.Y..Z.....
    8550: DD EB F8 8A C6 F6 E3 8B C8 8A C7 8A E0 32 F6 C1  // .............2..
    8560: E2 02 8B DA D1 E2 8B F1 2B D5 8B CB F3 AB 2B FA  // ........+.....+.
    8570: 4E 75 F7 C3 2E 8E 1E 7A 1B 89 0E 60 04 8A C5 24  // Nu.....z...`...$
    8580: 60 A8 20 74 06 B9 00 1E E9 94 00 F6 06 87 04 01  // `. t............
    8590: 0F 85 8B 00 80 3E 49 04 07 74 06 E8 19 FC 74 01  // .....>I..t....t.
    85A0: C3 F6 06 87 04 08 74 03 CD 42 C3 8A 36 85 04 8A  // ......t..B..6...
    85B0: D6 FE CA 38 CD 7E 1F 0A C9 74 64 8A E9 8A CE FE  // ...8.~...td.....
    85C0: C9 EB 5C 38 D1 74 58 8A CE 80 FD 03 7C 04 8A E9  // ..\8.tX.....|...
    85D0: D0 ED FE C9 EB 49 80 F9 03 7E 44 8A E1 2A E5 0A  // .....I...~D..*..
    85E0: E4 75 0A 38 CA 74 38 FE CA 38 CA 74 32 8A C5 0A  // .u.8.t8..8.t2...
    85F0: C1 38 F0 7E 0A 80 FC 02 7E 12 80 FD 02 7F C8 80  // .8.~....~.......
    8600: FC 03 7D BF 8A D6 FE CA 38 D1 74 13 8A CE FE C9  // ..}.....8.t.....
    8610: FE C9 8A E9 2A EC 80 FE 08 7F 04 FE C1 FE C5 B4  // ....*...........
    8620: 0A E8 05 FE C3 2E 8E 1E 7A 1B A2 62 04 32 E4 8B  // ........z..b.2..
    8630: F0 F7 26 4C 04 A3 4E 04 8B C8 E8 7A FB 74 07 80  // ..&L..N....z.t..
    8640: 3E 49 04 07 77 02 D1 F9 B4 0C E8 DC FD D1 E6 8B  // >I..w...........
    8650: 84 50 04 E8 27 FE C3 2E 8E 1E 7A 1B 8A 26 49 04  // .P..'.....z..&I.
    8660: E8 D2 A8 74 07 C7 06 50 04 00 00 C3 E8 48 FB 74  // ...t...P.....H.t
    8670: 0B 80 FC 07 74 06 77 08 E8 77 FC C3 E8 9F FB C3  // ....t.w..w......
    8680: 80 FC 13 7C 03 74 1F C3 E8 4E FA 8A D8 8B C1 E8  // ...|.t...N......
    8690: 85 FA 8B 2E 4A 04 52 F6 26 85 04 F7 E5 8B F7 03  // ....J.R.&.......
    86A0: F0 5A E8 90 FA C3 E8 30 FA 8A D8 8B C1 E8 67 FA  // .Z.....0......g.
    86B0: C1 E7 03 52 8B 2E 4A 04 C1 E5 03 F7 26 85 04 F7  // ...R..J.....&...
    86C0: E5 8B F7 03 F0 5A E8 55 FE C3 2E 8E 1E 7A 1B 8A  // .....Z.U.....z..
    86D0: 26 49 04 E8 E1 FA 74 0C 80 FC 07 74 07 77 40 80  // &I....t....t.w@.
    86E0: FC 03 7F 04 E8 53 FB C3 E8 1E FC C3 E8 EA F9 8A  // .....S..........
    86F0: D8 8A C1 8A E6 FE C4 E8 1D FA 2B 3E 4A 04 C1 E7  // ..........+>J...
    8700: 03 52 F7 26 85 04 F7 26 4A 04 C1 E0 03 8B F7 2B  // .R.&...&J......+
    8710: F0 5A 8B 2E 4A 04 C1 E5 03 F7 DD E8 00 FE C3 80  // .Z..J...........
    8720: FC 13 7C 03 74 C6 C3 E8 AF F9 8A D8 8A C1 8A E6  // ..|.t...........
    8730: FE C4 E8 E2 F9 52 8B 2E 4A 04 F7 26 85 04 F7 E5  // .....R..J..&....
    8740: 2B FD 8B F7 2B F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E  // +...+.Z.........
    8750: 7A 1B 2E 8E 06 80 1B E8 5D FA 74 11 80 3E 49 04  // z.......].t..>I.
    8760: 07 7C 18 2E 8E 06 7E 1B 74 03 E9 B1 00 E8 49 FC  // .|....~.t.....I.
    8770: 8B D8 26 8B 07 8B EC 89 46 1A C3 A1 50 04 E8 B7  // ..&.....F...P...
    8780: FC 8B F0 BB 08 00 2B E3 8B EC 80 3E 49 04 06 75  // ......+....>I..u
    8790: 1F B9 04 00 26 8A 04 88 46 00 45 26 8A 84 00 20  // ....&...F.E&... 
    87A0: 88 46 00 45 83 C6 50 E2 EB B8 00 02 B2 80 EB 17  // .F.E..P.........
    87B0: D1 E6 B9 04 00 E8 56 FC 81 C6 00 20 E8 4F FC 81  // ......V.... .O..
    87C0: EE B0 1F E2 F0 EB E2 2B EB C4 3E 0C 01 32 F6 80  // .......+..>..2..
    87D0: FB 0E 75 09 26 83 7D FE 10 75 02 B6 80 16 1F 8B  // ..u.&.}..u......
    87E0: F5 8B CB F6 C6 80 74 01 47 56 57 F3 A6 5F 5E 74  // ......t.GVW.._^t
    87F0: 23 FE C0 03 FB F6 C6 80 74 01 47 FE CA 75 E2 FE  // #.......t.G..u..
    8800: CC 74 0F 2E 8E 1E 7A 1B C4 3E 7C 00 B0 80 B2 80  // .t....z..>|.....
    8810: EB CB 32 C0 8B E5 03 E3 8B EC 89 46 1A C3 80 3E  // ..2........F...>
    8820: 49 04 13 7C 05 75 02 EB 5A C3 2E 8E 06 7C 1B E8  // I..|.u..Z....|..
    8830: 18 FC 8B F0 8B 1E 85 04 2B E3 8B EC B8 05 08 B9  // ........+.......
    8840: 05 00 BA CE 03 80 3E 49 04 0F 72 1A F6 06 87 04  // ......>I..r.....
    8850: 60 75 13 B4 0A F7 C6 01 00 75 02 B4 05 B0 07 EF  // `u.......u......
    8860: B8 05 18 B9 05 01 EF 51 8B CB 26 8A 04 F6 D0 88  // .......Q..&.....
    8870: 46 00 45 03 36 4A 04 E2 F1 58 EF B8 00 01 32 D2  // F.E.6J...X....2.
    8880: E9 44 FF 2E 8E 06 7C 1B A1 50 04 8B D0 32 F6 52  // .D....|..P...2.R
    8890: 8A C4 32 E4 F7 26 4A 04 F7 26 85 04 5A 03 C2 8B  // ..2..&J..&..Z...
    88A0: F0 8B 1E 85 04 2B E3 8B EC 53 8B 3E 4A 04 4F C1  // .....+...S.>J.O.
    88B0: E7 03 C1 E6 03 B9 08 00 32 E4 26 8A 04 D0 E4 0A  // ........2.&.....
    88C0: C0 74 03 80 CC 01 46 E2 F1 88 66 00 45 03 F7 4B  // .t....F...f.E..K
    88D0: 75 E3 5B B8 00 01 32 D2 E9 EC FE 33 ED EB 03 BD  // u.[...2....3....
    88E0: 01 00 2E 8E 1E 7A 1B 2E 8E 06 80 1B 8A 26 49 04  // .....z.......&I.
    88F0: E8 C4 F8 74 0F 2E 8E 06 7E 1B 80 FC 07 74 05 7C  // ...t....~....t.|
    8900: 3D E9 0B 02 8A E3 8B F0 8A DF 32 FF D1 E3 8B 87  // =.........2.....
    8910: 50 04 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 8B F8 D1  // P....J...2......
    8920: E7 0A DB 74 0B D0 EB A1 4C 04 03 F8 FE CB 75 FA  // ...t....L.....u.
    8930: 8B C6 0B ED 75 03 F3 AB C3 AA 47 E2 FC C3 50 2E  // ....u.....G...P.
    8940: 8E 06 80 1B A1 50 04 E8 EE FA 8B F8 A0 50 04 8A  // .....P.......P..
    8950: 26 4A 04 8B E8 58 A8 80 74 08 24 7F C5 36 7C 00  // &J...X..t.$..6|.
    8960: EB 04 C5 36 0C 01 8A FC 32 E4 C1 E0 03 03 F0 80  // ...6....2.......
    8970: FF 06 74 69 D1 E7 8A F3 B0 55 80 E3 03 F6 E3 8A  // ..ti.....U......
    8980: D8 8A F8 8B C5 50 B2 04 F6 C6 80 75 27 AC E8 55  // .....P.....u'..U
    8990: FA 23 C3 AB AC E8 4E FA 23 C3 26 89 85 FE 1F 83  // .#....N.#.&.....
    89A0: C7 4E FE CA 75 E7 83 EE 08 81 EF 3E 01 58 E8 72  // .N..u......>.X.r
    89B0: 00 E2 D2 C3 AC E8 2E FA 23 C3 26 31 05 AC E8 25  // ........#.&1...%
    89C0: FA 23 C3 26 31 85 00 20 83 C7 50 FE CA 75 E5 83  // .#.&1.. ..P..u..
    89D0: EE 08 81 EF 3E 01 58 E8 49 00 E2 A9 C3 8B C5 50  // ....>.X.I......P
    89E0: B2 04 F6 C3 80 74 1F AC 26 30 05 AC 26 30 85 00  // .....t..&0..&0..
    89F0: 20 83 C7 50 FE CA 7F EF 83 EE 08 81 EF 3F 01 58  //  ..P.........?.X
    8A00: E8 20 00 E2 DA C3 AC AA AC 26 88 85 FF 1F 83 C7  // . .......&......
    8A10: 4F FE CA 7F F1 83 EE 08 81 EF 3F 01 58 E8 03 00  // O.........?.X...
    8A20: E2 BD C3 FE C0 38 E0 72 06 32 C0 81 C7 F0 00 C3  // .....8.r.2......
    8A30: 8A 16 85 04 F6 E2 8B F0 32 F6 8B EA 66 0F B6 06  // ........2...f...
    8A40: 51 04 F6 E2 66 0F B7 16 4A 04 83 FA 64 75 03 BA  // Q...f...J...du..
    8A50: 68 00 83 FA 5A 75 03 BA 60 00 81 FA AF 00 75 03  // h...Zu..`.....u.
    8A60: BA B0 00 52 F7 E2 66 0F B7 F8 66 0F B6 06 50 04  // ...R..f...f...P.
    8A70: 66 03 F8 66 C1 CF 10 03 FA 66 C1 C7 03 81 CF 00  // f..f.....f......
    8A80: FF 66 C1 C7 10 5A 8A E2 4A C1 E2 03 A0 50 04 50  // .f...Z..J....P.P
    8A90: C5 06 0C 01 03 F0 2E 8E 06 7C 1B 58 57 51 50 9C  // .........|.XWQP.
    8AA0: FC 8B CD E8 3B 00 B5 08 AC 8A E0 8A C7 D0 E4 73  // ....;..........s
    8AB0: 02 8A C3 26 88 05 66 47 FE CD 75 EF 66 03 FA E2  // ...&..fG..u.f...
    8AC0: E2 9D 58 59 5F 83 C7 08 FE C0 38 E0 72 0E 51 32  // ..XY_.....8.r.Q2
    8AD0: C0 8B CD 49 03 FA 83 C7 08 E2 F9 59 2B F5 E2 BC  // ...I.......Y+...
    8AE0: C3 06 52 33 C0 8E C0 66 C1 C7 10 8B C7 66 C1 C7  // ..R3...f.....f..
    8AF0: 10 E8 41 A4 74 16 38 E0 74 12 0F B6 D0 E8 91 C9  // ..A.t.8.t.......
    8B00: 8A E0 66 C1 C7 10 8B F8 66 C1 C7 10 5A 07 C3 80  // ..f.....f...Z...
    8B10: FC 13 7C 0B 0F 84 18 FF 80 FC 62 0F 84 11 FF E8  // ..|.......b.....
    8B20: 01 00 C3 80 FC 11 75 06 80 E3 80 80 CB 0F 50 53  // ......u.......PS
    8B30: 8A DF 32 FF D1 E3 8B 97 50 04 5B 2E 8E 06 7C 1B  // ..2.....P.[...|.
    8B40: E8 07 F9 8B F8 8B 2E 85 04 58 32 F6 52 8B 36 4A  // .........X2.R.6J
    8B50: 04 56 8A 26 85 04 C5 36 0C 01 80 FC 0E 75 09 83  // .V.&...6.....u..
    8B60: 7C FE 10 75 03 B4 10 46 F6 E4 03 F0 B6 03 F6 C3  // |..u...F........
    8B70: 80 75 6D B2 C4 B8 02 0F EF 5A 58 50 52 4A 8A E0  // .um......ZXPRJ..
    8B80: 57 51 51 57 8B CD 32 C0 AA 03 FA E2 FB 5F 47 FE  // WQQW..2......_G.
    8B90: C4 38 D4 76 0A 32 E4 8B CD 49 03 FA 47 E2 FB 59  // .8.v.2...I..G..Y
    8BA0: E2 E0 59 5F BA C4 03 B0 02 8A E3 EF 5B 4B 5A 51  // ..Y_........[KZQ
    8BB0: 57 8B CD AC 26 8A 25 AA 03 FB E2 F7 5F 47 2B F5  // W...&.%....._G+.
    8BC0: 42 3B D3 76 0A 33 D2 8B CD 49 03 FB 47 E2 FB 59  // B;.v.3...I..G..Y
    8BD0: E2 DD BA CE 03 B8 03 00 EF B2 C4 B8 02 0F EF C3  // ................
    8BE0: B2 CE B8 03 18 EF EB BC 2E 8E 1E 7A 1B 80 3E 63  // ...........z..>c
    8BF0: 04 B4 74 0B BA CC 03 EC A8 01 75 04 CD 42 C3 C3  // ..t.......u..B..
    8C00: E8 D1 F8 0A FF 75 1C 8A E3 80 E4 1F 80 26 66 04  // .....u.......&f.
    8C10: E0 08 26 66 04 E8 2D 00 8A 1E 66 04 80 E3 20 B1  // ..&f..-...f... .
    8C20: 05 D2 EB E8 91 F5 74 19 A0 66 04 24 DF 80 E3 01  // ......t..f.$....
    8C30: 74 02 0C 20 A2 66 04 24 10 0C 02 0A D8 E8 53 00  // t.. .f.$......S.
    8C40: C3 E8 7E F8 C3 53 50 80 E3 0F 8A FB D0 E3 81 E3  // ..~..SP.........
    8C50: 10 07 0A DF E8 60 F5 74 0E B4 00 8A C3 E8 2C F3  // .....`.t......,.
    8C60: 0B ED 74 03 26 88 1D 8A C3 E8 0B 00 0B ED 74 04  // ..t.&.........t.
    8C70: 26 88 5D 10 58 5B C3 8A E0 1E 2E 8E 1E 7A 1B 80  // &.].X[.......z..
    8C80: 3E 49 04 33 1F 7F 08 8A C4 B4 11 E8 FE F2 C3 E8  // >I.3............
    8C90: 30 F8 C3 9C FA E8 9F 05 B2 C0 B9 03 00 B4 01 8A  // 0...............
    8CA0: C4 EE 8A C3 EE 0B ED 74 04 47 26 88 1D FE C4 80  // .......t.G&.....
    8CB0: C3 02 E2 EB B0 20 EE 9D C3 2E 8E 1E 7A 1B 8A 26  // ..... ......z..&
    8CC0: 49 04 E8 F2 F4 74 0A 80 FC 07 77 06 74 03 E8 C0  // I....t....w.t...
    8CD0: F5 C3 80 FC 13 7C 03 74 4C C3 8A D8 E8 BB F7 BA  // .....|.tL.......
    8CE0: CE 03 B0 08 EF 2E 8E 1E 7C 1B F6 C3 80 75 1C B2  // ........|....u..
    8CF0: C4 B8 02 FF EF 8A 25 C6 05 00 8A E3 EF 8A 25 B4  // ......%.......%.
    8D00: FF 88 25 EF B2 CE B8 08 FF EF C3 B8 03 18 EF B2  // ..%.............
    8D10: C4 B0 02 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8  // .......%...%....
    8D20: 03 00 EF EB E1 50 2E 8E 06 7C 1B A1 4A 04 C1 E0  // .....P...|..J...
    8D30: 03 F7 E2 03 C1 8B F8 58 26 88 05 C3 2E 8E 1E 7A  // .......X&......z
    8D40: 1B 8A 26 49 04 E8 6F F4 74 0F 80 FC 07 77 0B 74  // ..&I..o.t....w.t
    8D50: 08 E8 5F F5 8B EC 89 46 1A C3 80 FC 13 7C 03 74  // .._....F.....|.t
    8D60: 29 C3 E8 35 F7 8A CC 2E 8E 1E 7C 1B BA CE 03 32  // )..5......|....2
    8D70: FF B8 04 03 EF D0 E7 8A 1D 22 D9 74 03 80 CF 01  // .........".t....
    8D80: FE CC 7D F0 8B EC 88 7E 1A C3 A1 4A 04 C1 E0 03  // ..}....~...J....
    8D90: F7 E2 03 C1 8B F8 2E 8E 1E 7C 1B 8A 05 8B EC 88  // .........|......
    8DA0: 46 1A C3 2E 8E 1E 7A 1B 8A 3E 62 04 8A CF D0 E1  // F.....z..>b.....
    8DB0: 32 ED BE 50 04 03 F1 8B 14 8A 0E 49 04 3C 0D 76  // 2..P.......I.<.v
    8DC0: 4A 2E 8E 06 80 1B E8 EE F3 75 33 8A 1E 4A 04 8A  // J........u3..J..
    8DD0: F8 8A C6 F6 E3 8A CA 03 C8 D1 E1 03 0E 4E 04 8B  // .............N..
    8DE0: F9 8A C7 AA D1 E9 41 FE C2 38 DA 73 59 89 14 8B  // ......A..8.sY...
    8DF0: 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF C3 2E 8E  // .c..............
    8E00: 06 7E 1B 80 F9 07 74 C3 E9 83 00 75 04 32 D2 EB  // .~....t....u.2..
    8E10: 0F 3C 0A 75 1D 3A 36 84 04 75 03 E9 93 00 FE C6  // .<.u.:6..u......
    8E20: 89 14 E8 92 F3 75 05 80 F9 07 7F 05 8B C2 E8 4C  // .....u.........L
    8E30: F6 C3 3C 07 75 04 E8 EF 8F C3 3C 08 75 83 0A D2  // ..<.u.....<.u...
    8E40: 74 DE FE CA EB DA 32 FF 32 D2 2B CB 3A 36 84 04  // t.....2.2.+.:6..
    8E50: 74 06 FE C6 03 CB EB 95 89 14 8B 16 63 04 B0 0E  // t...........c...
    8E60: 8A E5 EF 8A E1 FE C0 EF 2B FB 2B FB 26 8A 65 02  // ........+.+.&.e.
    8E70: 50 8B 3E 4E 04 8B F3 D1 E6 03 F7 A0 84 04 F6 E3  // P.>N............
    8E80: 8B C8 06 1F F3 A5 8B CB 58 B0 20 F3 AB C3 B9 01  // ........X. .....
    8E90: 00 B4 0A E8 C2 C6 FE C2 3A 16 4A 04 74 03 89 14  // ........:.J.t...
    8EA0: C3 32 FF 32 D2 89 14 3A 36 84 04 74 2E FE C6 EB  // .2.2...:6..t....
    8EB0: ED 89 14 2E 8E 06 80 1B E8 FC F2 74 0E 2E 8E 06  // ...........t....
    8EC0: 7E 1B 80 F9 07 74 04 32 FF EB 10 8B C2 E8 AD F5  // ~....t.2........
    8ED0: 8B F9 D1 E7 4F 8B 1E 4A 04 EB 91 33 C9 8A 36 84  // ....O..J...3..6.
    8EE0: 04 8A 16 4A 04 FE CA B0 01 E9 70 F7 2E 8E 1E 7A  // ...J......p....z
    8EF0: 1B F6 06 87 04 08 74 03 CD 42 C3 E8 76 F6 8B EC  // ......t..B..v...
    8F00: C6 46 1B 00 C3 2E 8E 1E 7A 1B 8A DF 32 FF D1 E3  // .F......z...2...
    8F10: 89 97 50 04 D0 EB 38 1E 62 04 75 05 8B C2 E8 5C  // ..P...8.b.u....\
    8F20: F5 C3 2E 8E 1E 7A 1B 8A DF 32 FF D1 E3 8B 97 50  // .....z...2.....P
    8F30: 04 8B 0E 60 04 8B EC 89 4E 16 89 56 12 C3 2E 8E  // ...`....N..V....
    8F40: 1E 7A 1B A0 87 04 24 80 0A 06 49 04 8A 26 4A 04  // .z....$...I..&J.
    8F50: F6 06 87 04 08 75 2D E8 5D F2 74 07 80 3E 49 04  // .....u-.].t..>I.
    8F60: 07 7F 21 51 8A CC 8A 2E 84 04 BE 2F 8F 81 FE 38  // ..!Q......./...8
    8F70: 8F 74 10 2E 3B 0C 74 05 83 C6 03 EB F0 24 80 2E  // .t..;.t......$..
    8F80: 0A 44 02 59 8A 3E 62 04 8B EC 89 46 1A 89 5E 0E  // .D.Y.>b....F..^.
    8F90: 89 4E 16 89 56 12 C3 84 18 23 84 2B 33 84 2A 32  // .N..V....#.+3.*2
    8FA0: 2E 8E 1E 7A 1B 3C 04 7F 1B 50 52 BA CC 03 EC A8  // ...z.<...PR.....
    8FB0: 01 5A 58 74 08 80 3E 63 04 D4 74 08 C3 80 3E 63  // .ZXt..>c..t...>c
    8FC0: 04 B4 75 F8 3C 1C 73 F4 32 E4 8B E8 D1 E5 2E FF  // ..u.<.s.2.......
    8FD0: A6 6B 8F A3 8F C3 8F D5 8F 0A 90 54 8F 54 8F 54  // .k.........T.T.T
    8FE0: 8F 2F 90 47 90 4B 90 54 8F 54 8F 54 8F 54 8F 54  // ./.G.K.T.T.T.T.T
    8FF0: 8F 54 8F 79 90 54 8F 7D 90 98 90 54 8F D7 90 54  // .T.y.T.}...T...T
    9000: 8F E5 90 00 91 07 91 13 91 37 91 80 3E 49 04 13  // .........7..>I..
    9010: 74 15 E8 BF F4 8B C3 86 E0 E8 70 EF 0B ED 74 07  // t.........p...t.
    9020: 8A C7 32 FF 26 88 01 E8 93 F4 C3 E8 A6 F4 8A C7  // ..2.&...........
    9030: E8 44 FC 0B ED 74 F0 26 88 7D 11 EB EA 80 3E 49  // .D...t.&.}....>I
    9040: 04 13 74 E3 06 E8 8C F4 1F 0B ED 74 07 8B F2 B9  // ..t........t....
    9050: 11 00 F3 A4 8B F2 E8 DE 01 32 E4 B9 10 00 B2 C0  // .........2......
    9060: 9C FA 8A C4 EE AC EE 9D FE C4 E2 F4 AC E8 07 FC  // ................
    9070: EB B5 80 FB 01 77 B0 E8 43 F4 B2 C0 B0 30 E8 FB  // .....w..C....0..
    9080: F0 24 F7 80 26 65 04 DF 80 FB 00 74 07 0C 08 80  // .$..&e.....t....
    9090: 0E 65 04 20 EE EB 90 E8 9D 01 8A C3 B2 C0 E8 DB  // .e. ............
    90A0: F0 8B C8 EE B0 20 EE 8B EC 88 4E 0F E9 78 FF B3  // ..... ....N..x..
    90B0: 11 EB E4 8B FA E8 05 F4 B9 10 00 32 E4 B2 C0 8A  // ...........2....
    90C0: C4 9C FA EE 42 EC 26 88 05 FE C4 4A EE 9D 47 E2  // ....B.&....J..G.
    90D0: EE 9C FA B0 11 EE 42 EC 9D 26 88 05 E8 E3 F3 EB  // ......B..&......
    90E0: 5A E8 CE 00 C3 8B FA 51 8B C3 26 8A 35 26 8A 6D  // Z......Q..&.5&.m
    90F0: 01 26 8A 4D 02 E8 CA 00 83 C7 03 43 59 E2 E8 C3  // .&.M.......CY...
    9100: 0A DB 75 1A E8 B6 F3 B2 C0 B0 30 E8 6E F0 24 7F  // ..u.......0.n.$.
    9110: F6 C7 01 74 02 0C 80 B4 30 E8 70 EE EB 1D FE CB  // ...t....0.p.....
    9120: 75 1C E8 98 F3 B2 C0 B0 30 E8 50 F0 EE A8 80 75  // u.......0.P....u
    9130: 03 C0 E7 02 B4 34 8A C7 E8 51 EE E8 7F F3 C3 8A  // .....4...Q......
    9140: C3 E8 D1 00 8B EC 89 4E 16 88 76 13 C3 8B FA 51  // .......N..v....Q
    9150: 8B C3 E8 C3 00 26 88 35 26 88 6D 01 26 88 4D 02  // .....&.5&.m.&.M.
    9160: 83 C7 03 43 59 E2 E8 C3 BA C6 03 8A C3 EE C3 BA  // ...CY...........
    9170: C6 03 EC 32 E4 8B EC 89 46 0E C3 E8 3F F3 B2 C0  // ...2....F...?...
    9180: B0 34 E8 F7 EF 8A F8 EE B0 30 E8 EF EF B3 01 A8  // .4.......0......
    9190: 80 75 05 B3 00 C0 EF 02 8B EC 89 5E 0E EB 9C 51  // .u.........^...Q
    91A0: 8B C3 E8 73 00 E8 2A 00 8A C3 E8 52 00 43 59 E2  // ...s..*....R.CY.
    91B0: EE C3 F6 06 89 04 02 74 03 E8 16 00 8A C3 E8 39  // .......t.......9
    91C0: 00 C3 F6 06 89 04 02 74 03 E8 06 00 8A C3 E8 2E  // .......t........
    91D0: 00 C3 50 B0 1E F6 E6 50 B0 3B F6 E5 50 B0 0B F6  // ..P....P.;..P...
    91E0: E1 59 03 C1 59 03 C1 B1 64 F6 F1 80 FC 32 7C 02  // .Y..Y...d....2|.
    91F0: FE C0 8A F0 8A E8 8A C8 58 C3 52 E8 39 00 5A 53  // ........X.R.9.ZS
    9200: 8B DA BA C8 03 9C FA EE 42 8A C7 EE 8A C5 EE 8A  // ........B.......
    9210: C1 EE 9D 5B C3 E8 1F 00 53 9C FA BA C7 03 EE 42  // ...[....S......B
    9220: 42 EC 8A F8 EB 00 EB 00 EC 8A E8 EB 00 EB 00 EC  // B...............
    9230: 8A C8 8A F7 9D 5B C3 50 51 E8 81 F2 B9 FF 7F EC  // .....[.PQ.......
    9240: A8 08 75 02 E2 F9 59 58 C3 2E 8E 1E 7A 1B 8B F8  // ..u...YX....z...
    9250: 24 0F 81 E7 F0 00 C1 EF 03 83 FF 06 7F 18 2E FF  // $...............
    9260: A5 FB 91 03 92 18 92 B6 92 12 93 3C 03 74 08 3C  // ...........<.t.<
    9270: 04 7F 03 E8 CF 01 C3 BA C4 03 B0 03 8A E3 EF C3  // ................
    9280: 3C 04 77 F2 50 53 50 52 8B 16 63 04 B0 07 E8 EB  // <.w.PSPR..c.....
    9290: EE 8A E0 D0 EC 80 E4 01 A8 40 74 03 80 CC 02 B0  // .........@t.....
    92A0: 12 E8 D8 EE 40 A3 85 04 B0 09 E8 CF EE A8 80 74  // ....@..........t
    92B0: 04 D1 2E 85 04 A1 85 04 8B D0 3D F4 01 73 1B BA  // ..........=..s..
    92C0: E0 01 3D C2 01 73 13 BA 90 01 3D 7C 01 73 0B BA  // ..=..s....=|.s..
    92D0: 5E 01 3D 4A 01 73 03 BA C8 00 89 16 85 04 5A 58  // ^.=J.s........ZX
    92E0: C6 06 84 04 FF E8 5D 01 5B 58 8A DF 32 FF 0A C0  // ......].[X..2...
    92F0: 74 0E B3 0E 3C 01 74 08 B3 08 3C 02 74 02 B3 10  // t...<.t...<.t...
    9300: 8A CB 8A E9 81 E9 01 02 80 F9 08 7E 04 81 E9 01  // ...........~....
    9310: 01 87 1E 85 04 53 E8 5B F2 5B E8 85 02 C3 0A C0  // .....S.[.[......
    9320: 74 11 FE C8 74 1A FE C8 74 38 FE C8 74 3C FE C8  // t...t...t8..t<..
    9330: 74 40 C3 89 2E 7C 00 8C 06 7E 00 C3 8C C8 8E C0  // t@...|...~......
    9340: FE CA 0A DB 74 07 32 FF 2E 8A 97 F6 92 89 0E 85  // ....t.2.........
    9350: 04 88 16 84 04 89 2E 0C 01 8C 06 0E 01 C3 00 0D  // ................
    9360: 18 2A E8 09 03 B9 0E 00 EB D6 BD 06 62 B9 08 00  // .*..........b...
    9370: EB CA BD 19 6A B9 10 00 EB C2 0A C0 75 BD 8B 0E  // ....j.......u...
    9380: 85 04 8A 16 84 04 80 FF 07 77 35 80 FF 01 77 10  // .........w5...w.
    9390: 0A FF 75 06 C4 2E 7C 00 EB 26 C4 2E 0C 01 EB 20  // ..u...|..&..... 
    93A0: 80 FF 02 75 0B 8C CD 8E C5 2E 8B 2E F8 7A EB 10  // ...u.........z..
    93B0: 0E 07 8A DF 32 FF 80 EB 02 D1 E3 2E 8B AF 69 93  // ....2.........i.
    93C0: 8B C5 8B EC 89 4E 16 89 56 12 89 46 0A 8C 46 1E  // .....N..V..F..F.
    93D0: C3 19 6A 06 62 06 66 06 6A 19 6A 19 7A 53 06 8A  // ..j.b.f.j.j.zS..
    93E0: 26 49 04 E8 CD C3 26 8A 47 02 26 8A 67 33 F6 C4  // &I....&.G.&.g3..
    93F0: 01 74 22 BD 19 6A 3C 10 7D 0E E8 71 02 8C 06 0E  // .t"..j<.}..q....
    9400: 01 3C 0E 7D 07 BD 06 62 8C 0E 0E 01 89 2E 0C 01  // .<.}...b........
    9410: E8 10 01 EB 2D B4 84 3C 10 7D 13 B4 81 3C 0E 74  // ....-..<.}...<.t
    9420: 0D 7F 15 B4 02 3C 08 74 05 80 CC 80 EB 0A 26 F6  // .....<.t......&.
    9430: 47 05 01 74 03 80 E4 7F 86 C4 32 DB E8 06 00 E8  // G..t......2.....
    9440: C9 01 07 5B C3 8B F8 8B F2 BA CE 03 EC B8 05 00  // ...[............
    9450: EF B8 06 04 EF B2 C4 EC B8 02 04 EF B8 04 07 EF  // ................
    9460: 8B D6 8B C7 50 24 7F 0A C0 74 22 0E 07 33 D2 B9  // ....P$...t"..3..
    9470: 00 01 3C 04 75 07 B7 10 BD 19 6A EB 10 FE C8 75  // ..<.u.....j....u
    9480: 07 B7 0E E8 E8 01 EB 05 B7 08 BD 06 62 E8 2D 00  // ............b.-.
    9490: 58 A8 80 74 00 BA C4 03 B8 02 03 EF B8 04 02 EF  // X..t............
    94A0: B2 CC EC A8 01 B8 06 0E 75 02 B4 0A B2 CE 50 EC  // ........u.....P.
    94B0: 58 EF B0 04 EE 32 C0 EE B8 05 10 EF C3 FC 0B C9  // X....2..........
    94C0: 75 01 C3 80 FF 0E 75 0A 26 83 7E FE 10 75 03 80  // u.....u.&.~..u..
    94D0: CD 80 1E 06 1F 2E 8E 06 7C 1B 8B FA C1 E7 05 B0  // ........|.......
    94E0: 40 53 80 E3 03 F6 E3 5B F6 C3 04 74 02 04 20 86  // @S.....[...t.. .
    94F0: E0 8B D0 03 FA 8B F5 E3 28 32 C0 86 FB 32 FF 51  // ........(2...2.Q
    9500: F6 C5 80 74 01 46 8B CB F3 A4 83 FB 20 74 07 B9  // ...t.F...... t..
    9510: 20 00 2B CB F3 AA 59 F6 C5 80 74 01 46 FE C9 75  //  .+...Y...t.F..u
    9520: DE 1F C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4  // ....&I.P.W.>..&.
    9530: 7D 0C 8C C5 0B EF 74 30 8B EF 83 C7 07 26 8A 05  // }.....t0.....&..
    9540: 3C FF 74 24 38 E0 74 03 47 EB F2 8B FD 26 8A 05  // <.t$8.t.G....&..
    9550: FE C8 A2 84 04 26 8B 45 01 A3 85 04 26 C4 7D 03  // .....&.E....&.}.
    9560: 89 3E 0C 01 8C 06 0E 01 5F 07 58 C3 26 F6 47 33  // .>......_.X.&.G3
    9570: 01 74 01 C3 C4 1E A8 04 26 C4 5F 08 8C C0 0B C3  // .t......&._.....
    9580: 74 1F BF 0B 00 26 8A 01 3C FF 74 15 47 38 06 49  // t....&..<.t.G8.I
    9590: 04 75 F2 26 8A 07 32 E4 87 06 85 04 8B D8 E8 01  // .u.&..2.........
    95A0: 00 C3 8B 16 63 04 8A 26 85 04 FE CC 80 E4 1F 9C  // ....c..&........
    95B0: FA 80 FA D4 74 0B B0 14 EE 42 EC 24 E0 0A C4 EE  // ....t....B.$....
    95C0: 4A B0 09 EE 42 EC 24 E0 0A C4 EE 9D 8A C8 8B C3  // J...B.$.........
    95D0: 8A 16 85 04 F6 F2 80 3E 84 04 FF 75 07 A2 84 04  // .......>...u....
    95E0: FE 0E 84 04 F6 E2 F6 C1 80 74 02 D1 E0 48 8A E0  // .........t...H..
    95F0: B0 12 8B 16 63 04 EF A0 4A 04 8A 26 84 04 FE C4  // ....c...J..&....
    9600: F6 E4 D1 E0 05 00 01 A3 4C 04 C3 8A 26 49 04 50  // ........L...&I.P
    9610: 06 57 C4 3E A8 04 26 C4 7D 08 8C C5 0B EF 74 4A  // .W.>..&.}.....tJ
    9620: 8B EF 83 C7 0B 26 8A 05 3C FF 74 3E 38 E0 74 03  // .....&..<.t>8.t.
    9630: 47 EB F2 8B FD 26 8A 3D 26 8A 5D 01 26 8B 4D 02  // G....&.=&.].&.M.
    9640: 26 8B 55 04 26 8A 45 0A 3C FF 74 02 FE C8 50 A0  // &.U.&.E.<.t...P.
    9650: 84 04 FE C0 F6 26 85 04 A3 85 04 58 A2 84 04 26  // .....&.....X...&
    9660: C4 7D 06 8B EF 32 C0 E8 DB FD 5F 07 58 C3 50 53  // .}...2...._.X.PS
    9670: 51 52 2E A1 84 1B 0B C0 74 09 2E 8B 2E F8 7A 0E  // QR......t.....z.
    9680: 07 EB 08 B8 30 11 B7 02 E8 CD BE 5A 59 5B 58 C3  // ....0......ZY[X.
    9690: 3C 04 7C 01 C3 E3 FD 53 2E 8E 1E 7A 1B 86 FB 32  // <.|....S...z...2
    96A0: FF D1 E3 8B FB 81 C7 50 04 8B 35 5B 89 15 56 8B  // .......P..5[..V.
    96B0: F0 51 53 26 8A 46 00 45 3C 0D 7F 1F 75 04 32 D2  // .QS&.F.E<...u.2.
    96C0: EB 40 3C 0A 74 32 3C 07 75 05 E8 5B 87 EB 62 3C  // .@<.t2<.u..[..b<
    96D0: 08 75 08 0A D2 74 5A FE CA EB 27 F7 C6 02 00 74  // .u...tZ...'....t
    96E0: 05 26 8A 5E 00 45 B9 01 00 B4 09 E8 6A BE FE C2  // .&.^.E......j...
    96F0: 3A 16 4A 04 72 0C 32 D2 89 15 3A 36 84 04 73 06  // :.J.r.2...:6..s.
    9700: FE C6 89 15 EB 2B 50 E8 AD EA 75 08 B8 00 08 E8  // .....+P...u.....
    9710: 46 BE EB 09 80 3E 49 04 07 74 F1 32 E4 86 3E 62  // F....>I..t.2..>b
    9720: 04 53 8A FC 55 E8 25 00 5D 5B 86 3E 62 04 58 8B  // .S..U.%.][.>b.X.
    9730: 15 5B 59 E2 15 5A F7 C6 01 00 75 02 89 15 8B 05  // .[Y..Z....u.....
    9740: 3A 3E 62 04 75 03 E8 34 ED C3 E9 64 FF 33 C9 8A  // :>b.u..4...d.3..
    9750: 36 84 04 8A 16 4A 04 FE CA B8 01 06 E8 F9 BD C3  // 6....J..........
    9760: 2E 8E 1E 7A 1B 0A C0 75 0D E8 18 00 8B EC 89 5E  // ...z...u.......^
    9770: 0E C6 46 1A 1A C3 3C 01 75 09 E8 41 00 8B EC C6  // ..F...<.u..A....
    9780: 46 1A 1A C3 A0 8A 04 BF F6 97 2E 3A 05 72 04 BB  // F..........:.r..
    9790: FF FF C3 32 E4 D1 E0 03 F8 2E 8B 5D 04 0A DB 74  // ...2.......]...t
    97A0: 05 0A FF 75 04 C3 86 FB C3 A0 10 04 24 30 3C 30  // ...u........$0<0
    97B0: 74 06 F6 C3 01 75 EF C3 F6 C3 01 74 E9 C3 BF F6  // t....u.....t....
    97C0: 97 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D 74 12 86 FB  // ....2.....;.t...
    97D0: 2E 3B 1D 74 0B 83 C7 02 FE C0 38 C8 7E EB B0 FF  // .;.t......8.~...
    97E0: A2 8A 04 C3 BB 08 00 F6 06 89 04 02 74 0E BB 07  // ............t...
    97F0: 00 BA CC 03 EC A8 01 74 18 BB 08 00 BA B4 03 E8  // .......t........
    9800: DF EC 74 21 B7 01 E8 8C E9 80 FA D4 74 17 86 FB  // ..t!........t...
    9810: C3 BA D4 03 E8 CA EC 74 0C B7 02 E8 77 E9 80 FA  // .......t....w...
    9820: B4 74 02 86 FB C3 0F 08 0F 08 0F 08 0F 08 03 01  // .t..............
    9830: 03 01 01 01 00 08 01 01 01 01 01 01 01 01 0F 01  // ................
    9840: 0F 08 0F 04 00 02 0F 02 01 01 0F 01 FF 01 FF E0  // ................
    9850: 0F 00 00 00 00 07 02 08 FF 0E 00 00 3F 00 10 01  // ............?...
    9860: 08 00 00 00 00 01 00 02 02 01 00 04 04 01 00 05  // ................
    9870: 02 05 00 06 01 06 05 06 00 08 01 08 00 07 02 07  // ................
    9880: 06 07 CA 00 34 00 90 00 96 00 00 00 00 00 00 00  // ....4...........
    9890: 5F 57 C3 90 50 66 52 E8 F4 FF FF FF 81 EF 10 00  // _W..PfR.........
    98A0: 00 00 2E 8B 07 66 BA F8 0C EF 66 BA FC 0C ED 32  // .....f....f....2
    98B0: C0 66 8B F8 66 5A 58 C3 66 B8 4F 03 66 52 66 56  // .f..fZX.f.O.fRfV
    98C0: 53 57 50 0A FF 75 44 E8 C8 FF FF FF 66 33 F6 66  // SWP..uD.....f3.f
    98D0: BB 53 00 E8 48 00 00 00 C1 E8 10 F6 C4 40 75 2B  // .S..H........@u+
    98E0: 66 81 E2 FF 02 66 D1 E2 66 8B C2 66 40 C1 E0 10  // f....f..f..f@...
    98F0: 66 8B C2 66 BB 13 00 E8 30 00 00 00 66 BB 12 00  // f..f....0...f...
    9900: E8 27 00 00 00 66 58 32 E4 66 50 58 5F 5B 66 5E  // .'...fX2.fPX_[f^
    9910: 66 5A C3 90 66 B8 4F 03 C3 90 66 B8 4F 03 C3 90  // fZ..f.O...f.O...
    9920: 66 52 E8 11 00 00 00 ED 66 5A C3 90 66 52 E8 05  // fR......fZ..fR..
    9930: 00 00 00 EF 66 5A C3 90 66 8B D7 50 33 C0 66 8B  // ....fZ..f..P3.f.
    9940: C3 66 03 C6 C1 E0 02 EF 66 83 C2 04 58 C3 04 41  // .f......f...X..A
    9950: F7 40 F7 40 F7 40 E2 40 E2 40 E2 40 E2 40 24 3D  // .@.@.@.@.@.@.@$=
    9960: 9B 3D C5 3D 06 3F 05 3F 05 3F 4B 3F B0 3F E0 3F  // .=.=.?.?.?K?.?.?
    9970: 9D 40 C6 40 C6 40 3D 3F 30 3F 30 3F 30 3F 30 3F  // .@.@.@=?0?0?0?0?
    9980: 30 3F 4B 3F B0 3F E0 3F 9D 40 CB 40 11 41 C6 40  // 0?K?.?.?.@.@.A.@
    9990: C6 40 FF FF FF FF FF FF 00 00 FF FF 00 00 FF FF  // .@..............
    99A0: 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00 FF 00  // ................
    99B0: 00 00 00 00 08 10 00 08 10 18 00 08 10 18 28 3B  // ..............(;
    99C0: 01 28 3B 02 36 4F 03 16 4F 03 4D 3C 03 01 3C 03  // .(;.6O..O.M<..<.
    99D0: 29 3B 04 42 3B 04 52 3B 04 28 3B 03 00 00 00 00  // );.B;.R;.(;.....
    99E0: D5 42 00 02 D5 42 01 02 D5 42 02 02 D5 42 03 02  // .B...B...B...B..
    99F0: D5 42 04 02 D5 42 05 02 CF 44 00 02 CF 44 01 02  // .B...B...D...D..
    9A00: CF 44 02 02 CF 44 03 02 CF 44 04 02 CF 44 05 02  // .D...D...D...D..
    9A10: 04 45 00 02 04 45 01 02 04 45 02 02 04 45 03 02  // .E...E...E...E..
    9A20: 04 45 04 02 04 45 05 02 3F 47 00 02 3F 47 01 02  // .E...E..?G..?G..
    9A30: 3F 47 02 02 3F 47 03 02 3F 47 04 02 3F 47 05 02  // ?G..?G..?G..?G..
    9A40: 3F 47 00 02 3F 47 01 02 3F 47 02 02 3F 47 03 02  // ?G..?G..?G..?G..
    9A50: 3F 47 04 02 3F 47 05 02 06 46 00 02 06 46 01 02  // ?G..?G...F...F..
    9A60: 06 46 02 02 06 46 03 02 06 46 04 02 06 46 05 02  // .F...F...F...F..
    9A70: 42 46 00 02 42 46 01 02 42 46 02 02 42 46 03 02  // BF..BF..BF..BF..
    9A80: 42 46 04 02 42 46 05 02 B3 45 00 02 B3 45 01 02  // BF..BF...E...E..
    9A90: B3 45 02 02 B3 45 03 02 B3 45 04 02 B3 45 05 02  // .E...E...E...E..
    9AA0: E7 45 00 02 E7 45 01 02 E7 45 02 02 E7 45 03 02  // .E...E...E...E..
    9AB0: E7 45 04 02 E7 45 05 02 97 49 00 00 CA 49 01 00  // .E...E...I...I..
    9AC0: CA 49 02 00 B7 49 00 00 A5 48 00 02 9E 46 00 02  // .I...I...H...F..
    9AD0: 9E 46 01 02 9E 46 02 02 9E 46 03 02 9E 46 04 02  // .F...F...F...F..
    9AE0: 9E 46 05 02 BD 48 00 02 12 4B 05 00 12 4B 01 00  // .F...H...K...K..
    9AF0: 12 4B 00 00 12 4B 02 00 53 4B 00 00 53 4B 02 00  // .K...K..SK..SK..
    9B00: 98 4B 00 00 28 48 00 02 28 48 01 02 28 48 02 02  // .K..(H..(H..(H..
    9B10: 28 48 03 02 28 48 04 02 28 48 05 02 E4 49 00 00  // (H..(H..(H...I..
    9B20: 0C 4A 00 00 8D 4A 00 00 08 4B 00 00 EC 46 00 02  // .J...J...K...F..
    9B30: EC 46 01 02 EC 46 02 02 EC 46 03 02 EC 46 04 02  // .F...F...F...F..
    9B40: EC 46 05 02 07 4B 00 01 07 4B 00 01 0B 44 00 02  // .F...K...K...D..
    9B50: 0B 44 01 02 0B 44 02 02 0B 44 03 02 0B 44 04 02  // .D...D...D...D..
    9B60: 0B 44 05 02 2C 4A 00 00 08 4B 00 00 08 4B 00 00  // .D..,J...K...K..
    9B70: 08 4B 00 00 3D 49 00 00 2F 45 00 02 2F 45 01 02  // .K..=I../E../E..
    9B80: 2F 45 02 02 2F 45 03 02 2F 45 04 02 2F 45 05 02  // /E../E../E../E..
    9B90: 5E 45 00 02 5E 45 01 02 5E 45 02 02 5E 45 03 02  // ^E..^E..^E..^E..
    9BA0: 5E 45 04 02 5E 45 05 02 94 45 00 02 94 45 01 02  // ^E..^E...E...E..
    9BB0: 94 45 02 02 94 45 03 02 94 45 04 02 94 45 05 02  // .E...E...E...E..
    9BC0: 4F 4A 00 00 72 4A 00 00 30 46 01 02 30 46 02 02  // OJ..rJ..0F..0F..
    9BD0: 8C 46 01 02 8C 46 02 02 A6 00 02 01 16 9C 00 00  // .F...F..........
    9BE0: 00 00 00 00 00 00 00 00 40 9C 00 00 00 00 00 00  // ........@.......
    9BF0: 00 00 00 00 00 00 2A A1 00 00 00 00 00 00 00 00  // ......*.........
    9C00: 00 00 B4 9C 00 00 00 00 8C 9C 00 00 00 00 00 00  // ................
    9C10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 98 A1  // ................
    9C30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9C40: 00 00 00 00 00 00 56 A3 00 00 00 00 00 00 00 00  // ......V.........
    9C50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9C60: 08 9D 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9C70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 29 00  // ..............).
    9C80: 02 01 00 00 37 00 00 52 0D 03 00 41 E3 0D 33 05  // ....7..R...A..3.
    9C90: 41 01 00 00 00 1B 05 41 0B 01 02 06 00 41 0D 05  // A......A.....A..
    9CA0: 53 00 00 02 00 00 5B 00 4B 00 01 01 00 00 37 00  // S.....[.K.....7.
    9CB0: 00 42 21 00 63 00 1F 00 63 01 39 00 63 03 3F 00  // .B!.c...c.9.c.?.
    9CC0: 63 02 45 00 5A 5A 5B 03 05 40 00 00 05 04 2D 19  // c.E.ZZ[..@....-.
    9CD0: 40 00 15 05 40 02 01 02 0C 00 40 02 00 00 0D 00  // @...@.....@.....
    9CE0: 5B 02 00 00 E3 0D 5B 02 00 00 E7 0D 5B 02 00 00  // [.....[.....[...
    9CF0: E8 0D 5B 00 28 00 02 01 00 00 37 00 00 01 05 00  // ..[.(.....7.....
    9D00: 00 EC A8 01 00 02 00 00 01 00 02 01 01 00 01 05  // ................
    9D10: 00 00 ED A8 01 00 02 00 02 01 00 5B 54 00 01 02  // ...........[T...
    9D20: 00 00 37 00 00 01 05 00 00 9B 62 01 00 54 00 01  // ..7.......b..T..
    9D30: 00 01 05 00 00 93 62 01 00 01 01 01 00 01 56 00  // ......b.......V.
    9D40: 41 03 09 41 00 01 05 00 00 83 62 01 00 01 02 01  // A..A......b.....
    9D50: 00 41 01 05 00 00 9B 62 01 00 3C 25 01 00 00 44  // .A.....b..<%...D
    9D60: 36 00 01 05 00 00 93 62 01 00 02 00 01 01 00 5B  // 6......b.......[
    9D70: 21 04 01 01 04 00 37 00 00 3D 25 00 00 44 F5 00  // !.....7..=%..D..
    9D80: 4A 05 A3 36 02 00 00 00 44 20 04 03 05 00 32 00  // J..6....D ....2.
    9D90: 00 00 03 00 40 97 36 03 05 46 00 31 00 00 04 02  // ....@.6..F.1....
    9DA0: 04 40 03 03 41 05 3E 02 40 41 48 4C 00 33 02 41  // .@..A.>.@AHL.3.A
    9DB0: 40 03 03 40 06 33 02 40 41 43 50 00 33 02 40 41  // @..@.3.@ACP.3.@A
    9DC0: 3E 05 40 00 00 00 00 44 70 00 33 05 00 01 00 00  // >.@....Dp.3.....
    9DD0: 00 3E 05 00 00 00 00 00 44 20 04 51 14 43 22 00  // .>......D .Q.C".
    9DE0: 03 03 40 05 03 02 41 40 2D 05 40 00 00 00 00 03  // ..@...A@-.@.....
    9DF0: 02 46 40 04 01 00 00 04 01 01 01 04 01 02 02 04  // .F@.............
    9E00: 01 03 03 04 01 04 04 04 01 05 05 04 01 06 06 2D  // ...............-
    9E10: 05 41 40 00 00 00 3E 05 41 00 20 00 00 45 B7 00  // .A@...>.A. ..E..
    9E20: 27 05 41 00 20 00 00 03 05 46 00 31 00 00 04 02  // '.A. ....F.1....
    9E30: 05 41 01 02 96 36 41 03 05 00 80 1A 06 00 03 00  // .A...6A.........
    9E40: 41 97 36 03 00 40 96 36 3E 02 41 40 44 20 04 33  // A.6..@.6>.A@D .3
    9E50: 05 00 01 00 00 00 3E 05 00 00 00 00 00 44 20 04  // ......>......D .
    9E60: 51 14 43 CE 00 3D 65 00 01 44 32 01 4A 05 B6 36  // Q.C..=e..D2.J..6
    9E70: 00 00 01 00 49 32 01 4A 05 B6 36 00 00 02 00 44  // ....I2.J..6....D
    9E80: 32 01 01 05 00 00 61 60 01 00 01 05 01 00 00 00  // 2.....a`........
    9E90: 06 00 01 05 00 00 61 60 01 00 3C E5 01 00 80 49  // ......a`..<....I
    9EA0: 2A 01 4A 05 B6 36 00 00 02 00 49 D1 01 01 05 B8  // *.J..6....I.....
    9EB0: 36 00 00 02 10 03 05 41 0A 00 00 00 33 05 41 01  // 6......A....3.A.
    9EC0: 00 00 00 3E 05 41 00 00 00 00 44 8F 01 51 0A 3C  // ...>.A....D..Q.<
    9ED0: 05 B8 36 00 00 02 00 49 4C 01 03 05 41 04 00 00  // ..6....IL...A...
    9EE0: 00 51 0A 33 05 41 01 00 00 00 3E 05 41 00 00 00  // .Q.3.A....>.A...
    9EF0: 00 44 8F 01 3C 05 AA 36 AD DE AD DE 49 71 01 01  // .D..<..6....Iq..
    9F00: 05 B8 36 00 00 00 00 0D 05 B6 36 00 00 02 00 07  // ..6.......6.....
    9F10: 05 B6 36 FF FF FE FF 0D 05 01 38 00 01 00 00 51  // ..6.......8....Q
    9F20: 0A 01 05 97 36 00 00 00 00 01 05 96 36 00 00 00  // ....6.......6...
    9F30: 00 01 05 A3 36 00 00 00 00 07 05 01 38 FF FE FF  // ....6.......8...
    9F40: FF 66 0B 03 04 00 04 00 02 02 04 00 15 05 00 0A  // .f..............
    9F50: 1A 05 04 16 02 05 00 00 00 00 00 02 02 01 00 2C  // ...............,
    9F60: 05 01 00 00 02 00 55 00 02 02 89 02 04 02 05 03  // ......U.........
    9F70: 00 00 05 D0 52 35 02 05 00 00 00 00 00 02 02 01  // ....R5..........
    9F80: 00 2C 05 01 00 00 00 00 55 00 02 02 89 02 04 02  // .,......U.......
    9F90: 05 03 00 20 00 D0 52 35 66 16 3E 0D 42 00 00 44  // ... ..R5f.>.B..D
    9FA0: 9B 02 56 00 41 03 0C 41 00 00 2D 05 41 0F 00 00  // ..V.A..A..-.A...
    9FB0: 00 09 05 41 F0 FF 00 00 2D 0A 41 42 03 05 46 00  // ...A....-.AB..F.
    9FC0: 80 00 00 56 08 42 04 04 00 00 00 2D 05 46 04 00  // ...V.B.....-.F..
    9FD0: 00 00 2D 05 42 04 00 00 00 3E 02 42 41 45 56 02  // ..-.B....>.BAEV.
    9FE0: 02 05 00 00 80 00 00 2C 02 00 00 02 02 01 00 2C  // .......,.......,
    9FF0: 05 01 00 00 02 00 02 89 02 04 02 09 02 04 02 05  // ................
    A000: 03 00 00 00 40 02 0A 03 41 52 35 52 16 02 01 02  // ....@...AR5R....
    A010: 00 14 05 00 18 1A 05 02 08 03 02 41 00 2D 05 41  // ...........A.-.A
    A020: 00 00 02 00 2D 01 41 00 01 02 7B 36 41 03 01 40  // ....-.A...{6A..@
    A030: 04 2D 01 40 02 01 02 7C 36 40 01 05 68 36 00 00  // .-.@...|6@..h6..
    A040: 00 03 01 05 70 36 FF FF 01 83 03 02 41 00 2D 05  // ....p6......A.-.
    A050: 41 00 00 04 00 2D 01 41 00 01 02 7D 36 41 03 01  // A....-.A...}6A..
    A060: 40 04 2D 01 40 02 01 02 7E 36 40 01 05 69 36 00  // @.-.@...~6@..i6.
    A070: 00 00 04 01 05 71 36 FF FF 00 84 03 02 41 00 2D  // .....q6......A.-
    A080: 05 41 00 00 05 00 2D 01 41 00 01 02 7F 36 41 03  // .A....-.A....6A.
    A090: 01 40 04 2D 01 40 02 01 02 80 36 40 01 05 6A 36  // .@.-.@....6@..j6
    A0A0: 00 00 00 05 01 05 72 36 FF FF 00 85 03 02 41 00  // ......r6......A.
    A0B0: 2D 05 41 00 00 06 00 2D 01 41 00 01 02 81 36 41  // -.A....-.A....6A
    A0C0: 03 01 40 04 2D 01 40 02 01 02 82 36 40 01 05 6B  // ..@.-.@....6@..k
    A0D0: 36 00 00 00 06 01 05 73 36 FF FF 00 86 03 05 46  // 6......s6......F
    A0E0: 00 31 00 00 03 02 41 00 2D 05 41 00 00 00 00 2D  // .1....A.-.A....-
    A0F0: 01 41 00 03 01 40 04 2D 01 40 02 04 02 00 41 04  // .A...@.-.@....A.
    A100: 02 01 40 04 05 04 00 00 00 00 04 05 05 00 00 00  // ..@.............
    A110: 00 04 05 06 00 20 00 00 01 05 94 36 00 00 00 80  // ..... .....6....
    A120: 01 05 95 36 00 20 00 00 01 02 56 36 41 01 02 57  // ...6. ....V6A..W
    A130: 36 40 01 05 61 36 FF FF 00 80 01 05 97 36 00 00  // 6@..a6.......6..
    A140: 00 00 01 05 96 36 00 00 00 00 03 00 41 96 36 01  // .....6......A.6.
    A150: 05 B1 36 00 00 00 00 5C 05 B6 36 00 FF FF FF C6  // ..6....\..6.....
    A160: 00 09 00 07 05 B6 36 FF FF FD FF 03 05 41 50 C3  // ......6......AP.
    A170: 00 00 4A 05 A3 36 02 00 00 00 49 20 04 51 14 33  // ..J..6....I .Q.3
    A180: 05 41 01 00 00 00 3E 05 41 00 00 00 00 49 02 04  // .A....>.A....I..
    A190: 5B 00 6D 00 02 01 00 04 37 00 00 66 16 03 0C 41  // [.m.....7..f...A
    A1A0: 04 00 4C 0D 41 02 00 44 1D 00 0D A5 4C 00 02 52  // ..L.A..D....L..R
    A1B0: 16 01 01 53 39 02 01 01 54 39 03 01 05 00 00 D7  // ...S9...T9......
    A1C0: A8 01 00 01 00 55 39 01 00 03 01 41 01 15 05 41  // .....U9....A...A
    A1D0: 18 01 02 C4 00 41 03 01 41 01 1B 05 41 08 01 02  // .....A..A...A...
    A1E0: C9 00 41 03 00 41 55 39 01 02 59 39 41 03 01 40  // ..A..AU9..Y9A..@
    A1F0: 03 33 01 40 02 2D 02 40 41 01 02 5A 39 40 5B 00  // .3.@.-.@A..Z9@[.
    A200: BD 01 03 01 04 00 37 00 00 66 08 03 05 46 C0 12  // ......7..f...F..
    A210: 00 00 3D A5 00 02 49 1E 00 02 02 00 46 5B 03 05  // ..=...I.....F[..
    A220: 40 0C 00 00 00 21 21 40 00 66 FF 2D 0D 42 81 01  // @....!!@.f.-.B..
    A230: 2D 0A 42 40 03 04 40 00 00 03 04 41 04 00 03 04  // -.B@..@....A....
    A240: 00 08 00 01 02 00 00 40 03 88 40 01 00 03 18 40  // .......@..@....@
    A250: 01 00 09 8D 40 FF 01 3E 8D 40 00 00 49 99 00 01  // ....@..>.@..I...
    A260: 02 00 00 41 03 00 40 01 00 09 05 40 FF 01 00 00  // ...A..@....@....
    A270: 3E 0D 40 00 00 49 82 00 03 05 46 00 71 02 00 43  // >.@..I....F.q..C
    A280: BC 00 21 02 40 46 03 00 41 01 00 09 05 41 00 1E  // ..!.@F..A....A..
    A290: 00 00 1B 05 41 09 43 B4 00 7C 02 40 46 7E 05 40  // ....A.C..|.@F~.@
    A2A0: 00 00 01 00 03 00 41 01 00 09 05 41 00 F0 00 00  // ......A....A....
    A2B0: 1B 05 41 0C 75 02 40 41 03 02 46 40 3D A5 00 01  // ..A.u.@A..F@=...
    A2C0: 49 C8 00 02 02 00 46 5B 3D E5 00 00 49 0B 01 56  // I.....F[=...I..V
    A2D0: 00 40 03 29 40 00 21 0D 40 0A 00 03 02 41 00 2D  // .@.)@.!.@....A.-
    A2E0: 02 40 41 01 02 00 00 40 03 00 41 01 00 09 05 41  // .@A....@..A....A
    A2F0: 00 00 F0 07 1B 05 41 14 02 E2 00 41 3D E5 00 00  // ......A....A=...
    A300: 49 0B 01 02 05 00 00 46 C3 23 5B 56 00 40 03 39  // I......F.#[V.@.9
    A310: 40 00 55 38 00 66 FF 2D 0D 42 59 01 3E 0C 40 02  // @.U8.f.-.BY.>.@.
    A320: 00 47 2C 01 2D 0D 42 08 00 43 1C 01 33 0C 40 04  // .G,.-.B..C..3.@.
    A330: 00 21 0C 40 06 00 2D 0C 40 00 00 03 09 42 00 55  // .!.@..-.@....B.U
    A340: 00 00 02 0A 00 40 7C 05 46 40 42 0F 00 7E 01 40  // .....@|.F@B..~.@
    A350: 00 02 02 00 40 5B 7A 64 00 FF FF 07 00 00 00 00  // ....@[zd........
    A360: 00 C8 00 3F 00 08 00 19 00 40 06 5F 00 40 00 32  // ...?.....@._.@.2
    A370: 00 80 0C 7E 00 60 00 64 00 00 32 7F 00 7F 00 64  // ...~.`.d..2....d
    A380: 00 0F 6C 01 00 00 6C 01 00 4A 6C 01 00 10 72 01  // ..l...l..Jl...r.
    A390: 00 00 72 01 00 4B 72 01 00 0C 7E 01 00 00 7E 01  // ..r..Kr...~...~.
    A3A0: 00 47 7E 01 00 0C B0 01 00 00 B0 01 00 47 B0 01  // .G~..........G..
    A3B0: 00 0C B2 01 00 00 B2 01 00 47 B2 01 00 00 D5 00  // .........G......
    A3C0: 03 03 0C 00 37 00 00 66 04 03 04 46 28 00 3E 05  // ....7..f...F(.>.
    A3D0: 46 00 00 00 00 49 3C 00 03 01 00 00 03 01 01 01  // F....I<.........
    A3E0: 03 01 02 02 52 16 03 01 46 00 1B 05 46 08 02 02  // ....R...F...F...
    A3F0: 00 00 02 02 01 01 02 02 02 02 3D 65 02 00 49 47  // ..........=e..IG
    A400: 00 2C 22 02 46 3D E5 02 00 49 52 00 2C A2 02 46  // .,".F=...IR.,..F
    A410: 03 01 40 03 09 05 40 00 00 00 FC 3E 05 40 00 00  // ..@...@....>.@..
    A420: 00 D0 49 75 00 01 05 63 C0 00 00 00 40 55 20 02  // ..Iu...c....@U .
    A430: 43 79 00 54 00 63 C0 01 01 64 C0 00 56 00 40 03  // Cy.T.c...d..V.@.
    A440: 21 40 02 01 02 65 C0 40 01 01 66 C0 01 03 31 40  // !@...e.@..f...1@
    A450: 02 01 02 67 C0 40 01 01 E8 C0 03 3D 65 02 01 44  // ...g.@.....=e..D
    A460: CC 00 3D E5 02 01 44 CC 00 51 02 56 00 40 4A E5  // ..=...D..Q.V.@J.
    A470: A0 21 80 44 D4 00 51 14 2D 05 40 01 00 00 00 3E  // .!.D..Q.-.@....>
    A480: 05 40 A0 86 01 00 45 B0 00 5B 4A E5 A0 21 80 49  // .@....E..[J..!.I
    A490: CC 00 5B FF FF FF FF FF FF FF FF FF FF FF FF FF  // ..[.............
    A4A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A4B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A4C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A4D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A4E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A4F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A500: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A510: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A520: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A530: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A540: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A550: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A560: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A570: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A580: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A590: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A5A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A5B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A5C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A5D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A5E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A5F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A600: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A610: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A620: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A630: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A640: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A650: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    A660: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    A670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A680: 00 00 00 00                                      // ....


WDAT
----
[000h 0000 004h]                   Signature : "WDAT"    [Watchdog Action Table]
[004h 0004 004h]                Table Length : 0000017C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 4D
[00Ah 0010 006h]                      Oem ID : "AMDYDE"
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]               Header Length : 00000020
[028h 0040 002h]                 PCI Segment : 00FF
[02Ah 0042 001h]                     PCI Bus : FF
[02Bh 0043 001h]                  PCI Device : FF
[02Ch 0044 001h]                PCI Function : FF
[02Dh 0045 003h]                    Reserved : 000000
[030h 0048 004h]                Timer Period : 000003E8
[034h 0052 004h]                   Max Count : 000003FF
[038h 0056 004h]                   Min Count : 00000002
[03Ch 0060 001h]       Flags (decoded below) : 81
                                     Enabled : 1
                         Stopped When Asleep : 1
[03Dh 0061 003h]                    Reserved : 000000
[040h 0064 004h]        Watchdog Entry Count : 0000000D

[044h 0068 001h]             Watchdog Action : 01
[045h 0069 001h]                 Instruction : 82
[046h 0070 002h]                    Reserved : 0000

[048h 0072 00Ch]             Register Region : [Generic Address Structure]
[048h 0072 001h]                    Space ID : 00 [SystemMemory]
[049h 0073 001h]                   Bit Width : 20
[04Ah 0074 001h]                  Bit Offset : 00
[04Bh 0075 001h]        Encoded Access Width : 03 [DWord Access:32]
[04Ch 0076 008h]                     Address : 00000000FEB00000

[054h 0084 004h]                       Value : 00000080
[058h 0088 004h]               Register Mask : 00000080

[05Ch 0092 001h]             Watchdog Action : 04
[05Dh 0093 001h]                 Instruction : 01
[05Eh 0094 002h]                    Reserved : 0000

[060h 0096 00Ch]             Register Region : [Generic Address Structure]
[060h 0096 001h]                    Space ID : 00 [SystemMemory]
[061h 0097 001h]                   Bit Width : 20
[062h 0098 001h]                  Bit Offset : 00
[063h 0099 001h]        Encoded Access Width : 03 [DWord Access:32]
[064h 0100 008h]                     Address : 00000000FEB00004

[06Ch 0108 004h]                       Value : 00000000
[070h 0112 004h]               Register Mask : 0000FFFF

[074h 0116 001h]             Watchdog Action : 06
[075h 0117 001h]                 Instruction : 83
[076h 0118 002h]                    Reserved : 0000

[078h 0120 00Ch]             Register Region : [Generic Address Structure]
[078h 0120 001h]                    Space ID : 00 [SystemMemory]
[079h 0121 001h]                   Bit Width : 20
[07Ah 0122 001h]                  Bit Offset : 00
[07Bh 0123 001h]        Encoded Access Width : 03 [DWord Access:32]
[07Ch 0124 008h]                     Address : 00000000FEB00004

[084h 0132 004h]                       Value : 00000000
[088h 0136 004h]               Register Mask : 0000FFFF

[08Ch 0140 001h]             Watchdog Action : 08
[08Dh 0141 001h]                 Instruction : 00
[08Eh 0142 002h]                    Reserved : 0000

[090h 0144 00Ch]             Register Region : [Generic Address Structure]
[090h 0144 001h]                    Space ID : 00 [SystemMemory]
[091h 0145 001h]                   Bit Width : 20
[092h 0146 001h]                  Bit Offset : 00
[093h 0147 001h]        Encoded Access Width : 03 [DWord Access:32]
[094h 0148 008h]                     Address : 00000000FEB00000

[09Ch 0156 004h]                       Value : 00000001
[0A0h 0160 004h]               Register Mask : 00000001

[0A4h 0164 001h]             Watchdog Action : 09
[0A5h 0165 001h]                 Instruction : 82
[0A6h 0166 002h]                    Reserved : 0000

[0A8h 0168 00Ch]             Register Region : [Generic Address Structure]
[0A8h 0168 001h]                    Space ID : 00 [SystemMemory]
[0A9h 0169 001h]                   Bit Width : 20
[0AAh 0170 001h]                  Bit Offset : 00
[0ABh 0171 001h]        Encoded Access Width : 03 [DWord Access:32]
[0ACh 0172 008h]                     Address : 00000000FEB00000

[0B4h 0180 004h]                       Value : 00000001
[0B8h 0184 004h]               Register Mask : 00000001

[0BCh 0188 001h]             Watchdog Action : 0A
[0BDh 0189 001h]                 Instruction : 00
[0BEh 0190 002h]                    Reserved : 0000

[0C0h 0192 00Ch]             Register Region : [Generic Address Structure]
[0C0h 0192 001h]                    Space ID : 00 [SystemMemory]
[0C1h 0193 001h]                   Bit Width : 20
[0C2h 0194 001h]                  Bit Offset : 00
[0C3h 0195 001h]        Encoded Access Width : 03 [DWord Access:32]
[0C4h 0196 008h]                     Address : 00000000FEB00000

[0CCh 0204 004h]                       Value : 00000000
[0D0h 0208 004h]               Register Mask : 00000001

[0D4h 0212 001h]             Watchdog Action : 0B
[0D5h 0213 001h]                 Instruction : 82
[0D6h 0214 002h]                    Reserved : 0000

[0D8h 0216 00Ch]             Register Region : [Generic Address Structure]
[0D8h 0216 001h]                    Space ID : 00 [SystemMemory]
[0D9h 0217 001h]                   Bit Width : 20
[0DAh 0218 001h]                  Bit Offset : 00
[0DBh 0219 001h]        Encoded Access Width : 03 [DWord Access:32]
[0DCh 0220 008h]                     Address : 00000000FEB00000

[0E4h 0228 004h]                       Value : 00000000
[0E8h 0232 004h]               Register Mask : 00000001

[0ECh 0236 001h]             Watchdog Action : 10
[0EDh 0237 001h]                 Instruction : 00
[0EEh 0238 002h]                    Reserved : 0000

[0F0h 0240 00Ch]             Register Region : [Generic Address Structure]
[0F0h 0240 001h]                    Space ID : 00 [SystemMemory]
[0F1h 0241 001h]                   Bit Width : 20
[0F2h 0242 001h]                  Bit Offset : 00
[0F3h 0243 001h]        Encoded Access Width : 03 [DWord Access:32]
[0F4h 0244 008h]                     Address : 00000000FEB00000

[0FCh 0252 004h]                       Value : 00000000
[100h 0256 004h]               Register Mask : 00000004

[104h 0260 001h]             Watchdog Action : 11
[105h 0261 001h]                 Instruction : 82
[106h 0262 002h]                    Reserved : 0000

[108h 0264 00Ch]             Register Region : [Generic Address Structure]
[108h 0264 001h]                    Space ID : 00 [SystemMemory]
[109h 0265 001h]                   Bit Width : 20
[10Ah 0266 001h]                  Bit Offset : 00
[10Bh 0267 001h]        Encoded Access Width : 03 [DWord Access:32]
[10Ch 0268 008h]                     Address : 00000000FEB00000

[114h 0276 004h]                       Value : 00000000
[118h 0280 004h]               Register Mask : 00000004

[11Ch 0284 001h]             Watchdog Action : 12
[11Dh 0285 001h]                 Instruction : 00
[11Eh 0286 002h]                    Reserved : 0000

[120h 0288 00Ch]             Register Region : [Generic Address Structure]
[120h 0288 001h]                    Space ID : 00 [SystemMemory]
[121h 0289 001h]                   Bit Width : 20
[122h 0290 001h]                  Bit Offset : 00
[123h 0291 001h]        Encoded Access Width : 03 [DWord Access:32]
[124h 0292 008h]                     Address : 00000000FEB00000

[12Ch 0300 004h]                       Value : 00000004
[130h 0304 004h]               Register Mask : 00000004

[134h 0308 001h]             Watchdog Action : 13
[135h 0309 001h]                 Instruction : 82
[136h 0310 002h]                    Reserved : 0000

[138h 0312 00Ch]             Register Region : [Generic Address Structure]
[138h 0312 001h]                    Space ID : 00 [SystemMemory]
[139h 0313 001h]                   Bit Width : 20
[13Ah 0314 001h]                  Bit Offset : 00
[13Bh 0315 001h]        Encoded Access Width : 03 [DWord Access:32]
[13Ch 0316 008h]                     Address : 00000000FEB00000

[144h 0324 004h]                       Value : 00000004
[148h 0328 004h]               Register Mask : 00000004

[14Ch 0332 001h]             Watchdog Action : 20
[14Dh 0333 001h]                 Instruction : 00
[14Eh 0334 002h]                    Reserved : 0000

[150h 0336 00Ch]             Register Region : [Generic Address Structure]
[150h 0336 001h]                    Space ID : 00 [SystemMemory]
[151h 0337 001h]                   Bit Width : 20
[152h 0338 001h]                  Bit Offset : 00
[153h 0339 001h]        Encoded Access Width : 03 [DWord Access:32]
[154h 0340 008h]                     Address : 00000000FEB00000

[15Ch 0348 004h]                       Value : 00000002
[160h 0352 004h]               Register Mask : 00000002

[164h 0356 001h]             Watchdog Action : 21
[165h 0357 001h]                 Instruction : 82
[166h 0358 002h]                    Reserved : 0000

[168h 0360 00Ch]             Register Region : [Generic Address Structure]
[168h 0360 001h]                    Space ID : 00 [SystemMemory]
[169h 0361 001h]                   Bit Width : 20
[16Ah 0362 001h]                  Bit Offset : 00
[16Bh 0363 001h]        Encoded Access Width : 03 [DWord Access:32]
[16Ch 0364 008h]                     Address : 00000000FEB00000

[174h 0372 004h]                       Value : 00000002
[178h 0376 004h]               Register Mask : 00000002

Raw Table Data: Length 380 (0x17C)

    0000: 57 44 41 54 7C 01 00 00 01 4D 41 4D 44 59 44 45  // WDAT|....MAMDYDE
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 20 00 00 00 FF 00 FF FF FF 00 00 00  // .... ...........
    0030: E8 03 00 00 FF 03 00 00 02 00 00 00 81 00 00 00  // ................
    0040: 0D 00 00 00 01 82 00 00 00 20 00 03 00 00 B0 FE  // ......... ......
    0050: 00 00 00 00 80 00 00 00 80 00 00 00 04 01 00 00  // ................
    0060: 00 20 00 03 04 00 B0 FE 00 00 00 00 00 00 00 00  // . ..............
    0070: FF FF 00 00 06 83 00 00 00 20 00 03 04 00 B0 FE  // ......... ......
    0080: 00 00 00 00 00 00 00 00 FF FF 00 00 08 00 00 00  // ................
    0090: 00 20 00 03 00 00 B0 FE 00 00 00 00 01 00 00 00  // . ..............
    00A0: 01 00 00 00 09 82 00 00 00 20 00 03 00 00 B0 FE  // ......... ......
    00B0: 00 00 00 00 01 00 00 00 01 00 00 00 0A 00 00 00  // ................
    00C0: 00 20 00 03 00 00 B0 FE 00 00 00 00 00 00 00 00  // . ..............
    00D0: 01 00 00 00 0B 82 00 00 00 20 00 03 00 00 B0 FE  // ......... ......
    00E0: 00 00 00 00 00 00 00 00 01 00 00 00 10 00 00 00  // ................
    00F0: 00 20 00 03 00 00 B0 FE 00 00 00 00 00 00 00 00  // . ..............
    0100: 04 00 00 00 11 82 00 00 00 20 00 03 00 00 B0 FE  // ......... ......
    0110: 00 00 00 00 00 00 00 00 04 00 00 00 12 00 00 00  // ................
    0120: 00 20 00 03 00 00 B0 FE 00 00 00 00 04 00 00 00  // . ..............
    0130: 04 00 00 00 13 82 00 00 00 20 00 03 00 00 B0 FE  // ......... ......
    0140: 00 00 00 00 04 00 00 00 04 00 00 00 20 00 00 00  // ............ ...
    0150: 00 20 00 03 00 00 B0 FE 00 00 00 00 02 00 00 00  // . ..............
    0160: 02 00 00 00 21 82 00 00 00 20 00 03 00 00 B0 FE  // ....!.... ......
    0170: 00 00 00 00 02 00 00 00 02 00 00 00              // ............


WDRT
----
[000h 0000 004h]                   Signature : "WDRT"    [Watchdog Resource Table]
[004h 0004 004h]                Table Length : 00000047
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : F8
[00Ah 0010 006h]                      Oem ID : "AMD   "
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


[024h 0036 00Ch]            Control Register : [Generic Address Structure]
[024h 0036 001h]                    Space ID : 00 [SystemMemory]
[025h 0037 001h]                   Bit Width : 20
[026h 0038 001h]                  Bit Offset : 00
[027h 0039 001h]        Encoded Access Width : 03 [DWord Access:32]
[028h 0040 008h]                     Address : 00000000FEB00000

[030h 0048 00Ch]              Count Register : [Generic Address Structure]
[030h 0048 001h]                    Space ID : 00 [SystemMemory]
[031h 0049 001h]                   Bit Width : 20
[032h 0050 001h]                  Bit Offset : 00
[033h 0051 001h]        Encoded Access Width : 03 [DWord Access:32]
[034h 0052 008h]                     Address : 00000000FEB00004

[03Ch 0060 002h]               PCI Device ID : FFFF
[03Eh 0062 002h]               PCI Vendor ID : FFFF
[040h 0064 001h]                     PCI Bus : 00
[041h 0065 001h]                  PCI Device : 00
[042h 0066 001h]                PCI Function : 00
[043h 0067 001h]                 PCI Segment : 00
[044h 0068 002h]                   Max Count : 03FF
[046h 0070 001h]               Counter Units : 00

Raw Table Data: Length 71 (0x47)

    0000: 57 44 52 54 47 00 00 00 01 F8 41 4D 44 20 20 20  // WDRTG.....AMD   
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 00 20 00 03 00 00 B0 FE 00 00 00 00  // ..... ..........
    0030: 00 20 00 03 04 00 B0 FE 00 00 00 00 FF FF FF FF  // . ..............
    0040: 00 00 00 00 FF 03 00                             // .......


WSMT
----
[000h 0000 004h]                   Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 29
[00Ah 0010 006h]                      Oem ID : "AMDYDE"
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]            Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 29 41 4D 44 59 44 45  // WSMT(....)AMDYDE
    0010: 45 44 4B 32 20 20 20 20 01 00 00 00 41 43 50 49  // EDK2    ....ACPI
    0020: 00 00 04 00 07 00 00 00                          // ........


